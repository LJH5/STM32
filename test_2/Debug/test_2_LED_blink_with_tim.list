
test_2_LED_blink_with_tim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c9c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e60  08003e60  00004e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e78  08003e78  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e78  08003e78  00004e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e80  08003e80  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e80  08003e80  00004e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e84  08003e84  00004e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e88  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000624  2000000c  08003e94  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08003e94  00005630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fd0  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023a9  00000000  00000000  0001600c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000183b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c04  00000000  00000000  00019310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021aab  00000000  00000000  00019f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122e9  00000000  00000000  0003b9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf6fa  00000000  00000000  0004dca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d3a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041dc  00000000  00000000  0011d3e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  001215c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003e48 	.word	0x08003e48

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003e48 	.word	0x08003e48

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fc8a 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f81e 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f9ca 	bl	8000898 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000504:	f000 f970 	bl	80007e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000508:	f000 f998 	bl	800083c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800050c:	f000 f882 	bl	8000614 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000510:	f000 f8ce 	bl	80006b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000514:	f000 f91a 	bl	800074c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000518:	4805      	ldr	r0, [pc, #20]	@ (8000530 <main+0x3c>)
 800051a:	f002 fa85 	bl	8002a28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800051e:	4805      	ldr	r0, [pc, #20]	@ (8000534 <main+0x40>)
 8000520:	f002 fa82 	bl	8002a28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000524:	4804      	ldr	r0, [pc, #16]	@ (8000538 <main+0x44>)
 8000526:	f002 fa7f 	bl	8002a28 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	bf00      	nop
 800052c:	e7fd      	b.n	800052a <main+0x36>
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028
 8000534:	20000070 	.word	0x20000070
 8000538:	200000b8 	.word	0x200000b8

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	@ 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 031c 	add.w	r3, r7, #28
 8000546:	2234      	movs	r2, #52	@ 0x34
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fc4f 	bl	8003dee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 0308 	add.w	r3, r7, #8
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b29      	ldr	r3, [pc, #164]	@ (800060c <SystemClock_Config+0xd0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	4a28      	ldr	r2, [pc, #160]	@ (800060c <SystemClock_Config+0xd0>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000570:	4b26      	ldr	r3, [pc, #152]	@ (800060c <SystemClock_Config+0xd0>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	4b23      	ldr	r3, [pc, #140]	@ (8000610 <SystemClock_Config+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a22      	ldr	r2, [pc, #136]	@ (8000610 <SystemClock_Config+0xd4>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b20      	ldr	r3, [pc, #128]	@ (8000610 <SystemClock_Config+0xd4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000598:	2301      	movs	r3, #1
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800059c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	2302      	movs	r3, #2
 80005a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b0:	23a8      	movs	r3, #168	@ 0xa8
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4618      	mov	r0, r3
 80005c6:	f001 ff41 	bl	800244c <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d0:	f000 fa4c 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2105      	movs	r1, #5
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 f8b6 	bl	8001764 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005fe:	f000 fa35 	bl	8000a6c <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	@ 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	463b      	mov	r3, r7
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000630:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <MX_TIM2_Init+0x98>)
 8000632:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000636:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <MX_TIM2_Init+0x98>)
 800063a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800063e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_TIM2_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <MX_TIM2_Init+0x98>)
 8000648:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800064c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_TIM2_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <MX_TIM2_Init+0x98>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800065a:	4814      	ldr	r0, [pc, #80]	@ (80006ac <MX_TIM2_Init+0x98>)
 800065c:	f002 f994 	bl	8002988 <HAL_TIM_Base_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000666:	f000 fa01 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800066e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	4619      	mov	r1, r3
 8000676:	480d      	ldr	r0, [pc, #52]	@ (80006ac <MX_TIM2_Init+0x98>)
 8000678:	f002 fb36 	bl	8002ce8 <HAL_TIM_ConfigClockSource>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000682:	f000 f9f3 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <MX_TIM2_Init+0x98>)
 8000694:	f002 fd5e 	bl	8003154 <HAL_TIMEx_MasterConfigSynchronization>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800069e:	f000 f9e5 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006a2:	bf00      	nop
 80006a4:	3718      	adds	r7, #24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000028 	.word	0x20000028

080006b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_TIM3_Init+0x94>)
 80006ce:	4a1e      	ldr	r2, [pc, #120]	@ (8000748 <MX_TIM3_Init+0x98>)
 80006d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 80006d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <MX_TIM3_Init+0x94>)
 80006d4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80006d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_TIM3_Init+0x94>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_TIM3_Init+0x94>)
 80006e2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80006e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e8:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_TIM3_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <MX_TIM3_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006f4:	4813      	ldr	r0, [pc, #76]	@ (8000744 <MX_TIM3_Init+0x94>)
 80006f6:	f002 f947 	bl	8002988 <HAL_TIM_Base_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000700:	f000 f9b4 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000704:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000708:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	4619      	mov	r1, r3
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <MX_TIM3_Init+0x94>)
 8000712:	f002 fae9 	bl	8002ce8 <HAL_TIM_ConfigClockSource>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800071c:	f000 f9a6 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_TIM3_Init+0x94>)
 800072e:	f002 fd11 	bl	8003154 <HAL_TIMEx_MasterConfigSynchronization>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000738:	f000 f998 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000070 	.word	0x20000070
 8000748:	40000400 	.word	0x40000400

0800074c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0308 	add.w	r3, r7, #8
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	463b      	mov	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000768:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <MX_TIM4_Init+0x94>)
 800076a:	4a1e      	ldr	r2, [pc, #120]	@ (80007e4 <MX_TIM4_Init+0x98>)
 800076c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_TIM4_Init+0x94>)
 8000770:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000774:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_TIM4_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_TIM4_Init+0x94>)
 800077e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000782:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000784:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_TIM4_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_TIM4_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000790:	4813      	ldr	r0, [pc, #76]	@ (80007e0 <MX_TIM4_Init+0x94>)
 8000792:	f002 f8f9 	bl	8002988 <HAL_TIM_Base_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800079c:	f000 f966 	bl	8000a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	4619      	mov	r1, r3
 80007ac:	480c      	ldr	r0, [pc, #48]	@ (80007e0 <MX_TIM4_Init+0x94>)
 80007ae:	f002 fa9b 	bl	8002ce8 <HAL_TIM_ConfigClockSource>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 f958 	bl	8000a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007bc:	2300      	movs	r3, #0
 80007be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_TIM4_Init+0x94>)
 80007ca:	f002 fcc3 	bl	8003154 <HAL_TIMEx_MasterConfigSynchronization>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80007d4:	f000 f94a 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	200000b8 	.word	0x200000b8
 80007e4:	40000800 	.word	0x40000800

080007e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART3_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_USART3_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <MX_USART3_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART3_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART3_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART3_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART3_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART3_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART3_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART3_UART_Init+0x4c>)
 8000820:	f002 fd28 	bl	8003274 <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f91f 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000100 	.word	0x20000100
 8000838:	40004800 	.word	0x40004800

0800083c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	2206      	movs	r2, #6
 800084c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000850:	2202      	movs	r2, #2
 8000852:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000856:	2200      	movs	r2, #0
 8000858:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085c:	2202      	movs	r2, #2
 800085e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2201      	movs	r2, #1
 8000864:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800086c:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2201      	movs	r2, #1
 8000876:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	f000 fe35 	bl	80014ee <HAL_PCD_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800088a:	f000 f8ef 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000148 	.word	0x20000148

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	@ 0x30
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	4b4c      	ldr	r3, [pc, #304]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a4b      	ldr	r2, [pc, #300]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b49      	ldr	r3, [pc, #292]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	61bb      	str	r3, [r7, #24]
 80008c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	4b45      	ldr	r3, [pc, #276]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a44      	ldr	r2, [pc, #272]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b42      	ldr	r3, [pc, #264]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b3e      	ldr	r3, [pc, #248]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a3d      	ldr	r2, [pc, #244]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b3b      	ldr	r3, [pc, #236]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b37      	ldr	r3, [pc, #220]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a36      	ldr	r2, [pc, #216]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 800090c:	f043 0308 	orr.w	r3, r3, #8
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b34      	ldr	r3, [pc, #208]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0308 	and.w	r3, r3, #8
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b30      	ldr	r3, [pc, #192]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a2f      	ldr	r2, [pc, #188]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b2d      	ldr	r3, [pc, #180]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a28      	ldr	r2, [pc, #160]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <MX_GPIO_Init+0x14c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f244 0181 	movw	r1, #16513	@ 0x4081
 800095c:	4822      	ldr	r0, [pc, #136]	@ (80009e8 <MX_GPIO_Init+0x150>)
 800095e:	f000 fd93 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2140      	movs	r1, #64	@ 0x40
 8000966:	4821      	ldr	r0, [pc, #132]	@ (80009ec <MX_GPIO_Init+0x154>)
 8000968:	f000 fd8e 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	481b      	ldr	r0, [pc, #108]	@ (80009f0 <MX_GPIO_Init+0x158>)
 8000984:	f000 fbec 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000988:	f244 0381 	movw	r3, #16513	@ 0x4081
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4811      	ldr	r0, [pc, #68]	@ (80009e8 <MX_GPIO_Init+0x150>)
 80009a2:	f000 fbdd 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009a6:	2340      	movs	r3, #64	@ 0x40
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	480b      	ldr	r0, [pc, #44]	@ (80009ec <MX_GPIO_Init+0x154>)
 80009be:	f000 fbcf 	bl	8001160 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	@ (80009ec <MX_GPIO_Init+0x154>)
 80009d6:	f000 fbc3 	bl	8001160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	@ 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40021800 	.word	0x40021800
 80009f0:	40020800 	.word	0x40020800

080009f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a04:	d107      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000a06:	2101      	movs	r1, #1
 8000a08:	4812      	ldr	r0, [pc, #72]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000a0a:	f000 fd56 	bl	80014ba <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim2);
 8000a0e:	4812      	ldr	r0, [pc, #72]	@ (8000a58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000a10:	f002 f80a 	bl	8002a28 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim3);
	}else if(htim->Instance==TIM4){
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		HAL_TIM_Base_Start_IT(&htim4);
	}
}
 8000a14:	e019      	b.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x56>
	}else if(htim->Instance==TIM3){
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a10      	ldr	r2, [pc, #64]	@ (8000a5c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d107      	bne.n	8000a30 <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000a20:	2180      	movs	r1, #128	@ 0x80
 8000a22:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000a24:	f000 fd49 	bl	80014ba <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim3);
 8000a28:	480d      	ldr	r0, [pc, #52]	@ (8000a60 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000a2a:	f001 fffd 	bl	8002a28 <HAL_TIM_Base_Start_IT>
}
 8000a2e:	e00c      	b.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x56>
	}else if(htim->Instance==TIM4){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0b      	ldr	r2, [pc, #44]	@ (8000a64 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d107      	bne.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x56>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a3e:	4805      	ldr	r0, [pc, #20]	@ (8000a54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000a40:	f000 fd3b 	bl	80014ba <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim4);
 8000a44:	4808      	ldr	r0, [pc, #32]	@ (8000a68 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000a46:	f001 ffef 	bl	8002a28 <HAL_TIM_Base_Start_IT>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40020400 	.word	0x40020400
 8000a58:	20000028 	.word	0x20000028
 8000a5c:	40000400 	.word	0x40000400
 8000a60:	20000070 	.word	0x20000070
 8000a64:	40000800 	.word	0x40000800
 8000a68:	200000b8 	.word	0x200000b8

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <Error_Handler+0x8>

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a08      	ldr	r2, [pc, #32]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ad8:	d116      	bne.n	8000b08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	4b28      	ldr	r3, [pc, #160]	@ (8000b80 <HAL_TIM_Base_MspInit+0xb8>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a27      	ldr	r2, [pc, #156]	@ (8000b80 <HAL_TIM_Base_MspInit+0xb8>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b25      	ldr	r3, [pc, #148]	@ (8000b80 <HAL_TIM_Base_MspInit+0xb8>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	201c      	movs	r0, #28
 8000afc:	f000 faf9 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b00:	201c      	movs	r0, #28
 8000b02:	f000 fb12 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b06:	e036      	b.n	8000b76 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000b84 <HAL_TIM_Base_MspInit+0xbc>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d116      	bne.n	8000b40 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <HAL_TIM_Base_MspInit+0xb8>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a19      	ldr	r2, [pc, #100]	@ (8000b80 <HAL_TIM_Base_MspInit+0xb8>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <HAL_TIM_Base_MspInit+0xb8>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	201d      	movs	r0, #29
 8000b34:	f000 fadd 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b38:	201d      	movs	r0, #29
 8000b3a:	f000 faf6 	bl	800112a <HAL_NVIC_EnableIRQ>
}
 8000b3e:	e01a      	b.n	8000b76 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_TIM_Base_MspInit+0xc0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d115      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_TIM_Base_MspInit+0xb8>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a0b      	ldr	r2, [pc, #44]	@ (8000b80 <HAL_TIM_Base_MspInit+0xb8>)
 8000b54:	f043 0304 	orr.w	r3, r3, #4
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_TIM_Base_MspInit+0xb8>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	201e      	movs	r0, #30
 8000b6c:	f000 fac1 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b70:	201e      	movs	r0, #30
 8000b72:	f000 fada 	bl	800112a <HAL_NVIC_EnableIRQ>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40000400 	.word	0x40000400
 8000b88:	40000800 	.word	0x40000800

08000b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	@ 0x28
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a19      	ldr	r2, [pc, #100]	@ (8000c10 <HAL_UART_MspInit+0x84>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12c      	bne.n	8000c08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	4a17      	ldr	r2, [pc, #92]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a10      	ldr	r2, [pc, #64]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <HAL_UART_MspInit+0x88>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000be6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4619      	mov	r1, r3
 8000c02:	4805      	ldr	r0, [pc, #20]	@ (8000c18 <HAL_UART_MspInit+0x8c>)
 8000c04:	f000 faac 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	@ 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40004800 	.word	0x40004800
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020c00 	.word	0x40020c00

08000c1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0a0      	sub	sp, #128	@ 0x80
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	225c      	movs	r2, #92	@ 0x5c
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f8d6 	bl	8003dee <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c4a:	d14e      	bne.n	8000cea <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c50:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c52:	2300      	movs	r3, #0
 8000c54:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 fe9c 	bl	8001998 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000c66:	f7ff ff01 	bl	8000a6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a20      	ldr	r2, [pc, #128]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c86:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000c8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c94:	2303      	movs	r3, #3
 8000c96:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c98:	230a      	movs	r3, #10
 8000c9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4815      	ldr	r0, [pc, #84]	@ (8000cf8 <HAL_PCD_MspInit+0xdc>)
 8000ca4:	f000 fa5c 	bl	8001160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ca8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480e      	ldr	r0, [pc, #56]	@ (8000cf8 <HAL_PCD_MspInit+0xdc>)
 8000cbe:	f000 fa4f 	bl	8001160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ccc:	6353      	str	r3, [r2, #52]	@ 0x34
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	4b08      	ldr	r3, [pc, #32]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a07      	ldr	r2, [pc, #28]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <HAL_PCD_MspInit+0xd8>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cea:	bf00      	nop
 8000cec:	3780      	adds	r7, #128	@ 0x80
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020000 	.word	0x40020000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d00:	bf00      	nop
 8000d02:	e7fd      	b.n	8000d00 <NMI_Handler+0x4>

08000d04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <MemManage_Handler+0x4>

08000d14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d52:	f000 f8af 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <TIM2_IRQHandler+0x10>)
 8000d62:	f001 fed1 	bl	8002b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000028 	.word	0x20000028

08000d70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <TIM3_IRQHandler+0x10>)
 8000d76:	f001 fec7 	bl	8002b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000070 	.word	0x20000070

08000d84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d88:	4802      	ldr	r0, [pc, #8]	@ (8000d94 <TIM4_IRQHandler+0x10>)
 8000d8a:	f001 febd 	bl	8002b08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000b8 	.word	0x200000b8

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dc0:	f7ff ffea 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f003 f809 	bl	8003e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fb81 	bl	80004f4 <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e00:	08003e88 	.word	0x08003e88
  ldr r2, =_sbss
 8000e04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e08:	20000630 	.word	0x20000630

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f94f 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fe18 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f967 	bl	8001146 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 f92f 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	2000062c 	.word	0x2000062c

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	2000062c 	.word	0x2000062c

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	@ 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	e165      	b.n	8001448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	429a      	cmp	r2, r3
 8001196:	f040 8154 	bne.w	8001442 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d005      	beq.n	80011b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d130      	bne.n	8001214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68da      	ldr	r2, [r3, #12]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e8:	2201      	movs	r2, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	f003 0201 	and.w	r2, r3, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b03      	cmp	r3, #3
 800121e:	d017      	beq.n	8001250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	2203      	movs	r2, #3
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d123      	bne.n	80012a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	220f      	movs	r2, #15
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	691a      	ldr	r2, [r3, #16]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	69b9      	ldr	r1, [r7, #24]
 80012a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0203 	and.w	r2, r3, #3
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80ae 	beq.w	8001442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001460 <HAL_GPIO_Init+0x300>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001460 <HAL_GPIO_Init+0x300>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001460 <HAL_GPIO_Init+0x300>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001302:	4a58      	ldr	r2, [pc, #352]	@ (8001464 <HAL_GPIO_Init+0x304>)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	220f      	movs	r2, #15
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4f      	ldr	r2, [pc, #316]	@ (8001468 <HAL_GPIO_Init+0x308>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x21a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4e      	ldr	r2, [pc, #312]	@ (800146c <HAL_GPIO_Init+0x30c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x216>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4d      	ldr	r2, [pc, #308]	@ (8001470 <HAL_GPIO_Init+0x310>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x212>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4c      	ldr	r2, [pc, #304]	@ (8001474 <HAL_GPIO_Init+0x314>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x20e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4b      	ldr	r2, [pc, #300]	@ (8001478 <HAL_GPIO_Init+0x318>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x20a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4a      	ldr	r2, [pc, #296]	@ (800147c <HAL_GPIO_Init+0x31c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x206>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a49      	ldr	r2, [pc, #292]	@ (8001480 <HAL_GPIO_Init+0x320>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x202>
 800135e:	2306      	movs	r3, #6
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x21c>
 8001362:	2307      	movs	r3, #7
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x21c>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x21c>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x21c>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x21c>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x21c>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x21c>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	@ (8001464 <HAL_GPIO_Init+0x304>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b3a      	ldr	r3, [pc, #232]	@ (8001484 <HAL_GPIO_Init+0x324>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a31      	ldr	r2, [pc, #196]	@ (8001484 <HAL_GPIO_Init+0x324>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001484 <HAL_GPIO_Init+0x324>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a26      	ldr	r2, [pc, #152]	@ (8001484 <HAL_GPIO_Init+0x324>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ee:	4b25      	ldr	r3, [pc, #148]	@ (8001484 <HAL_GPIO_Init+0x324>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001412:	4a1c      	ldr	r2, [pc, #112]	@ (8001484 <HAL_GPIO_Init+0x324>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <HAL_GPIO_Init+0x324>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800143c:	4a11      	ldr	r2, [pc, #68]	@ (8001484 <HAL_GPIO_Init+0x324>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae96 	bls.w	800117c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	@ 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40013c00 	.word	0x40013c00

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014cc:	887a      	ldrh	r2, [r7, #2]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4013      	ands	r3, r2
 80014d2:	041a      	lsls	r2, r3, #16
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	887b      	ldrh	r3, [r7, #2]
 80014da:	400b      	ands	r3, r1
 80014dc:	431a      	orrs	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af02      	add	r7, sp, #8
 80014f4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e108      	b.n	8001712 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fb7e 	bl	8000c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2203      	movs	r2, #3
 8001524:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800152e:	d102      	bne.n	8001536 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f002 f9c2 	bl	80038c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7c1a      	ldrb	r2, [r3, #16]
 8001548:	f88d 2000 	strb.w	r2, [sp]
 800154c:	3304      	adds	r3, #4
 800154e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001550:	f002 f954 	bl	80037fc <USB_CoreInit>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2202      	movs	r2, #2
 800155e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0d5      	b.n	8001712 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f002 f9ba 	bl	80038e6 <USB_SetCurrentMode>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2202      	movs	r2, #2
 800157c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0c6      	b.n	8001712 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001584:	2300      	movs	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e04a      	b.n	8001620 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3315      	adds	r3, #21
 800159a:	2201      	movs	r2, #1
 800159c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3314      	adds	r3, #20
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	b298      	uxth	r0, r3
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4613      	mov	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	332e      	adds	r3, #46	@ 0x2e
 80015c6:	4602      	mov	r2, r0
 80015c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4413      	add	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3318      	adds	r3, #24
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	331c      	adds	r3, #28
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3320      	adds	r3, #32
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3324      	adds	r3, #36	@ 0x24
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	3301      	adds	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	791b      	ldrb	r3, [r3, #4]
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3af      	bcc.n	800158a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	e044      	b.n	80016ba <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001658:	7bfa      	ldrb	r2, [r7, #15]
 800165a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800166e:	2200      	movs	r2, #0
 8001670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4613      	mov	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001688:	7bfa      	ldrb	r2, [r7, #15]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	4413      	add	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	4413      	add	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	440b      	add	r3, r1
 80016ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	3301      	adds	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	791b      	ldrb	r3, [r3, #4]
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3b5      	bcc.n	8001630 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7c1a      	ldrb	r2, [r3, #16]
 80016cc:	f88d 2000 	strb.w	r2, [sp]
 80016d0:	3304      	adds	r3, #4
 80016d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016d4:	f002 f954 	bl	8003980 <USB_DevInit>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2202      	movs	r2, #2
 80016e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e013      	b.n	8001712 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7b1b      	ldrb	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d102      	bne.n	8001706 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 f80a 	bl	800171a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f002 fb0f 	bl	8003d2e <USB_DevDisconnect>

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800171a:	b480      	push	{r7}
 800171c:	b085      	sub	sp, #20
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	f043 0303 	orr.w	r3, r3, #3
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0cc      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b68      	ldr	r3, [pc, #416]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d90c      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b65      	ldr	r3, [pc, #404]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b63      	ldr	r3, [pc, #396]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0b8      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4b59      	ldr	r3, [pc, #356]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a58      	ldr	r2, [pc, #352]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d0:	4b53      	ldr	r3, [pc, #332]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a52      	ldr	r2, [pc, #328]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b50      	ldr	r3, [pc, #320]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	494d      	ldr	r1, [pc, #308]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d044      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b47      	ldr	r3, [pc, #284]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d119      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b3f      	ldr	r3, [pc, #252]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3b      	ldr	r3, [pc, #236]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e067      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b37      	ldr	r3, [pc, #220]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4934      	ldr	r1, [pc, #208]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff fb42 	bl	8000edc <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff fb3e 	bl	8000edc <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2b      	ldr	r3, [pc, #172]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d20c      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b22      	ldr	r3, [pc, #136]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b20      	ldr	r3, [pc, #128]	@ (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e032      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4916      	ldr	r1, [pc, #88]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d6:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	490e      	ldr	r1, [pc, #56]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	f000 fb7f 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	490a      	ldr	r1, [pc, #40]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	5ccb      	ldrb	r3, [r1, r3]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a09      	ldr	r2, [pc, #36]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff faa2 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00
 8001920:	40023800 	.word	0x40023800
 8001924:	08003e60 	.word	0x08003e60
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_RCC_GetHCLKFreq+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000

08001948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800194c:	f7ff fff0 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001950:	4602      	mov	r2, r0
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	0a9b      	lsrs	r3, r3, #10
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	4903      	ldr	r1, [pc, #12]	@ (800196c <HAL_RCC_GetPCLK1Freq+0x24>)
 800195e:	5ccb      	ldrb	r3, [r1, r3]
 8001960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	08003e70 	.word	0x08003e70

08001970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001974:	f7ff ffdc 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0b5b      	lsrs	r3, r3, #13
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	@ (8001994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	08003e70 	.word	0x08003e70

08001998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	@ 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d010      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80019d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019d6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019de:	496c      	ldr	r1, [pc, #432]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80019ee:	2301      	movs	r3, #1
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d010      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80019fe:	4b64      	ldr	r3, [pc, #400]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a04:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0c:	4960      	ldr	r1, [pc, #384]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d017      	beq.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a2c:	4b58      	ldr	r3, [pc, #352]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4955      	ldr	r1, [pc, #340]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a4a:	d101      	bne.n	8001a50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d017      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a68:	4b49      	ldr	r3, [pc, #292]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a76:	4946      	ldr	r1, [pc, #280]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a86:	d101      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a94:	2301      	movs	r3, #1
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 808a 	beq.w	8001bba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	4a38      	ldr	r2, [pc, #224]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab6:	4b36      	ldr	r3, [pc, #216]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001ac2:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a33      	ldr	r2, [pc, #204]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001acc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ace:	f7ff fa05 	bl	8000edc <HAL_GetTick>
 8001ad2:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff fa01 	bl	8000edc <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e278      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001af4:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001afc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d02f      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d028      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b1a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001b28:	4a19      	ldr	r2, [pc, #100]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b2e:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d114      	bne.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff f9cf 	bl	8000edc <HAL_GetTick>
 8001b3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7ff f9cb 	bl	8000edc <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e240      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ee      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b70:	d114      	bne.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b86:	4902      	ldr	r1, [pc, #8]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	608b      	str	r3, [r1, #8]
 8001b8c:	e00c      	b.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b8e:	bf00      	nop
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000
 8001b98:	42470e40 	.word	0x42470e40
 8001b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	4a49      	ldr	r2, [pc, #292]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ba2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001ba6:	6093      	str	r3, [r2, #8]
 8001ba8:	4b47      	ldr	r3, [pc, #284]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001baa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb4:	4944      	ldr	r1, [pc, #272]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001bce:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00a      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001be2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bea:	4937      	ldr	r1, [pc, #220]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00a      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001bfe:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c04:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0c:	492e      	ldr	r1, [pc, #184]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d011      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001c20:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c26:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	4926      	ldr	r1, [pc, #152]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001c40:	2301      	movs	r3, #1
 8001c42:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00a      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001c50:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c56:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	491a      	ldr	r1, [pc, #104]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d011      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c72:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c78:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c80:	4911      	ldr	r1, [pc, #68]	@ (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c90:	d101      	bne.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c92:	2301      	movs	r3, #1
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ca4:	f040 80ff 	bne.w	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cae:	f7ff f915 	bl	8000edc <HAL_GetTick>
 8001cb2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cb4:	e00e      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001cb6:	f7ff f911 	bl	8000edc <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d907      	bls.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e188      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	424711e0 	.word	0x424711e0
 8001cd0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001cd4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1ea      	bne.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d009      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d028      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d124      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d08:	4b71      	ldr	r3, [pc, #452]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d0e:	0c1b      	lsrs	r3, r3, #16
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	3301      	adds	r3, #1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001d1a:	4b6d      	ldr	r3, [pc, #436]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d20:	0e1b      	lsrs	r3, r3, #24
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	431a      	orrs	r2, r3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	085b      	lsrs	r3, r3, #1
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	041b      	lsls	r3, r3, #16
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	061b      	lsls	r3, r3, #24
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	071b      	lsls	r3, r3, #28
 8001d4a:	4961      	ldr	r1, [pc, #388]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d004      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d66:	d00a      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d035      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d7c:	d130      	bne.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d7e:	4b54      	ldr	r3, [pc, #336]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d84:	0c1b      	lsrs	r3, r3, #16
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d90:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d96:	0f1b      	lsrs	r3, r3, #28
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	019b      	lsls	r3, r3, #6
 8001da8:	431a      	orrs	r2, r3
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	041b      	lsls	r3, r3, #16
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	071b      	lsls	r3, r3, #28
 8001dc0:	4943      	ldr	r1, [pc, #268]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001dc8:	4b41      	ldr	r3, [pc, #260]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dce:	f023 021f 	bic.w	r2, r3, #31
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	493d      	ldr	r1, [pc, #244]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d029      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001df4:	d124      	bne.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001df6:	4b36      	ldr	r3, [pc, #216]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dfc:	0c1b      	lsrs	r3, r3, #16
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	3301      	adds	r3, #1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001e08:	4b31      	ldr	r3, [pc, #196]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e0e:	0f1b      	lsrs	r3, r3, #28
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	019b      	lsls	r3, r3, #6
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	041b      	lsls	r3, r3, #16
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	431a      	orrs	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	071b      	lsls	r3, r3, #28
 8001e38:	4925      	ldr	r1, [pc, #148]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d016      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	071b      	lsls	r3, r3, #28
 8001e72:	4917      	ldr	r1, [pc, #92]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e80:	f7ff f82c 	bl	8000edc <HAL_GetTick>
 8001e84:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e88:	f7ff f828 	bl	8000edc <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e09f      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	f040 8095 	bne.w	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001eae:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eb4:	f7ff f812 	bl	8000edc <HAL_GetTick>
 8001eb8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001eba:	e00f      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ebc:	f7ff f80e 	bl	8000edc <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d908      	bls.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e085      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	42470068 	.word	0x42470068
 8001ed8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001edc:	4b41      	ldr	r3, [pc, #260]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ee8:	d0e8      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d009      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d02b      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d127      	bne.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001f12:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	019b      	lsls	r3, r3, #6
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	3b01      	subs	r3, #1
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	061b      	lsls	r3, r3, #24
 8001f40:	4928      	ldr	r1, [pc, #160]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001f48:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f4e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f56:	3b01      	subs	r3, #1
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	4922      	ldr	r1, [pc, #136]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01d      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f76:	d118      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7e:	0e1b      	lsrs	r3, r3, #24
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	019b      	lsls	r3, r3, #6
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	085b      	lsrs	r3, r3, #1
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	061b      	lsls	r3, r3, #24
 8001fa2:	4910      	ldr	r1, [pc, #64]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001faa:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe ff94 	bl	8000edc <HAL_GetTick>
 8001fb4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fb8:	f7fe ff90 	bl	8000edc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e007      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001fca:	4b06      	ldr	r3, [pc, #24]	@ (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fd6:	d1ef      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3730      	adds	r7, #48	@ 0x30
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	42470070 	.word	0x42470070

08001fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff0:	b0ae      	sub	sp, #184	@ 0xb8
 8001ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002012:	4bcb      	ldr	r3, [pc, #812]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x354>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b0c      	cmp	r3, #12
 800201c:	f200 8206 	bhi.w	800242c <HAL_RCC_GetSysClockFreq+0x440>
 8002020:	a201      	add	r2, pc, #4	@ (adr r2, 8002028 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	0800205d 	.word	0x0800205d
 800202c:	0800242d 	.word	0x0800242d
 8002030:	0800242d 	.word	0x0800242d
 8002034:	0800242d 	.word	0x0800242d
 8002038:	08002065 	.word	0x08002065
 800203c:	0800242d 	.word	0x0800242d
 8002040:	0800242d 	.word	0x0800242d
 8002044:	0800242d 	.word	0x0800242d
 8002048:	0800206d 	.word	0x0800206d
 800204c:	0800242d 	.word	0x0800242d
 8002050:	0800242d 	.word	0x0800242d
 8002054:	0800242d 	.word	0x0800242d
 8002058:	0800225d 	.word	0x0800225d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800205c:	4bb9      	ldr	r3, [pc, #740]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x358>)
 800205e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002062:	e1e7      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002064:	4bb8      	ldr	r3, [pc, #736]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002066:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800206a:	e1e3      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800206c:	4bb4      	ldr	r3, [pc, #720]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x354>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002078:	4bb1      	ldr	r3, [pc, #708]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x354>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d071      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002084:	4bae      	ldr	r3, [pc, #696]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x354>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	2200      	movs	r2, #0
 800208c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002090:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002094:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800209c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80020a0:	2300      	movs	r3, #0
 80020a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80020a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80020aa:	4622      	mov	r2, r4
 80020ac:	462b      	mov	r3, r5
 80020ae:	f04f 0000 	mov.w	r0, #0
 80020b2:	f04f 0100 	mov.w	r1, #0
 80020b6:	0159      	lsls	r1, r3, #5
 80020b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020bc:	0150      	lsls	r0, r2, #5
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4621      	mov	r1, r4
 80020c4:	1a51      	subs	r1, r2, r1
 80020c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80020c8:	4629      	mov	r1, r5
 80020ca:	eb63 0301 	sbc.w	r3, r3, r1
 80020ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80020dc:	4649      	mov	r1, r9
 80020de:	018b      	lsls	r3, r1, #6
 80020e0:	4641      	mov	r1, r8
 80020e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020e6:	4641      	mov	r1, r8
 80020e8:	018a      	lsls	r2, r1, #6
 80020ea:	4641      	mov	r1, r8
 80020ec:	1a51      	subs	r1, r2, r1
 80020ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020f0:	4649      	mov	r1, r9
 80020f2:	eb63 0301 	sbc.w	r3, r3, r1
 80020f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002104:	4649      	mov	r1, r9
 8002106:	00cb      	lsls	r3, r1, #3
 8002108:	4641      	mov	r1, r8
 800210a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800210e:	4641      	mov	r1, r8
 8002110:	00ca      	lsls	r2, r1, #3
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	4603      	mov	r3, r0
 8002118:	4622      	mov	r2, r4
 800211a:	189b      	adds	r3, r3, r2
 800211c:	633b      	str	r3, [r7, #48]	@ 0x30
 800211e:	462b      	mov	r3, r5
 8002120:	460a      	mov	r2, r1
 8002122:	eb42 0303 	adc.w	r3, r2, r3
 8002126:	637b      	str	r3, [r7, #52]	@ 0x34
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002134:	4629      	mov	r1, r5
 8002136:	024b      	lsls	r3, r1, #9
 8002138:	4621      	mov	r1, r4
 800213a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800213e:	4621      	mov	r1, r4
 8002140:	024a      	lsls	r2, r1, #9
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800214a:	2200      	movs	r2, #0
 800214c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002150:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002154:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002158:	f7fe f854 	bl	8000204 <__aeabi_uldivmod>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4613      	mov	r3, r2
 8002162:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002166:	e067      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002168:	4b75      	ldr	r3, [pc, #468]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x354>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	099b      	lsrs	r3, r3, #6
 800216e:	2200      	movs	r2, #0
 8002170:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002174:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002178:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800217c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002180:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002182:	2300      	movs	r3, #0
 8002184:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002186:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800218a:	4622      	mov	r2, r4
 800218c:	462b      	mov	r3, r5
 800218e:	f04f 0000 	mov.w	r0, #0
 8002192:	f04f 0100 	mov.w	r1, #0
 8002196:	0159      	lsls	r1, r3, #5
 8002198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800219c:	0150      	lsls	r0, r2, #5
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4621      	mov	r1, r4
 80021a4:	1a51      	subs	r1, r2, r1
 80021a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80021a8:	4629      	mov	r1, r5
 80021aa:	eb63 0301 	sbc.w	r3, r3, r1
 80021ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80021bc:	4649      	mov	r1, r9
 80021be:	018b      	lsls	r3, r1, #6
 80021c0:	4641      	mov	r1, r8
 80021c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021c6:	4641      	mov	r1, r8
 80021c8:	018a      	lsls	r2, r1, #6
 80021ca:	4641      	mov	r1, r8
 80021cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80021d0:	4649      	mov	r1, r9
 80021d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021ea:	4692      	mov	sl, r2
 80021ec:	469b      	mov	fp, r3
 80021ee:	4623      	mov	r3, r4
 80021f0:	eb1a 0303 	adds.w	r3, sl, r3
 80021f4:	623b      	str	r3, [r7, #32]
 80021f6:	462b      	mov	r3, r5
 80021f8:	eb4b 0303 	adc.w	r3, fp, r3
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800220a:	4629      	mov	r1, r5
 800220c:	028b      	lsls	r3, r1, #10
 800220e:	4621      	mov	r1, r4
 8002210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002214:	4621      	mov	r1, r4
 8002216:	028a      	lsls	r2, r1, #10
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002220:	2200      	movs	r2, #0
 8002222:	673b      	str	r3, [r7, #112]	@ 0x70
 8002224:	677a      	str	r2, [r7, #116]	@ 0x74
 8002226:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800222a:	f7fd ffeb 	bl	8000204 <__aeabi_uldivmod>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4613      	mov	r3, r2
 8002234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002238:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x354>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	0c1b      	lsrs	r3, r3, #16
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	3301      	adds	r3, #1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800224a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800224e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800225a:	e0eb      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800225c:	4b38      	ldr	r3, [pc, #224]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x354>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002268:	4b35      	ldr	r3, [pc, #212]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x354>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d06b      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002274:	4b32      	ldr	r3, [pc, #200]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x354>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	2200      	movs	r2, #0
 800227c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800227e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002286:	663b      	str	r3, [r7, #96]	@ 0x60
 8002288:	2300      	movs	r3, #0
 800228a:	667b      	str	r3, [r7, #100]	@ 0x64
 800228c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002290:	4622      	mov	r2, r4
 8002292:	462b      	mov	r3, r5
 8002294:	f04f 0000 	mov.w	r0, #0
 8002298:	f04f 0100 	mov.w	r1, #0
 800229c:	0159      	lsls	r1, r3, #5
 800229e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a2:	0150      	lsls	r0, r2, #5
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4621      	mov	r1, r4
 80022aa:	1a51      	subs	r1, r2, r1
 80022ac:	61b9      	str	r1, [r7, #24]
 80022ae:	4629      	mov	r1, r5
 80022b0:	eb63 0301 	sbc.w	r3, r3, r1
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022c2:	4659      	mov	r1, fp
 80022c4:	018b      	lsls	r3, r1, #6
 80022c6:	4651      	mov	r1, sl
 80022c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022cc:	4651      	mov	r1, sl
 80022ce:	018a      	lsls	r2, r1, #6
 80022d0:	4651      	mov	r1, sl
 80022d2:	ebb2 0801 	subs.w	r8, r2, r1
 80022d6:	4659      	mov	r1, fp
 80022d8:	eb63 0901 	sbc.w	r9, r3, r1
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022f0:	4690      	mov	r8, r2
 80022f2:	4699      	mov	r9, r3
 80022f4:	4623      	mov	r3, r4
 80022f6:	eb18 0303 	adds.w	r3, r8, r3
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	462b      	mov	r3, r5
 80022fe:	eb49 0303 	adc.w	r3, r9, r3
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002310:	4629      	mov	r1, r5
 8002312:	024b      	lsls	r3, r1, #9
 8002314:	4621      	mov	r1, r4
 8002316:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800231a:	4621      	mov	r1, r4
 800231c:	024a      	lsls	r2, r1, #9
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002326:	2200      	movs	r2, #0
 8002328:	65bb      	str	r3, [r7, #88]	@ 0x58
 800232a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800232c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002330:	f7fd ff68 	bl	8000204 <__aeabi_uldivmod>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4613      	mov	r3, r2
 800233a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800233e:	e065      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x420>
 8002340:	40023800 	.word	0x40023800
 8002344:	00f42400 	.word	0x00f42400
 8002348:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234c:	4b3d      	ldr	r3, [pc, #244]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x458>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	2200      	movs	r2, #0
 8002354:	4618      	mov	r0, r3
 8002356:	4611      	mov	r1, r2
 8002358:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800235c:	653b      	str	r3, [r7, #80]	@ 0x50
 800235e:	2300      	movs	r3, #0
 8002360:	657b      	str	r3, [r7, #84]	@ 0x54
 8002362:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002366:	4642      	mov	r2, r8
 8002368:	464b      	mov	r3, r9
 800236a:	f04f 0000 	mov.w	r0, #0
 800236e:	f04f 0100 	mov.w	r1, #0
 8002372:	0159      	lsls	r1, r3, #5
 8002374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002378:	0150      	lsls	r0, r2, #5
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4641      	mov	r1, r8
 8002380:	1a51      	subs	r1, r2, r1
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	4649      	mov	r1, r9
 8002386:	eb63 0301 	sbc.w	r3, r3, r1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002398:	4659      	mov	r1, fp
 800239a:	018b      	lsls	r3, r1, #6
 800239c:	4651      	mov	r1, sl
 800239e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023a2:	4651      	mov	r1, sl
 80023a4:	018a      	lsls	r2, r1, #6
 80023a6:	4651      	mov	r1, sl
 80023a8:	1a54      	subs	r4, r2, r1
 80023aa:	4659      	mov	r1, fp
 80023ac:	eb63 0501 	sbc.w	r5, r3, r1
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	00eb      	lsls	r3, r5, #3
 80023ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023be:	00e2      	lsls	r2, r4, #3
 80023c0:	4614      	mov	r4, r2
 80023c2:	461d      	mov	r5, r3
 80023c4:	4643      	mov	r3, r8
 80023c6:	18e3      	adds	r3, r4, r3
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	464b      	mov	r3, r9
 80023cc:	eb45 0303 	adc.w	r3, r5, r3
 80023d0:	607b      	str	r3, [r7, #4]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023de:	4629      	mov	r1, r5
 80023e0:	028b      	lsls	r3, r1, #10
 80023e2:	4621      	mov	r1, r4
 80023e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e8:	4621      	mov	r1, r4
 80023ea:	028a      	lsls	r2, r1, #10
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023f4:	2200      	movs	r2, #0
 80023f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80023fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023fe:	f7fd ff01 	bl	8000204 <__aeabi_uldivmod>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4613      	mov	r3, r2
 8002408:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800240c:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x458>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	0f1b      	lsrs	r3, r3, #28
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800241a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800241e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800242a:	e003      	b.n	8002434 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x45c>)
 800242e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002432:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002434:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002438:	4618      	mov	r0, r3
 800243a:	37b8      	adds	r7, #184	@ 0xb8
 800243c:	46bd      	mov	sp, r7
 800243e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002442:	bf00      	nop
 8002444:	40023800 	.word	0x40023800
 8002448:	00f42400 	.word	0x00f42400

0800244c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e28d      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8083 	beq.w	8002572 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800246c:	4b94      	ldr	r3, [pc, #592]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b04      	cmp	r3, #4
 8002476:	d019      	beq.n	80024ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002478:	4b91      	ldr	r3, [pc, #580]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002480:	2b08      	cmp	r3, #8
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002484:	4b8e      	ldr	r3, [pc, #568]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002490:	d00c      	beq.n	80024ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002492:	4b8b      	ldr	r3, [pc, #556]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d112      	bne.n	80024c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b88      	ldr	r3, [pc, #544]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b84      	ldr	r3, [pc, #528]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05b      	beq.n	8002570 <HAL_RCC_OscConfig+0x124>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d157      	bne.n	8002570 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e25a      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x90>
 80024ce:	4b7c      	ldr	r3, [pc, #496]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7b      	ldr	r2, [pc, #492]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e01d      	b.n	8002518 <HAL_RCC_OscConfig+0xcc>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0xb4>
 80024e6:	4b76      	ldr	r3, [pc, #472]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a75      	ldr	r2, [pc, #468]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b73      	ldr	r3, [pc, #460]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a72      	ldr	r2, [pc, #456]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0xcc>
 8002500:	4b6f      	ldr	r3, [pc, #444]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a6e      	ldr	r2, [pc, #440]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b6c      	ldr	r3, [pc, #432]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a6b      	ldr	r2, [pc, #428]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe fcdc 	bl	8000edc <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe fcd8 	bl	8000edc <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e21f      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b61      	ldr	r3, [pc, #388]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0xdc>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fcc8 	bl	8000edc <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fcc4 	bl	8000edc <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e20b      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	4b57      	ldr	r3, [pc, #348]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x104>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d06f      	beq.n	800265e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800257e:	4b50      	ldr	r3, [pc, #320]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b00      	cmp	r3, #0
 8002588:	d017      	beq.n	80025ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800258a:	4b4d      	ldr	r3, [pc, #308]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002592:	2b08      	cmp	r3, #8
 8002594:	d105      	bne.n	80025a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002596:	4b4a      	ldr	r3, [pc, #296]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b47      	ldr	r3, [pc, #284]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d11c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b44      	ldr	r3, [pc, #272]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	4b41      	ldr	r3, [pc, #260]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x186>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e1d3      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4937      	ldr	r1, [pc, #220]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	e03a      	b.n	800265e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	4b34      	ldr	r3, [pc, #208]	@ (80026c4 <HAL_RCC_OscConfig+0x278>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fc71 	bl	8000edc <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fc6d 	bl	8000edc <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1b4      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b2b      	ldr	r3, [pc, #172]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b28      	ldr	r3, [pc, #160]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4925      	ldr	r1, [pc, #148]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e015      	b.n	800265e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b24      	ldr	r3, [pc, #144]	@ (80026c4 <HAL_RCC_OscConfig+0x278>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fc50 	bl	8000edc <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe fc4c 	bl	8000edc <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e193      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <HAL_RCC_OscConfig+0x27c>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7fe fc30 	bl	8000edc <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002680:	f7fe fc2c 	bl	8000edc <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e173      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x234>
 800269e:	e01b      	b.n	80026d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_RCC_OscConfig+0x27c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7fe fc19 	bl	8000edc <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	e00e      	b.n	80026cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ae:	f7fe fc15 	bl	8000edc <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d907      	bls.n	80026cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e15c      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b8a      	ldr	r3, [pc, #552]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ea      	bne.n	80026ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8097 	beq.w	8002814 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b83      	ldr	r3, [pc, #524]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b7f      	ldr	r3, [pc, #508]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	4a7e      	ldr	r2, [pc, #504]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	@ 0x40
 8002706:	4b7c      	ldr	r3, [pc, #496]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b79      	ldr	r3, [pc, #484]	@ (80028fc <HAL_RCC_OscConfig+0x4b0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4b76      	ldr	r3, [pc, #472]	@ (80028fc <HAL_RCC_OscConfig+0x4b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a75      	ldr	r2, [pc, #468]	@ (80028fc <HAL_RCC_OscConfig+0x4b0>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7fe fbd5 	bl	8000edc <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7fe fbd1 	bl	8000edc <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e118      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b6c      	ldr	r3, [pc, #432]	@ (80028fc <HAL_RCC_OscConfig+0x4b0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x31e>
 800275c:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002760:	4a65      	ldr	r2, [pc, #404]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	@ 0x70
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x358>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x340>
 8002772:	4b61      	ldr	r3, [pc, #388]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	4a60      	ldr	r2, [pc, #384]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	@ 0x70
 800277e:	4b5e      	ldr	r3, [pc, #376]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002782:	4a5d      	ldr	r2, [pc, #372]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	@ 0x70
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x358>
 800278c:	4b5a      	ldr	r3, [pc, #360]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a59      	ldr	r2, [pc, #356]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
 8002798:	4b57      	ldr	r3, [pc, #348]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279c:	4a56      	ldr	r2, [pc, #344]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800279e:	f023 0304 	bic.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7fe fb96 	bl	8000edc <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7fe fb92 	bl	8000edc <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0d7      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	4b4b      	ldr	r3, [pc, #300]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RCC_OscConfig+0x368>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fb80 	bl	8000edc <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fb7c 	bl	8000edc <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0c1      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	4b40      	ldr	r3, [pc, #256]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ee      	bne.n	80027e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b3b      	ldr	r3, [pc, #236]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	4a3a      	ldr	r2, [pc, #232]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80ad 	beq.w	8002978 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800281e:	4b36      	ldr	r3, [pc, #216]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b08      	cmp	r3, #8
 8002828:	d060      	beq.n	80028ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d145      	bne.n	80028be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b33      	ldr	r3, [pc, #204]	@ (8002900 <HAL_RCC_OscConfig+0x4b4>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fb50 	bl	8000edc <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fb4c 	bl	8000edc <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e093      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	071b      	lsls	r3, r3, #28
 800288a:	491b      	ldr	r1, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x4b4>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fb21 	bl	8000edc <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fb1d 	bl	8000edc <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e064      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x452>
 80028bc:	e05c      	b.n	8002978 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <HAL_RCC_OscConfig+0x4b4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fb0a 	bl	8000edc <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fb06 	bl	8000edc <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04d      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x480>
 80028ea:	e045      	b.n	8002978 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e040      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40007000 	.word	0x40007000
 8002900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002904:	4b1f      	ldr	r3, [pc, #124]	@ (8002984 <HAL_RCC_OscConfig+0x538>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d030      	beq.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d129      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d122      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800293a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293c:	4293      	cmp	r3, r2
 800293e:	d119      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	3b01      	subs	r3, #1
 800294e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d10f      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e041      	b.n	8002a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe f88a 	bl	8000ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f000 fa7e 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e04e      	b.n	8002ade <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <HAL_TIM_Base_Start_IT+0xc4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d022      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a6a:	d01d      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1f      	ldr	r2, [pc, #124]	@ (8002af0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d018      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002af4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d013      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1c      	ldr	r2, [pc, #112]	@ (8002af8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00e      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002afc <HAL_TIM_Base_Start_IT+0xd4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a19      	ldr	r2, [pc, #100]	@ (8002b00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x80>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a18      	ldr	r2, [pc, #96]	@ (8002b04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d111      	bne.n	8002acc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b06      	cmp	r3, #6
 8002ab8:	d010      	beq.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aca:	e007      	b.n	8002adc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40010400 	.word	0x40010400
 8002b00:	40014000 	.word	0x40014000
 8002b04:	40001800 	.word	0x40001800

08002b08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d020      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0202 	mvn.w	r2, #2
 8002b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f999 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f98b 	bl	8002e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f99c 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d020      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01b      	beq.n	8002bb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0204 	mvn.w	r2, #4
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f973 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002ba4:	e005      	b.n	8002bb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f965 	bl	8002e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f976 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d020      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01b      	beq.n	8002c04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0208 	mvn.w	r2, #8
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2204      	movs	r2, #4
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f94d 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f93f 	bl	8002e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f950 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d020      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d01b      	beq.n	8002c50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f06f 0210 	mvn.w	r2, #16
 8002c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2208      	movs	r2, #8
 8002c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f927 	bl	8002e8a <HAL_TIM_IC_CaptureCallback>
 8002c3c:	e005      	b.n	8002c4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f919 	bl	8002e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 f92a 	bl	8002e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00c      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0201 	mvn.w	r2, #1
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fec0 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00c      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d007      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fae4 	bl	8003260 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8fb 	bl	8002eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 0320 	and.w	r3, r3, #32
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0320 	and.w	r3, r3, #32
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0220 	mvn.w	r2, #32
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fab6 	bl	800324c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIM_ConfigClockSource+0x1c>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e0b4      	b.n	8002e6e <HAL_TIM_ConfigClockSource+0x186>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d3c:	d03e      	beq.n	8002dbc <HAL_TIM_ConfigClockSource+0xd4>
 8002d3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d42:	f200 8087 	bhi.w	8002e54 <HAL_TIM_ConfigClockSource+0x16c>
 8002d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d4a:	f000 8086 	beq.w	8002e5a <HAL_TIM_ConfigClockSource+0x172>
 8002d4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d52:	d87f      	bhi.n	8002e54 <HAL_TIM_ConfigClockSource+0x16c>
 8002d54:	2b70      	cmp	r3, #112	@ 0x70
 8002d56:	d01a      	beq.n	8002d8e <HAL_TIM_ConfigClockSource+0xa6>
 8002d58:	2b70      	cmp	r3, #112	@ 0x70
 8002d5a:	d87b      	bhi.n	8002e54 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5c:	2b60      	cmp	r3, #96	@ 0x60
 8002d5e:	d050      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x11a>
 8002d60:	2b60      	cmp	r3, #96	@ 0x60
 8002d62:	d877      	bhi.n	8002e54 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b50      	cmp	r3, #80	@ 0x50
 8002d66:	d03c      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d68:	2b50      	cmp	r3, #80	@ 0x50
 8002d6a:	d873      	bhi.n	8002e54 <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b40      	cmp	r3, #64	@ 0x40
 8002d6e:	d058      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x13a>
 8002d70:	2b40      	cmp	r3, #64	@ 0x40
 8002d72:	d86f      	bhi.n	8002e54 <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b30      	cmp	r3, #48	@ 0x30
 8002d76:	d064      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x15a>
 8002d78:	2b30      	cmp	r3, #48	@ 0x30
 8002d7a:	d86b      	bhi.n	8002e54 <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d060      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x15a>
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d867      	bhi.n	8002e54 <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d05c      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x15a>
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d05a      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x15a>
 8002d8c:	e062      	b.n	8002e54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d9e:	f000 f9b9 	bl	8003114 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002db0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	609a      	str	r2, [r3, #8]
      break;
 8002dba:	e04f      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dcc:	f000 f9a2 	bl	8003114 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dde:	609a      	str	r2, [r3, #8]
      break;
 8002de0:	e03c      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dee:	461a      	mov	r2, r3
 8002df0:	f000 f916 	bl	8003020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2150      	movs	r1, #80	@ 0x50
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f96f 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002e00:	e02c      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f000 f935 	bl	800307e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2160      	movs	r1, #96	@ 0x60
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f95f 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002e20:	e01c      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f000 f8f6 	bl	8003020 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2140      	movs	r1, #64	@ 0x40
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f94f 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002e40:	e00c      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4610      	mov	r0, r2
 8002e4e:	f000 f946 	bl	80030de <TIM_ITRx_SetConfig>
      break;
 8002e52:	e003      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e000      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
	...

08002ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a46      	ldr	r2, [pc, #280]	@ (8002ff4 <TIM_Base_SetConfig+0x12c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d013      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee6:	d00f      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a43      	ldr	r2, [pc, #268]	@ (8002ff8 <TIM_Base_SetConfig+0x130>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d00b      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a42      	ldr	r2, [pc, #264]	@ (8002ffc <TIM_Base_SetConfig+0x134>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a41      	ldr	r2, [pc, #260]	@ (8003000 <TIM_Base_SetConfig+0x138>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d003      	beq.n	8002f08 <TIM_Base_SetConfig+0x40>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a40      	ldr	r2, [pc, #256]	@ (8003004 <TIM_Base_SetConfig+0x13c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d108      	bne.n	8002f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a35      	ldr	r2, [pc, #212]	@ (8002ff4 <TIM_Base_SetConfig+0x12c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d02b      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f28:	d027      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a32      	ldr	r2, [pc, #200]	@ (8002ff8 <TIM_Base_SetConfig+0x130>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d023      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a31      	ldr	r2, [pc, #196]	@ (8002ffc <TIM_Base_SetConfig+0x134>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01f      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a30      	ldr	r2, [pc, #192]	@ (8003000 <TIM_Base_SetConfig+0x138>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d01b      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a2f      	ldr	r2, [pc, #188]	@ (8003004 <TIM_Base_SetConfig+0x13c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d017      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003008 <TIM_Base_SetConfig+0x140>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a2d      	ldr	r2, [pc, #180]	@ (800300c <TIM_Base_SetConfig+0x144>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d00f      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003010 <TIM_Base_SetConfig+0x148>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a2b      	ldr	r2, [pc, #172]	@ (8003014 <TIM_Base_SetConfig+0x14c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8003018 <TIM_Base_SetConfig+0x150>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d003      	beq.n	8002f7a <TIM_Base_SetConfig+0xb2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a29      	ldr	r2, [pc, #164]	@ (800301c <TIM_Base_SetConfig+0x154>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d108      	bne.n	8002f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a10      	ldr	r2, [pc, #64]	@ (8002ff4 <TIM_Base_SetConfig+0x12c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <TIM_Base_SetConfig+0xf8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a12      	ldr	r2, [pc, #72]	@ (8003004 <TIM_Base_SetConfig+0x13c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d103      	bne.n	8002fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d105      	bne.n	8002fe6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f023 0201 	bic.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	611a      	str	r2, [r3, #16]
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40010000 	.word	0x40010000
 8002ff8:	40000400 	.word	0x40000400
 8002ffc:	40000800 	.word	0x40000800
 8003000:	40000c00 	.word	0x40000c00
 8003004:	40010400 	.word	0x40010400
 8003008:	40014000 	.word	0x40014000
 800300c:	40014400 	.word	0x40014400
 8003010:	40014800 	.word	0x40014800
 8003014:	40001800 	.word	0x40001800
 8003018:	40001c00 	.word	0x40001c00
 800301c:	40002000 	.word	0x40002000

08003020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f023 0201 	bic.w	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800304a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f023 030a 	bic.w	r3, r3, #10
 800305c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4313      	orrs	r3, r2
 8003064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	621a      	str	r2, [r3, #32]
}
 8003072:	bf00      	nop
 8003074:	371c      	adds	r7, #28
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800307e:	b480      	push	{r7}
 8003080:	b087      	sub	sp, #28
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f023 0210 	bic.w	r2, r3, #16
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	031b      	lsls	r3, r3, #12
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f043 0307 	orr.w	r3, r3, #7
 8003100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	609a      	str	r2, [r3, #8]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800312e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	021a      	lsls	r2, r3, #8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	431a      	orrs	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	609a      	str	r2, [r3, #8]
}
 8003148:	bf00      	nop
 800314a:	371c      	adds	r7, #28
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003168:	2302      	movs	r3, #2
 800316a:	e05a      	b.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a21      	ldr	r2, [pc, #132]	@ (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d022      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b8:	d01d      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1d      	ldr	r2, [pc, #116]	@ (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d018      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1a      	ldr	r2, [pc, #104]	@ (800323c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a18      	ldr	r2, [pc, #96]	@ (8003240 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a15      	ldr	r2, [pc, #84]	@ (8003248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10c      	bne.n	8003210 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4313      	orrs	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40010000 	.word	0x40010000
 8003234:	40000400 	.word	0x40000400
 8003238:	40000800 	.word	0x40000800
 800323c:	40000c00 	.word	0x40000c00
 8003240:	40010400 	.word	0x40010400
 8003244:	40014000 	.word	0x40014000
 8003248:	40001800 	.word	0x40001800

0800324c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e042      	b.n	800330c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fc76 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	@ 0x24
 80032a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f82b 	bl	8003314 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003318:	b0c0      	sub	sp, #256	@ 0x100
 800331a:	af00      	add	r7, sp, #0
 800331c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003330:	68d9      	ldr	r1, [r3, #12]
 8003332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	ea40 0301 	orr.w	r3, r0, r1
 800333c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800333e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	431a      	orrs	r2, r3
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	431a      	orrs	r2, r3
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800336c:	f021 010c 	bic.w	r1, r1, #12
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800337a:	430b      	orrs	r3, r1
 800337c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800338a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800338e:	6999      	ldr	r1, [r3, #24]
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	ea40 0301 	orr.w	r3, r0, r1
 800339a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b8f      	ldr	r3, [pc, #572]	@ (80035e0 <UART_SetConfig+0x2cc>)
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d005      	beq.n	80033b4 <UART_SetConfig+0xa0>
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4b8d      	ldr	r3, [pc, #564]	@ (80035e4 <UART_SetConfig+0x2d0>)
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d104      	bne.n	80033be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033b4:	f7fe fadc 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 80033b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033bc:	e003      	b.n	80033c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033be:	f7fe fac3 	bl	8001948 <HAL_RCC_GetPCLK1Freq>
 80033c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ca:	69db      	ldr	r3, [r3, #28]
 80033cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033d0:	f040 810c 	bne.w	80035ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033d8:	2200      	movs	r2, #0
 80033da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	1891      	adds	r1, r2, r2
 80033ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033ee:	415b      	adcs	r3, r3
 80033f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033f6:	4621      	mov	r1, r4
 80033f8:	eb12 0801 	adds.w	r8, r2, r1
 80033fc:	4629      	mov	r1, r5
 80033fe:	eb43 0901 	adc.w	r9, r3, r1
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800340e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003412:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003416:	4690      	mov	r8, r2
 8003418:	4699      	mov	r9, r3
 800341a:	4623      	mov	r3, r4
 800341c:	eb18 0303 	adds.w	r3, r8, r3
 8003420:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003424:	462b      	mov	r3, r5
 8003426:	eb49 0303 	adc.w	r3, r9, r3
 800342a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800343a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800343e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003442:	460b      	mov	r3, r1
 8003444:	18db      	adds	r3, r3, r3
 8003446:	653b      	str	r3, [r7, #80]	@ 0x50
 8003448:	4613      	mov	r3, r2
 800344a:	eb42 0303 	adc.w	r3, r2, r3
 800344e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003450:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003454:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003458:	f7fc fed4 	bl	8000204 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4b61      	ldr	r3, [pc, #388]	@ (80035e8 <UART_SetConfig+0x2d4>)
 8003462:	fba3 2302 	umull	r2, r3, r3, r2
 8003466:	095b      	lsrs	r3, r3, #5
 8003468:	011c      	lsls	r4, r3, #4
 800346a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800346e:	2200      	movs	r2, #0
 8003470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003474:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003478:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800347c:	4642      	mov	r2, r8
 800347e:	464b      	mov	r3, r9
 8003480:	1891      	adds	r1, r2, r2
 8003482:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003484:	415b      	adcs	r3, r3
 8003486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003488:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800348c:	4641      	mov	r1, r8
 800348e:	eb12 0a01 	adds.w	sl, r2, r1
 8003492:	4649      	mov	r1, r9
 8003494:	eb43 0b01 	adc.w	fp, r3, r1
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ac:	4692      	mov	sl, r2
 80034ae:	469b      	mov	fp, r3
 80034b0:	4643      	mov	r3, r8
 80034b2:	eb1a 0303 	adds.w	r3, sl, r3
 80034b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034ba:	464b      	mov	r3, r9
 80034bc:	eb4b 0303 	adc.w	r3, fp, r3
 80034c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034d8:	460b      	mov	r3, r1
 80034da:	18db      	adds	r3, r3, r3
 80034dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80034de:	4613      	mov	r3, r2
 80034e0:	eb42 0303 	adc.w	r3, r2, r3
 80034e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034ee:	f7fc fe89 	bl	8000204 <__aeabi_uldivmod>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	4b3b      	ldr	r3, [pc, #236]	@ (80035e8 <UART_SetConfig+0x2d4>)
 80034fa:	fba3 2301 	umull	r2, r3, r3, r1
 80034fe:	095b      	lsrs	r3, r3, #5
 8003500:	2264      	movs	r2, #100	@ 0x64
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	1acb      	subs	r3, r1, r3
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800350e:	4b36      	ldr	r3, [pc, #216]	@ (80035e8 <UART_SetConfig+0x2d4>)
 8003510:	fba3 2302 	umull	r2, r3, r3, r2
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800351c:	441c      	add	r4, r3
 800351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003522:	2200      	movs	r2, #0
 8003524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003528:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800352c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003530:	4642      	mov	r2, r8
 8003532:	464b      	mov	r3, r9
 8003534:	1891      	adds	r1, r2, r2
 8003536:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003538:	415b      	adcs	r3, r3
 800353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800353c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003540:	4641      	mov	r1, r8
 8003542:	1851      	adds	r1, r2, r1
 8003544:	6339      	str	r1, [r7, #48]	@ 0x30
 8003546:	4649      	mov	r1, r9
 8003548:	414b      	adcs	r3, r1
 800354a:	637b      	str	r3, [r7, #52]	@ 0x34
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003558:	4659      	mov	r1, fp
 800355a:	00cb      	lsls	r3, r1, #3
 800355c:	4651      	mov	r1, sl
 800355e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003562:	4651      	mov	r1, sl
 8003564:	00ca      	lsls	r2, r1, #3
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	4603      	mov	r3, r0
 800356c:	4642      	mov	r2, r8
 800356e:	189b      	adds	r3, r3, r2
 8003570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003574:	464b      	mov	r3, r9
 8003576:	460a      	mov	r2, r1
 8003578:	eb42 0303 	adc.w	r3, r2, r3
 800357c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800358c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003590:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003594:	460b      	mov	r3, r1
 8003596:	18db      	adds	r3, r3, r3
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800359a:	4613      	mov	r3, r2
 800359c:	eb42 0303 	adc.w	r3, r2, r3
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035aa:	f7fc fe2b 	bl	8000204 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <UART_SetConfig+0x2d4>)
 80035b4:	fba3 1302 	umull	r1, r3, r3, r2
 80035b8:	095b      	lsrs	r3, r3, #5
 80035ba:	2164      	movs	r1, #100	@ 0x64
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	3332      	adds	r3, #50	@ 0x32
 80035c6:	4a08      	ldr	r2, [pc, #32]	@ (80035e8 <UART_SetConfig+0x2d4>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	f003 0207 	and.w	r2, r3, #7
 80035d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4422      	add	r2, r4
 80035da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035dc:	e106      	b.n	80037ec <UART_SetConfig+0x4d8>
 80035de:	bf00      	nop
 80035e0:	40011000 	.word	0x40011000
 80035e4:	40011400 	.word	0x40011400
 80035e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035fe:	4642      	mov	r2, r8
 8003600:	464b      	mov	r3, r9
 8003602:	1891      	adds	r1, r2, r2
 8003604:	6239      	str	r1, [r7, #32]
 8003606:	415b      	adcs	r3, r3
 8003608:	627b      	str	r3, [r7, #36]	@ 0x24
 800360a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800360e:	4641      	mov	r1, r8
 8003610:	1854      	adds	r4, r2, r1
 8003612:	4649      	mov	r1, r9
 8003614:	eb43 0501 	adc.w	r5, r3, r1
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	00eb      	lsls	r3, r5, #3
 8003622:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003626:	00e2      	lsls	r2, r4, #3
 8003628:	4614      	mov	r4, r2
 800362a:	461d      	mov	r5, r3
 800362c:	4643      	mov	r3, r8
 800362e:	18e3      	adds	r3, r4, r3
 8003630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003634:	464b      	mov	r3, r9
 8003636:	eb45 0303 	adc.w	r3, r5, r3
 800363a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800364a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800365a:	4629      	mov	r1, r5
 800365c:	008b      	lsls	r3, r1, #2
 800365e:	4621      	mov	r1, r4
 8003660:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003664:	4621      	mov	r1, r4
 8003666:	008a      	lsls	r2, r1, #2
 8003668:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800366c:	f7fc fdca 	bl	8000204 <__aeabi_uldivmod>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
 8003674:	4b60      	ldr	r3, [pc, #384]	@ (80037f8 <UART_SetConfig+0x4e4>)
 8003676:	fba3 2302 	umull	r2, r3, r3, r2
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	011c      	lsls	r4, r3, #4
 800367e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003682:	2200      	movs	r2, #0
 8003684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003688:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800368c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003690:	4642      	mov	r2, r8
 8003692:	464b      	mov	r3, r9
 8003694:	1891      	adds	r1, r2, r2
 8003696:	61b9      	str	r1, [r7, #24]
 8003698:	415b      	adcs	r3, r3
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a0:	4641      	mov	r1, r8
 80036a2:	1851      	adds	r1, r2, r1
 80036a4:	6139      	str	r1, [r7, #16]
 80036a6:	4649      	mov	r1, r9
 80036a8:	414b      	adcs	r3, r1
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	f04f 0300 	mov.w	r3, #0
 80036b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036b8:	4659      	mov	r1, fp
 80036ba:	00cb      	lsls	r3, r1, #3
 80036bc:	4651      	mov	r1, sl
 80036be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036c2:	4651      	mov	r1, sl
 80036c4:	00ca      	lsls	r2, r1, #3
 80036c6:	4610      	mov	r0, r2
 80036c8:	4619      	mov	r1, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	4642      	mov	r2, r8
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036d4:	464b      	mov	r3, r9
 80036d6:	460a      	mov	r2, r1
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036f8:	4649      	mov	r1, r9
 80036fa:	008b      	lsls	r3, r1, #2
 80036fc:	4641      	mov	r1, r8
 80036fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003702:	4641      	mov	r1, r8
 8003704:	008a      	lsls	r2, r1, #2
 8003706:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800370a:	f7fc fd7b 	bl	8000204 <__aeabi_uldivmod>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4611      	mov	r1, r2
 8003714:	4b38      	ldr	r3, [pc, #224]	@ (80037f8 <UART_SetConfig+0x4e4>)
 8003716:	fba3 2301 	umull	r2, r3, r3, r1
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2264      	movs	r2, #100	@ 0x64
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	1acb      	subs	r3, r1, r3
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	3332      	adds	r3, #50	@ 0x32
 8003728:	4a33      	ldr	r2, [pc, #204]	@ (80037f8 <UART_SetConfig+0x4e4>)
 800372a:	fba2 2303 	umull	r2, r3, r2, r3
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003734:	441c      	add	r4, r3
 8003736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800373a:	2200      	movs	r2, #0
 800373c:	673b      	str	r3, [r7, #112]	@ 0x70
 800373e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003740:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003744:	4642      	mov	r2, r8
 8003746:	464b      	mov	r3, r9
 8003748:	1891      	adds	r1, r2, r2
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	415b      	adcs	r3, r3
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003754:	4641      	mov	r1, r8
 8003756:	1851      	adds	r1, r2, r1
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	4649      	mov	r1, r9
 800375c:	414b      	adcs	r3, r1
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800376c:	4659      	mov	r1, fp
 800376e:	00cb      	lsls	r3, r1, #3
 8003770:	4651      	mov	r1, sl
 8003772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003776:	4651      	mov	r1, sl
 8003778:	00ca      	lsls	r2, r1, #3
 800377a:	4610      	mov	r0, r2
 800377c:	4619      	mov	r1, r3
 800377e:	4603      	mov	r3, r0
 8003780:	4642      	mov	r2, r8
 8003782:	189b      	adds	r3, r3, r2
 8003784:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003786:	464b      	mov	r3, r9
 8003788:	460a      	mov	r2, r1
 800378a:	eb42 0303 	adc.w	r3, r2, r3
 800378e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	663b      	str	r3, [r7, #96]	@ 0x60
 800379a:	667a      	str	r2, [r7, #100]	@ 0x64
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037a8:	4649      	mov	r1, r9
 80037aa:	008b      	lsls	r3, r1, #2
 80037ac:	4641      	mov	r1, r8
 80037ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037b2:	4641      	mov	r1, r8
 80037b4:	008a      	lsls	r2, r1, #2
 80037b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037ba:	f7fc fd23 	bl	8000204 <__aeabi_uldivmod>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4b0d      	ldr	r3, [pc, #52]	@ (80037f8 <UART_SetConfig+0x4e4>)
 80037c4:	fba3 1302 	umull	r1, r3, r3, r2
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	2164      	movs	r1, #100	@ 0x64
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	3332      	adds	r3, #50	@ 0x32
 80037d6:	4a08      	ldr	r2, [pc, #32]	@ (80037f8 <UART_SetConfig+0x4e4>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	095b      	lsrs	r3, r3, #5
 80037de:	f003 020f 	and.w	r2, r3, #15
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4422      	add	r2, r4
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037f2:	46bd      	mov	sp, r7
 80037f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037f8:	51eb851f 	.word	0x51eb851f

080037fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037fc:	b084      	sub	sp, #16
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	f107 001c 	add.w	r0, r7, #28
 800380a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800380e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003812:	2b01      	cmp	r3, #1
 8003814:	d123      	bne.n	800385e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800382a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800383e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa9a 	bl	8003d8c <USB_CoreReset>
 8003858:	4603      	mov	r3, r0
 800385a:	73fb      	strb	r3, [r7, #15]
 800385c:	e01b      	b.n	8003896 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa8e 	bl	8003d8c <USB_CoreReset>
 8003870:	4603      	mov	r3, r0
 8003872:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003874:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003878:	2b00      	cmp	r3, #0
 800387a:	d106      	bne.n	800388a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003880:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	@ 0x38
 8003888:	e005      	b.n	8003896 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003896:	7fbb      	ldrb	r3, [r7, #30]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d10b      	bne.n	80038b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f043 0206 	orr.w	r2, r3, #6
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80038b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038c0:	b004      	add	sp, #16
 80038c2:	4770      	bx	lr

080038c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 0201 	bic.w	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d115      	bne.n	8003934 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003914:	200a      	movs	r0, #10
 8003916:	f7fd faed 	bl	8000ef4 <HAL_Delay>
      ms += 10U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	330a      	adds	r3, #10
 800391e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fa25 	bl	8003d70 <USB_GetMode>
 8003926:	4603      	mov	r3, r0
 8003928:	2b01      	cmp	r3, #1
 800392a:	d01e      	beq.n	800396a <USB_SetCurrentMode+0x84>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003930:	d9f0      	bls.n	8003914 <USB_SetCurrentMode+0x2e>
 8003932:	e01a      	b.n	800396a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d115      	bne.n	8003966 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003946:	200a      	movs	r0, #10
 8003948:	f7fd fad4 	bl	8000ef4 <HAL_Delay>
      ms += 10U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	330a      	adds	r3, #10
 8003950:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa0c 	bl	8003d70 <USB_GetMode>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d005      	beq.n	800396a <USB_SetCurrentMode+0x84>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2bc7      	cmp	r3, #199	@ 0xc7
 8003962:	d9f0      	bls.n	8003946 <USB_SetCurrentMode+0x60>
 8003964:	e001      	b.n	800396a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e005      	b.n	8003976 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2bc8      	cmp	r3, #200	@ 0xc8
 800396e:	d101      	bne.n	8003974 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003980:	b084      	sub	sp, #16
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800398e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e009      	b.n	80039b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	3340      	adds	r3, #64	@ 0x40
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	2200      	movs	r2, #0
 80039ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	3301      	adds	r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b0e      	cmp	r3, #14
 80039b8:	d9f2      	bls.n	80039a0 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d11c      	bne.n	80039fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d0:	f043 0302 	orr.w	r3, r3, #2
 80039d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	e005      	b.n	8003a08 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a00:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d10d      	bne.n	8003a38 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a24:	2100      	movs	r1, #0
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f968 	bl	8003cfc <USB_SetDevSpeed>
 8003a2c:	e008      	b.n	8003a40 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a2e:	2101      	movs	r1, #1
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f963 	bl	8003cfc <USB_SetDevSpeed>
 8003a36:	e003      	b.n	8003a40 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a38:	2103      	movs	r1, #3
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f95e 	bl	8003cfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a40:	2110      	movs	r1, #16
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f8fa 	bl	8003c3c <USB_FlushTxFifo>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f924 	bl	8003ca0 <USB_FlushRxFifo>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a74:	461a      	mov	r2, r3
 8003a76:	2300      	movs	r3, #0
 8003a78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a80:	461a      	mov	r2, r3
 8003a82:	2300      	movs	r3, #0
 8003a84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e043      	b.n	8003b14 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aa2:	d118      	bne.n	8003ad6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	e013      	b.n	8003ae8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003acc:	461a      	mov	r2, r3
 8003ace:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	e008      	b.n	8003ae8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af4:	461a      	mov	r2, r3
 8003af6:	2300      	movs	r3, #0
 8003af8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b06:	461a      	mov	r2, r3
 8003b08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	3301      	adds	r3, #1
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003b18:	461a      	mov	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d3b5      	bcc.n	8003a8c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	e043      	b.n	8003bae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b3c:	d118      	bne.n	8003b70 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b50:	461a      	mov	r2, r3
 8003b52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e013      	b.n	8003b82 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b66:	461a      	mov	r2, r3
 8003b68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e008      	b.n	8003b82 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	2300      	movs	r3, #0
 8003b80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2300      	movs	r3, #0
 8003b92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ba6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	3301      	adds	r3, #1
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d3b5      	bcc.n	8003b26 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bcc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003bda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f043 0210 	orr.w	r2, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	4b10      	ldr	r3, [pc, #64]	@ (8003c38 <USB_DevInit+0x2b8>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f043 0208 	orr.w	r2, r3, #8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d107      	bne.n	8003c28 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c34:	b004      	add	sp, #16
 8003c36:	4770      	bx	lr
 8003c38:	803c3800 	.word	0x803c3800

08003c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c56:	d901      	bls.n	8003c5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e01b      	b.n	8003c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	daf2      	bge.n	8003c4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	019b      	lsls	r3, r3, #6
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3301      	adds	r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003c80:	d901      	bls.n	8003c86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e006      	b.n	8003c94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d0f0      	beq.n	8003c74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cb8:	d901      	bls.n	8003cbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e018      	b.n	8003cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	daf2      	bge.n	8003cac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2210      	movs	r2, #16
 8003cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cdc:	d901      	bls.n	8003ce2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e006      	b.n	8003cf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b10      	cmp	r3, #16
 8003cec:	d0f0      	beq.n	8003cd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003d48:	f023 0303 	bic.w	r3, r3, #3
 8003d4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d5c:	f043 0302 	orr.w	r3, r3, #2
 8003d60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003da4:	d901      	bls.n	8003daa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e01b      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	daf2      	bge.n	8003d98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003dce:	d901      	bls.n	8003dd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e006      	b.n	8003de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d0f0      	beq.n	8003dc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <memset>:
 8003dee:	4402      	add	r2, r0
 8003df0:	4603      	mov	r3, r0
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d100      	bne.n	8003df8 <memset+0xa>
 8003df6:	4770      	bx	lr
 8003df8:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfc:	e7f9      	b.n	8003df2 <memset+0x4>
	...

08003e00 <__libc_init_array>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	4d0d      	ldr	r5, [pc, #52]	@ (8003e38 <__libc_init_array+0x38>)
 8003e04:	4c0d      	ldr	r4, [pc, #52]	@ (8003e3c <__libc_init_array+0x3c>)
 8003e06:	1b64      	subs	r4, r4, r5
 8003e08:	10a4      	asrs	r4, r4, #2
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	42a6      	cmp	r6, r4
 8003e0e:	d109      	bne.n	8003e24 <__libc_init_array+0x24>
 8003e10:	4d0b      	ldr	r5, [pc, #44]	@ (8003e40 <__libc_init_array+0x40>)
 8003e12:	4c0c      	ldr	r4, [pc, #48]	@ (8003e44 <__libc_init_array+0x44>)
 8003e14:	f000 f818 	bl	8003e48 <_init>
 8003e18:	1b64      	subs	r4, r4, r5
 8003e1a:	10a4      	asrs	r4, r4, #2
 8003e1c:	2600      	movs	r6, #0
 8003e1e:	42a6      	cmp	r6, r4
 8003e20:	d105      	bne.n	8003e2e <__libc_init_array+0x2e>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e28:	4798      	blx	r3
 8003e2a:	3601      	adds	r6, #1
 8003e2c:	e7ee      	b.n	8003e0c <__libc_init_array+0xc>
 8003e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e32:	4798      	blx	r3
 8003e34:	3601      	adds	r6, #1
 8003e36:	e7f2      	b.n	8003e1e <__libc_init_array+0x1e>
 8003e38:	08003e80 	.word	0x08003e80
 8003e3c:	08003e80 	.word	0x08003e80
 8003e40:	08003e80 	.word	0x08003e80
 8003e44:	08003e84 	.word	0x08003e84

08003e48 <_init>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr

08003e54 <_fini>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr
