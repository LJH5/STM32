
F103R8T6_pin_setting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080084f8  080084f8  000184f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800892c  0800892c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800892c  0800892c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800892c  0800892c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008930  08008930  00018930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200001d4  08008b08  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08008b08  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011844  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b90  00000000  00000000  00031a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  00034618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000caa  00000000  00000000  00035668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fde  00000000  00000000  00036312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013439  00000000  00000000  000502f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093f58  00000000  00000000  00063729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000541c  00000000  00000000  000f7684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000fcaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080084dc 	.word	0x080084dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080084dc 	.word	0x080084dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f001 f852 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f85a 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f000 fabe 	bl	8001014 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a98:	f000 fa9e 	bl	8000fd8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a9c:	f000 f8b0 	bl	8000c00 <MX_ADC1_Init>
  MX_CAN_Init();
 8000aa0:	f000 f9c0 	bl	8000e24 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000aa4:	f000 fa44 	bl	8000f30 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000aa8:	f000 fa6c 	bl	8000f84 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000aac:	f000 f9f0 	bl	8000e90 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan);
 8000ab0:	481e      	ldr	r0, [pc, #120]	; (8000b2c <main+0xa4>)
 8000ab2:	f001 ff4d 	bl	8002950 <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim1);
 8000ab6:	481e      	ldr	r0, [pc, #120]	; (8000b30 <main+0xa8>)
 8000ab8:	f003 fe2a 	bl	8004710 <HAL_TIM_Base_Start_IT>

  can_rx();
 8000abc:	f000 fc8c 	bl	80013d8 <can_rx>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	if(HAL_ADC_Stop_DMA(&hadc1)==HAL_OK)
 8000ac0:	481c      	ldr	r0, [pc, #112]	; (8000b34 <main+0xac>)
 8000ac2:	f001 fa4f 	bl	8001f64 <HAL_ADC_Stop_DMA>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1f9      	bne.n	8000ac0 <main+0x38>
  	{
  		if(sw==0)
 8000acc:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <main+0xb0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d114      	bne.n	8000afe <main+0x76>
  		{
  			HAL_GPIO_WritePin(GPIOB, IR_MGT_CS_0_Pin,GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ada:	4818      	ldr	r0, [pc, #96]	; (8000b3c <main+0xb4>)
 8000adc:	f003 f8ea 	bl	8003cb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IR_MGT_CS_1_Pin,GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae6:	4815      	ldr	r0, [pc, #84]	; (8000b3c <main+0xb4>)
 8000ae8:	f003 f8e4 	bl	8003cb4 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_val1, 16);
 8000aec:	2210      	movs	r2, #16
 8000aee:	4914      	ldr	r1, [pc, #80]	; (8000b40 <main+0xb8>)
 8000af0:	4810      	ldr	r0, [pc, #64]	; (8000b34 <main+0xac>)
 8000af2:	f001 f959 	bl	8001da8 <HAL_ADC_Start_DMA>
				sw=1;
 8000af6:	4b10      	ldr	r3, [pc, #64]	; (8000b38 <main+0xb0>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e013      	b.n	8000b26 <main+0x9e>
  		}
  		else
  		{
  			HAL_GPIO_WritePin(GPIOB, IR_MGT_CS_0_Pin, GPIO_PIN_SET);
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <main+0xb4>)
 8000b06:	f003 f8d5 	bl	8003cb4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, IR_MGT_CS_1_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b10:	480a      	ldr	r0, [pc, #40]	; (8000b3c <main+0xb4>)
 8000b12:	f003 f8cf 	bl	8003cb4 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_val2, 16);
 8000b16:	2210      	movs	r2, #16
 8000b18:	490a      	ldr	r1, [pc, #40]	; (8000b44 <main+0xbc>)
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <main+0xac>)
 8000b1c:	f001 f944 	bl	8001da8 <HAL_ADC_Start_DMA>
				sw=0;
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <main+0xb0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
  		}
  		can_tx();
 8000b26:	f000 fb1d 	bl	8001164 <can_tx>
  	if(HAL_ADC_Stop_DMA(&hadc1)==HAL_OK)
 8000b2a:	e7c9      	b.n	8000ac0 <main+0x38>
 8000b2c:	20000264 	.word	0x20000264
 8000b30:	2000028c 	.word	0x2000028c
 8000b34:	200001f0 	.word	0x200001f0
 8000b38:	20000364 	.word	0x20000364
 8000b3c:	40010c00 	.word	0x40010c00
 8000b40:	20000368 	.word	0x20000368
 8000b44:	20000388 	.word	0x20000388

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b094      	sub	sp, #80	; 0x50
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b52:	2228      	movs	r2, #40	; 0x28
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f005 fe12 	bl	8006780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b86:	2301      	movs	r3, #1
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b94:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 f8a0 	bl	8003ce4 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000baa:	f000 fabb 	bl	8001124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	230f      	movs	r3, #15
 8000bb0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2102      	movs	r1, #2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 fb0c 	bl	80041e8 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000bd6:	f000 faa5 	bl	8001124 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000be2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fc8c 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bf2:	f000 fa97 	bl	8001124 <Error_Handler>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3750      	adds	r7, #80	; 0x50
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c10:	4b82      	ldr	r3, [pc, #520]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c12:	4a83      	ldr	r2, [pc, #524]	; (8000e20 <MX_ADC1_Init+0x220>)
 8000c14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c16:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c1e:	4b7f      	ldr	r3, [pc, #508]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c24:	4b7d      	ldr	r3, [pc, #500]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c2a:	4b7c      	ldr	r3, [pc, #496]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c2c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c32:	4b7a      	ldr	r3, [pc, #488]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8000c38:	4b78      	ldr	r3, [pc, #480]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c3e:	4877      	ldr	r0, [pc, #476]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c40:	f000 ffda 	bl	8001bf8 <HAL_ADC_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c4a:	f000 fa6b 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	486f      	ldr	r0, [pc, #444]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c60:	f001 fab0 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 fa5b 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4868      	ldr	r0, [pc, #416]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c7c:	f001 faa2 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c86:	f000 fa4d 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4861      	ldr	r0, [pc, #388]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000c98:	f001 fa94 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000ca2:	f000 fa3f 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000caa:	2304      	movs	r3, #4
 8000cac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	485a      	ldr	r0, [pc, #360]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000cb4:	f001 fa86 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000cbe:	f000 fa31 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4853      	ldr	r0, [pc, #332]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000cd0:	f001 fa78 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000cda:	f000 fa23 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cde:	2305      	movs	r3, #5
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000ce2:	2306      	movs	r3, #6
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	484c      	ldr	r0, [pc, #304]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000cec:	f001 fa6a 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000cf6:	f000 fa15 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4845      	ldr	r0, [pc, #276]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000d08:	f001 fa5c 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000d12:	f000 fa07 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d16:	2307      	movs	r3, #7
 8000d18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d1a:	2308      	movs	r3, #8
 8000d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	483e      	ldr	r0, [pc, #248]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000d24:	f001 fa4e 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000d2e:	f000 f9f9 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d32:	2308      	movs	r3, #8
 8000d34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000d36:	2309      	movs	r3, #9
 8000d38:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4837      	ldr	r0, [pc, #220]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000d40:	f001 fa40 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000d4a:	f000 f9eb 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d4e:	2309      	movs	r3, #9
 8000d50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000d52:	230a      	movs	r3, #10
 8000d54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4830      	ldr	r0, [pc, #192]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000d5c:	f001 fa32 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000d66:	f000 f9dd 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d6a:	230a      	movs	r3, #10
 8000d6c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000d6e:	230b      	movs	r3, #11
 8000d70:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	4829      	ldr	r0, [pc, #164]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000d78:	f001 fa24 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8000d82:	f000 f9cf 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d86:	230b      	movs	r3, #11
 8000d88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4822      	ldr	r0, [pc, #136]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000d94:	f001 fa16 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8000d9e:	f000 f9c1 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000da2:	230c      	movs	r3, #12
 8000da4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000da6:	230d      	movs	r3, #13
 8000da8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4619      	mov	r1, r3
 8000dae:	481b      	ldr	r0, [pc, #108]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000db0:	f001 fa08 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 8000dba:	f000 f9b3 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000dbe:	230d      	movs	r3, #13
 8000dc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000dc2:	230e      	movs	r3, #14
 8000dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4814      	ldr	r0, [pc, #80]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000dcc:	f001 f9fa 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8000dd6:	f000 f9a5 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000dda:	230e      	movs	r3, #14
 8000ddc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000dde:	230f      	movs	r3, #15
 8000de0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4619      	mov	r1, r3
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000de8:	f001 f9ec 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 8000df2:	f000 f997 	bl	8001124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000df6:	230f      	movs	r3, #15
 8000df8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_ADC1_Init+0x21c>)
 8000e04:	f001 f9de 	bl	80021c4 <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000e0e:	f000 f989 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200001f0 	.word	0x200001f0
 8000e20:	40012400 	.word	0x40012400

08000e24 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e2a:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <MX_CAN_Init+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e42:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e46:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e4e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e5c:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_CAN_Init+0x64>)
 8000e76:	f001 fba7 	bl	80025c8 <HAL_CAN_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e80:	f000 f950 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000264 	.word	0x20000264
 8000e8c:	40006400 	.word	0x40006400

08000e90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <MX_TIM1_Init+0x9c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000eb4:	2247      	movs	r2, #71	; 0x47
 8000eb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000eda:	f003 fbc9 	bl	8004670 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f000 f91e 	bl	8001124 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ef6:	f003 fd65 	bl	80049c4 <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f00:	f000 f910 	bl	8001124 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000f12:	f003 ff3b 	bl	8004d8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f1c:	f000 f902 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2000028c 	.word	0x2000028c
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <MX_USART1_UART_Init+0x50>)
 8000f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f3a:	4b10      	ldr	r3, [pc, #64]	; (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f56:	220c      	movs	r2, #12
 8000f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <MX_USART1_UART_Init+0x4c>)
 8000f68:	f003 ff80 	bl	8004e6c <HAL_UART_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f72:	f000 f8d7 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200002d4 	.word	0x200002d4
 8000f80:	40013800 	.word	0x40013800

08000f84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <MX_USART3_UART_Init+0x50>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_USART3_UART_Init+0x4c>)
 8000fbc:	f003 ff56 	bl	8004e6c <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fc6:	f000 f8ad 	bl	8001124 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000031c 	.word	0x2000031c
 8000fd4:	40004800 	.word	0x40004800

08000fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_DMA_Init+0x38>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <MX_DMA_Init+0x38>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_DMA_Init+0x38>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200b      	movs	r0, #11
 8000ffc:	f002 f9fd 	bl	80033fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001000:	200b      	movs	r0, #11
 8001002:	f002 fa16 	bl	8003432 <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <MX_GPIO_Init+0x104>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a3a      	ldr	r2, [pc, #232]	; (8001118 <MX_GPIO_Init+0x104>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	6193      	str	r3, [r2, #24]
 8001034:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_GPIO_Init+0x104>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	f003 0320 	and.w	r3, r3, #32
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <MX_GPIO_Init+0x104>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a34      	ldr	r2, [pc, #208]	; (8001118 <MX_GPIO_Init+0x104>)
 8001046:	f043 0310 	orr.w	r3, r3, #16
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <MX_GPIO_Init+0x104>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0310 	and.w	r3, r3, #16
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b2f      	ldr	r3, [pc, #188]	; (8001118 <MX_GPIO_Init+0x104>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	4a2e      	ldr	r2, [pc, #184]	; (8001118 <MX_GPIO_Init+0x104>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	6193      	str	r3, [r2, #24]
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <MX_GPIO_Init+0x104>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	4b29      	ldr	r3, [pc, #164]	; (8001118 <MX_GPIO_Init+0x104>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a28      	ldr	r2, [pc, #160]	; (8001118 <MX_GPIO_Init+0x104>)
 8001076:	f043 0308 	orr.w	r3, r3, #8
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <MX_GPIO_Init+0x104>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IR_MGT_CS_1_Pin|IR_MGT_CS_0_Pin|SP_DO1_Pin|SP_DO2_Pin
 8001088:	2200      	movs	r2, #0
 800108a:	f44f 514f 	mov.w	r1, #13248	; 0x33c0
 800108e:	4823      	ldr	r0, [pc, #140]	; (800111c <MX_GPIO_Init+0x108>)
 8001090:	f002 fe10 	bl	8003cb4 <HAL_GPIO_WritePin>
                          |IR_DCS1_Pin|IR_DCS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUSLED_GPIO_Port, STATUSLED_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109a:	4821      	ldr	r0, [pc, #132]	; (8001120 <MX_GPIO_Init+0x10c>)
 800109c:	f002 fe0a 	bl	8003cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IR_MGT_CS_1_Pin IR_MGT_CS_0_Pin SP_DO1_Pin SP_DO2_Pin
                           IR_DCS1_Pin IR_DCS2_Pin */
  GPIO_InitStruct.Pin = IR_MGT_CS_1_Pin|IR_MGT_CS_0_Pin|SP_DO1_Pin|SP_DO2_Pin
 80010a0:	f44f 534f 	mov.w	r3, #13248	; 0x33c0
 80010a4:	613b      	str	r3, [r7, #16]
                          |IR_DCS1_Pin|IR_DCS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0310 	add.w	r3, r7, #16
 80010b6:	4619      	mov	r1, r3
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <MX_GPIO_Init+0x108>)
 80010ba:	f002 fc77 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_DI0_Pin SP_DI1_Pin */
  GPIO_InitStruct.Pin = SP_DI0_Pin|SP_DI1_Pin;
 80010be:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80010c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4619      	mov	r1, r3
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <MX_GPIO_Init+0x108>)
 80010d4:	f002 fc6a 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pins : CPSD_IN1_Pin CPSD_IN2_Pin CPSD_IN3_Pin CPSD_IN4_Pin
                           MODE1_Pin MODE2_Pin */
  GPIO_InitStruct.Pin = CPSD_IN1_Pin|CPSD_IN2_Pin|CPSD_IN3_Pin|CPSD_IN4_Pin
 80010d8:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 80010dc:	613b      	str	r3, [r7, #16]
                          |MODE1_Pin|MODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	4619      	mov	r1, r3
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_GPIO_Init+0x10c>)
 80010ee:	f002 fc5d 	bl	80039ac <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUSLED_Pin */
  GPIO_InitStruct.Pin = STATUSLED_Pin;
 80010f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2302      	movs	r3, #2
 8001102:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATUSLED_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4619      	mov	r1, r3
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_GPIO_Init+0x10c>)
 800110c:	f002 fc4e 	bl	80039ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001110:	bf00      	nop
 8001112:	3720      	adds	r7, #32
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40021000 	.word	0x40021000
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40011000 	.word	0x40011000

08001124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001128:	b672      	cpsid	i
}
 800112a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112c:	e7fe      	b.n	800112c <Error_Handler+0x8>

0800112e <uint16_to_high_and_low_bit>:
CAN_FilterTypeDef  		sFilterConfig;
CAN_RxHeaderTypeDef   RxHeader;
uint8_t               RxData[8];
uint16_t tx_timer;

DataBit uint16_to_high_and_low_bit(uint16_t num) {
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	80fb      	strh	r3, [r7, #6]
	DataBit data_bit;
	// 상위 8비트 추출
	data_bit.high = (uint8_t)(num >> 8);
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	0a1b      	lsrs	r3, r3, #8
 800113c:	b29b      	uxth	r3, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	723b      	strb	r3, [r7, #8]
	// 하위 8비트 추출
	data_bit.low = (uint8_t)(num & 0xFF);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	727b      	strb	r3, [r7, #9]

	return data_bit;
 8001148:	893b      	ldrh	r3, [r7, #8]
 800114a:	81bb      	strh	r3, [r7, #12]
 800114c:	2300      	movs	r3, #0
 800114e:	7b3a      	ldrb	r2, [r7, #12]
 8001150:	f362 0307 	bfi	r3, r2, #0, #8
 8001154:	7b7a      	ldrb	r2, [r7, #13]
 8001156:	f362 230f 	bfi	r3, r2, #8, #8
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <can_tx>:

uint16_t idx = 0;
uint8_t mg_data_cnt = 0;

void can_tx(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
	uint8_t TxData[8];
	uint32_t TxMailbox;

	DataBit data_bit;

	if (HAL_CAN_GetError(&hcan) != HAL_CAN_ERROR_NONE)
 800116a:	4862      	ldr	r0, [pc, #392]	; (80012f4 <can_tx+0x190>)
 800116c:	f002 f863 	bl	8003236 <HAL_CAN_GetError>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <can_tx+0x18>
	{
		Error_Handler();
 8001176:	f7ff ffd5 	bl	8001124 <Error_Handler>
 800117a:	e0b7      	b.n	80012ec <can_tx+0x188>
		return;
	}

	// set can header
	TxHeader.StdId = 0x123;
 800117c:	f240 1323 	movw	r3, #291	; 0x123
 8001180:	617b      	str	r3, [r7, #20]
	TxHeader.ExtId = 0x01;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
	TxHeader.DLC = 8;
 800118e:	2308      	movs	r3, #8
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TransmitGlobalTime = DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	if (tx_timer >= 50)
 8001198:	4b57      	ldr	r3, [pc, #348]	; (80012f8 <can_tx+0x194>)
 800119a:	881b      	ldrh	r3, [r3, #0]
 800119c:	2b31      	cmp	r3, #49	; 0x31
 800119e:	f240 80a5 	bls.w	80012ec <can_tx+0x188>
	{
		tx_timer = 0;
 80011a2:	4b55      	ldr	r3, [pc, #340]	; (80012f8 <can_tx+0x194>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	801a      	strh	r2, [r3, #0]
		while (mg_data_cnt < 33) {
 80011a8:	bf00      	nop
 80011aa:	4b54      	ldr	r3, [pc, #336]	; (80012fc <can_tx+0x198>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b20      	cmp	r3, #32
 80011b0:	f200 809c 	bhi.w	80012ec <can_tx+0x188>
			// mg data
			data_bit = uint16_to_high_and_low_bit(idx);
 80011b4:	4b52      	ldr	r3, [pc, #328]	; (8001300 <can_tx+0x19c>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ffb8 	bl	800112e <uint16_to_high_and_low_bit>
 80011be:	4603      	mov	r3, r0
 80011c0:	80bb      	strh	r3, [r7, #4]
			TxData[0] = data_bit.high;
 80011c2:	793b      	ldrb	r3, [r7, #4]
 80011c4:	733b      	strb	r3, [r7, #12]
			TxData[1] = data_bit.low;
 80011c6:	797b      	ldrb	r3, [r7, #5]
 80011c8:	737b      	strb	r3, [r7, #13]
			for (uint8_t i = mg_data_cnt; i < mg_data_cnt+3; i++) {
 80011ca:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <can_tx+0x198>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80011d2:	e04e      	b.n	8001272 <can_tx+0x10e>
				// can data index
				if (i < 16)
 80011d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d80a      	bhi.n	80011f2 <can_tx+0x8e>
				{
					data_bit = uint16_to_high_and_low_bit(adc_val1[i]);
 80011dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <can_tx+0x1a0>)
 80011e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ffa1 	bl	800112e <uint16_to_high_and_low_bit>
 80011ec:	4603      	mov	r3, r0
 80011ee:	80bb      	strh	r3, [r7, #4]
 80011f0:	e00e      	b.n	8001210 <can_tx+0xac>
				}
				else if(i < 32)
 80011f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011f6:	2b1f      	cmp	r3, #31
 80011f8:	d843      	bhi.n	8001282 <can_tx+0x11e>
				{
					data_bit = uint16_to_high_and_low_bit(adc_val2[i - 16]);
 80011fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011fe:	3b10      	subs	r3, #16
 8001200:	4a41      	ldr	r2, [pc, #260]	; (8001308 <can_tx+0x1a4>)
 8001202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff91 	bl	800112e <uint16_to_high_and_low_bit>
 800120c:	4603      	mov	r3, r0
 800120e:	80bb      	strh	r3, [r7, #4]
				}
				else
				{
					break;
				}
				TxData[(i % 3) * 2 + 2] = data_bit.high;
 8001210:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001214:	4b3d      	ldr	r3, [pc, #244]	; (800130c <can_tx+0x1a8>)
 8001216:	fba3 1302 	umull	r1, r3, r3, r2
 800121a:	0859      	lsrs	r1, r3, #1
 800121c:	460b      	mov	r3, r1
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	440b      	add	r3, r1
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	3301      	adds	r3, #1
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	793a      	ldrb	r2, [r7, #4]
 800122c:	3330      	adds	r3, #48	; 0x30
 800122e:	443b      	add	r3, r7
 8001230:	f803 2c24 	strb.w	r2, [r3, #-36]
				TxData[(i % 3) * 2 + 3] = data_bit.low;
 8001234:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001238:	4b34      	ldr	r3, [pc, #208]	; (800130c <can_tx+0x1a8>)
 800123a:	fba3 1302 	umull	r1, r3, r3, r2
 800123e:	0859      	lsrs	r1, r3, #1
 8001240:	460b      	mov	r3, r1
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	440b      	add	r3, r1
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	b2db      	uxtb	r3, r3
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	3303      	adds	r3, #3
 800124e:	797a      	ldrb	r2, [r7, #5]
 8001250:	3330      	adds	r3, #48	; 0x30
 8001252:	443b      	add	r3, r7
 8001254:	f803 2c24 	strb.w	r2, [r3, #-36]
				if (i == 31)
 8001258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800125c:	2b1f      	cmp	r3, #31
 800125e:	d103      	bne.n	8001268 <can_tx+0x104>
				{
					TxData[6] = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	74bb      	strb	r3, [r7, #18]
					TxData[7] = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	74fb      	strb	r3, [r7, #19]
			for (uint8_t i = mg_data_cnt; i < mg_data_cnt+3; i++) {
 8001268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800126c:	3301      	adds	r3, #1
 800126e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <can_tx+0x198>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	1c9a      	adds	r2, r3, #2
 8001278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800127c:	429a      	cmp	r2, r3
 800127e:	daa9      	bge.n	80011d4 <can_tx+0x70>
 8001280:	e000      	b.n	8001284 <can_tx+0x120>
					break;
 8001282:	bf00      	nop
				}
			}
			mg_data_cnt = (mg_data_cnt + 3) % 33;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <can_tx+0x198>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	1cda      	adds	r2, r3, #3
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <can_tx+0x1ac>)
 800128c:	fb83 1302 	smull	r1, r3, r3, r2
 8001290:	10d9      	asrs	r1, r3, #3
 8001292:	17d3      	asrs	r3, r2, #31
 8001294:	1ac9      	subs	r1, r1, r3
 8001296:	460b      	mov	r3, r1
 8001298:	015b      	lsls	r3, r3, #5
 800129a:	440b      	add	r3, r1
 800129c:	1ad1      	subs	r1, r2, r3
 800129e:	b2ca      	uxtb	r2, r1
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <can_tx+0x198>)
 80012a2:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % 11;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <can_tx+0x19c>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	1c59      	adds	r1, r3, #1
 80012aa:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <can_tx+0x1b0>)
 80012ac:	fb83 2301 	smull	r2, r3, r3, r1
 80012b0:	105a      	asrs	r2, r3, #1
 80012b2:	17cb      	asrs	r3, r1, #31
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	1aca      	subs	r2, r1, r3
 80012c2:	b292      	uxth	r2, r2
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <can_tx+0x19c>)
 80012c6:	801a      	strh	r2, [r3, #0]
			// start transmission
			if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	f107 020c 	add.w	r2, r7, #12
 80012d0:	f107 0114 	add.w	r1, r7, #20
 80012d4:	4807      	ldr	r0, [pc, #28]	; (80012f4 <can_tx+0x190>)
 80012d6:	f001 fb7f 	bl	80029d8 <HAL_CAN_AddTxMessage>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d004      	beq.n	80012ea <can_tx+0x186>
			{
				printf("sending is fail\r\n");
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <can_tx+0x1b4>)
 80012e2:	f005 f96d 	bl	80065c0 <puts>
				Error_Handler();
 80012e6:	f7ff ff1d 	bl	8001124 <Error_Handler>
			}
			break;
 80012ea:	bf00      	nop
		}
	}
}
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000264 	.word	0x20000264
 80012f8:	200003f4 	.word	0x200003f4
 80012fc:	200003f8 	.word	0x200003f8
 8001300:	200003f6 	.word	0x200003f6
 8001304:	20000368 	.word	0x20000368
 8001308:	20000388 	.word	0x20000388
 800130c:	aaaaaaab 	.word	0xaaaaaaab
 8001310:	3e0f83e1 	.word	0x3e0f83e1
 8001314:	2e8ba2e9 	.word	0x2e8ba2e9
 8001318:	080084f8 	.word	0x080084f8

0800131c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 800131c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af06      	add	r7, sp, #24
 8001322:	6078      	str	r0, [r7, #4]
	printf("%s\r\n", __FUNCTION__);
 8001324:	491e      	ldr	r1, [pc, #120]	; (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8001326:	481f      	ldr	r0, [pc, #124]	; (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8001328:	f005 f8e4 	bl	80064f4 <iprintf>
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001330:	2100      	movs	r1, #0
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f001 fc1f 	bl	8002b76 <HAL_CAN_GetRxMessage>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_CAN_RxFifo0MsgPendingCallback+0x26>
  {
    /* Reception Error */
    Error_Handler();
 800133e:	f7ff fef1 	bl	8001124 <Error_Handler>
  }

  printf("StdID: %04lx, IDE: %ld, DLC: %ld\r\n", RxHeader.StdId, RxHeader.IDE, RxHeader.DLC);
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001344:	6819      	ldr	r1, [r3, #0]
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	4818      	ldr	r0, [pc, #96]	; (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8001350:	f005 f8d0 	bl	80064f4 <iprintf>
  printf("Data: %d %d %d %d %d %d %d %d\r\n", RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461d      	mov	r5, r3
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	461e      	mov	r6, r3
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001362:	789b      	ldrb	r3, [r3, #2]
 8001364:	469c      	mov	ip, r3
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001368:	78db      	ldrb	r3, [r3, #3]
 800136a:	461a      	mov	r2, r3
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800136e:	791b      	ldrb	r3, [r3, #4]
 8001370:	4619      	mov	r1, r3
 8001372:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001374:	795b      	ldrb	r3, [r3, #5]
 8001376:	4618      	mov	r0, r3
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800137a:	799b      	ldrb	r3, [r3, #6]
 800137c:	461c      	mov	r4, r3
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 8001380:	79db      	ldrb	r3, [r3, #7]
 8001382:	9304      	str	r3, [sp, #16]
 8001384:	9403      	str	r4, [sp, #12]
 8001386:	9002      	str	r0, [sp, #8]
 8001388:	9101      	str	r1, [sp, #4]
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	4663      	mov	r3, ip
 800138e:	4632      	mov	r2, r6
 8001390:	4629      	mov	r1, r5
 8001392:	4808      	ldr	r0, [pc, #32]	; (80013b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8001394:	f005 f8ae 	bl	80064f4 <iprintf>

}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	08008558 	.word	0x08008558
 80013a4:	0800850c 	.word	0x0800850c
 80013a8:	200003ec 	.word	0x200003ec
 80013ac:	200003d0 	.word	0x200003d0
 80013b0:	08008514 	.word	0x08008514
 80013b4:	08008538 	.word	0x08008538

080013b8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	printf("%s\r\n", __FUNCTION__);
 80013c0:	4903      	ldr	r1, [pc, #12]	; (80013d0 <HAL_CAN_ErrorCallback+0x18>)
 80013c2:	4804      	ldr	r0, [pc, #16]	; (80013d4 <HAL_CAN_ErrorCallback+0x1c>)
 80013c4:	f005 f896 	bl	80064f4 <iprintf>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	0800857c 	.word	0x0800857c
 80013d4:	0800850c 	.word	0x0800850c

080013d8 <can_rx>:

void can_rx(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	// can filter
  sFilterConfig.FilterBank = 0;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <can_rx+0x68>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <can_rx+0x68>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <can_rx+0x68>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <can_rx+0x68>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <can_rx+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <can_rx+0x68>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <can_rx+0x68>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <can_rx+0x68>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <can_rx+0x68>)
 800140e:	2201      	movs	r2, #1
 8001410:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <can_rx+0x68>)
 8001414:	220e      	movs	r2, #14
 8001416:	625a      	str	r2, [r3, #36]	; 0x24

  if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001418:	4909      	ldr	r1, [pc, #36]	; (8001440 <can_rx+0x68>)
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <can_rx+0x6c>)
 800141c:	f001 f9cf 	bl	80027be <HAL_CAN_ConfigFilter>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <can_rx+0x52>
    {
      /* Filter configuration Error */
      Error_Handler();
 8001426:	f7ff fe7d 	bl	8001124 <Error_Handler>
    }

  /* Activate CAN RX notification */
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800142a:	2102      	movs	r1, #2
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <can_rx+0x6c>)
 800142e:	f001 fcc3 	bl	8002db8 <HAL_CAN_ActivateNotification>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <can_rx+0x64>
  {
    /* Notification Error */
    Error_Handler();
 8001438:	f7ff fe74 	bl	8001124 <Error_Handler>
  }
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003a8 	.word	0x200003a8
 8001444:	20000264 	.word	0x20000264

08001448 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d105      	bne.n	8001466 <HAL_TIM_PeriodElapsedCallback+0x1e>
    	tx_timer++;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	b29a      	uxth	r2, r3
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001464:	801a      	strh	r2, [r3, #0]
    }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	40012c00 	.word	0x40012c00
 8001474:	200003f4 	.word	0x200003f4

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_MspInit+0x54>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a12      	ldr	r2, [pc, #72]	; (80014cc <HAL_MspInit+0x54>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <HAL_MspInit+0x54>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <HAL_MspInit+0x54>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	4a0c      	ldr	r2, [pc, #48]	; (80014cc <HAL_MspInit+0x54>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	61d3      	str	r3, [r2, #28]
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_MspInit+0x54>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_MspInit+0x58>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_MspInit+0x58>)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010000 	.word	0x40010000

080014d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a42      	ldr	r2, [pc, #264]	; (80015f8 <HAL_ADC_MspInit+0x124>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d17d      	bne.n	80015f0 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f4:	4b41      	ldr	r3, [pc, #260]	; (80015fc <HAL_ADC_MspInit+0x128>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a40      	ldr	r2, [pc, #256]	; (80015fc <HAL_ADC_MspInit+0x128>)
 80014fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <HAL_ADC_MspInit+0x128>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_ADC_MspInit+0x128>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a3a      	ldr	r2, [pc, #232]	; (80015fc <HAL_ADC_MspInit+0x128>)
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <HAL_ADC_MspInit+0x128>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0310 	and.w	r3, r3, #16
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_ADC_MspInit+0x128>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <HAL_ADC_MspInit+0x128>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_ADC_MspInit+0x128>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_ADC_MspInit+0x128>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	4a2e      	ldr	r2, [pc, #184]	; (80015fc <HAL_ADC_MspInit+0x128>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6193      	str	r3, [r2, #24]
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <HAL_ADC_MspInit+0x128>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001554:	233f      	movs	r3, #63	; 0x3f
 8001556:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001558:	2303      	movs	r3, #3
 800155a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155c:	f107 0318 	add.w	r3, r7, #24
 8001560:	4619      	mov	r1, r3
 8001562:	4827      	ldr	r0, [pc, #156]	; (8001600 <HAL_ADC_MspInit+0x12c>)
 8001564:	f002 fa22 	bl	80039ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001568:	23ff      	movs	r3, #255	; 0xff
 800156a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800156c:	2303      	movs	r3, #3
 800156e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0318 	add.w	r3, r7, #24
 8001574:	4619      	mov	r1, r3
 8001576:	4823      	ldr	r0, [pc, #140]	; (8001604 <HAL_ADC_MspInit+0x130>)
 8001578:	f002 fa18 	bl	80039ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800157c:	2303      	movs	r3, #3
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001580:	2303      	movs	r3, #3
 8001582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0318 	add.w	r3, r7, #24
 8001588:	4619      	mov	r1, r3
 800158a:	481f      	ldr	r0, [pc, #124]	; (8001608 <HAL_ADC_MspInit+0x134>)
 800158c:	f002 fa0e 	bl	80039ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_ADC_MspInit+0x138>)
 8001592:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <HAL_ADC_MspInit+0x13c>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <HAL_ADC_MspInit+0x138>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_ADC_MspInit+0x138>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <HAL_ADC_MspInit+0x138>)
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_ADC_MspInit+0x138>)
 80015aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_ADC_MspInit+0x138>)
 80015b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_ADC_MspInit+0x138>)
 80015ba:	2220      	movs	r2, #32
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_ADC_MspInit+0x138>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015c4:	4811      	ldr	r0, [pc, #68]	; (800160c <HAL_ADC_MspInit+0x138>)
 80015c6:	f001 ff4f 	bl	8003468 <HAL_DMA_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 80015d0:	f7ff fda8 	bl	8001124 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_ADC_MspInit+0x138>)
 80015d8:	621a      	str	r2, [r3, #32]
 80015da:	4a0c      	ldr	r2, [pc, #48]	; (800160c <HAL_ADC_MspInit+0x138>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2012      	movs	r0, #18
 80015e6:	f001 ff08 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80015ea:	2012      	movs	r0, #18
 80015ec:	f001 ff21 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40012400 	.word	0x40012400
 80015fc:	40021000 	.word	0x40021000
 8001600:	40011000 	.word	0x40011000
 8001604:	40010800 	.word	0x40010800
 8001608:	40010c00 	.word	0x40010c00
 800160c:	20000220 	.word	0x20000220
 8001610:	40020008 	.word	0x40020008

08001614 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <HAL_CAN_MspInit+0xcc>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d151      	bne.n	80016d8 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_CAN_MspInit+0xd0>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	4a2a      	ldr	r2, [pc, #168]	; (80016e4 <HAL_CAN_MspInit+0xd0>)
 800163a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800163e:	61d3      	str	r3, [r2, #28]
 8001640:	4b28      	ldr	r3, [pc, #160]	; (80016e4 <HAL_CAN_MspInit+0xd0>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_CAN_MspInit+0xd0>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <HAL_CAN_MspInit+0xd0>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_CAN_MspInit+0xd0>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001668:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0310 	add.w	r3, r7, #16
 8001676:	4619      	mov	r1, r3
 8001678:	481b      	ldr	r0, [pc, #108]	; (80016e8 <HAL_CAN_MspInit+0xd4>)
 800167a:	f002 f997 	bl	80039ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	4815      	ldr	r0, [pc, #84]	; (80016e8 <HAL_CAN_MspInit+0xd4>)
 8001694:	f002 f98a 	bl	80039ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	2100      	movs	r1, #0
 800169c:	2013      	movs	r0, #19
 800169e:	f001 feac 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80016a2:	2013      	movs	r0, #19
 80016a4:	f001 fec5 	bl	8003432 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	2014      	movs	r0, #20
 80016ae:	f001 fea4 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80016b2:	2014      	movs	r0, #20
 80016b4:	f001 febd 	bl	8003432 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	2015      	movs	r0, #21
 80016be:	f001 fe9c 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80016c2:	2015      	movs	r0, #21
 80016c4:	f001 feb5 	bl	8003432 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2100      	movs	r1, #0
 80016cc:	2016      	movs	r0, #22
 80016ce:	f001 fe94 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80016d2:	2016      	movs	r0, #22
 80016d4:	f001 fead 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	3720      	adds	r7, #32
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40006400 	.word	0x40006400
 80016e4:	40021000 	.word	0x40021000
 80016e8:	40010800 	.word	0x40010800

080016ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_TIM_Base_MspInit+0x44>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d113      	bne.n	8001726 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016fe:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <HAL_TIM_Base_MspInit+0x48>)
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <HAL_TIM_Base_MspInit+0x48>)
 8001704:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001708:	6193      	str	r3, [r2, #24]
 800170a:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <HAL_TIM_Base_MspInit+0x48>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2100      	movs	r1, #0
 800171a:	2019      	movs	r0, #25
 800171c:	f001 fe6d 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001720:	2019      	movs	r0, #25
 8001722:	f001 fe86 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40012c00 	.word	0x40012c00
 8001734:	40021000 	.word	0x40021000

08001738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a40      	ldr	r2, [pc, #256]	; (8001854 <HAL_UART_MspInit+0x11c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d13a      	bne.n	80017ce <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001758:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <HAL_UART_MspInit+0x120>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <HAL_UART_MspInit+0x120>)
 800175e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <HAL_UART_MspInit+0x120>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_UART_MspInit+0x120>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a38      	ldr	r2, [pc, #224]	; (8001858 <HAL_UART_MspInit+0x120>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b36      	ldr	r3, [pc, #216]	; (8001858 <HAL_UART_MspInit+0x120>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	4619      	mov	r1, r3
 800179c:	482f      	ldr	r0, [pc, #188]	; (800185c <HAL_UART_MspInit+0x124>)
 800179e:	f002 f905 	bl	80039ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b0:	f107 0318 	add.w	r3, r7, #24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4829      	ldr	r0, [pc, #164]	; (800185c <HAL_UART_MspInit+0x124>)
 80017b8:	f002 f8f8 	bl	80039ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2025      	movs	r0, #37	; 0x25
 80017c2:	f001 fe1a 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017c6:	2025      	movs	r0, #37	; 0x25
 80017c8:	f001 fe33 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017cc:	e03e      	b.n	800184c <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a23      	ldr	r2, [pc, #140]	; (8001860 <HAL_UART_MspInit+0x128>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d139      	bne.n	800184c <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_UART_MspInit+0x120>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_UART_MspInit+0x120>)
 80017de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e2:	61d3      	str	r3, [r2, #28]
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_UART_MspInit+0x120>)
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_UART_MspInit+0x120>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <HAL_UART_MspInit+0x120>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6193      	str	r3, [r2, #24]
 80017fc:	4b16      	ldr	r3, [pc, #88]	; (8001858 <HAL_UART_MspInit+0x120>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 0318 	add.w	r3, r7, #24
 800181a:	4619      	mov	r1, r3
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <HAL_UART_MspInit+0x12c>)
 800181e:	f002 f8c5 	bl	80039ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0318 	add.w	r3, r7, #24
 8001834:	4619      	mov	r1, r3
 8001836:	480b      	ldr	r0, [pc, #44]	; (8001864 <HAL_UART_MspInit+0x12c>)
 8001838:	f002 f8b8 	bl	80039ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2027      	movs	r0, #39	; 0x27
 8001842:	f001 fdda 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001846:	2027      	movs	r0, #39	; 0x27
 8001848:	f001 fdf3 	bl	8003432 <HAL_NVIC_EnableIRQ>
}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40013800 	.word	0x40013800
 8001858:	40021000 	.word	0x40021000
 800185c:	40010800 	.word	0x40010800
 8001860:	40004800 	.word	0x40004800
 8001864:	40010c00 	.word	0x40010c00

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ae:	f000 f987 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <DMA1_Channel1_IRQHandler+0x10>)
 80018be:	f001 ff41 	bl	8003744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000220 	.word	0x20000220

080018cc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <ADC1_2_IRQHandler+0x10>)
 80018d2:	f000 fb93 	bl	8001ffc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200001f0 	.word	0x200001f0

080018e0 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80018e6:	f001 fa8c 	bl	8002e02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000264 	.word	0x20000264

080018f4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018fa:	f001 fa82 	bl	8002e02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000264 	.word	0x20000264

08001908 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <CAN1_RX1_IRQHandler+0x10>)
 800190e:	f001 fa78 	bl	8002e02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000264 	.word	0x20000264

0800191c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <CAN1_SCE_IRQHandler+0x10>)
 8001922:	f001 fa6e 	bl	8002e02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000264 	.word	0x20000264

08001930 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <TIM1_UP_IRQHandler+0x10>)
 8001936:	f002 ff3d 	bl	80047b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000028c 	.word	0x2000028c

08001944 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <USART1_IRQHandler+0x10>)
 800194a:	f003 fb63 	bl	8005014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200002d4 	.word	0x200002d4

08001958 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <USART3_IRQHandler+0x10>)
 800195e:	f003 fb59 	bl	8005014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	2000031c 	.word	0x2000031c

0800196c <_write>:



#include "sys_func.h"

int _write(int file, uint8_t* p, int len){
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, p, len, 10);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	b29a      	uxth	r2, r3
 800197c:	230a      	movs	r3, #10
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	4803      	ldr	r0, [pc, #12]	; (8001990 <_write+0x24>)
 8001982:	f003 fac3 	bl	8004f0c <HAL_UART_Transmit>
	return len;
 8001986:	687b      	ldr	r3, [r7, #4]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000031c 	.word	0x2000031c

08001994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <_kill>:

int _kill(int pid, int sig)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ac:	f004 ff3a 	bl	8006824 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2216      	movs	r2, #22
 80019b4:	601a      	str	r2, [r3, #0]
  return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_exit>:

void _exit (int status)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ca:	f04f 31ff 	mov.w	r1, #4294967295
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffe7 	bl	80019a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d4:	e7fe      	b.n	80019d4 <_exit+0x12>

080019d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e00a      	b.n	80019fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019e8:	f3af 8000 	nop.w
 80019ec:	4601      	mov	r1, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	60ba      	str	r2, [r7, #8]
 80019f4:	b2ca      	uxtb	r2, r1
 80019f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dbf0      	blt.n	80019e8 <_read+0x12>
  }

  return len;
 8001a06:	687b      	ldr	r3, [r7, #4]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr

08001a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a36:	605a      	str	r2, [r3, #4]
  return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <_isatty>:

int _isatty(int file)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4c:	2301      	movs	r3, #1
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f004 fec0 	bl	8006824 <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20005000 	.word	0x20005000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	200003fc 	.word	0x200003fc
 8001ad8:	20000550 	.word	0x20000550

08001adc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae8:	f7ff fff8 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480b      	ldr	r0, [pc, #44]	; (8001b1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aee:	490c      	ldr	r1, [pc, #48]	; (8001b20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b04:	4c09      	ldr	r4, [pc, #36]	; (8001b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f004 fe8d 	bl	8006830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b16:	f7fe ffb7 	bl	8000a88 <main>
  bx lr
 8001b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b24:	08008934 	.word	0x08008934
  ldr r2, =_sbss
 8001b28:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b2c:	20000550 	.word	0x20000550

08001b30 <DMA1_Channel2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <DMA1_Channel2_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <HAL_Init+0x28>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <HAL_Init+0x28>)
 8001b3e:	f043 0310 	orr.w	r3, r3, #16
 8001b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f001 fc4d 	bl	80033e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f000 f808 	bl	8001b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff fc92 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x54>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_InitTick+0x58>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f001 fc65 	bl	800344e <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f001 fc2d 	bl	80033fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_InitTick+0x5c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x1c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <HAL_IncTick+0x20>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <HAL_IncTick+0x20>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	20000400 	.word	0x20000400

08001be4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b02      	ldr	r3, [pc, #8]	; (8001bf4 <HAL_GetTick+0x10>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	20000400 	.word	0x20000400

08001bf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0be      	b.n	8001d98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d109      	bne.n	8001c3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fc4c 	bl	80014d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fc13 	bl	8002468 <ADC_ConversionStop_Disable>
 8001c42:	4603      	mov	r3, r0
 8001c44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f040 8099 	bne.w	8001d86 <HAL_ADC_Init+0x18e>
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f040 8095 	bne.w	8001d86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c64:	f023 0302 	bic.w	r3, r3, #2
 8001c68:	f043 0202 	orr.w	r2, r3, #2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7b1b      	ldrb	r3, [r3, #12]
 8001c7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c90:	d003      	beq.n	8001c9a <HAL_ADC_Init+0xa2>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d102      	bne.n	8001ca0 <HAL_ADC_Init+0xa8>
 8001c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9e:	e000      	b.n	8001ca2 <HAL_ADC_Init+0xaa>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7d1b      	ldrb	r3, [r3, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d119      	bne.n	8001ce4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7b1b      	ldrb	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	035a      	lsls	r2, r3, #13
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e00b      	b.n	8001ce4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f043 0220 	orr.w	r2, r3, #32
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_ADC_Init+0x1a8>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d14:	d003      	beq.n	8001d1e <HAL_ADC_Init+0x126>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d104      	bne.n	8001d28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	051b      	lsls	r3, r3, #20
 8001d26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <HAL_ADC_Init+0x1ac>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d10b      	bne.n	8001d64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	f023 0303 	bic.w	r3, r3, #3
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d62:	e018      	b.n	8001d96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d68:	f023 0312 	bic.w	r3, r3, #18
 8001d6c:	f043 0210 	orr.w	r2, r3, #16
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d84:	e007      	b.n	8001d96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	ffe1f7fd 	.word	0xffe1f7fd
 8001da4:	ff1f0efe 	.word	0xff1f0efe

08001da8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a64      	ldr	r2, [pc, #400]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_ADC_Start_DMA+0x24>
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a63      	ldr	r2, [pc, #396]	; (8001f54 <HAL_ADC_Start_DMA+0x1ac>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d106      	bne.n	8001dda <HAL_ADC_Start_DMA+0x32>
 8001dcc:	4b60      	ldr	r3, [pc, #384]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f040 80b3 	bne.w	8001f40 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_ADC_Start_DMA+0x40>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e0ae      	b.n	8001f46 <HAL_ADC_Start_DMA+0x19e>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f000 fadf 	bl	80023b4 <ADC_Enable>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dfa:	7dfb      	ldrb	r3, [r7, #23]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 809a 	bne.w	8001f36 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e0a:	f023 0301 	bic.w	r3, r3, #1
 8001e0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a4e      	ldr	r2, [pc, #312]	; (8001f54 <HAL_ADC_Start_DMA+0x1ac>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_Start_DMA+0x84>
 8001e20:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d115      	bne.n	8001e58 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d026      	beq.n	8001e94 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e56:	e01d      	b.n	8001e94 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a39      	ldr	r2, [pc, #228]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d004      	beq.n	8001e78 <HAL_ADC_Start_DMA+0xd0>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a38      	ldr	r2, [pc, #224]	; (8001f54 <HAL_ADC_Start_DMA+0x1ac>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d10d      	bne.n	8001e94 <HAL_ADC_Start_DMA+0xec>
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_ADC_Start_DMA+0x1a8>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d006      	beq.n	8001eae <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	f023 0206 	bic.w	r2, r3, #6
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <HAL_ADC_Start_DMA+0x1b0>)
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <HAL_ADC_Start_DMA+0x1b4>)
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <HAL_ADC_Start_DMA+0x1b8>)
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eec:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a18      	ldr	r0, [r3, #32]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	334c      	adds	r3, #76	; 0x4c
 8001ef8:	4619      	mov	r1, r3
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f001 fb0d 	bl	800351c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f0c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f10:	d108      	bne.n	8001f24 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f20:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f22:	e00f      	b.n	8001f44 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f32:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001f34:	e006      	b.n	8001f44 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001f3e:	e001      	b.n	8001f44 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40012400 	.word	0x40012400
 8001f54:	40012800 	.word	0x40012800
 8001f58:	080024eb 	.word	0x080024eb
 8001f5c:	08002567 	.word	0x08002567
 8001f60:	08002583 	.word	0x08002583

08001f64 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_ADC_Stop_DMA+0x1a>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e03a      	b.n	8001ff4 <HAL_ADC_Stop_DMA+0x90>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 fa6e 	bl	8002468 <ADC_ConversionStop_Disable>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d129      	bne.n	8001fea <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa4:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d11a      	bne.n	8001fea <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f001 fb0f 	bl	80035dc <HAL_DMA_Abort>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
 8001fdc:	e005      	b.n	8001fea <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d03e      	beq.n	800209c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d039      	beq.n	800209c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002038:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800204a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800204e:	d11d      	bne.n	800208c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002054:	2b00      	cmp	r3, #0
 8002056:	d119      	bne.n	800208c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0220 	bic.w	r2, r2, #32
 8002066:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d105      	bne.n	800208c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	f043 0201 	orr.w	r2, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f874 	bl	800217a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f06f 0212 	mvn.w	r2, #18
 800209a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d04d      	beq.n	8002142 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d048      	beq.n	8002142 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80020d2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80020d6:	d012      	beq.n	80020fe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d125      	bne.n	8002132 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80020f0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020f4:	d11d      	bne.n	8002132 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d119      	bne.n	8002132 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d105      	bne.n	8002132 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	f043 0201 	orr.w	r2, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fa3f 	bl	80025b6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f06f 020c 	mvn.w	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d012      	beq.n	8002172 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00d      	beq.n	8002172 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f81b 	bl	800219e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0201 	mvn.w	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
	...

080021c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x20>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0dc      	b.n	800239e <HAL_ADC_ConfigChannel+0x1da>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b06      	cmp	r3, #6
 80021f2:	d81c      	bhi.n	800222e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b05      	subs	r3, #5
 8002206:	221f      	movs	r2, #31
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	4019      	ands	r1, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3b05      	subs	r3, #5
 8002220:	fa00 f203 	lsl.w	r2, r0, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	635a      	str	r2, [r3, #52]	; 0x34
 800222c:	e03c      	b.n	80022a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d81c      	bhi.n	8002270 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b23      	subs	r3, #35	; 0x23
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	4019      	ands	r1, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b23      	subs	r3, #35	; 0x23
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
 800226e:	e01b      	b.n	80022a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	3b41      	subs	r3, #65	; 0x41
 8002282:	221f      	movs	r2, #31
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	4019      	ands	r1, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	3b41      	subs	r3, #65	; 0x41
 800229c:	fa00 f203 	lsl.w	r2, r0, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	d91c      	bls.n	80022ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68d9      	ldr	r1, [r3, #12]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	3b1e      	subs	r3, #30
 80022c2:	2207      	movs	r2, #7
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	4019      	ands	r1, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6898      	ldr	r0, [r3, #8]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	3b1e      	subs	r3, #30
 80022dc:	fa00 f203 	lsl.w	r2, r0, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	e019      	b.n	800231e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6919      	ldr	r1, [r3, #16]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	2207      	movs	r2, #7
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6898      	ldr	r0, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	fa00 f203 	lsl.w	r2, r0, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b10      	cmp	r3, #16
 8002324:	d003      	beq.n	800232e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800232a:	2b11      	cmp	r3, #17
 800232c:	d132      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1d      	ldr	r2, [pc, #116]	; (80023a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d125      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d126      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002354:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b10      	cmp	r3, #16
 800235c:	d11a      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_ADC_ConfigChannel+0x1e8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a13      	ldr	r2, [pc, #76]	; (80023b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	0c9a      	lsrs	r2, r3, #18
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002374:	e002      	b.n	800237c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3b01      	subs	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f9      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x1b2>
 8002382:	e007      	b.n	8002394 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40012400 	.word	0x40012400
 80023ac:	20000000 	.word	0x20000000
 80023b0:	431bde83 	.word	0x431bde83

080023b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d040      	beq.n	8002454 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <ADC_Enable+0xac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <ADC_Enable+0xb0>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023f0:	e002      	b.n	80023f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f9      	bne.n	80023f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023fe:	f7ff fbf1 	bl	8001be4 <HAL_GetTick>
 8002402:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002404:	e01f      	b.n	8002446 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002406:	f7ff fbed 	bl	8001be4 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d918      	bls.n	8002446 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d011      	beq.n	8002446 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f043 0210 	orr.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e007      	b.n	8002456 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d1d8      	bne.n	8002406 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000
 8002464:	431bde83 	.word	0x431bde83

08002468 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d12e      	bne.n	80024e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002492:	f7ff fba7 	bl	8001be4 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002498:	e01b      	b.n	80024d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800249a:	f7ff fba3 	bl	8001be4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d914      	bls.n	80024d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10d      	bne.n	80024d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d0dc      	beq.n	800249a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002500:	2b00      	cmp	r3, #0
 8002502:	d127      	bne.n	8002554 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002508:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800251a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800251e:	d115      	bne.n	800254c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002524:	2b00      	cmp	r3, #0
 8002526:	d111      	bne.n	800254c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f7ff fe14 	bl	800217a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002552:	e004      	b.n	800255e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
}
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b084      	sub	sp, #16
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f7ff fe09 	bl	800218c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	f043 0204 	orr.w	r2, r3, #4
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff fe01 	bl	80021b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e0ed      	b.n	80027b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d102      	bne.n	80025ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff f814 	bl	8001614 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025fc:	f7ff faf2 	bl	8001be4 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002602:	e012      	b.n	800262a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002604:	f7ff faee 	bl	8001be4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b0a      	cmp	r3, #10
 8002610:	d90b      	bls.n	800262a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2205      	movs	r2, #5
 8002622:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0c5      	b.n	80027b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0e5      	beq.n	8002604 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0202 	bic.w	r2, r2, #2
 8002646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002648:	f7ff facc 	bl	8001be4 <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800264e:	e012      	b.n	8002676 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002650:	f7ff fac8 	bl	8001be4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b0a      	cmp	r3, #10
 800265c:	d90b      	bls.n	8002676 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2205      	movs	r2, #5
 800266e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e09f      	b.n	80027b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e5      	bne.n	8002650 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7e1b      	ldrb	r3, [r3, #24]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d108      	bne.n	800269e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e007      	b.n	80026ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7e5b      	ldrb	r3, [r3, #25]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d108      	bne.n	80026c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e007      	b.n	80026d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7e9b      	ldrb	r3, [r3, #26]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d108      	bne.n	80026f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0220 	orr.w	r2, r2, #32
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e007      	b.n	8002702 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0220 	bic.w	r2, r2, #32
 8002700:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7edb      	ldrb	r3, [r3, #27]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d108      	bne.n	800271c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0210 	bic.w	r2, r2, #16
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e007      	b.n	800272c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0210 	orr.w	r2, r2, #16
 800272a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7f1b      	ldrb	r3, [r3, #28]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0208 	orr.w	r2, r2, #8
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e007      	b.n	8002756 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0208 	bic.w	r2, r2, #8
 8002754:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7f5b      	ldrb	r3, [r3, #29]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d108      	bne.n	8002770 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0204 	orr.w	r2, r2, #4
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e007      	b.n	8002780 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0204 	bic.w	r2, r2, #4
 800277e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	ea42 0103 	orr.w	r1, r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	1e5a      	subs	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	430a      	orrs	r2, r1
 80027a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80027be:	b480      	push	{r7}
 80027c0:	b087      	sub	sp, #28
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80027d6:	7cfb      	ldrb	r3, [r7, #19]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d003      	beq.n	80027e4 <HAL_CAN_ConfigFilter+0x26>
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	f040 80aa 	bne.w	8002938 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2201      	movs	r2, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	43db      	mvns	r3, r3
 800280e:	401a      	ands	r2, r3
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d123      	bne.n	8002866 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	43db      	mvns	r3, r3
 8002828:	401a      	ands	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002840:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3248      	adds	r2, #72	; 0x48
 8002846:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800285a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800285c:	6979      	ldr	r1, [r7, #20]
 800285e:	3348      	adds	r3, #72	; 0x48
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d122      	bne.n	80028b4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	431a      	orrs	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800288e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	3248      	adds	r2, #72	; 0x48
 8002894:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028aa:	6979      	ldr	r1, [r7, #20]
 80028ac:	3348      	adds	r3, #72	; 0x48
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	43db      	mvns	r3, r3
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80028ce:	e007      	b.n	80028e0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	431a      	orrs	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	43db      	mvns	r3, r3
 80028f2:	401a      	ands	r2, r3
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028fa:	e007      	b.n	800290c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	431a      	orrs	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d107      	bne.n	8002924 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800292a:	f023 0201 	bic.w	r2, r3, #1
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	e006      	b.n	8002946 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
  }
}
 8002946:	4618      	mov	r0, r3
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d12e      	bne.n	80029c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800297c:	f7ff f932 	bl	8001be4 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002982:	e012      	b.n	80029aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002984:	f7ff f92e 	bl	8001be4 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b0a      	cmp	r3, #10
 8002990:	d90b      	bls.n	80029aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2205      	movs	r2, #5
 80029a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e012      	b.n	80029d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e5      	bne.n	8002984 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	e006      	b.n	80029d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
  }
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80029d8:	b480      	push	{r7}
 80029da:	b089      	sub	sp, #36	; 0x24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80029f6:	7ffb      	ldrb	r3, [r7, #31]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d003      	beq.n	8002a04 <HAL_CAN_AddTxMessage+0x2c>
 80029fc:	7ffb      	ldrb	r3, [r7, #31]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	f040 80ad 	bne.w	8002b5e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10a      	bne.n	8002a24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d105      	bne.n	8002a24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8095 	beq.w	8002b4e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	0e1b      	lsrs	r3, r3, #24
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002a2e:	2201      	movs	r2, #1
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	409a      	lsls	r2, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10d      	bne.n	8002a5c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	6809      	ldr	r1, [r1, #0]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	3318      	adds	r3, #24
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	440b      	add	r3, r1
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	e00f      	b.n	8002a7c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a66:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a6c:	68f9      	ldr	r1, [r7, #12]
 8002a6e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002a70:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3318      	adds	r3, #24
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	440b      	add	r3, r1
 8002a7a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3318      	adds	r3, #24
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	7d1b      	ldrb	r3, [r3, #20]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d111      	bne.n	8002abc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	3318      	adds	r3, #24
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3304      	adds	r3, #4
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	6811      	ldr	r1, [r2, #0]
 8002aac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3318      	adds	r3, #24
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3304      	adds	r3, #4
 8002aba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3307      	adds	r3, #7
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	061a      	lsls	r2, r3, #24
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3306      	adds	r3, #6
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	431a      	orrs	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3305      	adds	r3, #5
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	3204      	adds	r2, #4
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	4610      	mov	r0, r2
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	6811      	ldr	r1, [r2, #0]
 8002ae4:	ea43 0200 	orr.w	r2, r3, r0
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	440b      	add	r3, r1
 8002aee:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002af2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3303      	adds	r3, #3
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	061a      	lsls	r2, r3, #24
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3302      	adds	r3, #2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	041b      	lsls	r3, r3, #16
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	021b      	lsls	r3, r3, #8
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	4610      	mov	r0, r2
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	6811      	ldr	r1, [r2, #0]
 8002b1a:	ea43 0200 	orr.w	r2, r3, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	440b      	add	r3, r1
 8002b24:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002b28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3318      	adds	r3, #24
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4413      	add	r3, r2
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	6811      	ldr	r1, [r2, #0]
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3318      	adds	r3, #24
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	440b      	add	r3, r1
 8002b48:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e00e      	b.n	8002b6c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e006      	b.n	8002b6c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
  }
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3724      	adds	r7, #36	; 0x24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr

08002b76 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002b76:	b480      	push	{r7}
 8002b78:	b087      	sub	sp, #28
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b8c:	7dfb      	ldrb	r3, [r7, #23]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d003      	beq.n	8002b9a <HAL_CAN_GetRxMessage+0x24>
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	f040 8103 	bne.w	8002da0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10e      	bne.n	8002bbe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d116      	bne.n	8002bdc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0f7      	b.n	8002dae <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0e8      	b.n	8002dae <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	331b      	adds	r3, #27
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	4413      	add	r3, r2
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0204 	and.w	r2, r3, #4
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	331b      	adds	r3, #27
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	4413      	add	r3, r2
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0d5b      	lsrs	r3, r3, #21
 8002c0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e00b      	b.n	8002c2c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	331b      	adds	r3, #27
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	4413      	add	r3, r2
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	08db      	lsrs	r3, r3, #3
 8002c24:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	331b      	adds	r3, #27
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	4413      	add	r3, r2
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0202 	and.w	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	331b      	adds	r3, #27
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3304      	adds	r3, #4
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	611a      	str	r2, [r3, #16]
 8002c60:	e00b      	b.n	8002c7a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	331b      	adds	r3, #27
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3304      	adds	r3, #4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 020f 	and.w	r2, r3, #15
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	331b      	adds	r3, #27
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	331b      	adds	r3, #27
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0c1b      	lsrs	r3, r3, #16
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0a1a      	lsrs	r2, r3, #8
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0c1a      	lsrs	r2, r3, #16
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	3302      	adds	r3, #2
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e1a      	lsrs	r2, r3, #24
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	3303      	adds	r3, #3
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	3304      	adds	r3, #4
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	0a1a      	lsrs	r2, r3, #8
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	3305      	adds	r3, #5
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	0c1a      	lsrs	r2, r3, #16
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	3306      	adds	r3, #6
 8002d56:	b2d2      	uxtb	r2, r2
 8002d58:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e1a      	lsrs	r2, r3, #24
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	3307      	adds	r3, #7
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d108      	bne.n	8002d8c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	e007      	b.n	8002d9c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0220 	orr.w	r2, r2, #32
 8002d9a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	e006      	b.n	8002dae <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
  }
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	371c      	adds	r7, #28
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d002      	beq.n	8002dd6 <HAL_CAN_ActivateNotification+0x1e>
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d109      	bne.n	8002dea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6959      	ldr	r1, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e006      	b.n	8002df8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
  }
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr

08002e02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b08a      	sub	sp, #40	; 0x28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d07c      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d023      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2201      	movs	r2, #1
 8002e58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f983 	bl	8003170 <HAL_CAN_TxMailbox0CompleteCallback>
 8002e6a:	e016      	b.n	8002e9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7e:	e00c      	b.n	8002e9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
 8002e92:	e002      	b.n	8002e9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f986 	bl	80031a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d024      	beq.n	8002eee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f962 	bl	8003182 <HAL_CAN_TxMailbox1CompleteCallback>
 8002ebe:	e016      	b.n	8002eee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed2:	e00c      	b.n	8002eee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee6:	e002      	b.n	8002eee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f965 	bl	80031b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d024      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f941 	bl	8003194 <HAL_CAN_TxMailbox2CompleteCallback>
 8002f12:	e016      	b.n	8002f42 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	e00c      	b.n	8002f42 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d004      	beq.n	8002f3c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3a:	e002      	b.n	8002f42 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f944 	bl	80031ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f003 0308 	and.w	r3, r3, #8
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00c      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f5c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2210      	movs	r2, #16
 8002f64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2208      	movs	r2, #8
 8002f80:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f92a 	bl	80031dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7fe f9bb 	bl	800131c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00c      	beq.n	8002fca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d007      	beq.n	8002fca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2208      	movs	r2, #8
 8002fe4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f90a 	bl	8003200 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f8f2 	bl	80031ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00b      	beq.n	800302c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b00      	cmp	r3, #0
 800301c:	d006      	beq.n	800302c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2210      	movs	r2, #16
 8003024:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f8f3 	bl	8003212 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2208      	movs	r2, #8
 8003046:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8eb 	bl	8003224 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d07b      	beq.n	8003150 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d072      	beq.n	8003148 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d043      	beq.n	8003148 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d03e      	beq.n	8003148 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d0:	2b60      	cmp	r3, #96	; 0x60
 80030d2:	d02b      	beq.n	800312c <HAL_CAN_IRQHandler+0x32a>
 80030d4:	2b60      	cmp	r3, #96	; 0x60
 80030d6:	d82e      	bhi.n	8003136 <HAL_CAN_IRQHandler+0x334>
 80030d8:	2b50      	cmp	r3, #80	; 0x50
 80030da:	d022      	beq.n	8003122 <HAL_CAN_IRQHandler+0x320>
 80030dc:	2b50      	cmp	r3, #80	; 0x50
 80030de:	d82a      	bhi.n	8003136 <HAL_CAN_IRQHandler+0x334>
 80030e0:	2b40      	cmp	r3, #64	; 0x40
 80030e2:	d019      	beq.n	8003118 <HAL_CAN_IRQHandler+0x316>
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d826      	bhi.n	8003136 <HAL_CAN_IRQHandler+0x334>
 80030e8:	2b30      	cmp	r3, #48	; 0x30
 80030ea:	d010      	beq.n	800310e <HAL_CAN_IRQHandler+0x30c>
 80030ec:	2b30      	cmp	r3, #48	; 0x30
 80030ee:	d822      	bhi.n	8003136 <HAL_CAN_IRQHandler+0x334>
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d002      	beq.n	80030fa <HAL_CAN_IRQHandler+0x2f8>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d005      	beq.n	8003104 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80030f8:	e01d      	b.n	8003136 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003102:	e019      	b.n	8003138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	f043 0310 	orr.w	r3, r3, #16
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800310c:	e014      	b.n	8003138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f043 0320 	orr.w	r3, r3, #32
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003116:	e00f      	b.n	8003138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003120:	e00a      	b.n	8003138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800312a:	e005      	b.n	8003138 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003134:	e000      	b.n	8003138 <HAL_CAN_IRQHandler+0x336>
            break;
 8003136:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003146:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2204      	movs	r2, #4
 800314e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f928 	bl	80013b8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003168:	bf00      	nop
 800316a:	3728      	adds	r7, #40	; 0x28
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bc80      	pop	{r7}
 80031a4:	4770      	bx	lr

080031a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bc80      	pop	{r7}
 80031b6:	4770      	bx	lr

080031b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bc80      	pop	{r7}
 80031c8:	4770      	bx	lr

080031ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bc80      	pop	{r7}
 80031da:	4770      	bx	lr

080031dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	; (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	bc80      	pop	{r7}
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003298:	4b04      	ldr	r3, [pc, #16]	; (80032ac <__NVIC_GetPriorityGrouping+0x18>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 0307 	and.w	r3, r3, #7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db0b      	blt.n	80032da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	4906      	ldr	r1, [pc, #24]	; (80032e4 <__NVIC_EnableIRQ+0x34>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr
 80032e4:	e000e100 	.word	0xe000e100

080032e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	4603      	mov	r3, r0
 80032f0:	6039      	str	r1, [r7, #0]
 80032f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	db0a      	blt.n	8003312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	490c      	ldr	r1, [pc, #48]	; (8003334 <__NVIC_SetPriority+0x4c>)
 8003302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003306:	0112      	lsls	r2, r2, #4
 8003308:	b2d2      	uxtb	r2, r2
 800330a:	440b      	add	r3, r1
 800330c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003310:	e00a      	b.n	8003328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4908      	ldr	r1, [pc, #32]	; (8003338 <__NVIC_SetPriority+0x50>)
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	3b04      	subs	r3, #4
 8003320:	0112      	lsls	r2, r2, #4
 8003322:	b2d2      	uxtb	r2, r2
 8003324:	440b      	add	r3, r1
 8003326:	761a      	strb	r2, [r3, #24]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	bc80      	pop	{r7}
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	e000e100 	.word	0xe000e100
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f1c3 0307 	rsb	r3, r3, #7
 8003356:	2b04      	cmp	r3, #4
 8003358:	bf28      	it	cs
 800335a:	2304      	movcs	r3, #4
 800335c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3304      	adds	r3, #4
 8003362:	2b06      	cmp	r3, #6
 8003364:	d902      	bls.n	800336c <NVIC_EncodePriority+0x30>
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3b03      	subs	r3, #3
 800336a:	e000      	b.n	800336e <NVIC_EncodePriority+0x32>
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	401a      	ands	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003384:	f04f 31ff 	mov.w	r1, #4294967295
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	43d9      	mvns	r1, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003394:	4313      	orrs	r3, r2
         );
}
 8003396:	4618      	mov	r0, r3
 8003398:	3724      	adds	r7, #36	; 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b0:	d301      	bcc.n	80033b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00f      	b.n	80033d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <SysTick_Config+0x40>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033be:	210f      	movs	r1, #15
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	f7ff ff90 	bl	80032e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <SysTick_Config+0x40>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <SysTick_Config+0x40>)
 80033d0:	2207      	movs	r2, #7
 80033d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	e000e010 	.word	0xe000e010

080033e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff2d 	bl	800324c <__NVIC_SetPriorityGrouping>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800340c:	f7ff ff42 	bl	8003294 <__NVIC_GetPriorityGrouping>
 8003410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	6978      	ldr	r0, [r7, #20]
 8003418:	f7ff ff90 	bl	800333c <NVIC_EncodePriority>
 800341c:	4602      	mov	r2, r0
 800341e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff5f 	bl	80032e8 <__NVIC_SetPriority>
}
 800342a:	bf00      	nop
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	4603      	mov	r3, r0
 800343a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff35 	bl	80032b0 <__NVIC_EnableIRQ>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ffa2 	bl	80033a0 <SysTick_Config>
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e043      	b.n	8003506 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	4b22      	ldr	r3, [pc, #136]	; (8003510 <HAL_DMA_Init+0xa8>)
 8003486:	4413      	add	r3, r2
 8003488:	4a22      	ldr	r2, [pc, #136]	; (8003514 <HAL_DMA_Init+0xac>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	009a      	lsls	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <HAL_DMA_Init+0xb0>)
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	bffdfff8 	.word	0xbffdfff8
 8003514:	cccccccd 	.word	0xcccccccd
 8003518:	40020000 	.word	0x40020000

0800351c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_DMA_Start_IT+0x20>
 8003538:	2302      	movs	r3, #2
 800353a:	e04b      	b.n	80035d4 <HAL_DMA_Start_IT+0xb8>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d13a      	bne.n	80035c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 f9eb 	bl	8003950 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d008      	beq.n	8003594 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 020e 	orr.w	r2, r2, #14
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e00f      	b.n	80035b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0204 	bic.w	r2, r2, #4
 80035a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 020a 	orr.w	r2, r2, #10
 80035b2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	e005      	b.n	80035d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
 80035d0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80035d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d008      	beq.n	8003606 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2204      	movs	r2, #4
 80035f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e020      	b.n	8003648 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 020e 	bic.w	r2, r2, #14
 8003614:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0201 	bic.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	2101      	movs	r1, #1
 8003630:	fa01 f202 	lsl.w	r2, r1, r2
 8003634:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003646:	7bfb      	ldrb	r3, [r7, #15]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d005      	beq.n	8003678 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2204      	movs	r2, #4
 8003670:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	73fb      	strb	r3, [r7, #15]
 8003676:	e051      	b.n	800371c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 020e 	bic.w	r2, r2, #14
 8003686:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a22      	ldr	r2, [pc, #136]	; (8003728 <HAL_DMA_Abort_IT+0xd4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d029      	beq.n	80036f6 <HAL_DMA_Abort_IT+0xa2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a21      	ldr	r2, [pc, #132]	; (800372c <HAL_DMA_Abort_IT+0xd8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d022      	beq.n	80036f2 <HAL_DMA_Abort_IT+0x9e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <HAL_DMA_Abort_IT+0xdc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01a      	beq.n	80036ec <HAL_DMA_Abort_IT+0x98>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1e      	ldr	r2, [pc, #120]	; (8003734 <HAL_DMA_Abort_IT+0xe0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d012      	beq.n	80036e6 <HAL_DMA_Abort_IT+0x92>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <HAL_DMA_Abort_IT+0xe4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00a      	beq.n	80036e0 <HAL_DMA_Abort_IT+0x8c>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	; (800373c <HAL_DMA_Abort_IT+0xe8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d102      	bne.n	80036da <HAL_DMA_Abort_IT+0x86>
 80036d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80036d8:	e00e      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036de:	e00b      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036e4:	e008      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ea:	e005      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f0:	e002      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036f2:	2310      	movs	r3, #16
 80036f4:	e000      	b.n	80036f8 <HAL_DMA_Abort_IT+0xa4>
 80036f6:	2301      	movs	r3, #1
 80036f8:	4a11      	ldr	r2, [pc, #68]	; (8003740 <HAL_DMA_Abort_IT+0xec>)
 80036fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
    } 
  }
  return status;
 800371c:	7bfb      	ldrb	r3, [r7, #15]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40020008 	.word	0x40020008
 800372c:	4002001c 	.word	0x4002001c
 8003730:	40020030 	.word	0x40020030
 8003734:	40020044 	.word	0x40020044
 8003738:	40020058 	.word	0x40020058
 800373c:	4002006c 	.word	0x4002006c
 8003740:	40020000 	.word	0x40020000

08003744 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	2204      	movs	r2, #4
 8003762:	409a      	lsls	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d04f      	beq.n	800380c <HAL_DMA_IRQHandler+0xc8>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d04a      	beq.n	800380c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d107      	bne.n	8003794 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0204 	bic.w	r2, r2, #4
 8003792:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a66      	ldr	r2, [pc, #408]	; (8003934 <HAL_DMA_IRQHandler+0x1f0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d029      	beq.n	80037f2 <HAL_DMA_IRQHandler+0xae>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a65      	ldr	r2, [pc, #404]	; (8003938 <HAL_DMA_IRQHandler+0x1f4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d022      	beq.n	80037ee <HAL_DMA_IRQHandler+0xaa>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a63      	ldr	r2, [pc, #396]	; (800393c <HAL_DMA_IRQHandler+0x1f8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d01a      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xa4>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a62      	ldr	r2, [pc, #392]	; (8003940 <HAL_DMA_IRQHandler+0x1fc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d012      	beq.n	80037e2 <HAL_DMA_IRQHandler+0x9e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a60      	ldr	r2, [pc, #384]	; (8003944 <HAL_DMA_IRQHandler+0x200>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00a      	beq.n	80037dc <HAL_DMA_IRQHandler+0x98>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a5f      	ldr	r2, [pc, #380]	; (8003948 <HAL_DMA_IRQHandler+0x204>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d102      	bne.n	80037d6 <HAL_DMA_IRQHandler+0x92>
 80037d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037d4:	e00e      	b.n	80037f4 <HAL_DMA_IRQHandler+0xb0>
 80037d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037da:	e00b      	b.n	80037f4 <HAL_DMA_IRQHandler+0xb0>
 80037dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037e0:	e008      	b.n	80037f4 <HAL_DMA_IRQHandler+0xb0>
 80037e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037e6:	e005      	b.n	80037f4 <HAL_DMA_IRQHandler+0xb0>
 80037e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ec:	e002      	b.n	80037f4 <HAL_DMA_IRQHandler+0xb0>
 80037ee:	2340      	movs	r3, #64	; 0x40
 80037f0:	e000      	b.n	80037f4 <HAL_DMA_IRQHandler+0xb0>
 80037f2:	2304      	movs	r3, #4
 80037f4:	4a55      	ldr	r2, [pc, #340]	; (800394c <HAL_DMA_IRQHandler+0x208>)
 80037f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8094 	beq.w	800392a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800380a:	e08e      	b.n	800392a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	2202      	movs	r2, #2
 8003812:	409a      	lsls	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d056      	beq.n	80038ca <HAL_DMA_IRQHandler+0x186>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d051      	beq.n	80038ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10b      	bne.n	800384c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 020a 	bic.w	r2, r2, #10
 8003842:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a38      	ldr	r2, [pc, #224]	; (8003934 <HAL_DMA_IRQHandler+0x1f0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d029      	beq.n	80038aa <HAL_DMA_IRQHandler+0x166>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a37      	ldr	r2, [pc, #220]	; (8003938 <HAL_DMA_IRQHandler+0x1f4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d022      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x162>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a35      	ldr	r2, [pc, #212]	; (800393c <HAL_DMA_IRQHandler+0x1f8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d01a      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x15c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a34      	ldr	r2, [pc, #208]	; (8003940 <HAL_DMA_IRQHandler+0x1fc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d012      	beq.n	800389a <HAL_DMA_IRQHandler+0x156>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a32      	ldr	r2, [pc, #200]	; (8003944 <HAL_DMA_IRQHandler+0x200>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00a      	beq.n	8003894 <HAL_DMA_IRQHandler+0x150>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a31      	ldr	r2, [pc, #196]	; (8003948 <HAL_DMA_IRQHandler+0x204>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d102      	bne.n	800388e <HAL_DMA_IRQHandler+0x14a>
 8003888:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800388c:	e00e      	b.n	80038ac <HAL_DMA_IRQHandler+0x168>
 800388e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003892:	e00b      	b.n	80038ac <HAL_DMA_IRQHandler+0x168>
 8003894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003898:	e008      	b.n	80038ac <HAL_DMA_IRQHandler+0x168>
 800389a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800389e:	e005      	b.n	80038ac <HAL_DMA_IRQHandler+0x168>
 80038a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038a4:	e002      	b.n	80038ac <HAL_DMA_IRQHandler+0x168>
 80038a6:	2320      	movs	r3, #32
 80038a8:	e000      	b.n	80038ac <HAL_DMA_IRQHandler+0x168>
 80038aa:	2302      	movs	r3, #2
 80038ac:	4a27      	ldr	r2, [pc, #156]	; (800394c <HAL_DMA_IRQHandler+0x208>)
 80038ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d034      	beq.n	800392a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038c8:	e02f      	b.n	800392a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	2208      	movs	r2, #8
 80038d0:	409a      	lsls	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d028      	beq.n	800392c <HAL_DMA_IRQHandler+0x1e8>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d023      	beq.n	800392c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 020e 	bic.w	r2, r2, #14
 80038f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	2101      	movs	r1, #1
 80038fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003902:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	2b00      	cmp	r3, #0
 8003920:	d004      	beq.n	800392c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
    }
  }
  return;
 800392a:	bf00      	nop
 800392c:	bf00      	nop
}
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40020008 	.word	0x40020008
 8003938:	4002001c 	.word	0x4002001c
 800393c:	40020030 	.word	0x40020030
 8003940:	40020044 	.word	0x40020044
 8003944:	40020058 	.word	0x40020058
 8003948:	4002006c 	.word	0x4002006c
 800394c:	40020000 	.word	0x40020000

08003950 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	2101      	movs	r1, #1
 8003968:	fa01 f202 	lsl.w	r2, r1, r2
 800396c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b10      	cmp	r3, #16
 800397c:	d108      	bne.n	8003990 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800398e:	e007      	b.n	80039a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b08b      	sub	sp, #44	; 0x2c
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039b6:	2300      	movs	r3, #0
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039be:	e169      	b.n	8003c94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039c0:	2201      	movs	r2, #1
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	429a      	cmp	r2, r3
 80039da:	f040 8158 	bne.w	8003c8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a9a      	ldr	r2, [pc, #616]	; (8003c4c <HAL_GPIO_Init+0x2a0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d05e      	beq.n	8003aa6 <HAL_GPIO_Init+0xfa>
 80039e8:	4a98      	ldr	r2, [pc, #608]	; (8003c4c <HAL_GPIO_Init+0x2a0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d875      	bhi.n	8003ada <HAL_GPIO_Init+0x12e>
 80039ee:	4a98      	ldr	r2, [pc, #608]	; (8003c50 <HAL_GPIO_Init+0x2a4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d058      	beq.n	8003aa6 <HAL_GPIO_Init+0xfa>
 80039f4:	4a96      	ldr	r2, [pc, #600]	; (8003c50 <HAL_GPIO_Init+0x2a4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d86f      	bhi.n	8003ada <HAL_GPIO_Init+0x12e>
 80039fa:	4a96      	ldr	r2, [pc, #600]	; (8003c54 <HAL_GPIO_Init+0x2a8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d052      	beq.n	8003aa6 <HAL_GPIO_Init+0xfa>
 8003a00:	4a94      	ldr	r2, [pc, #592]	; (8003c54 <HAL_GPIO_Init+0x2a8>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d869      	bhi.n	8003ada <HAL_GPIO_Init+0x12e>
 8003a06:	4a94      	ldr	r2, [pc, #592]	; (8003c58 <HAL_GPIO_Init+0x2ac>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d04c      	beq.n	8003aa6 <HAL_GPIO_Init+0xfa>
 8003a0c:	4a92      	ldr	r2, [pc, #584]	; (8003c58 <HAL_GPIO_Init+0x2ac>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d863      	bhi.n	8003ada <HAL_GPIO_Init+0x12e>
 8003a12:	4a92      	ldr	r2, [pc, #584]	; (8003c5c <HAL_GPIO_Init+0x2b0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d046      	beq.n	8003aa6 <HAL_GPIO_Init+0xfa>
 8003a18:	4a90      	ldr	r2, [pc, #576]	; (8003c5c <HAL_GPIO_Init+0x2b0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d85d      	bhi.n	8003ada <HAL_GPIO_Init+0x12e>
 8003a1e:	2b12      	cmp	r3, #18
 8003a20:	d82a      	bhi.n	8003a78 <HAL_GPIO_Init+0xcc>
 8003a22:	2b12      	cmp	r3, #18
 8003a24:	d859      	bhi.n	8003ada <HAL_GPIO_Init+0x12e>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <HAL_GPIO_Init+0x80>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003aa7 	.word	0x08003aa7
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003a93 	.word	0x08003a93
 8003a38:	08003ad5 	.word	0x08003ad5
 8003a3c:	08003adb 	.word	0x08003adb
 8003a40:	08003adb 	.word	0x08003adb
 8003a44:	08003adb 	.word	0x08003adb
 8003a48:	08003adb 	.word	0x08003adb
 8003a4c:	08003adb 	.word	0x08003adb
 8003a50:	08003adb 	.word	0x08003adb
 8003a54:	08003adb 	.word	0x08003adb
 8003a58:	08003adb 	.word	0x08003adb
 8003a5c:	08003adb 	.word	0x08003adb
 8003a60:	08003adb 	.word	0x08003adb
 8003a64:	08003adb 	.word	0x08003adb
 8003a68:	08003adb 	.word	0x08003adb
 8003a6c:	08003adb 	.word	0x08003adb
 8003a70:	08003a89 	.word	0x08003a89
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	4a79      	ldr	r2, [pc, #484]	; (8003c60 <HAL_GPIO_Init+0x2b4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a7e:	e02c      	b.n	8003ada <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	623b      	str	r3, [r7, #32]
          break;
 8003a86:	e029      	b.n	8003adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	623b      	str	r3, [r7, #32]
          break;
 8003a90:	e024      	b.n	8003adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	3308      	adds	r3, #8
 8003a98:	623b      	str	r3, [r7, #32]
          break;
 8003a9a:	e01f      	b.n	8003adc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	330c      	adds	r3, #12
 8003aa2:	623b      	str	r3, [r7, #32]
          break;
 8003aa4:	e01a      	b.n	8003adc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003aae:	2304      	movs	r3, #4
 8003ab0:	623b      	str	r3, [r7, #32]
          break;
 8003ab2:	e013      	b.n	8003adc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d105      	bne.n	8003ac8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003abc:	2308      	movs	r3, #8
 8003abe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	611a      	str	r2, [r3, #16]
          break;
 8003ac6:	e009      	b.n	8003adc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ac8:	2308      	movs	r3, #8
 8003aca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	615a      	str	r2, [r3, #20]
          break;
 8003ad2:	e003      	b.n	8003adc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	623b      	str	r3, [r7, #32]
          break;
 8003ad8:	e000      	b.n	8003adc <HAL_GPIO_Init+0x130>
          break;
 8003ada:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	2bff      	cmp	r3, #255	; 0xff
 8003ae0:	d801      	bhi.n	8003ae6 <HAL_GPIO_Init+0x13a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	e001      	b.n	8003aea <HAL_GPIO_Init+0x13e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2bff      	cmp	r3, #255	; 0xff
 8003af0:	d802      	bhi.n	8003af8 <HAL_GPIO_Init+0x14c>
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	e002      	b.n	8003afe <HAL_GPIO_Init+0x152>
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	3b08      	subs	r3, #8
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	210f      	movs	r1, #15
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	401a      	ands	r2, r3
 8003b10:	6a39      	ldr	r1, [r7, #32]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 80b1 	beq.w	8003c8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b2c:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <HAL_GPIO_Init+0x2b8>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	4a4c      	ldr	r2, [pc, #304]	; (8003c64 <HAL_GPIO_Init+0x2b8>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6193      	str	r3, [r2, #24]
 8003b38:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <HAL_GPIO_Init+0x2b8>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b44:	4a48      	ldr	r2, [pc, #288]	; (8003c68 <HAL_GPIO_Init+0x2bc>)
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4013      	ands	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a40      	ldr	r2, [pc, #256]	; (8003c6c <HAL_GPIO_Init+0x2c0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_GPIO_Init+0x1ec>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3f      	ldr	r2, [pc, #252]	; (8003c70 <HAL_GPIO_Init+0x2c4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00d      	beq.n	8003b94 <HAL_GPIO_Init+0x1e8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a3e      	ldr	r2, [pc, #248]	; (8003c74 <HAL_GPIO_Init+0x2c8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d007      	beq.n	8003b90 <HAL_GPIO_Init+0x1e4>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a3d      	ldr	r2, [pc, #244]	; (8003c78 <HAL_GPIO_Init+0x2cc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d101      	bne.n	8003b8c <HAL_GPIO_Init+0x1e0>
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e006      	b.n	8003b9a <HAL_GPIO_Init+0x1ee>
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	e004      	b.n	8003b9a <HAL_GPIO_Init+0x1ee>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e002      	b.n	8003b9a <HAL_GPIO_Init+0x1ee>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <HAL_GPIO_Init+0x1ee>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	f002 0203 	and.w	r2, r2, #3
 8003ba0:	0092      	lsls	r2, r2, #2
 8003ba2:	4093      	lsls	r3, r2
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003baa:	492f      	ldr	r1, [pc, #188]	; (8003c68 <HAL_GPIO_Init+0x2bc>)
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	492c      	ldr	r1, [pc, #176]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]
 8003bd0:	e006      	b.n	8003be0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	4928      	ldr	r1, [pc, #160]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d006      	beq.n	8003bfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bec:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	4922      	ldr	r1, [pc, #136]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	60cb      	str	r3, [r1, #12]
 8003bf8:	e006      	b.n	8003c08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	491e      	ldr	r1, [pc, #120]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d006      	beq.n	8003c22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	4918      	ldr	r1, [pc, #96]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
 8003c20:	e006      	b.n	8003c30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003c24:	685a      	ldr	r2, [r3, #4]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	4914      	ldr	r1, [pc, #80]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d021      	beq.n	8003c80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	490e      	ldr	r1, [pc, #56]	; (8003c7c <HAL_GPIO_Init+0x2d0>)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
 8003c48:	e021      	b.n	8003c8e <HAL_GPIO_Init+0x2e2>
 8003c4a:	bf00      	nop
 8003c4c:	10320000 	.word	0x10320000
 8003c50:	10310000 	.word	0x10310000
 8003c54:	10220000 	.word	0x10220000
 8003c58:	10210000 	.word	0x10210000
 8003c5c:	10120000 	.word	0x10120000
 8003c60:	10110000 	.word	0x10110000
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40010000 	.word	0x40010000
 8003c6c:	40010800 	.word	0x40010800
 8003c70:	40010c00 	.word	0x40010c00
 8003c74:	40011000 	.word	0x40011000
 8003c78:	40011400 	.word	0x40011400
 8003c7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_GPIO_Init+0x304>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	43db      	mvns	r3, r3
 8003c88:	4909      	ldr	r1, [pc, #36]	; (8003cb0 <HAL_GPIO_Init+0x304>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	3301      	adds	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f47f ae8e 	bne.w	80039c0 <HAL_GPIO_Init+0x14>
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	372c      	adds	r7, #44	; 0x2c
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	40010400 	.word	0x40010400

08003cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cc4:	787b      	ldrb	r3, [r7, #1]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cca:	887a      	ldrh	r2, [r7, #2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cd0:	e003      	b.n	8003cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	041a      	lsls	r2, r3, #16
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	611a      	str	r2, [r3, #16]
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e272      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 8087 	beq.w	8003e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d04:	4b92      	ldr	r3, [pc, #584]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d00c      	beq.n	8003d2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d10:	4b8f      	ldr	r3, [pc, #572]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d112      	bne.n	8003d42 <HAL_RCC_OscConfig+0x5e>
 8003d1c:	4b8c      	ldr	r3, [pc, #560]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d10b      	bne.n	8003d42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2a:	4b89      	ldr	r3, [pc, #548]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d06c      	beq.n	8003e10 <HAL_RCC_OscConfig+0x12c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d168      	bne.n	8003e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e24c      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x76>
 8003d4c:	4b80      	ldr	r3, [pc, #512]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a7f      	ldr	r2, [pc, #508]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	e02e      	b.n	8003db8 <HAL_RCC_OscConfig+0xd4>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0x98>
 8003d62:	4b7b      	ldr	r3, [pc, #492]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a7a      	ldr	r2, [pc, #488]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b78      	ldr	r3, [pc, #480]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a77      	ldr	r2, [pc, #476]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xd4>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0xbc>
 8003d86:	4b72      	ldr	r3, [pc, #456]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a71      	ldr	r2, [pc, #452]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b6f      	ldr	r3, [pc, #444]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6e      	ldr	r2, [pc, #440]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xd4>
 8003da0:	4b6b      	ldr	r3, [pc, #428]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6a      	ldr	r2, [pc, #424]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b68      	ldr	r3, [pc, #416]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a67      	ldr	r2, [pc, #412]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fd ff10 	bl	8001be4 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd ff0c 	bl	8001be4 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e200      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b5d      	ldr	r3, [pc, #372]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xe4>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd fefc 	bl	8001be4 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fd fef8 	bl	8001be4 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1ec      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x10c>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e1e:	4b4c      	ldr	r3, [pc, #304]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e2a:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x18c>
 8003e36:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x176>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1c0      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b3d      	ldr	r3, [pc, #244]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4939      	ldr	r1, [pc, #228]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e78:	4b36      	ldr	r3, [pc, #216]	; (8003f54 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7fd feb1 	bl	8001be4 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fd fead 	bl	8001be4 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1a1      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	4b2d      	ldr	r3, [pc, #180]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4927      	ldr	r1, [pc, #156]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eba:	4b26      	ldr	r3, [pc, #152]	; (8003f54 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fe90 	bl	8001be4 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fe8c 	bl	8001be4 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e180      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d03a      	beq.n	8003f68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d019      	beq.n	8003f2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b17      	ldr	r3, [pc, #92]	; (8003f58 <HAL_RCC_OscConfig+0x274>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f00:	f7fd fe70 	bl	8001be4 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fd fe6c 	bl	8001be4 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e160      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	; (8003f50 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f26:	2001      	movs	r0, #1
 8003f28:	f000 face 	bl	80044c8 <RCC_Delay>
 8003f2c:	e01c      	b.n	8003f68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <HAL_RCC_OscConfig+0x274>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f34:	f7fd fe56 	bl	8001be4 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f3a:	e00f      	b.n	8003f5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7fd fe52 	bl	8001be4 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d908      	bls.n	8003f5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e146      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
 8003f4e:	bf00      	nop
 8003f50:	40021000 	.word	0x40021000
 8003f54:	42420000 	.word	0x42420000
 8003f58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5c:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e9      	bne.n	8003f3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a6 	beq.w	80040c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4b8b      	ldr	r3, [pc, #556]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	4a87      	ldr	r2, [pc, #540]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	61d3      	str	r3, [r2, #28]
 8003f92:	4b85      	ldr	r3, [pc, #532]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa2:	4b82      	ldr	r3, [pc, #520]	; (80041ac <HAL_RCC_OscConfig+0x4c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d118      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fae:	4b7f      	ldr	r3, [pc, #508]	; (80041ac <HAL_RCC_OscConfig+0x4c8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7e      	ldr	r2, [pc, #504]	; (80041ac <HAL_RCC_OscConfig+0x4c8>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fd fe13 	bl	8001be4 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7fd fe0f 	bl	8001be4 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b64      	cmp	r3, #100	; 0x64
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e103      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd4:	4b75      	ldr	r3, [pc, #468]	; (80041ac <HAL_RCC_OscConfig+0x4c8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x312>
 8003fe8:	4b6f      	ldr	r3, [pc, #444]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	4a6e      	ldr	r2, [pc, #440]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6213      	str	r3, [r2, #32]
 8003ff4:	e02d      	b.n	8004052 <HAL_RCC_OscConfig+0x36e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x334>
 8003ffe:	4b6a      	ldr	r3, [pc, #424]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	4a69      	ldr	r2, [pc, #420]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	6213      	str	r3, [r2, #32]
 800400a:	4b67      	ldr	r3, [pc, #412]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4a66      	ldr	r2, [pc, #408]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	f023 0304 	bic.w	r3, r3, #4
 8004014:	6213      	str	r3, [r2, #32]
 8004016:	e01c      	b.n	8004052 <HAL_RCC_OscConfig+0x36e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	2b05      	cmp	r3, #5
 800401e:	d10c      	bne.n	800403a <HAL_RCC_OscConfig+0x356>
 8004020:	4b61      	ldr	r3, [pc, #388]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004022:	6a1b      	ldr	r3, [r3, #32]
 8004024:	4a60      	ldr	r2, [pc, #384]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	6213      	str	r3, [r2, #32]
 800402c:	4b5e      	ldr	r3, [pc, #376]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	4a5d      	ldr	r2, [pc, #372]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6213      	str	r3, [r2, #32]
 8004038:	e00b      	b.n	8004052 <HAL_RCC_OscConfig+0x36e>
 800403a:	4b5b      	ldr	r3, [pc, #364]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	4a5a      	ldr	r2, [pc, #360]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	6213      	str	r3, [r2, #32]
 8004046:	4b58      	ldr	r3, [pc, #352]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4a57      	ldr	r2, [pc, #348]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d015      	beq.n	8004086 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800405a:	f7fd fdc3 	bl	8001be4 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fd fdbf 	bl	8001be4 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0b1      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	4b4b      	ldr	r3, [pc, #300]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0ee      	beq.n	8004062 <HAL_RCC_OscConfig+0x37e>
 8004084:	e014      	b.n	80040b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004086:	f7fd fdad 	bl	8001be4 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fd fda9 	bl	8001be4 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e09b      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a4:	4b40      	ldr	r3, [pc, #256]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ee      	bne.n	800408e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b6:	4b3c      	ldr	r3, [pc, #240]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	4a3b      	ldr	r2, [pc, #236]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8087 	beq.w	80041da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040cc:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d061      	beq.n	800419c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d146      	bne.n	800416e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b33      	ldr	r3, [pc, #204]	; (80041b0 <HAL_RCC_OscConfig+0x4cc>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fd fd7d 	bl	8001be4 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ee:	f7fd fd79 	bl	8001be4 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e06d      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004100:	4b29      	ldr	r3, [pc, #164]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d108      	bne.n	8004128 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004116:	4b24      	ldr	r3, [pc, #144]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	4921      	ldr	r1, [pc, #132]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a19      	ldr	r1, [r3, #32]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	430b      	orrs	r3, r1
 800413a:	491b      	ldr	r1, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	4313      	orrs	r3, r2
 800413e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCC_OscConfig+0x4cc>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004146:	f7fd fd4d 	bl	8001be4 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414e:	f7fd fd49 	bl	8001be4 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e03d      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x46a>
 800416c:	e035      	b.n	80041da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <HAL_RCC_OscConfig+0x4cc>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004174:	f7fd fd36 	bl	8001be4 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417c:	f7fd fd32 	bl	8001be4 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e026      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_RCC_OscConfig+0x4c4>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x498>
 800419a:	e01e      	b.n	80041da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	69db      	ldr	r3, [r3, #28]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d107      	bne.n	80041b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e019      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
 80041b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_OscConfig+0x500>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d106      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e000      	b.n	80041dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000

080041e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0d0      	b.n	800439e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041fc:	4b6a      	ldr	r3, [pc, #424]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d910      	bls.n	800422c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800420a:	4b67      	ldr	r3, [pc, #412]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 0207 	bic.w	r2, r3, #7
 8004212:	4965      	ldr	r1, [pc, #404]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b63      	ldr	r3, [pc, #396]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e0b8      	b.n	800439e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d020      	beq.n	800427a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004244:	4b59      	ldr	r3, [pc, #356]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	4a58      	ldr	r2, [pc, #352]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 800424a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800424e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0308 	and.w	r3, r3, #8
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800425c:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a52      	ldr	r2, [pc, #328]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004266:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004268:	4b50      	ldr	r3, [pc, #320]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	494d      	ldr	r1, [pc, #308]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d040      	beq.n	8004308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428e:	4b47      	ldr	r3, [pc, #284]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d115      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e07f      	b.n	800439e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d107      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a6:	4b41      	ldr	r3, [pc, #260]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d109      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e073      	b.n	800439e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b6:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06b      	b.n	800439e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042c6:	4b39      	ldr	r3, [pc, #228]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f023 0203 	bic.w	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	4936      	ldr	r1, [pc, #216]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042d8:	f7fd fc84 	bl	8001be4 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e0:	f7fd fc80 	bl	8001be4 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e053      	b.n	800439e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f6:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 020c 	and.w	r2, r3, #12
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	429a      	cmp	r2, r3
 8004306:	d1eb      	bne.n	80042e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004308:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d210      	bcs.n	8004338 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b24      	ldr	r3, [pc, #144]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 0207 	bic.w	r2, r3, #7
 800431e:	4922      	ldr	r1, [pc, #136]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b20      	ldr	r3, [pc, #128]	; (80043a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e032      	b.n	800439e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d008      	beq.n	8004356 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004344:	4b19      	ldr	r3, [pc, #100]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4916      	ldr	r1, [pc, #88]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004362:	4b12      	ldr	r3, [pc, #72]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	490e      	ldr	r1, [pc, #56]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004376:	f000 f821 	bl	80043bc <HAL_RCC_GetSysClockFreq>
 800437a:	4602      	mov	r2, r0
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_ClockConfig+0x1c4>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	490a      	ldr	r1, [pc, #40]	; (80043b0 <HAL_RCC_ClockConfig+0x1c8>)
 8004388:	5ccb      	ldrb	r3, [r1, r3]
 800438a:	fa22 f303 	lsr.w	r3, r2, r3
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <HAL_RCC_ClockConfig+0x1cc>)
 8004390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCC_ClockConfig+0x1d0>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4618      	mov	r0, r3
 8004398:	f7fd fbe2 	bl	8001b60 <HAL_InitTick>

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40022000 	.word	0x40022000
 80043ac:	40021000 	.word	0x40021000
 80043b0:	08008594 	.word	0x08008594
 80043b4:	20000000 	.word	0x20000000
 80043b8:	20000004 	.word	0x20000004

080043bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	2300      	movs	r3, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043d6:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <HAL_RCC_GetSysClockFreq+0x94>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d002      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x30>
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0x36>
 80043ea:	e027      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_RCC_GetSysClockFreq+0x98>)
 80043ee:	613b      	str	r3, [r7, #16]
      break;
 80043f0:	e027      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	0c9b      	lsrs	r3, r3, #18
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	4a17      	ldr	r2, [pc, #92]	; (8004458 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043fc:	5cd3      	ldrb	r3, [r2, r3]
 80043fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d010      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800440a:	4b11      	ldr	r3, [pc, #68]	; (8004450 <HAL_RCC_GetSysClockFreq+0x94>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	0c5b      	lsrs	r3, r3, #17
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	4a11      	ldr	r2, [pc, #68]	; (800445c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004416:	5cd3      	ldrb	r3, [r2, r3]
 8004418:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a0d      	ldr	r2, [pc, #52]	; (8004454 <HAL_RCC_GetSysClockFreq+0x98>)
 800441e:	fb03 f202 	mul.w	r2, r3, r2
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	e004      	b.n	8004436 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	613b      	str	r3, [r7, #16]
      break;
 800443a:	e002      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetSysClockFreq+0x98>)
 800443e:	613b      	str	r3, [r7, #16]
      break;
 8004440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004442:	693b      	ldr	r3, [r7, #16]
}
 8004444:	4618      	mov	r0, r3
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40021000 	.word	0x40021000
 8004454:	007a1200 	.word	0x007a1200
 8004458:	080085ac 	.word	0x080085ac
 800445c:	080085bc 	.word	0x080085bc
 8004460:	003d0900 	.word	0x003d0900

08004464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b02      	ldr	r3, [pc, #8]	; (8004474 <HAL_RCC_GetHCLKFreq+0x10>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	20000000 	.word	0x20000000

08004478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800447c:	f7ff fff2 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004480:	4602      	mov	r2, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4903      	ldr	r1, [pc, #12]	; (800449c <HAL_RCC_GetPCLK1Freq+0x24>)
 800448e:	5ccb      	ldrb	r3, [r1, r3]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	080085a4 	.word	0x080085a4

080044a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044a4:	f7ff ffde 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	0adb      	lsrs	r3, r3, #11
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	080085a4 	.word	0x080085a4

080044c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <RCC_Delay+0x34>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <RCC_Delay+0x38>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	0a5b      	lsrs	r3, r3, #9
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044e4:	bf00      	nop
  }
  while (Delay --);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1e5a      	subs	r2, r3, #1
 80044ea:	60fa      	str	r2, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f9      	bne.n	80044e4 <RCC_Delay+0x1c>
}
 80044f0:	bf00      	nop
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr
 80044fc:	20000000 	.word	0x20000000
 8004500:	10624dd3 	.word	0x10624dd3

08004504 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d07d      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004520:	2300      	movs	r3, #0
 8004522:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004524:	4b4f      	ldr	r3, [pc, #316]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	4b4c      	ldr	r3, [pc, #304]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	4a4b      	ldr	r2, [pc, #300]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453a:	61d3      	str	r3, [r2, #28]
 800453c:	4b49      	ldr	r3, [pc, #292]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004548:	2301      	movs	r3, #1
 800454a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b46      	ldr	r3, [pc, #280]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d118      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004558:	4b43      	ldr	r3, [pc, #268]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a42      	ldr	r2, [pc, #264]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800455e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004564:	f7fd fb3e 	bl	8001be4 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456a:	e008      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456c:	f7fd fb3a 	bl	8001be4 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e06d      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d02e      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d027      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a8:	4b2e      	ldr	r3, [pc, #184]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045b2:	4b2e      	ldr	r3, [pc, #184]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b8:	4b2c      	ldr	r3, [pc, #176]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045be:	4a29      	ldr	r2, [pc, #164]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d014      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fd fb09 	bl	8001be4 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fd fb05 	bl	8001be4 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e036      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ec:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ee      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4917      	ldr	r1, [pc, #92]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	4313      	orrs	r3, r2
 8004608:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004610:	4b14      	ldr	r3, [pc, #80]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	490b      	ldr	r1, [pc, #44]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	4313      	orrs	r3, r2
 8004638:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4904      	ldr	r1, [pc, #16]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	40007000 	.word	0x40007000
 800466c:	42420440 	.word	0x42420440

08004670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e041      	b.n	8004706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd f828 	bl	80016ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f000 fa74 	bl	8004b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b01      	cmp	r3, #1
 8004722:	d001      	beq.n	8004728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e03a      	b.n	800479e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_TIM_Base_Start_IT+0x98>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x58>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004752:	d009      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x58>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a14      	ldr	r2, [pc, #80]	; (80047ac <HAL_TIM_Base_Start_IT+0x9c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x58>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a13      	ldr	r2, [pc, #76]	; (80047b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d111      	bne.n	800478c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b06      	cmp	r3, #6
 8004778:	d010      	beq.n	800479c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478a:	e007      	b.n	800479c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f042 0201 	orr.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40000800 	.word	0x40000800

080047b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d122      	bne.n	8004810 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d11b      	bne.n	8004810 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0202 	mvn.w	r2, #2
 80047e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f9b4 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 80047fc:	e005      	b.n	800480a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f9a7 	bl	8004b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f9b6 	bl	8004b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b04      	cmp	r3, #4
 800481c:	d122      	bne.n	8004864 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b04      	cmp	r3, #4
 800482a:	d11b      	bne.n	8004864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f06f 0204 	mvn.w	r2, #4
 8004834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f98a 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 8004850:	e005      	b.n	800485e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f97d 	bl	8004b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f98c 	bl	8004b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b08      	cmp	r3, #8
 8004870:	d122      	bne.n	80048b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b08      	cmp	r3, #8
 800487e:	d11b      	bne.n	80048b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0208 	mvn.w	r2, #8
 8004888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2204      	movs	r2, #4
 800488e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f960 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 80048a4:	e005      	b.n	80048b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f953 	bl	8004b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f962 	bl	8004b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0310 	and.w	r3, r3, #16
 80048c2:	2b10      	cmp	r3, #16
 80048c4:	d122      	bne.n	800490c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b10      	cmp	r3, #16
 80048d2:	d11b      	bne.n	800490c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0210 	mvn.w	r2, #16
 80048dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2208      	movs	r2, #8
 80048e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f936 	bl	8004b64 <HAL_TIM_IC_CaptureCallback>
 80048f8:	e005      	b.n	8004906 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 f929 	bl	8004b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f938 	bl	8004b76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b01      	cmp	r3, #1
 8004918:	d10e      	bne.n	8004938 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b01      	cmp	r3, #1
 8004926:	d107      	bne.n	8004938 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0201 	mvn.w	r2, #1
 8004930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7fc fd88 	bl	8001448 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d10e      	bne.n	8004964 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b80      	cmp	r3, #128	; 0x80
 8004952:	d107      	bne.n	8004964 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800495c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa7b 	bl	8004e5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d10e      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d107      	bne.n	8004990 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f8fc 	bl	8004b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0320 	and.w	r3, r3, #32
 800499a:	2b20      	cmp	r3, #32
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0220 	mvn.w	r2, #32
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa46 	bl	8004e48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_TIM_ConfigClockSource+0x1c>
 80049dc:	2302      	movs	r3, #2
 80049de:	e0b4      	b.n	8004b4a <HAL_TIM_ConfigClockSource+0x186>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a18:	d03e      	beq.n	8004a98 <HAL_TIM_ConfigClockSource+0xd4>
 8004a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1e:	f200 8087 	bhi.w	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a26:	f000 8086 	beq.w	8004b36 <HAL_TIM_ConfigClockSource+0x172>
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d87f      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b70      	cmp	r3, #112	; 0x70
 8004a32:	d01a      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0xa6>
 8004a34:	2b70      	cmp	r3, #112	; 0x70
 8004a36:	d87b      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b60      	cmp	r3, #96	; 0x60
 8004a3a:	d050      	beq.n	8004ade <HAL_TIM_ConfigClockSource+0x11a>
 8004a3c:	2b60      	cmp	r3, #96	; 0x60
 8004a3e:	d877      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a40:	2b50      	cmp	r3, #80	; 0x50
 8004a42:	d03c      	beq.n	8004abe <HAL_TIM_ConfigClockSource+0xfa>
 8004a44:	2b50      	cmp	r3, #80	; 0x50
 8004a46:	d873      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d058      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0x13a>
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d86f      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a50:	2b30      	cmp	r3, #48	; 0x30
 8004a52:	d064      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x15a>
 8004a54:	2b30      	cmp	r3, #48	; 0x30
 8004a56:	d86b      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d060      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x15a>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d867      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d05c      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x15a>
 8004a64:	2b10      	cmp	r3, #16
 8004a66:	d05a      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x15a>
 8004a68:	e062      	b.n	8004b30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a7a:	f000 f968 	bl	8004d4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	609a      	str	r2, [r3, #8]
      break;
 8004a96:	e04f      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aa8:	f000 f951 	bl	8004d4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aba:	609a      	str	r2, [r3, #8]
      break;
 8004abc:	e03c      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aca:	461a      	mov	r2, r3
 8004acc:	f000 f8c8 	bl	8004c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2150      	movs	r1, #80	; 0x50
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f91f 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004adc:	e02c      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aea:	461a      	mov	r2, r3
 8004aec:	f000 f8e6 	bl	8004cbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2160      	movs	r1, #96	; 0x60
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f90f 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004afc:	e01c      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f000 f8a8 	bl	8004c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2140      	movs	r1, #64	; 0x40
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f8ff 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004b1c:	e00c      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f000 f8f6 	bl	8004d1a <TIM_ITRx_SetConfig>
      break;
 8004b2e:	e003      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
      break;
 8004b34:	e000      	b.n	8004b38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr

08004b76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bc80      	pop	{r7}
 8004b98:	4770      	bx	lr
	...

08004b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a29      	ldr	r2, [pc, #164]	; (8004c54 <TIM_Base_SetConfig+0xb8>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00b      	beq.n	8004bcc <TIM_Base_SetConfig+0x30>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bba:	d007      	beq.n	8004bcc <TIM_Base_SetConfig+0x30>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a26      	ldr	r2, [pc, #152]	; (8004c58 <TIM_Base_SetConfig+0xbc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_Base_SetConfig+0x30>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a25      	ldr	r2, [pc, #148]	; (8004c5c <TIM_Base_SetConfig+0xc0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d108      	bne.n	8004bde <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	; (8004c54 <TIM_Base_SetConfig+0xb8>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00b      	beq.n	8004bfe <TIM_Base_SetConfig+0x62>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bec:	d007      	beq.n	8004bfe <TIM_Base_SetConfig+0x62>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <TIM_Base_SetConfig+0xbc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_Base_SetConfig+0x62>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <TIM_Base_SetConfig+0xc0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d108      	bne.n	8004c10 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <TIM_Base_SetConfig+0xb8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d103      	bne.n	8004c44 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	615a      	str	r2, [r3, #20]
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	40012c00 	.word	0x40012c00
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800

08004c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f023 030a 	bic.w	r3, r3, #10
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b087      	sub	sp, #28
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f023 0210 	bic.w	r2, r3, #16
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	031b      	lsls	r3, r3, #12
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f043 0307 	orr.w	r3, r3, #7
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bc80      	pop	{r7}
 8004d4c:	4770      	bx	lr

08004d4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b087      	sub	sp, #28
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
 8004d5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	021a      	lsls	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	609a      	str	r2, [r3, #8]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e046      	b.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a16      	ldr	r2, [pc, #88]	; (8004e3c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df0:	d009      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a10      	ldr	r2, [pc, #64]	; (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10c      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr
 8004e3c:	40012c00 	.word	0x40012c00
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800

08004e48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bc80      	pop	{r7}
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bc80      	pop	{r7}
 8004e6a:	4770      	bx	lr

08004e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e042      	b.n	8004f04 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d106      	bne.n	8004e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fc fc50 	bl	8001738 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2224      	movs	r2, #36	; 0x24
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fd71 	bl	8005998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af02      	add	r7, sp, #8
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b20      	cmp	r3, #32
 8004f2a:	d16d      	bne.n	8005008 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_UART_Transmit+0x2c>
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e066      	b.n	800500a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2221      	movs	r2, #33	; 0x21
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f4a:	f7fc fe4b 	bl	8001be4 <HAL_GetTick>
 8004f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	88fa      	ldrh	r2, [r7, #6]
 8004f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	88fa      	ldrh	r2, [r7, #6]
 8004f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f64:	d108      	bne.n	8004f78 <HAL_UART_Transmit+0x6c>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	61bb      	str	r3, [r7, #24]
 8004f76:	e003      	b.n	8004f80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f80:	e02a      	b.n	8004fd8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 faf9 	bl	8005584 <UART_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e036      	b.n	800500a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	61bb      	str	r3, [r7, #24]
 8004fb8:	e007      	b.n	8004fca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	781a      	ldrb	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1cf      	bne.n	8004f82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2140      	movs	r1, #64	; 0x40
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 fac9 	bl	8005584 <UART_WaitOnFlagUntilTimeout>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e006      	b.n	800500a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e000      	b.n	800500a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005008:	2302      	movs	r3, #2
  }
}
 800500a:	4618      	mov	r0, r3
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b0ba      	sub	sp, #232	; 0xe8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800503a:	2300      	movs	r3, #0
 800503c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10f      	bne.n	800507a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800505a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_UART_IRQHandler+0x66>
 8005066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fbd1 	bl	800581a <UART_Receive_IT>
      return;
 8005078:	e25b      	b.n	8005532 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800507a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800507e:	2b00      	cmp	r3, #0
 8005080:	f000 80de 	beq.w	8005240 <HAL_UART_IRQHandler+0x22c>
 8005084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005094:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 80d1 	beq.w	8005240 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00b      	beq.n	80050c2 <HAL_UART_IRQHandler+0xae>
 80050aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d005      	beq.n	80050c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	f043 0201 	orr.w	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_UART_IRQHandler+0xd2>
 80050ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050de:	f043 0202 	orr.w	r2, r3, #2
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <HAL_UART_IRQHandler+0xf6>
 80050f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	f043 0204 	orr.w	r2, r3, #4
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800510a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d011      	beq.n	800513a <HAL_UART_IRQHandler+0x126>
 8005116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d105      	bne.n	800512e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	f043 0208 	orr.w	r2, r3, #8
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 81f2 	beq.w	8005528 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005148:	f003 0320 	and.w	r3, r3, #32
 800514c:	2b00      	cmp	r3, #0
 800514e:	d008      	beq.n	8005162 <HAL_UART_IRQHandler+0x14e>
 8005150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fb5c 	bl	800581a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d103      	bne.n	800518e <HAL_UART_IRQHandler+0x17a>
 8005186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d04f      	beq.n	800522e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fa66 	bl	8005660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d041      	beq.n	8005226 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3314      	adds	r3, #20
 80051a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80051b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3314      	adds	r3, #20
 80051ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80051ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80051d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80051da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80051e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1d9      	bne.n	80051a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d013      	beq.n	800521e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	4a7e      	ldr	r2, [pc, #504]	; (80053f4 <HAL_UART_IRQHandler+0x3e0>)
 80051fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fa26 	bl	8003654 <HAL_DMA_Abort_IT>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005218:	4610      	mov	r0, r2
 800521a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800521c:	e00e      	b.n	800523c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f99c 	bl	800555c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005224:	e00a      	b.n	800523c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f998 	bl	800555c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522c:	e006      	b.n	800523c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f994 	bl	800555c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800523a:	e175      	b.n	8005528 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523c:	bf00      	nop
    return;
 800523e:	e173      	b.n	8005528 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005244:	2b01      	cmp	r3, #1
 8005246:	f040 814f 	bne.w	80054e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0310 	and.w	r3, r3, #16
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8148 	beq.w	80054e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8141 	beq.w	80054e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005266:	2300      	movs	r3, #0
 8005268:	60bb      	str	r3, [r7, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 80b6 	beq.w	80053f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005298:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8145 	beq.w	800552c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80052a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052aa:	429a      	cmp	r2, r3
 80052ac:	f080 813e 	bcs.w	800552c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80052b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b20      	cmp	r3, #32
 80052c0:	f000 8088 	beq.w	80053d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052d2:	e853 3f00 	ldrex	r3, [r3]
 80052d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80052da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	330c      	adds	r3, #12
 80052ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80052f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80052f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80052fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005300:	e841 2300 	strex	r3, r2, [r1]
 8005304:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005308:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1d9      	bne.n	80052c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3314      	adds	r3, #20
 8005330:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005334:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005338:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800533c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005346:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e1      	bne.n	8005310 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3314      	adds	r3, #20
 8005352:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800535c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800535e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3314      	adds	r3, #20
 800536c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005370:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005372:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005376:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800537e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e3      	bne.n	800534c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2220      	movs	r2, #32
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	330c      	adds	r3, #12
 8005398:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80053a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a4:	f023 0310 	bic.w	r3, r3, #16
 80053a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	330c      	adds	r3, #12
 80053b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80053b6:	65ba      	str	r2, [r7, #88]	; 0x58
 80053b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80053bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80053c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e3      	bne.n	8005392 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe f904 	bl	80035dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	4619      	mov	r1, r3
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f8bf 	bl	800556e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053f0:	e09c      	b.n	800552c <HAL_UART_IRQHandler+0x518>
 80053f2:	bf00      	nop
 80053f4:	08005725 	.word	0x08005725
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005400:	b29b      	uxth	r3, r3
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 808e 	beq.w	8005530 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8089 	beq.w	8005530 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	330c      	adds	r3, #12
 8005424:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800542e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005430:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005434:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	330c      	adds	r3, #12
 800543e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005442:	647a      	str	r2, [r7, #68]	; 0x44
 8005444:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005448:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e3      	bne.n	800541e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3314      	adds	r3, #20
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	623b      	str	r3, [r7, #32]
   return(result);
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	3314      	adds	r3, #20
 8005476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800547a:	633a      	str	r2, [r7, #48]	; 0x30
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e3      	bne.n	8005456 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0310 	bic.w	r3, r3, #16
 80054b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	330c      	adds	r3, #12
 80054bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80054c0:	61fa      	str	r2, [r7, #28]
 80054c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	69b9      	ldr	r1, [r7, #24]
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	617b      	str	r3, [r7, #20]
   return(result);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e3      	bne.n	800549c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2202      	movs	r2, #2
 80054d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f844 	bl	800556e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054e6:	e023      	b.n	8005530 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <HAL_UART_IRQHandler+0x4f4>
 80054f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f923 	bl	800574c <UART_Transmit_IT>
    return;
 8005506:	e014      	b.n	8005532 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00e      	beq.n	8005532 <HAL_UART_IRQHandler+0x51e>
 8005514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f962 	bl	80057ea <UART_EndTransmit_IT>
    return;
 8005526:	e004      	b.n	8005532 <HAL_UART_IRQHandler+0x51e>
    return;
 8005528:	bf00      	nop
 800552a:	e002      	b.n	8005532 <HAL_UART_IRQHandler+0x51e>
      return;
 800552c:	bf00      	nop
 800552e:	e000      	b.n	8005532 <HAL_UART_IRQHandler+0x51e>
      return;
 8005530:	bf00      	nop
  }
}
 8005532:	37e8      	adds	r7, #232	; 0xe8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	bc80      	pop	{r7}
 8005548:	4770      	bx	lr

0800554a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr

0800555c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr

0800556e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr

08005584 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b090      	sub	sp, #64	; 0x40
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005594:	e050      	b.n	8005638 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559c:	d04c      	beq.n	8005638 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800559e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d007      	beq.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055a4:	f7fc fb1e 	bl	8001be4 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d241      	bcs.n	8005638 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	330c      	adds	r3, #12
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80055d4:	637a      	str	r2, [r7, #52]	; 0x34
 80055d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e5      	bne.n	80055b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3314      	adds	r3, #20
 80055ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	613b      	str	r3, [r7, #16]
   return(result);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	3314      	adds	r3, #20
 8005606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005608:	623a      	str	r2, [r7, #32]
 800560a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	69f9      	ldr	r1, [r7, #28]
 800560e:	6a3a      	ldr	r2, [r7, #32]
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	61bb      	str	r3, [r7, #24]
   return(result);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e5      	bne.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e00f      	b.n	8005658 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	4013      	ands	r3, r2
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	429a      	cmp	r2, r3
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	461a      	mov	r2, r3
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	429a      	cmp	r2, r3
 8005654:	d09f      	beq.n	8005596 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3740      	adds	r7, #64	; 0x40
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b095      	sub	sp, #84	; 0x54
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	330c      	adds	r3, #12
 800566e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	e853 3f00 	ldrex	r3, [r3]
 8005676:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800567e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005688:	643a      	str	r2, [r7, #64]	; 0x40
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800568e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e5      	bne.n	8005668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3314      	adds	r3, #20
 80056a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	e853 3f00 	ldrex	r3, [r3]
 80056aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c4:	e841 2300 	strex	r3, r2, [r1]
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e5      	bne.n	800569c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d119      	bne.n	800570c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	e853 3f00 	ldrex	r3, [r3]
 80056e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f023 0310 	bic.w	r3, r3, #16
 80056ee:	647b      	str	r3, [r7, #68]	; 0x44
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056f8:	61ba      	str	r2, [r7, #24]
 80056fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6979      	ldr	r1, [r7, #20]
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	e841 2300 	strex	r3, r2, [r1]
 8005704:	613b      	str	r3, [r7, #16]
   return(result);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1e5      	bne.n	80056d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
}
 800571a:	bf00      	nop
 800571c:	3754      	adds	r7, #84	; 0x54
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff ff0c 	bl	800555c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005744:	bf00      	nop
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b21      	cmp	r3, #33	; 0x21
 800575e:	d13e      	bne.n	80057de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005768:	d114      	bne.n	8005794 <UART_Transmit_IT+0x48>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d110      	bne.n	8005794 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005786:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	1c9a      	adds	r2, r3, #2
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]
 8005792:	e008      	b.n	80057a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6211      	str	r1, [r2, #32]
 800579e:	781a      	ldrb	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4619      	mov	r1, r3
 80057b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68da      	ldr	r2, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	e000      	b.n	80057e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057de:	2302      	movs	r3, #2
  }
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bc80      	pop	{r7}
 80057e8:	4770      	bx	lr

080057ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b082      	sub	sp, #8
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005800:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fe94 	bl	8005538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b08c      	sub	sp, #48	; 0x30
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b22      	cmp	r3, #34	; 0x22
 800582c:	f040 80ae 	bne.w	800598c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005838:	d117      	bne.n	800586a <UART_Receive_IT+0x50>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d113      	bne.n	800586a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005858:	b29a      	uxth	r2, r3
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	1c9a      	adds	r2, r3, #2
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28
 8005868:	e026      	b.n	80058b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005870:	2300      	movs	r3, #0
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800587c:	d007      	beq.n	800588e <UART_Receive_IT+0x74>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10a      	bne.n	800589c <UART_Receive_IT+0x82>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d106      	bne.n	800589c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	b2da      	uxtb	r2, r3
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e008      	b.n	80058ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	4619      	mov	r1, r3
 80058c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d15d      	bne.n	8005988 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0220 	bic.w	r2, r2, #32
 80058da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695a      	ldr	r2, [r3, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0201 	bic.w	r2, r2, #1
 80058fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590e:	2b01      	cmp	r3, #1
 8005910:	d135      	bne.n	800597e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	330c      	adds	r3, #12
 800591e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	613b      	str	r3, [r7, #16]
   return(result);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005938:	623a      	str	r2, [r7, #32]
 800593a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	69f9      	ldr	r1, [r7, #28]
 800593e:	6a3a      	ldr	r2, [r7, #32]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	61bb      	str	r3, [r7, #24]
   return(result);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e5      	bne.n	8005918 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0310 	and.w	r3, r3, #16
 8005956:	2b10      	cmp	r3, #16
 8005958:	d10a      	bne.n	8005970 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	60fb      	str	r3, [r7, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005974:	4619      	mov	r1, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff fdf9 	bl	800556e <HAL_UARTEx_RxEventCallback>
 800597c:	e002      	b.n	8005984 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff fde3 	bl	800554a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	e002      	b.n	800598e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	e000      	b.n	800598e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3730      	adds	r7, #48	; 0x30
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80059d2:	f023 030c 	bic.w	r3, r3, #12
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	430b      	orrs	r3, r1
 80059de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2c      	ldr	r2, [pc, #176]	; (8005aac <UART_SetConfig+0x114>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d103      	bne.n	8005a08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a00:	f7fe fd4e 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	e002      	b.n	8005a0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a08:	f7fe fd36 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8005a0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009a      	lsls	r2, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a24:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <UART_SetConfig+0x118>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	0119      	lsls	r1, r3, #4
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	009a      	lsls	r2, r3, #2
 8005a38:	441a      	add	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a44:	4b1a      	ldr	r3, [pc, #104]	; (8005ab0 <UART_SetConfig+0x118>)
 8005a46:	fba3 0302 	umull	r0, r3, r3, r2
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	2064      	movs	r0, #100	; 0x64
 8005a4e:	fb00 f303 	mul.w	r3, r0, r3
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	3332      	adds	r3, #50	; 0x32
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <UART_SetConfig+0x118>)
 8005a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a64:	4419      	add	r1, r3
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009a      	lsls	r2, r3, #2
 8005a70:	441a      	add	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a7c:	4b0c      	ldr	r3, [pc, #48]	; (8005ab0 <UART_SetConfig+0x118>)
 8005a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2064      	movs	r0, #100	; 0x64
 8005a86:	fb00 f303 	mul.w	r3, r0, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	3332      	adds	r3, #50	; 0x32
 8005a90:	4a07      	ldr	r2, [pc, #28]	; (8005ab0 <UART_SetConfig+0x118>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	f003 020f 	and.w	r2, r3, #15
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005aa4:	bf00      	nop
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40013800 	.word	0x40013800
 8005ab0:	51eb851f 	.word	0x51eb851f

08005ab4 <__cvt>:
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aba:	461f      	mov	r7, r3
 8005abc:	bfbb      	ittet	lt
 8005abe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005ac2:	461f      	movlt	r7, r3
 8005ac4:	2300      	movge	r3, #0
 8005ac6:	232d      	movlt	r3, #45	; 0x2d
 8005ac8:	b088      	sub	sp, #32
 8005aca:	4614      	mov	r4, r2
 8005acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ace:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ad0:	7013      	strb	r3, [r2, #0]
 8005ad2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ad4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005ad8:	f023 0820 	bic.w	r8, r3, #32
 8005adc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ae0:	d005      	beq.n	8005aee <__cvt+0x3a>
 8005ae2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005ae6:	d100      	bne.n	8005aea <__cvt+0x36>
 8005ae8:	3501      	adds	r5, #1
 8005aea:	2302      	movs	r3, #2
 8005aec:	e000      	b.n	8005af0 <__cvt+0x3c>
 8005aee:	2303      	movs	r3, #3
 8005af0:	aa07      	add	r2, sp, #28
 8005af2:	9204      	str	r2, [sp, #16]
 8005af4:	aa06      	add	r2, sp, #24
 8005af6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005afa:	e9cd 3500 	strd	r3, r5, [sp]
 8005afe:	4622      	mov	r2, r4
 8005b00:	463b      	mov	r3, r7
 8005b02:	f000 ff55 	bl	80069b0 <_dtoa_r>
 8005b06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	d102      	bne.n	8005b14 <__cvt+0x60>
 8005b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b10:	07db      	lsls	r3, r3, #31
 8005b12:	d522      	bpl.n	8005b5a <__cvt+0xa6>
 8005b14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b18:	eb06 0905 	add.w	r9, r6, r5
 8005b1c:	d110      	bne.n	8005b40 <__cvt+0x8c>
 8005b1e:	7833      	ldrb	r3, [r6, #0]
 8005b20:	2b30      	cmp	r3, #48	; 0x30
 8005b22:	d10a      	bne.n	8005b3a <__cvt+0x86>
 8005b24:	2200      	movs	r2, #0
 8005b26:	2300      	movs	r3, #0
 8005b28:	4620      	mov	r0, r4
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	f7fa ff3c 	bl	80009a8 <__aeabi_dcmpeq>
 8005b30:	b918      	cbnz	r0, 8005b3a <__cvt+0x86>
 8005b32:	f1c5 0501 	rsb	r5, r5, #1
 8005b36:	f8ca 5000 	str.w	r5, [sl]
 8005b3a:	f8da 3000 	ldr.w	r3, [sl]
 8005b3e:	4499      	add	r9, r3
 8005b40:	2200      	movs	r2, #0
 8005b42:	2300      	movs	r3, #0
 8005b44:	4620      	mov	r0, r4
 8005b46:	4639      	mov	r1, r7
 8005b48:	f7fa ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 8005b4c:	b108      	cbz	r0, 8005b52 <__cvt+0x9e>
 8005b4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b52:	2230      	movs	r2, #48	; 0x30
 8005b54:	9b07      	ldr	r3, [sp, #28]
 8005b56:	454b      	cmp	r3, r9
 8005b58:	d307      	bcc.n	8005b6a <__cvt+0xb6>
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	9b07      	ldr	r3, [sp, #28]
 8005b5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005b60:	1b9b      	subs	r3, r3, r6
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	b008      	add	sp, #32
 8005b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6a:	1c59      	adds	r1, r3, #1
 8005b6c:	9107      	str	r1, [sp, #28]
 8005b6e:	701a      	strb	r2, [r3, #0]
 8005b70:	e7f0      	b.n	8005b54 <__cvt+0xa0>

08005b72 <__exponent>:
 8005b72:	4603      	mov	r3, r0
 8005b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b76:	2900      	cmp	r1, #0
 8005b78:	f803 2b02 	strb.w	r2, [r3], #2
 8005b7c:	bfb6      	itet	lt
 8005b7e:	222d      	movlt	r2, #45	; 0x2d
 8005b80:	222b      	movge	r2, #43	; 0x2b
 8005b82:	4249      	neglt	r1, r1
 8005b84:	2909      	cmp	r1, #9
 8005b86:	7042      	strb	r2, [r0, #1]
 8005b88:	dd2a      	ble.n	8005be0 <__exponent+0x6e>
 8005b8a:	f10d 0207 	add.w	r2, sp, #7
 8005b8e:	4617      	mov	r7, r2
 8005b90:	260a      	movs	r6, #10
 8005b92:	fb91 f5f6 	sdiv	r5, r1, r6
 8005b96:	4694      	mov	ip, r2
 8005b98:	fb06 1415 	mls	r4, r6, r5, r1
 8005b9c:	3430      	adds	r4, #48	; 0x30
 8005b9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	2c63      	cmp	r4, #99	; 0x63
 8005ba6:	4629      	mov	r1, r5
 8005ba8:	f102 32ff 	add.w	r2, r2, #4294967295
 8005bac:	dcf1      	bgt.n	8005b92 <__exponent+0x20>
 8005bae:	3130      	adds	r1, #48	; 0x30
 8005bb0:	f1ac 0402 	sub.w	r4, ip, #2
 8005bb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005bb8:	4622      	mov	r2, r4
 8005bba:	1c41      	adds	r1, r0, #1
 8005bbc:	42ba      	cmp	r2, r7
 8005bbe:	d30a      	bcc.n	8005bd6 <__exponent+0x64>
 8005bc0:	f10d 0209 	add.w	r2, sp, #9
 8005bc4:	eba2 020c 	sub.w	r2, r2, ip
 8005bc8:	42bc      	cmp	r4, r7
 8005bca:	bf88      	it	hi
 8005bcc:	2200      	movhi	r2, #0
 8005bce:	4413      	add	r3, r2
 8005bd0:	1a18      	subs	r0, r3, r0
 8005bd2:	b003      	add	sp, #12
 8005bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005bda:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005bde:	e7ed      	b.n	8005bbc <__exponent+0x4a>
 8005be0:	2330      	movs	r3, #48	; 0x30
 8005be2:	3130      	adds	r1, #48	; 0x30
 8005be4:	7083      	strb	r3, [r0, #2]
 8005be6:	70c1      	strb	r1, [r0, #3]
 8005be8:	1d03      	adds	r3, r0, #4
 8005bea:	e7f1      	b.n	8005bd0 <__exponent+0x5e>

08005bec <_printf_float>:
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	b091      	sub	sp, #68	; 0x44
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	f000 fdc7 	bl	8006790 <_localeconv_r>
 8005c02:	6803      	ldr	r3, [r0, #0]
 8005c04:	4618      	mov	r0, r3
 8005c06:	9309      	str	r3, [sp, #36]	; 0x24
 8005c08:	f7fa faa2 	bl	8000150 <strlen>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	930e      	str	r3, [sp, #56]	; 0x38
 8005c10:	f8d8 3000 	ldr.w	r3, [r8]
 8005c14:	900a      	str	r0, [sp, #40]	; 0x28
 8005c16:	3307      	adds	r3, #7
 8005c18:	f023 0307 	bic.w	r3, r3, #7
 8005c1c:	f103 0208 	add.w	r2, r3, #8
 8005c20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c24:	f8d4 b000 	ldr.w	fp, [r4]
 8005c28:	f8c8 2000 	str.w	r2, [r8]
 8005c2c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005c30:	4652      	mov	r2, sl
 8005c32:	4643      	mov	r3, r8
 8005c34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c38:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005c3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c42:	4650      	mov	r0, sl
 8005c44:	4b9c      	ldr	r3, [pc, #624]	; (8005eb8 <_printf_float+0x2cc>)
 8005c46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c48:	f7fa fee0 	bl	8000a0c <__aeabi_dcmpun>
 8005c4c:	bb70      	cbnz	r0, 8005cac <_printf_float+0xc0>
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c52:	4650      	mov	r0, sl
 8005c54:	4b98      	ldr	r3, [pc, #608]	; (8005eb8 <_printf_float+0x2cc>)
 8005c56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005c58:	f7fa feba 	bl	80009d0 <__aeabi_dcmple>
 8005c5c:	bb30      	cbnz	r0, 8005cac <_printf_float+0xc0>
 8005c5e:	2200      	movs	r2, #0
 8005c60:	2300      	movs	r3, #0
 8005c62:	4650      	mov	r0, sl
 8005c64:	4641      	mov	r1, r8
 8005c66:	f7fa fea9 	bl	80009bc <__aeabi_dcmplt>
 8005c6a:	b110      	cbz	r0, 8005c72 <_printf_float+0x86>
 8005c6c:	232d      	movs	r3, #45	; 0x2d
 8005c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c72:	4a92      	ldr	r2, [pc, #584]	; (8005ebc <_printf_float+0x2d0>)
 8005c74:	4b92      	ldr	r3, [pc, #584]	; (8005ec0 <_printf_float+0x2d4>)
 8005c76:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c7a:	bf94      	ite	ls
 8005c7c:	4690      	movls	r8, r2
 8005c7e:	4698      	movhi	r8, r3
 8005c80:	2303      	movs	r3, #3
 8005c82:	f04f 0a00 	mov.w	sl, #0
 8005c86:	6123      	str	r3, [r4, #16]
 8005c88:	f02b 0304 	bic.w	r3, fp, #4
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	4633      	mov	r3, r6
 8005c90:	4621      	mov	r1, r4
 8005c92:	4628      	mov	r0, r5
 8005c94:	9700      	str	r7, [sp, #0]
 8005c96:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c98:	f000 f9d6 	bl	8006048 <_printf_common>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	f040 8090 	bne.w	8005dc2 <_printf_float+0x1d6>
 8005ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca6:	b011      	add	sp, #68	; 0x44
 8005ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cac:	4652      	mov	r2, sl
 8005cae:	4643      	mov	r3, r8
 8005cb0:	4650      	mov	r0, sl
 8005cb2:	4641      	mov	r1, r8
 8005cb4:	f7fa feaa 	bl	8000a0c <__aeabi_dcmpun>
 8005cb8:	b148      	cbz	r0, 8005cce <_printf_float+0xe2>
 8005cba:	f1b8 0f00 	cmp.w	r8, #0
 8005cbe:	bfb8      	it	lt
 8005cc0:	232d      	movlt	r3, #45	; 0x2d
 8005cc2:	4a80      	ldr	r2, [pc, #512]	; (8005ec4 <_printf_float+0x2d8>)
 8005cc4:	bfb8      	it	lt
 8005cc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cca:	4b7f      	ldr	r3, [pc, #508]	; (8005ec8 <_printf_float+0x2dc>)
 8005ccc:	e7d3      	b.n	8005c76 <_printf_float+0x8a>
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	d142      	bne.n	8005d5e <_printf_float+0x172>
 8005cd8:	2306      	movs	r3, #6
 8005cda:	6063      	str	r3, [r4, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	9206      	str	r2, [sp, #24]
 8005ce0:	aa0e      	add	r2, sp, #56	; 0x38
 8005ce2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005ce6:	aa0d      	add	r2, sp, #52	; 0x34
 8005ce8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005cec:	9203      	str	r2, [sp, #12]
 8005cee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005cf2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005cf6:	6023      	str	r3, [r4, #0]
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	4652      	mov	r2, sl
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	4628      	mov	r0, r5
 8005d00:	4643      	mov	r3, r8
 8005d02:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d04:	f7ff fed6 	bl	8005ab4 <__cvt>
 8005d08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d0a:	4680      	mov	r8, r0
 8005d0c:	2947      	cmp	r1, #71	; 0x47
 8005d0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d10:	d108      	bne.n	8005d24 <_printf_float+0x138>
 8005d12:	1cc8      	adds	r0, r1, #3
 8005d14:	db02      	blt.n	8005d1c <_printf_float+0x130>
 8005d16:	6863      	ldr	r3, [r4, #4]
 8005d18:	4299      	cmp	r1, r3
 8005d1a:	dd40      	ble.n	8005d9e <_printf_float+0x1b2>
 8005d1c:	f1a9 0902 	sub.w	r9, r9, #2
 8005d20:	fa5f f989 	uxtb.w	r9, r9
 8005d24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d28:	d81f      	bhi.n	8005d6a <_printf_float+0x17e>
 8005d2a:	464a      	mov	r2, r9
 8005d2c:	3901      	subs	r1, #1
 8005d2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d32:	910d      	str	r1, [sp, #52]	; 0x34
 8005d34:	f7ff ff1d 	bl	8005b72 <__exponent>
 8005d38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d3a:	4682      	mov	sl, r0
 8005d3c:	1813      	adds	r3, r2, r0
 8005d3e:	2a01      	cmp	r2, #1
 8005d40:	6123      	str	r3, [r4, #16]
 8005d42:	dc02      	bgt.n	8005d4a <_printf_float+0x15e>
 8005d44:	6822      	ldr	r2, [r4, #0]
 8005d46:	07d2      	lsls	r2, r2, #31
 8005d48:	d501      	bpl.n	8005d4e <_printf_float+0x162>
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d09b      	beq.n	8005c8e <_printf_float+0xa2>
 8005d56:	232d      	movs	r3, #45	; 0x2d
 8005d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d5c:	e797      	b.n	8005c8e <_printf_float+0xa2>
 8005d5e:	2947      	cmp	r1, #71	; 0x47
 8005d60:	d1bc      	bne.n	8005cdc <_printf_float+0xf0>
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1ba      	bne.n	8005cdc <_printf_float+0xf0>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e7b7      	b.n	8005cda <_printf_float+0xee>
 8005d6a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d6e:	d118      	bne.n	8005da2 <_printf_float+0x1b6>
 8005d70:	2900      	cmp	r1, #0
 8005d72:	6863      	ldr	r3, [r4, #4]
 8005d74:	dd0b      	ble.n	8005d8e <_printf_float+0x1a2>
 8005d76:	6121      	str	r1, [r4, #16]
 8005d78:	b913      	cbnz	r3, 8005d80 <_printf_float+0x194>
 8005d7a:	6822      	ldr	r2, [r4, #0]
 8005d7c:	07d0      	lsls	r0, r2, #31
 8005d7e:	d502      	bpl.n	8005d86 <_printf_float+0x19a>
 8005d80:	3301      	adds	r3, #1
 8005d82:	440b      	add	r3, r1
 8005d84:	6123      	str	r3, [r4, #16]
 8005d86:	f04f 0a00 	mov.w	sl, #0
 8005d8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d8c:	e7df      	b.n	8005d4e <_printf_float+0x162>
 8005d8e:	b913      	cbnz	r3, 8005d96 <_printf_float+0x1aa>
 8005d90:	6822      	ldr	r2, [r4, #0]
 8005d92:	07d2      	lsls	r2, r2, #31
 8005d94:	d501      	bpl.n	8005d9a <_printf_float+0x1ae>
 8005d96:	3302      	adds	r3, #2
 8005d98:	e7f4      	b.n	8005d84 <_printf_float+0x198>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e7f2      	b.n	8005d84 <_printf_float+0x198>
 8005d9e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005da4:	4299      	cmp	r1, r3
 8005da6:	db05      	blt.n	8005db4 <_printf_float+0x1c8>
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	6121      	str	r1, [r4, #16]
 8005dac:	07d8      	lsls	r0, r3, #31
 8005dae:	d5ea      	bpl.n	8005d86 <_printf_float+0x19a>
 8005db0:	1c4b      	adds	r3, r1, #1
 8005db2:	e7e7      	b.n	8005d84 <_printf_float+0x198>
 8005db4:	2900      	cmp	r1, #0
 8005db6:	bfcc      	ite	gt
 8005db8:	2201      	movgt	r2, #1
 8005dba:	f1c1 0202 	rsble	r2, r1, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	e7e0      	b.n	8005d84 <_printf_float+0x198>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	055a      	lsls	r2, r3, #21
 8005dc6:	d407      	bmi.n	8005dd8 <_printf_float+0x1ec>
 8005dc8:	6923      	ldr	r3, [r4, #16]
 8005dca:	4642      	mov	r2, r8
 8005dcc:	4631      	mov	r1, r6
 8005dce:	4628      	mov	r0, r5
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d12b      	bne.n	8005e2e <_printf_float+0x242>
 8005dd6:	e764      	b.n	8005ca2 <_printf_float+0xb6>
 8005dd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005ddc:	f240 80dd 	bls.w	8005f9a <_printf_float+0x3ae>
 8005de0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005de4:	2200      	movs	r2, #0
 8005de6:	2300      	movs	r3, #0
 8005de8:	f7fa fdde 	bl	80009a8 <__aeabi_dcmpeq>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d033      	beq.n	8005e58 <_printf_float+0x26c>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	4a35      	ldr	r2, [pc, #212]	; (8005ecc <_printf_float+0x2e0>)
 8005df8:	47b8      	blx	r7
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	f43f af51 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e00:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e04:	429a      	cmp	r2, r3
 8005e06:	db02      	blt.n	8005e0e <_printf_float+0x222>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	07d8      	lsls	r0, r3, #31
 8005e0c:	d50f      	bpl.n	8005e2e <_printf_float+0x242>
 8005e0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	f43f af42 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e1e:	f04f 0800 	mov.w	r8, #0
 8005e22:	f104 091a 	add.w	r9, r4, #26
 8005e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	4543      	cmp	r3, r8
 8005e2c:	dc09      	bgt.n	8005e42 <_printf_float+0x256>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	079b      	lsls	r3, r3, #30
 8005e32:	f100 8104 	bmi.w	800603e <_printf_float+0x452>
 8005e36:	68e0      	ldr	r0, [r4, #12]
 8005e38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e3a:	4298      	cmp	r0, r3
 8005e3c:	bfb8      	it	lt
 8005e3e:	4618      	movlt	r0, r3
 8005e40:	e731      	b.n	8005ca6 <_printf_float+0xba>
 8005e42:	2301      	movs	r3, #1
 8005e44:	464a      	mov	r2, r9
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	f43f af28 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e52:	f108 0801 	add.w	r8, r8, #1
 8005e56:	e7e6      	b.n	8005e26 <_printf_float+0x23a>
 8005e58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dc38      	bgt.n	8005ed0 <_printf_float+0x2e4>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4631      	mov	r1, r6
 8005e62:	4628      	mov	r0, r5
 8005e64:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <_printf_float+0x2e0>)
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f af1a 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e6e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005e72:	4313      	orrs	r3, r2
 8005e74:	d102      	bne.n	8005e7c <_printf_float+0x290>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	07d9      	lsls	r1, r3, #31
 8005e7a:	d5d8      	bpl.n	8005e2e <_printf_float+0x242>
 8005e7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e80:	4631      	mov	r1, r6
 8005e82:	4628      	mov	r0, r5
 8005e84:	47b8      	blx	r7
 8005e86:	3001      	adds	r0, #1
 8005e88:	f43f af0b 	beq.w	8005ca2 <_printf_float+0xb6>
 8005e8c:	f04f 0900 	mov.w	r9, #0
 8005e90:	f104 0a1a 	add.w	sl, r4, #26
 8005e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e96:	425b      	negs	r3, r3
 8005e98:	454b      	cmp	r3, r9
 8005e9a:	dc01      	bgt.n	8005ea0 <_printf_float+0x2b4>
 8005e9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e9e:	e794      	b.n	8005dca <_printf_float+0x1de>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	4652      	mov	r2, sl
 8005ea4:	4631      	mov	r1, r6
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	47b8      	blx	r7
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f43f aef9 	beq.w	8005ca2 <_printf_float+0xb6>
 8005eb0:	f109 0901 	add.w	r9, r9, #1
 8005eb4:	e7ee      	b.n	8005e94 <_printf_float+0x2a8>
 8005eb6:	bf00      	nop
 8005eb8:	7fefffff 	.word	0x7fefffff
 8005ebc:	080085be 	.word	0x080085be
 8005ec0:	080085c2 	.word	0x080085c2
 8005ec4:	080085c6 	.word	0x080085c6
 8005ec8:	080085ca 	.word	0x080085ca
 8005ecc:	080085ce 	.word	0x080085ce
 8005ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ed2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	bfa8      	it	ge
 8005ed8:	461a      	movge	r2, r3
 8005eda:	2a00      	cmp	r2, #0
 8005edc:	4691      	mov	r9, r2
 8005ede:	dc37      	bgt.n	8005f50 <_printf_float+0x364>
 8005ee0:	f04f 0b00 	mov.w	fp, #0
 8005ee4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ee8:	f104 021a 	add.w	r2, r4, #26
 8005eec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005ef0:	ebaa 0309 	sub.w	r3, sl, r9
 8005ef4:	455b      	cmp	r3, fp
 8005ef6:	dc33      	bgt.n	8005f60 <_printf_float+0x374>
 8005ef8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005efc:	429a      	cmp	r2, r3
 8005efe:	db3b      	blt.n	8005f78 <_printf_float+0x38c>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	07da      	lsls	r2, r3, #31
 8005f04:	d438      	bmi.n	8005f78 <_printf_float+0x38c>
 8005f06:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005f0a:	eba2 0903 	sub.w	r9, r2, r3
 8005f0e:	eba2 020a 	sub.w	r2, r2, sl
 8005f12:	4591      	cmp	r9, r2
 8005f14:	bfa8      	it	ge
 8005f16:	4691      	movge	r9, r2
 8005f18:	f1b9 0f00 	cmp.w	r9, #0
 8005f1c:	dc34      	bgt.n	8005f88 <_printf_float+0x39c>
 8005f1e:	f04f 0800 	mov.w	r8, #0
 8005f22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f26:	f104 0a1a 	add.w	sl, r4, #26
 8005f2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	eba3 0309 	sub.w	r3, r3, r9
 8005f34:	4543      	cmp	r3, r8
 8005f36:	f77f af7a 	ble.w	8005e2e <_printf_float+0x242>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	f43f aeac 	beq.w	8005ca2 <_printf_float+0xb6>
 8005f4a:	f108 0801 	add.w	r8, r8, #1
 8005f4e:	e7ec      	b.n	8005f2a <_printf_float+0x33e>
 8005f50:	4613      	mov	r3, r2
 8005f52:	4631      	mov	r1, r6
 8005f54:	4642      	mov	r2, r8
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d1c0      	bne.n	8005ee0 <_printf_float+0x2f4>
 8005f5e:	e6a0      	b.n	8005ca2 <_printf_float+0xb6>
 8005f60:	2301      	movs	r3, #1
 8005f62:	4631      	mov	r1, r6
 8005f64:	4628      	mov	r0, r5
 8005f66:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f68:	47b8      	blx	r7
 8005f6a:	3001      	adds	r0, #1
 8005f6c:	f43f ae99 	beq.w	8005ca2 <_printf_float+0xb6>
 8005f70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f72:	f10b 0b01 	add.w	fp, fp, #1
 8005f76:	e7b9      	b.n	8005eec <_printf_float+0x300>
 8005f78:	4631      	mov	r1, r6
 8005f7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f7e:	4628      	mov	r0, r5
 8005f80:	47b8      	blx	r7
 8005f82:	3001      	adds	r0, #1
 8005f84:	d1bf      	bne.n	8005f06 <_printf_float+0x31a>
 8005f86:	e68c      	b.n	8005ca2 <_printf_float+0xb6>
 8005f88:	464b      	mov	r3, r9
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	eb08 020a 	add.w	r2, r8, sl
 8005f92:	47b8      	blx	r7
 8005f94:	3001      	adds	r0, #1
 8005f96:	d1c2      	bne.n	8005f1e <_printf_float+0x332>
 8005f98:	e683      	b.n	8005ca2 <_printf_float+0xb6>
 8005f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f9c:	2a01      	cmp	r2, #1
 8005f9e:	dc01      	bgt.n	8005fa4 <_printf_float+0x3b8>
 8005fa0:	07db      	lsls	r3, r3, #31
 8005fa2:	d539      	bpl.n	8006018 <_printf_float+0x42c>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	4631      	mov	r1, r6
 8005faa:	4628      	mov	r0, r5
 8005fac:	47b8      	blx	r7
 8005fae:	3001      	adds	r0, #1
 8005fb0:	f43f ae77 	beq.w	8005ca2 <_printf_float+0xb6>
 8005fb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fb8:	4631      	mov	r1, r6
 8005fba:	4628      	mov	r0, r5
 8005fbc:	47b8      	blx	r7
 8005fbe:	3001      	adds	r0, #1
 8005fc0:	f43f ae6f 	beq.w	8005ca2 <_printf_float+0xb6>
 8005fc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fc8:	2200      	movs	r2, #0
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005fd0:	f7fa fcea 	bl	80009a8 <__aeabi_dcmpeq>
 8005fd4:	b9d8      	cbnz	r0, 800600e <_printf_float+0x422>
 8005fd6:	f109 33ff 	add.w	r3, r9, #4294967295
 8005fda:	f108 0201 	add.w	r2, r8, #1
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d10e      	bne.n	8006006 <_printf_float+0x41a>
 8005fe8:	e65b      	b.n	8005ca2 <_printf_float+0xb6>
 8005fea:	2301      	movs	r3, #1
 8005fec:	464a      	mov	r2, r9
 8005fee:	4631      	mov	r1, r6
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f ae54 	beq.w	8005ca2 <_printf_float+0xb6>
 8005ffa:	f108 0801 	add.w	r8, r8, #1
 8005ffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006000:	3b01      	subs	r3, #1
 8006002:	4543      	cmp	r3, r8
 8006004:	dcf1      	bgt.n	8005fea <_printf_float+0x3fe>
 8006006:	4653      	mov	r3, sl
 8006008:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800600c:	e6de      	b.n	8005dcc <_printf_float+0x1e0>
 800600e:	f04f 0800 	mov.w	r8, #0
 8006012:	f104 091a 	add.w	r9, r4, #26
 8006016:	e7f2      	b.n	8005ffe <_printf_float+0x412>
 8006018:	2301      	movs	r3, #1
 800601a:	4642      	mov	r2, r8
 800601c:	e7df      	b.n	8005fde <_printf_float+0x3f2>
 800601e:	2301      	movs	r3, #1
 8006020:	464a      	mov	r2, r9
 8006022:	4631      	mov	r1, r6
 8006024:	4628      	mov	r0, r5
 8006026:	47b8      	blx	r7
 8006028:	3001      	adds	r0, #1
 800602a:	f43f ae3a 	beq.w	8005ca2 <_printf_float+0xb6>
 800602e:	f108 0801 	add.w	r8, r8, #1
 8006032:	68e3      	ldr	r3, [r4, #12]
 8006034:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006036:	1a5b      	subs	r3, r3, r1
 8006038:	4543      	cmp	r3, r8
 800603a:	dcf0      	bgt.n	800601e <_printf_float+0x432>
 800603c:	e6fb      	b.n	8005e36 <_printf_float+0x24a>
 800603e:	f04f 0800 	mov.w	r8, #0
 8006042:	f104 0919 	add.w	r9, r4, #25
 8006046:	e7f4      	b.n	8006032 <_printf_float+0x446>

08006048 <_printf_common>:
 8006048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800604c:	4616      	mov	r6, r2
 800604e:	4699      	mov	r9, r3
 8006050:	688a      	ldr	r2, [r1, #8]
 8006052:	690b      	ldr	r3, [r1, #16]
 8006054:	4607      	mov	r7, r0
 8006056:	4293      	cmp	r3, r2
 8006058:	bfb8      	it	lt
 800605a:	4613      	movlt	r3, r2
 800605c:	6033      	str	r3, [r6, #0]
 800605e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006062:	460c      	mov	r4, r1
 8006064:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006068:	b10a      	cbz	r2, 800606e <_printf_common+0x26>
 800606a:	3301      	adds	r3, #1
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	0699      	lsls	r1, r3, #26
 8006072:	bf42      	ittt	mi
 8006074:	6833      	ldrmi	r3, [r6, #0]
 8006076:	3302      	addmi	r3, #2
 8006078:	6033      	strmi	r3, [r6, #0]
 800607a:	6825      	ldr	r5, [r4, #0]
 800607c:	f015 0506 	ands.w	r5, r5, #6
 8006080:	d106      	bne.n	8006090 <_printf_common+0x48>
 8006082:	f104 0a19 	add.w	sl, r4, #25
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	6832      	ldr	r2, [r6, #0]
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	42ab      	cmp	r3, r5
 800608e:	dc2b      	bgt.n	80060e8 <_printf_common+0xa0>
 8006090:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006094:	1e13      	subs	r3, r2, #0
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	bf18      	it	ne
 800609a:	2301      	movne	r3, #1
 800609c:	0692      	lsls	r2, r2, #26
 800609e:	d430      	bmi.n	8006102 <_printf_common+0xba>
 80060a0:	4649      	mov	r1, r9
 80060a2:	4638      	mov	r0, r7
 80060a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060a8:	47c0      	blx	r8
 80060aa:	3001      	adds	r0, #1
 80060ac:	d023      	beq.n	80060f6 <_printf_common+0xae>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	6922      	ldr	r2, [r4, #16]
 80060b2:	f003 0306 	and.w	r3, r3, #6
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	bf14      	ite	ne
 80060ba:	2500      	movne	r5, #0
 80060bc:	6833      	ldreq	r3, [r6, #0]
 80060be:	f04f 0600 	mov.w	r6, #0
 80060c2:	bf08      	it	eq
 80060c4:	68e5      	ldreq	r5, [r4, #12]
 80060c6:	f104 041a 	add.w	r4, r4, #26
 80060ca:	bf08      	it	eq
 80060cc:	1aed      	subeq	r5, r5, r3
 80060ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80060d2:	bf08      	it	eq
 80060d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060d8:	4293      	cmp	r3, r2
 80060da:	bfc4      	itt	gt
 80060dc:	1a9b      	subgt	r3, r3, r2
 80060de:	18ed      	addgt	r5, r5, r3
 80060e0:	42b5      	cmp	r5, r6
 80060e2:	d11a      	bne.n	800611a <_printf_common+0xd2>
 80060e4:	2000      	movs	r0, #0
 80060e6:	e008      	b.n	80060fa <_printf_common+0xb2>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4652      	mov	r2, sl
 80060ec:	4649      	mov	r1, r9
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c0      	blx	r8
 80060f2:	3001      	adds	r0, #1
 80060f4:	d103      	bne.n	80060fe <_printf_common+0xb6>
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fe:	3501      	adds	r5, #1
 8006100:	e7c1      	b.n	8006086 <_printf_common+0x3e>
 8006102:	2030      	movs	r0, #48	; 0x30
 8006104:	18e1      	adds	r1, r4, r3
 8006106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006110:	4422      	add	r2, r4
 8006112:	3302      	adds	r3, #2
 8006114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006118:	e7c2      	b.n	80060a0 <_printf_common+0x58>
 800611a:	2301      	movs	r3, #1
 800611c:	4622      	mov	r2, r4
 800611e:	4649      	mov	r1, r9
 8006120:	4638      	mov	r0, r7
 8006122:	47c0      	blx	r8
 8006124:	3001      	adds	r0, #1
 8006126:	d0e6      	beq.n	80060f6 <_printf_common+0xae>
 8006128:	3601      	adds	r6, #1
 800612a:	e7d9      	b.n	80060e0 <_printf_common+0x98>

0800612c <_printf_i>:
 800612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	7e0f      	ldrb	r7, [r1, #24]
 8006132:	4691      	mov	r9, r2
 8006134:	2f78      	cmp	r7, #120	; 0x78
 8006136:	4680      	mov	r8, r0
 8006138:	460c      	mov	r4, r1
 800613a:	469a      	mov	sl, r3
 800613c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800613e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006142:	d807      	bhi.n	8006154 <_printf_i+0x28>
 8006144:	2f62      	cmp	r7, #98	; 0x62
 8006146:	d80a      	bhi.n	800615e <_printf_i+0x32>
 8006148:	2f00      	cmp	r7, #0
 800614a:	f000 80d5 	beq.w	80062f8 <_printf_i+0x1cc>
 800614e:	2f58      	cmp	r7, #88	; 0x58
 8006150:	f000 80c1 	beq.w	80062d6 <_printf_i+0x1aa>
 8006154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800615c:	e03a      	b.n	80061d4 <_printf_i+0xa8>
 800615e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006162:	2b15      	cmp	r3, #21
 8006164:	d8f6      	bhi.n	8006154 <_printf_i+0x28>
 8006166:	a101      	add	r1, pc, #4	; (adr r1, 800616c <_printf_i+0x40>)
 8006168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800616c:	080061c5 	.word	0x080061c5
 8006170:	080061d9 	.word	0x080061d9
 8006174:	08006155 	.word	0x08006155
 8006178:	08006155 	.word	0x08006155
 800617c:	08006155 	.word	0x08006155
 8006180:	08006155 	.word	0x08006155
 8006184:	080061d9 	.word	0x080061d9
 8006188:	08006155 	.word	0x08006155
 800618c:	08006155 	.word	0x08006155
 8006190:	08006155 	.word	0x08006155
 8006194:	08006155 	.word	0x08006155
 8006198:	080062df 	.word	0x080062df
 800619c:	08006205 	.word	0x08006205
 80061a0:	08006299 	.word	0x08006299
 80061a4:	08006155 	.word	0x08006155
 80061a8:	08006155 	.word	0x08006155
 80061ac:	08006301 	.word	0x08006301
 80061b0:	08006155 	.word	0x08006155
 80061b4:	08006205 	.word	0x08006205
 80061b8:	08006155 	.word	0x08006155
 80061bc:	08006155 	.word	0x08006155
 80061c0:	080062a1 	.word	0x080062a1
 80061c4:	682b      	ldr	r3, [r5, #0]
 80061c6:	1d1a      	adds	r2, r3, #4
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	602a      	str	r2, [r5, #0]
 80061cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0a0      	b.n	800631a <_printf_i+0x1ee>
 80061d8:	6820      	ldr	r0, [r4, #0]
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	0607      	lsls	r7, r0, #24
 80061de:	f103 0104 	add.w	r1, r3, #4
 80061e2:	6029      	str	r1, [r5, #0]
 80061e4:	d501      	bpl.n	80061ea <_printf_i+0xbe>
 80061e6:	681e      	ldr	r6, [r3, #0]
 80061e8:	e003      	b.n	80061f2 <_printf_i+0xc6>
 80061ea:	0646      	lsls	r6, r0, #25
 80061ec:	d5fb      	bpl.n	80061e6 <_printf_i+0xba>
 80061ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	da03      	bge.n	80061fe <_printf_i+0xd2>
 80061f6:	232d      	movs	r3, #45	; 0x2d
 80061f8:	4276      	negs	r6, r6
 80061fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061fe:	230a      	movs	r3, #10
 8006200:	4859      	ldr	r0, [pc, #356]	; (8006368 <_printf_i+0x23c>)
 8006202:	e012      	b.n	800622a <_printf_i+0xfe>
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	6820      	ldr	r0, [r4, #0]
 8006208:	1d19      	adds	r1, r3, #4
 800620a:	6029      	str	r1, [r5, #0]
 800620c:	0605      	lsls	r5, r0, #24
 800620e:	d501      	bpl.n	8006214 <_printf_i+0xe8>
 8006210:	681e      	ldr	r6, [r3, #0]
 8006212:	e002      	b.n	800621a <_printf_i+0xee>
 8006214:	0641      	lsls	r1, r0, #25
 8006216:	d5fb      	bpl.n	8006210 <_printf_i+0xe4>
 8006218:	881e      	ldrh	r6, [r3, #0]
 800621a:	2f6f      	cmp	r7, #111	; 0x6f
 800621c:	bf0c      	ite	eq
 800621e:	2308      	moveq	r3, #8
 8006220:	230a      	movne	r3, #10
 8006222:	4851      	ldr	r0, [pc, #324]	; (8006368 <_printf_i+0x23c>)
 8006224:	2100      	movs	r1, #0
 8006226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800622a:	6865      	ldr	r5, [r4, #4]
 800622c:	2d00      	cmp	r5, #0
 800622e:	bfa8      	it	ge
 8006230:	6821      	ldrge	r1, [r4, #0]
 8006232:	60a5      	str	r5, [r4, #8]
 8006234:	bfa4      	itt	ge
 8006236:	f021 0104 	bicge.w	r1, r1, #4
 800623a:	6021      	strge	r1, [r4, #0]
 800623c:	b90e      	cbnz	r6, 8006242 <_printf_i+0x116>
 800623e:	2d00      	cmp	r5, #0
 8006240:	d04b      	beq.n	80062da <_printf_i+0x1ae>
 8006242:	4615      	mov	r5, r2
 8006244:	fbb6 f1f3 	udiv	r1, r6, r3
 8006248:	fb03 6711 	mls	r7, r3, r1, r6
 800624c:	5dc7      	ldrb	r7, [r0, r7]
 800624e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006252:	4637      	mov	r7, r6
 8006254:	42bb      	cmp	r3, r7
 8006256:	460e      	mov	r6, r1
 8006258:	d9f4      	bls.n	8006244 <_printf_i+0x118>
 800625a:	2b08      	cmp	r3, #8
 800625c:	d10b      	bne.n	8006276 <_printf_i+0x14a>
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	07de      	lsls	r6, r3, #31
 8006262:	d508      	bpl.n	8006276 <_printf_i+0x14a>
 8006264:	6923      	ldr	r3, [r4, #16]
 8006266:	6861      	ldr	r1, [r4, #4]
 8006268:	4299      	cmp	r1, r3
 800626a:	bfde      	ittt	le
 800626c:	2330      	movle	r3, #48	; 0x30
 800626e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006272:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006276:	1b52      	subs	r2, r2, r5
 8006278:	6122      	str	r2, [r4, #16]
 800627a:	464b      	mov	r3, r9
 800627c:	4621      	mov	r1, r4
 800627e:	4640      	mov	r0, r8
 8006280:	f8cd a000 	str.w	sl, [sp]
 8006284:	aa03      	add	r2, sp, #12
 8006286:	f7ff fedf 	bl	8006048 <_printf_common>
 800628a:	3001      	adds	r0, #1
 800628c:	d14a      	bne.n	8006324 <_printf_i+0x1f8>
 800628e:	f04f 30ff 	mov.w	r0, #4294967295
 8006292:	b004      	add	sp, #16
 8006294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	f043 0320 	orr.w	r3, r3, #32
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	2778      	movs	r7, #120	; 0x78
 80062a2:	4832      	ldr	r0, [pc, #200]	; (800636c <_printf_i+0x240>)
 80062a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	6829      	ldr	r1, [r5, #0]
 80062ac:	061f      	lsls	r7, r3, #24
 80062ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80062b2:	d402      	bmi.n	80062ba <_printf_i+0x18e>
 80062b4:	065f      	lsls	r7, r3, #25
 80062b6:	bf48      	it	mi
 80062b8:	b2b6      	uxthmi	r6, r6
 80062ba:	07df      	lsls	r7, r3, #31
 80062bc:	bf48      	it	mi
 80062be:	f043 0320 	orrmi.w	r3, r3, #32
 80062c2:	6029      	str	r1, [r5, #0]
 80062c4:	bf48      	it	mi
 80062c6:	6023      	strmi	r3, [r4, #0]
 80062c8:	b91e      	cbnz	r6, 80062d2 <_printf_i+0x1a6>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f023 0320 	bic.w	r3, r3, #32
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	2310      	movs	r3, #16
 80062d4:	e7a6      	b.n	8006224 <_printf_i+0xf8>
 80062d6:	4824      	ldr	r0, [pc, #144]	; (8006368 <_printf_i+0x23c>)
 80062d8:	e7e4      	b.n	80062a4 <_printf_i+0x178>
 80062da:	4615      	mov	r5, r2
 80062dc:	e7bd      	b.n	800625a <_printf_i+0x12e>
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	6826      	ldr	r6, [r4, #0]
 80062e2:	1d18      	adds	r0, r3, #4
 80062e4:	6961      	ldr	r1, [r4, #20]
 80062e6:	6028      	str	r0, [r5, #0]
 80062e8:	0635      	lsls	r5, r6, #24
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	d501      	bpl.n	80062f2 <_printf_i+0x1c6>
 80062ee:	6019      	str	r1, [r3, #0]
 80062f0:	e002      	b.n	80062f8 <_printf_i+0x1cc>
 80062f2:	0670      	lsls	r0, r6, #25
 80062f4:	d5fb      	bpl.n	80062ee <_printf_i+0x1c2>
 80062f6:	8019      	strh	r1, [r3, #0]
 80062f8:	2300      	movs	r3, #0
 80062fa:	4615      	mov	r5, r2
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	e7bc      	b.n	800627a <_printf_i+0x14e>
 8006300:	682b      	ldr	r3, [r5, #0]
 8006302:	2100      	movs	r1, #0
 8006304:	1d1a      	adds	r2, r3, #4
 8006306:	602a      	str	r2, [r5, #0]
 8006308:	681d      	ldr	r5, [r3, #0]
 800630a:	6862      	ldr	r2, [r4, #4]
 800630c:	4628      	mov	r0, r5
 800630e:	f000 fab6 	bl	800687e <memchr>
 8006312:	b108      	cbz	r0, 8006318 <_printf_i+0x1ec>
 8006314:	1b40      	subs	r0, r0, r5
 8006316:	6060      	str	r0, [r4, #4]
 8006318:	6863      	ldr	r3, [r4, #4]
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	2300      	movs	r3, #0
 800631e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006322:	e7aa      	b.n	800627a <_printf_i+0x14e>
 8006324:	462a      	mov	r2, r5
 8006326:	4649      	mov	r1, r9
 8006328:	4640      	mov	r0, r8
 800632a:	6923      	ldr	r3, [r4, #16]
 800632c:	47d0      	blx	sl
 800632e:	3001      	adds	r0, #1
 8006330:	d0ad      	beq.n	800628e <_printf_i+0x162>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	079b      	lsls	r3, r3, #30
 8006336:	d413      	bmi.n	8006360 <_printf_i+0x234>
 8006338:	68e0      	ldr	r0, [r4, #12]
 800633a:	9b03      	ldr	r3, [sp, #12]
 800633c:	4298      	cmp	r0, r3
 800633e:	bfb8      	it	lt
 8006340:	4618      	movlt	r0, r3
 8006342:	e7a6      	b.n	8006292 <_printf_i+0x166>
 8006344:	2301      	movs	r3, #1
 8006346:	4632      	mov	r2, r6
 8006348:	4649      	mov	r1, r9
 800634a:	4640      	mov	r0, r8
 800634c:	47d0      	blx	sl
 800634e:	3001      	adds	r0, #1
 8006350:	d09d      	beq.n	800628e <_printf_i+0x162>
 8006352:	3501      	adds	r5, #1
 8006354:	68e3      	ldr	r3, [r4, #12]
 8006356:	9903      	ldr	r1, [sp, #12]
 8006358:	1a5b      	subs	r3, r3, r1
 800635a:	42ab      	cmp	r3, r5
 800635c:	dcf2      	bgt.n	8006344 <_printf_i+0x218>
 800635e:	e7eb      	b.n	8006338 <_printf_i+0x20c>
 8006360:	2500      	movs	r5, #0
 8006362:	f104 0619 	add.w	r6, r4, #25
 8006366:	e7f5      	b.n	8006354 <_printf_i+0x228>
 8006368:	080085d0 	.word	0x080085d0
 800636c:	080085e1 	.word	0x080085e1

08006370 <std>:
 8006370:	2300      	movs	r3, #0
 8006372:	b510      	push	{r4, lr}
 8006374:	4604      	mov	r4, r0
 8006376:	e9c0 3300 	strd	r3, r3, [r0]
 800637a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800637e:	6083      	str	r3, [r0, #8]
 8006380:	8181      	strh	r1, [r0, #12]
 8006382:	6643      	str	r3, [r0, #100]	; 0x64
 8006384:	81c2      	strh	r2, [r0, #14]
 8006386:	6183      	str	r3, [r0, #24]
 8006388:	4619      	mov	r1, r3
 800638a:	2208      	movs	r2, #8
 800638c:	305c      	adds	r0, #92	; 0x5c
 800638e:	f000 f9f7 	bl	8006780 <memset>
 8006392:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <std+0x58>)
 8006394:	6224      	str	r4, [r4, #32]
 8006396:	6263      	str	r3, [r4, #36]	; 0x24
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <std+0x5c>)
 800639a:	62a3      	str	r3, [r4, #40]	; 0x28
 800639c:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <std+0x60>)
 800639e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063a0:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <std+0x64>)
 80063a2:	6323      	str	r3, [r4, #48]	; 0x30
 80063a4:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <std+0x68>)
 80063a6:	429c      	cmp	r4, r3
 80063a8:	d006      	beq.n	80063b8 <std+0x48>
 80063aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80063ae:	4294      	cmp	r4, r2
 80063b0:	d002      	beq.n	80063b8 <std+0x48>
 80063b2:	33d0      	adds	r3, #208	; 0xd0
 80063b4:	429c      	cmp	r4, r3
 80063b6:	d105      	bne.n	80063c4 <std+0x54>
 80063b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80063bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c0:	f000 ba5a 	b.w	8006878 <__retarget_lock_init_recursive>
 80063c4:	bd10      	pop	{r4, pc}
 80063c6:	bf00      	nop
 80063c8:	080065d1 	.word	0x080065d1
 80063cc:	080065f3 	.word	0x080065f3
 80063d0:	0800662b 	.word	0x0800662b
 80063d4:	0800664f 	.word	0x0800664f
 80063d8:	20000404 	.word	0x20000404

080063dc <stdio_exit_handler>:
 80063dc:	4a02      	ldr	r2, [pc, #8]	; (80063e8 <stdio_exit_handler+0xc>)
 80063de:	4903      	ldr	r1, [pc, #12]	; (80063ec <stdio_exit_handler+0x10>)
 80063e0:	4803      	ldr	r0, [pc, #12]	; (80063f0 <stdio_exit_handler+0x14>)
 80063e2:	f000 b869 	b.w	80064b8 <_fwalk_sglue>
 80063e6:	bf00      	nop
 80063e8:	2000000c 	.word	0x2000000c
 80063ec:	080081e9 	.word	0x080081e9
 80063f0:	20000018 	.word	0x20000018

080063f4 <cleanup_stdio>:
 80063f4:	6841      	ldr	r1, [r0, #4]
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <cleanup_stdio+0x34>)
 80063f8:	b510      	push	{r4, lr}
 80063fa:	4299      	cmp	r1, r3
 80063fc:	4604      	mov	r4, r0
 80063fe:	d001      	beq.n	8006404 <cleanup_stdio+0x10>
 8006400:	f001 fef2 	bl	80081e8 <_fflush_r>
 8006404:	68a1      	ldr	r1, [r4, #8]
 8006406:	4b09      	ldr	r3, [pc, #36]	; (800642c <cleanup_stdio+0x38>)
 8006408:	4299      	cmp	r1, r3
 800640a:	d002      	beq.n	8006412 <cleanup_stdio+0x1e>
 800640c:	4620      	mov	r0, r4
 800640e:	f001 feeb 	bl	80081e8 <_fflush_r>
 8006412:	68e1      	ldr	r1, [r4, #12]
 8006414:	4b06      	ldr	r3, [pc, #24]	; (8006430 <cleanup_stdio+0x3c>)
 8006416:	4299      	cmp	r1, r3
 8006418:	d004      	beq.n	8006424 <cleanup_stdio+0x30>
 800641a:	4620      	mov	r0, r4
 800641c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006420:	f001 bee2 	b.w	80081e8 <_fflush_r>
 8006424:	bd10      	pop	{r4, pc}
 8006426:	bf00      	nop
 8006428:	20000404 	.word	0x20000404
 800642c:	2000046c 	.word	0x2000046c
 8006430:	200004d4 	.word	0x200004d4

08006434 <global_stdio_init.part.0>:
 8006434:	b510      	push	{r4, lr}
 8006436:	4b0b      	ldr	r3, [pc, #44]	; (8006464 <global_stdio_init.part.0+0x30>)
 8006438:	4c0b      	ldr	r4, [pc, #44]	; (8006468 <global_stdio_init.part.0+0x34>)
 800643a:	4a0c      	ldr	r2, [pc, #48]	; (800646c <global_stdio_init.part.0+0x38>)
 800643c:	4620      	mov	r0, r4
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	2104      	movs	r1, #4
 8006442:	2200      	movs	r2, #0
 8006444:	f7ff ff94 	bl	8006370 <std>
 8006448:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800644c:	2201      	movs	r2, #1
 800644e:	2109      	movs	r1, #9
 8006450:	f7ff ff8e 	bl	8006370 <std>
 8006454:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006458:	2202      	movs	r2, #2
 800645a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800645e:	2112      	movs	r1, #18
 8006460:	f7ff bf86 	b.w	8006370 <std>
 8006464:	2000053c 	.word	0x2000053c
 8006468:	20000404 	.word	0x20000404
 800646c:	080063dd 	.word	0x080063dd

08006470 <__sfp_lock_acquire>:
 8006470:	4801      	ldr	r0, [pc, #4]	; (8006478 <__sfp_lock_acquire+0x8>)
 8006472:	f000 ba02 	b.w	800687a <__retarget_lock_acquire_recursive>
 8006476:	bf00      	nop
 8006478:	20000545 	.word	0x20000545

0800647c <__sfp_lock_release>:
 800647c:	4801      	ldr	r0, [pc, #4]	; (8006484 <__sfp_lock_release+0x8>)
 800647e:	f000 b9fd 	b.w	800687c <__retarget_lock_release_recursive>
 8006482:	bf00      	nop
 8006484:	20000545 	.word	0x20000545

08006488 <__sinit>:
 8006488:	b510      	push	{r4, lr}
 800648a:	4604      	mov	r4, r0
 800648c:	f7ff fff0 	bl	8006470 <__sfp_lock_acquire>
 8006490:	6a23      	ldr	r3, [r4, #32]
 8006492:	b11b      	cbz	r3, 800649c <__sinit+0x14>
 8006494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006498:	f7ff bff0 	b.w	800647c <__sfp_lock_release>
 800649c:	4b04      	ldr	r3, [pc, #16]	; (80064b0 <__sinit+0x28>)
 800649e:	6223      	str	r3, [r4, #32]
 80064a0:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <__sinit+0x2c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f5      	bne.n	8006494 <__sinit+0xc>
 80064a8:	f7ff ffc4 	bl	8006434 <global_stdio_init.part.0>
 80064ac:	e7f2      	b.n	8006494 <__sinit+0xc>
 80064ae:	bf00      	nop
 80064b0:	080063f5 	.word	0x080063f5
 80064b4:	2000053c 	.word	0x2000053c

080064b8 <_fwalk_sglue>:
 80064b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064bc:	4607      	mov	r7, r0
 80064be:	4688      	mov	r8, r1
 80064c0:	4614      	mov	r4, r2
 80064c2:	2600      	movs	r6, #0
 80064c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064c8:	f1b9 0901 	subs.w	r9, r9, #1
 80064cc:	d505      	bpl.n	80064da <_fwalk_sglue+0x22>
 80064ce:	6824      	ldr	r4, [r4, #0]
 80064d0:	2c00      	cmp	r4, #0
 80064d2:	d1f7      	bne.n	80064c4 <_fwalk_sglue+0xc>
 80064d4:	4630      	mov	r0, r6
 80064d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064da:	89ab      	ldrh	r3, [r5, #12]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d907      	bls.n	80064f0 <_fwalk_sglue+0x38>
 80064e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064e4:	3301      	adds	r3, #1
 80064e6:	d003      	beq.n	80064f0 <_fwalk_sglue+0x38>
 80064e8:	4629      	mov	r1, r5
 80064ea:	4638      	mov	r0, r7
 80064ec:	47c0      	blx	r8
 80064ee:	4306      	orrs	r6, r0
 80064f0:	3568      	adds	r5, #104	; 0x68
 80064f2:	e7e9      	b.n	80064c8 <_fwalk_sglue+0x10>

080064f4 <iprintf>:
 80064f4:	b40f      	push	{r0, r1, r2, r3}
 80064f6:	b507      	push	{r0, r1, r2, lr}
 80064f8:	4906      	ldr	r1, [pc, #24]	; (8006514 <iprintf+0x20>)
 80064fa:	ab04      	add	r3, sp, #16
 80064fc:	6808      	ldr	r0, [r1, #0]
 80064fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006502:	6881      	ldr	r1, [r0, #8]
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	f001 fcd3 	bl	8007eb0 <_vfiprintf_r>
 800650a:	b003      	add	sp, #12
 800650c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006510:	b004      	add	sp, #16
 8006512:	4770      	bx	lr
 8006514:	20000064 	.word	0x20000064

08006518 <_puts_r>:
 8006518:	6a03      	ldr	r3, [r0, #32]
 800651a:	b570      	push	{r4, r5, r6, lr}
 800651c:	4605      	mov	r5, r0
 800651e:	460e      	mov	r6, r1
 8006520:	6884      	ldr	r4, [r0, #8]
 8006522:	b90b      	cbnz	r3, 8006528 <_puts_r+0x10>
 8006524:	f7ff ffb0 	bl	8006488 <__sinit>
 8006528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800652a:	07db      	lsls	r3, r3, #31
 800652c:	d405      	bmi.n	800653a <_puts_r+0x22>
 800652e:	89a3      	ldrh	r3, [r4, #12]
 8006530:	0598      	lsls	r0, r3, #22
 8006532:	d402      	bmi.n	800653a <_puts_r+0x22>
 8006534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006536:	f000 f9a0 	bl	800687a <__retarget_lock_acquire_recursive>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	0719      	lsls	r1, r3, #28
 800653e:	d513      	bpl.n	8006568 <_puts_r+0x50>
 8006540:	6923      	ldr	r3, [r4, #16]
 8006542:	b18b      	cbz	r3, 8006568 <_puts_r+0x50>
 8006544:	3e01      	subs	r6, #1
 8006546:	68a3      	ldr	r3, [r4, #8]
 8006548:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800654c:	3b01      	subs	r3, #1
 800654e:	60a3      	str	r3, [r4, #8]
 8006550:	b9e9      	cbnz	r1, 800658e <_puts_r+0x76>
 8006552:	2b00      	cmp	r3, #0
 8006554:	da2e      	bge.n	80065b4 <_puts_r+0x9c>
 8006556:	4622      	mov	r2, r4
 8006558:	210a      	movs	r1, #10
 800655a:	4628      	mov	r0, r5
 800655c:	f000 f87b 	bl	8006656 <__swbuf_r>
 8006560:	3001      	adds	r0, #1
 8006562:	d007      	beq.n	8006574 <_puts_r+0x5c>
 8006564:	250a      	movs	r5, #10
 8006566:	e007      	b.n	8006578 <_puts_r+0x60>
 8006568:	4621      	mov	r1, r4
 800656a:	4628      	mov	r0, r5
 800656c:	f000 f8b0 	bl	80066d0 <__swsetup_r>
 8006570:	2800      	cmp	r0, #0
 8006572:	d0e7      	beq.n	8006544 <_puts_r+0x2c>
 8006574:	f04f 35ff 	mov.w	r5, #4294967295
 8006578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800657a:	07da      	lsls	r2, r3, #31
 800657c:	d405      	bmi.n	800658a <_puts_r+0x72>
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	059b      	lsls	r3, r3, #22
 8006582:	d402      	bmi.n	800658a <_puts_r+0x72>
 8006584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006586:	f000 f979 	bl	800687c <__retarget_lock_release_recursive>
 800658a:	4628      	mov	r0, r5
 800658c:	bd70      	pop	{r4, r5, r6, pc}
 800658e:	2b00      	cmp	r3, #0
 8006590:	da04      	bge.n	800659c <_puts_r+0x84>
 8006592:	69a2      	ldr	r2, [r4, #24]
 8006594:	429a      	cmp	r2, r3
 8006596:	dc06      	bgt.n	80065a6 <_puts_r+0x8e>
 8006598:	290a      	cmp	r1, #10
 800659a:	d004      	beq.n	80065a6 <_puts_r+0x8e>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	1c5a      	adds	r2, r3, #1
 80065a0:	6022      	str	r2, [r4, #0]
 80065a2:	7019      	strb	r1, [r3, #0]
 80065a4:	e7cf      	b.n	8006546 <_puts_r+0x2e>
 80065a6:	4622      	mov	r2, r4
 80065a8:	4628      	mov	r0, r5
 80065aa:	f000 f854 	bl	8006656 <__swbuf_r>
 80065ae:	3001      	adds	r0, #1
 80065b0:	d1c9      	bne.n	8006546 <_puts_r+0x2e>
 80065b2:	e7df      	b.n	8006574 <_puts_r+0x5c>
 80065b4:	250a      	movs	r5, #10
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	6022      	str	r2, [r4, #0]
 80065bc:	701d      	strb	r5, [r3, #0]
 80065be:	e7db      	b.n	8006578 <_puts_r+0x60>

080065c0 <puts>:
 80065c0:	4b02      	ldr	r3, [pc, #8]	; (80065cc <puts+0xc>)
 80065c2:	4601      	mov	r1, r0
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	f7ff bfa7 	b.w	8006518 <_puts_r>
 80065ca:	bf00      	nop
 80065cc:	20000064 	.word	0x20000064

080065d0 <__sread>:
 80065d0:	b510      	push	{r4, lr}
 80065d2:	460c      	mov	r4, r1
 80065d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d8:	f000 f900 	bl	80067dc <_read_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	bfab      	itete	ge
 80065e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065e2:	89a3      	ldrhlt	r3, [r4, #12]
 80065e4:	181b      	addge	r3, r3, r0
 80065e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065ea:	bfac      	ite	ge
 80065ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80065ee:	81a3      	strhlt	r3, [r4, #12]
 80065f0:	bd10      	pop	{r4, pc}

080065f2 <__swrite>:
 80065f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f6:	461f      	mov	r7, r3
 80065f8:	898b      	ldrh	r3, [r1, #12]
 80065fa:	4605      	mov	r5, r0
 80065fc:	05db      	lsls	r3, r3, #23
 80065fe:	460c      	mov	r4, r1
 8006600:	4616      	mov	r6, r2
 8006602:	d505      	bpl.n	8006610 <__swrite+0x1e>
 8006604:	2302      	movs	r3, #2
 8006606:	2200      	movs	r2, #0
 8006608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800660c:	f000 f8d4 	bl	80067b8 <_lseek_r>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	4632      	mov	r2, r6
 8006614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006618:	81a3      	strh	r3, [r4, #12]
 800661a:	4628      	mov	r0, r5
 800661c:	463b      	mov	r3, r7
 800661e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006626:	f000 b8eb 	b.w	8006800 <_write_r>

0800662a <__sseek>:
 800662a:	b510      	push	{r4, lr}
 800662c:	460c      	mov	r4, r1
 800662e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006632:	f000 f8c1 	bl	80067b8 <_lseek_r>
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	bf15      	itete	ne
 800663c:	6560      	strne	r0, [r4, #84]	; 0x54
 800663e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006646:	81a3      	strheq	r3, [r4, #12]
 8006648:	bf18      	it	ne
 800664a:	81a3      	strhne	r3, [r4, #12]
 800664c:	bd10      	pop	{r4, pc}

0800664e <__sclose>:
 800664e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006652:	f000 b8a1 	b.w	8006798 <_close_r>

08006656 <__swbuf_r>:
 8006656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006658:	460e      	mov	r6, r1
 800665a:	4614      	mov	r4, r2
 800665c:	4605      	mov	r5, r0
 800665e:	b118      	cbz	r0, 8006668 <__swbuf_r+0x12>
 8006660:	6a03      	ldr	r3, [r0, #32]
 8006662:	b90b      	cbnz	r3, 8006668 <__swbuf_r+0x12>
 8006664:	f7ff ff10 	bl	8006488 <__sinit>
 8006668:	69a3      	ldr	r3, [r4, #24]
 800666a:	60a3      	str	r3, [r4, #8]
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	071a      	lsls	r2, r3, #28
 8006670:	d525      	bpl.n	80066be <__swbuf_r+0x68>
 8006672:	6923      	ldr	r3, [r4, #16]
 8006674:	b31b      	cbz	r3, 80066be <__swbuf_r+0x68>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	6922      	ldr	r2, [r4, #16]
 800667a:	b2f6      	uxtb	r6, r6
 800667c:	1a98      	subs	r0, r3, r2
 800667e:	6963      	ldr	r3, [r4, #20]
 8006680:	4637      	mov	r7, r6
 8006682:	4283      	cmp	r3, r0
 8006684:	dc04      	bgt.n	8006690 <__swbuf_r+0x3a>
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f001 fdad 	bl	80081e8 <_fflush_r>
 800668e:	b9e0      	cbnz	r0, 80066ca <__swbuf_r+0x74>
 8006690:	68a3      	ldr	r3, [r4, #8]
 8006692:	3b01      	subs	r3, #1
 8006694:	60a3      	str	r3, [r4, #8]
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	6022      	str	r2, [r4, #0]
 800669c:	701e      	strb	r6, [r3, #0]
 800669e:	6962      	ldr	r2, [r4, #20]
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d004      	beq.n	80066b0 <__swbuf_r+0x5a>
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	07db      	lsls	r3, r3, #31
 80066aa:	d506      	bpl.n	80066ba <__swbuf_r+0x64>
 80066ac:	2e0a      	cmp	r6, #10
 80066ae:	d104      	bne.n	80066ba <__swbuf_r+0x64>
 80066b0:	4621      	mov	r1, r4
 80066b2:	4628      	mov	r0, r5
 80066b4:	f001 fd98 	bl	80081e8 <_fflush_r>
 80066b8:	b938      	cbnz	r0, 80066ca <__swbuf_r+0x74>
 80066ba:	4638      	mov	r0, r7
 80066bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066be:	4621      	mov	r1, r4
 80066c0:	4628      	mov	r0, r5
 80066c2:	f000 f805 	bl	80066d0 <__swsetup_r>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d0d5      	beq.n	8006676 <__swbuf_r+0x20>
 80066ca:	f04f 37ff 	mov.w	r7, #4294967295
 80066ce:	e7f4      	b.n	80066ba <__swbuf_r+0x64>

080066d0 <__swsetup_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	4b2a      	ldr	r3, [pc, #168]	; (800677c <__swsetup_r+0xac>)
 80066d4:	4605      	mov	r5, r0
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	460c      	mov	r4, r1
 80066da:	b118      	cbz	r0, 80066e4 <__swsetup_r+0x14>
 80066dc:	6a03      	ldr	r3, [r0, #32]
 80066de:	b90b      	cbnz	r3, 80066e4 <__swsetup_r+0x14>
 80066e0:	f7ff fed2 	bl	8006488 <__sinit>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ea:	0718      	lsls	r0, r3, #28
 80066ec:	d422      	bmi.n	8006734 <__swsetup_r+0x64>
 80066ee:	06d9      	lsls	r1, r3, #27
 80066f0:	d407      	bmi.n	8006702 <__swsetup_r+0x32>
 80066f2:	2309      	movs	r3, #9
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066fa:	f04f 30ff 	mov.w	r0, #4294967295
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	e034      	b.n	800676c <__swsetup_r+0x9c>
 8006702:	0758      	lsls	r0, r3, #29
 8006704:	d512      	bpl.n	800672c <__swsetup_r+0x5c>
 8006706:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006708:	b141      	cbz	r1, 800671c <__swsetup_r+0x4c>
 800670a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800670e:	4299      	cmp	r1, r3
 8006710:	d002      	beq.n	8006718 <__swsetup_r+0x48>
 8006712:	4628      	mov	r0, r5
 8006714:	f000 ff30 	bl	8007578 <_free_r>
 8006718:	2300      	movs	r3, #0
 800671a:	6363      	str	r3, [r4, #52]	; 0x34
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006722:	81a3      	strh	r3, [r4, #12]
 8006724:	2300      	movs	r3, #0
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	89a3      	ldrh	r3, [r4, #12]
 800672e:	f043 0308 	orr.w	r3, r3, #8
 8006732:	81a3      	strh	r3, [r4, #12]
 8006734:	6923      	ldr	r3, [r4, #16]
 8006736:	b94b      	cbnz	r3, 800674c <__swsetup_r+0x7c>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800673e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006742:	d003      	beq.n	800674c <__swsetup_r+0x7c>
 8006744:	4621      	mov	r1, r4
 8006746:	4628      	mov	r0, r5
 8006748:	f001 fd9b 	bl	8008282 <__smakebuf_r>
 800674c:	89a0      	ldrh	r0, [r4, #12]
 800674e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006752:	f010 0301 	ands.w	r3, r0, #1
 8006756:	d00a      	beq.n	800676e <__swsetup_r+0x9e>
 8006758:	2300      	movs	r3, #0
 800675a:	60a3      	str	r3, [r4, #8]
 800675c:	6963      	ldr	r3, [r4, #20]
 800675e:	425b      	negs	r3, r3
 8006760:	61a3      	str	r3, [r4, #24]
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	b943      	cbnz	r3, 8006778 <__swsetup_r+0xa8>
 8006766:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800676a:	d1c4      	bne.n	80066f6 <__swsetup_r+0x26>
 800676c:	bd38      	pop	{r3, r4, r5, pc}
 800676e:	0781      	lsls	r1, r0, #30
 8006770:	bf58      	it	pl
 8006772:	6963      	ldrpl	r3, [r4, #20]
 8006774:	60a3      	str	r3, [r4, #8]
 8006776:	e7f4      	b.n	8006762 <__swsetup_r+0x92>
 8006778:	2000      	movs	r0, #0
 800677a:	e7f7      	b.n	800676c <__swsetup_r+0x9c>
 800677c:	20000064 	.word	0x20000064

08006780 <memset>:
 8006780:	4603      	mov	r3, r0
 8006782:	4402      	add	r2, r0
 8006784:	4293      	cmp	r3, r2
 8006786:	d100      	bne.n	800678a <memset+0xa>
 8006788:	4770      	bx	lr
 800678a:	f803 1b01 	strb.w	r1, [r3], #1
 800678e:	e7f9      	b.n	8006784 <memset+0x4>

08006790 <_localeconv_r>:
 8006790:	4800      	ldr	r0, [pc, #0]	; (8006794 <_localeconv_r+0x4>)
 8006792:	4770      	bx	lr
 8006794:	20000158 	.word	0x20000158

08006798 <_close_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	2300      	movs	r3, #0
 800679c:	4d05      	ldr	r5, [pc, #20]	; (80067b4 <_close_r+0x1c>)
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	f7fb f934 	bl	8001a10 <_close>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_close_r+0x1a>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_close_r+0x1a>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	20000540 	.word	0x20000540

080067b8 <_lseek_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4604      	mov	r4, r0
 80067bc:	4608      	mov	r0, r1
 80067be:	4611      	mov	r1, r2
 80067c0:	2200      	movs	r2, #0
 80067c2:	4d05      	ldr	r5, [pc, #20]	; (80067d8 <_lseek_r+0x20>)
 80067c4:	602a      	str	r2, [r5, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fb f946 	bl	8001a58 <_lseek>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_lseek_r+0x1e>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_lseek_r+0x1e>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	20000540 	.word	0x20000540

080067dc <_read_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4604      	mov	r4, r0
 80067e0:	4608      	mov	r0, r1
 80067e2:	4611      	mov	r1, r2
 80067e4:	2200      	movs	r2, #0
 80067e6:	4d05      	ldr	r5, [pc, #20]	; (80067fc <_read_r+0x20>)
 80067e8:	602a      	str	r2, [r5, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	f7fb f8f3 	bl	80019d6 <_read>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_read_r+0x1e>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_read_r+0x1e>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	20000540 	.word	0x20000540

08006800 <_write_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4604      	mov	r4, r0
 8006804:	4608      	mov	r0, r1
 8006806:	4611      	mov	r1, r2
 8006808:	2200      	movs	r2, #0
 800680a:	4d05      	ldr	r5, [pc, #20]	; (8006820 <_write_r+0x20>)
 800680c:	602a      	str	r2, [r5, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f7fb f8ac 	bl	800196c <_write>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_write_r+0x1e>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	b103      	cbz	r3, 800681e <_write_r+0x1e>
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	20000540 	.word	0x20000540

08006824 <__errno>:
 8006824:	4b01      	ldr	r3, [pc, #4]	; (800682c <__errno+0x8>)
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	20000064 	.word	0x20000064

08006830 <__libc_init_array>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	2600      	movs	r6, #0
 8006834:	4d0c      	ldr	r5, [pc, #48]	; (8006868 <__libc_init_array+0x38>)
 8006836:	4c0d      	ldr	r4, [pc, #52]	; (800686c <__libc_init_array+0x3c>)
 8006838:	1b64      	subs	r4, r4, r5
 800683a:	10a4      	asrs	r4, r4, #2
 800683c:	42a6      	cmp	r6, r4
 800683e:	d109      	bne.n	8006854 <__libc_init_array+0x24>
 8006840:	f001 fe4c 	bl	80084dc <_init>
 8006844:	2600      	movs	r6, #0
 8006846:	4d0a      	ldr	r5, [pc, #40]	; (8006870 <__libc_init_array+0x40>)
 8006848:	4c0a      	ldr	r4, [pc, #40]	; (8006874 <__libc_init_array+0x44>)
 800684a:	1b64      	subs	r4, r4, r5
 800684c:	10a4      	asrs	r4, r4, #2
 800684e:	42a6      	cmp	r6, r4
 8006850:	d105      	bne.n	800685e <__libc_init_array+0x2e>
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	f855 3b04 	ldr.w	r3, [r5], #4
 8006858:	4798      	blx	r3
 800685a:	3601      	adds	r6, #1
 800685c:	e7ee      	b.n	800683c <__libc_init_array+0xc>
 800685e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006862:	4798      	blx	r3
 8006864:	3601      	adds	r6, #1
 8006866:	e7f2      	b.n	800684e <__libc_init_array+0x1e>
 8006868:	0800892c 	.word	0x0800892c
 800686c:	0800892c 	.word	0x0800892c
 8006870:	0800892c 	.word	0x0800892c
 8006874:	08008930 	.word	0x08008930

08006878 <__retarget_lock_init_recursive>:
 8006878:	4770      	bx	lr

0800687a <__retarget_lock_acquire_recursive>:
 800687a:	4770      	bx	lr

0800687c <__retarget_lock_release_recursive>:
 800687c:	4770      	bx	lr

0800687e <memchr>:
 800687e:	4603      	mov	r3, r0
 8006880:	b510      	push	{r4, lr}
 8006882:	b2c9      	uxtb	r1, r1
 8006884:	4402      	add	r2, r0
 8006886:	4293      	cmp	r3, r2
 8006888:	4618      	mov	r0, r3
 800688a:	d101      	bne.n	8006890 <memchr+0x12>
 800688c:	2000      	movs	r0, #0
 800688e:	e003      	b.n	8006898 <memchr+0x1a>
 8006890:	7804      	ldrb	r4, [r0, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	428c      	cmp	r4, r1
 8006896:	d1f6      	bne.n	8006886 <memchr+0x8>
 8006898:	bd10      	pop	{r4, pc}

0800689a <quorem>:
 800689a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800689e:	6903      	ldr	r3, [r0, #16]
 80068a0:	690c      	ldr	r4, [r1, #16]
 80068a2:	4607      	mov	r7, r0
 80068a4:	42a3      	cmp	r3, r4
 80068a6:	db7f      	blt.n	80069a8 <quorem+0x10e>
 80068a8:	3c01      	subs	r4, #1
 80068aa:	f100 0514 	add.w	r5, r0, #20
 80068ae:	f101 0814 	add.w	r8, r1, #20
 80068b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068c0:	3301      	adds	r3, #1
 80068c2:	429a      	cmp	r2, r3
 80068c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80068c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068d0:	d331      	bcc.n	8006936 <quorem+0x9c>
 80068d2:	f04f 0e00 	mov.w	lr, #0
 80068d6:	4640      	mov	r0, r8
 80068d8:	46ac      	mov	ip, r5
 80068da:	46f2      	mov	sl, lr
 80068dc:	f850 2b04 	ldr.w	r2, [r0], #4
 80068e0:	b293      	uxth	r3, r2
 80068e2:	fb06 e303 	mla	r3, r6, r3, lr
 80068e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068ea:	0c1a      	lsrs	r2, r3, #16
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	fb06 220e 	mla	r2, r6, lr, r2
 80068f2:	ebaa 0303 	sub.w	r3, sl, r3
 80068f6:	f8dc a000 	ldr.w	sl, [ip]
 80068fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068fe:	fa1f fa8a 	uxth.w	sl, sl
 8006902:	4453      	add	r3, sl
 8006904:	f8dc a000 	ldr.w	sl, [ip]
 8006908:	b292      	uxth	r2, r2
 800690a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800690e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006912:	b29b      	uxth	r3, r3
 8006914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006918:	4581      	cmp	r9, r0
 800691a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800691e:	f84c 3b04 	str.w	r3, [ip], #4
 8006922:	d2db      	bcs.n	80068dc <quorem+0x42>
 8006924:	f855 300b 	ldr.w	r3, [r5, fp]
 8006928:	b92b      	cbnz	r3, 8006936 <quorem+0x9c>
 800692a:	9b01      	ldr	r3, [sp, #4]
 800692c:	3b04      	subs	r3, #4
 800692e:	429d      	cmp	r5, r3
 8006930:	461a      	mov	r2, r3
 8006932:	d32d      	bcc.n	8006990 <quorem+0xf6>
 8006934:	613c      	str	r4, [r7, #16]
 8006936:	4638      	mov	r0, r7
 8006938:	f001 f994 	bl	8007c64 <__mcmp>
 800693c:	2800      	cmp	r0, #0
 800693e:	db23      	blt.n	8006988 <quorem+0xee>
 8006940:	4629      	mov	r1, r5
 8006942:	2000      	movs	r0, #0
 8006944:	3601      	adds	r6, #1
 8006946:	f858 2b04 	ldr.w	r2, [r8], #4
 800694a:	f8d1 c000 	ldr.w	ip, [r1]
 800694e:	b293      	uxth	r3, r2
 8006950:	1ac3      	subs	r3, r0, r3
 8006952:	0c12      	lsrs	r2, r2, #16
 8006954:	fa1f f08c 	uxth.w	r0, ip
 8006958:	4403      	add	r3, r0
 800695a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800695e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006962:	b29b      	uxth	r3, r3
 8006964:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006968:	45c1      	cmp	r9, r8
 800696a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800696e:	f841 3b04 	str.w	r3, [r1], #4
 8006972:	d2e8      	bcs.n	8006946 <quorem+0xac>
 8006974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006978:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800697c:	b922      	cbnz	r2, 8006988 <quorem+0xee>
 800697e:	3b04      	subs	r3, #4
 8006980:	429d      	cmp	r5, r3
 8006982:	461a      	mov	r2, r3
 8006984:	d30a      	bcc.n	800699c <quorem+0x102>
 8006986:	613c      	str	r4, [r7, #16]
 8006988:	4630      	mov	r0, r6
 800698a:	b003      	add	sp, #12
 800698c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	3b04      	subs	r3, #4
 8006994:	2a00      	cmp	r2, #0
 8006996:	d1cd      	bne.n	8006934 <quorem+0x9a>
 8006998:	3c01      	subs	r4, #1
 800699a:	e7c8      	b.n	800692e <quorem+0x94>
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	3b04      	subs	r3, #4
 80069a0:	2a00      	cmp	r2, #0
 80069a2:	d1f0      	bne.n	8006986 <quorem+0xec>
 80069a4:	3c01      	subs	r4, #1
 80069a6:	e7eb      	b.n	8006980 <quorem+0xe6>
 80069a8:	2000      	movs	r0, #0
 80069aa:	e7ee      	b.n	800698a <quorem+0xf0>
 80069ac:	0000      	movs	r0, r0
	...

080069b0 <_dtoa_r>:
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	4616      	mov	r6, r2
 80069b6:	461f      	mov	r7, r3
 80069b8:	69c4      	ldr	r4, [r0, #28]
 80069ba:	b099      	sub	sp, #100	; 0x64
 80069bc:	4605      	mov	r5, r0
 80069be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80069c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80069c6:	b974      	cbnz	r4, 80069e6 <_dtoa_r+0x36>
 80069c8:	2010      	movs	r0, #16
 80069ca:	f000 fe1d 	bl	8007608 <malloc>
 80069ce:	4602      	mov	r2, r0
 80069d0:	61e8      	str	r0, [r5, #28]
 80069d2:	b920      	cbnz	r0, 80069de <_dtoa_r+0x2e>
 80069d4:	21ef      	movs	r1, #239	; 0xef
 80069d6:	4bac      	ldr	r3, [pc, #688]	; (8006c88 <_dtoa_r+0x2d8>)
 80069d8:	48ac      	ldr	r0, [pc, #688]	; (8006c8c <_dtoa_r+0x2dc>)
 80069da:	f001 fccf 	bl	800837c <__assert_func>
 80069de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069e2:	6004      	str	r4, [r0, #0]
 80069e4:	60c4      	str	r4, [r0, #12]
 80069e6:	69eb      	ldr	r3, [r5, #28]
 80069e8:	6819      	ldr	r1, [r3, #0]
 80069ea:	b151      	cbz	r1, 8006a02 <_dtoa_r+0x52>
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	2301      	movs	r3, #1
 80069f0:	4093      	lsls	r3, r2
 80069f2:	604a      	str	r2, [r1, #4]
 80069f4:	608b      	str	r3, [r1, #8]
 80069f6:	4628      	mov	r0, r5
 80069f8:	f000 fefa 	bl	80077f0 <_Bfree>
 80069fc:	2200      	movs	r2, #0
 80069fe:	69eb      	ldr	r3, [r5, #28]
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	1e3b      	subs	r3, r7, #0
 8006a04:	bfaf      	iteee	ge
 8006a06:	2300      	movge	r3, #0
 8006a08:	2201      	movlt	r2, #1
 8006a0a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a0e:	9305      	strlt	r3, [sp, #20]
 8006a10:	bfa8      	it	ge
 8006a12:	f8c8 3000 	strge.w	r3, [r8]
 8006a16:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006a1a:	4b9d      	ldr	r3, [pc, #628]	; (8006c90 <_dtoa_r+0x2e0>)
 8006a1c:	bfb8      	it	lt
 8006a1e:	f8c8 2000 	strlt.w	r2, [r8]
 8006a22:	ea33 0309 	bics.w	r3, r3, r9
 8006a26:	d119      	bne.n	8006a5c <_dtoa_r+0xac>
 8006a28:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a2c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a2e:	6013      	str	r3, [r2, #0]
 8006a30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a34:	4333      	orrs	r3, r6
 8006a36:	f000 8589 	beq.w	800754c <_dtoa_r+0xb9c>
 8006a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a3c:	b953      	cbnz	r3, 8006a54 <_dtoa_r+0xa4>
 8006a3e:	4b95      	ldr	r3, [pc, #596]	; (8006c94 <_dtoa_r+0x2e4>)
 8006a40:	e023      	b.n	8006a8a <_dtoa_r+0xda>
 8006a42:	4b95      	ldr	r3, [pc, #596]	; (8006c98 <_dtoa_r+0x2e8>)
 8006a44:	9303      	str	r3, [sp, #12]
 8006a46:	3308      	adds	r3, #8
 8006a48:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	9803      	ldr	r0, [sp, #12]
 8006a4e:	b019      	add	sp, #100	; 0x64
 8006a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a54:	4b8f      	ldr	r3, [pc, #572]	; (8006c94 <_dtoa_r+0x2e4>)
 8006a56:	9303      	str	r3, [sp, #12]
 8006a58:	3303      	adds	r3, #3
 8006a5a:	e7f5      	b.n	8006a48 <_dtoa_r+0x98>
 8006a5c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006a60:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a68:	2200      	movs	r2, #0
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f7f9 ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8006a70:	4680      	mov	r8, r0
 8006a72:	b160      	cbz	r0, 8006a8e <_dtoa_r+0xde>
 8006a74:	2301      	movs	r3, #1
 8006a76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 8562 	beq.w	8007546 <_dtoa_r+0xb96>
 8006a82:	4b86      	ldr	r3, [pc, #536]	; (8006c9c <_dtoa_r+0x2ec>)
 8006a84:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	9303      	str	r3, [sp, #12]
 8006a8c:	e7de      	b.n	8006a4c <_dtoa_r+0x9c>
 8006a8e:	ab16      	add	r3, sp, #88	; 0x58
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	ab17      	add	r3, sp, #92	; 0x5c
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	4628      	mov	r0, r5
 8006a98:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006a9c:	f001 f98a 	bl	8007db4 <__d2b>
 8006aa0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006aa4:	4682      	mov	sl, r0
 8006aa6:	2c00      	cmp	r4, #0
 8006aa8:	d07e      	beq.n	8006ba8 <_dtoa_r+0x1f8>
 8006aaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006ab4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ab8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006abc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006ac0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	4b75      	ldr	r3, [pc, #468]	; (8006ca0 <_dtoa_r+0x2f0>)
 8006aca:	f7f9 fb4d 	bl	8000168 <__aeabi_dsub>
 8006ace:	a368      	add	r3, pc, #416	; (adr r3, 8006c70 <_dtoa_r+0x2c0>)
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f7f9 fd00 	bl	80004d8 <__aeabi_dmul>
 8006ad8:	a367      	add	r3, pc, #412	; (adr r3, 8006c78 <_dtoa_r+0x2c8>)
 8006ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ade:	f7f9 fb45 	bl	800016c <__adddf3>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	460f      	mov	r7, r1
 8006ae8:	f7f9 fc8c 	bl	8000404 <__aeabi_i2d>
 8006aec:	a364      	add	r3, pc, #400	; (adr r3, 8006c80 <_dtoa_r+0x2d0>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fcf1 	bl	80004d8 <__aeabi_dmul>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4630      	mov	r0, r6
 8006afc:	4639      	mov	r1, r7
 8006afe:	f7f9 fb35 	bl	800016c <__adddf3>
 8006b02:	4606      	mov	r6, r0
 8006b04:	460f      	mov	r7, r1
 8006b06:	f7f9 ff97 	bl	8000a38 <__aeabi_d2iz>
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4683      	mov	fp, r0
 8006b0e:	2300      	movs	r3, #0
 8006b10:	4630      	mov	r0, r6
 8006b12:	4639      	mov	r1, r7
 8006b14:	f7f9 ff52 	bl	80009bc <__aeabi_dcmplt>
 8006b18:	b148      	cbz	r0, 8006b2e <_dtoa_r+0x17e>
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f7f9 fc72 	bl	8000404 <__aeabi_i2d>
 8006b20:	4632      	mov	r2, r6
 8006b22:	463b      	mov	r3, r7
 8006b24:	f7f9 ff40 	bl	80009a8 <__aeabi_dcmpeq>
 8006b28:	b908      	cbnz	r0, 8006b2e <_dtoa_r+0x17e>
 8006b2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b2e:	f1bb 0f16 	cmp.w	fp, #22
 8006b32:	d857      	bhi.n	8006be4 <_dtoa_r+0x234>
 8006b34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b38:	4b5a      	ldr	r3, [pc, #360]	; (8006ca4 <_dtoa_r+0x2f4>)
 8006b3a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b42:	f7f9 ff3b 	bl	80009bc <__aeabi_dcmplt>
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d04e      	beq.n	8006be8 <_dtoa_r+0x238>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b52:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b54:	1b1b      	subs	r3, r3, r4
 8006b56:	1e5a      	subs	r2, r3, #1
 8006b58:	bf46      	itte	mi
 8006b5a:	f1c3 0901 	rsbmi	r9, r3, #1
 8006b5e:	2300      	movmi	r3, #0
 8006b60:	f04f 0900 	movpl.w	r9, #0
 8006b64:	9209      	str	r2, [sp, #36]	; 0x24
 8006b66:	bf48      	it	mi
 8006b68:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006b6a:	f1bb 0f00 	cmp.w	fp, #0
 8006b6e:	db3d      	blt.n	8006bec <_dtoa_r+0x23c>
 8006b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b72:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006b76:	445b      	add	r3, fp
 8006b78:	9309      	str	r3, [sp, #36]	; 0x24
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b80:	2b09      	cmp	r3, #9
 8006b82:	d867      	bhi.n	8006c54 <_dtoa_r+0x2a4>
 8006b84:	2b05      	cmp	r3, #5
 8006b86:	bfc4      	itt	gt
 8006b88:	3b04      	subgt	r3, #4
 8006b8a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006b8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b8e:	bfc8      	it	gt
 8006b90:	2400      	movgt	r4, #0
 8006b92:	f1a3 0302 	sub.w	r3, r3, #2
 8006b96:	bfd8      	it	le
 8006b98:	2401      	movle	r4, #1
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	f200 8086 	bhi.w	8006cac <_dtoa_r+0x2fc>
 8006ba0:	e8df f003 	tbb	[pc, r3]
 8006ba4:	5637392c 	.word	0x5637392c
 8006ba8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006bac:	441c      	add	r4, r3
 8006bae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	bfc1      	itttt	gt
 8006bb6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bba:	fa09 f903 	lslgt.w	r9, r9, r3
 8006bbe:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006bc2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006bc6:	bfd6      	itet	le
 8006bc8:	f1c3 0320 	rsble	r3, r3, #32
 8006bcc:	ea49 0003 	orrgt.w	r0, r9, r3
 8006bd0:	fa06 f003 	lslle.w	r0, r6, r3
 8006bd4:	f7f9 fc06 	bl	80003e4 <__aeabi_ui2d>
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006bde:	3c01      	subs	r4, #1
 8006be0:	9213      	str	r2, [sp, #76]	; 0x4c
 8006be2:	e76f      	b.n	8006ac4 <_dtoa_r+0x114>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e7b3      	b.n	8006b50 <_dtoa_r+0x1a0>
 8006be8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006bea:	e7b2      	b.n	8006b52 <_dtoa_r+0x1a2>
 8006bec:	f1cb 0300 	rsb	r3, fp, #0
 8006bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	eba9 090b 	sub.w	r9, r9, fp
 8006bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8006bfa:	e7c0      	b.n	8006b7e <_dtoa_r+0x1ce>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	dc55      	bgt.n	8006cb2 <_dtoa_r+0x302>
 8006c06:	2301      	movs	r3, #1
 8006c08:	461a      	mov	r2, r3
 8006c0a:	9306      	str	r3, [sp, #24]
 8006c0c:	9308      	str	r3, [sp, #32]
 8006c0e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c10:	e00b      	b.n	8006c2a <_dtoa_r+0x27a>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e7f3      	b.n	8006bfe <_dtoa_r+0x24e>
 8006c16:	2300      	movs	r3, #0
 8006c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c1c:	445b      	add	r3, fp
 8006c1e:	9306      	str	r3, [sp, #24]
 8006c20:	3301      	adds	r3, #1
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	9308      	str	r3, [sp, #32]
 8006c26:	bfb8      	it	lt
 8006c28:	2301      	movlt	r3, #1
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	2204      	movs	r2, #4
 8006c2e:	69e8      	ldr	r0, [r5, #28]
 8006c30:	f102 0614 	add.w	r6, r2, #20
 8006c34:	429e      	cmp	r6, r3
 8006c36:	d940      	bls.n	8006cba <_dtoa_r+0x30a>
 8006c38:	6041      	str	r1, [r0, #4]
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f000 fd98 	bl	8007770 <_Balloc>
 8006c40:	9003      	str	r0, [sp, #12]
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d13c      	bne.n	8006cc0 <_dtoa_r+0x310>
 8006c46:	4602      	mov	r2, r0
 8006c48:	f240 11af 	movw	r1, #431	; 0x1af
 8006c4c:	4b16      	ldr	r3, [pc, #88]	; (8006ca8 <_dtoa_r+0x2f8>)
 8006c4e:	e6c3      	b.n	80069d8 <_dtoa_r+0x28>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e7e1      	b.n	8006c18 <_dtoa_r+0x268>
 8006c54:	2401      	movs	r4, #1
 8006c56:	2300      	movs	r3, #0
 8006c58:	940b      	str	r4, [sp, #44]	; 0x2c
 8006c5a:	9322      	str	r3, [sp, #136]	; 0x88
 8006c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c60:	2200      	movs	r2, #0
 8006c62:	9306      	str	r3, [sp, #24]
 8006c64:	9308      	str	r3, [sp, #32]
 8006c66:	2312      	movs	r3, #18
 8006c68:	e7d1      	b.n	8006c0e <_dtoa_r+0x25e>
 8006c6a:	bf00      	nop
 8006c6c:	f3af 8000 	nop.w
 8006c70:	636f4361 	.word	0x636f4361
 8006c74:	3fd287a7 	.word	0x3fd287a7
 8006c78:	8b60c8b3 	.word	0x8b60c8b3
 8006c7c:	3fc68a28 	.word	0x3fc68a28
 8006c80:	509f79fb 	.word	0x509f79fb
 8006c84:	3fd34413 	.word	0x3fd34413
 8006c88:	080085ff 	.word	0x080085ff
 8006c8c:	08008616 	.word	0x08008616
 8006c90:	7ff00000 	.word	0x7ff00000
 8006c94:	080085fb 	.word	0x080085fb
 8006c98:	080085f2 	.word	0x080085f2
 8006c9c:	080085cf 	.word	0x080085cf
 8006ca0:	3ff80000 	.word	0x3ff80000
 8006ca4:	08008700 	.word	0x08008700
 8006ca8:	0800866e 	.word	0x0800866e
 8006cac:	2301      	movs	r3, #1
 8006cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cb0:	e7d4      	b.n	8006c5c <_dtoa_r+0x2ac>
 8006cb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cb4:	9306      	str	r3, [sp, #24]
 8006cb6:	9308      	str	r3, [sp, #32]
 8006cb8:	e7b7      	b.n	8006c2a <_dtoa_r+0x27a>
 8006cba:	3101      	adds	r1, #1
 8006cbc:	0052      	lsls	r2, r2, #1
 8006cbe:	e7b7      	b.n	8006c30 <_dtoa_r+0x280>
 8006cc0:	69eb      	ldr	r3, [r5, #28]
 8006cc2:	9a03      	ldr	r2, [sp, #12]
 8006cc4:	601a      	str	r2, [r3, #0]
 8006cc6:	9b08      	ldr	r3, [sp, #32]
 8006cc8:	2b0e      	cmp	r3, #14
 8006cca:	f200 80a8 	bhi.w	8006e1e <_dtoa_r+0x46e>
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	f000 80a5 	beq.w	8006e1e <_dtoa_r+0x46e>
 8006cd4:	f1bb 0f00 	cmp.w	fp, #0
 8006cd8:	dd34      	ble.n	8006d44 <_dtoa_r+0x394>
 8006cda:	4b9a      	ldr	r3, [pc, #616]	; (8006f44 <_dtoa_r+0x594>)
 8006cdc:	f00b 020f 	and.w	r2, fp, #15
 8006ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ce4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006ce8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006cec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006cf0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006cf4:	d016      	beq.n	8006d24 <_dtoa_r+0x374>
 8006cf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cfa:	4b93      	ldr	r3, [pc, #588]	; (8006f48 <_dtoa_r+0x598>)
 8006cfc:	2703      	movs	r7, #3
 8006cfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d02:	f7f9 fd13 	bl	800072c <__aeabi_ddiv>
 8006d06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d0a:	f004 040f 	and.w	r4, r4, #15
 8006d0e:	4e8e      	ldr	r6, [pc, #568]	; (8006f48 <_dtoa_r+0x598>)
 8006d10:	b954      	cbnz	r4, 8006d28 <_dtoa_r+0x378>
 8006d12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d1a:	f7f9 fd07 	bl	800072c <__aeabi_ddiv>
 8006d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d22:	e029      	b.n	8006d78 <_dtoa_r+0x3c8>
 8006d24:	2702      	movs	r7, #2
 8006d26:	e7f2      	b.n	8006d0e <_dtoa_r+0x35e>
 8006d28:	07e1      	lsls	r1, r4, #31
 8006d2a:	d508      	bpl.n	8006d3e <_dtoa_r+0x38e>
 8006d2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d34:	f7f9 fbd0 	bl	80004d8 <__aeabi_dmul>
 8006d38:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d3c:	3701      	adds	r7, #1
 8006d3e:	1064      	asrs	r4, r4, #1
 8006d40:	3608      	adds	r6, #8
 8006d42:	e7e5      	b.n	8006d10 <_dtoa_r+0x360>
 8006d44:	f000 80a5 	beq.w	8006e92 <_dtoa_r+0x4e2>
 8006d48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d4c:	f1cb 0400 	rsb	r4, fp, #0
 8006d50:	4b7c      	ldr	r3, [pc, #496]	; (8006f44 <_dtoa_r+0x594>)
 8006d52:	f004 020f 	and.w	r2, r4, #15
 8006d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f7f9 fbbb 	bl	80004d8 <__aeabi_dmul>
 8006d62:	2702      	movs	r7, #2
 8006d64:	2300      	movs	r3, #0
 8006d66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d6a:	4e77      	ldr	r6, [pc, #476]	; (8006f48 <_dtoa_r+0x598>)
 8006d6c:	1124      	asrs	r4, r4, #4
 8006d6e:	2c00      	cmp	r4, #0
 8006d70:	f040 8084 	bne.w	8006e7c <_dtoa_r+0x4cc>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1d2      	bne.n	8006d1e <_dtoa_r+0x36e>
 8006d78:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006d7c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006d80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8087 	beq.w	8006e96 <_dtoa_r+0x4e6>
 8006d88:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4b6f      	ldr	r3, [pc, #444]	; (8006f4c <_dtoa_r+0x59c>)
 8006d90:	f7f9 fe14 	bl	80009bc <__aeabi_dcmplt>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	d07e      	beq.n	8006e96 <_dtoa_r+0x4e6>
 8006d98:	9b08      	ldr	r3, [sp, #32]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d07b      	beq.n	8006e96 <_dtoa_r+0x4e6>
 8006d9e:	9b06      	ldr	r3, [sp, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dd38      	ble.n	8006e16 <_dtoa_r+0x466>
 8006da4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006da8:	2200      	movs	r2, #0
 8006daa:	4b69      	ldr	r3, [pc, #420]	; (8006f50 <_dtoa_r+0x5a0>)
 8006dac:	f7f9 fb94 	bl	80004d8 <__aeabi_dmul>
 8006db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006db4:	9c06      	ldr	r4, [sp, #24]
 8006db6:	f10b 38ff 	add.w	r8, fp, #4294967295
 8006dba:	3701      	adds	r7, #1
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f7f9 fb21 	bl	8000404 <__aeabi_i2d>
 8006dc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dc6:	f7f9 fb87 	bl	80004d8 <__aeabi_dmul>
 8006dca:	2200      	movs	r2, #0
 8006dcc:	4b61      	ldr	r3, [pc, #388]	; (8006f54 <_dtoa_r+0x5a4>)
 8006dce:	f7f9 f9cd 	bl	800016c <__adddf3>
 8006dd2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006dd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dda:	9611      	str	r6, [sp, #68]	; 0x44
 8006ddc:	2c00      	cmp	r4, #0
 8006dde:	d15d      	bne.n	8006e9c <_dtoa_r+0x4ec>
 8006de0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006de4:	2200      	movs	r2, #0
 8006de6:	4b5c      	ldr	r3, [pc, #368]	; (8006f58 <_dtoa_r+0x5a8>)
 8006de8:	f7f9 f9be 	bl	8000168 <__aeabi_dsub>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006df4:	4633      	mov	r3, r6
 8006df6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006df8:	f7f9 fdfe 	bl	80009f8 <__aeabi_dcmpgt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	f040 8295 	bne.w	800732c <_dtoa_r+0x97c>
 8006e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e06:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006e08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006e0c:	f7f9 fdd6 	bl	80009bc <__aeabi_dcmplt>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	f040 8289 	bne.w	8007328 <_dtoa_r+0x978>
 8006e16:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006e1a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006e1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f2c0 8151 	blt.w	80070c8 <_dtoa_r+0x718>
 8006e26:	f1bb 0f0e 	cmp.w	fp, #14
 8006e2a:	f300 814d 	bgt.w	80070c8 <_dtoa_r+0x718>
 8006e2e:	4b45      	ldr	r3, [pc, #276]	; (8006f44 <_dtoa_r+0x594>)
 8006e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006e38:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006e3c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f280 80da 	bge.w	8006ff8 <_dtoa_r+0x648>
 8006e44:	9b08      	ldr	r3, [sp, #32]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f300 80d6 	bgt.w	8006ff8 <_dtoa_r+0x648>
 8006e4c:	f040 826b 	bne.w	8007326 <_dtoa_r+0x976>
 8006e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e54:	2200      	movs	r2, #0
 8006e56:	4b40      	ldr	r3, [pc, #256]	; (8006f58 <_dtoa_r+0x5a8>)
 8006e58:	f7f9 fb3e 	bl	80004d8 <__aeabi_dmul>
 8006e5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e60:	f7f9 fdc0 	bl	80009e4 <__aeabi_dcmpge>
 8006e64:	9c08      	ldr	r4, [sp, #32]
 8006e66:	4626      	mov	r6, r4
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	f040 8241 	bne.w	80072f0 <_dtoa_r+0x940>
 8006e6e:	2331      	movs	r3, #49	; 0x31
 8006e70:	9f03      	ldr	r7, [sp, #12]
 8006e72:	f10b 0b01 	add.w	fp, fp, #1
 8006e76:	f807 3b01 	strb.w	r3, [r7], #1
 8006e7a:	e23d      	b.n	80072f8 <_dtoa_r+0x948>
 8006e7c:	07e2      	lsls	r2, r4, #31
 8006e7e:	d505      	bpl.n	8006e8c <_dtoa_r+0x4dc>
 8006e80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e84:	f7f9 fb28 	bl	80004d8 <__aeabi_dmul>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	3701      	adds	r7, #1
 8006e8c:	1064      	asrs	r4, r4, #1
 8006e8e:	3608      	adds	r6, #8
 8006e90:	e76d      	b.n	8006d6e <_dtoa_r+0x3be>
 8006e92:	2702      	movs	r7, #2
 8006e94:	e770      	b.n	8006d78 <_dtoa_r+0x3c8>
 8006e96:	46d8      	mov	r8, fp
 8006e98:	9c08      	ldr	r4, [sp, #32]
 8006e9a:	e78f      	b.n	8006dbc <_dtoa_r+0x40c>
 8006e9c:	9903      	ldr	r1, [sp, #12]
 8006e9e:	4b29      	ldr	r3, [pc, #164]	; (8006f44 <_dtoa_r+0x594>)
 8006ea0:	4421      	add	r1, r4
 8006ea2:	9112      	str	r1, [sp, #72]	; 0x48
 8006ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ea6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006eaa:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006eae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006eb2:	2900      	cmp	r1, #0
 8006eb4:	d054      	beq.n	8006f60 <_dtoa_r+0x5b0>
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	4928      	ldr	r1, [pc, #160]	; (8006f5c <_dtoa_r+0x5ac>)
 8006eba:	f7f9 fc37 	bl	800072c <__aeabi_ddiv>
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	f7f9 f951 	bl	8000168 <__aeabi_dsub>
 8006ec6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006eca:	9f03      	ldr	r7, [sp, #12]
 8006ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ed0:	f7f9 fdb2 	bl	8000a38 <__aeabi_d2iz>
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	f7f9 fa95 	bl	8000404 <__aeabi_i2d>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ee2:	f7f9 f941 	bl	8000168 <__aeabi_dsub>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	3430      	adds	r4, #48	; 0x30
 8006eec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ef0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ef4:	f807 4b01 	strb.w	r4, [r7], #1
 8006ef8:	f7f9 fd60 	bl	80009bc <__aeabi_dcmplt>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d173      	bne.n	8006fe8 <_dtoa_r+0x638>
 8006f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f04:	2000      	movs	r0, #0
 8006f06:	4911      	ldr	r1, [pc, #68]	; (8006f4c <_dtoa_r+0x59c>)
 8006f08:	f7f9 f92e 	bl	8000168 <__aeabi_dsub>
 8006f0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f10:	f7f9 fd54 	bl	80009bc <__aeabi_dcmplt>
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f040 80b6 	bne.w	8007086 <_dtoa_r+0x6d6>
 8006f1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f1c:	429f      	cmp	r7, r3
 8006f1e:	f43f af7a 	beq.w	8006e16 <_dtoa_r+0x466>
 8006f22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f26:	2200      	movs	r2, #0
 8006f28:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <_dtoa_r+0x5a0>)
 8006f2a:	f7f9 fad5 	bl	80004d8 <__aeabi_dmul>
 8006f2e:	2200      	movs	r2, #0
 8006f30:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f38:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <_dtoa_r+0x5a0>)
 8006f3a:	f7f9 facd 	bl	80004d8 <__aeabi_dmul>
 8006f3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f42:	e7c3      	b.n	8006ecc <_dtoa_r+0x51c>
 8006f44:	08008700 	.word	0x08008700
 8006f48:	080086d8 	.word	0x080086d8
 8006f4c:	3ff00000 	.word	0x3ff00000
 8006f50:	40240000 	.word	0x40240000
 8006f54:	401c0000 	.word	0x401c0000
 8006f58:	40140000 	.word	0x40140000
 8006f5c:	3fe00000 	.word	0x3fe00000
 8006f60:	4630      	mov	r0, r6
 8006f62:	4639      	mov	r1, r7
 8006f64:	f7f9 fab8 	bl	80004d8 <__aeabi_dmul>
 8006f68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f6e:	9c03      	ldr	r4, [sp, #12]
 8006f70:	9314      	str	r3, [sp, #80]	; 0x50
 8006f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f76:	f7f9 fd5f 	bl	8000a38 <__aeabi_d2iz>
 8006f7a:	9015      	str	r0, [sp, #84]	; 0x54
 8006f7c:	f7f9 fa42 	bl	8000404 <__aeabi_i2d>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f88:	f7f9 f8ee 	bl	8000168 <__aeabi_dsub>
 8006f8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f8e:	4606      	mov	r6, r0
 8006f90:	3330      	adds	r3, #48	; 0x30
 8006f92:	f804 3b01 	strb.w	r3, [r4], #1
 8006f96:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006f98:	460f      	mov	r7, r1
 8006f9a:	429c      	cmp	r4, r3
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	d124      	bne.n	8006fec <_dtoa_r+0x63c>
 8006fa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006fa6:	4baf      	ldr	r3, [pc, #700]	; (8007264 <_dtoa_r+0x8b4>)
 8006fa8:	f7f9 f8e0 	bl	800016c <__adddf3>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 fd20 	bl	80009f8 <__aeabi_dcmpgt>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d163      	bne.n	8007084 <_dtoa_r+0x6d4>
 8006fbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	49a8      	ldr	r1, [pc, #672]	; (8007264 <_dtoa_r+0x8b4>)
 8006fc4:	f7f9 f8d0 	bl	8000168 <__aeabi_dsub>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4630      	mov	r0, r6
 8006fce:	4639      	mov	r1, r7
 8006fd0:	f7f9 fcf4 	bl	80009bc <__aeabi_dcmplt>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	f43f af1e 	beq.w	8006e16 <_dtoa_r+0x466>
 8006fda:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006fdc:	1e7b      	subs	r3, r7, #1
 8006fde:	9314      	str	r3, [sp, #80]	; 0x50
 8006fe0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006fe4:	2b30      	cmp	r3, #48	; 0x30
 8006fe6:	d0f8      	beq.n	8006fda <_dtoa_r+0x62a>
 8006fe8:	46c3      	mov	fp, r8
 8006fea:	e03b      	b.n	8007064 <_dtoa_r+0x6b4>
 8006fec:	4b9e      	ldr	r3, [pc, #632]	; (8007268 <_dtoa_r+0x8b8>)
 8006fee:	f7f9 fa73 	bl	80004d8 <__aeabi_dmul>
 8006ff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ff6:	e7bc      	b.n	8006f72 <_dtoa_r+0x5c2>
 8006ff8:	9f03      	ldr	r7, [sp, #12]
 8006ffa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ffe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 fb91 	bl	800072c <__aeabi_ddiv>
 800700a:	f7f9 fd15 	bl	8000a38 <__aeabi_d2iz>
 800700e:	4604      	mov	r4, r0
 8007010:	f7f9 f9f8 	bl	8000404 <__aeabi_i2d>
 8007014:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007018:	f7f9 fa5e 	bl	80004d8 <__aeabi_dmul>
 800701c:	4602      	mov	r2, r0
 800701e:	460b      	mov	r3, r1
 8007020:	4640      	mov	r0, r8
 8007022:	4649      	mov	r1, r9
 8007024:	f7f9 f8a0 	bl	8000168 <__aeabi_dsub>
 8007028:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800702c:	f807 6b01 	strb.w	r6, [r7], #1
 8007030:	9e03      	ldr	r6, [sp, #12]
 8007032:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007036:	1bbe      	subs	r6, r7, r6
 8007038:	45b4      	cmp	ip, r6
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	d136      	bne.n	80070ae <_dtoa_r+0x6fe>
 8007040:	f7f9 f894 	bl	800016c <__adddf3>
 8007044:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007048:	4680      	mov	r8, r0
 800704a:	4689      	mov	r9, r1
 800704c:	f7f9 fcd4 	bl	80009f8 <__aeabi_dcmpgt>
 8007050:	bb58      	cbnz	r0, 80070aa <_dtoa_r+0x6fa>
 8007052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007056:	4640      	mov	r0, r8
 8007058:	4649      	mov	r1, r9
 800705a:	f7f9 fca5 	bl	80009a8 <__aeabi_dcmpeq>
 800705e:	b108      	cbz	r0, 8007064 <_dtoa_r+0x6b4>
 8007060:	07e3      	lsls	r3, r4, #31
 8007062:	d422      	bmi.n	80070aa <_dtoa_r+0x6fa>
 8007064:	4651      	mov	r1, sl
 8007066:	4628      	mov	r0, r5
 8007068:	f000 fbc2 	bl	80077f0 <_Bfree>
 800706c:	2300      	movs	r3, #0
 800706e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007070:	703b      	strb	r3, [r7, #0]
 8007072:	f10b 0301 	add.w	r3, fp, #1
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800707a:	2b00      	cmp	r3, #0
 800707c:	f43f ace6 	beq.w	8006a4c <_dtoa_r+0x9c>
 8007080:	601f      	str	r7, [r3, #0]
 8007082:	e4e3      	b.n	8006a4c <_dtoa_r+0x9c>
 8007084:	4627      	mov	r7, r4
 8007086:	463b      	mov	r3, r7
 8007088:	461f      	mov	r7, r3
 800708a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800708e:	2a39      	cmp	r2, #57	; 0x39
 8007090:	d107      	bne.n	80070a2 <_dtoa_r+0x6f2>
 8007092:	9a03      	ldr	r2, [sp, #12]
 8007094:	429a      	cmp	r2, r3
 8007096:	d1f7      	bne.n	8007088 <_dtoa_r+0x6d8>
 8007098:	2230      	movs	r2, #48	; 0x30
 800709a:	9903      	ldr	r1, [sp, #12]
 800709c:	f108 0801 	add.w	r8, r8, #1
 80070a0:	700a      	strb	r2, [r1, #0]
 80070a2:	781a      	ldrb	r2, [r3, #0]
 80070a4:	3201      	adds	r2, #1
 80070a6:	701a      	strb	r2, [r3, #0]
 80070a8:	e79e      	b.n	8006fe8 <_dtoa_r+0x638>
 80070aa:	46d8      	mov	r8, fp
 80070ac:	e7eb      	b.n	8007086 <_dtoa_r+0x6d6>
 80070ae:	2200      	movs	r2, #0
 80070b0:	4b6d      	ldr	r3, [pc, #436]	; (8007268 <_dtoa_r+0x8b8>)
 80070b2:	f7f9 fa11 	bl	80004d8 <__aeabi_dmul>
 80070b6:	2200      	movs	r2, #0
 80070b8:	2300      	movs	r3, #0
 80070ba:	4680      	mov	r8, r0
 80070bc:	4689      	mov	r9, r1
 80070be:	f7f9 fc73 	bl	80009a8 <__aeabi_dcmpeq>
 80070c2:	2800      	cmp	r0, #0
 80070c4:	d09b      	beq.n	8006ffe <_dtoa_r+0x64e>
 80070c6:	e7cd      	b.n	8007064 <_dtoa_r+0x6b4>
 80070c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80070ca:	2a00      	cmp	r2, #0
 80070cc:	f000 80c4 	beq.w	8007258 <_dtoa_r+0x8a8>
 80070d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80070d2:	2a01      	cmp	r2, #1
 80070d4:	f300 80a8 	bgt.w	8007228 <_dtoa_r+0x878>
 80070d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80070da:	2a00      	cmp	r2, #0
 80070dc:	f000 80a0 	beq.w	8007220 <_dtoa_r+0x870>
 80070e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070e4:	464f      	mov	r7, r9
 80070e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80070e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070ea:	2101      	movs	r1, #1
 80070ec:	441a      	add	r2, r3
 80070ee:	4628      	mov	r0, r5
 80070f0:	4499      	add	r9, r3
 80070f2:	9209      	str	r2, [sp, #36]	; 0x24
 80070f4:	f000 fc32 	bl	800795c <__i2b>
 80070f8:	4606      	mov	r6, r0
 80070fa:	b15f      	cbz	r7, 8007114 <_dtoa_r+0x764>
 80070fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	dd08      	ble.n	8007114 <_dtoa_r+0x764>
 8007102:	42bb      	cmp	r3, r7
 8007104:	bfa8      	it	ge
 8007106:	463b      	movge	r3, r7
 8007108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800710a:	eba9 0903 	sub.w	r9, r9, r3
 800710e:	1aff      	subs	r7, r7, r3
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	9309      	str	r3, [sp, #36]	; 0x24
 8007114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007116:	b1f3      	cbz	r3, 8007156 <_dtoa_r+0x7a6>
 8007118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800711a:	2b00      	cmp	r3, #0
 800711c:	f000 80a0 	beq.w	8007260 <_dtoa_r+0x8b0>
 8007120:	2c00      	cmp	r4, #0
 8007122:	dd10      	ble.n	8007146 <_dtoa_r+0x796>
 8007124:	4631      	mov	r1, r6
 8007126:	4622      	mov	r2, r4
 8007128:	4628      	mov	r0, r5
 800712a:	f000 fcd5 	bl	8007ad8 <__pow5mult>
 800712e:	4652      	mov	r2, sl
 8007130:	4601      	mov	r1, r0
 8007132:	4606      	mov	r6, r0
 8007134:	4628      	mov	r0, r5
 8007136:	f000 fc27 	bl	8007988 <__multiply>
 800713a:	4680      	mov	r8, r0
 800713c:	4651      	mov	r1, sl
 800713e:	4628      	mov	r0, r5
 8007140:	f000 fb56 	bl	80077f0 <_Bfree>
 8007144:	46c2      	mov	sl, r8
 8007146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007148:	1b1a      	subs	r2, r3, r4
 800714a:	d004      	beq.n	8007156 <_dtoa_r+0x7a6>
 800714c:	4651      	mov	r1, sl
 800714e:	4628      	mov	r0, r5
 8007150:	f000 fcc2 	bl	8007ad8 <__pow5mult>
 8007154:	4682      	mov	sl, r0
 8007156:	2101      	movs	r1, #1
 8007158:	4628      	mov	r0, r5
 800715a:	f000 fbff 	bl	800795c <__i2b>
 800715e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007160:	4604      	mov	r4, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	f340 8082 	ble.w	800726c <_dtoa_r+0x8bc>
 8007168:	461a      	mov	r2, r3
 800716a:	4601      	mov	r1, r0
 800716c:	4628      	mov	r0, r5
 800716e:	f000 fcb3 	bl	8007ad8 <__pow5mult>
 8007172:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007174:	4604      	mov	r4, r0
 8007176:	2b01      	cmp	r3, #1
 8007178:	dd7b      	ble.n	8007272 <_dtoa_r+0x8c2>
 800717a:	f04f 0800 	mov.w	r8, #0
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007184:	6918      	ldr	r0, [r3, #16]
 8007186:	f000 fb9b 	bl	80078c0 <__hi0bits>
 800718a:	f1c0 0020 	rsb	r0, r0, #32
 800718e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007190:	4418      	add	r0, r3
 8007192:	f010 001f 	ands.w	r0, r0, #31
 8007196:	f000 8092 	beq.w	80072be <_dtoa_r+0x90e>
 800719a:	f1c0 0320 	rsb	r3, r0, #32
 800719e:	2b04      	cmp	r3, #4
 80071a0:	f340 8085 	ble.w	80072ae <_dtoa_r+0x8fe>
 80071a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a6:	f1c0 001c 	rsb	r0, r0, #28
 80071aa:	4403      	add	r3, r0
 80071ac:	4481      	add	r9, r0
 80071ae:	4407      	add	r7, r0
 80071b0:	9309      	str	r3, [sp, #36]	; 0x24
 80071b2:	f1b9 0f00 	cmp.w	r9, #0
 80071b6:	dd05      	ble.n	80071c4 <_dtoa_r+0x814>
 80071b8:	4651      	mov	r1, sl
 80071ba:	464a      	mov	r2, r9
 80071bc:	4628      	mov	r0, r5
 80071be:	f000 fce5 	bl	8007b8c <__lshift>
 80071c2:	4682      	mov	sl, r0
 80071c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dd05      	ble.n	80071d6 <_dtoa_r+0x826>
 80071ca:	4621      	mov	r1, r4
 80071cc:	461a      	mov	r2, r3
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 fcdc 	bl	8007b8c <__lshift>
 80071d4:	4604      	mov	r4, r0
 80071d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d072      	beq.n	80072c2 <_dtoa_r+0x912>
 80071dc:	4621      	mov	r1, r4
 80071de:	4650      	mov	r0, sl
 80071e0:	f000 fd40 	bl	8007c64 <__mcmp>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	da6c      	bge.n	80072c2 <_dtoa_r+0x912>
 80071e8:	2300      	movs	r3, #0
 80071ea:	4651      	mov	r1, sl
 80071ec:	220a      	movs	r2, #10
 80071ee:	4628      	mov	r0, r5
 80071f0:	f000 fb20 	bl	8007834 <__multadd>
 80071f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f6:	4682      	mov	sl, r0
 80071f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 81ac 	beq.w	800755a <_dtoa_r+0xbaa>
 8007202:	2300      	movs	r3, #0
 8007204:	4631      	mov	r1, r6
 8007206:	220a      	movs	r2, #10
 8007208:	4628      	mov	r0, r5
 800720a:	f000 fb13 	bl	8007834 <__multadd>
 800720e:	9b06      	ldr	r3, [sp, #24]
 8007210:	4606      	mov	r6, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	f300 8093 	bgt.w	800733e <_dtoa_r+0x98e>
 8007218:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800721a:	2b02      	cmp	r3, #2
 800721c:	dc59      	bgt.n	80072d2 <_dtoa_r+0x922>
 800721e:	e08e      	b.n	800733e <_dtoa_r+0x98e>
 8007220:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007222:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007226:	e75d      	b.n	80070e4 <_dtoa_r+0x734>
 8007228:	9b08      	ldr	r3, [sp, #32]
 800722a:	1e5c      	subs	r4, r3, #1
 800722c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722e:	42a3      	cmp	r3, r4
 8007230:	bfbf      	itttt	lt
 8007232:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007234:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007236:	1ae3      	sublt	r3, r4, r3
 8007238:	18d2      	addlt	r2, r2, r3
 800723a:	bfa8      	it	ge
 800723c:	1b1c      	subge	r4, r3, r4
 800723e:	9b08      	ldr	r3, [sp, #32]
 8007240:	bfbe      	ittt	lt
 8007242:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007244:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007246:	2400      	movlt	r4, #0
 8007248:	2b00      	cmp	r3, #0
 800724a:	bfb5      	itete	lt
 800724c:	eba9 0703 	sublt.w	r7, r9, r3
 8007250:	464f      	movge	r7, r9
 8007252:	2300      	movlt	r3, #0
 8007254:	9b08      	ldrge	r3, [sp, #32]
 8007256:	e747      	b.n	80070e8 <_dtoa_r+0x738>
 8007258:	464f      	mov	r7, r9
 800725a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800725c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800725e:	e74c      	b.n	80070fa <_dtoa_r+0x74a>
 8007260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007262:	e773      	b.n	800714c <_dtoa_r+0x79c>
 8007264:	3fe00000 	.word	0x3fe00000
 8007268:	40240000 	.word	0x40240000
 800726c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800726e:	2b01      	cmp	r3, #1
 8007270:	dc18      	bgt.n	80072a4 <_dtoa_r+0x8f4>
 8007272:	9b04      	ldr	r3, [sp, #16]
 8007274:	b9b3      	cbnz	r3, 80072a4 <_dtoa_r+0x8f4>
 8007276:	9b05      	ldr	r3, [sp, #20]
 8007278:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800727c:	b993      	cbnz	r3, 80072a4 <_dtoa_r+0x8f4>
 800727e:	9b05      	ldr	r3, [sp, #20]
 8007280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007284:	0d1b      	lsrs	r3, r3, #20
 8007286:	051b      	lsls	r3, r3, #20
 8007288:	b17b      	cbz	r3, 80072aa <_dtoa_r+0x8fa>
 800728a:	f04f 0801 	mov.w	r8, #1
 800728e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007290:	f109 0901 	add.w	r9, r9, #1
 8007294:	3301      	adds	r3, #1
 8007296:	9309      	str	r3, [sp, #36]	; 0x24
 8007298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	f47f af6f 	bne.w	800717e <_dtoa_r+0x7ce>
 80072a0:	2001      	movs	r0, #1
 80072a2:	e774      	b.n	800718e <_dtoa_r+0x7de>
 80072a4:	f04f 0800 	mov.w	r8, #0
 80072a8:	e7f6      	b.n	8007298 <_dtoa_r+0x8e8>
 80072aa:	4698      	mov	r8, r3
 80072ac:	e7f4      	b.n	8007298 <_dtoa_r+0x8e8>
 80072ae:	d080      	beq.n	80071b2 <_dtoa_r+0x802>
 80072b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072b2:	331c      	adds	r3, #28
 80072b4:	441a      	add	r2, r3
 80072b6:	4499      	add	r9, r3
 80072b8:	441f      	add	r7, r3
 80072ba:	9209      	str	r2, [sp, #36]	; 0x24
 80072bc:	e779      	b.n	80071b2 <_dtoa_r+0x802>
 80072be:	4603      	mov	r3, r0
 80072c0:	e7f6      	b.n	80072b0 <_dtoa_r+0x900>
 80072c2:	9b08      	ldr	r3, [sp, #32]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dc34      	bgt.n	8007332 <_dtoa_r+0x982>
 80072c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	dd31      	ble.n	8007332 <_dtoa_r+0x982>
 80072ce:	9b08      	ldr	r3, [sp, #32]
 80072d0:	9306      	str	r3, [sp, #24]
 80072d2:	9b06      	ldr	r3, [sp, #24]
 80072d4:	b963      	cbnz	r3, 80072f0 <_dtoa_r+0x940>
 80072d6:	4621      	mov	r1, r4
 80072d8:	2205      	movs	r2, #5
 80072da:	4628      	mov	r0, r5
 80072dc:	f000 faaa 	bl	8007834 <__multadd>
 80072e0:	4601      	mov	r1, r0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4650      	mov	r0, sl
 80072e6:	f000 fcbd 	bl	8007c64 <__mcmp>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	f73f adbf 	bgt.w	8006e6e <_dtoa_r+0x4be>
 80072f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072f2:	9f03      	ldr	r7, [sp, #12]
 80072f4:	ea6f 0b03 	mvn.w	fp, r3
 80072f8:	f04f 0800 	mov.w	r8, #0
 80072fc:	4621      	mov	r1, r4
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 fa76 	bl	80077f0 <_Bfree>
 8007304:	2e00      	cmp	r6, #0
 8007306:	f43f aead 	beq.w	8007064 <_dtoa_r+0x6b4>
 800730a:	f1b8 0f00 	cmp.w	r8, #0
 800730e:	d005      	beq.n	800731c <_dtoa_r+0x96c>
 8007310:	45b0      	cmp	r8, r6
 8007312:	d003      	beq.n	800731c <_dtoa_r+0x96c>
 8007314:	4641      	mov	r1, r8
 8007316:	4628      	mov	r0, r5
 8007318:	f000 fa6a 	bl	80077f0 <_Bfree>
 800731c:	4631      	mov	r1, r6
 800731e:	4628      	mov	r0, r5
 8007320:	f000 fa66 	bl	80077f0 <_Bfree>
 8007324:	e69e      	b.n	8007064 <_dtoa_r+0x6b4>
 8007326:	2400      	movs	r4, #0
 8007328:	4626      	mov	r6, r4
 800732a:	e7e1      	b.n	80072f0 <_dtoa_r+0x940>
 800732c:	46c3      	mov	fp, r8
 800732e:	4626      	mov	r6, r4
 8007330:	e59d      	b.n	8006e6e <_dtoa_r+0x4be>
 8007332:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007334:	2b00      	cmp	r3, #0
 8007336:	f000 80c8 	beq.w	80074ca <_dtoa_r+0xb1a>
 800733a:	9b08      	ldr	r3, [sp, #32]
 800733c:	9306      	str	r3, [sp, #24]
 800733e:	2f00      	cmp	r7, #0
 8007340:	dd05      	ble.n	800734e <_dtoa_r+0x99e>
 8007342:	4631      	mov	r1, r6
 8007344:	463a      	mov	r2, r7
 8007346:	4628      	mov	r0, r5
 8007348:	f000 fc20 	bl	8007b8c <__lshift>
 800734c:	4606      	mov	r6, r0
 800734e:	f1b8 0f00 	cmp.w	r8, #0
 8007352:	d05b      	beq.n	800740c <_dtoa_r+0xa5c>
 8007354:	4628      	mov	r0, r5
 8007356:	6871      	ldr	r1, [r6, #4]
 8007358:	f000 fa0a 	bl	8007770 <_Balloc>
 800735c:	4607      	mov	r7, r0
 800735e:	b928      	cbnz	r0, 800736c <_dtoa_r+0x9bc>
 8007360:	4602      	mov	r2, r0
 8007362:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007366:	4b81      	ldr	r3, [pc, #516]	; (800756c <_dtoa_r+0xbbc>)
 8007368:	f7ff bb36 	b.w	80069d8 <_dtoa_r+0x28>
 800736c:	6932      	ldr	r2, [r6, #16]
 800736e:	f106 010c 	add.w	r1, r6, #12
 8007372:	3202      	adds	r2, #2
 8007374:	0092      	lsls	r2, r2, #2
 8007376:	300c      	adds	r0, #12
 8007378:	f000 fff2 	bl	8008360 <memcpy>
 800737c:	2201      	movs	r2, #1
 800737e:	4639      	mov	r1, r7
 8007380:	4628      	mov	r0, r5
 8007382:	f000 fc03 	bl	8007b8c <__lshift>
 8007386:	46b0      	mov	r8, r6
 8007388:	4606      	mov	r6, r0
 800738a:	9b03      	ldr	r3, [sp, #12]
 800738c:	9a03      	ldr	r2, [sp, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	9b06      	ldr	r3, [sp, #24]
 8007394:	4413      	add	r3, r2
 8007396:	930b      	str	r3, [sp, #44]	; 0x2c
 8007398:	9b04      	ldr	r3, [sp, #16]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	930a      	str	r3, [sp, #40]	; 0x28
 80073a0:	9b08      	ldr	r3, [sp, #32]
 80073a2:	4621      	mov	r1, r4
 80073a4:	3b01      	subs	r3, #1
 80073a6:	4650      	mov	r0, sl
 80073a8:	9304      	str	r3, [sp, #16]
 80073aa:	f7ff fa76 	bl	800689a <quorem>
 80073ae:	4641      	mov	r1, r8
 80073b0:	9006      	str	r0, [sp, #24]
 80073b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80073b6:	4650      	mov	r0, sl
 80073b8:	f000 fc54 	bl	8007c64 <__mcmp>
 80073bc:	4632      	mov	r2, r6
 80073be:	9009      	str	r0, [sp, #36]	; 0x24
 80073c0:	4621      	mov	r1, r4
 80073c2:	4628      	mov	r0, r5
 80073c4:	f000 fc6a 	bl	8007c9c <__mdiff>
 80073c8:	68c2      	ldr	r2, [r0, #12]
 80073ca:	4607      	mov	r7, r0
 80073cc:	bb02      	cbnz	r2, 8007410 <_dtoa_r+0xa60>
 80073ce:	4601      	mov	r1, r0
 80073d0:	4650      	mov	r0, sl
 80073d2:	f000 fc47 	bl	8007c64 <__mcmp>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4639      	mov	r1, r7
 80073da:	4628      	mov	r0, r5
 80073dc:	920c      	str	r2, [sp, #48]	; 0x30
 80073de:	f000 fa07 	bl	80077f0 <_Bfree>
 80073e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073e6:	9f08      	ldr	r7, [sp, #32]
 80073e8:	ea43 0102 	orr.w	r1, r3, r2
 80073ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ee:	4319      	orrs	r1, r3
 80073f0:	d110      	bne.n	8007414 <_dtoa_r+0xa64>
 80073f2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073f6:	d029      	beq.n	800744c <_dtoa_r+0xa9c>
 80073f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	dd02      	ble.n	8007404 <_dtoa_r+0xa54>
 80073fe:	9b06      	ldr	r3, [sp, #24]
 8007400:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007404:	9b04      	ldr	r3, [sp, #16]
 8007406:	f883 9000 	strb.w	r9, [r3]
 800740a:	e777      	b.n	80072fc <_dtoa_r+0x94c>
 800740c:	4630      	mov	r0, r6
 800740e:	e7ba      	b.n	8007386 <_dtoa_r+0x9d6>
 8007410:	2201      	movs	r2, #1
 8007412:	e7e1      	b.n	80073d8 <_dtoa_r+0xa28>
 8007414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	db04      	blt.n	8007424 <_dtoa_r+0xa74>
 800741a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800741c:	430b      	orrs	r3, r1
 800741e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007420:	430b      	orrs	r3, r1
 8007422:	d120      	bne.n	8007466 <_dtoa_r+0xab6>
 8007424:	2a00      	cmp	r2, #0
 8007426:	dded      	ble.n	8007404 <_dtoa_r+0xa54>
 8007428:	4651      	mov	r1, sl
 800742a:	2201      	movs	r2, #1
 800742c:	4628      	mov	r0, r5
 800742e:	f000 fbad 	bl	8007b8c <__lshift>
 8007432:	4621      	mov	r1, r4
 8007434:	4682      	mov	sl, r0
 8007436:	f000 fc15 	bl	8007c64 <__mcmp>
 800743a:	2800      	cmp	r0, #0
 800743c:	dc03      	bgt.n	8007446 <_dtoa_r+0xa96>
 800743e:	d1e1      	bne.n	8007404 <_dtoa_r+0xa54>
 8007440:	f019 0f01 	tst.w	r9, #1
 8007444:	d0de      	beq.n	8007404 <_dtoa_r+0xa54>
 8007446:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800744a:	d1d8      	bne.n	80073fe <_dtoa_r+0xa4e>
 800744c:	2339      	movs	r3, #57	; 0x39
 800744e:	9a04      	ldr	r2, [sp, #16]
 8007450:	7013      	strb	r3, [r2, #0]
 8007452:	463b      	mov	r3, r7
 8007454:	461f      	mov	r7, r3
 8007456:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800745a:	3b01      	subs	r3, #1
 800745c:	2a39      	cmp	r2, #57	; 0x39
 800745e:	d06b      	beq.n	8007538 <_dtoa_r+0xb88>
 8007460:	3201      	adds	r2, #1
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	e74a      	b.n	80072fc <_dtoa_r+0x94c>
 8007466:	2a00      	cmp	r2, #0
 8007468:	dd07      	ble.n	800747a <_dtoa_r+0xaca>
 800746a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800746e:	d0ed      	beq.n	800744c <_dtoa_r+0xa9c>
 8007470:	9a04      	ldr	r2, [sp, #16]
 8007472:	f109 0301 	add.w	r3, r9, #1
 8007476:	7013      	strb	r3, [r2, #0]
 8007478:	e740      	b.n	80072fc <_dtoa_r+0x94c>
 800747a:	9b08      	ldr	r3, [sp, #32]
 800747c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800747e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007482:	4293      	cmp	r3, r2
 8007484:	d042      	beq.n	800750c <_dtoa_r+0xb5c>
 8007486:	4651      	mov	r1, sl
 8007488:	2300      	movs	r3, #0
 800748a:	220a      	movs	r2, #10
 800748c:	4628      	mov	r0, r5
 800748e:	f000 f9d1 	bl	8007834 <__multadd>
 8007492:	45b0      	cmp	r8, r6
 8007494:	4682      	mov	sl, r0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	f04f 020a 	mov.w	r2, #10
 800749e:	4641      	mov	r1, r8
 80074a0:	4628      	mov	r0, r5
 80074a2:	d107      	bne.n	80074b4 <_dtoa_r+0xb04>
 80074a4:	f000 f9c6 	bl	8007834 <__multadd>
 80074a8:	4680      	mov	r8, r0
 80074aa:	4606      	mov	r6, r0
 80074ac:	9b08      	ldr	r3, [sp, #32]
 80074ae:	3301      	adds	r3, #1
 80074b0:	9308      	str	r3, [sp, #32]
 80074b2:	e775      	b.n	80073a0 <_dtoa_r+0x9f0>
 80074b4:	f000 f9be 	bl	8007834 <__multadd>
 80074b8:	4631      	mov	r1, r6
 80074ba:	4680      	mov	r8, r0
 80074bc:	2300      	movs	r3, #0
 80074be:	220a      	movs	r2, #10
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 f9b7 	bl	8007834 <__multadd>
 80074c6:	4606      	mov	r6, r0
 80074c8:	e7f0      	b.n	80074ac <_dtoa_r+0xafc>
 80074ca:	9b08      	ldr	r3, [sp, #32]
 80074cc:	9306      	str	r3, [sp, #24]
 80074ce:	9f03      	ldr	r7, [sp, #12]
 80074d0:	4621      	mov	r1, r4
 80074d2:	4650      	mov	r0, sl
 80074d4:	f7ff f9e1 	bl	800689a <quorem>
 80074d8:	9b03      	ldr	r3, [sp, #12]
 80074da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80074de:	f807 9b01 	strb.w	r9, [r7], #1
 80074e2:	1afa      	subs	r2, r7, r3
 80074e4:	9b06      	ldr	r3, [sp, #24]
 80074e6:	4293      	cmp	r3, r2
 80074e8:	dd07      	ble.n	80074fa <_dtoa_r+0xb4a>
 80074ea:	4651      	mov	r1, sl
 80074ec:	2300      	movs	r3, #0
 80074ee:	220a      	movs	r2, #10
 80074f0:	4628      	mov	r0, r5
 80074f2:	f000 f99f 	bl	8007834 <__multadd>
 80074f6:	4682      	mov	sl, r0
 80074f8:	e7ea      	b.n	80074d0 <_dtoa_r+0xb20>
 80074fa:	9b06      	ldr	r3, [sp, #24]
 80074fc:	f04f 0800 	mov.w	r8, #0
 8007500:	2b00      	cmp	r3, #0
 8007502:	bfcc      	ite	gt
 8007504:	461f      	movgt	r7, r3
 8007506:	2701      	movle	r7, #1
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	441f      	add	r7, r3
 800750c:	4651      	mov	r1, sl
 800750e:	2201      	movs	r2, #1
 8007510:	4628      	mov	r0, r5
 8007512:	f000 fb3b 	bl	8007b8c <__lshift>
 8007516:	4621      	mov	r1, r4
 8007518:	4682      	mov	sl, r0
 800751a:	f000 fba3 	bl	8007c64 <__mcmp>
 800751e:	2800      	cmp	r0, #0
 8007520:	dc97      	bgt.n	8007452 <_dtoa_r+0xaa2>
 8007522:	d102      	bne.n	800752a <_dtoa_r+0xb7a>
 8007524:	f019 0f01 	tst.w	r9, #1
 8007528:	d193      	bne.n	8007452 <_dtoa_r+0xaa2>
 800752a:	463b      	mov	r3, r7
 800752c:	461f      	mov	r7, r3
 800752e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007532:	2a30      	cmp	r2, #48	; 0x30
 8007534:	d0fa      	beq.n	800752c <_dtoa_r+0xb7c>
 8007536:	e6e1      	b.n	80072fc <_dtoa_r+0x94c>
 8007538:	9a03      	ldr	r2, [sp, #12]
 800753a:	429a      	cmp	r2, r3
 800753c:	d18a      	bne.n	8007454 <_dtoa_r+0xaa4>
 800753e:	2331      	movs	r3, #49	; 0x31
 8007540:	f10b 0b01 	add.w	fp, fp, #1
 8007544:	e797      	b.n	8007476 <_dtoa_r+0xac6>
 8007546:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <_dtoa_r+0xbc0>)
 8007548:	f7ff ba9f 	b.w	8006a8a <_dtoa_r+0xda>
 800754c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800754e:	2b00      	cmp	r3, #0
 8007550:	f47f aa77 	bne.w	8006a42 <_dtoa_r+0x92>
 8007554:	4b07      	ldr	r3, [pc, #28]	; (8007574 <_dtoa_r+0xbc4>)
 8007556:	f7ff ba98 	b.w	8006a8a <_dtoa_r+0xda>
 800755a:	9b06      	ldr	r3, [sp, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	dcb6      	bgt.n	80074ce <_dtoa_r+0xb1e>
 8007560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007562:	2b02      	cmp	r3, #2
 8007564:	f73f aeb5 	bgt.w	80072d2 <_dtoa_r+0x922>
 8007568:	e7b1      	b.n	80074ce <_dtoa_r+0xb1e>
 800756a:	bf00      	nop
 800756c:	0800866e 	.word	0x0800866e
 8007570:	080085ce 	.word	0x080085ce
 8007574:	080085f2 	.word	0x080085f2

08007578 <_free_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4605      	mov	r5, r0
 800757c:	2900      	cmp	r1, #0
 800757e:	d040      	beq.n	8007602 <_free_r+0x8a>
 8007580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007584:	1f0c      	subs	r4, r1, #4
 8007586:	2b00      	cmp	r3, #0
 8007588:	bfb8      	it	lt
 800758a:	18e4      	addlt	r4, r4, r3
 800758c:	f000 f8e4 	bl	8007758 <__malloc_lock>
 8007590:	4a1c      	ldr	r2, [pc, #112]	; (8007604 <_free_r+0x8c>)
 8007592:	6813      	ldr	r3, [r2, #0]
 8007594:	b933      	cbnz	r3, 80075a4 <_free_r+0x2c>
 8007596:	6063      	str	r3, [r4, #4]
 8007598:	6014      	str	r4, [r2, #0]
 800759a:	4628      	mov	r0, r5
 800759c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a0:	f000 b8e0 	b.w	8007764 <__malloc_unlock>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d908      	bls.n	80075ba <_free_r+0x42>
 80075a8:	6820      	ldr	r0, [r4, #0]
 80075aa:	1821      	adds	r1, r4, r0
 80075ac:	428b      	cmp	r3, r1
 80075ae:	bf01      	itttt	eq
 80075b0:	6819      	ldreq	r1, [r3, #0]
 80075b2:	685b      	ldreq	r3, [r3, #4]
 80075b4:	1809      	addeq	r1, r1, r0
 80075b6:	6021      	streq	r1, [r4, #0]
 80075b8:	e7ed      	b.n	8007596 <_free_r+0x1e>
 80075ba:	461a      	mov	r2, r3
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	b10b      	cbz	r3, 80075c4 <_free_r+0x4c>
 80075c0:	42a3      	cmp	r3, r4
 80075c2:	d9fa      	bls.n	80075ba <_free_r+0x42>
 80075c4:	6811      	ldr	r1, [r2, #0]
 80075c6:	1850      	adds	r0, r2, r1
 80075c8:	42a0      	cmp	r0, r4
 80075ca:	d10b      	bne.n	80075e4 <_free_r+0x6c>
 80075cc:	6820      	ldr	r0, [r4, #0]
 80075ce:	4401      	add	r1, r0
 80075d0:	1850      	adds	r0, r2, r1
 80075d2:	4283      	cmp	r3, r0
 80075d4:	6011      	str	r1, [r2, #0]
 80075d6:	d1e0      	bne.n	800759a <_free_r+0x22>
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	4408      	add	r0, r1
 80075de:	6010      	str	r0, [r2, #0]
 80075e0:	6053      	str	r3, [r2, #4]
 80075e2:	e7da      	b.n	800759a <_free_r+0x22>
 80075e4:	d902      	bls.n	80075ec <_free_r+0x74>
 80075e6:	230c      	movs	r3, #12
 80075e8:	602b      	str	r3, [r5, #0]
 80075ea:	e7d6      	b.n	800759a <_free_r+0x22>
 80075ec:	6820      	ldr	r0, [r4, #0]
 80075ee:	1821      	adds	r1, r4, r0
 80075f0:	428b      	cmp	r3, r1
 80075f2:	bf01      	itttt	eq
 80075f4:	6819      	ldreq	r1, [r3, #0]
 80075f6:	685b      	ldreq	r3, [r3, #4]
 80075f8:	1809      	addeq	r1, r1, r0
 80075fa:	6021      	streq	r1, [r4, #0]
 80075fc:	6063      	str	r3, [r4, #4]
 80075fe:	6054      	str	r4, [r2, #4]
 8007600:	e7cb      	b.n	800759a <_free_r+0x22>
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000548 	.word	0x20000548

08007608 <malloc>:
 8007608:	4b02      	ldr	r3, [pc, #8]	; (8007614 <malloc+0xc>)
 800760a:	4601      	mov	r1, r0
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	f000 b823 	b.w	8007658 <_malloc_r>
 8007612:	bf00      	nop
 8007614:	20000064 	.word	0x20000064

08007618 <sbrk_aligned>:
 8007618:	b570      	push	{r4, r5, r6, lr}
 800761a:	4e0e      	ldr	r6, [pc, #56]	; (8007654 <sbrk_aligned+0x3c>)
 800761c:	460c      	mov	r4, r1
 800761e:	6831      	ldr	r1, [r6, #0]
 8007620:	4605      	mov	r5, r0
 8007622:	b911      	cbnz	r1, 800762a <sbrk_aligned+0x12>
 8007624:	f000 fe8c 	bl	8008340 <_sbrk_r>
 8007628:	6030      	str	r0, [r6, #0]
 800762a:	4621      	mov	r1, r4
 800762c:	4628      	mov	r0, r5
 800762e:	f000 fe87 	bl	8008340 <_sbrk_r>
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	d00a      	beq.n	800764c <sbrk_aligned+0x34>
 8007636:	1cc4      	adds	r4, r0, #3
 8007638:	f024 0403 	bic.w	r4, r4, #3
 800763c:	42a0      	cmp	r0, r4
 800763e:	d007      	beq.n	8007650 <sbrk_aligned+0x38>
 8007640:	1a21      	subs	r1, r4, r0
 8007642:	4628      	mov	r0, r5
 8007644:	f000 fe7c 	bl	8008340 <_sbrk_r>
 8007648:	3001      	adds	r0, #1
 800764a:	d101      	bne.n	8007650 <sbrk_aligned+0x38>
 800764c:	f04f 34ff 	mov.w	r4, #4294967295
 8007650:	4620      	mov	r0, r4
 8007652:	bd70      	pop	{r4, r5, r6, pc}
 8007654:	2000054c 	.word	0x2000054c

08007658 <_malloc_r>:
 8007658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800765c:	1ccd      	adds	r5, r1, #3
 800765e:	f025 0503 	bic.w	r5, r5, #3
 8007662:	3508      	adds	r5, #8
 8007664:	2d0c      	cmp	r5, #12
 8007666:	bf38      	it	cc
 8007668:	250c      	movcc	r5, #12
 800766a:	2d00      	cmp	r5, #0
 800766c:	4607      	mov	r7, r0
 800766e:	db01      	blt.n	8007674 <_malloc_r+0x1c>
 8007670:	42a9      	cmp	r1, r5
 8007672:	d905      	bls.n	8007680 <_malloc_r+0x28>
 8007674:	230c      	movs	r3, #12
 8007676:	2600      	movs	r6, #0
 8007678:	603b      	str	r3, [r7, #0]
 800767a:	4630      	mov	r0, r6
 800767c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007680:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007754 <_malloc_r+0xfc>
 8007684:	f000 f868 	bl	8007758 <__malloc_lock>
 8007688:	f8d8 3000 	ldr.w	r3, [r8]
 800768c:	461c      	mov	r4, r3
 800768e:	bb5c      	cbnz	r4, 80076e8 <_malloc_r+0x90>
 8007690:	4629      	mov	r1, r5
 8007692:	4638      	mov	r0, r7
 8007694:	f7ff ffc0 	bl	8007618 <sbrk_aligned>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	4604      	mov	r4, r0
 800769c:	d155      	bne.n	800774a <_malloc_r+0xf2>
 800769e:	f8d8 4000 	ldr.w	r4, [r8]
 80076a2:	4626      	mov	r6, r4
 80076a4:	2e00      	cmp	r6, #0
 80076a6:	d145      	bne.n	8007734 <_malloc_r+0xdc>
 80076a8:	2c00      	cmp	r4, #0
 80076aa:	d048      	beq.n	800773e <_malloc_r+0xe6>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	4631      	mov	r1, r6
 80076b0:	4638      	mov	r0, r7
 80076b2:	eb04 0903 	add.w	r9, r4, r3
 80076b6:	f000 fe43 	bl	8008340 <_sbrk_r>
 80076ba:	4581      	cmp	r9, r0
 80076bc:	d13f      	bne.n	800773e <_malloc_r+0xe6>
 80076be:	6821      	ldr	r1, [r4, #0]
 80076c0:	4638      	mov	r0, r7
 80076c2:	1a6d      	subs	r5, r5, r1
 80076c4:	4629      	mov	r1, r5
 80076c6:	f7ff ffa7 	bl	8007618 <sbrk_aligned>
 80076ca:	3001      	adds	r0, #1
 80076cc:	d037      	beq.n	800773e <_malloc_r+0xe6>
 80076ce:	6823      	ldr	r3, [r4, #0]
 80076d0:	442b      	add	r3, r5
 80076d2:	6023      	str	r3, [r4, #0]
 80076d4:	f8d8 3000 	ldr.w	r3, [r8]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d038      	beq.n	800774e <_malloc_r+0xf6>
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	42a2      	cmp	r2, r4
 80076e0:	d12b      	bne.n	800773a <_malloc_r+0xe2>
 80076e2:	2200      	movs	r2, #0
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	e00f      	b.n	8007708 <_malloc_r+0xb0>
 80076e8:	6822      	ldr	r2, [r4, #0]
 80076ea:	1b52      	subs	r2, r2, r5
 80076ec:	d41f      	bmi.n	800772e <_malloc_r+0xd6>
 80076ee:	2a0b      	cmp	r2, #11
 80076f0:	d917      	bls.n	8007722 <_malloc_r+0xca>
 80076f2:	1961      	adds	r1, r4, r5
 80076f4:	42a3      	cmp	r3, r4
 80076f6:	6025      	str	r5, [r4, #0]
 80076f8:	bf18      	it	ne
 80076fa:	6059      	strne	r1, [r3, #4]
 80076fc:	6863      	ldr	r3, [r4, #4]
 80076fe:	bf08      	it	eq
 8007700:	f8c8 1000 	streq.w	r1, [r8]
 8007704:	5162      	str	r2, [r4, r5]
 8007706:	604b      	str	r3, [r1, #4]
 8007708:	4638      	mov	r0, r7
 800770a:	f104 060b 	add.w	r6, r4, #11
 800770e:	f000 f829 	bl	8007764 <__malloc_unlock>
 8007712:	f026 0607 	bic.w	r6, r6, #7
 8007716:	1d23      	adds	r3, r4, #4
 8007718:	1af2      	subs	r2, r6, r3
 800771a:	d0ae      	beq.n	800767a <_malloc_r+0x22>
 800771c:	1b9b      	subs	r3, r3, r6
 800771e:	50a3      	str	r3, [r4, r2]
 8007720:	e7ab      	b.n	800767a <_malloc_r+0x22>
 8007722:	42a3      	cmp	r3, r4
 8007724:	6862      	ldr	r2, [r4, #4]
 8007726:	d1dd      	bne.n	80076e4 <_malloc_r+0x8c>
 8007728:	f8c8 2000 	str.w	r2, [r8]
 800772c:	e7ec      	b.n	8007708 <_malloc_r+0xb0>
 800772e:	4623      	mov	r3, r4
 8007730:	6864      	ldr	r4, [r4, #4]
 8007732:	e7ac      	b.n	800768e <_malloc_r+0x36>
 8007734:	4634      	mov	r4, r6
 8007736:	6876      	ldr	r6, [r6, #4]
 8007738:	e7b4      	b.n	80076a4 <_malloc_r+0x4c>
 800773a:	4613      	mov	r3, r2
 800773c:	e7cc      	b.n	80076d8 <_malloc_r+0x80>
 800773e:	230c      	movs	r3, #12
 8007740:	4638      	mov	r0, r7
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	f000 f80e 	bl	8007764 <__malloc_unlock>
 8007748:	e797      	b.n	800767a <_malloc_r+0x22>
 800774a:	6025      	str	r5, [r4, #0]
 800774c:	e7dc      	b.n	8007708 <_malloc_r+0xb0>
 800774e:	605b      	str	r3, [r3, #4]
 8007750:	deff      	udf	#255	; 0xff
 8007752:	bf00      	nop
 8007754:	20000548 	.word	0x20000548

08007758 <__malloc_lock>:
 8007758:	4801      	ldr	r0, [pc, #4]	; (8007760 <__malloc_lock+0x8>)
 800775a:	f7ff b88e 	b.w	800687a <__retarget_lock_acquire_recursive>
 800775e:	bf00      	nop
 8007760:	20000544 	.word	0x20000544

08007764 <__malloc_unlock>:
 8007764:	4801      	ldr	r0, [pc, #4]	; (800776c <__malloc_unlock+0x8>)
 8007766:	f7ff b889 	b.w	800687c <__retarget_lock_release_recursive>
 800776a:	bf00      	nop
 800776c:	20000544 	.word	0x20000544

08007770 <_Balloc>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	69c6      	ldr	r6, [r0, #28]
 8007774:	4604      	mov	r4, r0
 8007776:	460d      	mov	r5, r1
 8007778:	b976      	cbnz	r6, 8007798 <_Balloc+0x28>
 800777a:	2010      	movs	r0, #16
 800777c:	f7ff ff44 	bl	8007608 <malloc>
 8007780:	4602      	mov	r2, r0
 8007782:	61e0      	str	r0, [r4, #28]
 8007784:	b920      	cbnz	r0, 8007790 <_Balloc+0x20>
 8007786:	216b      	movs	r1, #107	; 0x6b
 8007788:	4b17      	ldr	r3, [pc, #92]	; (80077e8 <_Balloc+0x78>)
 800778a:	4818      	ldr	r0, [pc, #96]	; (80077ec <_Balloc+0x7c>)
 800778c:	f000 fdf6 	bl	800837c <__assert_func>
 8007790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007794:	6006      	str	r6, [r0, #0]
 8007796:	60c6      	str	r6, [r0, #12]
 8007798:	69e6      	ldr	r6, [r4, #28]
 800779a:	68f3      	ldr	r3, [r6, #12]
 800779c:	b183      	cbz	r3, 80077c0 <_Balloc+0x50>
 800779e:	69e3      	ldr	r3, [r4, #28]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077a6:	b9b8      	cbnz	r0, 80077d8 <_Balloc+0x68>
 80077a8:	2101      	movs	r1, #1
 80077aa:	fa01 f605 	lsl.w	r6, r1, r5
 80077ae:	1d72      	adds	r2, r6, #5
 80077b0:	4620      	mov	r0, r4
 80077b2:	0092      	lsls	r2, r2, #2
 80077b4:	f000 fe00 	bl	80083b8 <_calloc_r>
 80077b8:	b160      	cbz	r0, 80077d4 <_Balloc+0x64>
 80077ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077be:	e00e      	b.n	80077de <_Balloc+0x6e>
 80077c0:	2221      	movs	r2, #33	; 0x21
 80077c2:	2104      	movs	r1, #4
 80077c4:	4620      	mov	r0, r4
 80077c6:	f000 fdf7 	bl	80083b8 <_calloc_r>
 80077ca:	69e3      	ldr	r3, [r4, #28]
 80077cc:	60f0      	str	r0, [r6, #12]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1e4      	bne.n	800779e <_Balloc+0x2e>
 80077d4:	2000      	movs	r0, #0
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	6802      	ldr	r2, [r0, #0]
 80077da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077de:	2300      	movs	r3, #0
 80077e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077e4:	e7f7      	b.n	80077d6 <_Balloc+0x66>
 80077e6:	bf00      	nop
 80077e8:	080085ff 	.word	0x080085ff
 80077ec:	0800867f 	.word	0x0800867f

080077f0 <_Bfree>:
 80077f0:	b570      	push	{r4, r5, r6, lr}
 80077f2:	69c6      	ldr	r6, [r0, #28]
 80077f4:	4605      	mov	r5, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	b976      	cbnz	r6, 8007818 <_Bfree+0x28>
 80077fa:	2010      	movs	r0, #16
 80077fc:	f7ff ff04 	bl	8007608 <malloc>
 8007800:	4602      	mov	r2, r0
 8007802:	61e8      	str	r0, [r5, #28]
 8007804:	b920      	cbnz	r0, 8007810 <_Bfree+0x20>
 8007806:	218f      	movs	r1, #143	; 0x8f
 8007808:	4b08      	ldr	r3, [pc, #32]	; (800782c <_Bfree+0x3c>)
 800780a:	4809      	ldr	r0, [pc, #36]	; (8007830 <_Bfree+0x40>)
 800780c:	f000 fdb6 	bl	800837c <__assert_func>
 8007810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007814:	6006      	str	r6, [r0, #0]
 8007816:	60c6      	str	r6, [r0, #12]
 8007818:	b13c      	cbz	r4, 800782a <_Bfree+0x3a>
 800781a:	69eb      	ldr	r3, [r5, #28]
 800781c:	6862      	ldr	r2, [r4, #4]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007824:	6021      	str	r1, [r4, #0]
 8007826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800782a:	bd70      	pop	{r4, r5, r6, pc}
 800782c:	080085ff 	.word	0x080085ff
 8007830:	0800867f 	.word	0x0800867f

08007834 <__multadd>:
 8007834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007838:	4607      	mov	r7, r0
 800783a:	460c      	mov	r4, r1
 800783c:	461e      	mov	r6, r3
 800783e:	2000      	movs	r0, #0
 8007840:	690d      	ldr	r5, [r1, #16]
 8007842:	f101 0c14 	add.w	ip, r1, #20
 8007846:	f8dc 3000 	ldr.w	r3, [ip]
 800784a:	3001      	adds	r0, #1
 800784c:	b299      	uxth	r1, r3
 800784e:	fb02 6101 	mla	r1, r2, r1, r6
 8007852:	0c1e      	lsrs	r6, r3, #16
 8007854:	0c0b      	lsrs	r3, r1, #16
 8007856:	fb02 3306 	mla	r3, r2, r6, r3
 800785a:	b289      	uxth	r1, r1
 800785c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007860:	4285      	cmp	r5, r0
 8007862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007866:	f84c 1b04 	str.w	r1, [ip], #4
 800786a:	dcec      	bgt.n	8007846 <__multadd+0x12>
 800786c:	b30e      	cbz	r6, 80078b2 <__multadd+0x7e>
 800786e:	68a3      	ldr	r3, [r4, #8]
 8007870:	42ab      	cmp	r3, r5
 8007872:	dc19      	bgt.n	80078a8 <__multadd+0x74>
 8007874:	6861      	ldr	r1, [r4, #4]
 8007876:	4638      	mov	r0, r7
 8007878:	3101      	adds	r1, #1
 800787a:	f7ff ff79 	bl	8007770 <_Balloc>
 800787e:	4680      	mov	r8, r0
 8007880:	b928      	cbnz	r0, 800788e <__multadd+0x5a>
 8007882:	4602      	mov	r2, r0
 8007884:	21ba      	movs	r1, #186	; 0xba
 8007886:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <__multadd+0x84>)
 8007888:	480c      	ldr	r0, [pc, #48]	; (80078bc <__multadd+0x88>)
 800788a:	f000 fd77 	bl	800837c <__assert_func>
 800788e:	6922      	ldr	r2, [r4, #16]
 8007890:	f104 010c 	add.w	r1, r4, #12
 8007894:	3202      	adds	r2, #2
 8007896:	0092      	lsls	r2, r2, #2
 8007898:	300c      	adds	r0, #12
 800789a:	f000 fd61 	bl	8008360 <memcpy>
 800789e:	4621      	mov	r1, r4
 80078a0:	4638      	mov	r0, r7
 80078a2:	f7ff ffa5 	bl	80077f0 <_Bfree>
 80078a6:	4644      	mov	r4, r8
 80078a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078ac:	3501      	adds	r5, #1
 80078ae:	615e      	str	r6, [r3, #20]
 80078b0:	6125      	str	r5, [r4, #16]
 80078b2:	4620      	mov	r0, r4
 80078b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b8:	0800866e 	.word	0x0800866e
 80078bc:	0800867f 	.word	0x0800867f

080078c0 <__hi0bits>:
 80078c0:	0c02      	lsrs	r2, r0, #16
 80078c2:	0412      	lsls	r2, r2, #16
 80078c4:	4603      	mov	r3, r0
 80078c6:	b9ca      	cbnz	r2, 80078fc <__hi0bits+0x3c>
 80078c8:	0403      	lsls	r3, r0, #16
 80078ca:	2010      	movs	r0, #16
 80078cc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078d0:	bf04      	itt	eq
 80078d2:	021b      	lsleq	r3, r3, #8
 80078d4:	3008      	addeq	r0, #8
 80078d6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078da:	bf04      	itt	eq
 80078dc:	011b      	lsleq	r3, r3, #4
 80078de:	3004      	addeq	r0, #4
 80078e0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078e4:	bf04      	itt	eq
 80078e6:	009b      	lsleq	r3, r3, #2
 80078e8:	3002      	addeq	r0, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	db05      	blt.n	80078fa <__hi0bits+0x3a>
 80078ee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078f2:	f100 0001 	add.w	r0, r0, #1
 80078f6:	bf08      	it	eq
 80078f8:	2020      	moveq	r0, #32
 80078fa:	4770      	bx	lr
 80078fc:	2000      	movs	r0, #0
 80078fe:	e7e5      	b.n	80078cc <__hi0bits+0xc>

08007900 <__lo0bits>:
 8007900:	6803      	ldr	r3, [r0, #0]
 8007902:	4602      	mov	r2, r0
 8007904:	f013 0007 	ands.w	r0, r3, #7
 8007908:	d00b      	beq.n	8007922 <__lo0bits+0x22>
 800790a:	07d9      	lsls	r1, r3, #31
 800790c:	d421      	bmi.n	8007952 <__lo0bits+0x52>
 800790e:	0798      	lsls	r0, r3, #30
 8007910:	bf49      	itett	mi
 8007912:	085b      	lsrmi	r3, r3, #1
 8007914:	089b      	lsrpl	r3, r3, #2
 8007916:	2001      	movmi	r0, #1
 8007918:	6013      	strmi	r3, [r2, #0]
 800791a:	bf5c      	itt	pl
 800791c:	2002      	movpl	r0, #2
 800791e:	6013      	strpl	r3, [r2, #0]
 8007920:	4770      	bx	lr
 8007922:	b299      	uxth	r1, r3
 8007924:	b909      	cbnz	r1, 800792a <__lo0bits+0x2a>
 8007926:	2010      	movs	r0, #16
 8007928:	0c1b      	lsrs	r3, r3, #16
 800792a:	b2d9      	uxtb	r1, r3
 800792c:	b909      	cbnz	r1, 8007932 <__lo0bits+0x32>
 800792e:	3008      	adds	r0, #8
 8007930:	0a1b      	lsrs	r3, r3, #8
 8007932:	0719      	lsls	r1, r3, #28
 8007934:	bf04      	itt	eq
 8007936:	091b      	lsreq	r3, r3, #4
 8007938:	3004      	addeq	r0, #4
 800793a:	0799      	lsls	r1, r3, #30
 800793c:	bf04      	itt	eq
 800793e:	089b      	lsreq	r3, r3, #2
 8007940:	3002      	addeq	r0, #2
 8007942:	07d9      	lsls	r1, r3, #31
 8007944:	d403      	bmi.n	800794e <__lo0bits+0x4e>
 8007946:	085b      	lsrs	r3, r3, #1
 8007948:	f100 0001 	add.w	r0, r0, #1
 800794c:	d003      	beq.n	8007956 <__lo0bits+0x56>
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	4770      	bx	lr
 8007952:	2000      	movs	r0, #0
 8007954:	4770      	bx	lr
 8007956:	2020      	movs	r0, #32
 8007958:	4770      	bx	lr
	...

0800795c <__i2b>:
 800795c:	b510      	push	{r4, lr}
 800795e:	460c      	mov	r4, r1
 8007960:	2101      	movs	r1, #1
 8007962:	f7ff ff05 	bl	8007770 <_Balloc>
 8007966:	4602      	mov	r2, r0
 8007968:	b928      	cbnz	r0, 8007976 <__i2b+0x1a>
 800796a:	f240 1145 	movw	r1, #325	; 0x145
 800796e:	4b04      	ldr	r3, [pc, #16]	; (8007980 <__i2b+0x24>)
 8007970:	4804      	ldr	r0, [pc, #16]	; (8007984 <__i2b+0x28>)
 8007972:	f000 fd03 	bl	800837c <__assert_func>
 8007976:	2301      	movs	r3, #1
 8007978:	6144      	str	r4, [r0, #20]
 800797a:	6103      	str	r3, [r0, #16]
 800797c:	bd10      	pop	{r4, pc}
 800797e:	bf00      	nop
 8007980:	0800866e 	.word	0x0800866e
 8007984:	0800867f 	.word	0x0800867f

08007988 <__multiply>:
 8007988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	4691      	mov	r9, r2
 800798e:	690a      	ldr	r2, [r1, #16]
 8007990:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007994:	460c      	mov	r4, r1
 8007996:	429a      	cmp	r2, r3
 8007998:	bfbe      	ittt	lt
 800799a:	460b      	movlt	r3, r1
 800799c:	464c      	movlt	r4, r9
 800799e:	4699      	movlt	r9, r3
 80079a0:	6927      	ldr	r7, [r4, #16]
 80079a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	6861      	ldr	r1, [r4, #4]
 80079aa:	eb07 060a 	add.w	r6, r7, sl
 80079ae:	42b3      	cmp	r3, r6
 80079b0:	b085      	sub	sp, #20
 80079b2:	bfb8      	it	lt
 80079b4:	3101      	addlt	r1, #1
 80079b6:	f7ff fedb 	bl	8007770 <_Balloc>
 80079ba:	b930      	cbnz	r0, 80079ca <__multiply+0x42>
 80079bc:	4602      	mov	r2, r0
 80079be:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80079c2:	4b43      	ldr	r3, [pc, #268]	; (8007ad0 <__multiply+0x148>)
 80079c4:	4843      	ldr	r0, [pc, #268]	; (8007ad4 <__multiply+0x14c>)
 80079c6:	f000 fcd9 	bl	800837c <__assert_func>
 80079ca:	f100 0514 	add.w	r5, r0, #20
 80079ce:	462b      	mov	r3, r5
 80079d0:	2200      	movs	r2, #0
 80079d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079d6:	4543      	cmp	r3, r8
 80079d8:	d321      	bcc.n	8007a1e <__multiply+0x96>
 80079da:	f104 0314 	add.w	r3, r4, #20
 80079de:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079e2:	f109 0314 	add.w	r3, r9, #20
 80079e6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079ea:	9202      	str	r2, [sp, #8]
 80079ec:	1b3a      	subs	r2, r7, r4
 80079ee:	3a15      	subs	r2, #21
 80079f0:	f022 0203 	bic.w	r2, r2, #3
 80079f4:	3204      	adds	r2, #4
 80079f6:	f104 0115 	add.w	r1, r4, #21
 80079fa:	428f      	cmp	r7, r1
 80079fc:	bf38      	it	cc
 80079fe:	2204      	movcc	r2, #4
 8007a00:	9201      	str	r2, [sp, #4]
 8007a02:	9a02      	ldr	r2, [sp, #8]
 8007a04:	9303      	str	r3, [sp, #12]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d80c      	bhi.n	8007a24 <__multiply+0x9c>
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	dd03      	ble.n	8007a16 <__multiply+0x8e>
 8007a0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d05a      	beq.n	8007acc <__multiply+0x144>
 8007a16:	6106      	str	r6, [r0, #16]
 8007a18:	b005      	add	sp, #20
 8007a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1e:	f843 2b04 	str.w	r2, [r3], #4
 8007a22:	e7d8      	b.n	80079d6 <__multiply+0x4e>
 8007a24:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a28:	f1ba 0f00 	cmp.w	sl, #0
 8007a2c:	d023      	beq.n	8007a76 <__multiply+0xee>
 8007a2e:	46a9      	mov	r9, r5
 8007a30:	f04f 0c00 	mov.w	ip, #0
 8007a34:	f104 0e14 	add.w	lr, r4, #20
 8007a38:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a3c:	f8d9 1000 	ldr.w	r1, [r9]
 8007a40:	fa1f fb82 	uxth.w	fp, r2
 8007a44:	b289      	uxth	r1, r1
 8007a46:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a4a:	4461      	add	r1, ip
 8007a4c:	f8d9 c000 	ldr.w	ip, [r9]
 8007a50:	0c12      	lsrs	r2, r2, #16
 8007a52:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a56:	fb0a c202 	mla	r2, sl, r2, ip
 8007a5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a5e:	b289      	uxth	r1, r1
 8007a60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a64:	4577      	cmp	r7, lr
 8007a66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a6a:	f849 1b04 	str.w	r1, [r9], #4
 8007a6e:	d8e3      	bhi.n	8007a38 <__multiply+0xb0>
 8007a70:	9a01      	ldr	r2, [sp, #4]
 8007a72:	f845 c002 	str.w	ip, [r5, r2]
 8007a76:	9a03      	ldr	r2, [sp, #12]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a7e:	f1b9 0f00 	cmp.w	r9, #0
 8007a82:	d021      	beq.n	8007ac8 <__multiply+0x140>
 8007a84:	46ae      	mov	lr, r5
 8007a86:	f04f 0a00 	mov.w	sl, #0
 8007a8a:	6829      	ldr	r1, [r5, #0]
 8007a8c:	f104 0c14 	add.w	ip, r4, #20
 8007a90:	f8bc b000 	ldrh.w	fp, [ip]
 8007a94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a98:	b289      	uxth	r1, r1
 8007a9a:	fb09 220b 	mla	r2, r9, fp, r2
 8007a9e:	4452      	add	r2, sl
 8007aa0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007aa4:	f84e 1b04 	str.w	r1, [lr], #4
 8007aa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007aac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ab0:	f8be 1000 	ldrh.w	r1, [lr]
 8007ab4:	4567      	cmp	r7, ip
 8007ab6:	fb09 110a 	mla	r1, r9, sl, r1
 8007aba:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007abe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ac2:	d8e5      	bhi.n	8007a90 <__multiply+0x108>
 8007ac4:	9a01      	ldr	r2, [sp, #4]
 8007ac6:	50a9      	str	r1, [r5, r2]
 8007ac8:	3504      	adds	r5, #4
 8007aca:	e79a      	b.n	8007a02 <__multiply+0x7a>
 8007acc:	3e01      	subs	r6, #1
 8007ace:	e79c      	b.n	8007a0a <__multiply+0x82>
 8007ad0:	0800866e 	.word	0x0800866e
 8007ad4:	0800867f 	.word	0x0800867f

08007ad8 <__pow5mult>:
 8007ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007adc:	4615      	mov	r5, r2
 8007ade:	f012 0203 	ands.w	r2, r2, #3
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	460f      	mov	r7, r1
 8007ae6:	d007      	beq.n	8007af8 <__pow5mult+0x20>
 8007ae8:	4c25      	ldr	r4, [pc, #148]	; (8007b80 <__pow5mult+0xa8>)
 8007aea:	3a01      	subs	r2, #1
 8007aec:	2300      	movs	r3, #0
 8007aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007af2:	f7ff fe9f 	bl	8007834 <__multadd>
 8007af6:	4607      	mov	r7, r0
 8007af8:	10ad      	asrs	r5, r5, #2
 8007afa:	d03d      	beq.n	8007b78 <__pow5mult+0xa0>
 8007afc:	69f4      	ldr	r4, [r6, #28]
 8007afe:	b97c      	cbnz	r4, 8007b20 <__pow5mult+0x48>
 8007b00:	2010      	movs	r0, #16
 8007b02:	f7ff fd81 	bl	8007608 <malloc>
 8007b06:	4602      	mov	r2, r0
 8007b08:	61f0      	str	r0, [r6, #28]
 8007b0a:	b928      	cbnz	r0, 8007b18 <__pow5mult+0x40>
 8007b0c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007b10:	4b1c      	ldr	r3, [pc, #112]	; (8007b84 <__pow5mult+0xac>)
 8007b12:	481d      	ldr	r0, [pc, #116]	; (8007b88 <__pow5mult+0xb0>)
 8007b14:	f000 fc32 	bl	800837c <__assert_func>
 8007b18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b1c:	6004      	str	r4, [r0, #0]
 8007b1e:	60c4      	str	r4, [r0, #12]
 8007b20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007b24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b28:	b94c      	cbnz	r4, 8007b3e <__pow5mult+0x66>
 8007b2a:	f240 2171 	movw	r1, #625	; 0x271
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7ff ff14 	bl	800795c <__i2b>
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b3c:	6003      	str	r3, [r0, #0]
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	07eb      	lsls	r3, r5, #31
 8007b44:	d50a      	bpl.n	8007b5c <__pow5mult+0x84>
 8007b46:	4639      	mov	r1, r7
 8007b48:	4622      	mov	r2, r4
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7ff ff1c 	bl	8007988 <__multiply>
 8007b50:	4680      	mov	r8, r0
 8007b52:	4639      	mov	r1, r7
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7ff fe4b 	bl	80077f0 <_Bfree>
 8007b5a:	4647      	mov	r7, r8
 8007b5c:	106d      	asrs	r5, r5, #1
 8007b5e:	d00b      	beq.n	8007b78 <__pow5mult+0xa0>
 8007b60:	6820      	ldr	r0, [r4, #0]
 8007b62:	b938      	cbnz	r0, 8007b74 <__pow5mult+0x9c>
 8007b64:	4622      	mov	r2, r4
 8007b66:	4621      	mov	r1, r4
 8007b68:	4630      	mov	r0, r6
 8007b6a:	f7ff ff0d 	bl	8007988 <__multiply>
 8007b6e:	6020      	str	r0, [r4, #0]
 8007b70:	f8c0 9000 	str.w	r9, [r0]
 8007b74:	4604      	mov	r4, r0
 8007b76:	e7e4      	b.n	8007b42 <__pow5mult+0x6a>
 8007b78:	4638      	mov	r0, r7
 8007b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7e:	bf00      	nop
 8007b80:	080087c8 	.word	0x080087c8
 8007b84:	080085ff 	.word	0x080085ff
 8007b88:	0800867f 	.word	0x0800867f

08007b8c <__lshift>:
 8007b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b90:	460c      	mov	r4, r1
 8007b92:	4607      	mov	r7, r0
 8007b94:	4691      	mov	r9, r2
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	6849      	ldr	r1, [r1, #4]
 8007b9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b9e:	68a3      	ldr	r3, [r4, #8]
 8007ba0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ba4:	f108 0601 	add.w	r6, r8, #1
 8007ba8:	42b3      	cmp	r3, r6
 8007baa:	db0b      	blt.n	8007bc4 <__lshift+0x38>
 8007bac:	4638      	mov	r0, r7
 8007bae:	f7ff fddf 	bl	8007770 <_Balloc>
 8007bb2:	4605      	mov	r5, r0
 8007bb4:	b948      	cbnz	r0, 8007bca <__lshift+0x3e>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007bbc:	4b27      	ldr	r3, [pc, #156]	; (8007c5c <__lshift+0xd0>)
 8007bbe:	4828      	ldr	r0, [pc, #160]	; (8007c60 <__lshift+0xd4>)
 8007bc0:	f000 fbdc 	bl	800837c <__assert_func>
 8007bc4:	3101      	adds	r1, #1
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	e7ee      	b.n	8007ba8 <__lshift+0x1c>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	f100 0114 	add.w	r1, r0, #20
 8007bd0:	f100 0210 	add.w	r2, r0, #16
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	4553      	cmp	r3, sl
 8007bd8:	db33      	blt.n	8007c42 <__lshift+0xb6>
 8007bda:	6920      	ldr	r0, [r4, #16]
 8007bdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007be0:	f104 0314 	add.w	r3, r4, #20
 8007be4:	f019 091f 	ands.w	r9, r9, #31
 8007be8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bf0:	d02b      	beq.n	8007c4a <__lshift+0xbe>
 8007bf2:	468a      	mov	sl, r1
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f1c9 0e20 	rsb	lr, r9, #32
 8007bfa:	6818      	ldr	r0, [r3, #0]
 8007bfc:	fa00 f009 	lsl.w	r0, r0, r9
 8007c00:	4310      	orrs	r0, r2
 8007c02:	f84a 0b04 	str.w	r0, [sl], #4
 8007c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0a:	459c      	cmp	ip, r3
 8007c0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c10:	d8f3      	bhi.n	8007bfa <__lshift+0x6e>
 8007c12:	ebac 0304 	sub.w	r3, ip, r4
 8007c16:	3b15      	subs	r3, #21
 8007c18:	f023 0303 	bic.w	r3, r3, #3
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	f104 0015 	add.w	r0, r4, #21
 8007c22:	4584      	cmp	ip, r0
 8007c24:	bf38      	it	cc
 8007c26:	2304      	movcc	r3, #4
 8007c28:	50ca      	str	r2, [r1, r3]
 8007c2a:	b10a      	cbz	r2, 8007c30 <__lshift+0xa4>
 8007c2c:	f108 0602 	add.w	r6, r8, #2
 8007c30:	3e01      	subs	r6, #1
 8007c32:	4638      	mov	r0, r7
 8007c34:	4621      	mov	r1, r4
 8007c36:	612e      	str	r6, [r5, #16]
 8007c38:	f7ff fdda 	bl	80077f0 <_Bfree>
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c42:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c46:	3301      	adds	r3, #1
 8007c48:	e7c5      	b.n	8007bd6 <__lshift+0x4a>
 8007c4a:	3904      	subs	r1, #4
 8007c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c50:	459c      	cmp	ip, r3
 8007c52:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c56:	d8f9      	bhi.n	8007c4c <__lshift+0xc0>
 8007c58:	e7ea      	b.n	8007c30 <__lshift+0xa4>
 8007c5a:	bf00      	nop
 8007c5c:	0800866e 	.word	0x0800866e
 8007c60:	0800867f 	.word	0x0800867f

08007c64 <__mcmp>:
 8007c64:	4603      	mov	r3, r0
 8007c66:	690a      	ldr	r2, [r1, #16]
 8007c68:	6900      	ldr	r0, [r0, #16]
 8007c6a:	b530      	push	{r4, r5, lr}
 8007c6c:	1a80      	subs	r0, r0, r2
 8007c6e:	d10d      	bne.n	8007c8c <__mcmp+0x28>
 8007c70:	3314      	adds	r3, #20
 8007c72:	3114      	adds	r1, #20
 8007c74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c84:	4295      	cmp	r5, r2
 8007c86:	d002      	beq.n	8007c8e <__mcmp+0x2a>
 8007c88:	d304      	bcc.n	8007c94 <__mcmp+0x30>
 8007c8a:	2001      	movs	r0, #1
 8007c8c:	bd30      	pop	{r4, r5, pc}
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	d3f4      	bcc.n	8007c7c <__mcmp+0x18>
 8007c92:	e7fb      	b.n	8007c8c <__mcmp+0x28>
 8007c94:	f04f 30ff 	mov.w	r0, #4294967295
 8007c98:	e7f8      	b.n	8007c8c <__mcmp+0x28>
	...

08007c9c <__mdiff>:
 8007c9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca0:	460d      	mov	r5, r1
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	4611      	mov	r1, r2
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	4614      	mov	r4, r2
 8007caa:	f7ff ffdb 	bl	8007c64 <__mcmp>
 8007cae:	1e06      	subs	r6, r0, #0
 8007cb0:	d111      	bne.n	8007cd6 <__mdiff+0x3a>
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f7ff fd5b 	bl	8007770 <_Balloc>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	b928      	cbnz	r0, 8007cca <__mdiff+0x2e>
 8007cbe:	f240 2137 	movw	r1, #567	; 0x237
 8007cc2:	4b3a      	ldr	r3, [pc, #232]	; (8007dac <__mdiff+0x110>)
 8007cc4:	483a      	ldr	r0, [pc, #232]	; (8007db0 <__mdiff+0x114>)
 8007cc6:	f000 fb59 	bl	800837c <__assert_func>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd6:	bfa4      	itt	ge
 8007cd8:	4623      	movge	r3, r4
 8007cda:	462c      	movge	r4, r5
 8007cdc:	4638      	mov	r0, r7
 8007cde:	6861      	ldr	r1, [r4, #4]
 8007ce0:	bfa6      	itte	ge
 8007ce2:	461d      	movge	r5, r3
 8007ce4:	2600      	movge	r6, #0
 8007ce6:	2601      	movlt	r6, #1
 8007ce8:	f7ff fd42 	bl	8007770 <_Balloc>
 8007cec:	4602      	mov	r2, r0
 8007cee:	b918      	cbnz	r0, 8007cf8 <__mdiff+0x5c>
 8007cf0:	f240 2145 	movw	r1, #581	; 0x245
 8007cf4:	4b2d      	ldr	r3, [pc, #180]	; (8007dac <__mdiff+0x110>)
 8007cf6:	e7e5      	b.n	8007cc4 <__mdiff+0x28>
 8007cf8:	f102 0814 	add.w	r8, r2, #20
 8007cfc:	46c2      	mov	sl, r8
 8007cfe:	f04f 0c00 	mov.w	ip, #0
 8007d02:	6927      	ldr	r7, [r4, #16]
 8007d04:	60c6      	str	r6, [r0, #12]
 8007d06:	692e      	ldr	r6, [r5, #16]
 8007d08:	f104 0014 	add.w	r0, r4, #20
 8007d0c:	f105 0914 	add.w	r9, r5, #20
 8007d10:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007d14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007d18:	3410      	adds	r4, #16
 8007d1a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d1e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d22:	fa1f f18b 	uxth.w	r1, fp
 8007d26:	4461      	add	r1, ip
 8007d28:	fa1f fc83 	uxth.w	ip, r3
 8007d2c:	0c1b      	lsrs	r3, r3, #16
 8007d2e:	eba1 010c 	sub.w	r1, r1, ip
 8007d32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d36:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d3a:	b289      	uxth	r1, r1
 8007d3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007d40:	454e      	cmp	r6, r9
 8007d42:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d46:	f84a 1b04 	str.w	r1, [sl], #4
 8007d4a:	d8e6      	bhi.n	8007d1a <__mdiff+0x7e>
 8007d4c:	1b73      	subs	r3, r6, r5
 8007d4e:	3b15      	subs	r3, #21
 8007d50:	f023 0303 	bic.w	r3, r3, #3
 8007d54:	3515      	adds	r5, #21
 8007d56:	3304      	adds	r3, #4
 8007d58:	42ae      	cmp	r6, r5
 8007d5a:	bf38      	it	cc
 8007d5c:	2304      	movcc	r3, #4
 8007d5e:	4418      	add	r0, r3
 8007d60:	4443      	add	r3, r8
 8007d62:	461e      	mov	r6, r3
 8007d64:	4605      	mov	r5, r0
 8007d66:	4575      	cmp	r5, lr
 8007d68:	d30e      	bcc.n	8007d88 <__mdiff+0xec>
 8007d6a:	f10e 0103 	add.w	r1, lr, #3
 8007d6e:	1a09      	subs	r1, r1, r0
 8007d70:	f021 0103 	bic.w	r1, r1, #3
 8007d74:	3803      	subs	r0, #3
 8007d76:	4586      	cmp	lr, r0
 8007d78:	bf38      	it	cc
 8007d7a:	2100      	movcc	r1, #0
 8007d7c:	440b      	add	r3, r1
 8007d7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d82:	b189      	cbz	r1, 8007da8 <__mdiff+0x10c>
 8007d84:	6117      	str	r7, [r2, #16]
 8007d86:	e7a3      	b.n	8007cd0 <__mdiff+0x34>
 8007d88:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d8c:	fa1f f188 	uxth.w	r1, r8
 8007d90:	4461      	add	r1, ip
 8007d92:	140c      	asrs	r4, r1, #16
 8007d94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d98:	b289      	uxth	r1, r1
 8007d9a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d9e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007da2:	f846 1b04 	str.w	r1, [r6], #4
 8007da6:	e7de      	b.n	8007d66 <__mdiff+0xca>
 8007da8:	3f01      	subs	r7, #1
 8007daa:	e7e8      	b.n	8007d7e <__mdiff+0xe2>
 8007dac:	0800866e 	.word	0x0800866e
 8007db0:	0800867f 	.word	0x0800867f

08007db4 <__d2b>:
 8007db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007db6:	2101      	movs	r1, #1
 8007db8:	4617      	mov	r7, r2
 8007dba:	461c      	mov	r4, r3
 8007dbc:	9e08      	ldr	r6, [sp, #32]
 8007dbe:	f7ff fcd7 	bl	8007770 <_Balloc>
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	b930      	cbnz	r0, 8007dd4 <__d2b+0x20>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	f240 310f 	movw	r1, #783	; 0x30f
 8007dcc:	4b22      	ldr	r3, [pc, #136]	; (8007e58 <__d2b+0xa4>)
 8007dce:	4823      	ldr	r0, [pc, #140]	; (8007e5c <__d2b+0xa8>)
 8007dd0:	f000 fad4 	bl	800837c <__assert_func>
 8007dd4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007dd8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007ddc:	bb24      	cbnz	r4, 8007e28 <__d2b+0x74>
 8007dde:	2f00      	cmp	r7, #0
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	d026      	beq.n	8007e32 <__d2b+0x7e>
 8007de4:	4668      	mov	r0, sp
 8007de6:	9700      	str	r7, [sp, #0]
 8007de8:	f7ff fd8a 	bl	8007900 <__lo0bits>
 8007dec:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007df0:	b1e8      	cbz	r0, 8007e2e <__d2b+0x7a>
 8007df2:	f1c0 0320 	rsb	r3, r0, #32
 8007df6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfa:	430b      	orrs	r3, r1
 8007dfc:	40c2      	lsrs	r2, r0
 8007dfe:	616b      	str	r3, [r5, #20]
 8007e00:	9201      	str	r2, [sp, #4]
 8007e02:	9b01      	ldr	r3, [sp, #4]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	bf14      	ite	ne
 8007e08:	2102      	movne	r1, #2
 8007e0a:	2101      	moveq	r1, #1
 8007e0c:	61ab      	str	r3, [r5, #24]
 8007e0e:	6129      	str	r1, [r5, #16]
 8007e10:	b1bc      	cbz	r4, 8007e42 <__d2b+0x8e>
 8007e12:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007e16:	4404      	add	r4, r0
 8007e18:	6034      	str	r4, [r6, #0]
 8007e1a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e20:	6018      	str	r0, [r3, #0]
 8007e22:	4628      	mov	r0, r5
 8007e24:	b003      	add	sp, #12
 8007e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e2c:	e7d7      	b.n	8007dde <__d2b+0x2a>
 8007e2e:	6169      	str	r1, [r5, #20]
 8007e30:	e7e7      	b.n	8007e02 <__d2b+0x4e>
 8007e32:	a801      	add	r0, sp, #4
 8007e34:	f7ff fd64 	bl	8007900 <__lo0bits>
 8007e38:	9b01      	ldr	r3, [sp, #4]
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	616b      	str	r3, [r5, #20]
 8007e3e:	3020      	adds	r0, #32
 8007e40:	e7e5      	b.n	8007e0e <__d2b+0x5a>
 8007e42:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e46:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007e4a:	6030      	str	r0, [r6, #0]
 8007e4c:	6918      	ldr	r0, [r3, #16]
 8007e4e:	f7ff fd37 	bl	80078c0 <__hi0bits>
 8007e52:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e56:	e7e2      	b.n	8007e1e <__d2b+0x6a>
 8007e58:	0800866e 	.word	0x0800866e
 8007e5c:	0800867f 	.word	0x0800867f

08007e60 <__sfputc_r>:
 8007e60:	6893      	ldr	r3, [r2, #8]
 8007e62:	b410      	push	{r4}
 8007e64:	3b01      	subs	r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	6093      	str	r3, [r2, #8]
 8007e6a:	da07      	bge.n	8007e7c <__sfputc_r+0x1c>
 8007e6c:	6994      	ldr	r4, [r2, #24]
 8007e6e:	42a3      	cmp	r3, r4
 8007e70:	db01      	blt.n	8007e76 <__sfputc_r+0x16>
 8007e72:	290a      	cmp	r1, #10
 8007e74:	d102      	bne.n	8007e7c <__sfputc_r+0x1c>
 8007e76:	bc10      	pop	{r4}
 8007e78:	f7fe bbed 	b.w	8006656 <__swbuf_r>
 8007e7c:	6813      	ldr	r3, [r2, #0]
 8007e7e:	1c58      	adds	r0, r3, #1
 8007e80:	6010      	str	r0, [r2, #0]
 8007e82:	7019      	strb	r1, [r3, #0]
 8007e84:	4608      	mov	r0, r1
 8007e86:	bc10      	pop	{r4}
 8007e88:	4770      	bx	lr

08007e8a <__sfputs_r>:
 8007e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8c:	4606      	mov	r6, r0
 8007e8e:	460f      	mov	r7, r1
 8007e90:	4614      	mov	r4, r2
 8007e92:	18d5      	adds	r5, r2, r3
 8007e94:	42ac      	cmp	r4, r5
 8007e96:	d101      	bne.n	8007e9c <__sfputs_r+0x12>
 8007e98:	2000      	movs	r0, #0
 8007e9a:	e007      	b.n	8007eac <__sfputs_r+0x22>
 8007e9c:	463a      	mov	r2, r7
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea4:	f7ff ffdc 	bl	8007e60 <__sfputc_r>
 8007ea8:	1c43      	adds	r3, r0, #1
 8007eaa:	d1f3      	bne.n	8007e94 <__sfputs_r+0xa>
 8007eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007eb0 <_vfiprintf_r>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	460d      	mov	r5, r1
 8007eb6:	4614      	mov	r4, r2
 8007eb8:	4698      	mov	r8, r3
 8007eba:	4606      	mov	r6, r0
 8007ebc:	b09d      	sub	sp, #116	; 0x74
 8007ebe:	b118      	cbz	r0, 8007ec8 <_vfiprintf_r+0x18>
 8007ec0:	6a03      	ldr	r3, [r0, #32]
 8007ec2:	b90b      	cbnz	r3, 8007ec8 <_vfiprintf_r+0x18>
 8007ec4:	f7fe fae0 	bl	8006488 <__sinit>
 8007ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eca:	07d9      	lsls	r1, r3, #31
 8007ecc:	d405      	bmi.n	8007eda <_vfiprintf_r+0x2a>
 8007ece:	89ab      	ldrh	r3, [r5, #12]
 8007ed0:	059a      	lsls	r2, r3, #22
 8007ed2:	d402      	bmi.n	8007eda <_vfiprintf_r+0x2a>
 8007ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed6:	f7fe fcd0 	bl	800687a <__retarget_lock_acquire_recursive>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	071b      	lsls	r3, r3, #28
 8007ede:	d501      	bpl.n	8007ee4 <_vfiprintf_r+0x34>
 8007ee0:	692b      	ldr	r3, [r5, #16]
 8007ee2:	b99b      	cbnz	r3, 8007f0c <_vfiprintf_r+0x5c>
 8007ee4:	4629      	mov	r1, r5
 8007ee6:	4630      	mov	r0, r6
 8007ee8:	f7fe fbf2 	bl	80066d0 <__swsetup_r>
 8007eec:	b170      	cbz	r0, 8007f0c <_vfiprintf_r+0x5c>
 8007eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ef0:	07dc      	lsls	r4, r3, #31
 8007ef2:	d504      	bpl.n	8007efe <_vfiprintf_r+0x4e>
 8007ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef8:	b01d      	add	sp, #116	; 0x74
 8007efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efe:	89ab      	ldrh	r3, [r5, #12]
 8007f00:	0598      	lsls	r0, r3, #22
 8007f02:	d4f7      	bmi.n	8007ef4 <_vfiprintf_r+0x44>
 8007f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f06:	f7fe fcb9 	bl	800687c <__retarget_lock_release_recursive>
 8007f0a:	e7f3      	b.n	8007ef4 <_vfiprintf_r+0x44>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f10:	2320      	movs	r3, #32
 8007f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f16:	2330      	movs	r3, #48	; 0x30
 8007f18:	f04f 0901 	mov.w	r9, #1
 8007f1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f20:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80080d0 <_vfiprintf_r+0x220>
 8007f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f28:	4623      	mov	r3, r4
 8007f2a:	469a      	mov	sl, r3
 8007f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f30:	b10a      	cbz	r2, 8007f36 <_vfiprintf_r+0x86>
 8007f32:	2a25      	cmp	r2, #37	; 0x25
 8007f34:	d1f9      	bne.n	8007f2a <_vfiprintf_r+0x7a>
 8007f36:	ebba 0b04 	subs.w	fp, sl, r4
 8007f3a:	d00b      	beq.n	8007f54 <_vfiprintf_r+0xa4>
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	4622      	mov	r2, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7ff ffa1 	bl	8007e8a <__sfputs_r>
 8007f48:	3001      	adds	r0, #1
 8007f4a:	f000 80a9 	beq.w	80080a0 <_vfiprintf_r+0x1f0>
 8007f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f50:	445a      	add	r2, fp
 8007f52:	9209      	str	r2, [sp, #36]	; 0x24
 8007f54:	f89a 3000 	ldrb.w	r3, [sl]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80a1 	beq.w	80080a0 <_vfiprintf_r+0x1f0>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295
 8007f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f68:	f10a 0a01 	add.w	sl, sl, #1
 8007f6c:	9304      	str	r3, [sp, #16]
 8007f6e:	9307      	str	r3, [sp, #28]
 8007f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f74:	931a      	str	r3, [sp, #104]	; 0x68
 8007f76:	4654      	mov	r4, sl
 8007f78:	2205      	movs	r2, #5
 8007f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7e:	4854      	ldr	r0, [pc, #336]	; (80080d0 <_vfiprintf_r+0x220>)
 8007f80:	f7fe fc7d 	bl	800687e <memchr>
 8007f84:	9a04      	ldr	r2, [sp, #16]
 8007f86:	b9d8      	cbnz	r0, 8007fc0 <_vfiprintf_r+0x110>
 8007f88:	06d1      	lsls	r1, r2, #27
 8007f8a:	bf44      	itt	mi
 8007f8c:	2320      	movmi	r3, #32
 8007f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f92:	0713      	lsls	r3, r2, #28
 8007f94:	bf44      	itt	mi
 8007f96:	232b      	movmi	r3, #43	; 0x2b
 8007f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8007fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa2:	d015      	beq.n	8007fd0 <_vfiprintf_r+0x120>
 8007fa4:	4654      	mov	r4, sl
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	f04f 0c0a 	mov.w	ip, #10
 8007fac:	9a07      	ldr	r2, [sp, #28]
 8007fae:	4621      	mov	r1, r4
 8007fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fb4:	3b30      	subs	r3, #48	; 0x30
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	d94d      	bls.n	8008056 <_vfiprintf_r+0x1a6>
 8007fba:	b1b0      	cbz	r0, 8007fea <_vfiprintf_r+0x13a>
 8007fbc:	9207      	str	r2, [sp, #28]
 8007fbe:	e014      	b.n	8007fea <_vfiprintf_r+0x13a>
 8007fc0:	eba0 0308 	sub.w	r3, r0, r8
 8007fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	46a2      	mov	sl, r4
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	e7d2      	b.n	8007f76 <_vfiprintf_r+0xc6>
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	1d19      	adds	r1, r3, #4
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	9103      	str	r1, [sp, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	bfbb      	ittet	lt
 8007fdc:	425b      	neglt	r3, r3
 8007fde:	f042 0202 	orrlt.w	r2, r2, #2
 8007fe2:	9307      	strge	r3, [sp, #28]
 8007fe4:	9307      	strlt	r3, [sp, #28]
 8007fe6:	bfb8      	it	lt
 8007fe8:	9204      	strlt	r2, [sp, #16]
 8007fea:	7823      	ldrb	r3, [r4, #0]
 8007fec:	2b2e      	cmp	r3, #46	; 0x2e
 8007fee:	d10c      	bne.n	800800a <_vfiprintf_r+0x15a>
 8007ff0:	7863      	ldrb	r3, [r4, #1]
 8007ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ff4:	d134      	bne.n	8008060 <_vfiprintf_r+0x1b0>
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	3402      	adds	r4, #2
 8007ffa:	1d1a      	adds	r2, r3, #4
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	9203      	str	r2, [sp, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	bfb8      	it	lt
 8008004:	f04f 33ff 	movlt.w	r3, #4294967295
 8008008:	9305      	str	r3, [sp, #20]
 800800a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080d4 <_vfiprintf_r+0x224>
 800800e:	2203      	movs	r2, #3
 8008010:	4650      	mov	r0, sl
 8008012:	7821      	ldrb	r1, [r4, #0]
 8008014:	f7fe fc33 	bl	800687e <memchr>
 8008018:	b138      	cbz	r0, 800802a <_vfiprintf_r+0x17a>
 800801a:	2240      	movs	r2, #64	; 0x40
 800801c:	9b04      	ldr	r3, [sp, #16]
 800801e:	eba0 000a 	sub.w	r0, r0, sl
 8008022:	4082      	lsls	r2, r0
 8008024:	4313      	orrs	r3, r2
 8008026:	3401      	adds	r4, #1
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800802e:	2206      	movs	r2, #6
 8008030:	4829      	ldr	r0, [pc, #164]	; (80080d8 <_vfiprintf_r+0x228>)
 8008032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008036:	f7fe fc22 	bl	800687e <memchr>
 800803a:	2800      	cmp	r0, #0
 800803c:	d03f      	beq.n	80080be <_vfiprintf_r+0x20e>
 800803e:	4b27      	ldr	r3, [pc, #156]	; (80080dc <_vfiprintf_r+0x22c>)
 8008040:	bb1b      	cbnz	r3, 800808a <_vfiprintf_r+0x1da>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	3307      	adds	r3, #7
 8008046:	f023 0307 	bic.w	r3, r3, #7
 800804a:	3308      	adds	r3, #8
 800804c:	9303      	str	r3, [sp, #12]
 800804e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008050:	443b      	add	r3, r7
 8008052:	9309      	str	r3, [sp, #36]	; 0x24
 8008054:	e768      	b.n	8007f28 <_vfiprintf_r+0x78>
 8008056:	460c      	mov	r4, r1
 8008058:	2001      	movs	r0, #1
 800805a:	fb0c 3202 	mla	r2, ip, r2, r3
 800805e:	e7a6      	b.n	8007fae <_vfiprintf_r+0xfe>
 8008060:	2300      	movs	r3, #0
 8008062:	f04f 0c0a 	mov.w	ip, #10
 8008066:	4619      	mov	r1, r3
 8008068:	3401      	adds	r4, #1
 800806a:	9305      	str	r3, [sp, #20]
 800806c:	4620      	mov	r0, r4
 800806e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008072:	3a30      	subs	r2, #48	; 0x30
 8008074:	2a09      	cmp	r2, #9
 8008076:	d903      	bls.n	8008080 <_vfiprintf_r+0x1d0>
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0c6      	beq.n	800800a <_vfiprintf_r+0x15a>
 800807c:	9105      	str	r1, [sp, #20]
 800807e:	e7c4      	b.n	800800a <_vfiprintf_r+0x15a>
 8008080:	4604      	mov	r4, r0
 8008082:	2301      	movs	r3, #1
 8008084:	fb0c 2101 	mla	r1, ip, r1, r2
 8008088:	e7f0      	b.n	800806c <_vfiprintf_r+0x1bc>
 800808a:	ab03      	add	r3, sp, #12
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	462a      	mov	r2, r5
 8008090:	4630      	mov	r0, r6
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <_vfiprintf_r+0x230>)
 8008094:	a904      	add	r1, sp, #16
 8008096:	f7fd fda9 	bl	8005bec <_printf_float>
 800809a:	4607      	mov	r7, r0
 800809c:	1c78      	adds	r0, r7, #1
 800809e:	d1d6      	bne.n	800804e <_vfiprintf_r+0x19e>
 80080a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080a2:	07d9      	lsls	r1, r3, #31
 80080a4:	d405      	bmi.n	80080b2 <_vfiprintf_r+0x202>
 80080a6:	89ab      	ldrh	r3, [r5, #12]
 80080a8:	059a      	lsls	r2, r3, #22
 80080aa:	d402      	bmi.n	80080b2 <_vfiprintf_r+0x202>
 80080ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ae:	f7fe fbe5 	bl	800687c <__retarget_lock_release_recursive>
 80080b2:	89ab      	ldrh	r3, [r5, #12]
 80080b4:	065b      	lsls	r3, r3, #25
 80080b6:	f53f af1d 	bmi.w	8007ef4 <_vfiprintf_r+0x44>
 80080ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080bc:	e71c      	b.n	8007ef8 <_vfiprintf_r+0x48>
 80080be:	ab03      	add	r3, sp, #12
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	462a      	mov	r2, r5
 80080c4:	4630      	mov	r0, r6
 80080c6:	4b06      	ldr	r3, [pc, #24]	; (80080e0 <_vfiprintf_r+0x230>)
 80080c8:	a904      	add	r1, sp, #16
 80080ca:	f7fe f82f 	bl	800612c <_printf_i>
 80080ce:	e7e4      	b.n	800809a <_vfiprintf_r+0x1ea>
 80080d0:	080087d4 	.word	0x080087d4
 80080d4:	080087da 	.word	0x080087da
 80080d8:	080087de 	.word	0x080087de
 80080dc:	08005bed 	.word	0x08005bed
 80080e0:	08007e8b 	.word	0x08007e8b

080080e4 <__sflush_r>:
 80080e4:	898a      	ldrh	r2, [r1, #12]
 80080e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e8:	4605      	mov	r5, r0
 80080ea:	0710      	lsls	r0, r2, #28
 80080ec:	460c      	mov	r4, r1
 80080ee:	d457      	bmi.n	80081a0 <__sflush_r+0xbc>
 80080f0:	684b      	ldr	r3, [r1, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	dc04      	bgt.n	8008100 <__sflush_r+0x1c>
 80080f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	dc01      	bgt.n	8008100 <__sflush_r+0x1c>
 80080fc:	2000      	movs	r0, #0
 80080fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008100:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008102:	2e00      	cmp	r6, #0
 8008104:	d0fa      	beq.n	80080fc <__sflush_r+0x18>
 8008106:	2300      	movs	r3, #0
 8008108:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800810c:	682f      	ldr	r7, [r5, #0]
 800810e:	6a21      	ldr	r1, [r4, #32]
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	d032      	beq.n	800817a <__sflush_r+0x96>
 8008114:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	075a      	lsls	r2, r3, #29
 800811a:	d505      	bpl.n	8008128 <__sflush_r+0x44>
 800811c:	6863      	ldr	r3, [r4, #4]
 800811e:	1ac0      	subs	r0, r0, r3
 8008120:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008122:	b10b      	cbz	r3, 8008128 <__sflush_r+0x44>
 8008124:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008126:	1ac0      	subs	r0, r0, r3
 8008128:	2300      	movs	r3, #0
 800812a:	4602      	mov	r2, r0
 800812c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800812e:	4628      	mov	r0, r5
 8008130:	6a21      	ldr	r1, [r4, #32]
 8008132:	47b0      	blx	r6
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	d106      	bne.n	8008148 <__sflush_r+0x64>
 800813a:	6829      	ldr	r1, [r5, #0]
 800813c:	291d      	cmp	r1, #29
 800813e:	d82b      	bhi.n	8008198 <__sflush_r+0xb4>
 8008140:	4a28      	ldr	r2, [pc, #160]	; (80081e4 <__sflush_r+0x100>)
 8008142:	410a      	asrs	r2, r1
 8008144:	07d6      	lsls	r6, r2, #31
 8008146:	d427      	bmi.n	8008198 <__sflush_r+0xb4>
 8008148:	2200      	movs	r2, #0
 800814a:	6062      	str	r2, [r4, #4]
 800814c:	6922      	ldr	r2, [r4, #16]
 800814e:	04d9      	lsls	r1, r3, #19
 8008150:	6022      	str	r2, [r4, #0]
 8008152:	d504      	bpl.n	800815e <__sflush_r+0x7a>
 8008154:	1c42      	adds	r2, r0, #1
 8008156:	d101      	bne.n	800815c <__sflush_r+0x78>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	b903      	cbnz	r3, 800815e <__sflush_r+0x7a>
 800815c:	6560      	str	r0, [r4, #84]	; 0x54
 800815e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008160:	602f      	str	r7, [r5, #0]
 8008162:	2900      	cmp	r1, #0
 8008164:	d0ca      	beq.n	80080fc <__sflush_r+0x18>
 8008166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800816a:	4299      	cmp	r1, r3
 800816c:	d002      	beq.n	8008174 <__sflush_r+0x90>
 800816e:	4628      	mov	r0, r5
 8008170:	f7ff fa02 	bl	8007578 <_free_r>
 8008174:	2000      	movs	r0, #0
 8008176:	6360      	str	r0, [r4, #52]	; 0x34
 8008178:	e7c1      	b.n	80080fe <__sflush_r+0x1a>
 800817a:	2301      	movs	r3, #1
 800817c:	4628      	mov	r0, r5
 800817e:	47b0      	blx	r6
 8008180:	1c41      	adds	r1, r0, #1
 8008182:	d1c8      	bne.n	8008116 <__sflush_r+0x32>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0c5      	beq.n	8008116 <__sflush_r+0x32>
 800818a:	2b1d      	cmp	r3, #29
 800818c:	d001      	beq.n	8008192 <__sflush_r+0xae>
 800818e:	2b16      	cmp	r3, #22
 8008190:	d101      	bne.n	8008196 <__sflush_r+0xb2>
 8008192:	602f      	str	r7, [r5, #0]
 8008194:	e7b2      	b.n	80080fc <__sflush_r+0x18>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800819c:	81a3      	strh	r3, [r4, #12]
 800819e:	e7ae      	b.n	80080fe <__sflush_r+0x1a>
 80081a0:	690f      	ldr	r7, [r1, #16]
 80081a2:	2f00      	cmp	r7, #0
 80081a4:	d0aa      	beq.n	80080fc <__sflush_r+0x18>
 80081a6:	0793      	lsls	r3, r2, #30
 80081a8:	bf18      	it	ne
 80081aa:	2300      	movne	r3, #0
 80081ac:	680e      	ldr	r6, [r1, #0]
 80081ae:	bf08      	it	eq
 80081b0:	694b      	ldreq	r3, [r1, #20]
 80081b2:	1bf6      	subs	r6, r6, r7
 80081b4:	600f      	str	r7, [r1, #0]
 80081b6:	608b      	str	r3, [r1, #8]
 80081b8:	2e00      	cmp	r6, #0
 80081ba:	dd9f      	ble.n	80080fc <__sflush_r+0x18>
 80081bc:	4633      	mov	r3, r6
 80081be:	463a      	mov	r2, r7
 80081c0:	4628      	mov	r0, r5
 80081c2:	6a21      	ldr	r1, [r4, #32]
 80081c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80081c8:	47e0      	blx	ip
 80081ca:	2800      	cmp	r0, #0
 80081cc:	dc06      	bgt.n	80081dc <__sflush_r+0xf8>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f04f 30ff 	mov.w	r0, #4294967295
 80081d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	e790      	b.n	80080fe <__sflush_r+0x1a>
 80081dc:	4407      	add	r7, r0
 80081de:	1a36      	subs	r6, r6, r0
 80081e0:	e7ea      	b.n	80081b8 <__sflush_r+0xd4>
 80081e2:	bf00      	nop
 80081e4:	dfbffffe 	.word	0xdfbffffe

080081e8 <_fflush_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	690b      	ldr	r3, [r1, #16]
 80081ec:	4605      	mov	r5, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	b913      	cbnz	r3, 80081f8 <_fflush_r+0x10>
 80081f2:	2500      	movs	r5, #0
 80081f4:	4628      	mov	r0, r5
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	b118      	cbz	r0, 8008202 <_fflush_r+0x1a>
 80081fa:	6a03      	ldr	r3, [r0, #32]
 80081fc:	b90b      	cbnz	r3, 8008202 <_fflush_r+0x1a>
 80081fe:	f7fe f943 	bl	8006488 <__sinit>
 8008202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f3      	beq.n	80081f2 <_fflush_r+0xa>
 800820a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800820c:	07d0      	lsls	r0, r2, #31
 800820e:	d404      	bmi.n	800821a <_fflush_r+0x32>
 8008210:	0599      	lsls	r1, r3, #22
 8008212:	d402      	bmi.n	800821a <_fflush_r+0x32>
 8008214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008216:	f7fe fb30 	bl	800687a <__retarget_lock_acquire_recursive>
 800821a:	4628      	mov	r0, r5
 800821c:	4621      	mov	r1, r4
 800821e:	f7ff ff61 	bl	80080e4 <__sflush_r>
 8008222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008224:	4605      	mov	r5, r0
 8008226:	07da      	lsls	r2, r3, #31
 8008228:	d4e4      	bmi.n	80081f4 <_fflush_r+0xc>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	059b      	lsls	r3, r3, #22
 800822e:	d4e1      	bmi.n	80081f4 <_fflush_r+0xc>
 8008230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008232:	f7fe fb23 	bl	800687c <__retarget_lock_release_recursive>
 8008236:	e7dd      	b.n	80081f4 <_fflush_r+0xc>

08008238 <__swhatbuf_r>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	460c      	mov	r4, r1
 800823c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008240:	4615      	mov	r5, r2
 8008242:	2900      	cmp	r1, #0
 8008244:	461e      	mov	r6, r3
 8008246:	b096      	sub	sp, #88	; 0x58
 8008248:	da0c      	bge.n	8008264 <__swhatbuf_r+0x2c>
 800824a:	89a3      	ldrh	r3, [r4, #12]
 800824c:	2100      	movs	r1, #0
 800824e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008252:	bf0c      	ite	eq
 8008254:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008258:	2340      	movne	r3, #64	; 0x40
 800825a:	2000      	movs	r0, #0
 800825c:	6031      	str	r1, [r6, #0]
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	b016      	add	sp, #88	; 0x58
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	466a      	mov	r2, sp
 8008266:	f000 f849 	bl	80082fc <_fstat_r>
 800826a:	2800      	cmp	r0, #0
 800826c:	dbed      	blt.n	800824a <__swhatbuf_r+0x12>
 800826e:	9901      	ldr	r1, [sp, #4]
 8008270:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008274:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008278:	4259      	negs	r1, r3
 800827a:	4159      	adcs	r1, r3
 800827c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008280:	e7eb      	b.n	800825a <__swhatbuf_r+0x22>

08008282 <__smakebuf_r>:
 8008282:	898b      	ldrh	r3, [r1, #12]
 8008284:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008286:	079d      	lsls	r5, r3, #30
 8008288:	4606      	mov	r6, r0
 800828a:	460c      	mov	r4, r1
 800828c:	d507      	bpl.n	800829e <__smakebuf_r+0x1c>
 800828e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	2301      	movs	r3, #1
 8008298:	6163      	str	r3, [r4, #20]
 800829a:	b002      	add	sp, #8
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	466a      	mov	r2, sp
 80082a0:	ab01      	add	r3, sp, #4
 80082a2:	f7ff ffc9 	bl	8008238 <__swhatbuf_r>
 80082a6:	9900      	ldr	r1, [sp, #0]
 80082a8:	4605      	mov	r5, r0
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff f9d4 	bl	8007658 <_malloc_r>
 80082b0:	b948      	cbnz	r0, 80082c6 <__smakebuf_r+0x44>
 80082b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082b6:	059a      	lsls	r2, r3, #22
 80082b8:	d4ef      	bmi.n	800829a <__smakebuf_r+0x18>
 80082ba:	f023 0303 	bic.w	r3, r3, #3
 80082be:	f043 0302 	orr.w	r3, r3, #2
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	e7e3      	b.n	800828e <__smakebuf_r+0xc>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	6020      	str	r0, [r4, #0]
 80082ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	6120      	str	r0, [r4, #16]
 80082d4:	6163      	str	r3, [r4, #20]
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	b15b      	cbz	r3, 80082f2 <__smakebuf_r+0x70>
 80082da:	4630      	mov	r0, r6
 80082dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e0:	f000 f81e 	bl	8008320 <_isatty_r>
 80082e4:	b128      	cbz	r0, 80082f2 <__smakebuf_r+0x70>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f023 0303 	bic.w	r3, r3, #3
 80082ec:	f043 0301 	orr.w	r3, r3, #1
 80082f0:	81a3      	strh	r3, [r4, #12]
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	431d      	orrs	r5, r3
 80082f6:	81a5      	strh	r5, [r4, #12]
 80082f8:	e7cf      	b.n	800829a <__smakebuf_r+0x18>
	...

080082fc <_fstat_r>:
 80082fc:	b538      	push	{r3, r4, r5, lr}
 80082fe:	2300      	movs	r3, #0
 8008300:	4d06      	ldr	r5, [pc, #24]	; (800831c <_fstat_r+0x20>)
 8008302:	4604      	mov	r4, r0
 8008304:	4608      	mov	r0, r1
 8008306:	4611      	mov	r1, r2
 8008308:	602b      	str	r3, [r5, #0]
 800830a:	f7f9 fb8c 	bl	8001a26 <_fstat>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	d102      	bne.n	8008318 <_fstat_r+0x1c>
 8008312:	682b      	ldr	r3, [r5, #0]
 8008314:	b103      	cbz	r3, 8008318 <_fstat_r+0x1c>
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	bd38      	pop	{r3, r4, r5, pc}
 800831a:	bf00      	nop
 800831c:	20000540 	.word	0x20000540

08008320 <_isatty_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	2300      	movs	r3, #0
 8008324:	4d05      	ldr	r5, [pc, #20]	; (800833c <_isatty_r+0x1c>)
 8008326:	4604      	mov	r4, r0
 8008328:	4608      	mov	r0, r1
 800832a:	602b      	str	r3, [r5, #0]
 800832c:	f7f9 fb8a 	bl	8001a44 <_isatty>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d102      	bne.n	800833a <_isatty_r+0x1a>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	b103      	cbz	r3, 800833a <_isatty_r+0x1a>
 8008338:	6023      	str	r3, [r4, #0]
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20000540 	.word	0x20000540

08008340 <_sbrk_r>:
 8008340:	b538      	push	{r3, r4, r5, lr}
 8008342:	2300      	movs	r3, #0
 8008344:	4d05      	ldr	r5, [pc, #20]	; (800835c <_sbrk_r+0x1c>)
 8008346:	4604      	mov	r4, r0
 8008348:	4608      	mov	r0, r1
 800834a:	602b      	str	r3, [r5, #0]
 800834c:	f7f9 fb90 	bl	8001a70 <_sbrk>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_sbrk_r+0x1a>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_sbrk_r+0x1a>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20000540 	.word	0x20000540

08008360 <memcpy>:
 8008360:	440a      	add	r2, r1
 8008362:	4291      	cmp	r1, r2
 8008364:	f100 33ff 	add.w	r3, r0, #4294967295
 8008368:	d100      	bne.n	800836c <memcpy+0xc>
 800836a:	4770      	bx	lr
 800836c:	b510      	push	{r4, lr}
 800836e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008372:	4291      	cmp	r1, r2
 8008374:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008378:	d1f9      	bne.n	800836e <memcpy+0xe>
 800837a:	bd10      	pop	{r4, pc}

0800837c <__assert_func>:
 800837c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800837e:	4614      	mov	r4, r2
 8008380:	461a      	mov	r2, r3
 8008382:	4b09      	ldr	r3, [pc, #36]	; (80083a8 <__assert_func+0x2c>)
 8008384:	4605      	mov	r5, r0
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68d8      	ldr	r0, [r3, #12]
 800838a:	b14c      	cbz	r4, 80083a0 <__assert_func+0x24>
 800838c:	4b07      	ldr	r3, [pc, #28]	; (80083ac <__assert_func+0x30>)
 800838e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008392:	9100      	str	r1, [sp, #0]
 8008394:	462b      	mov	r3, r5
 8008396:	4906      	ldr	r1, [pc, #24]	; (80083b0 <__assert_func+0x34>)
 8008398:	f000 f842 	bl	8008420 <fiprintf>
 800839c:	f000 f852 	bl	8008444 <abort>
 80083a0:	4b04      	ldr	r3, [pc, #16]	; (80083b4 <__assert_func+0x38>)
 80083a2:	461c      	mov	r4, r3
 80083a4:	e7f3      	b.n	800838e <__assert_func+0x12>
 80083a6:	bf00      	nop
 80083a8:	20000064 	.word	0x20000064
 80083ac:	080087ef 	.word	0x080087ef
 80083b0:	080087fc 	.word	0x080087fc
 80083b4:	0800882a 	.word	0x0800882a

080083b8 <_calloc_r>:
 80083b8:	b570      	push	{r4, r5, r6, lr}
 80083ba:	fba1 5402 	umull	r5, r4, r1, r2
 80083be:	b934      	cbnz	r4, 80083ce <_calloc_r+0x16>
 80083c0:	4629      	mov	r1, r5
 80083c2:	f7ff f949 	bl	8007658 <_malloc_r>
 80083c6:	4606      	mov	r6, r0
 80083c8:	b928      	cbnz	r0, 80083d6 <_calloc_r+0x1e>
 80083ca:	4630      	mov	r0, r6
 80083cc:	bd70      	pop	{r4, r5, r6, pc}
 80083ce:	220c      	movs	r2, #12
 80083d0:	2600      	movs	r6, #0
 80083d2:	6002      	str	r2, [r0, #0]
 80083d4:	e7f9      	b.n	80083ca <_calloc_r+0x12>
 80083d6:	462a      	mov	r2, r5
 80083d8:	4621      	mov	r1, r4
 80083da:	f7fe f9d1 	bl	8006780 <memset>
 80083de:	e7f4      	b.n	80083ca <_calloc_r+0x12>

080083e0 <__ascii_mbtowc>:
 80083e0:	b082      	sub	sp, #8
 80083e2:	b901      	cbnz	r1, 80083e6 <__ascii_mbtowc+0x6>
 80083e4:	a901      	add	r1, sp, #4
 80083e6:	b142      	cbz	r2, 80083fa <__ascii_mbtowc+0x1a>
 80083e8:	b14b      	cbz	r3, 80083fe <__ascii_mbtowc+0x1e>
 80083ea:	7813      	ldrb	r3, [r2, #0]
 80083ec:	600b      	str	r3, [r1, #0]
 80083ee:	7812      	ldrb	r2, [r2, #0]
 80083f0:	1e10      	subs	r0, r2, #0
 80083f2:	bf18      	it	ne
 80083f4:	2001      	movne	r0, #1
 80083f6:	b002      	add	sp, #8
 80083f8:	4770      	bx	lr
 80083fa:	4610      	mov	r0, r2
 80083fc:	e7fb      	b.n	80083f6 <__ascii_mbtowc+0x16>
 80083fe:	f06f 0001 	mvn.w	r0, #1
 8008402:	e7f8      	b.n	80083f6 <__ascii_mbtowc+0x16>

08008404 <__ascii_wctomb>:
 8008404:	4603      	mov	r3, r0
 8008406:	4608      	mov	r0, r1
 8008408:	b141      	cbz	r1, 800841c <__ascii_wctomb+0x18>
 800840a:	2aff      	cmp	r2, #255	; 0xff
 800840c:	d904      	bls.n	8008418 <__ascii_wctomb+0x14>
 800840e:	228a      	movs	r2, #138	; 0x8a
 8008410:	f04f 30ff 	mov.w	r0, #4294967295
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	4770      	bx	lr
 8008418:	2001      	movs	r0, #1
 800841a:	700a      	strb	r2, [r1, #0]
 800841c:	4770      	bx	lr
	...

08008420 <fiprintf>:
 8008420:	b40e      	push	{r1, r2, r3}
 8008422:	b503      	push	{r0, r1, lr}
 8008424:	4601      	mov	r1, r0
 8008426:	ab03      	add	r3, sp, #12
 8008428:	4805      	ldr	r0, [pc, #20]	; (8008440 <fiprintf+0x20>)
 800842a:	f853 2b04 	ldr.w	r2, [r3], #4
 800842e:	6800      	ldr	r0, [r0, #0]
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	f7ff fd3d 	bl	8007eb0 <_vfiprintf_r>
 8008436:	b002      	add	sp, #8
 8008438:	f85d eb04 	ldr.w	lr, [sp], #4
 800843c:	b003      	add	sp, #12
 800843e:	4770      	bx	lr
 8008440:	20000064 	.word	0x20000064

08008444 <abort>:
 8008444:	2006      	movs	r0, #6
 8008446:	b508      	push	{r3, lr}
 8008448:	f000 f82c 	bl	80084a4 <raise>
 800844c:	2001      	movs	r0, #1
 800844e:	f7f9 fab8 	bl	80019c2 <_exit>

08008452 <_raise_r>:
 8008452:	291f      	cmp	r1, #31
 8008454:	b538      	push	{r3, r4, r5, lr}
 8008456:	4604      	mov	r4, r0
 8008458:	460d      	mov	r5, r1
 800845a:	d904      	bls.n	8008466 <_raise_r+0x14>
 800845c:	2316      	movs	r3, #22
 800845e:	6003      	str	r3, [r0, #0]
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	bd38      	pop	{r3, r4, r5, pc}
 8008466:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008468:	b112      	cbz	r2, 8008470 <_raise_r+0x1e>
 800846a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800846e:	b94b      	cbnz	r3, 8008484 <_raise_r+0x32>
 8008470:	4620      	mov	r0, r4
 8008472:	f000 f831 	bl	80084d8 <_getpid_r>
 8008476:	462a      	mov	r2, r5
 8008478:	4601      	mov	r1, r0
 800847a:	4620      	mov	r0, r4
 800847c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008480:	f000 b818 	b.w	80084b4 <_kill_r>
 8008484:	2b01      	cmp	r3, #1
 8008486:	d00a      	beq.n	800849e <_raise_r+0x4c>
 8008488:	1c59      	adds	r1, r3, #1
 800848a:	d103      	bne.n	8008494 <_raise_r+0x42>
 800848c:	2316      	movs	r3, #22
 800848e:	6003      	str	r3, [r0, #0]
 8008490:	2001      	movs	r0, #1
 8008492:	e7e7      	b.n	8008464 <_raise_r+0x12>
 8008494:	2400      	movs	r4, #0
 8008496:	4628      	mov	r0, r5
 8008498:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800849c:	4798      	blx	r3
 800849e:	2000      	movs	r0, #0
 80084a0:	e7e0      	b.n	8008464 <_raise_r+0x12>
	...

080084a4 <raise>:
 80084a4:	4b02      	ldr	r3, [pc, #8]	; (80084b0 <raise+0xc>)
 80084a6:	4601      	mov	r1, r0
 80084a8:	6818      	ldr	r0, [r3, #0]
 80084aa:	f7ff bfd2 	b.w	8008452 <_raise_r>
 80084ae:	bf00      	nop
 80084b0:	20000064 	.word	0x20000064

080084b4 <_kill_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	2300      	movs	r3, #0
 80084b8:	4d06      	ldr	r5, [pc, #24]	; (80084d4 <_kill_r+0x20>)
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	f7f9 fa6e 	bl	80019a2 <_kill>
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	d102      	bne.n	80084d0 <_kill_r+0x1c>
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	b103      	cbz	r3, 80084d0 <_kill_r+0x1c>
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	bd38      	pop	{r3, r4, r5, pc}
 80084d2:	bf00      	nop
 80084d4:	20000540 	.word	0x20000540

080084d8 <_getpid_r>:
 80084d8:	f7f9 ba5c 	b.w	8001994 <_getpid>

080084dc <_init>:
 80084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084de:	bf00      	nop
 80084e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e2:	bc08      	pop	{r3}
 80084e4:	469e      	mov	lr, r3
 80084e6:	4770      	bx	lr

080084e8 <_fini>:
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ea:	bf00      	nop
 80084ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ee:	bc08      	pop	{r3}
 80084f0:	469e      	mov	lr, r3
 80084f2:	4770      	bx	lr
