
F103R8T6_flash_memory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08007708  08007708  00008708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa0  08007aa0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa0  08007aa0  00008aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa8  08007aa8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa8  08007aa8  00008aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aac  08007aac  00008aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08007ab0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d8  08007c84  000091d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08007c84  000094ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001100e  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd5  00000000  00000000  0001a20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3e  00000000  00000000  0001dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d9d  00000000  00000000  0001ec26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013879  00000000  00000000  000389c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094591  00000000  00000000  0004c23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e07cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056c4  00000000  00000000  000e0810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000e5ed4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080076ec 	.word	0x080076ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080076ec 	.word	0x080076ec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f000 fec1 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f85f 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a96:	f000 fac3 	bl	8001020 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a9a:	f000 faa3 	bl	8000fe4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a9e:	f000 f8b5 	bl	8000c0c <MX_ADC1_Init>
  MX_CAN_Init();
 8000aa2:	f000 f9c5 	bl	8000e30 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000aa6:	f000 fa49 	bl	8000f3c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000aaa:	f000 fa71 	bl	8000f90 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000aae:	f000 f9f5 	bl	8000e9c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t PAGEError = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
  static FLASH_EraseInitTypeDef EraseInitStruct;
  // flash memory nulock
  HAL_FLASH_Unlock();
 8000ab6:	f002 f8b5 	bl	8002c24 <HAL_FLASH_Unlock>

  EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000aba:	4b21      	ldr	r3, [pc, #132]	@ (8000b40 <main+0xb8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = START_ADDR;
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <main+0xb8>)
 8000ac2:	4a20      	ldr	r2, [pc, #128]	@ (8000b44 <main+0xbc>)
 8000ac4:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = (END_ADDR - START_ADDR) / 1024;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b40 <main+0xb8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481b      	ldr	r0, [pc, #108]	@ (8000b40 <main+0xb8>)
 8000ad2:	f002 f98f 	bl	8002df4 <HAL_FLASHEx_Erase>

	// write
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER + 0, 0x12345678);
 8000ad6:	a312      	add	r3, pc, #72	@ (adr r3, 8000b20 <main+0x98>)
 8000ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000adc:	4919      	ldr	r1, [pc, #100]	@ (8000b44 <main+0xbc>)
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f002 f830 	bl	8002b44 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER + 4, 0x22345678);
 8000ae4:	a310      	add	r3, pc, #64	@ (adr r3, 8000b28 <main+0xa0>)
 8000ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aea:	4917      	ldr	r1, [pc, #92]	@ (8000b48 <main+0xc0>)
 8000aec:	2002      	movs	r0, #2
 8000aee:	f002 f829 	bl	8002b44 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER + 8, 0x32345678);
 8000af2:	a30f      	add	r3, pc, #60	@ (adr r3, 8000b30 <main+0xa8>)
 8000af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af8:	4914      	ldr	r1, [pc, #80]	@ (8000b4c <main+0xc4>)
 8000afa:	2002      	movs	r0, #2
 8000afc:	f002 f822 	bl	8002b44 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER + 12, 0x42345678);
 8000b00:	a30d      	add	r3, pc, #52	@ (adr r3, 8000b38 <main+0xb0>)
 8000b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b06:	4912      	ldr	r1, [pc, #72]	@ (8000b50 <main+0xc8>)
 8000b08:	2002      	movs	r0, #2
 8000b0a:	f002 f81b 	bl	8002b44 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8000b0e:	f002 f8af 	bl	8002c70 <HAL_FLASH_Lock>

	// read
	uint32_t viewer = *(uint32_t*)FLASH_USER;
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <main+0xbc>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	607b      	str	r3, [r7, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <main+0x90>
 8000b1c:	f3af 8000 	nop.w
 8000b20:	12345678 	.word	0x12345678
 8000b24:	00000000 	.word	0x00000000
 8000b28:	22345678 	.word	0x22345678
 8000b2c:	00000000 	.word	0x00000000
 8000b30:	32345678 	.word	0x32345678
 8000b34:	00000000 	.word	0x00000000
 8000b38:	42345678 	.word	0x42345678
 8000b3c:	00000000 	.word	0x00000000
 8000b40:	20000368 	.word	0x20000368
 8000b44:	08010000 	.word	0x08010000
 8000b48:	08010004 	.word	0x08010004
 8000b4c:	08010008 	.word	0x08010008
 8000b50:	0801000c 	.word	0x0801000c

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b5e:	2228      	movs	r2, #40	@ 0x28
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f004 fe97 	bl	8005896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b92:	2301      	movs	r3, #1
 8000b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ba0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fb66 	bl	800327c <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bb6:	f000 fabb 	bl	8001130 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fdd2 	bl	8003780 <HAL_RCC_ClockConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000be2:	f000 faa5 	bl	8001130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000be6:	2302      	movs	r3, #2
 8000be8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f002 ff52 	bl	8003a9c <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bfe:	f000 fa97 	bl	8001130 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	@ 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c1c:	4b82      	ldr	r3, [pc, #520]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c1e:	4a83      	ldr	r2, [pc, #524]	@ (8000e2c <MX_ADC1_Init+0x220>)
 8000c20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c22:	4b81      	ldr	r3, [pc, #516]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c30:	4b7d      	ldr	r3, [pc, #500]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c36:	4b7c      	ldr	r3, [pc, #496]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c38:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3e:	4b7a      	ldr	r3, [pc, #488]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 16;
 8000c44:	4b78      	ldr	r3, [pc, #480]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c46:	2210      	movs	r2, #16
 8000c48:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c4a:	4877      	ldr	r0, [pc, #476]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c4c:	f000 fe44 	bl	80018d8 <HAL_ADC_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c56:	f000 fa6b 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	486f      	ldr	r0, [pc, #444]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c6c:	f000 ffde 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c76:	f000 fa5b 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4868      	ldr	r0, [pc, #416]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000c88:	f000 ffd0 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c92:	f000 fa4d 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c96:	2302      	movs	r3, #2
 8000c98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4861      	ldr	r0, [pc, #388]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000ca4:	f000 ffc2 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000cae:	f000 fa3f 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	485a      	ldr	r0, [pc, #360]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000cc0:	f000 ffb4 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000cca:	f000 fa31 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000cd2:	2305      	movs	r3, #5
 8000cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4853      	ldr	r0, [pc, #332]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000cdc:	f000 ffa6 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ce6:	f000 fa23 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cea:	2305      	movs	r3, #5
 8000cec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	484c      	ldr	r0, [pc, #304]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000cf8:	f000 ff98 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000d02:	f000 fa15 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d06:	2306      	movs	r3, #6
 8000d08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	4845      	ldr	r0, [pc, #276]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000d14:	f000 ff8a 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000d1e:	f000 fa07 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d22:	2307      	movs	r3, #7
 8000d24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000d26:	2308      	movs	r3, #8
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	483e      	ldr	r0, [pc, #248]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000d30:	f000 ff7c 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000d3a:	f000 f9f9 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000d42:	2309      	movs	r3, #9
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4837      	ldr	r0, [pc, #220]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000d4c:	f000 ff6e 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8000d56:	f000 f9eb 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000d5e:	230a      	movs	r3, #10
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	4619      	mov	r1, r3
 8000d66:	4830      	ldr	r0, [pc, #192]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000d68:	f000 ff60 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 8000d72:	f000 f9dd 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d76:	230a      	movs	r3, #10
 8000d78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8000d7a:	230b      	movs	r3, #11
 8000d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	4829      	ldr	r0, [pc, #164]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000d84:	f000 ff52 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_ADC1_Init+0x186>
  {
    Error_Handler();
 8000d8e:	f000 f9cf 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d92:	230b      	movs	r3, #11
 8000d94:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8000d96:	230c      	movs	r3, #12
 8000d98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4822      	ldr	r0, [pc, #136]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000da0:	f000 ff44 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_ADC1_Init+0x1a2>
  {
    Error_Handler();
 8000daa:	f000 f9c1 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000dae:	230c      	movs	r3, #12
 8000db0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8000db2:	230d      	movs	r3, #13
 8000db4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	4619      	mov	r1, r3
 8000dba:	481b      	ldr	r0, [pc, #108]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000dbc:	f000 ff36 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_ADC1_Init+0x1be>
  {
    Error_Handler();
 8000dc6:	f000 f9b3 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000dca:	230d      	movs	r3, #13
 8000dcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8000dce:	230e      	movs	r3, #14
 8000dd0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4814      	ldr	r0, [pc, #80]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000dd8:	f000 ff28 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x1da>
  {
    Error_Handler();
 8000de2:	f000 f9a5 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000de6:	230e      	movs	r3, #14
 8000de8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8000dea:	230f      	movs	r3, #15
 8000dec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	4619      	mov	r1, r3
 8000df2:	480d      	ldr	r0, [pc, #52]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000df4:	f000 ff1a 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_ADC1_Init+0x1f6>
  {
    Error_Handler();
 8000dfe:	f000 f997 	bl	8001130 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e02:	230f      	movs	r3, #15
 8000e04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8000e06:	2310      	movs	r3, #16
 8000e08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	@ (8000e28 <MX_ADC1_Init+0x21c>)
 8000e10:	f000 ff0c 	bl	8001c2c <HAL_ADC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0x212>
  {
    Error_Handler();
 8000e1a:	f000 f989 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001f4 	.word	0x200001f4
 8000e2c:	40012400 	.word	0x40012400

08000e30 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	@ (8000e98 <MX_CAN_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e4e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000e52:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e56:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000e5a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <MX_CAN_Init+0x64>)
 8000e82:	f001 f815 	bl	8001eb0 <HAL_CAN_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f000 f950 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000268 	.word	0x20000268
 8000e98:	40006400 	.word	0x40006400

08000e9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000eba:	4a1f      	ldr	r2, [pc, #124]	@ (8000f38 <MX_TIM1_Init+0x9c>)
 8000ebc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000ec0:	2247      	movs	r2, #71	@ 0x47
 8000ec2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000eca:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000ecc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ed0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ee4:	4813      	ldr	r0, [pc, #76]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000ee6:	f002 fe8f 	bl	8003c08 <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ef0:	f000 f91e 	bl	8001130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000f02:	f002 ffd8 	bl	8003eb6 <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f0c:	f000 f910 	bl	8001130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f10:	2300      	movs	r3, #0
 8000f12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f18:	463b      	mov	r3, r7
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <MX_TIM1_Init+0x98>)
 8000f1e:	f003 f9b7 	bl	8004290 <HAL_TIMEx_MasterConfigSynchronization>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f28:	f000 f902 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000290 	.word	0x20000290
 8000f38:	40012c00 	.word	0x40012c00

08000f3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	@ (8000f8c <MX_USART1_UART_Init+0x50>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b08      	ldr	r3, [pc, #32]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f72:	4805      	ldr	r0, [pc, #20]	@ (8000f88 <MX_USART1_UART_Init+0x4c>)
 8000f74:	f003 f9fc 	bl	8004370 <HAL_UART_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f7e:	f000 f8d7 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200002d8 	.word	0x200002d8
 8000f8c:	40013800 	.word	0x40013800

08000f90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <MX_USART3_UART_Init+0x4c>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	@ (8000fe0 <MX_USART3_UART_Init+0x50>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <MX_USART3_UART_Init+0x4c>)
 8000f9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fdc <MX_USART3_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <MX_USART3_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <MX_USART3_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <MX_USART3_UART_Init+0x4c>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	@ (8000fdc <MX_USART3_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <MX_USART3_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	@ (8000fdc <MX_USART3_UART_Init+0x4c>)
 8000fc8:	f003 f9d2 	bl	8004370 <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fd2:	f000 f8ad 	bl	8001130 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000320 	.word	0x20000320
 8000fe0:	40004800 	.word	0x40004800

08000fe4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <MX_DMA_Init+0x38>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	4a0b      	ldr	r2, [pc, #44]	@ (800101c <MX_DMA_Init+0x38>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6153      	str	r3, [r2, #20]
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_DMA_Init+0x38>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	200b      	movs	r0, #11
 8001008:	f001 fb51 	bl	80026ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800100c:	200b      	movs	r0, #11
 800100e:	f001 fb6a 	bl	80026e6 <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001026:	f107 0310 	add.w	r3, r7, #16
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001034:	4b3b      	ldr	r3, [pc, #236]	@ (8001124 <MX_GPIO_Init+0x104>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a3a      	ldr	r2, [pc, #232]	@ (8001124 <MX_GPIO_Init+0x104>)
 800103a:	f043 0320 	orr.w	r3, r3, #32
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b38      	ldr	r3, [pc, #224]	@ (8001124 <MX_GPIO_Init+0x104>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0320 	and.w	r3, r3, #32
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104c:	4b35      	ldr	r3, [pc, #212]	@ (8001124 <MX_GPIO_Init+0x104>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a34      	ldr	r2, [pc, #208]	@ (8001124 <MX_GPIO_Init+0x104>)
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b32      	ldr	r3, [pc, #200]	@ (8001124 <MX_GPIO_Init+0x104>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b2f      	ldr	r3, [pc, #188]	@ (8001124 <MX_GPIO_Init+0x104>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a2e      	ldr	r2, [pc, #184]	@ (8001124 <MX_GPIO_Init+0x104>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b2c      	ldr	r3, [pc, #176]	@ (8001124 <MX_GPIO_Init+0x104>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b29      	ldr	r3, [pc, #164]	@ (8001124 <MX_GPIO_Init+0x104>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a28      	ldr	r2, [pc, #160]	@ (8001124 <MX_GPIO_Init+0x104>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <MX_GPIO_Init+0x104>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IR_MGT_CS_1_Pin|IR_MGT_CS_0_Pin|SP_DO1_Pin|SP_DO2_Pin
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 514f 	mov.w	r1, #13248	@ 0x33c0
 800109a:	4823      	ldr	r0, [pc, #140]	@ (8001128 <MX_GPIO_Init+0x108>)
 800109c:	f002 f8d6 	bl	800324c <HAL_GPIO_WritePin>
                          |IR_DCS1_Pin|IR_DCS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUSLED_GPIO_Port, STATUSLED_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010a6:	4821      	ldr	r0, [pc, #132]	@ (800112c <MX_GPIO_Init+0x10c>)
 80010a8:	f002 f8d0 	bl	800324c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IR_MGT_CS_1_Pin IR_MGT_CS_0_Pin SP_DO1_Pin SP_DO2_Pin
                           IR_DCS1_Pin IR_DCS2_Pin */
  GPIO_InitStruct.Pin = IR_MGT_CS_1_Pin|IR_MGT_CS_0_Pin|SP_DO1_Pin|SP_DO2_Pin
 80010ac:	f44f 534f 	mov.w	r3, #13248	@ 0x33c0
 80010b0:	613b      	str	r3, [r7, #16]
                          |IR_DCS1_Pin|IR_DCS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	4818      	ldr	r0, [pc, #96]	@ (8001128 <MX_GPIO_Init+0x108>)
 80010c6:	f001 ff3d 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SP_DI0_Pin SP_DI1_Pin */
  GPIO_InitStruct.Pin = SP_DI0_Pin|SP_DI1_Pin;
 80010ca:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	4812      	ldr	r0, [pc, #72]	@ (8001128 <MX_GPIO_Init+0x108>)
 80010e0:	f001 ff30 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CPSD_IN1_Pin CPSD_IN2_Pin CPSD_IN3_Pin CPSD_IN4_Pin
                           MODE1_Pin MODE2_Pin */
  GPIO_InitStruct.Pin = CPSD_IN1_Pin|CPSD_IN2_Pin|CPSD_IN3_Pin|CPSD_IN4_Pin
 80010e4:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 80010e8:	613b      	str	r3, [r7, #16]
                          |MODE1_Pin|MODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 0310 	add.w	r3, r7, #16
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <MX_GPIO_Init+0x10c>)
 80010fa:	f001 ff23 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUSLED_Pin */
  GPIO_InitStruct.Pin = STATUSLED_Pin;
 80010fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2302      	movs	r3, #2
 800110e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATUSLED_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	@ (800112c <MX_GPIO_Init+0x10c>)
 8001118:	f001 ff14 	bl	8002f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000
 8001128:	40010c00 	.word	0x40010c00
 800112c:	40011000 	.word	0x40011000

08001130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001134:	b672      	cpsid	i
}
 8001136:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <Error_Handler+0x8>

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_MspInit+0x54>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <HAL_MspInit+0x54>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	6193      	str	r3, [r2, #24]
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <HAL_MspInit+0x54>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <HAL_MspInit+0x54>)
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <HAL_MspInit+0x54>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001164:	61d3      	str	r3, [r2, #28]
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_MspInit+0x54>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_MspInit+0x58>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <HAL_MspInit+0x58>)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000
 8001194:	40010000 	.word	0x40010000

08001198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0318 	add.w	r3, r7, #24
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a42      	ldr	r2, [pc, #264]	@ (80012bc <HAL_ADC_MspInit+0x124>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d17d      	bne.n	80012b4 <HAL_ADC_MspInit+0x11c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b8:	4b41      	ldr	r3, [pc, #260]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a40      	ldr	r2, [pc, #256]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b3e      	ldr	r3, [pc, #248]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d0:	4b3b      	ldr	r3, [pc, #236]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a3a      	ldr	r2, [pc, #232]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 80011d6:	f043 0310 	orr.w	r3, r3, #16
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b38      	ldr	r3, [pc, #224]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e8:	4b35      	ldr	r3, [pc, #212]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a34      	ldr	r2, [pc, #208]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a2e      	ldr	r2, [pc, #184]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 8001206:	f043 0308 	orr.w	r3, r3, #8
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b2c      	ldr	r3, [pc, #176]	@ (80012c0 <HAL_ADC_MspInit+0x128>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001218:	233f      	movs	r3, #63	@ 0x3f
 800121a:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121c:	2303      	movs	r3, #3
 800121e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	4619      	mov	r1, r3
 8001226:	4827      	ldr	r0, [pc, #156]	@ (80012c4 <HAL_ADC_MspInit+0x12c>)
 8001228:	f001 fe8c 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800122c:	23ff      	movs	r3, #255	@ 0xff
 800122e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001230:	2303      	movs	r3, #3
 8001232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	4619      	mov	r1, r3
 800123a:	4823      	ldr	r0, [pc, #140]	@ (80012c8 <HAL_ADC_MspInit+0x130>)
 800123c:	f001 fe82 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001240:	2303      	movs	r3, #3
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	2303      	movs	r3, #3
 8001246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	4619      	mov	r1, r3
 800124e:	481f      	ldr	r0, [pc, #124]	@ (80012cc <HAL_ADC_MspInit+0x134>)
 8001250:	f001 fe78 	bl	8002f44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001254:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001256:	4a1f      	ldr	r2, [pc, #124]	@ (80012d4 <HAL_ADC_MspInit+0x13c>)
 8001258:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125a:	4b1d      	ldr	r3, [pc, #116]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001260:	4b1b      	ldr	r3, [pc, #108]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001268:	2280      	movs	r2, #128	@ 0x80
 800126a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126c:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 800126e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001272:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001274:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001276:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800127a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 800127e:	2220      	movs	r2, #32
 8001280:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001282:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001288:	4811      	ldr	r0, [pc, #68]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 800128a:	f001 fa47 	bl	800271c <HAL_DMA_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <HAL_ADC_MspInit+0x100>
    {
      Error_Handler();
 8001294:	f7ff ff4c 	bl	8001130 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 800129c:	621a      	str	r2, [r3, #32]
 800129e:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <HAL_ADC_MspInit+0x138>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2012      	movs	r0, #18
 80012aa:	f001 fa00 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012ae:	2012      	movs	r0, #18
 80012b0:	f001 fa19 	bl	80026e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012b4:	bf00      	nop
 80012b6:	3728      	adds	r7, #40	@ 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40012400 	.word	0x40012400
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	20000224 	.word	0x20000224
 80012d4:	40020008 	.word	0x40020008

080012d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a2c      	ldr	r2, [pc, #176]	@ (80013a4 <HAL_CAN_MspInit+0xcc>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d151      	bne.n	800139c <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012f8:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <HAL_CAN_MspInit+0xd0>)
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	4a2a      	ldr	r2, [pc, #168]	@ (80013a8 <HAL_CAN_MspInit+0xd0>)
 80012fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001302:	61d3      	str	r3, [r2, #28]
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <HAL_CAN_MspInit+0xd0>)
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <HAL_CAN_MspInit+0xd0>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a24      	ldr	r2, [pc, #144]	@ (80013a8 <HAL_CAN_MspInit+0xd0>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b22      	ldr	r3, [pc, #136]	@ (80013a8 <HAL_CAN_MspInit+0xd0>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001328:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800132c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	481b      	ldr	r0, [pc, #108]	@ (80013ac <HAL_CAN_MspInit+0xd4>)
 800133e:	f001 fe01 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001346:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	4619      	mov	r1, r3
 8001356:	4815      	ldr	r0, [pc, #84]	@ (80013ac <HAL_CAN_MspInit+0xd4>)
 8001358:	f001 fdf4 	bl	8002f44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	2013      	movs	r0, #19
 8001362:	f001 f9a4 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001366:	2013      	movs	r0, #19
 8001368:	f001 f9bd 	bl	80026e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2014      	movs	r0, #20
 8001372:	f001 f99c 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001376:	2014      	movs	r0, #20
 8001378:	f001 f9b5 	bl	80026e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2100      	movs	r1, #0
 8001380:	2015      	movs	r0, #21
 8001382:	f001 f994 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001386:	2015      	movs	r0, #21
 8001388:	f001 f9ad 	bl	80026e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2016      	movs	r0, #22
 8001392:	f001 f98c 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001396:	2016      	movs	r0, #22
 8001398:	f001 f9a5 	bl	80026e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40006400 	.word	0x40006400
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010800 	.word	0x40010800

080013b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <HAL_TIM_Base_MspInit+0x44>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d113      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <HAL_TIM_Base_MspInit+0x48>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	4a0c      	ldr	r2, [pc, #48]	@ (80013f8 <HAL_TIM_Base_MspInit+0x48>)
 80013c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013cc:	6193      	str	r3, [r2, #24]
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <HAL_TIM_Base_MspInit+0x48>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2019      	movs	r0, #25
 80013e0:	f001 f965 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013e4:	2019      	movs	r0, #25
 80013e6:	f001 f97e 	bl	80026e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40012c00 	.word	0x40012c00
 80013f8:	40021000 	.word	0x40021000

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0318 	add.w	r3, r7, #24
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a40      	ldr	r2, [pc, #256]	@ (8001518 <HAL_UART_MspInit+0x11c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d13a      	bne.n	8001492 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800141c:	4b3f      	ldr	r3, [pc, #252]	@ (800151c <HAL_UART_MspInit+0x120>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a3e      	ldr	r2, [pc, #248]	@ (800151c <HAL_UART_MspInit+0x120>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b3c      	ldr	r3, [pc, #240]	@ (800151c <HAL_UART_MspInit+0x120>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001434:	4b39      	ldr	r3, [pc, #228]	@ (800151c <HAL_UART_MspInit+0x120>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a38      	ldr	r2, [pc, #224]	@ (800151c <HAL_UART_MspInit+0x120>)
 800143a:	f043 0304 	orr.w	r3, r3, #4
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b36      	ldr	r3, [pc, #216]	@ (800151c <HAL_UART_MspInit+0x120>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800144c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145a:	f107 0318 	add.w	r3, r7, #24
 800145e:	4619      	mov	r1, r3
 8001460:	482f      	ldr	r0, [pc, #188]	@ (8001520 <HAL_UART_MspInit+0x124>)
 8001462:	f001 fd6f 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	4619      	mov	r1, r3
 800147a:	4829      	ldr	r0, [pc, #164]	@ (8001520 <HAL_UART_MspInit+0x124>)
 800147c:	f001 fd62 	bl	8002f44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2025      	movs	r0, #37	@ 0x25
 8001486:	f001 f912 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800148a:	2025      	movs	r0, #37	@ 0x25
 800148c:	f001 f92b 	bl	80026e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001490:	e03e      	b.n	8001510 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART3)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a23      	ldr	r2, [pc, #140]	@ (8001524 <HAL_UART_MspInit+0x128>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d139      	bne.n	8001510 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <HAL_UART_MspInit+0x120>)
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	4a1e      	ldr	r2, [pc, #120]	@ (800151c <HAL_UART_MspInit+0x120>)
 80014a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a6:	61d3      	str	r3, [r2, #28]
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <HAL_UART_MspInit+0x120>)
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <HAL_UART_MspInit+0x120>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a18      	ldr	r2, [pc, #96]	@ (800151c <HAL_UART_MspInit+0x120>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <HAL_UART_MspInit+0x120>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0318 	add.w	r3, r7, #24
 80014de:	4619      	mov	r1, r3
 80014e0:	4811      	ldr	r0, [pc, #68]	@ (8001528 <HAL_UART_MspInit+0x12c>)
 80014e2:	f001 fd2f 	bl	8002f44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	4619      	mov	r1, r3
 80014fa:	480b      	ldr	r0, [pc, #44]	@ (8001528 <HAL_UART_MspInit+0x12c>)
 80014fc:	f001 fd22 	bl	8002f44 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2027      	movs	r0, #39	@ 0x27
 8001506:	f001 f8d2 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800150a:	2027      	movs	r0, #39	@ 0x27
 800150c:	f001 f8eb 	bl	80026e6 <HAL_NVIC_EnableIRQ>
}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	@ 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40013800 	.word	0x40013800
 800151c:	40021000 	.word	0x40021000
 8001520:	40010800 	.word	0x40010800
 8001524:	40004800 	.word	0x40004800
 8001528:	40010c00 	.word	0x40010c00

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <NMI_Handler+0x4>

08001534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <MemManage_Handler+0x4>

08001544 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <BusFault_Handler+0x4>

0800154c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <UsageFault_Handler+0x4>

08001554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f990 	bl	80018a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <DMA1_Channel1_IRQHandler+0x10>)
 800158a:	f001 f9d5 	bl	8002938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000224 	.word	0x20000224

08001598 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800159c:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <ADC1_2_IRQHandler+0x10>)
 800159e:	f000 fa73 	bl	8001a88 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200001f4 	.word	0x200001f4

080015ac <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015b0:	4802      	ldr	r0, [pc, #8]	@ (80015bc <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80015b2:	f000 fd78 	bl	80020a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000268 	.word	0x20000268

080015c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015c6:	f000 fd6e 	bl	80020a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000268 	.word	0x20000268

080015d4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015d8:	4802      	ldr	r0, [pc, #8]	@ (80015e4 <CAN1_RX1_IRQHandler+0x10>)
 80015da:	f000 fd64 	bl	80020a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000268 	.word	0x20000268

080015e8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <CAN1_SCE_IRQHandler+0x10>)
 80015ee:	f000 fd5a 	bl	80020a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000268 	.word	0x20000268

080015fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <TIM1_UP_IRQHandler+0x10>)
 8001602:	f002 fb50 	bl	8003ca6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20000290 	.word	0x20000290

08001610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <USART1_IRQHandler+0x10>)
 8001616:	f002 fefb 	bl	8004410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200002d8 	.word	0x200002d8

08001624 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <USART3_IRQHandler+0x10>)
 800162a:	f002 fef1 	bl	8004410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000320 	.word	0x20000320

08001638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <_kill>:

int _kill(int pid, int sig)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001650:	f004 f974 	bl	800593c <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	2216      	movs	r2, #22
 8001658:	601a      	str	r2, [r3, #0]
  return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_exit>:

void _exit (int status)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800166e:	f04f 31ff 	mov.w	r1, #4294967295
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffe7 	bl	8001646 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <_exit+0x12>

0800167c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
  }

  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
  }
  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr

08001704 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001714:	605a      	str	r2, [r3, #4]
  return 0;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <_isatty>:

int _isatty(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr

08001736 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
	...

08001750 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001758:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <_sbrk+0x5c>)
 800175a:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <_sbrk+0x60>)
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001764:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d102      	bne.n	8001772 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800176c:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <_sbrk+0x64>)
 800176e:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <_sbrk+0x68>)
 8001770:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <_sbrk+0x64>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	429a      	cmp	r2, r3
 800177e:	d207      	bcs.n	8001790 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001780:	f004 f8dc 	bl	800593c <__errno>
 8001784:	4603      	mov	r3, r0
 8001786:	220c      	movs	r2, #12
 8001788:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e009      	b.n	80017a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	4a05      	ldr	r2, [pc, #20]	@ (80017b4 <_sbrk+0x64>)
 80017a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a2:	68fb      	ldr	r3, [r7, #12]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20005000 	.word	0x20005000
 80017b0:	00000400 	.word	0x00000400
 80017b4:	20000378 	.word	0x20000378
 80017b8:	200004f0 	.word	0x200004f0

080017bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c8:	f7ff fff8 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017cc:	480b      	ldr	r0, [pc, #44]	@ (80017fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ce:	490c      	ldr	r1, [pc, #48]	@ (8001800 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001804 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a09      	ldr	r2, [pc, #36]	@ (8001808 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017e4:	4c09      	ldr	r4, [pc, #36]	@ (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f2:	f004 f8a9 	bl	8005948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f6:	f7ff f947 	bl	8000a88 <main>
  bx lr
 80017fa:	4770      	bx	lr
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001804:	08007ab0 	.word	0x08007ab0
  ldr r2, =_sbss
 8001808:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800180c:	200004ec 	.word	0x200004ec

08001810 <DMA1_Channel2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <DMA1_Channel2_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <HAL_Init+0x28>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a07      	ldr	r2, [pc, #28]	@ (800183c <HAL_Init+0x28>)
 800181e:	f043 0310 	orr.w	r3, r3, #16
 8001822:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001824:	2003      	movs	r0, #3
 8001826:	f000 ff37 	bl	8002698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800182a:	200f      	movs	r0, #15
 800182c:	f000 f808 	bl	8001840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001830:	f7ff fc84 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40022000 	.word	0x40022000

08001840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_InitTick+0x54>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <HAL_InitTick+0x58>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
 8001852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001856:	fbb3 f3f1 	udiv	r3, r3, r1
 800185a:	fbb2 f3f3 	udiv	r3, r2, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f000 ff4f 	bl	8002702 <HAL_SYSTICK_Config>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e00e      	b.n	800188c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b0f      	cmp	r3, #15
 8001872:	d80a      	bhi.n	800188a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001874:	2200      	movs	r2, #0
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	f04f 30ff 	mov.w	r0, #4294967295
 800187c:	f000 ff17 	bl	80026ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <HAL_InitTick+0x5c>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e000      	b.n	800188c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
}
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	20000000 	.word	0x20000000
 8001898:	20000008 	.word	0x20000008
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_IncTick+0x1c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <HAL_IncTick+0x20>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a03      	ldr	r2, [pc, #12]	@ (80018c0 <HAL_IncTick+0x20>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000008 	.word	0x20000008
 80018c0:	2000037c 	.word	0x2000037c

080018c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b02      	ldr	r3, [pc, #8]	@ (80018d4 <HAL_GetTick+0x10>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr
 80018d4:	2000037c 	.word	0x2000037c

080018d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0be      	b.n	8001a78 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fc3e 	bl	8001198 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fa7d 	bl	8001e1c <ADC_ConversionStop_Disable>
 8001922:	4603      	mov	r3, r0
 8001924:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192a:	f003 0310 	and.w	r3, r3, #16
 800192e:	2b00      	cmp	r3, #0
 8001930:	f040 8099 	bne.w	8001a66 <HAL_ADC_Init+0x18e>
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f040 8095 	bne.w	8001a66 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001944:	f023 0302 	bic.w	r3, r3, #2
 8001948:	f043 0202 	orr.w	r2, r3, #2
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001958:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	7b1b      	ldrb	r3, [r3, #12]
 800195e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001960:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	4313      	orrs	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001970:	d003      	beq.n	800197a <HAL_ADC_Init+0xa2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d102      	bne.n	8001980 <HAL_ADC_Init+0xa8>
 800197a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800197e:	e000      	b.n	8001982 <HAL_ADC_Init+0xaa>
 8001980:	2300      	movs	r3, #0
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7d1b      	ldrb	r3, [r3, #20]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d119      	bne.n	80019c4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7b1b      	ldrb	r3, [r3, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	3b01      	subs	r3, #1
 800199e:	035a      	lsls	r2, r3, #13
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	e00b      	b.n	80019c4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b0:	f043 0220 	orr.w	r2, r3, #32
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	4b28      	ldr	r3, [pc, #160]	@ (8001a80 <HAL_ADC_Init+0x1a8>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	430b      	orrs	r3, r1
 80019ea:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80019f4:	d003      	beq.n	80019fe <HAL_ADC_Init+0x126>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d104      	bne.n	8001a08 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	051b      	lsls	r3, r3, #20
 8001a06:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b18      	ldr	r3, [pc, #96]	@ (8001a84 <HAL_ADC_Init+0x1ac>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d10b      	bne.n	8001a44 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a42:	e018      	b.n	8001a76 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a48:	f023 0312 	bic.w	r3, r3, #18
 8001a4c:	f043 0210 	orr.w	r2, r3, #16
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a58:	f043 0201 	orr.w	r2, r3, #1
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a64:	e007      	b.n	8001a76 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6a:	f043 0210 	orr.w	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	ffe1f7fd 	.word	0xffe1f7fd
 8001a84:	ff1f0efe 	.word	0xff1f0efe

08001a88 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 0320 	and.w	r3, r3, #32
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d03e      	beq.n	8001b28 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d039      	beq.n	8001b28 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001ad6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ada:	d11d      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d119      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0220 	bic.w	r2, r2, #32
 8001af2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b10:	f043 0201 	orr.w	r2, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f874 	bl	8001c06 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f06f 0212 	mvn.w	r2, #18
 8001b26:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d04d      	beq.n	8001bce <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d048      	beq.n	8001bce <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d105      	bne.n	8001b54 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001b5e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001b62:	d012      	beq.n	8001b8a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d125      	bne.n	8001bbe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001b7c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001b80:	d11d      	bne.n	8001bbe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b98:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d105      	bne.n	8001bbe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	f043 0201 	orr.w	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f96d 	bl	8001e9e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f06f 020c 	mvn.w	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d012      	beq.n	8001bfe <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00d      	beq.n	8001bfe <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f812 	bl	8001c18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0201 	mvn.w	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
	...

08001c2c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x20>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e0dc      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x1da>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d81c      	bhi.n	8001c96 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3b05      	subs	r3, #5
 8001c6e:	221f      	movs	r2, #31
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	4019      	ands	r1, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b05      	subs	r3, #5
 8001c88:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c94:	e03c      	b.n	8001d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d81c      	bhi.n	8001cd8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b23      	subs	r3, #35	@ 0x23
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	4019      	ands	r1, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3b23      	subs	r3, #35	@ 0x23
 8001cca:	fa00 f203 	lsl.w	r2, r0, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cd6:	e01b      	b.n	8001d10 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3b41      	subs	r3, #65	@ 0x41
 8001cea:	221f      	movs	r2, #31
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4019      	ands	r1, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	3b41      	subs	r3, #65	@ 0x41
 8001d04:	fa00 f203 	lsl.w	r2, r0, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b09      	cmp	r3, #9
 8001d16:	d91c      	bls.n	8001d52 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68d9      	ldr	r1, [r3, #12]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	3b1e      	subs	r3, #30
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4019      	ands	r1, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6898      	ldr	r0, [r3, #8]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	3b1e      	subs	r3, #30
 8001d44:	fa00 f203 	lsl.w	r2, r0, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]
 8001d50:	e019      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6919      	ldr	r1, [r3, #16]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	2207      	movs	r2, #7
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4019      	ands	r1, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	6898      	ldr	r0, [r3, #8]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d003      	beq.n	8001d96 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d92:	2b11      	cmp	r3, #17
 8001d94:	d132      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e10 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d125      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d126      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001dbc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d11a      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <HAL_ADC_ConfigChannel+0x1e8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a13      	ldr	r2, [pc, #76]	@ (8001e18 <HAL_ADC_ConfigChannel+0x1ec>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	0c9a      	lsrs	r2, r3, #18
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ddc:	e002      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f9      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x1b2>
 8001dea:	e007      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	40012400 	.word	0x40012400
 8001e14:	20000000 	.word	0x20000000
 8001e18:	431bde83 	.word	0x431bde83

08001e1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d12e      	bne.n	8001e94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0201 	bic.w	r2, r2, #1
 8001e44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e46:	f7ff fd3d 	bl	80018c4 <HAL_GetTick>
 8001e4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e4c:	e01b      	b.n	8001e86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e4e:	f7ff fd39 	bl	80018c4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d914      	bls.n	8001e86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d10d      	bne.n	8001e86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6e:	f043 0210 	orr.w	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7a:	f043 0201 	orr.w	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e007      	b.n	8001e96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d0dc      	beq.n	8001e4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0ed      	b.n	800209e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff fa02 	bl	80012d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ee4:	f7ff fcee 	bl	80018c4 <HAL_GetTick>
 8001ee8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eea:	e012      	b.n	8001f12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001eec:	f7ff fcea 	bl	80018c4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b0a      	cmp	r3, #10
 8001ef8:	d90b      	bls.n	8001f12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2205      	movs	r2, #5
 8001f0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0c5      	b.n	800209e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0e5      	beq.n	8001eec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0202 	bic.w	r2, r2, #2
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f30:	f7ff fcc8 	bl	80018c4 <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f36:	e012      	b.n	8001f5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f38:	f7ff fcc4 	bl	80018c4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b0a      	cmp	r3, #10
 8001f44:	d90b      	bls.n	8001f5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2205      	movs	r2, #5
 8001f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e09f      	b.n	800209e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1e5      	bne.n	8001f38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	7e1b      	ldrb	r3, [r3, #24]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d108      	bne.n	8001f86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e007      	b.n	8001f96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	7e5b      	ldrb	r3, [r3, #25]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d108      	bne.n	8001fb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e007      	b.n	8001fc0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7e9b      	ldrb	r3, [r3, #26]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d108      	bne.n	8001fda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0220 	orr.w	r2, r2, #32
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e007      	b.n	8001fea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0220 	bic.w	r2, r2, #32
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7edb      	ldrb	r3, [r3, #27]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d108      	bne.n	8002004 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0210 	bic.w	r2, r2, #16
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e007      	b.n	8002014 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0210 	orr.w	r2, r2, #16
 8002012:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7f1b      	ldrb	r3, [r3, #28]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d108      	bne.n	800202e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0208 	orr.w	r2, r2, #8
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e007      	b.n	800203e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0208 	bic.w	r2, r2, #8
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7f5b      	ldrb	r3, [r3, #29]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d108      	bne.n	8002058 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0204 	orr.w	r2, r2, #4
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e007      	b.n	8002068 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0204 	bic.w	r2, r2, #4
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	ea42 0103 	orr.w	r1, r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	1e5a      	subs	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b08a      	sub	sp, #40	@ 0x28
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d07c      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d023      	beq.n	800213e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f983 	bl	8002414 <HAL_CAN_TxMailbox0CompleteCallback>
 800210e:	e016      	b.n	800213e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d004      	beq.n	8002124 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
 8002122:	e00c      	b.n	800213e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b00      	cmp	r3, #0
 800212c:	d004      	beq.n	8002138 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
 8002136:	e002      	b.n	800213e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f986 	bl	800244a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d024      	beq.n	8002192 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002150:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f962 	bl	8002426 <HAL_CAN_TxMailbox1CompleteCallback>
 8002162:	e016      	b.n	8002192 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
 8002176:	e00c      	b.n	8002192 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
 800218a:	e002      	b.n	8002192 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f965 	bl	800245c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d024      	beq.n	80021e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f941 	bl	8002438 <HAL_CAN_TxMailbox2CompleteCallback>
 80021b6:	e016      	b.n	80021e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d004      	beq.n	80021cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ca:	e00c      	b.n	80021e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d004      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80021de:	e002      	b.n	80021e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f944 	bl	800246e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00c      	beq.n	800220a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2210      	movs	r2, #16
 8002208:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b00      	cmp	r3, #0
 800221c:	d006      	beq.n	800222c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2208      	movs	r2, #8
 8002224:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f933 	bl	8002492 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f91b 	bl	8002480 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2210      	movs	r2, #16
 800226c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00b      	beq.n	8002290 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d006      	beq.n	8002290 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2208      	movs	r2, #8
 8002288:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f913 	bl	80024b6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f8fb 	bl	80024a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00b      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d006      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2210      	movs	r2, #16
 80022c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8fc 	bl	80024c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00b      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0308 	and.w	r3, r3, #8
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2208      	movs	r2, #8
 80022ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 f8f4 	bl	80024da <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d07b      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d072      	beq.n	80023ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002360:	2b00      	cmp	r3, #0
 8002362:	d043      	beq.n	80023ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d03e      	beq.n	80023ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002374:	2b60      	cmp	r3, #96	@ 0x60
 8002376:	d02b      	beq.n	80023d0 <HAL_CAN_IRQHandler+0x32a>
 8002378:	2b60      	cmp	r3, #96	@ 0x60
 800237a:	d82e      	bhi.n	80023da <HAL_CAN_IRQHandler+0x334>
 800237c:	2b50      	cmp	r3, #80	@ 0x50
 800237e:	d022      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x320>
 8002380:	2b50      	cmp	r3, #80	@ 0x50
 8002382:	d82a      	bhi.n	80023da <HAL_CAN_IRQHandler+0x334>
 8002384:	2b40      	cmp	r3, #64	@ 0x40
 8002386:	d019      	beq.n	80023bc <HAL_CAN_IRQHandler+0x316>
 8002388:	2b40      	cmp	r3, #64	@ 0x40
 800238a:	d826      	bhi.n	80023da <HAL_CAN_IRQHandler+0x334>
 800238c:	2b30      	cmp	r3, #48	@ 0x30
 800238e:	d010      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x30c>
 8002390:	2b30      	cmp	r3, #48	@ 0x30
 8002392:	d822      	bhi.n	80023da <HAL_CAN_IRQHandler+0x334>
 8002394:	2b10      	cmp	r3, #16
 8002396:	d002      	beq.n	800239e <HAL_CAN_IRQHandler+0x2f8>
 8002398:	2b20      	cmp	r3, #32
 800239a:	d005      	beq.n	80023a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800239c:	e01d      	b.n	80023da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023a6:	e019      	b.n	80023dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	f043 0310 	orr.w	r3, r3, #16
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023b0:	e014      	b.n	80023dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	f043 0320 	orr.w	r3, r3, #32
 80023b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023ba:	e00f      	b.n	80023dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023c4:	e00a      	b.n	80023dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023ce:	e005      	b.n	80023dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023d8:	e000      	b.n	80023dc <HAL_CAN_IRQHandler+0x336>
            break;
 80023da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2204      	movs	r2, #4
 80023f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002400:	431a      	orrs	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f870 	bl	80024ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800240c:	bf00      	nop
 800240e:	3728      	adds	r7, #40	@ 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr

08002426 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr

08002438 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr

0800244a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr

080024c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
	...

08002500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800251c:	4013      	ands	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800252c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002532:	4a04      	ldr	r2, [pc, #16]	@ (8002544 <__NVIC_SetPriorityGrouping+0x44>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	60d3      	str	r3, [r2, #12]
}
 8002538:	bf00      	nop
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800254c:	4b04      	ldr	r3, [pc, #16]	@ (8002560 <__NVIC_GetPriorityGrouping+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	f003 0307 	and.w	r3, r3, #7
}
 8002556:	4618      	mov	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	db0b      	blt.n	800258e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	f003 021f 	and.w	r2, r3, #31
 800257c:	4906      	ldr	r1, [pc, #24]	@ (8002598 <__NVIC_EnableIRQ+0x34>)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	2001      	movs	r0, #1
 8002586:	fa00 f202 	lsl.w	r2, r0, r2
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	@ (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	@ (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	@ 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	@ 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002664:	d301      	bcc.n	800266a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002666:	2301      	movs	r3, #1
 8002668:	e00f      	b.n	800268a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266a:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <SysTick_Config+0x40>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002672:	210f      	movs	r1, #15
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f7ff ff90 	bl	800259c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <SysTick_Config+0x40>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002682:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <SysTick_Config+0x40>)
 8002684:	2207      	movs	r2, #7
 8002686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	e000e010 	.word	0xe000e010

08002698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff2d 	bl	8002500 <__NVIC_SetPriorityGrouping>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c0:	f7ff ff42 	bl	8002548 <__NVIC_GetPriorityGrouping>
 80026c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f7ff ff90 	bl	80025f0 <NVIC_EncodePriority>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff5f 	bl	800259c <__NVIC_SetPriority>
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff35 	bl	8002564 <__NVIC_EnableIRQ>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ffa2 	bl	8002654 <SysTick_Config>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e043      	b.n	80027ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	461a      	mov	r2, r3
 8002738:	4b22      	ldr	r3, [pc, #136]	@ (80027c4 <HAL_DMA_Init+0xa8>)
 800273a:	4413      	add	r3, r2
 800273c:	4a22      	ldr	r2, [pc, #136]	@ (80027c8 <HAL_DMA_Init+0xac>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	009a      	lsls	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1f      	ldr	r2, [pc, #124]	@ (80027cc <HAL_DMA_Init+0xb0>)
 800274e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002766:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800276a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	bffdfff8 	.word	0xbffdfff8
 80027c8:	cccccccd 	.word	0xcccccccd
 80027cc:	40020000 	.word	0x40020000

080027d0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2204      	movs	r2, #4
 80027ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e020      	b.n	800283c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 020e 	bic.w	r2, r2, #14
 8002808:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0201 	bic.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800283a:	7bfb      	ldrb	r3, [r7, #15]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
	...

08002848 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d005      	beq.n	800286c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2204      	movs	r2, #4
 8002864:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
 800286a:	e051      	b.n	8002910 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 020e 	bic.w	r2, r2, #14
 800287a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0201 	bic.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a22      	ldr	r2, [pc, #136]	@ (800291c <HAL_DMA_Abort_IT+0xd4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d029      	beq.n	80028ea <HAL_DMA_Abort_IT+0xa2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a21      	ldr	r2, [pc, #132]	@ (8002920 <HAL_DMA_Abort_IT+0xd8>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d022      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x9e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002924 <HAL_DMA_Abort_IT+0xdc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d01a      	beq.n	80028e0 <HAL_DMA_Abort_IT+0x98>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002928 <HAL_DMA_Abort_IT+0xe0>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d012      	beq.n	80028da <HAL_DMA_Abort_IT+0x92>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a1c      	ldr	r2, [pc, #112]	@ (800292c <HAL_DMA_Abort_IT+0xe4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00a      	beq.n	80028d4 <HAL_DMA_Abort_IT+0x8c>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002930 <HAL_DMA_Abort_IT+0xe8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d102      	bne.n	80028ce <HAL_DMA_Abort_IT+0x86>
 80028c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80028cc:	e00e      	b.n	80028ec <HAL_DMA_Abort_IT+0xa4>
 80028ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028d2:	e00b      	b.n	80028ec <HAL_DMA_Abort_IT+0xa4>
 80028d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028d8:	e008      	b.n	80028ec <HAL_DMA_Abort_IT+0xa4>
 80028da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028de:	e005      	b.n	80028ec <HAL_DMA_Abort_IT+0xa4>
 80028e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028e4:	e002      	b.n	80028ec <HAL_DMA_Abort_IT+0xa4>
 80028e6:	2310      	movs	r3, #16
 80028e8:	e000      	b.n	80028ec <HAL_DMA_Abort_IT+0xa4>
 80028ea:	2301      	movs	r3, #1
 80028ec:	4a11      	ldr	r2, [pc, #68]	@ (8002934 <HAL_DMA_Abort_IT+0xec>)
 80028ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	4798      	blx	r3
    } 
  }
  return status;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40020008 	.word	0x40020008
 8002920:	4002001c 	.word	0x4002001c
 8002924:	40020030 	.word	0x40020030
 8002928:	40020044 	.word	0x40020044
 800292c:	40020058 	.word	0x40020058
 8002930:	4002006c 	.word	0x4002006c
 8002934:	40020000 	.word	0x40020000

08002938 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	2204      	movs	r2, #4
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d04f      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xc8>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d04a      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0320 	and.w	r3, r3, #32
 8002974:	2b00      	cmp	r3, #0
 8002976:	d107      	bne.n	8002988 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0204 	bic.w	r2, r2, #4
 8002986:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a66      	ldr	r2, [pc, #408]	@ (8002b28 <HAL_DMA_IRQHandler+0x1f0>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d029      	beq.n	80029e6 <HAL_DMA_IRQHandler+0xae>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a65      	ldr	r2, [pc, #404]	@ (8002b2c <HAL_DMA_IRQHandler+0x1f4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d022      	beq.n	80029e2 <HAL_DMA_IRQHandler+0xaa>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a63      	ldr	r2, [pc, #396]	@ (8002b30 <HAL_DMA_IRQHandler+0x1f8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d01a      	beq.n	80029dc <HAL_DMA_IRQHandler+0xa4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a62      	ldr	r2, [pc, #392]	@ (8002b34 <HAL_DMA_IRQHandler+0x1fc>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d012      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x9e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a60      	ldr	r2, [pc, #384]	@ (8002b38 <HAL_DMA_IRQHandler+0x200>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x98>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5f      	ldr	r2, [pc, #380]	@ (8002b3c <HAL_DMA_IRQHandler+0x204>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d102      	bne.n	80029ca <HAL_DMA_IRQHandler+0x92>
 80029c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80029c8:	e00e      	b.n	80029e8 <HAL_DMA_IRQHandler+0xb0>
 80029ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80029ce:	e00b      	b.n	80029e8 <HAL_DMA_IRQHandler+0xb0>
 80029d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80029d4:	e008      	b.n	80029e8 <HAL_DMA_IRQHandler+0xb0>
 80029d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80029da:	e005      	b.n	80029e8 <HAL_DMA_IRQHandler+0xb0>
 80029dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029e0:	e002      	b.n	80029e8 <HAL_DMA_IRQHandler+0xb0>
 80029e2:	2340      	movs	r3, #64	@ 0x40
 80029e4:	e000      	b.n	80029e8 <HAL_DMA_IRQHandler+0xb0>
 80029e6:	2304      	movs	r3, #4
 80029e8:	4a55      	ldr	r2, [pc, #340]	@ (8002b40 <HAL_DMA_IRQHandler+0x208>)
 80029ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8094 	beq.w	8002b1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80029fe:	e08e      	b.n	8002b1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	2202      	movs	r2, #2
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d056      	beq.n	8002abe <HAL_DMA_IRQHandler+0x186>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d051      	beq.n	8002abe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10b      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 020a 	bic.w	r2, r2, #10
 8002a36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a38      	ldr	r2, [pc, #224]	@ (8002b28 <HAL_DMA_IRQHandler+0x1f0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d029      	beq.n	8002a9e <HAL_DMA_IRQHandler+0x166>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a37      	ldr	r2, [pc, #220]	@ (8002b2c <HAL_DMA_IRQHandler+0x1f4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d022      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x162>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a35      	ldr	r2, [pc, #212]	@ (8002b30 <HAL_DMA_IRQHandler+0x1f8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01a      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x15c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a34      	ldr	r2, [pc, #208]	@ (8002b34 <HAL_DMA_IRQHandler+0x1fc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d012      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x156>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a32      	ldr	r2, [pc, #200]	@ (8002b38 <HAL_DMA_IRQHandler+0x200>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x150>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a31      	ldr	r2, [pc, #196]	@ (8002b3c <HAL_DMA_IRQHandler+0x204>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d102      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x14a>
 8002a7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002a80:	e00e      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x168>
 8002a82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a86:	e00b      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x168>
 8002a88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a8c:	e008      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x168>
 8002a8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a92:	e005      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x168>
 8002a94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a98:	e002      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x168>
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	e000      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x168>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	4a27      	ldr	r2, [pc, #156]	@ (8002b40 <HAL_DMA_IRQHandler+0x208>)
 8002aa2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d034      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002abc:	e02f      	b.n	8002b1e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d028      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x1e8>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 020e 	bic.w	r2, r2, #14
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	2101      	movs	r1, #1
 8002af2:	fa01 f202 	lsl.w	r2, r1, r2
 8002af6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
    }
  }
  return;
 8002b1e:	bf00      	nop
 8002b20:	bf00      	nop
}
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40020008 	.word	0x40020008
 8002b2c:	4002001c 	.word	0x4002001c
 8002b30:	40020030 	.word	0x40020030
 8002b34:	40020044 	.word	0x40020044
 8002b38:	40020058 	.word	0x40020058
 8002b3c:	4002006c 	.word	0x4002006c
 8002b40:	40020000 	.word	0x40020000

08002b44 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c1c <HAL_FLASH_Program+0xd8>)
 8002b60:	7e1b      	ldrb	r3, [r3, #24]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_FLASH_Program+0x26>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e054      	b.n	8002c14 <HAL_FLASH_Program+0xd0>
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c1c <HAL_FLASH_Program+0xd8>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002b74:	f000 f8a8 	bl	8002cc8 <FLASH_WaitForLastOperation>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d144      	bne.n	8002c0c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	757b      	strb	r3, [r7, #21]
 8002b8c:	e007      	b.n	8002b9e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d102      	bne.n	8002b9a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002b94:	2302      	movs	r3, #2
 8002b96:	757b      	strb	r3, [r7, #21]
 8002b98:	e001      	b.n	8002b9e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	75bb      	strb	r3, [r7, #22]
 8002ba2:	e02d      	b.n	8002c00 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002ba4:	7dbb      	ldrb	r3, [r7, #22]
 8002ba6:	005a      	lsls	r2, r3, #1
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	eb02 0c03 	add.w	ip, r2, r3
 8002bae:	7dbb      	ldrb	r3, [r7, #22]
 8002bb0:	0119      	lsls	r1, r3, #4
 8002bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bb6:	f1c1 0620 	rsb	r6, r1, #32
 8002bba:	f1a1 0020 	sub.w	r0, r1, #32
 8002bbe:	fa22 f401 	lsr.w	r4, r2, r1
 8002bc2:	fa03 f606 	lsl.w	r6, r3, r6
 8002bc6:	4334      	orrs	r4, r6
 8002bc8:	fa23 f000 	lsr.w	r0, r3, r0
 8002bcc:	4304      	orrs	r4, r0
 8002bce:	fa23 f501 	lsr.w	r5, r3, r1
 8002bd2:	b2a3      	uxth	r3, r4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4660      	mov	r0, ip
 8002bd8:	f000 f85a 	bl	8002c90 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002bdc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002be0:	f000 f872 	bl	8002cc8 <FLASH_WaitForLastOperation>
 8002be4:	4603      	mov	r3, r0
 8002be6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002be8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c20 <HAL_FLASH_Program+0xdc>)
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	4a0c      	ldr	r2, [pc, #48]	@ (8002c20 <HAL_FLASH_Program+0xdc>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002bf4:	7dfb      	ldrb	r3, [r7, #23]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8002bfa:	7dbb      	ldrb	r3, [r7, #22]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	75bb      	strb	r3, [r7, #22]
 8002c00:	7dba      	ldrb	r2, [r7, #22]
 8002c02:	7d7b      	ldrb	r3, [r7, #21]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3cd      	bcc.n	8002ba4 <HAL_FLASH_Program+0x60>
 8002c08:	e000      	b.n	8002c0c <HAL_FLASH_Program+0xc8>
      {
        break;
 8002c0a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c0c:	4b03      	ldr	r3, [pc, #12]	@ (8002c1c <HAL_FLASH_Program+0xd8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	761a      	strb	r2, [r3, #24]

  return status;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c1c:	20000380 	.word	0x20000380
 8002c20:	40022000 	.word	0x40022000

08002c24 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_FLASH_Unlock+0x40>)
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_FLASH_Unlock+0x40>)
 8002c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c68 <HAL_FLASH_Unlock+0x44>)
 8002c3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c40:	4b08      	ldr	r3, [pc, #32]	@ (8002c64 <HAL_FLASH_Unlock+0x40>)
 8002c42:	4a0a      	ldr	r2, [pc, #40]	@ (8002c6c <HAL_FLASH_Unlock+0x48>)
 8002c44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c46:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <HAL_FLASH_Unlock+0x40>)
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8002c56:	79fb      	ldrb	r3, [r7, #7]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40022000 	.word	0x40022000
 8002c68:	45670123 	.word	0x45670123
 8002c6c:	cdef89ab 	.word	0xcdef89ab

08002c70 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_FLASH_Lock+0x1c>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	4a04      	ldr	r2, [pc, #16]	@ (8002c8c <HAL_FLASH_Lock+0x1c>)
 8002c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c7e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40022000 	.word	0x40022000

08002c90 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c9c:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <FLASH_Program_HalfWord+0x30>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002ca2:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <FLASH_Program_HalfWord+0x34>)
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	4a07      	ldr	r2, [pc, #28]	@ (8002cc4 <FLASH_Program_HalfWord+0x34>)
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	887a      	ldrh	r2, [r7, #2]
 8002cb2:	801a      	strh	r2, [r3, #0]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000380 	.word	0x20000380
 8002cc4:	40022000 	.word	0x40022000

08002cc8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7fe fdf8 	bl	80018c4 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cd6:	e010      	b.n	8002cfa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d00c      	beq.n	8002cfa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <FLASH_WaitForLastOperation+0x2e>
 8002ce6:	f7fe fded 	bl	80018c4 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d201      	bcs.n	8002cfa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e025      	b.n	8002d46 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cfa:	4b15      	ldr	r3, [pc, #84]	@ (8002d50 <FLASH_WaitForLastOperation+0x88>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e8      	bne.n	8002cd8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002d06:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <FLASH_WaitForLastOperation+0x88>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002d12:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <FLASH_WaitForLastOperation+0x88>)
 8002d14:	2220      	movs	r2, #32
 8002d16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d18:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <FLASH_WaitForLastOperation+0x88>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002d24:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <FLASH_WaitForLastOperation+0x88>)
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d30:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <FLASH_WaitForLastOperation+0x88>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002d3c:	f000 f80a 	bl	8002d54 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40022000 	.word	0x40022000

08002d54 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002d5e:	4b23      	ldr	r3, [pc, #140]	@ (8002dec <FLASH_SetErrorCode+0x98>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002d6a:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <FLASH_SetErrorCode+0x9c>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f043 0302 	orr.w	r3, r3, #2
 8002d72:	4a1f      	ldr	r2, [pc, #124]	@ (8002df0 <FLASH_SetErrorCode+0x9c>)
 8002d74:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f043 0310 	orr.w	r3, r3, #16
 8002d7c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <FLASH_SetErrorCode+0x98>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d009      	beq.n	8002d9e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002d8a:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <FLASH_SetErrorCode+0x9c>)
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <FLASH_SetErrorCode+0x9c>)
 8002d94:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002d9e:	4b13      	ldr	r3, [pc, #76]	@ (8002dec <FLASH_SetErrorCode+0x98>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002daa:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <FLASH_SetErrorCode+0x9c>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	4a0f      	ldr	r2, [pc, #60]	@ (8002df0 <FLASH_SetErrorCode+0x9c>)
 8002db4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002db6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <FLASH_SetErrorCode+0x98>)
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	4a0c      	ldr	r2, [pc, #48]	@ (8002dec <FLASH_SetErrorCode+0x98>)
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f240 1201 	movw	r2, #257	@ 0x101
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d106      	bne.n	8002dda <FLASH_SetErrorCode+0x86>
 8002dcc:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <FLASH_SetErrorCode+0x98>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	4a06      	ldr	r2, [pc, #24]	@ (8002dec <FLASH_SetErrorCode+0x98>)
 8002dd2:	f023 0301 	bic.w	r3, r3, #1
 8002dd6:	61d3      	str	r3, [r2, #28]
}  
 8002dd8:	e002      	b.n	8002de0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002dda:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <FLASH_SetErrorCode+0x98>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	60d3      	str	r3, [r2, #12]
}  
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40022000 	.word	0x40022000
 8002df0:	20000380 	.word	0x20000380

08002df4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e06:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec4 <HAL_FLASHEx_Erase+0xd0>)
 8002e08:	7e1b      	ldrb	r3, [r3, #24]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_FLASHEx_Erase+0x1e>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e053      	b.n	8002eba <HAL_FLASHEx_Erase+0xc6>
 8002e12:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec4 <HAL_FLASHEx_Erase+0xd0>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d116      	bne.n	8002e4e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002e20:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e24:	f7ff ff50 	bl	8002cc8 <FLASH_WaitForLastOperation>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d141      	bne.n	8002eb2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f000 f84c 	bl	8002ecc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e34:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e38:	f7ff ff46 	bl	8002cc8 <FLASH_WaitForLastOperation>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002e40:	4b21      	ldr	r3, [pc, #132]	@ (8002ec8 <HAL_FLASHEx_Erase+0xd4>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	4a20      	ldr	r2, [pc, #128]	@ (8002ec8 <HAL_FLASHEx_Erase+0xd4>)
 8002e46:	f023 0304 	bic.w	r3, r3, #4
 8002e4a:	6113      	str	r3, [r2, #16]
 8002e4c:	e031      	b.n	8002eb2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002e4e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e52:	f7ff ff39 	bl	8002cc8 <FLASH_WaitForLastOperation>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d12a      	bne.n	8002eb2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e62:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	e019      	b.n	8002ea0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002e6c:	68b8      	ldr	r0, [r7, #8]
 8002e6e:	f000 f849 	bl	8002f04 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e72:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002e76:	f7ff ff27 	bl	8002cc8 <FLASH_WaitForLastOperation>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e7e:	4b12      	ldr	r3, [pc, #72]	@ (8002ec8 <HAL_FLASHEx_Erase+0xd4>)
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	4a11      	ldr	r2, [pc, #68]	@ (8002ec8 <HAL_FLASHEx_Erase+0xd4>)
 8002e84:	f023 0302 	bic.w	r3, r3, #2
 8002e88:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	601a      	str	r2, [r3, #0]
            break;
 8002e96:	e00c      	b.n	8002eb2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e9e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	029a      	lsls	r2, r3, #10
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	4413      	add	r3, r2
 8002eac:	68ba      	ldr	r2, [r7, #8]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d3dc      	bcc.n	8002e6c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002eb2:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <HAL_FLASHEx_Erase+0xd0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	761a      	strb	r2, [r3, #24]

  return status;
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000380 	.word	0x20000380
 8002ec8:	40022000 	.word	0x40022000

08002ecc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <FLASH_MassErase+0x30>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002eda:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <FLASH_MassErase+0x34>)
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	4a08      	ldr	r2, [pc, #32]	@ (8002f00 <FLASH_MassErase+0x34>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002ee6:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <FLASH_MassErase+0x34>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	4a05      	ldr	r2, [pc, #20]	@ (8002f00 <FLASH_MassErase+0x34>)
 8002eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ef0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	20000380 	.word	0x20000380
 8002f00:	40022000 	.word	0x40022000

08002f04 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <FLASH_PageErase+0x38>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002f12:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <FLASH_PageErase+0x3c>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <FLASH_PageErase+0x3c>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002f1e:	4a08      	ldr	r2, [pc, #32]	@ (8002f40 <FLASH_PageErase+0x3c>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002f24:	4b06      	ldr	r3, [pc, #24]	@ (8002f40 <FLASH_PageErase+0x3c>)
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4a05      	ldr	r2, [pc, #20]	@ (8002f40 <FLASH_PageErase+0x3c>)
 8002f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f2e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000380 	.word	0x20000380
 8002f40:	40022000 	.word	0x40022000

08002f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b08b      	sub	sp, #44	@ 0x2c
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f56:	e169      	b.n	800322c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f58:	2201      	movs	r2, #1
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	f040 8158 	bne.w	8003226 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4a9a      	ldr	r2, [pc, #616]	@ (80031e4 <HAL_GPIO_Init+0x2a0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d05e      	beq.n	800303e <HAL_GPIO_Init+0xfa>
 8002f80:	4a98      	ldr	r2, [pc, #608]	@ (80031e4 <HAL_GPIO_Init+0x2a0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d875      	bhi.n	8003072 <HAL_GPIO_Init+0x12e>
 8002f86:	4a98      	ldr	r2, [pc, #608]	@ (80031e8 <HAL_GPIO_Init+0x2a4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d058      	beq.n	800303e <HAL_GPIO_Init+0xfa>
 8002f8c:	4a96      	ldr	r2, [pc, #600]	@ (80031e8 <HAL_GPIO_Init+0x2a4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d86f      	bhi.n	8003072 <HAL_GPIO_Init+0x12e>
 8002f92:	4a96      	ldr	r2, [pc, #600]	@ (80031ec <HAL_GPIO_Init+0x2a8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d052      	beq.n	800303e <HAL_GPIO_Init+0xfa>
 8002f98:	4a94      	ldr	r2, [pc, #592]	@ (80031ec <HAL_GPIO_Init+0x2a8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d869      	bhi.n	8003072 <HAL_GPIO_Init+0x12e>
 8002f9e:	4a94      	ldr	r2, [pc, #592]	@ (80031f0 <HAL_GPIO_Init+0x2ac>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d04c      	beq.n	800303e <HAL_GPIO_Init+0xfa>
 8002fa4:	4a92      	ldr	r2, [pc, #584]	@ (80031f0 <HAL_GPIO_Init+0x2ac>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d863      	bhi.n	8003072 <HAL_GPIO_Init+0x12e>
 8002faa:	4a92      	ldr	r2, [pc, #584]	@ (80031f4 <HAL_GPIO_Init+0x2b0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d046      	beq.n	800303e <HAL_GPIO_Init+0xfa>
 8002fb0:	4a90      	ldr	r2, [pc, #576]	@ (80031f4 <HAL_GPIO_Init+0x2b0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d85d      	bhi.n	8003072 <HAL_GPIO_Init+0x12e>
 8002fb6:	2b12      	cmp	r3, #18
 8002fb8:	d82a      	bhi.n	8003010 <HAL_GPIO_Init+0xcc>
 8002fba:	2b12      	cmp	r3, #18
 8002fbc:	d859      	bhi.n	8003072 <HAL_GPIO_Init+0x12e>
 8002fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc4 <HAL_GPIO_Init+0x80>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	0800303f 	.word	0x0800303f
 8002fc8:	08003019 	.word	0x08003019
 8002fcc:	0800302b 	.word	0x0800302b
 8002fd0:	0800306d 	.word	0x0800306d
 8002fd4:	08003073 	.word	0x08003073
 8002fd8:	08003073 	.word	0x08003073
 8002fdc:	08003073 	.word	0x08003073
 8002fe0:	08003073 	.word	0x08003073
 8002fe4:	08003073 	.word	0x08003073
 8002fe8:	08003073 	.word	0x08003073
 8002fec:	08003073 	.word	0x08003073
 8002ff0:	08003073 	.word	0x08003073
 8002ff4:	08003073 	.word	0x08003073
 8002ff8:	08003073 	.word	0x08003073
 8002ffc:	08003073 	.word	0x08003073
 8003000:	08003073 	.word	0x08003073
 8003004:	08003073 	.word	0x08003073
 8003008:	08003021 	.word	0x08003021
 800300c:	08003035 	.word	0x08003035
 8003010:	4a79      	ldr	r2, [pc, #484]	@ (80031f8 <HAL_GPIO_Init+0x2b4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003016:	e02c      	b.n	8003072 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	623b      	str	r3, [r7, #32]
          break;
 800301e:	e029      	b.n	8003074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	3304      	adds	r3, #4
 8003026:	623b      	str	r3, [r7, #32]
          break;
 8003028:	e024      	b.n	8003074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	3308      	adds	r3, #8
 8003030:	623b      	str	r3, [r7, #32]
          break;
 8003032:	e01f      	b.n	8003074 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	330c      	adds	r3, #12
 800303a:	623b      	str	r3, [r7, #32]
          break;
 800303c:	e01a      	b.n	8003074 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003046:	2304      	movs	r3, #4
 8003048:	623b      	str	r3, [r7, #32]
          break;
 800304a:	e013      	b.n	8003074 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d105      	bne.n	8003060 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003054:	2308      	movs	r3, #8
 8003056:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	611a      	str	r2, [r3, #16]
          break;
 800305e:	e009      	b.n	8003074 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003060:	2308      	movs	r3, #8
 8003062:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	615a      	str	r2, [r3, #20]
          break;
 800306a:	e003      	b.n	8003074 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800306c:	2300      	movs	r3, #0
 800306e:	623b      	str	r3, [r7, #32]
          break;
 8003070:	e000      	b.n	8003074 <HAL_GPIO_Init+0x130>
          break;
 8003072:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2bff      	cmp	r3, #255	@ 0xff
 8003078:	d801      	bhi.n	800307e <HAL_GPIO_Init+0x13a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	e001      	b.n	8003082 <HAL_GPIO_Init+0x13e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2bff      	cmp	r3, #255	@ 0xff
 8003088:	d802      	bhi.n	8003090 <HAL_GPIO_Init+0x14c>
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	e002      	b.n	8003096 <HAL_GPIO_Init+0x152>
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	3b08      	subs	r3, #8
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	210f      	movs	r1, #15
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	401a      	ands	r2, r3
 80030a8:	6a39      	ldr	r1, [r7, #32]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	431a      	orrs	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80b1 	beq.w	8003226 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030c4:	4b4d      	ldr	r3, [pc, #308]	@ (80031fc <HAL_GPIO_Init+0x2b8>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	4a4c      	ldr	r2, [pc, #304]	@ (80031fc <HAL_GPIO_Init+0x2b8>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	6193      	str	r3, [r2, #24]
 80030d0:	4b4a      	ldr	r3, [pc, #296]	@ (80031fc <HAL_GPIO_Init+0x2b8>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030dc:	4a48      	ldr	r2, [pc, #288]	@ (8003200 <HAL_GPIO_Init+0x2bc>)
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3302      	adds	r3, #2
 80030e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4013      	ands	r3, r2
 80030fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a40      	ldr	r2, [pc, #256]	@ (8003204 <HAL_GPIO_Init+0x2c0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <HAL_GPIO_Init+0x1ec>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a3f      	ldr	r2, [pc, #252]	@ (8003208 <HAL_GPIO_Init+0x2c4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00d      	beq.n	800312c <HAL_GPIO_Init+0x1e8>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3e      	ldr	r2, [pc, #248]	@ (800320c <HAL_GPIO_Init+0x2c8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <HAL_GPIO_Init+0x1e4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3d      	ldr	r2, [pc, #244]	@ (8003210 <HAL_GPIO_Init+0x2cc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d101      	bne.n	8003124 <HAL_GPIO_Init+0x1e0>
 8003120:	2303      	movs	r3, #3
 8003122:	e006      	b.n	8003132 <HAL_GPIO_Init+0x1ee>
 8003124:	2304      	movs	r3, #4
 8003126:	e004      	b.n	8003132 <HAL_GPIO_Init+0x1ee>
 8003128:	2302      	movs	r3, #2
 800312a:	e002      	b.n	8003132 <HAL_GPIO_Init+0x1ee>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_GPIO_Init+0x1ee>
 8003130:	2300      	movs	r3, #0
 8003132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003134:	f002 0203 	and.w	r2, r2, #3
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	4093      	lsls	r3, r2
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003142:	492f      	ldr	r1, [pc, #188]	@ (8003200 <HAL_GPIO_Init+0x2bc>)
 8003144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	3302      	adds	r3, #2
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d006      	beq.n	800316a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800315c:	4b2d      	ldr	r3, [pc, #180]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	492c      	ldr	r1, [pc, #176]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	608b      	str	r3, [r1, #8]
 8003168:	e006      	b.n	8003178 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800316a:	4b2a      	ldr	r3, [pc, #168]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	43db      	mvns	r3, r3
 8003172:	4928      	ldr	r1, [pc, #160]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 8003174:	4013      	ands	r3, r2
 8003176:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d006      	beq.n	8003192 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003184:	4b23      	ldr	r3, [pc, #140]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	4922      	ldr	r1, [pc, #136]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	60cb      	str	r3, [r1, #12]
 8003190:	e006      	b.n	80031a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003192:	4b20      	ldr	r3, [pc, #128]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	43db      	mvns	r3, r3
 800319a:	491e      	ldr	r1, [pc, #120]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 800319c:	4013      	ands	r3, r2
 800319e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d006      	beq.n	80031ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031ac:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4918      	ldr	r1, [pc, #96]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031ba:	4b16      	ldr	r3, [pc, #88]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	43db      	mvns	r3, r3
 80031c2:	4914      	ldr	r1, [pc, #80]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d021      	beq.n	8003218 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	490e      	ldr	r1, [pc, #56]	@ (8003214 <HAL_GPIO_Init+0x2d0>)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]
 80031e0:	e021      	b.n	8003226 <HAL_GPIO_Init+0x2e2>
 80031e2:	bf00      	nop
 80031e4:	10320000 	.word	0x10320000
 80031e8:	10310000 	.word	0x10310000
 80031ec:	10220000 	.word	0x10220000
 80031f0:	10210000 	.word	0x10210000
 80031f4:	10120000 	.word	0x10120000
 80031f8:	10110000 	.word	0x10110000
 80031fc:	40021000 	.word	0x40021000
 8003200:	40010000 	.word	0x40010000
 8003204:	40010800 	.word	0x40010800
 8003208:	40010c00 	.word	0x40010c00
 800320c:	40011000 	.word	0x40011000
 8003210:	40011400 	.word	0x40011400
 8003214:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003218:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <HAL_GPIO_Init+0x304>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	43db      	mvns	r3, r3
 8003220:	4909      	ldr	r1, [pc, #36]	@ (8003248 <HAL_GPIO_Init+0x304>)
 8003222:	4013      	ands	r3, r2
 8003224:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	3301      	adds	r3, #1
 800322a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	fa22 f303 	lsr.w	r3, r2, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	f47f ae8e 	bne.w	8002f58 <HAL_GPIO_Init+0x14>
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	372c      	adds	r7, #44	@ 0x2c
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr
 8003248:	40010400 	.word	0x40010400

0800324c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	807b      	strh	r3, [r7, #2]
 8003258:	4613      	mov	r3, r2
 800325a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800325c:	787b      	ldrb	r3, [r7, #1]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003262:	887a      	ldrh	r2, [r7, #2]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003268:	e003      	b.n	8003272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	041a      	lsls	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	611a      	str	r2, [r3, #16]
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e272      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8087 	beq.w	80033aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800329c:	4b92      	ldr	r3, [pc, #584]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d00c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032a8:	4b8f      	ldr	r3, [pc, #572]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 030c 	and.w	r3, r3, #12
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d112      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
 80032b4:	4b8c      	ldr	r3, [pc, #560]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032c0:	d10b      	bne.n	80032da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c2:	4b89      	ldr	r3, [pc, #548]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d06c      	beq.n	80033a8 <HAL_RCC_OscConfig+0x12c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d168      	bne.n	80033a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e24c      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x76>
 80032e4:	4b80      	ldr	r3, [pc, #512]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7f      	ldr	r2, [pc, #508]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e02e      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <HAL_RCC_OscConfig+0x98>
 80032fa:	4b7b      	ldr	r3, [pc, #492]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a7a      	ldr	r2, [pc, #488]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003304:	6013      	str	r3, [r2, #0]
 8003306:	4b78      	ldr	r3, [pc, #480]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a77      	ldr	r2, [pc, #476]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800330c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	e01d      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800331c:	d10c      	bne.n	8003338 <HAL_RCC_OscConfig+0xbc>
 800331e:	4b72      	ldr	r3, [pc, #456]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a71      	ldr	r2, [pc, #452]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	4b6f      	ldr	r3, [pc, #444]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a6e      	ldr	r2, [pc, #440]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	e00b      	b.n	8003350 <HAL_RCC_OscConfig+0xd4>
 8003338:	4b6b      	ldr	r3, [pc, #428]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6a      	ldr	r2, [pc, #424]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800333e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b68      	ldr	r3, [pc, #416]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a67      	ldr	r2, [pc, #412]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800334a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800334e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d013      	beq.n	8003380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003358:	f7fe fab4 	bl	80018c4 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003360:	f7fe fab0 	bl	80018c4 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b64      	cmp	r3, #100	@ 0x64
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e200      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003372:	4b5d      	ldr	r3, [pc, #372]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0xe4>
 800337e:	e014      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe faa0 	bl	80018c4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003388:	f7fe fa9c 	bl	80018c4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	@ 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1ec      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339a:	4b53      	ldr	r3, [pc, #332]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1f0      	bne.n	8003388 <HAL_RCC_OscConfig+0x10c>
 80033a6:	e000      	b.n	80033aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b6:	4b4c      	ldr	r3, [pc, #304]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033c2:	4b49      	ldr	r3, [pc, #292]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d11c      	bne.n	8003408 <HAL_RCC_OscConfig+0x18c>
 80033ce:	4b46      	ldr	r3, [pc, #280]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033da:	4b43      	ldr	r3, [pc, #268]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_RCC_OscConfig+0x176>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e1c0      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f2:	4b3d      	ldr	r3, [pc, #244]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4939      	ldr	r1, [pc, #228]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003406:	e03a      	b.n	800347e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d020      	beq.n	8003452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003410:	4b36      	ldr	r3, [pc, #216]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003412:	2201      	movs	r2, #1
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fa55 	bl	80018c4 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800341e:	f7fe fa51 	bl	80018c4 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1a1      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003430:	4b2d      	ldr	r3, [pc, #180]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0f0      	beq.n	800341e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b2a      	ldr	r3, [pc, #168]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4927      	ldr	r1, [pc, #156]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 800344c:	4313      	orrs	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
 8003450:	e015      	b.n	800347e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003452:	4b26      	ldr	r3, [pc, #152]	@ (80034ec <HAL_RCC_OscConfig+0x270>)
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fa34 	bl	80018c4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003460:	f7fe fa30 	bl	80018c4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e180      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003472:	4b1d      	ldr	r3, [pc, #116]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d03a      	beq.n	8003500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d019      	beq.n	80034c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003492:	4b17      	ldr	r3, [pc, #92]	@ (80034f0 <HAL_RCC_OscConfig+0x274>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003498:	f7fe fa14 	bl	80018c4 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a0:	f7fe fa10 	bl	80018c4 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e160      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034b2:	4b0d      	ldr	r3, [pc, #52]	@ (80034e8 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034be:	2001      	movs	r0, #1
 80034c0:	f000 face 	bl	8003a60 <RCC_Delay>
 80034c4:	e01c      	b.n	8003500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034c6:	4b0a      	ldr	r3, [pc, #40]	@ (80034f0 <HAL_RCC_OscConfig+0x274>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034cc:	f7fe f9fa 	bl	80018c4 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034d2:	e00f      	b.n	80034f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034d4:	f7fe f9f6 	bl	80018c4 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d908      	bls.n	80034f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e146      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000
 80034ec:	42420000 	.word	0x42420000
 80034f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	4b92      	ldr	r3, [pc, #584]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e9      	bne.n	80034d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80a6 	beq.w	800365a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b8b      	ldr	r3, [pc, #556]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b88      	ldr	r3, [pc, #544]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	4a87      	ldr	r2, [pc, #540]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003528:	61d3      	str	r3, [r2, #28]
 800352a:	4b85      	ldr	r3, [pc, #532]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800353a:	4b82      	ldr	r3, [pc, #520]	@ (8003744 <HAL_RCC_OscConfig+0x4c8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d118      	bne.n	8003578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003546:	4b7f      	ldr	r3, [pc, #508]	@ (8003744 <HAL_RCC_OscConfig+0x4c8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7e      	ldr	r2, [pc, #504]	@ (8003744 <HAL_RCC_OscConfig+0x4c8>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fe f9b7 	bl	80018c4 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fe f9b3 	bl	80018c4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b64      	cmp	r3, #100	@ 0x64
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e103      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356c:	4b75      	ldr	r3, [pc, #468]	@ (8003744 <HAL_RCC_OscConfig+0x4c8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x312>
 8003580:	4b6f      	ldr	r3, [pc, #444]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4a6e      	ldr	r2, [pc, #440]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6213      	str	r3, [r2, #32]
 800358c:	e02d      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x334>
 8003596:	4b6a      	ldr	r3, [pc, #424]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4a69      	ldr	r2, [pc, #420]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6213      	str	r3, [r2, #32]
 80035a2:	4b67      	ldr	r3, [pc, #412]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4a66      	ldr	r2, [pc, #408]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	6213      	str	r3, [r2, #32]
 80035ae:	e01c      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCC_OscConfig+0x356>
 80035b8:	4b61      	ldr	r3, [pc, #388]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	4a60      	ldr	r2, [pc, #384]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	6213      	str	r3, [r2, #32]
 80035c4:	4b5e      	ldr	r3, [pc, #376]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6213      	str	r3, [r2, #32]
 80035d0:	e00b      	b.n	80035ea <HAL_RCC_OscConfig+0x36e>
 80035d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	4a5a      	ldr	r2, [pc, #360]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6213      	str	r3, [r2, #32]
 80035de:	4b58      	ldr	r3, [pc, #352]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	4a57      	ldr	r2, [pc, #348]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe f967 	bl	80018c4 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fe f963 	bl	80018c4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0b1      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	4b4b      	ldr	r3, [pc, #300]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ee      	beq.n	80035fa <HAL_RCC_OscConfig+0x37e>
 800361c:	e014      	b.n	8003648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe f951 	bl	80018c4 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fe f94d 	bl	80018c4 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e09b      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363c:	4b40      	ldr	r3, [pc, #256]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ee      	bne.n	8003626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364e:	4b3c      	ldr	r3, [pc, #240]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4a3b      	ldr	r2, [pc, #236]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8087 	beq.w	8003772 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003664:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b08      	cmp	r3, #8
 800366e:	d061      	beq.n	8003734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d146      	bne.n	8003706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003678:	4b33      	ldr	r3, [pc, #204]	@ (8003748 <HAL_RCC_OscConfig+0x4cc>)
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fe f921 	bl	80018c4 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003686:	f7fe f91d 	bl	80018c4 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e06d      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003698:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f0      	bne.n	8003686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ac:	d108      	bne.n	80036c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036ae:	4b24      	ldr	r3, [pc, #144]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4921      	ldr	r1, [pc, #132]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a19      	ldr	r1, [r3, #32]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d0:	430b      	orrs	r3, r1
 80036d2:	491b      	ldr	r1, [pc, #108]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003748 <HAL_RCC_OscConfig+0x4cc>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fe f8f1 	bl	80018c4 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fe f8ed 	bl	80018c4 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e03d      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f8:	4b11      	ldr	r3, [pc, #68]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x46a>
 8003704:	e035      	b.n	8003772 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003706:	4b10      	ldr	r3, [pc, #64]	@ (8003748 <HAL_RCC_OscConfig+0x4cc>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe f8da 	bl	80018c4 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe f8d6 	bl	80018c4 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e026      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003726:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x498>
 8003732:	e01e      	b.n	8003772 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d107      	bne.n	800374c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e019      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
 8003740:	40021000 	.word	0x40021000
 8003744:	40007000 	.word	0x40007000
 8003748:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800374c:	4b0b      	ldr	r3, [pc, #44]	@ (800377c <HAL_RCC_OscConfig+0x500>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	429a      	cmp	r2, r3
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d001      	beq.n	8003772 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40021000 	.word	0x40021000

08003780 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0d0      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b6a      	ldr	r3, [pc, #424]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d910      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b67      	ldr	r3, [pc, #412]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 0207 	bic.w	r2, r3, #7
 80037aa:	4965      	ldr	r1, [pc, #404]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b63      	ldr	r3, [pc, #396]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0b8      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037dc:	4b59      	ldr	r3, [pc, #356]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	4a58      	ldr	r2, [pc, #352]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80037e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f4:	4b53      	ldr	r3, [pc, #332]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4a52      	ldr	r2, [pc, #328]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b50      	ldr	r3, [pc, #320]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	494d      	ldr	r1, [pc, #308]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d040      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	4b47      	ldr	r3, [pc, #284]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d115      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e07f      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e073      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384e:	4b3d      	ldr	r3, [pc, #244]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06b      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385e:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f023 0203 	bic.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4936      	ldr	r1, [pc, #216]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003870:	f7fe f828 	bl	80018c4 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fe f824 	bl	80018c4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e053      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 020c 	and.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	429a      	cmp	r2, r3
 800389e:	d1eb      	bne.n	8003878 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a0:	4b27      	ldr	r3, [pc, #156]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d210      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b24      	ldr	r3, [pc, #144]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 0207 	bic.w	r2, r3, #7
 80038b6:	4922      	ldr	r1, [pc, #136]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e032      	b.n	8003936 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038dc:	4b19      	ldr	r3, [pc, #100]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4916      	ldr	r1, [pc, #88]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038fa:	4b12      	ldr	r3, [pc, #72]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	490e      	ldr	r1, [pc, #56]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 800390a:	4313      	orrs	r3, r2
 800390c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800390e:	f000 f821 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8003912:	4602      	mov	r2, r0
 8003914:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	490a      	ldr	r1, [pc, #40]	@ (8003948 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	5ccb      	ldrb	r3, [r1, r3]
 8003922:	fa22 f303 	lsr.w	r3, r2, r3
 8003926:	4a09      	ldr	r2, [pc, #36]	@ (800394c <HAL_RCC_ClockConfig+0x1cc>)
 8003928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800392a:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <HAL_RCC_ClockConfig+0x1d0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd ff86 	bl	8001840 <HAL_InitTick>

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40022000 	.word	0x40022000
 8003944:	40021000 	.word	0x40021000
 8003948:	08007708 	.word	0x08007708
 800394c:	20000000 	.word	0x20000000
 8003950:	20000004 	.word	0x20000004

08003954 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800396e:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 030c 	and.w	r3, r3, #12
 800397a:	2b04      	cmp	r3, #4
 800397c:	d002      	beq.n	8003984 <HAL_RCC_GetSysClockFreq+0x30>
 800397e:	2b08      	cmp	r3, #8
 8003980:	d003      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x36>
 8003982:	e027      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003984:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x98>)
 8003986:	613b      	str	r3, [r7, #16]
      break;
 8003988:	e027      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	0c9b      	lsrs	r3, r3, #18
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	4a17      	ldr	r2, [pc, #92]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003994:	5cd3      	ldrb	r3, [r2, r3]
 8003996:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d010      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039a2:	4b11      	ldr	r3, [pc, #68]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	0c5b      	lsrs	r3, r3, #17
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	4a11      	ldr	r2, [pc, #68]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039ae:	5cd3      	ldrb	r3, [r2, r3]
 80039b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a0d      	ldr	r2, [pc, #52]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x98>)
 80039b6:	fb03 f202 	mul.w	r2, r3, r2
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e004      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0c      	ldr	r2, [pc, #48]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	613b      	str	r3, [r7, #16]
      break;
 80039d2:	e002      	b.n	80039da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039d4:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x98>)
 80039d6:	613b      	str	r3, [r7, #16]
      break;
 80039d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039da:	693b      	ldr	r3, [r7, #16]
}
 80039dc:	4618      	mov	r0, r3
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bc80      	pop	{r7}
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	007a1200 	.word	0x007a1200
 80039f0:	08007720 	.word	0x08007720
 80039f4:	08007730 	.word	0x08007730
 80039f8:	003d0900 	.word	0x003d0900

080039fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b02      	ldr	r3, [pc, #8]	@ (8003a0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bc80      	pop	{r7}
 8003a0a:	4770      	bx	lr
 8003a0c:	20000000 	.word	0x20000000

08003a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a14:	f7ff fff2 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b05      	ldr	r3, [pc, #20]	@ (8003a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4903      	ldr	r1, [pc, #12]	@ (8003a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000
 8003a34:	08007718 	.word	0x08007718

08003a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a3c:	f7ff ffde 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	0adb      	lsrs	r3, r3, #11
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4903      	ldr	r1, [pc, #12]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	08007718 	.word	0x08007718

08003a60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a68:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <RCC_Delay+0x34>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a98 <RCC_Delay+0x38>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0a5b      	lsrs	r3, r3, #9
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a7c:	bf00      	nop
  }
  while (Delay --);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1e5a      	subs	r2, r3, #1
 8003a82:	60fa      	str	r2, [r7, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f9      	bne.n	8003a7c <RCC_Delay+0x1c>
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	20000000 	.word	0x20000000
 8003a98:	10624dd3 	.word	0x10624dd3

08003a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d07d      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003abc:	4b4f      	ldr	r3, [pc, #316]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10d      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b4c      	ldr	r3, [pc, #304]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	4a4b      	ldr	r2, [pc, #300]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	61d3      	str	r3, [r2, #28]
 8003ad4:	4b49      	ldr	r3, [pc, #292]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	4b46      	ldr	r3, [pc, #280]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d118      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af0:	4b43      	ldr	r3, [pc, #268]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a42      	ldr	r2, [pc, #264]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afc:	f7fd fee2 	bl	80018c4 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b02:	e008      	b.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b04:	f7fd fede 	bl	80018c4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b64      	cmp	r3, #100	@ 0x64
 8003b10:	d901      	bls.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e06d      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b16:	4b3a      	ldr	r3, [pc, #232]	@ (8003c00 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0f0      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b22:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02e      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d027      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b40:	4b2e      	ldr	r3, [pc, #184]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b50:	4b2c      	ldr	r3, [pc, #176]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b56:	4a29      	ldr	r2, [pc, #164]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d014      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b66:	f7fd fead 	bl	80018c4 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7fd fea9 	bl	80018c4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e036      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	4b1d      	ldr	r3, [pc, #116]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ee      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b90:	4b1a      	ldr	r3, [pc, #104]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4917      	ldr	r1, [pc, #92]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b14      	ldr	r3, [pc, #80]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4a13      	ldr	r2, [pc, #76]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	490b      	ldr	r1, [pc, #44]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bde:	4b07      	ldr	r3, [pc, #28]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4904      	ldr	r1, [pc, #16]	@ (8003bfc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42420440 	.word	0x42420440

08003c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e041      	b.n	8003c9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fbbe 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f000 fa2a 	bl	80040a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d122      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d11b      	bne.n	8003d02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f06f 0202 	mvn.w	r2, #2
 8003cd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f9bd 	bl	8004068 <HAL_TIM_IC_CaptureCallback>
 8003cee:	e005      	b.n	8003cfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f9b0 	bl	8004056 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9bf 	bl	800407a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d122      	bne.n	8003d56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d11b      	bne.n	8003d56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f06f 0204 	mvn.w	r2, #4
 8003d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f993 	bl	8004068 <HAL_TIM_IC_CaptureCallback>
 8003d42:	e005      	b.n	8003d50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f986 	bl	8004056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f995 	bl	800407a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d122      	bne.n	8003daa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d11b      	bne.n	8003daa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f06f 0208 	mvn.w	r2, #8
 8003d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2204      	movs	r2, #4
 8003d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f969 	bl	8004068 <HAL_TIM_IC_CaptureCallback>
 8003d96:	e005      	b.n	8003da4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 f95c 	bl	8004056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f96b 	bl	800407a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d122      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d11b      	bne.n	8003dfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f06f 0210 	mvn.w	r2, #16
 8003dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f93f 	bl	8004068 <HAL_TIM_IC_CaptureCallback>
 8003dea:	e005      	b.n	8003df8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f932 	bl	8004056 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f941 	bl	800407a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d10e      	bne.n	8003e2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d107      	bne.n	8003e2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f06f 0201 	mvn.w	r2, #1
 8003e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f90d 	bl	8004044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e34:	2b80      	cmp	r3, #128	@ 0x80
 8003e36:	d10e      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e42:	2b80      	cmp	r3, #128	@ 0x80
 8003e44:	d107      	bne.n	8003e56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 fa84 	bl	800435e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e60:	2b40      	cmp	r3, #64	@ 0x40
 8003e62:	d10e      	bne.n	8003e82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6e:	2b40      	cmp	r3, #64	@ 0x40
 8003e70:	d107      	bne.n	8003e82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f905 	bl	800408c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d10e      	bne.n	8003eae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d107      	bne.n	8003eae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f06f 0220 	mvn.w	r2, #32
 8003ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fa4f 	bl	800434c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eae:	bf00      	nop
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_ConfigClockSource+0x1c>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e0b4      	b.n	800403c <HAL_TIM_ConfigClockSource+0x186>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ef0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ef8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f0a:	d03e      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0xd4>
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f10:	f200 8087 	bhi.w	8004022 <HAL_TIM_ConfigClockSource+0x16c>
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f18:	f000 8086 	beq.w	8004028 <HAL_TIM_ConfigClockSource+0x172>
 8003f1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f20:	d87f      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x16c>
 8003f22:	2b70      	cmp	r3, #112	@ 0x70
 8003f24:	d01a      	beq.n	8003f5c <HAL_TIM_ConfigClockSource+0xa6>
 8003f26:	2b70      	cmp	r3, #112	@ 0x70
 8003f28:	d87b      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x16c>
 8003f2a:	2b60      	cmp	r3, #96	@ 0x60
 8003f2c:	d050      	beq.n	8003fd0 <HAL_TIM_ConfigClockSource+0x11a>
 8003f2e:	2b60      	cmp	r3, #96	@ 0x60
 8003f30:	d877      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x16c>
 8003f32:	2b50      	cmp	r3, #80	@ 0x50
 8003f34:	d03c      	beq.n	8003fb0 <HAL_TIM_ConfigClockSource+0xfa>
 8003f36:	2b50      	cmp	r3, #80	@ 0x50
 8003f38:	d873      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x16c>
 8003f3a:	2b40      	cmp	r3, #64	@ 0x40
 8003f3c:	d058      	beq.n	8003ff0 <HAL_TIM_ConfigClockSource+0x13a>
 8003f3e:	2b40      	cmp	r3, #64	@ 0x40
 8003f40:	d86f      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x16c>
 8003f42:	2b30      	cmp	r3, #48	@ 0x30
 8003f44:	d064      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x15a>
 8003f46:	2b30      	cmp	r3, #48	@ 0x30
 8003f48:	d86b      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x16c>
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d060      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x15a>
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d867      	bhi.n	8004022 <HAL_TIM_ConfigClockSource+0x16c>
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d05c      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x15a>
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d05a      	beq.n	8004010 <HAL_TIM_ConfigClockSource+0x15a>
 8003f5a:	e062      	b.n	8004022 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f6c:	f000 f971 	bl	8004252 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	609a      	str	r2, [r3, #8]
      break;
 8003f88:	e04f      	b.n	800402a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f9a:	f000 f95a 	bl	8004252 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fac:	609a      	str	r2, [r3, #8]
      break;
 8003fae:	e03c      	b.n	800402a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f000 f8d1 	bl	8004164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2150      	movs	r1, #80	@ 0x50
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 f928 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003fce:	e02c      	b.n	800402a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f000 f8ef 	bl	80041c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2160      	movs	r1, #96	@ 0x60
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f918 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8003fee:	e01c      	b.n	800402a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f000 f8b1 	bl	8004164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2140      	movs	r1, #64	@ 0x40
 8004008:	4618      	mov	r0, r3
 800400a:	f000 f908 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 800400e:	e00c      	b.n	800402a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	4610      	mov	r0, r2
 800401c:	f000 f8ff 	bl	800421e <TIM_ITRx_SetConfig>
      break;
 8004020:	e003      	b.n	800402a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
      break;
 8004026:	e000      	b.n	800402a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004028:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	bc80      	pop	{r7}
 8004054:	4770      	bx	lr

08004056 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr

0800407a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800407a:	b480      	push	{r7}
 800407c:	b083      	sub	sp, #12
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr

0800408c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	bc80      	pop	{r7}
 800409c:	4770      	bx	lr
	...

080040a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a29      	ldr	r2, [pc, #164]	@ (8004158 <TIM_Base_SetConfig+0xb8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d00b      	beq.n	80040d0 <TIM_Base_SetConfig+0x30>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040be:	d007      	beq.n	80040d0 <TIM_Base_SetConfig+0x30>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a26      	ldr	r2, [pc, #152]	@ (800415c <TIM_Base_SetConfig+0xbc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_Base_SetConfig+0x30>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a25      	ldr	r2, [pc, #148]	@ (8004160 <TIM_Base_SetConfig+0xc0>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d108      	bne.n	80040e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004158 <TIM_Base_SetConfig+0xb8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00b      	beq.n	8004102 <TIM_Base_SetConfig+0x62>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f0:	d007      	beq.n	8004102 <TIM_Base_SetConfig+0x62>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a19      	ldr	r2, [pc, #100]	@ (800415c <TIM_Base_SetConfig+0xbc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d003      	beq.n	8004102 <TIM_Base_SetConfig+0x62>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <TIM_Base_SetConfig+0xc0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d108      	bne.n	8004114 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a07      	ldr	r2, [pc, #28]	@ (8004158 <TIM_Base_SetConfig+0xb8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d103      	bne.n	8004148 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	615a      	str	r2, [r3, #20]
}
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	40012c00 	.word	0x40012c00
 800415c:	40000400 	.word	0x40000400
 8004160:	40000800 	.word	0x40000800

08004164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0201 	bic.w	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800418e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 030a 	bic.w	r3, r3, #10
 80041a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	621a      	str	r2, [r3, #32]
}
 80041b6:	bf00      	nop
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0210 	bic.w	r2, r3, #16
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	031b      	lsls	r3, r3, #12
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	621a      	str	r2, [r3, #32]
}
 8004214:	bf00      	nop
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800421e:	b480      	push	{r7}
 8004220:	b085      	sub	sp, #20
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004234:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	f043 0307 	orr.w	r3, r3, #7
 8004240:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr

08004252 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004252:	b480      	push	{r7}
 8004254:	b087      	sub	sp, #28
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800426c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	021a      	lsls	r2, r3, #8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	431a      	orrs	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4313      	orrs	r3, r2
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	609a      	str	r2, [r3, #8]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e046      	b.n	8004336 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a16      	ldr	r2, [pc, #88]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00e      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f4:	d009      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a12      	ldr	r2, [pc, #72]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a10      	ldr	r2, [pc, #64]	@ (8004348 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d10c      	bne.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004310:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4313      	orrs	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	40012c00 	.word	0x40012c00
 8004344:	40000400 	.word	0x40000400
 8004348:	40000800 	.word	0x40000800

0800434c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr

0800435e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e042      	b.n	8004408 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd f830 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2224      	movs	r2, #36	@ 0x24
 80043a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fc7f 	bl	8004cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b0ba      	sub	sp, #232	@ 0xe8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004436:	2300      	movs	r3, #0
 8004438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800443c:	2300      	movs	r3, #0
 800443e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004446:	f003 030f 	and.w	r3, r3, #15
 800444a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800444e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10f      	bne.n	8004476 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d009      	beq.n	8004476 <HAL_UART_IRQHandler+0x66>
 8004462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fb63 	bl	8004b3a <UART_Receive_IT>
      return;
 8004474:	e25b      	b.n	800492e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80de 	beq.w	800463c <HAL_UART_IRQHandler+0x22c>
 8004480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d106      	bne.n	800449a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800448c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004490:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80d1 	beq.w	800463c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800449a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <HAL_UART_IRQHandler+0xae>
 80044a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d005      	beq.n	80044be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b6:	f043 0201 	orr.w	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_UART_IRQHandler+0xd2>
 80044ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044da:	f043 0202 	orr.w	r2, r3, #2
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_UART_IRQHandler+0xf6>
 80044ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d005      	beq.n	8004506 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f043 0204 	orr.w	r2, r3, #4
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d011      	beq.n	8004536 <HAL_UART_IRQHandler+0x126>
 8004512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d105      	bne.n	800452a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800451e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452e:	f043 0208 	orr.w	r2, r3, #8
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 81f2 	beq.w	8004924 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b00      	cmp	r3, #0
 800454a:	d008      	beq.n	800455e <HAL_UART_IRQHandler+0x14e>
 800454c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004550:	f003 0320 	and.w	r3, r3, #32
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 faee 	bl	8004b3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_UART_IRQHandler+0x17a>
 8004582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004586:	2b00      	cmp	r3, #0
 8004588:	d04f      	beq.n	800462a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f9f8 	bl	8004980 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d041      	beq.n	8004622 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80045b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80045b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3314      	adds	r3, #20
 80045c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80045ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80045ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80045d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80045e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1d9      	bne.n	800459e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d013      	beq.n	800461a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f6:	4a7e      	ldr	r2, [pc, #504]	@ (80047f0 <HAL_UART_IRQHandler+0x3e0>)
 80045f8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe f922 	bl	8002848 <HAL_DMA_Abort_IT>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004614:	4610      	mov	r0, r2
 8004616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004618:	e00e      	b.n	8004638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f99c 	bl	8004958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004620:	e00a      	b.n	8004638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f998 	bl	8004958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	e006      	b.n	8004638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f994 	bl	8004958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004636:	e175      	b.n	8004924 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	bf00      	nop
    return;
 800463a:	e173      	b.n	8004924 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	2b01      	cmp	r3, #1
 8004642:	f040 814f 	bne.w	80048e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800464a:	f003 0310 	and.w	r3, r3, #16
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 8148 	beq.w	80048e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8141 	beq.w	80048e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80b6 	beq.w	80047f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004694:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 8145 	beq.w	8004928 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046a6:	429a      	cmp	r2, r3
 80046a8:	f080 813e 	bcs.w	8004928 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	f000 8088 	beq.w	80047d0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80046ce:	e853 3f00 	ldrex	r3, [r3]
 80046d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80046d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046de:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80046ec:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80046f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80046fc:	e841 2300 	strex	r3, r2, [r1]
 8004700:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1d9      	bne.n	80046c0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004714:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004716:	e853 3f00 	ldrex	r3, [r3]
 800471a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800471c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800471e:	f023 0301 	bic.w	r3, r3, #1
 8004722:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3314      	adds	r3, #20
 800472c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004730:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004734:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004738:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800473c:	e841 2300 	strex	r3, r2, [r1]
 8004740:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004742:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e1      	bne.n	800470c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800475a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800475e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800476c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800476e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004770:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004772:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004774:	e841 2300 	strex	r3, r2, [r1]
 8004778:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800477a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e3      	bne.n	8004748 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	330c      	adds	r3, #12
 8004794:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800479e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047a0:	f023 0310 	bic.w	r3, r3, #16
 80047a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	330c      	adds	r3, #12
 80047ae:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80047b2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80047b4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80047b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047ba:	e841 2300 	strex	r3, r2, [r1]
 80047be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80047c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1e3      	bne.n	800478e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fe f800 	bl	80027d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	4619      	mov	r1, r3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8bf 	bl	800496a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047ec:	e09c      	b.n	8004928 <HAL_UART_IRQHandler+0x518>
 80047ee:	bf00      	nop
 80047f0:	08004a45 	.word	0x08004a45
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 808e 	beq.w	800492c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8089 	beq.w	800492c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800482a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004830:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800483e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004840:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800484c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e3      	bne.n	800481a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3314      	adds	r3, #20
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	623b      	str	r3, [r7, #32]
   return(result);
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3314      	adds	r3, #20
 8004872:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004876:	633a      	str	r2, [r7, #48]	@ 0x30
 8004878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800487c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e3      	bne.n	8004852 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	e853 3f00 	ldrex	r3, [r3]
 80048a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0310 	bic.w	r3, r3, #16
 80048ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80048bc:	61fa      	str	r2, [r7, #28]
 80048be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	69b9      	ldr	r1, [r7, #24]
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	617b      	str	r3, [r7, #20]
   return(result);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e3      	bne.n	8004898 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048da:	4619      	mov	r1, r3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f844 	bl	800496a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048e2:	e023      	b.n	800492c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80048e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <HAL_UART_IRQHandler+0x4f4>
 80048f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f8b5 	bl	8004a6c <UART_Transmit_IT>
    return;
 8004902:	e014      	b.n	800492e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <HAL_UART_IRQHandler+0x51e>
 8004910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 f8f4 	bl	8004b0a <UART_EndTransmit_IT>
    return;
 8004922:	e004      	b.n	800492e <HAL_UART_IRQHandler+0x51e>
    return;
 8004924:	bf00      	nop
 8004926:	e002      	b.n	800492e <HAL_UART_IRQHandler+0x51e>
      return;
 8004928:	bf00      	nop
 800492a:	e000      	b.n	800492e <HAL_UART_IRQHandler+0x51e>
      return;
 800492c:	bf00      	nop
  }
}
 800492e:	37e8      	adds	r7, #232	@ 0xe8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	bc80      	pop	{r7}
 8004944:	4770      	bx	lr

08004946 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr

08004958 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004980:	b480      	push	{r7}
 8004982:	b095      	sub	sp, #84	@ 0x54
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	330c      	adds	r3, #12
 800498e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004992:	e853 3f00 	ldrex	r3, [r3]
 8004996:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800499e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80049aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049b0:	e841 2300 	strex	r3, r2, [r1]
 80049b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e5      	bne.n	8004988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3314      	adds	r3, #20
 80049c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	e853 3f00 	ldrex	r3, [r3]
 80049ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049e4:	e841 2300 	strex	r3, r2, [r1]
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1e5      	bne.n	80049bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d119      	bne.n	8004a2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	f023 0310 	bic.w	r3, r3, #16
 8004a0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a18:	61ba      	str	r2, [r7, #24]
 8004a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1c:	6979      	ldr	r1, [r7, #20]
 8004a1e:	69ba      	ldr	r2, [r7, #24]
 8004a20:	e841 2300 	strex	r3, r2, [r1]
 8004a24:	613b      	str	r3, [r7, #16]
   return(result);
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1e5      	bne.n	80049f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a3a:	bf00      	nop
 8004a3c:	3754      	adds	r7, #84	@ 0x54
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ff7a 	bl	8004958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b21      	cmp	r3, #33	@ 0x21
 8004a7e:	d13e      	bne.n	8004afe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a88:	d114      	bne.n	8004ab4 <UART_Transmit_IT+0x48>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d110      	bne.n	8004ab4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aa6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	1c9a      	adds	r2, r3, #2
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]
 8004ab2:	e008      	b.n	8004ac6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	1c59      	adds	r1, r3, #1
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6211      	str	r1, [r2, #32]
 8004abe:	781a      	ldrb	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ae8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	e000      	b.n	8004b00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004afe:	2302      	movs	r3, #2
  }
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bc80      	pop	{r7}
 8004b08:	4770      	bx	lr

08004b0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b082      	sub	sp, #8
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff ff02 	bl	8004934 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b08c      	sub	sp, #48	@ 0x30
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b22      	cmp	r3, #34	@ 0x22
 8004b4c:	f040 80ae 	bne.w	8004cac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b58:	d117      	bne.n	8004b8a <UART_Receive_IT+0x50>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d113      	bne.n	8004b8a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b88:	e026      	b.n	8004bd8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b90:	2300      	movs	r3, #0
 8004b92:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b9c:	d007      	beq.n	8004bae <UART_Receive_IT+0x74>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10a      	bne.n	8004bbc <UART_Receive_IT+0x82>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	e008      	b.n	8004bce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	4619      	mov	r1, r3
 8004be6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d15d      	bne.n	8004ca8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0220 	bic.w	r2, r2, #32
 8004bfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695a      	ldr	r2, [r3, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d135      	bne.n	8004c9e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	613b      	str	r3, [r7, #16]
   return(result);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f023 0310 	bic.w	r3, r3, #16
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c58:	623a      	str	r2, [r7, #32]
 8004c5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	69f9      	ldr	r1, [r7, #28]
 8004c5e:	6a3a      	ldr	r2, [r7, #32]
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e5      	bne.n	8004c38 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d10a      	bne.n	8004c90 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff fe67 	bl	800496a <HAL_UARTEx_RxEventCallback>
 8004c9c:	e002      	b.n	8004ca4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f7ff fe51 	bl	8004946 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e002      	b.n	8004cae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	e000      	b.n	8004cae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cac:	2302      	movs	r3, #2
  }
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3730      	adds	r7, #48	@ 0x30
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
	...

08004cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004cf2:	f023 030c 	bic.w	r3, r3, #12
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699a      	ldr	r2, [r3, #24]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8004dcc <UART_SetConfig+0x114>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d103      	bne.n	8004d28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d20:	f7fe fe8a 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	e002      	b.n	8004d2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7fe fe72 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8004d2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	009a      	lsls	r2, r3, #2
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	4a22      	ldr	r2, [pc, #136]	@ (8004dd0 <UART_SetConfig+0x118>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	095b      	lsrs	r3, r3, #5
 8004d4c:	0119      	lsls	r1, r3, #4
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009a      	lsls	r2, r3, #2
 8004d58:	441a      	add	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d64:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd0 <UART_SetConfig+0x118>)
 8004d66:	fba3 0302 	umull	r0, r3, r3, r2
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	2064      	movs	r0, #100	@ 0x64
 8004d6e:	fb00 f303 	mul.w	r3, r0, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	3332      	adds	r3, #50	@ 0x32
 8004d78:	4a15      	ldr	r2, [pc, #84]	@ (8004dd0 <UART_SetConfig+0x118>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d84:	4419      	add	r1, r3
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009a      	lsls	r2, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <UART_SetConfig+0x118>)
 8004d9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	2064      	movs	r0, #100	@ 0x64
 8004da6:	fb00 f303 	mul.w	r3, r0, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	3332      	adds	r3, #50	@ 0x32
 8004db0:	4a07      	ldr	r2, [pc, #28]	@ (8004dd0 <UART_SetConfig+0x118>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	f003 020f 	and.w	r2, r3, #15
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004dc4:	bf00      	nop
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40013800 	.word	0x40013800
 8004dd0:	51eb851f 	.word	0x51eb851f

08004dd4 <__cvt>:
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dda:	461d      	mov	r5, r3
 8004ddc:	bfbb      	ittet	lt
 8004dde:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004de2:	461d      	movlt	r5, r3
 8004de4:	2300      	movge	r3, #0
 8004de6:	232d      	movlt	r3, #45	@ 0x2d
 8004de8:	b088      	sub	sp, #32
 8004dea:	4614      	mov	r4, r2
 8004dec:	bfb8      	it	lt
 8004dee:	4614      	movlt	r4, r2
 8004df0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004df2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004df4:	7013      	strb	r3, [r2, #0]
 8004df6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004df8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004dfc:	f023 0820 	bic.w	r8, r3, #32
 8004e00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e04:	d005      	beq.n	8004e12 <__cvt+0x3e>
 8004e06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e0a:	d100      	bne.n	8004e0e <__cvt+0x3a>
 8004e0c:	3601      	adds	r6, #1
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e000      	b.n	8004e14 <__cvt+0x40>
 8004e12:	2303      	movs	r3, #3
 8004e14:	aa07      	add	r2, sp, #28
 8004e16:	9204      	str	r2, [sp, #16]
 8004e18:	aa06      	add	r2, sp, #24
 8004e1a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e1e:	e9cd 3600 	strd	r3, r6, [sp]
 8004e22:	4622      	mov	r2, r4
 8004e24:	462b      	mov	r3, r5
 8004e26:	f000 fe4f 	bl	8005ac8 <_dtoa_r>
 8004e2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004e2e:	4607      	mov	r7, r0
 8004e30:	d119      	bne.n	8004e66 <__cvt+0x92>
 8004e32:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004e34:	07db      	lsls	r3, r3, #31
 8004e36:	d50e      	bpl.n	8004e56 <__cvt+0x82>
 8004e38:	eb00 0906 	add.w	r9, r0, r6
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	2300      	movs	r3, #0
 8004e40:	4620      	mov	r0, r4
 8004e42:	4629      	mov	r1, r5
 8004e44:	f7fb fdb0 	bl	80009a8 <__aeabi_dcmpeq>
 8004e48:	b108      	cbz	r0, 8004e4e <__cvt+0x7a>
 8004e4a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e4e:	2230      	movs	r2, #48	@ 0x30
 8004e50:	9b07      	ldr	r3, [sp, #28]
 8004e52:	454b      	cmp	r3, r9
 8004e54:	d31e      	bcc.n	8004e94 <__cvt+0xc0>
 8004e56:	4638      	mov	r0, r7
 8004e58:	9b07      	ldr	r3, [sp, #28]
 8004e5a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004e5c:	1bdb      	subs	r3, r3, r7
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	b008      	add	sp, #32
 8004e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e6a:	eb00 0906 	add.w	r9, r0, r6
 8004e6e:	d1e5      	bne.n	8004e3c <__cvt+0x68>
 8004e70:	7803      	ldrb	r3, [r0, #0]
 8004e72:	2b30      	cmp	r3, #48	@ 0x30
 8004e74:	d10a      	bne.n	8004e8c <__cvt+0xb8>
 8004e76:	2200      	movs	r2, #0
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7fb fd93 	bl	80009a8 <__aeabi_dcmpeq>
 8004e82:	b918      	cbnz	r0, 8004e8c <__cvt+0xb8>
 8004e84:	f1c6 0601 	rsb	r6, r6, #1
 8004e88:	f8ca 6000 	str.w	r6, [sl]
 8004e8c:	f8da 3000 	ldr.w	r3, [sl]
 8004e90:	4499      	add	r9, r3
 8004e92:	e7d3      	b.n	8004e3c <__cvt+0x68>
 8004e94:	1c59      	adds	r1, r3, #1
 8004e96:	9107      	str	r1, [sp, #28]
 8004e98:	701a      	strb	r2, [r3, #0]
 8004e9a:	e7d9      	b.n	8004e50 <__cvt+0x7c>

08004e9c <__exponent>:
 8004e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e9e:	2900      	cmp	r1, #0
 8004ea0:	bfb6      	itet	lt
 8004ea2:	232d      	movlt	r3, #45	@ 0x2d
 8004ea4:	232b      	movge	r3, #43	@ 0x2b
 8004ea6:	4249      	neglt	r1, r1
 8004ea8:	2909      	cmp	r1, #9
 8004eaa:	7002      	strb	r2, [r0, #0]
 8004eac:	7043      	strb	r3, [r0, #1]
 8004eae:	dd29      	ble.n	8004f04 <__exponent+0x68>
 8004eb0:	f10d 0307 	add.w	r3, sp, #7
 8004eb4:	461d      	mov	r5, r3
 8004eb6:	270a      	movs	r7, #10
 8004eb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	fb07 1416 	mls	r4, r7, r6, r1
 8004ec2:	3430      	adds	r4, #48	@ 0x30
 8004ec4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004ec8:	460c      	mov	r4, r1
 8004eca:	2c63      	cmp	r4, #99	@ 0x63
 8004ecc:	4631      	mov	r1, r6
 8004ece:	f103 33ff 	add.w	r3, r3, #4294967295
 8004ed2:	dcf1      	bgt.n	8004eb8 <__exponent+0x1c>
 8004ed4:	3130      	adds	r1, #48	@ 0x30
 8004ed6:	1e94      	subs	r4, r2, #2
 8004ed8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004edc:	4623      	mov	r3, r4
 8004ede:	1c41      	adds	r1, r0, #1
 8004ee0:	42ab      	cmp	r3, r5
 8004ee2:	d30a      	bcc.n	8004efa <__exponent+0x5e>
 8004ee4:	f10d 0309 	add.w	r3, sp, #9
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	42ac      	cmp	r4, r5
 8004eec:	bf88      	it	hi
 8004eee:	2300      	movhi	r3, #0
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	4403      	add	r3, r0
 8004ef4:	1a18      	subs	r0, r3, r0
 8004ef6:	b003      	add	sp, #12
 8004ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004efa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004efe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f02:	e7ed      	b.n	8004ee0 <__exponent+0x44>
 8004f04:	2330      	movs	r3, #48	@ 0x30
 8004f06:	3130      	adds	r1, #48	@ 0x30
 8004f08:	7083      	strb	r3, [r0, #2]
 8004f0a:	70c1      	strb	r1, [r0, #3]
 8004f0c:	1d03      	adds	r3, r0, #4
 8004f0e:	e7f1      	b.n	8004ef4 <__exponent+0x58>

08004f10 <_printf_float>:
 8004f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	b091      	sub	sp, #68	@ 0x44
 8004f16:	460c      	mov	r4, r1
 8004f18:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004f1c:	4616      	mov	r6, r2
 8004f1e:	461f      	mov	r7, r3
 8004f20:	4605      	mov	r5, r0
 8004f22:	f000 fcc1 	bl	80058a8 <_localeconv_r>
 8004f26:	6803      	ldr	r3, [r0, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	9308      	str	r3, [sp, #32]
 8004f2c:	f7fb f910 	bl	8000150 <strlen>
 8004f30:	2300      	movs	r3, #0
 8004f32:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f34:	f8d8 3000 	ldr.w	r3, [r8]
 8004f38:	9009      	str	r0, [sp, #36]	@ 0x24
 8004f3a:	3307      	adds	r3, #7
 8004f3c:	f023 0307 	bic.w	r3, r3, #7
 8004f40:	f103 0208 	add.w	r2, r3, #8
 8004f44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f48:	f8d4 b000 	ldr.w	fp, [r4]
 8004f4c:	f8c8 2000 	str.w	r2, [r8]
 8004f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f5a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f62:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80051dc <_printf_float+0x2cc>)
 8004f6c:	f7fb fd4e 	bl	8000a0c <__aeabi_dcmpun>
 8004f70:	bb70      	cbnz	r0, 8004fd0 <_printf_float+0xc0>
 8004f72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f76:	f04f 32ff 	mov.w	r2, #4294967295
 8004f7a:	4b98      	ldr	r3, [pc, #608]	@ (80051dc <_printf_float+0x2cc>)
 8004f7c:	f7fb fd28 	bl	80009d0 <__aeabi_dcmple>
 8004f80:	bb30      	cbnz	r0, 8004fd0 <_printf_float+0xc0>
 8004f82:	2200      	movs	r2, #0
 8004f84:	2300      	movs	r3, #0
 8004f86:	4640      	mov	r0, r8
 8004f88:	4649      	mov	r1, r9
 8004f8a:	f7fb fd17 	bl	80009bc <__aeabi_dcmplt>
 8004f8e:	b110      	cbz	r0, 8004f96 <_printf_float+0x86>
 8004f90:	232d      	movs	r3, #45	@ 0x2d
 8004f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f96:	4a92      	ldr	r2, [pc, #584]	@ (80051e0 <_printf_float+0x2d0>)
 8004f98:	4b92      	ldr	r3, [pc, #584]	@ (80051e4 <_printf_float+0x2d4>)
 8004f9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f9e:	bf94      	ite	ls
 8004fa0:	4690      	movls	r8, r2
 8004fa2:	4698      	movhi	r8, r3
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	f04f 0900 	mov.w	r9, #0
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	f02b 0304 	bic.w	r3, fp, #4
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	4633      	mov	r3, r6
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	9700      	str	r7, [sp, #0]
 8004fba:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004fbc:	f000 f9d4 	bl	8005368 <_printf_common>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	f040 8090 	bne.w	80050e6 <_printf_float+0x1d6>
 8004fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fca:	b011      	add	sp, #68	@ 0x44
 8004fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	4640      	mov	r0, r8
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	f7fb fd18 	bl	8000a0c <__aeabi_dcmpun>
 8004fdc:	b148      	cbz	r0, 8004ff2 <_printf_float+0xe2>
 8004fde:	464b      	mov	r3, r9
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	bfb8      	it	lt
 8004fe4:	232d      	movlt	r3, #45	@ 0x2d
 8004fe6:	4a80      	ldr	r2, [pc, #512]	@ (80051e8 <_printf_float+0x2d8>)
 8004fe8:	bfb8      	it	lt
 8004fea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004fee:	4b7f      	ldr	r3, [pc, #508]	@ (80051ec <_printf_float+0x2dc>)
 8004ff0:	e7d3      	b.n	8004f9a <_printf_float+0x8a>
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	d13f      	bne.n	800507c <_printf_float+0x16c>
 8004ffc:	2306      	movs	r3, #6
 8004ffe:	6063      	str	r3, [r4, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005006:	6023      	str	r3, [r4, #0]
 8005008:	9206      	str	r2, [sp, #24]
 800500a:	aa0e      	add	r2, sp, #56	@ 0x38
 800500c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005010:	aa0d      	add	r2, sp, #52	@ 0x34
 8005012:	9203      	str	r2, [sp, #12]
 8005014:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005018:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	4642      	mov	r2, r8
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	4628      	mov	r0, r5
 8005024:	464b      	mov	r3, r9
 8005026:	910a      	str	r1, [sp, #40]	@ 0x28
 8005028:	f7ff fed4 	bl	8004dd4 <__cvt>
 800502c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800502e:	4680      	mov	r8, r0
 8005030:	2947      	cmp	r1, #71	@ 0x47
 8005032:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005034:	d128      	bne.n	8005088 <_printf_float+0x178>
 8005036:	1cc8      	adds	r0, r1, #3
 8005038:	db02      	blt.n	8005040 <_printf_float+0x130>
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	4299      	cmp	r1, r3
 800503e:	dd40      	ble.n	80050c2 <_printf_float+0x1b2>
 8005040:	f1aa 0a02 	sub.w	sl, sl, #2
 8005044:	fa5f fa8a 	uxtb.w	sl, sl
 8005048:	4652      	mov	r2, sl
 800504a:	3901      	subs	r1, #1
 800504c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005050:	910d      	str	r1, [sp, #52]	@ 0x34
 8005052:	f7ff ff23 	bl	8004e9c <__exponent>
 8005056:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005058:	4681      	mov	r9, r0
 800505a:	1813      	adds	r3, r2, r0
 800505c:	2a01      	cmp	r2, #1
 800505e:	6123      	str	r3, [r4, #16]
 8005060:	dc02      	bgt.n	8005068 <_printf_float+0x158>
 8005062:	6822      	ldr	r2, [r4, #0]
 8005064:	07d2      	lsls	r2, r2, #31
 8005066:	d501      	bpl.n	800506c <_printf_float+0x15c>
 8005068:	3301      	adds	r3, #1
 800506a:	6123      	str	r3, [r4, #16]
 800506c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005070:	2b00      	cmp	r3, #0
 8005072:	d09e      	beq.n	8004fb2 <_printf_float+0xa2>
 8005074:	232d      	movs	r3, #45	@ 0x2d
 8005076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800507a:	e79a      	b.n	8004fb2 <_printf_float+0xa2>
 800507c:	2947      	cmp	r1, #71	@ 0x47
 800507e:	d1bf      	bne.n	8005000 <_printf_float+0xf0>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1bd      	bne.n	8005000 <_printf_float+0xf0>
 8005084:	2301      	movs	r3, #1
 8005086:	e7ba      	b.n	8004ffe <_printf_float+0xee>
 8005088:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800508c:	d9dc      	bls.n	8005048 <_printf_float+0x138>
 800508e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005092:	d118      	bne.n	80050c6 <_printf_float+0x1b6>
 8005094:	2900      	cmp	r1, #0
 8005096:	6863      	ldr	r3, [r4, #4]
 8005098:	dd0b      	ble.n	80050b2 <_printf_float+0x1a2>
 800509a:	6121      	str	r1, [r4, #16]
 800509c:	b913      	cbnz	r3, 80050a4 <_printf_float+0x194>
 800509e:	6822      	ldr	r2, [r4, #0]
 80050a0:	07d0      	lsls	r0, r2, #31
 80050a2:	d502      	bpl.n	80050aa <_printf_float+0x19a>
 80050a4:	3301      	adds	r3, #1
 80050a6:	440b      	add	r3, r1
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	f04f 0900 	mov.w	r9, #0
 80050ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80050b0:	e7dc      	b.n	800506c <_printf_float+0x15c>
 80050b2:	b913      	cbnz	r3, 80050ba <_printf_float+0x1aa>
 80050b4:	6822      	ldr	r2, [r4, #0]
 80050b6:	07d2      	lsls	r2, r2, #31
 80050b8:	d501      	bpl.n	80050be <_printf_float+0x1ae>
 80050ba:	3302      	adds	r3, #2
 80050bc:	e7f4      	b.n	80050a8 <_printf_float+0x198>
 80050be:	2301      	movs	r3, #1
 80050c0:	e7f2      	b.n	80050a8 <_printf_float+0x198>
 80050c2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80050c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050c8:	4299      	cmp	r1, r3
 80050ca:	db05      	blt.n	80050d8 <_printf_float+0x1c8>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	6121      	str	r1, [r4, #16]
 80050d0:	07d8      	lsls	r0, r3, #31
 80050d2:	d5ea      	bpl.n	80050aa <_printf_float+0x19a>
 80050d4:	1c4b      	adds	r3, r1, #1
 80050d6:	e7e7      	b.n	80050a8 <_printf_float+0x198>
 80050d8:	2900      	cmp	r1, #0
 80050da:	bfcc      	ite	gt
 80050dc:	2201      	movgt	r2, #1
 80050de:	f1c1 0202 	rsble	r2, r1, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	e7e0      	b.n	80050a8 <_printf_float+0x198>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	055a      	lsls	r2, r3, #21
 80050ea:	d407      	bmi.n	80050fc <_printf_float+0x1ec>
 80050ec:	6923      	ldr	r3, [r4, #16]
 80050ee:	4642      	mov	r2, r8
 80050f0:	4631      	mov	r1, r6
 80050f2:	4628      	mov	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	d12b      	bne.n	8005152 <_printf_float+0x242>
 80050fa:	e764      	b.n	8004fc6 <_printf_float+0xb6>
 80050fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005100:	f240 80dc 	bls.w	80052bc <_printf_float+0x3ac>
 8005104:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005108:	2200      	movs	r2, #0
 800510a:	2300      	movs	r3, #0
 800510c:	f7fb fc4c 	bl	80009a8 <__aeabi_dcmpeq>
 8005110:	2800      	cmp	r0, #0
 8005112:	d033      	beq.n	800517c <_printf_float+0x26c>
 8005114:	2301      	movs	r3, #1
 8005116:	4631      	mov	r1, r6
 8005118:	4628      	mov	r0, r5
 800511a:	4a35      	ldr	r2, [pc, #212]	@ (80051f0 <_printf_float+0x2e0>)
 800511c:	47b8      	blx	r7
 800511e:	3001      	adds	r0, #1
 8005120:	f43f af51 	beq.w	8004fc6 <_printf_float+0xb6>
 8005124:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005128:	4543      	cmp	r3, r8
 800512a:	db02      	blt.n	8005132 <_printf_float+0x222>
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	07d8      	lsls	r0, r3, #31
 8005130:	d50f      	bpl.n	8005152 <_printf_float+0x242>
 8005132:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005136:	4631      	mov	r1, r6
 8005138:	4628      	mov	r0, r5
 800513a:	47b8      	blx	r7
 800513c:	3001      	adds	r0, #1
 800513e:	f43f af42 	beq.w	8004fc6 <_printf_float+0xb6>
 8005142:	f04f 0900 	mov.w	r9, #0
 8005146:	f108 38ff 	add.w	r8, r8, #4294967295
 800514a:	f104 0a1a 	add.w	sl, r4, #26
 800514e:	45c8      	cmp	r8, r9
 8005150:	dc09      	bgt.n	8005166 <_printf_float+0x256>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	079b      	lsls	r3, r3, #30
 8005156:	f100 8102 	bmi.w	800535e <_printf_float+0x44e>
 800515a:	68e0      	ldr	r0, [r4, #12]
 800515c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800515e:	4298      	cmp	r0, r3
 8005160:	bfb8      	it	lt
 8005162:	4618      	movlt	r0, r3
 8005164:	e731      	b.n	8004fca <_printf_float+0xba>
 8005166:	2301      	movs	r3, #1
 8005168:	4652      	mov	r2, sl
 800516a:	4631      	mov	r1, r6
 800516c:	4628      	mov	r0, r5
 800516e:	47b8      	blx	r7
 8005170:	3001      	adds	r0, #1
 8005172:	f43f af28 	beq.w	8004fc6 <_printf_float+0xb6>
 8005176:	f109 0901 	add.w	r9, r9, #1
 800517a:	e7e8      	b.n	800514e <_printf_float+0x23e>
 800517c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800517e:	2b00      	cmp	r3, #0
 8005180:	dc38      	bgt.n	80051f4 <_printf_float+0x2e4>
 8005182:	2301      	movs	r3, #1
 8005184:	4631      	mov	r1, r6
 8005186:	4628      	mov	r0, r5
 8005188:	4a19      	ldr	r2, [pc, #100]	@ (80051f0 <_printf_float+0x2e0>)
 800518a:	47b8      	blx	r7
 800518c:	3001      	adds	r0, #1
 800518e:	f43f af1a 	beq.w	8004fc6 <_printf_float+0xb6>
 8005192:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005196:	ea59 0303 	orrs.w	r3, r9, r3
 800519a:	d102      	bne.n	80051a2 <_printf_float+0x292>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	07d9      	lsls	r1, r3, #31
 80051a0:	d5d7      	bpl.n	8005152 <_printf_float+0x242>
 80051a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	f43f af0a 	beq.w	8004fc6 <_printf_float+0xb6>
 80051b2:	f04f 0a00 	mov.w	sl, #0
 80051b6:	f104 0b1a 	add.w	fp, r4, #26
 80051ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051bc:	425b      	negs	r3, r3
 80051be:	4553      	cmp	r3, sl
 80051c0:	dc01      	bgt.n	80051c6 <_printf_float+0x2b6>
 80051c2:	464b      	mov	r3, r9
 80051c4:	e793      	b.n	80050ee <_printf_float+0x1de>
 80051c6:	2301      	movs	r3, #1
 80051c8:	465a      	mov	r2, fp
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	f43f aef8 	beq.w	8004fc6 <_printf_float+0xb6>
 80051d6:	f10a 0a01 	add.w	sl, sl, #1
 80051da:	e7ee      	b.n	80051ba <_printf_float+0x2aa>
 80051dc:	7fefffff 	.word	0x7fefffff
 80051e0:	08007732 	.word	0x08007732
 80051e4:	08007736 	.word	0x08007736
 80051e8:	0800773a 	.word	0x0800773a
 80051ec:	0800773e 	.word	0x0800773e
 80051f0:	08007742 	.word	0x08007742
 80051f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051f6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80051fa:	4553      	cmp	r3, sl
 80051fc:	bfa8      	it	ge
 80051fe:	4653      	movge	r3, sl
 8005200:	2b00      	cmp	r3, #0
 8005202:	4699      	mov	r9, r3
 8005204:	dc36      	bgt.n	8005274 <_printf_float+0x364>
 8005206:	f04f 0b00 	mov.w	fp, #0
 800520a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800520e:	f104 021a 	add.w	r2, r4, #26
 8005212:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005214:	930a      	str	r3, [sp, #40]	@ 0x28
 8005216:	eba3 0309 	sub.w	r3, r3, r9
 800521a:	455b      	cmp	r3, fp
 800521c:	dc31      	bgt.n	8005282 <_printf_float+0x372>
 800521e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005220:	459a      	cmp	sl, r3
 8005222:	dc3a      	bgt.n	800529a <_printf_float+0x38a>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	07da      	lsls	r2, r3, #31
 8005228:	d437      	bmi.n	800529a <_printf_float+0x38a>
 800522a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800522c:	ebaa 0903 	sub.w	r9, sl, r3
 8005230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005232:	ebaa 0303 	sub.w	r3, sl, r3
 8005236:	4599      	cmp	r9, r3
 8005238:	bfa8      	it	ge
 800523a:	4699      	movge	r9, r3
 800523c:	f1b9 0f00 	cmp.w	r9, #0
 8005240:	dc33      	bgt.n	80052aa <_printf_float+0x39a>
 8005242:	f04f 0800 	mov.w	r8, #0
 8005246:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800524a:	f104 0b1a 	add.w	fp, r4, #26
 800524e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005250:	ebaa 0303 	sub.w	r3, sl, r3
 8005254:	eba3 0309 	sub.w	r3, r3, r9
 8005258:	4543      	cmp	r3, r8
 800525a:	f77f af7a 	ble.w	8005152 <_printf_float+0x242>
 800525e:	2301      	movs	r3, #1
 8005260:	465a      	mov	r2, fp
 8005262:	4631      	mov	r1, r6
 8005264:	4628      	mov	r0, r5
 8005266:	47b8      	blx	r7
 8005268:	3001      	adds	r0, #1
 800526a:	f43f aeac 	beq.w	8004fc6 <_printf_float+0xb6>
 800526e:	f108 0801 	add.w	r8, r8, #1
 8005272:	e7ec      	b.n	800524e <_printf_float+0x33e>
 8005274:	4642      	mov	r2, r8
 8005276:	4631      	mov	r1, r6
 8005278:	4628      	mov	r0, r5
 800527a:	47b8      	blx	r7
 800527c:	3001      	adds	r0, #1
 800527e:	d1c2      	bne.n	8005206 <_printf_float+0x2f6>
 8005280:	e6a1      	b.n	8004fc6 <_printf_float+0xb6>
 8005282:	2301      	movs	r3, #1
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	920a      	str	r2, [sp, #40]	@ 0x28
 800528a:	47b8      	blx	r7
 800528c:	3001      	adds	r0, #1
 800528e:	f43f ae9a 	beq.w	8004fc6 <_printf_float+0xb6>
 8005292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005294:	f10b 0b01 	add.w	fp, fp, #1
 8005298:	e7bb      	b.n	8005212 <_printf_float+0x302>
 800529a:	4631      	mov	r1, r6
 800529c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052a0:	4628      	mov	r0, r5
 80052a2:	47b8      	blx	r7
 80052a4:	3001      	adds	r0, #1
 80052a6:	d1c0      	bne.n	800522a <_printf_float+0x31a>
 80052a8:	e68d      	b.n	8004fc6 <_printf_float+0xb6>
 80052aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052ac:	464b      	mov	r3, r9
 80052ae:	4631      	mov	r1, r6
 80052b0:	4628      	mov	r0, r5
 80052b2:	4442      	add	r2, r8
 80052b4:	47b8      	blx	r7
 80052b6:	3001      	adds	r0, #1
 80052b8:	d1c3      	bne.n	8005242 <_printf_float+0x332>
 80052ba:	e684      	b.n	8004fc6 <_printf_float+0xb6>
 80052bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80052c0:	f1ba 0f01 	cmp.w	sl, #1
 80052c4:	dc01      	bgt.n	80052ca <_printf_float+0x3ba>
 80052c6:	07db      	lsls	r3, r3, #31
 80052c8:	d536      	bpl.n	8005338 <_printf_float+0x428>
 80052ca:	2301      	movs	r3, #1
 80052cc:	4642      	mov	r2, r8
 80052ce:	4631      	mov	r1, r6
 80052d0:	4628      	mov	r0, r5
 80052d2:	47b8      	blx	r7
 80052d4:	3001      	adds	r0, #1
 80052d6:	f43f ae76 	beq.w	8004fc6 <_printf_float+0xb6>
 80052da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	f43f ae6e 	beq.w	8004fc6 <_printf_float+0xb6>
 80052ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80052ee:	2200      	movs	r2, #0
 80052f0:	2300      	movs	r3, #0
 80052f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052f6:	f7fb fb57 	bl	80009a8 <__aeabi_dcmpeq>
 80052fa:	b9c0      	cbnz	r0, 800532e <_printf_float+0x41e>
 80052fc:	4653      	mov	r3, sl
 80052fe:	f108 0201 	add.w	r2, r8, #1
 8005302:	4631      	mov	r1, r6
 8005304:	4628      	mov	r0, r5
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	d10c      	bne.n	8005326 <_printf_float+0x416>
 800530c:	e65b      	b.n	8004fc6 <_printf_float+0xb6>
 800530e:	2301      	movs	r3, #1
 8005310:	465a      	mov	r2, fp
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	47b8      	blx	r7
 8005318:	3001      	adds	r0, #1
 800531a:	f43f ae54 	beq.w	8004fc6 <_printf_float+0xb6>
 800531e:	f108 0801 	add.w	r8, r8, #1
 8005322:	45d0      	cmp	r8, sl
 8005324:	dbf3      	blt.n	800530e <_printf_float+0x3fe>
 8005326:	464b      	mov	r3, r9
 8005328:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800532c:	e6e0      	b.n	80050f0 <_printf_float+0x1e0>
 800532e:	f04f 0800 	mov.w	r8, #0
 8005332:	f104 0b1a 	add.w	fp, r4, #26
 8005336:	e7f4      	b.n	8005322 <_printf_float+0x412>
 8005338:	2301      	movs	r3, #1
 800533a:	4642      	mov	r2, r8
 800533c:	e7e1      	b.n	8005302 <_printf_float+0x3f2>
 800533e:	2301      	movs	r3, #1
 8005340:	464a      	mov	r2, r9
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	f43f ae3c 	beq.w	8004fc6 <_printf_float+0xb6>
 800534e:	f108 0801 	add.w	r8, r8, #1
 8005352:	68e3      	ldr	r3, [r4, #12]
 8005354:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005356:	1a5b      	subs	r3, r3, r1
 8005358:	4543      	cmp	r3, r8
 800535a:	dcf0      	bgt.n	800533e <_printf_float+0x42e>
 800535c:	e6fd      	b.n	800515a <_printf_float+0x24a>
 800535e:	f04f 0800 	mov.w	r8, #0
 8005362:	f104 0919 	add.w	r9, r4, #25
 8005366:	e7f4      	b.n	8005352 <_printf_float+0x442>

08005368 <_printf_common>:
 8005368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800536c:	4616      	mov	r6, r2
 800536e:	4698      	mov	r8, r3
 8005370:	688a      	ldr	r2, [r1, #8]
 8005372:	690b      	ldr	r3, [r1, #16]
 8005374:	4607      	mov	r7, r0
 8005376:	4293      	cmp	r3, r2
 8005378:	bfb8      	it	lt
 800537a:	4613      	movlt	r3, r2
 800537c:	6033      	str	r3, [r6, #0]
 800537e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005382:	460c      	mov	r4, r1
 8005384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005388:	b10a      	cbz	r2, 800538e <_printf_common+0x26>
 800538a:	3301      	adds	r3, #1
 800538c:	6033      	str	r3, [r6, #0]
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	0699      	lsls	r1, r3, #26
 8005392:	bf42      	ittt	mi
 8005394:	6833      	ldrmi	r3, [r6, #0]
 8005396:	3302      	addmi	r3, #2
 8005398:	6033      	strmi	r3, [r6, #0]
 800539a:	6825      	ldr	r5, [r4, #0]
 800539c:	f015 0506 	ands.w	r5, r5, #6
 80053a0:	d106      	bne.n	80053b0 <_printf_common+0x48>
 80053a2:	f104 0a19 	add.w	sl, r4, #25
 80053a6:	68e3      	ldr	r3, [r4, #12]
 80053a8:	6832      	ldr	r2, [r6, #0]
 80053aa:	1a9b      	subs	r3, r3, r2
 80053ac:	42ab      	cmp	r3, r5
 80053ae:	dc2b      	bgt.n	8005408 <_printf_common+0xa0>
 80053b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	3b00      	subs	r3, #0
 80053b8:	bf18      	it	ne
 80053ba:	2301      	movne	r3, #1
 80053bc:	0692      	lsls	r2, r2, #26
 80053be:	d430      	bmi.n	8005422 <_printf_common+0xba>
 80053c0:	4641      	mov	r1, r8
 80053c2:	4638      	mov	r0, r7
 80053c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053c8:	47c8      	blx	r9
 80053ca:	3001      	adds	r0, #1
 80053cc:	d023      	beq.n	8005416 <_printf_common+0xae>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	6922      	ldr	r2, [r4, #16]
 80053d2:	f003 0306 	and.w	r3, r3, #6
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	bf14      	ite	ne
 80053da:	2500      	movne	r5, #0
 80053dc:	6833      	ldreq	r3, [r6, #0]
 80053de:	f04f 0600 	mov.w	r6, #0
 80053e2:	bf08      	it	eq
 80053e4:	68e5      	ldreq	r5, [r4, #12]
 80053e6:	f104 041a 	add.w	r4, r4, #26
 80053ea:	bf08      	it	eq
 80053ec:	1aed      	subeq	r5, r5, r3
 80053ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053f2:	bf08      	it	eq
 80053f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053f8:	4293      	cmp	r3, r2
 80053fa:	bfc4      	itt	gt
 80053fc:	1a9b      	subgt	r3, r3, r2
 80053fe:	18ed      	addgt	r5, r5, r3
 8005400:	42b5      	cmp	r5, r6
 8005402:	d11a      	bne.n	800543a <_printf_common+0xd2>
 8005404:	2000      	movs	r0, #0
 8005406:	e008      	b.n	800541a <_printf_common+0xb2>
 8005408:	2301      	movs	r3, #1
 800540a:	4652      	mov	r2, sl
 800540c:	4641      	mov	r1, r8
 800540e:	4638      	mov	r0, r7
 8005410:	47c8      	blx	r9
 8005412:	3001      	adds	r0, #1
 8005414:	d103      	bne.n	800541e <_printf_common+0xb6>
 8005416:	f04f 30ff 	mov.w	r0, #4294967295
 800541a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541e:	3501      	adds	r5, #1
 8005420:	e7c1      	b.n	80053a6 <_printf_common+0x3e>
 8005422:	2030      	movs	r0, #48	@ 0x30
 8005424:	18e1      	adds	r1, r4, r3
 8005426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005430:	4422      	add	r2, r4
 8005432:	3302      	adds	r3, #2
 8005434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005438:	e7c2      	b.n	80053c0 <_printf_common+0x58>
 800543a:	2301      	movs	r3, #1
 800543c:	4622      	mov	r2, r4
 800543e:	4641      	mov	r1, r8
 8005440:	4638      	mov	r0, r7
 8005442:	47c8      	blx	r9
 8005444:	3001      	adds	r0, #1
 8005446:	d0e6      	beq.n	8005416 <_printf_common+0xae>
 8005448:	3601      	adds	r6, #1
 800544a:	e7d9      	b.n	8005400 <_printf_common+0x98>

0800544c <_printf_i>:
 800544c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005450:	7e0f      	ldrb	r7, [r1, #24]
 8005452:	4691      	mov	r9, r2
 8005454:	2f78      	cmp	r7, #120	@ 0x78
 8005456:	4680      	mov	r8, r0
 8005458:	460c      	mov	r4, r1
 800545a:	469a      	mov	sl, r3
 800545c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800545e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005462:	d807      	bhi.n	8005474 <_printf_i+0x28>
 8005464:	2f62      	cmp	r7, #98	@ 0x62
 8005466:	d80a      	bhi.n	800547e <_printf_i+0x32>
 8005468:	2f00      	cmp	r7, #0
 800546a:	f000 80d3 	beq.w	8005614 <_printf_i+0x1c8>
 800546e:	2f58      	cmp	r7, #88	@ 0x58
 8005470:	f000 80ba 	beq.w	80055e8 <_printf_i+0x19c>
 8005474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800547c:	e03a      	b.n	80054f4 <_printf_i+0xa8>
 800547e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005482:	2b15      	cmp	r3, #21
 8005484:	d8f6      	bhi.n	8005474 <_printf_i+0x28>
 8005486:	a101      	add	r1, pc, #4	@ (adr r1, 800548c <_printf_i+0x40>)
 8005488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800548c:	080054e5 	.word	0x080054e5
 8005490:	080054f9 	.word	0x080054f9
 8005494:	08005475 	.word	0x08005475
 8005498:	08005475 	.word	0x08005475
 800549c:	08005475 	.word	0x08005475
 80054a0:	08005475 	.word	0x08005475
 80054a4:	080054f9 	.word	0x080054f9
 80054a8:	08005475 	.word	0x08005475
 80054ac:	08005475 	.word	0x08005475
 80054b0:	08005475 	.word	0x08005475
 80054b4:	08005475 	.word	0x08005475
 80054b8:	080055fb 	.word	0x080055fb
 80054bc:	08005523 	.word	0x08005523
 80054c0:	080055b5 	.word	0x080055b5
 80054c4:	08005475 	.word	0x08005475
 80054c8:	08005475 	.word	0x08005475
 80054cc:	0800561d 	.word	0x0800561d
 80054d0:	08005475 	.word	0x08005475
 80054d4:	08005523 	.word	0x08005523
 80054d8:	08005475 	.word	0x08005475
 80054dc:	08005475 	.word	0x08005475
 80054e0:	080055bd 	.word	0x080055bd
 80054e4:	6833      	ldr	r3, [r6, #0]
 80054e6:	1d1a      	adds	r2, r3, #4
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6032      	str	r2, [r6, #0]
 80054ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054f4:	2301      	movs	r3, #1
 80054f6:	e09e      	b.n	8005636 <_printf_i+0x1ea>
 80054f8:	6833      	ldr	r3, [r6, #0]
 80054fa:	6820      	ldr	r0, [r4, #0]
 80054fc:	1d19      	adds	r1, r3, #4
 80054fe:	6031      	str	r1, [r6, #0]
 8005500:	0606      	lsls	r6, r0, #24
 8005502:	d501      	bpl.n	8005508 <_printf_i+0xbc>
 8005504:	681d      	ldr	r5, [r3, #0]
 8005506:	e003      	b.n	8005510 <_printf_i+0xc4>
 8005508:	0645      	lsls	r5, r0, #25
 800550a:	d5fb      	bpl.n	8005504 <_printf_i+0xb8>
 800550c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005510:	2d00      	cmp	r5, #0
 8005512:	da03      	bge.n	800551c <_printf_i+0xd0>
 8005514:	232d      	movs	r3, #45	@ 0x2d
 8005516:	426d      	negs	r5, r5
 8005518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800551c:	230a      	movs	r3, #10
 800551e:	4859      	ldr	r0, [pc, #356]	@ (8005684 <_printf_i+0x238>)
 8005520:	e011      	b.n	8005546 <_printf_i+0xfa>
 8005522:	6821      	ldr	r1, [r4, #0]
 8005524:	6833      	ldr	r3, [r6, #0]
 8005526:	0608      	lsls	r0, r1, #24
 8005528:	f853 5b04 	ldr.w	r5, [r3], #4
 800552c:	d402      	bmi.n	8005534 <_printf_i+0xe8>
 800552e:	0649      	lsls	r1, r1, #25
 8005530:	bf48      	it	mi
 8005532:	b2ad      	uxthmi	r5, r5
 8005534:	2f6f      	cmp	r7, #111	@ 0x6f
 8005536:	6033      	str	r3, [r6, #0]
 8005538:	bf14      	ite	ne
 800553a:	230a      	movne	r3, #10
 800553c:	2308      	moveq	r3, #8
 800553e:	4851      	ldr	r0, [pc, #324]	@ (8005684 <_printf_i+0x238>)
 8005540:	2100      	movs	r1, #0
 8005542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005546:	6866      	ldr	r6, [r4, #4]
 8005548:	2e00      	cmp	r6, #0
 800554a:	bfa8      	it	ge
 800554c:	6821      	ldrge	r1, [r4, #0]
 800554e:	60a6      	str	r6, [r4, #8]
 8005550:	bfa4      	itt	ge
 8005552:	f021 0104 	bicge.w	r1, r1, #4
 8005556:	6021      	strge	r1, [r4, #0]
 8005558:	b90d      	cbnz	r5, 800555e <_printf_i+0x112>
 800555a:	2e00      	cmp	r6, #0
 800555c:	d04b      	beq.n	80055f6 <_printf_i+0x1aa>
 800555e:	4616      	mov	r6, r2
 8005560:	fbb5 f1f3 	udiv	r1, r5, r3
 8005564:	fb03 5711 	mls	r7, r3, r1, r5
 8005568:	5dc7      	ldrb	r7, [r0, r7]
 800556a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800556e:	462f      	mov	r7, r5
 8005570:	42bb      	cmp	r3, r7
 8005572:	460d      	mov	r5, r1
 8005574:	d9f4      	bls.n	8005560 <_printf_i+0x114>
 8005576:	2b08      	cmp	r3, #8
 8005578:	d10b      	bne.n	8005592 <_printf_i+0x146>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	07df      	lsls	r7, r3, #31
 800557e:	d508      	bpl.n	8005592 <_printf_i+0x146>
 8005580:	6923      	ldr	r3, [r4, #16]
 8005582:	6861      	ldr	r1, [r4, #4]
 8005584:	4299      	cmp	r1, r3
 8005586:	bfde      	ittt	le
 8005588:	2330      	movle	r3, #48	@ 0x30
 800558a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800558e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005592:	1b92      	subs	r2, r2, r6
 8005594:	6122      	str	r2, [r4, #16]
 8005596:	464b      	mov	r3, r9
 8005598:	4621      	mov	r1, r4
 800559a:	4640      	mov	r0, r8
 800559c:	f8cd a000 	str.w	sl, [sp]
 80055a0:	aa03      	add	r2, sp, #12
 80055a2:	f7ff fee1 	bl	8005368 <_printf_common>
 80055a6:	3001      	adds	r0, #1
 80055a8:	d14a      	bne.n	8005640 <_printf_i+0x1f4>
 80055aa:	f04f 30ff 	mov.w	r0, #4294967295
 80055ae:	b004      	add	sp, #16
 80055b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	f043 0320 	orr.w	r3, r3, #32
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	2778      	movs	r7, #120	@ 0x78
 80055be:	4832      	ldr	r0, [pc, #200]	@ (8005688 <_printf_i+0x23c>)
 80055c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	6831      	ldr	r1, [r6, #0]
 80055c8:	061f      	lsls	r7, r3, #24
 80055ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80055ce:	d402      	bmi.n	80055d6 <_printf_i+0x18a>
 80055d0:	065f      	lsls	r7, r3, #25
 80055d2:	bf48      	it	mi
 80055d4:	b2ad      	uxthmi	r5, r5
 80055d6:	6031      	str	r1, [r6, #0]
 80055d8:	07d9      	lsls	r1, r3, #31
 80055da:	bf44      	itt	mi
 80055dc:	f043 0320 	orrmi.w	r3, r3, #32
 80055e0:	6023      	strmi	r3, [r4, #0]
 80055e2:	b11d      	cbz	r5, 80055ec <_printf_i+0x1a0>
 80055e4:	2310      	movs	r3, #16
 80055e6:	e7ab      	b.n	8005540 <_printf_i+0xf4>
 80055e8:	4826      	ldr	r0, [pc, #152]	@ (8005684 <_printf_i+0x238>)
 80055ea:	e7e9      	b.n	80055c0 <_printf_i+0x174>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	f023 0320 	bic.w	r3, r3, #32
 80055f2:	6023      	str	r3, [r4, #0]
 80055f4:	e7f6      	b.n	80055e4 <_printf_i+0x198>
 80055f6:	4616      	mov	r6, r2
 80055f8:	e7bd      	b.n	8005576 <_printf_i+0x12a>
 80055fa:	6833      	ldr	r3, [r6, #0]
 80055fc:	6825      	ldr	r5, [r4, #0]
 80055fe:	1d18      	adds	r0, r3, #4
 8005600:	6961      	ldr	r1, [r4, #20]
 8005602:	6030      	str	r0, [r6, #0]
 8005604:	062e      	lsls	r6, r5, #24
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	d501      	bpl.n	800560e <_printf_i+0x1c2>
 800560a:	6019      	str	r1, [r3, #0]
 800560c:	e002      	b.n	8005614 <_printf_i+0x1c8>
 800560e:	0668      	lsls	r0, r5, #25
 8005610:	d5fb      	bpl.n	800560a <_printf_i+0x1be>
 8005612:	8019      	strh	r1, [r3, #0]
 8005614:	2300      	movs	r3, #0
 8005616:	4616      	mov	r6, r2
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	e7bc      	b.n	8005596 <_printf_i+0x14a>
 800561c:	6833      	ldr	r3, [r6, #0]
 800561e:	2100      	movs	r1, #0
 8005620:	1d1a      	adds	r2, r3, #4
 8005622:	6032      	str	r2, [r6, #0]
 8005624:	681e      	ldr	r6, [r3, #0]
 8005626:	6862      	ldr	r2, [r4, #4]
 8005628:	4630      	mov	r0, r6
 800562a:	f000 f9b4 	bl	8005996 <memchr>
 800562e:	b108      	cbz	r0, 8005634 <_printf_i+0x1e8>
 8005630:	1b80      	subs	r0, r0, r6
 8005632:	6060      	str	r0, [r4, #4]
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	6123      	str	r3, [r4, #16]
 8005638:	2300      	movs	r3, #0
 800563a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800563e:	e7aa      	b.n	8005596 <_printf_i+0x14a>
 8005640:	4632      	mov	r2, r6
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	6923      	ldr	r3, [r4, #16]
 8005648:	47d0      	blx	sl
 800564a:	3001      	adds	r0, #1
 800564c:	d0ad      	beq.n	80055aa <_printf_i+0x15e>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	079b      	lsls	r3, r3, #30
 8005652:	d413      	bmi.n	800567c <_printf_i+0x230>
 8005654:	68e0      	ldr	r0, [r4, #12]
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	4298      	cmp	r0, r3
 800565a:	bfb8      	it	lt
 800565c:	4618      	movlt	r0, r3
 800565e:	e7a6      	b.n	80055ae <_printf_i+0x162>
 8005660:	2301      	movs	r3, #1
 8005662:	4632      	mov	r2, r6
 8005664:	4649      	mov	r1, r9
 8005666:	4640      	mov	r0, r8
 8005668:	47d0      	blx	sl
 800566a:	3001      	adds	r0, #1
 800566c:	d09d      	beq.n	80055aa <_printf_i+0x15e>
 800566e:	3501      	adds	r5, #1
 8005670:	68e3      	ldr	r3, [r4, #12]
 8005672:	9903      	ldr	r1, [sp, #12]
 8005674:	1a5b      	subs	r3, r3, r1
 8005676:	42ab      	cmp	r3, r5
 8005678:	dcf2      	bgt.n	8005660 <_printf_i+0x214>
 800567a:	e7eb      	b.n	8005654 <_printf_i+0x208>
 800567c:	2500      	movs	r5, #0
 800567e:	f104 0619 	add.w	r6, r4, #25
 8005682:	e7f5      	b.n	8005670 <_printf_i+0x224>
 8005684:	08007744 	.word	0x08007744
 8005688:	08007755 	.word	0x08007755

0800568c <std>:
 800568c:	2300      	movs	r3, #0
 800568e:	b510      	push	{r4, lr}
 8005690:	4604      	mov	r4, r0
 8005692:	e9c0 3300 	strd	r3, r3, [r0]
 8005696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800569a:	6083      	str	r3, [r0, #8]
 800569c:	8181      	strh	r1, [r0, #12]
 800569e:	6643      	str	r3, [r0, #100]	@ 0x64
 80056a0:	81c2      	strh	r2, [r0, #14]
 80056a2:	6183      	str	r3, [r0, #24]
 80056a4:	4619      	mov	r1, r3
 80056a6:	2208      	movs	r2, #8
 80056a8:	305c      	adds	r0, #92	@ 0x5c
 80056aa:	f000 f8f4 	bl	8005896 <memset>
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <std+0x58>)
 80056b0:	6224      	str	r4, [r4, #32]
 80056b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80056b4:	4b0c      	ldr	r3, [pc, #48]	@ (80056e8 <std+0x5c>)
 80056b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056b8:	4b0c      	ldr	r3, [pc, #48]	@ (80056ec <std+0x60>)
 80056ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056bc:	4b0c      	ldr	r3, [pc, #48]	@ (80056f0 <std+0x64>)
 80056be:	6323      	str	r3, [r4, #48]	@ 0x30
 80056c0:	4b0c      	ldr	r3, [pc, #48]	@ (80056f4 <std+0x68>)
 80056c2:	429c      	cmp	r4, r3
 80056c4:	d006      	beq.n	80056d4 <std+0x48>
 80056c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056ca:	4294      	cmp	r4, r2
 80056cc:	d002      	beq.n	80056d4 <std+0x48>
 80056ce:	33d0      	adds	r3, #208	@ 0xd0
 80056d0:	429c      	cmp	r4, r3
 80056d2:	d105      	bne.n	80056e0 <std+0x54>
 80056d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056dc:	f000 b958 	b.w	8005990 <__retarget_lock_init_recursive>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	bf00      	nop
 80056e4:	08005811 	.word	0x08005811
 80056e8:	08005833 	.word	0x08005833
 80056ec:	0800586b 	.word	0x0800586b
 80056f0:	0800588f 	.word	0x0800588f
 80056f4:	200003a0 	.word	0x200003a0

080056f8 <stdio_exit_handler>:
 80056f8:	4a02      	ldr	r2, [pc, #8]	@ (8005704 <stdio_exit_handler+0xc>)
 80056fa:	4903      	ldr	r1, [pc, #12]	@ (8005708 <stdio_exit_handler+0x10>)
 80056fc:	4803      	ldr	r0, [pc, #12]	@ (800570c <stdio_exit_handler+0x14>)
 80056fe:	f000 b869 	b.w	80057d4 <_fwalk_sglue>
 8005702:	bf00      	nop
 8005704:	2000000c 	.word	0x2000000c
 8005708:	08007055 	.word	0x08007055
 800570c:	2000001c 	.word	0x2000001c

08005710 <cleanup_stdio>:
 8005710:	6841      	ldr	r1, [r0, #4]
 8005712:	4b0c      	ldr	r3, [pc, #48]	@ (8005744 <cleanup_stdio+0x34>)
 8005714:	b510      	push	{r4, lr}
 8005716:	4299      	cmp	r1, r3
 8005718:	4604      	mov	r4, r0
 800571a:	d001      	beq.n	8005720 <cleanup_stdio+0x10>
 800571c:	f001 fc9a 	bl	8007054 <_fflush_r>
 8005720:	68a1      	ldr	r1, [r4, #8]
 8005722:	4b09      	ldr	r3, [pc, #36]	@ (8005748 <cleanup_stdio+0x38>)
 8005724:	4299      	cmp	r1, r3
 8005726:	d002      	beq.n	800572e <cleanup_stdio+0x1e>
 8005728:	4620      	mov	r0, r4
 800572a:	f001 fc93 	bl	8007054 <_fflush_r>
 800572e:	68e1      	ldr	r1, [r4, #12]
 8005730:	4b06      	ldr	r3, [pc, #24]	@ (800574c <cleanup_stdio+0x3c>)
 8005732:	4299      	cmp	r1, r3
 8005734:	d004      	beq.n	8005740 <cleanup_stdio+0x30>
 8005736:	4620      	mov	r0, r4
 8005738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573c:	f001 bc8a 	b.w	8007054 <_fflush_r>
 8005740:	bd10      	pop	{r4, pc}
 8005742:	bf00      	nop
 8005744:	200003a0 	.word	0x200003a0
 8005748:	20000408 	.word	0x20000408
 800574c:	20000470 	.word	0x20000470

08005750 <global_stdio_init.part.0>:
 8005750:	b510      	push	{r4, lr}
 8005752:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <global_stdio_init.part.0+0x30>)
 8005754:	4c0b      	ldr	r4, [pc, #44]	@ (8005784 <global_stdio_init.part.0+0x34>)
 8005756:	4a0c      	ldr	r2, [pc, #48]	@ (8005788 <global_stdio_init.part.0+0x38>)
 8005758:	4620      	mov	r0, r4
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	2104      	movs	r1, #4
 800575e:	2200      	movs	r2, #0
 8005760:	f7ff ff94 	bl	800568c <std>
 8005764:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005768:	2201      	movs	r2, #1
 800576a:	2109      	movs	r1, #9
 800576c:	f7ff ff8e 	bl	800568c <std>
 8005770:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005774:	2202      	movs	r2, #2
 8005776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800577a:	2112      	movs	r1, #18
 800577c:	f7ff bf86 	b.w	800568c <std>
 8005780:	200004d8 	.word	0x200004d8
 8005784:	200003a0 	.word	0x200003a0
 8005788:	080056f9 	.word	0x080056f9

0800578c <__sfp_lock_acquire>:
 800578c:	4801      	ldr	r0, [pc, #4]	@ (8005794 <__sfp_lock_acquire+0x8>)
 800578e:	f000 b900 	b.w	8005992 <__retarget_lock_acquire_recursive>
 8005792:	bf00      	nop
 8005794:	200004e1 	.word	0x200004e1

08005798 <__sfp_lock_release>:
 8005798:	4801      	ldr	r0, [pc, #4]	@ (80057a0 <__sfp_lock_release+0x8>)
 800579a:	f000 b8fb 	b.w	8005994 <__retarget_lock_release_recursive>
 800579e:	bf00      	nop
 80057a0:	200004e1 	.word	0x200004e1

080057a4 <__sinit>:
 80057a4:	b510      	push	{r4, lr}
 80057a6:	4604      	mov	r4, r0
 80057a8:	f7ff fff0 	bl	800578c <__sfp_lock_acquire>
 80057ac:	6a23      	ldr	r3, [r4, #32]
 80057ae:	b11b      	cbz	r3, 80057b8 <__sinit+0x14>
 80057b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b4:	f7ff bff0 	b.w	8005798 <__sfp_lock_release>
 80057b8:	4b04      	ldr	r3, [pc, #16]	@ (80057cc <__sinit+0x28>)
 80057ba:	6223      	str	r3, [r4, #32]
 80057bc:	4b04      	ldr	r3, [pc, #16]	@ (80057d0 <__sinit+0x2c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f5      	bne.n	80057b0 <__sinit+0xc>
 80057c4:	f7ff ffc4 	bl	8005750 <global_stdio_init.part.0>
 80057c8:	e7f2      	b.n	80057b0 <__sinit+0xc>
 80057ca:	bf00      	nop
 80057cc:	08005711 	.word	0x08005711
 80057d0:	200004d8 	.word	0x200004d8

080057d4 <_fwalk_sglue>:
 80057d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d8:	4607      	mov	r7, r0
 80057da:	4688      	mov	r8, r1
 80057dc:	4614      	mov	r4, r2
 80057de:	2600      	movs	r6, #0
 80057e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057e4:	f1b9 0901 	subs.w	r9, r9, #1
 80057e8:	d505      	bpl.n	80057f6 <_fwalk_sglue+0x22>
 80057ea:	6824      	ldr	r4, [r4, #0]
 80057ec:	2c00      	cmp	r4, #0
 80057ee:	d1f7      	bne.n	80057e0 <_fwalk_sglue+0xc>
 80057f0:	4630      	mov	r0, r6
 80057f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057f6:	89ab      	ldrh	r3, [r5, #12]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d907      	bls.n	800580c <_fwalk_sglue+0x38>
 80057fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005800:	3301      	adds	r3, #1
 8005802:	d003      	beq.n	800580c <_fwalk_sglue+0x38>
 8005804:	4629      	mov	r1, r5
 8005806:	4638      	mov	r0, r7
 8005808:	47c0      	blx	r8
 800580a:	4306      	orrs	r6, r0
 800580c:	3568      	adds	r5, #104	@ 0x68
 800580e:	e7e9      	b.n	80057e4 <_fwalk_sglue+0x10>

08005810 <__sread>:
 8005810:	b510      	push	{r4, lr}
 8005812:	460c      	mov	r4, r1
 8005814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005818:	f000 f86c 	bl	80058f4 <_read_r>
 800581c:	2800      	cmp	r0, #0
 800581e:	bfab      	itete	ge
 8005820:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005822:	89a3      	ldrhlt	r3, [r4, #12]
 8005824:	181b      	addge	r3, r3, r0
 8005826:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800582a:	bfac      	ite	ge
 800582c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800582e:	81a3      	strhlt	r3, [r4, #12]
 8005830:	bd10      	pop	{r4, pc}

08005832 <__swrite>:
 8005832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	461f      	mov	r7, r3
 8005838:	898b      	ldrh	r3, [r1, #12]
 800583a:	4605      	mov	r5, r0
 800583c:	05db      	lsls	r3, r3, #23
 800583e:	460c      	mov	r4, r1
 8005840:	4616      	mov	r6, r2
 8005842:	d505      	bpl.n	8005850 <__swrite+0x1e>
 8005844:	2302      	movs	r3, #2
 8005846:	2200      	movs	r2, #0
 8005848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800584c:	f000 f840 	bl	80058d0 <_lseek_r>
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	4632      	mov	r2, r6
 8005854:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005858:	81a3      	strh	r3, [r4, #12]
 800585a:	4628      	mov	r0, r5
 800585c:	463b      	mov	r3, r7
 800585e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005866:	f000 b857 	b.w	8005918 <_write_r>

0800586a <__sseek>:
 800586a:	b510      	push	{r4, lr}
 800586c:	460c      	mov	r4, r1
 800586e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005872:	f000 f82d 	bl	80058d0 <_lseek_r>
 8005876:	1c43      	adds	r3, r0, #1
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	bf15      	itete	ne
 800587c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800587e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005882:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005886:	81a3      	strheq	r3, [r4, #12]
 8005888:	bf18      	it	ne
 800588a:	81a3      	strhne	r3, [r4, #12]
 800588c:	bd10      	pop	{r4, pc}

0800588e <__sclose>:
 800588e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005892:	f000 b80d 	b.w	80058b0 <_close_r>

08005896 <memset>:
 8005896:	4603      	mov	r3, r0
 8005898:	4402      	add	r2, r0
 800589a:	4293      	cmp	r3, r2
 800589c:	d100      	bne.n	80058a0 <memset+0xa>
 800589e:	4770      	bx	lr
 80058a0:	f803 1b01 	strb.w	r1, [r3], #1
 80058a4:	e7f9      	b.n	800589a <memset+0x4>
	...

080058a8 <_localeconv_r>:
 80058a8:	4800      	ldr	r0, [pc, #0]	@ (80058ac <_localeconv_r+0x4>)
 80058aa:	4770      	bx	lr
 80058ac:	20000158 	.word	0x20000158

080058b0 <_close_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	2300      	movs	r3, #0
 80058b4:	4d05      	ldr	r5, [pc, #20]	@ (80058cc <_close_r+0x1c>)
 80058b6:	4604      	mov	r4, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	602b      	str	r3, [r5, #0]
 80058bc:	f7fb ff17 	bl	80016ee <_close>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_close_r+0x1a>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_close_r+0x1a>
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	200004dc 	.word	0x200004dc

080058d0 <_lseek_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4604      	mov	r4, r0
 80058d4:	4608      	mov	r0, r1
 80058d6:	4611      	mov	r1, r2
 80058d8:	2200      	movs	r2, #0
 80058da:	4d05      	ldr	r5, [pc, #20]	@ (80058f0 <_lseek_r+0x20>)
 80058dc:	602a      	str	r2, [r5, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7fb ff29 	bl	8001736 <_lseek>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_lseek_r+0x1e>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_lseek_r+0x1e>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	200004dc 	.word	0x200004dc

080058f4 <_read_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	2200      	movs	r2, #0
 80058fe:	4d05      	ldr	r5, [pc, #20]	@ (8005914 <_read_r+0x20>)
 8005900:	602a      	str	r2, [r5, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	f7fb feba 	bl	800167c <_read>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d102      	bne.n	8005912 <_read_r+0x1e>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	b103      	cbz	r3, 8005912 <_read_r+0x1e>
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	200004dc 	.word	0x200004dc

08005918 <_write_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4604      	mov	r4, r0
 800591c:	4608      	mov	r0, r1
 800591e:	4611      	mov	r1, r2
 8005920:	2200      	movs	r2, #0
 8005922:	4d05      	ldr	r5, [pc, #20]	@ (8005938 <_write_r+0x20>)
 8005924:	602a      	str	r2, [r5, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	f7fb fec5 	bl	80016b6 <_write>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_write_r+0x1e>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_write_r+0x1e>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	200004dc 	.word	0x200004dc

0800593c <__errno>:
 800593c:	4b01      	ldr	r3, [pc, #4]	@ (8005944 <__errno+0x8>)
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000018 	.word	0x20000018

08005948 <__libc_init_array>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	2600      	movs	r6, #0
 800594c:	4d0c      	ldr	r5, [pc, #48]	@ (8005980 <__libc_init_array+0x38>)
 800594e:	4c0d      	ldr	r4, [pc, #52]	@ (8005984 <__libc_init_array+0x3c>)
 8005950:	1b64      	subs	r4, r4, r5
 8005952:	10a4      	asrs	r4, r4, #2
 8005954:	42a6      	cmp	r6, r4
 8005956:	d109      	bne.n	800596c <__libc_init_array+0x24>
 8005958:	f001 fec8 	bl	80076ec <_init>
 800595c:	2600      	movs	r6, #0
 800595e:	4d0a      	ldr	r5, [pc, #40]	@ (8005988 <__libc_init_array+0x40>)
 8005960:	4c0a      	ldr	r4, [pc, #40]	@ (800598c <__libc_init_array+0x44>)
 8005962:	1b64      	subs	r4, r4, r5
 8005964:	10a4      	asrs	r4, r4, #2
 8005966:	42a6      	cmp	r6, r4
 8005968:	d105      	bne.n	8005976 <__libc_init_array+0x2e>
 800596a:	bd70      	pop	{r4, r5, r6, pc}
 800596c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005970:	4798      	blx	r3
 8005972:	3601      	adds	r6, #1
 8005974:	e7ee      	b.n	8005954 <__libc_init_array+0xc>
 8005976:	f855 3b04 	ldr.w	r3, [r5], #4
 800597a:	4798      	blx	r3
 800597c:	3601      	adds	r6, #1
 800597e:	e7f2      	b.n	8005966 <__libc_init_array+0x1e>
 8005980:	08007aa8 	.word	0x08007aa8
 8005984:	08007aa8 	.word	0x08007aa8
 8005988:	08007aa8 	.word	0x08007aa8
 800598c:	08007aac 	.word	0x08007aac

08005990 <__retarget_lock_init_recursive>:
 8005990:	4770      	bx	lr

08005992 <__retarget_lock_acquire_recursive>:
 8005992:	4770      	bx	lr

08005994 <__retarget_lock_release_recursive>:
 8005994:	4770      	bx	lr

08005996 <memchr>:
 8005996:	4603      	mov	r3, r0
 8005998:	b510      	push	{r4, lr}
 800599a:	b2c9      	uxtb	r1, r1
 800599c:	4402      	add	r2, r0
 800599e:	4293      	cmp	r3, r2
 80059a0:	4618      	mov	r0, r3
 80059a2:	d101      	bne.n	80059a8 <memchr+0x12>
 80059a4:	2000      	movs	r0, #0
 80059a6:	e003      	b.n	80059b0 <memchr+0x1a>
 80059a8:	7804      	ldrb	r4, [r0, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	428c      	cmp	r4, r1
 80059ae:	d1f6      	bne.n	800599e <memchr+0x8>
 80059b0:	bd10      	pop	{r4, pc}

080059b2 <quorem>:
 80059b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b6:	6903      	ldr	r3, [r0, #16]
 80059b8:	690c      	ldr	r4, [r1, #16]
 80059ba:	4607      	mov	r7, r0
 80059bc:	42a3      	cmp	r3, r4
 80059be:	db7e      	blt.n	8005abe <quorem+0x10c>
 80059c0:	3c01      	subs	r4, #1
 80059c2:	00a3      	lsls	r3, r4, #2
 80059c4:	f100 0514 	add.w	r5, r0, #20
 80059c8:	f101 0814 	add.w	r8, r1, #20
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059dc:	3301      	adds	r3, #1
 80059de:	429a      	cmp	r2, r3
 80059e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80059e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059e8:	d32e      	bcc.n	8005a48 <quorem+0x96>
 80059ea:	f04f 0a00 	mov.w	sl, #0
 80059ee:	46c4      	mov	ip, r8
 80059f0:	46ae      	mov	lr, r5
 80059f2:	46d3      	mov	fp, sl
 80059f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059f8:	b298      	uxth	r0, r3
 80059fa:	fb06 a000 	mla	r0, r6, r0, sl
 80059fe:	0c1b      	lsrs	r3, r3, #16
 8005a00:	0c02      	lsrs	r2, r0, #16
 8005a02:	fb06 2303 	mla	r3, r6, r3, r2
 8005a06:	f8de 2000 	ldr.w	r2, [lr]
 8005a0a:	b280      	uxth	r0, r0
 8005a0c:	b292      	uxth	r2, r2
 8005a0e:	1a12      	subs	r2, r2, r0
 8005a10:	445a      	add	r2, fp
 8005a12:	f8de 0000 	ldr.w	r0, [lr]
 8005a16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a20:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a24:	b292      	uxth	r2, r2
 8005a26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a2a:	45e1      	cmp	r9, ip
 8005a2c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a30:	f84e 2b04 	str.w	r2, [lr], #4
 8005a34:	d2de      	bcs.n	80059f4 <quorem+0x42>
 8005a36:	9b00      	ldr	r3, [sp, #0]
 8005a38:	58eb      	ldr	r3, [r5, r3]
 8005a3a:	b92b      	cbnz	r3, 8005a48 <quorem+0x96>
 8005a3c:	9b01      	ldr	r3, [sp, #4]
 8005a3e:	3b04      	subs	r3, #4
 8005a40:	429d      	cmp	r5, r3
 8005a42:	461a      	mov	r2, r3
 8005a44:	d32f      	bcc.n	8005aa6 <quorem+0xf4>
 8005a46:	613c      	str	r4, [r7, #16]
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f001 f97b 	bl	8006d44 <__mcmp>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	db25      	blt.n	8005a9e <quorem+0xec>
 8005a52:	4629      	mov	r1, r5
 8005a54:	2000      	movs	r0, #0
 8005a56:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a5a:	f8d1 c000 	ldr.w	ip, [r1]
 8005a5e:	fa1f fe82 	uxth.w	lr, r2
 8005a62:	fa1f f38c 	uxth.w	r3, ip
 8005a66:	eba3 030e 	sub.w	r3, r3, lr
 8005a6a:	4403      	add	r3, r0
 8005a6c:	0c12      	lsrs	r2, r2, #16
 8005a6e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a72:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a7c:	45c1      	cmp	r9, r8
 8005a7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a82:	f841 3b04 	str.w	r3, [r1], #4
 8005a86:	d2e6      	bcs.n	8005a56 <quorem+0xa4>
 8005a88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a90:	b922      	cbnz	r2, 8005a9c <quorem+0xea>
 8005a92:	3b04      	subs	r3, #4
 8005a94:	429d      	cmp	r5, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	d30b      	bcc.n	8005ab2 <quorem+0x100>
 8005a9a:	613c      	str	r4, [r7, #16]
 8005a9c:	3601      	adds	r6, #1
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	b003      	add	sp, #12
 8005aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa6:	6812      	ldr	r2, [r2, #0]
 8005aa8:	3b04      	subs	r3, #4
 8005aaa:	2a00      	cmp	r2, #0
 8005aac:	d1cb      	bne.n	8005a46 <quorem+0x94>
 8005aae:	3c01      	subs	r4, #1
 8005ab0:	e7c6      	b.n	8005a40 <quorem+0x8e>
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	3b04      	subs	r3, #4
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	d1ef      	bne.n	8005a9a <quorem+0xe8>
 8005aba:	3c01      	subs	r4, #1
 8005abc:	e7ea      	b.n	8005a94 <quorem+0xe2>
 8005abe:	2000      	movs	r0, #0
 8005ac0:	e7ee      	b.n	8005aa0 <quorem+0xee>
 8005ac2:	0000      	movs	r0, r0
 8005ac4:	0000      	movs	r0, r0
	...

08005ac8 <_dtoa_r>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	4614      	mov	r4, r2
 8005ace:	461d      	mov	r5, r3
 8005ad0:	69c7      	ldr	r7, [r0, #28]
 8005ad2:	b097      	sub	sp, #92	@ 0x5c
 8005ad4:	4683      	mov	fp, r0
 8005ad6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005ada:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005adc:	b97f      	cbnz	r7, 8005afe <_dtoa_r+0x36>
 8005ade:	2010      	movs	r0, #16
 8005ae0:	f000 fe02 	bl	80066e8 <malloc>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	f8cb 001c 	str.w	r0, [fp, #28]
 8005aea:	b920      	cbnz	r0, 8005af6 <_dtoa_r+0x2e>
 8005aec:	21ef      	movs	r1, #239	@ 0xef
 8005aee:	4ba8      	ldr	r3, [pc, #672]	@ (8005d90 <_dtoa_r+0x2c8>)
 8005af0:	48a8      	ldr	r0, [pc, #672]	@ (8005d94 <_dtoa_r+0x2cc>)
 8005af2:	f001 faf5 	bl	80070e0 <__assert_func>
 8005af6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005afa:	6007      	str	r7, [r0, #0]
 8005afc:	60c7      	str	r7, [r0, #12]
 8005afe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	b159      	cbz	r1, 8005b1e <_dtoa_r+0x56>
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	2301      	movs	r3, #1
 8005b0a:	4093      	lsls	r3, r2
 8005b0c:	604a      	str	r2, [r1, #4]
 8005b0e:	608b      	str	r3, [r1, #8]
 8005b10:	4658      	mov	r0, fp
 8005b12:	f000 fedf 	bl	80068d4 <_Bfree>
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	1e2b      	subs	r3, r5, #0
 8005b20:	bfaf      	iteee	ge
 8005b22:	2300      	movge	r3, #0
 8005b24:	2201      	movlt	r2, #1
 8005b26:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b2a:	9303      	strlt	r3, [sp, #12]
 8005b2c:	bfa8      	it	ge
 8005b2e:	6033      	strge	r3, [r6, #0]
 8005b30:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b34:	4b98      	ldr	r3, [pc, #608]	@ (8005d98 <_dtoa_r+0x2d0>)
 8005b36:	bfb8      	it	lt
 8005b38:	6032      	strlt	r2, [r6, #0]
 8005b3a:	ea33 0308 	bics.w	r3, r3, r8
 8005b3e:	d112      	bne.n	8005b66 <_dtoa_r+0x9e>
 8005b40:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005b4c:	4323      	orrs	r3, r4
 8005b4e:	f000 8550 	beq.w	80065f2 <_dtoa_r+0xb2a>
 8005b52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b54:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005d9c <_dtoa_r+0x2d4>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 8552 	beq.w	8006602 <_dtoa_r+0xb3a>
 8005b5e:	f10a 0303 	add.w	r3, sl, #3
 8005b62:	f000 bd4c 	b.w	80065fe <_dtoa_r+0xb36>
 8005b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b72:	2200      	movs	r2, #0
 8005b74:	2300      	movs	r3, #0
 8005b76:	f7fa ff17 	bl	80009a8 <__aeabi_dcmpeq>
 8005b7a:	4607      	mov	r7, r0
 8005b7c:	b158      	cbz	r0, 8005b96 <_dtoa_r+0xce>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005b82:	6013      	str	r3, [r2, #0]
 8005b84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b86:	b113      	cbz	r3, 8005b8e <_dtoa_r+0xc6>
 8005b88:	4b85      	ldr	r3, [pc, #532]	@ (8005da0 <_dtoa_r+0x2d8>)
 8005b8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b8c:	6013      	str	r3, [r2, #0]
 8005b8e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005da4 <_dtoa_r+0x2dc>
 8005b92:	f000 bd36 	b.w	8006602 <_dtoa_r+0xb3a>
 8005b96:	ab14      	add	r3, sp, #80	@ 0x50
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	ab15      	add	r3, sp, #84	@ 0x54
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	4658      	mov	r0, fp
 8005ba0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005ba4:	f001 f97e 	bl	8006ea4 <__d2b>
 8005ba8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005bac:	4681      	mov	r9, r0
 8005bae:	2e00      	cmp	r6, #0
 8005bb0:	d077      	beq.n	8005ca2 <_dtoa_r+0x1da>
 8005bb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bb8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bc0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005bc4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005bc8:	9712      	str	r7, [sp, #72]	@ 0x48
 8005bca:	4619      	mov	r1, r3
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4b76      	ldr	r3, [pc, #472]	@ (8005da8 <_dtoa_r+0x2e0>)
 8005bd0:	f7fa faca 	bl	8000168 <__aeabi_dsub>
 8005bd4:	a368      	add	r3, pc, #416	@ (adr r3, 8005d78 <_dtoa_r+0x2b0>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f7fa fc7d 	bl	80004d8 <__aeabi_dmul>
 8005bde:	a368      	add	r3, pc, #416	@ (adr r3, 8005d80 <_dtoa_r+0x2b8>)
 8005be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be4:	f7fa fac2 	bl	800016c <__adddf3>
 8005be8:	4604      	mov	r4, r0
 8005bea:	4630      	mov	r0, r6
 8005bec:	460d      	mov	r5, r1
 8005bee:	f7fa fc09 	bl	8000404 <__aeabi_i2d>
 8005bf2:	a365      	add	r3, pc, #404	@ (adr r3, 8005d88 <_dtoa_r+0x2c0>)
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	f7fa fc6e 	bl	80004d8 <__aeabi_dmul>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4620      	mov	r0, r4
 8005c02:	4629      	mov	r1, r5
 8005c04:	f7fa fab2 	bl	800016c <__adddf3>
 8005c08:	4604      	mov	r4, r0
 8005c0a:	460d      	mov	r5, r1
 8005c0c:	f7fa ff14 	bl	8000a38 <__aeabi_d2iz>
 8005c10:	2200      	movs	r2, #0
 8005c12:	4607      	mov	r7, r0
 8005c14:	2300      	movs	r3, #0
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa fecf 	bl	80009bc <__aeabi_dcmplt>
 8005c1e:	b140      	cbz	r0, 8005c32 <_dtoa_r+0x16a>
 8005c20:	4638      	mov	r0, r7
 8005c22:	f7fa fbef 	bl	8000404 <__aeabi_i2d>
 8005c26:	4622      	mov	r2, r4
 8005c28:	462b      	mov	r3, r5
 8005c2a:	f7fa febd 	bl	80009a8 <__aeabi_dcmpeq>
 8005c2e:	b900      	cbnz	r0, 8005c32 <_dtoa_r+0x16a>
 8005c30:	3f01      	subs	r7, #1
 8005c32:	2f16      	cmp	r7, #22
 8005c34:	d853      	bhi.n	8005cde <_dtoa_r+0x216>
 8005c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8005dac <_dtoa_r+0x2e4>)
 8005c3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f7fa feba 	bl	80009bc <__aeabi_dcmplt>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d04a      	beq.n	8005ce2 <_dtoa_r+0x21a>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	3f01      	subs	r7, #1
 8005c50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c54:	1b9b      	subs	r3, r3, r6
 8005c56:	1e5a      	subs	r2, r3, #1
 8005c58:	bf46      	itte	mi
 8005c5a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005c5e:	2300      	movmi	r3, #0
 8005c60:	f04f 0800 	movpl.w	r8, #0
 8005c64:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c66:	bf48      	it	mi
 8005c68:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005c6a:	2f00      	cmp	r7, #0
 8005c6c:	db3b      	blt.n	8005ce6 <_dtoa_r+0x21e>
 8005c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c70:	970e      	str	r7, [sp, #56]	@ 0x38
 8005c72:	443b      	add	r3, r7
 8005c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c76:	2300      	movs	r3, #0
 8005c78:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c7a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	d866      	bhi.n	8005d4e <_dtoa_r+0x286>
 8005c80:	2b05      	cmp	r3, #5
 8005c82:	bfc4      	itt	gt
 8005c84:	3b04      	subgt	r3, #4
 8005c86:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005c88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c8a:	bfc8      	it	gt
 8005c8c:	2400      	movgt	r4, #0
 8005c8e:	f1a3 0302 	sub.w	r3, r3, #2
 8005c92:	bfd8      	it	le
 8005c94:	2401      	movle	r4, #1
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d864      	bhi.n	8005d64 <_dtoa_r+0x29c>
 8005c9a:	e8df f003 	tbb	[pc, r3]
 8005c9e:	382b      	.short	0x382b
 8005ca0:	5636      	.short	0x5636
 8005ca2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005ca6:	441e      	add	r6, r3
 8005ca8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	bfc1      	itttt	gt
 8005cb0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005cb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005cb8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005cbc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005cc0:	bfd6      	itet	le
 8005cc2:	f1c3 0320 	rsble	r3, r3, #32
 8005cc6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005cca:	fa04 f003 	lslle.w	r0, r4, r3
 8005cce:	f7fa fb89 	bl	80003e4 <__aeabi_ui2d>
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005cd8:	3e01      	subs	r6, #1
 8005cda:	9212      	str	r2, [sp, #72]	@ 0x48
 8005cdc:	e775      	b.n	8005bca <_dtoa_r+0x102>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e7b6      	b.n	8005c50 <_dtoa_r+0x188>
 8005ce2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005ce4:	e7b5      	b.n	8005c52 <_dtoa_r+0x18a>
 8005ce6:	427b      	negs	r3, r7
 8005ce8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cea:	2300      	movs	r3, #0
 8005cec:	eba8 0807 	sub.w	r8, r8, r7
 8005cf0:	930e      	str	r3, [sp, #56]	@ 0x38
 8005cf2:	e7c2      	b.n	8005c7a <_dtoa_r+0x1b2>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dc35      	bgt.n	8005d6a <_dtoa_r+0x2a2>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	461a      	mov	r2, r3
 8005d02:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d06:	9221      	str	r2, [sp, #132]	@ 0x84
 8005d08:	e00b      	b.n	8005d22 <_dtoa_r+0x25a>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e7f3      	b.n	8005cf6 <_dtoa_r+0x22e>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	9308      	str	r3, [sp, #32]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	9307      	str	r3, [sp, #28]
 8005d1e:	bfb8      	it	lt
 8005d20:	2301      	movlt	r3, #1
 8005d22:	2100      	movs	r1, #0
 8005d24:	2204      	movs	r2, #4
 8005d26:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005d2a:	f102 0514 	add.w	r5, r2, #20
 8005d2e:	429d      	cmp	r5, r3
 8005d30:	d91f      	bls.n	8005d72 <_dtoa_r+0x2aa>
 8005d32:	6041      	str	r1, [r0, #4]
 8005d34:	4658      	mov	r0, fp
 8005d36:	f000 fd8d 	bl	8006854 <_Balloc>
 8005d3a:	4682      	mov	sl, r0
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	d139      	bne.n	8005db4 <_dtoa_r+0x2ec>
 8005d40:	4602      	mov	r2, r0
 8005d42:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d46:	4b1a      	ldr	r3, [pc, #104]	@ (8005db0 <_dtoa_r+0x2e8>)
 8005d48:	e6d2      	b.n	8005af0 <_dtoa_r+0x28>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7e0      	b.n	8005d10 <_dtoa_r+0x248>
 8005d4e:	2401      	movs	r4, #1
 8005d50:	2300      	movs	r3, #0
 8005d52:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d54:	9320      	str	r3, [sp, #128]	@ 0x80
 8005d56:	f04f 33ff 	mov.w	r3, #4294967295
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d60:	2312      	movs	r3, #18
 8005d62:	e7d0      	b.n	8005d06 <_dtoa_r+0x23e>
 8005d64:	2301      	movs	r3, #1
 8005d66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d68:	e7f5      	b.n	8005d56 <_dtoa_r+0x28e>
 8005d6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d6c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d70:	e7d7      	b.n	8005d22 <_dtoa_r+0x25a>
 8005d72:	3101      	adds	r1, #1
 8005d74:	0052      	lsls	r2, r2, #1
 8005d76:	e7d8      	b.n	8005d2a <_dtoa_r+0x262>
 8005d78:	636f4361 	.word	0x636f4361
 8005d7c:	3fd287a7 	.word	0x3fd287a7
 8005d80:	8b60c8b3 	.word	0x8b60c8b3
 8005d84:	3fc68a28 	.word	0x3fc68a28
 8005d88:	509f79fb 	.word	0x509f79fb
 8005d8c:	3fd34413 	.word	0x3fd34413
 8005d90:	08007773 	.word	0x08007773
 8005d94:	0800778a 	.word	0x0800778a
 8005d98:	7ff00000 	.word	0x7ff00000
 8005d9c:	0800776f 	.word	0x0800776f
 8005da0:	08007743 	.word	0x08007743
 8005da4:	08007742 	.word	0x08007742
 8005da8:	3ff80000 	.word	0x3ff80000
 8005dac:	08007880 	.word	0x08007880
 8005db0:	080077e2 	.word	0x080077e2
 8005db4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005db8:	6018      	str	r0, [r3, #0]
 8005dba:	9b07      	ldr	r3, [sp, #28]
 8005dbc:	2b0e      	cmp	r3, #14
 8005dbe:	f200 80a4 	bhi.w	8005f0a <_dtoa_r+0x442>
 8005dc2:	2c00      	cmp	r4, #0
 8005dc4:	f000 80a1 	beq.w	8005f0a <_dtoa_r+0x442>
 8005dc8:	2f00      	cmp	r7, #0
 8005dca:	dd33      	ble.n	8005e34 <_dtoa_r+0x36c>
 8005dcc:	4b86      	ldr	r3, [pc, #536]	@ (8005fe8 <_dtoa_r+0x520>)
 8005dce:	f007 020f 	and.w	r2, r7, #15
 8005dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dd6:	05f8      	lsls	r0, r7, #23
 8005dd8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ddc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005de0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005de4:	d516      	bpl.n	8005e14 <_dtoa_r+0x34c>
 8005de6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dea:	4b80      	ldr	r3, [pc, #512]	@ (8005fec <_dtoa_r+0x524>)
 8005dec:	2603      	movs	r6, #3
 8005dee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005df2:	f7fa fc9b 	bl	800072c <__aeabi_ddiv>
 8005df6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dfa:	f004 040f 	and.w	r4, r4, #15
 8005dfe:	4d7b      	ldr	r5, [pc, #492]	@ (8005fec <_dtoa_r+0x524>)
 8005e00:	b954      	cbnz	r4, 8005e18 <_dtoa_r+0x350>
 8005e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e0a:	f7fa fc8f 	bl	800072c <__aeabi_ddiv>
 8005e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e12:	e028      	b.n	8005e66 <_dtoa_r+0x39e>
 8005e14:	2602      	movs	r6, #2
 8005e16:	e7f2      	b.n	8005dfe <_dtoa_r+0x336>
 8005e18:	07e1      	lsls	r1, r4, #31
 8005e1a:	d508      	bpl.n	8005e2e <_dtoa_r+0x366>
 8005e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e24:	f7fa fb58 	bl	80004d8 <__aeabi_dmul>
 8005e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	1064      	asrs	r4, r4, #1
 8005e30:	3508      	adds	r5, #8
 8005e32:	e7e5      	b.n	8005e00 <_dtoa_r+0x338>
 8005e34:	f000 80d2 	beq.w	8005fdc <_dtoa_r+0x514>
 8005e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e3c:	427c      	negs	r4, r7
 8005e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8005fe8 <_dtoa_r+0x520>)
 8005e40:	f004 020f 	and.w	r2, r4, #15
 8005e44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa fb44 	bl	80004d8 <__aeabi_dmul>
 8005e50:	2602      	movs	r6, #2
 8005e52:	2300      	movs	r3, #0
 8005e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e58:	4d64      	ldr	r5, [pc, #400]	@ (8005fec <_dtoa_r+0x524>)
 8005e5a:	1124      	asrs	r4, r4, #4
 8005e5c:	2c00      	cmp	r4, #0
 8005e5e:	f040 80b2 	bne.w	8005fc6 <_dtoa_r+0x4fe>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1d3      	bne.n	8005e0e <_dtoa_r+0x346>
 8005e66:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 80b7 	beq.w	8005fe0 <_dtoa_r+0x518>
 8005e72:	2200      	movs	r2, #0
 8005e74:	4620      	mov	r0, r4
 8005e76:	4629      	mov	r1, r5
 8005e78:	4b5d      	ldr	r3, [pc, #372]	@ (8005ff0 <_dtoa_r+0x528>)
 8005e7a:	f7fa fd9f 	bl	80009bc <__aeabi_dcmplt>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f000 80ae 	beq.w	8005fe0 <_dtoa_r+0x518>
 8005e84:	9b07      	ldr	r3, [sp, #28]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 80aa 	beq.w	8005fe0 <_dtoa_r+0x518>
 8005e8c:	9b08      	ldr	r3, [sp, #32]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	dd37      	ble.n	8005f02 <_dtoa_r+0x43a>
 8005e92:	1e7b      	subs	r3, r7, #1
 8005e94:	4620      	mov	r0, r4
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	4b55      	ldr	r3, [pc, #340]	@ (8005ff4 <_dtoa_r+0x52c>)
 8005e9e:	f7fa fb1b 	bl	80004d8 <__aeabi_dmul>
 8005ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ea6:	9c08      	ldr	r4, [sp, #32]
 8005ea8:	3601      	adds	r6, #1
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f7fa faaa 	bl	8000404 <__aeabi_i2d>
 8005eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eb4:	f7fa fb10 	bl	80004d8 <__aeabi_dmul>
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4b4f      	ldr	r3, [pc, #316]	@ (8005ff8 <_dtoa_r+0x530>)
 8005ebc:	f7fa f956 	bl	800016c <__adddf3>
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ec6:	2c00      	cmp	r4, #0
 8005ec8:	f040 809a 	bne.w	8006000 <_dtoa_r+0x538>
 8005ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8005ffc <_dtoa_r+0x534>)
 8005ed4:	f7fa f948 	bl	8000168 <__aeabi_dsub>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ee0:	462a      	mov	r2, r5
 8005ee2:	4633      	mov	r3, r6
 8005ee4:	f7fa fd88 	bl	80009f8 <__aeabi_dcmpgt>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	f040 828e 	bne.w	800640a <_dtoa_r+0x942>
 8005eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ef2:	462a      	mov	r2, r5
 8005ef4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ef8:	f7fa fd60 	bl	80009bc <__aeabi_dcmplt>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	f040 8127 	bne.w	8006150 <_dtoa_r+0x688>
 8005f02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005f06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005f0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f2c0 8163 	blt.w	80061d8 <_dtoa_r+0x710>
 8005f12:	2f0e      	cmp	r7, #14
 8005f14:	f300 8160 	bgt.w	80061d8 <_dtoa_r+0x710>
 8005f18:	4b33      	ldr	r3, [pc, #204]	@ (8005fe8 <_dtoa_r+0x520>)
 8005f1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	da03      	bge.n	8005f34 <_dtoa_r+0x46c>
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f340 8100 	ble.w	8006134 <_dtoa_r+0x66c>
 8005f34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f38:	4656      	mov	r6, sl
 8005f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f3e:	4620      	mov	r0, r4
 8005f40:	4629      	mov	r1, r5
 8005f42:	f7fa fbf3 	bl	800072c <__aeabi_ddiv>
 8005f46:	f7fa fd77 	bl	8000a38 <__aeabi_d2iz>
 8005f4a:	4680      	mov	r8, r0
 8005f4c:	f7fa fa5a 	bl	8000404 <__aeabi_i2d>
 8005f50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f54:	f7fa fac0 	bl	80004d8 <__aeabi_dmul>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	4629      	mov	r1, r5
 8005f60:	f7fa f902 	bl	8000168 <__aeabi_dsub>
 8005f64:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005f68:	9d07      	ldr	r5, [sp, #28]
 8005f6a:	f806 4b01 	strb.w	r4, [r6], #1
 8005f6e:	eba6 040a 	sub.w	r4, r6, sl
 8005f72:	42a5      	cmp	r5, r4
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	f040 8116 	bne.w	80061a8 <_dtoa_r+0x6e0>
 8005f7c:	f7fa f8f6 	bl	800016c <__adddf3>
 8005f80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f84:	4604      	mov	r4, r0
 8005f86:	460d      	mov	r5, r1
 8005f88:	f7fa fd36 	bl	80009f8 <__aeabi_dcmpgt>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	f040 80f8 	bne.w	8006182 <_dtoa_r+0x6ba>
 8005f92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f96:	4620      	mov	r0, r4
 8005f98:	4629      	mov	r1, r5
 8005f9a:	f7fa fd05 	bl	80009a8 <__aeabi_dcmpeq>
 8005f9e:	b118      	cbz	r0, 8005fa8 <_dtoa_r+0x4e0>
 8005fa0:	f018 0f01 	tst.w	r8, #1
 8005fa4:	f040 80ed 	bne.w	8006182 <_dtoa_r+0x6ba>
 8005fa8:	4649      	mov	r1, r9
 8005faa:	4658      	mov	r0, fp
 8005fac:	f000 fc92 	bl	80068d4 <_Bfree>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	7033      	strb	r3, [r6, #0]
 8005fb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005fb6:	3701      	adds	r7, #1
 8005fb8:	601f      	str	r7, [r3, #0]
 8005fba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8320 	beq.w	8006602 <_dtoa_r+0xb3a>
 8005fc2:	601e      	str	r6, [r3, #0]
 8005fc4:	e31d      	b.n	8006602 <_dtoa_r+0xb3a>
 8005fc6:	07e2      	lsls	r2, r4, #31
 8005fc8:	d505      	bpl.n	8005fd6 <_dtoa_r+0x50e>
 8005fca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005fce:	f7fa fa83 	bl	80004d8 <__aeabi_dmul>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	1064      	asrs	r4, r4, #1
 8005fd8:	3508      	adds	r5, #8
 8005fda:	e73f      	b.n	8005e5c <_dtoa_r+0x394>
 8005fdc:	2602      	movs	r6, #2
 8005fde:	e742      	b.n	8005e66 <_dtoa_r+0x39e>
 8005fe0:	9c07      	ldr	r4, [sp, #28]
 8005fe2:	9704      	str	r7, [sp, #16]
 8005fe4:	e761      	b.n	8005eaa <_dtoa_r+0x3e2>
 8005fe6:	bf00      	nop
 8005fe8:	08007880 	.word	0x08007880
 8005fec:	08007858 	.word	0x08007858
 8005ff0:	3ff00000 	.word	0x3ff00000
 8005ff4:	40240000 	.word	0x40240000
 8005ff8:	401c0000 	.word	0x401c0000
 8005ffc:	40140000 	.word	0x40140000
 8006000:	4b70      	ldr	r3, [pc, #448]	@ (80061c4 <_dtoa_r+0x6fc>)
 8006002:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006004:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006008:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800600c:	4454      	add	r4, sl
 800600e:	2900      	cmp	r1, #0
 8006010:	d045      	beq.n	800609e <_dtoa_r+0x5d6>
 8006012:	2000      	movs	r0, #0
 8006014:	496c      	ldr	r1, [pc, #432]	@ (80061c8 <_dtoa_r+0x700>)
 8006016:	f7fa fb89 	bl	800072c <__aeabi_ddiv>
 800601a:	4633      	mov	r3, r6
 800601c:	462a      	mov	r2, r5
 800601e:	f7fa f8a3 	bl	8000168 <__aeabi_dsub>
 8006022:	4656      	mov	r6, sl
 8006024:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800602c:	f7fa fd04 	bl	8000a38 <__aeabi_d2iz>
 8006030:	4605      	mov	r5, r0
 8006032:	f7fa f9e7 	bl	8000404 <__aeabi_i2d>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800603e:	f7fa f893 	bl	8000168 <__aeabi_dsub>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	3530      	adds	r5, #48	@ 0x30
 8006048:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800604c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006050:	f806 5b01 	strb.w	r5, [r6], #1
 8006054:	f7fa fcb2 	bl	80009bc <__aeabi_dcmplt>
 8006058:	2800      	cmp	r0, #0
 800605a:	d163      	bne.n	8006124 <_dtoa_r+0x65c>
 800605c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006060:	2000      	movs	r0, #0
 8006062:	495a      	ldr	r1, [pc, #360]	@ (80061cc <_dtoa_r+0x704>)
 8006064:	f7fa f880 	bl	8000168 <__aeabi_dsub>
 8006068:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800606c:	f7fa fca6 	bl	80009bc <__aeabi_dcmplt>
 8006070:	2800      	cmp	r0, #0
 8006072:	f040 8087 	bne.w	8006184 <_dtoa_r+0x6bc>
 8006076:	42a6      	cmp	r6, r4
 8006078:	f43f af43 	beq.w	8005f02 <_dtoa_r+0x43a>
 800607c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006080:	2200      	movs	r2, #0
 8006082:	4b53      	ldr	r3, [pc, #332]	@ (80061d0 <_dtoa_r+0x708>)
 8006084:	f7fa fa28 	bl	80004d8 <__aeabi_dmul>
 8006088:	2200      	movs	r2, #0
 800608a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800608e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006092:	4b4f      	ldr	r3, [pc, #316]	@ (80061d0 <_dtoa_r+0x708>)
 8006094:	f7fa fa20 	bl	80004d8 <__aeabi_dmul>
 8006098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800609c:	e7c4      	b.n	8006028 <_dtoa_r+0x560>
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	f7fa fa19 	bl	80004d8 <__aeabi_dmul>
 80060a6:	4656      	mov	r6, sl
 80060a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060ac:	9413      	str	r4, [sp, #76]	@ 0x4c
 80060ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060b2:	f7fa fcc1 	bl	8000a38 <__aeabi_d2iz>
 80060b6:	4605      	mov	r5, r0
 80060b8:	f7fa f9a4 	bl	8000404 <__aeabi_i2d>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060c4:	f7fa f850 	bl	8000168 <__aeabi_dsub>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	3530      	adds	r5, #48	@ 0x30
 80060ce:	f806 5b01 	strb.w	r5, [r6], #1
 80060d2:	42a6      	cmp	r6, r4
 80060d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	d124      	bne.n	8006128 <_dtoa_r+0x660>
 80060de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80060e2:	4b39      	ldr	r3, [pc, #228]	@ (80061c8 <_dtoa_r+0x700>)
 80060e4:	f7fa f842 	bl	800016c <__adddf3>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060f0:	f7fa fc82 	bl	80009f8 <__aeabi_dcmpgt>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d145      	bne.n	8006184 <_dtoa_r+0x6bc>
 80060f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060fc:	2000      	movs	r0, #0
 80060fe:	4932      	ldr	r1, [pc, #200]	@ (80061c8 <_dtoa_r+0x700>)
 8006100:	f7fa f832 	bl	8000168 <__aeabi_dsub>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800610c:	f7fa fc56 	bl	80009bc <__aeabi_dcmplt>
 8006110:	2800      	cmp	r0, #0
 8006112:	f43f aef6 	beq.w	8005f02 <_dtoa_r+0x43a>
 8006116:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006118:	1e73      	subs	r3, r6, #1
 800611a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800611c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006120:	2b30      	cmp	r3, #48	@ 0x30
 8006122:	d0f8      	beq.n	8006116 <_dtoa_r+0x64e>
 8006124:	9f04      	ldr	r7, [sp, #16]
 8006126:	e73f      	b.n	8005fa8 <_dtoa_r+0x4e0>
 8006128:	4b29      	ldr	r3, [pc, #164]	@ (80061d0 <_dtoa_r+0x708>)
 800612a:	f7fa f9d5 	bl	80004d8 <__aeabi_dmul>
 800612e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006132:	e7bc      	b.n	80060ae <_dtoa_r+0x5e6>
 8006134:	d10c      	bne.n	8006150 <_dtoa_r+0x688>
 8006136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800613a:	2200      	movs	r2, #0
 800613c:	4b25      	ldr	r3, [pc, #148]	@ (80061d4 <_dtoa_r+0x70c>)
 800613e:	f7fa f9cb 	bl	80004d8 <__aeabi_dmul>
 8006142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006146:	f7fa fc4d 	bl	80009e4 <__aeabi_dcmpge>
 800614a:	2800      	cmp	r0, #0
 800614c:	f000 815b 	beq.w	8006406 <_dtoa_r+0x93e>
 8006150:	2400      	movs	r4, #0
 8006152:	4625      	mov	r5, r4
 8006154:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006156:	4656      	mov	r6, sl
 8006158:	43db      	mvns	r3, r3
 800615a:	9304      	str	r3, [sp, #16]
 800615c:	2700      	movs	r7, #0
 800615e:	4621      	mov	r1, r4
 8006160:	4658      	mov	r0, fp
 8006162:	f000 fbb7 	bl	80068d4 <_Bfree>
 8006166:	2d00      	cmp	r5, #0
 8006168:	d0dc      	beq.n	8006124 <_dtoa_r+0x65c>
 800616a:	b12f      	cbz	r7, 8006178 <_dtoa_r+0x6b0>
 800616c:	42af      	cmp	r7, r5
 800616e:	d003      	beq.n	8006178 <_dtoa_r+0x6b0>
 8006170:	4639      	mov	r1, r7
 8006172:	4658      	mov	r0, fp
 8006174:	f000 fbae 	bl	80068d4 <_Bfree>
 8006178:	4629      	mov	r1, r5
 800617a:	4658      	mov	r0, fp
 800617c:	f000 fbaa 	bl	80068d4 <_Bfree>
 8006180:	e7d0      	b.n	8006124 <_dtoa_r+0x65c>
 8006182:	9704      	str	r7, [sp, #16]
 8006184:	4633      	mov	r3, r6
 8006186:	461e      	mov	r6, r3
 8006188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800618c:	2a39      	cmp	r2, #57	@ 0x39
 800618e:	d107      	bne.n	80061a0 <_dtoa_r+0x6d8>
 8006190:	459a      	cmp	sl, r3
 8006192:	d1f8      	bne.n	8006186 <_dtoa_r+0x6be>
 8006194:	9a04      	ldr	r2, [sp, #16]
 8006196:	3201      	adds	r2, #1
 8006198:	9204      	str	r2, [sp, #16]
 800619a:	2230      	movs	r2, #48	@ 0x30
 800619c:	f88a 2000 	strb.w	r2, [sl]
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	3201      	adds	r2, #1
 80061a4:	701a      	strb	r2, [r3, #0]
 80061a6:	e7bd      	b.n	8006124 <_dtoa_r+0x65c>
 80061a8:	2200      	movs	r2, #0
 80061aa:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <_dtoa_r+0x708>)
 80061ac:	f7fa f994 	bl	80004d8 <__aeabi_dmul>
 80061b0:	2200      	movs	r2, #0
 80061b2:	2300      	movs	r3, #0
 80061b4:	4604      	mov	r4, r0
 80061b6:	460d      	mov	r5, r1
 80061b8:	f7fa fbf6 	bl	80009a8 <__aeabi_dcmpeq>
 80061bc:	2800      	cmp	r0, #0
 80061be:	f43f aebc 	beq.w	8005f3a <_dtoa_r+0x472>
 80061c2:	e6f1      	b.n	8005fa8 <_dtoa_r+0x4e0>
 80061c4:	08007880 	.word	0x08007880
 80061c8:	3fe00000 	.word	0x3fe00000
 80061cc:	3ff00000 	.word	0x3ff00000
 80061d0:	40240000 	.word	0x40240000
 80061d4:	40140000 	.word	0x40140000
 80061d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80061da:	2a00      	cmp	r2, #0
 80061dc:	f000 80db 	beq.w	8006396 <_dtoa_r+0x8ce>
 80061e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80061e2:	2a01      	cmp	r2, #1
 80061e4:	f300 80bf 	bgt.w	8006366 <_dtoa_r+0x89e>
 80061e8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80061ea:	2a00      	cmp	r2, #0
 80061ec:	f000 80b7 	beq.w	800635e <_dtoa_r+0x896>
 80061f0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80061f4:	4646      	mov	r6, r8
 80061f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80061f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061fa:	2101      	movs	r1, #1
 80061fc:	441a      	add	r2, r3
 80061fe:	4658      	mov	r0, fp
 8006200:	4498      	add	r8, r3
 8006202:	9209      	str	r2, [sp, #36]	@ 0x24
 8006204:	f000 fc1a 	bl	8006a3c <__i2b>
 8006208:	4605      	mov	r5, r0
 800620a:	b15e      	cbz	r6, 8006224 <_dtoa_r+0x75c>
 800620c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	dd08      	ble.n	8006224 <_dtoa_r+0x75c>
 8006212:	42b3      	cmp	r3, r6
 8006214:	bfa8      	it	ge
 8006216:	4633      	movge	r3, r6
 8006218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800621a:	eba8 0803 	sub.w	r8, r8, r3
 800621e:	1af6      	subs	r6, r6, r3
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	9309      	str	r3, [sp, #36]	@ 0x24
 8006224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006226:	b1f3      	cbz	r3, 8006266 <_dtoa_r+0x79e>
 8006228:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 80b7 	beq.w	800639e <_dtoa_r+0x8d6>
 8006230:	b18c      	cbz	r4, 8006256 <_dtoa_r+0x78e>
 8006232:	4629      	mov	r1, r5
 8006234:	4622      	mov	r2, r4
 8006236:	4658      	mov	r0, fp
 8006238:	f000 fcbe 	bl	8006bb8 <__pow5mult>
 800623c:	464a      	mov	r2, r9
 800623e:	4601      	mov	r1, r0
 8006240:	4605      	mov	r5, r0
 8006242:	4658      	mov	r0, fp
 8006244:	f000 fc10 	bl	8006a68 <__multiply>
 8006248:	4649      	mov	r1, r9
 800624a:	9004      	str	r0, [sp, #16]
 800624c:	4658      	mov	r0, fp
 800624e:	f000 fb41 	bl	80068d4 <_Bfree>
 8006252:	9b04      	ldr	r3, [sp, #16]
 8006254:	4699      	mov	r9, r3
 8006256:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006258:	1b1a      	subs	r2, r3, r4
 800625a:	d004      	beq.n	8006266 <_dtoa_r+0x79e>
 800625c:	4649      	mov	r1, r9
 800625e:	4658      	mov	r0, fp
 8006260:	f000 fcaa 	bl	8006bb8 <__pow5mult>
 8006264:	4681      	mov	r9, r0
 8006266:	2101      	movs	r1, #1
 8006268:	4658      	mov	r0, fp
 800626a:	f000 fbe7 	bl	8006a3c <__i2b>
 800626e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006270:	4604      	mov	r4, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 81c9 	beq.w	800660a <_dtoa_r+0xb42>
 8006278:	461a      	mov	r2, r3
 800627a:	4601      	mov	r1, r0
 800627c:	4658      	mov	r0, fp
 800627e:	f000 fc9b 	bl	8006bb8 <__pow5mult>
 8006282:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006284:	4604      	mov	r4, r0
 8006286:	2b01      	cmp	r3, #1
 8006288:	f300 808f 	bgt.w	80063aa <_dtoa_r+0x8e2>
 800628c:	9b02      	ldr	r3, [sp, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	f040 8087 	bne.w	80063a2 <_dtoa_r+0x8da>
 8006294:	9b03      	ldr	r3, [sp, #12]
 8006296:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800629a:	2b00      	cmp	r3, #0
 800629c:	f040 8083 	bne.w	80063a6 <_dtoa_r+0x8de>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062a6:	0d1b      	lsrs	r3, r3, #20
 80062a8:	051b      	lsls	r3, r3, #20
 80062aa:	b12b      	cbz	r3, 80062b8 <_dtoa_r+0x7f0>
 80062ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ae:	f108 0801 	add.w	r8, r8, #1
 80062b2:	3301      	adds	r3, #1
 80062b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b6:	2301      	movs	r3, #1
 80062b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 81aa 	beq.w	8006616 <_dtoa_r+0xb4e>
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062c8:	6918      	ldr	r0, [r3, #16]
 80062ca:	f000 fb6b 	bl	80069a4 <__hi0bits>
 80062ce:	f1c0 0020 	rsb	r0, r0, #32
 80062d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d4:	4418      	add	r0, r3
 80062d6:	f010 001f 	ands.w	r0, r0, #31
 80062da:	d071      	beq.n	80063c0 <_dtoa_r+0x8f8>
 80062dc:	f1c0 0320 	rsb	r3, r0, #32
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	dd65      	ble.n	80063b0 <_dtoa_r+0x8e8>
 80062e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e6:	f1c0 001c 	rsb	r0, r0, #28
 80062ea:	4403      	add	r3, r0
 80062ec:	4480      	add	r8, r0
 80062ee:	4406      	add	r6, r0
 80062f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062f2:	f1b8 0f00 	cmp.w	r8, #0
 80062f6:	dd05      	ble.n	8006304 <_dtoa_r+0x83c>
 80062f8:	4649      	mov	r1, r9
 80062fa:	4642      	mov	r2, r8
 80062fc:	4658      	mov	r0, fp
 80062fe:	f000 fcb5 	bl	8006c6c <__lshift>
 8006302:	4681      	mov	r9, r0
 8006304:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	dd05      	ble.n	8006316 <_dtoa_r+0x84e>
 800630a:	4621      	mov	r1, r4
 800630c:	461a      	mov	r2, r3
 800630e:	4658      	mov	r0, fp
 8006310:	f000 fcac 	bl	8006c6c <__lshift>
 8006314:	4604      	mov	r4, r0
 8006316:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006318:	2b00      	cmp	r3, #0
 800631a:	d053      	beq.n	80063c4 <_dtoa_r+0x8fc>
 800631c:	4621      	mov	r1, r4
 800631e:	4648      	mov	r0, r9
 8006320:	f000 fd10 	bl	8006d44 <__mcmp>
 8006324:	2800      	cmp	r0, #0
 8006326:	da4d      	bge.n	80063c4 <_dtoa_r+0x8fc>
 8006328:	1e7b      	subs	r3, r7, #1
 800632a:	4649      	mov	r1, r9
 800632c:	9304      	str	r3, [sp, #16]
 800632e:	220a      	movs	r2, #10
 8006330:	2300      	movs	r3, #0
 8006332:	4658      	mov	r0, fp
 8006334:	f000 faf0 	bl	8006918 <__multadd>
 8006338:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800633a:	4681      	mov	r9, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 816c 	beq.w	800661a <_dtoa_r+0xb52>
 8006342:	2300      	movs	r3, #0
 8006344:	4629      	mov	r1, r5
 8006346:	220a      	movs	r2, #10
 8006348:	4658      	mov	r0, fp
 800634a:	f000 fae5 	bl	8006918 <__multadd>
 800634e:	9b08      	ldr	r3, [sp, #32]
 8006350:	4605      	mov	r5, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	dc61      	bgt.n	800641a <_dtoa_r+0x952>
 8006356:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006358:	2b02      	cmp	r3, #2
 800635a:	dc3b      	bgt.n	80063d4 <_dtoa_r+0x90c>
 800635c:	e05d      	b.n	800641a <_dtoa_r+0x952>
 800635e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006360:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006364:	e746      	b.n	80061f4 <_dtoa_r+0x72c>
 8006366:	9b07      	ldr	r3, [sp, #28]
 8006368:	1e5c      	subs	r4, r3, #1
 800636a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800636c:	42a3      	cmp	r3, r4
 800636e:	bfbf      	itttt	lt
 8006370:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006372:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006374:	1ae3      	sublt	r3, r4, r3
 8006376:	18d2      	addlt	r2, r2, r3
 8006378:	bfa8      	it	ge
 800637a:	1b1c      	subge	r4, r3, r4
 800637c:	9b07      	ldr	r3, [sp, #28]
 800637e:	bfbe      	ittt	lt
 8006380:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006382:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006384:	2400      	movlt	r4, #0
 8006386:	2b00      	cmp	r3, #0
 8006388:	bfb5      	itete	lt
 800638a:	eba8 0603 	sublt.w	r6, r8, r3
 800638e:	4646      	movge	r6, r8
 8006390:	2300      	movlt	r3, #0
 8006392:	9b07      	ldrge	r3, [sp, #28]
 8006394:	e730      	b.n	80061f8 <_dtoa_r+0x730>
 8006396:	4646      	mov	r6, r8
 8006398:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800639a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800639c:	e735      	b.n	800620a <_dtoa_r+0x742>
 800639e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063a0:	e75c      	b.n	800625c <_dtoa_r+0x794>
 80063a2:	2300      	movs	r3, #0
 80063a4:	e788      	b.n	80062b8 <_dtoa_r+0x7f0>
 80063a6:	9b02      	ldr	r3, [sp, #8]
 80063a8:	e786      	b.n	80062b8 <_dtoa_r+0x7f0>
 80063aa:	2300      	movs	r3, #0
 80063ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ae:	e788      	b.n	80062c2 <_dtoa_r+0x7fa>
 80063b0:	d09f      	beq.n	80062f2 <_dtoa_r+0x82a>
 80063b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063b4:	331c      	adds	r3, #28
 80063b6:	441a      	add	r2, r3
 80063b8:	4498      	add	r8, r3
 80063ba:	441e      	add	r6, r3
 80063bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80063be:	e798      	b.n	80062f2 <_dtoa_r+0x82a>
 80063c0:	4603      	mov	r3, r0
 80063c2:	e7f6      	b.n	80063b2 <_dtoa_r+0x8ea>
 80063c4:	9b07      	ldr	r3, [sp, #28]
 80063c6:	9704      	str	r7, [sp, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dc20      	bgt.n	800640e <_dtoa_r+0x946>
 80063cc:	9308      	str	r3, [sp, #32]
 80063ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	dd1e      	ble.n	8006412 <_dtoa_r+0x94a>
 80063d4:	9b08      	ldr	r3, [sp, #32]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f47f aebc 	bne.w	8006154 <_dtoa_r+0x68c>
 80063dc:	4621      	mov	r1, r4
 80063de:	2205      	movs	r2, #5
 80063e0:	4658      	mov	r0, fp
 80063e2:	f000 fa99 	bl	8006918 <__multadd>
 80063e6:	4601      	mov	r1, r0
 80063e8:	4604      	mov	r4, r0
 80063ea:	4648      	mov	r0, r9
 80063ec:	f000 fcaa 	bl	8006d44 <__mcmp>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f77f aeaf 	ble.w	8006154 <_dtoa_r+0x68c>
 80063f6:	2331      	movs	r3, #49	@ 0x31
 80063f8:	4656      	mov	r6, sl
 80063fa:	f806 3b01 	strb.w	r3, [r6], #1
 80063fe:	9b04      	ldr	r3, [sp, #16]
 8006400:	3301      	adds	r3, #1
 8006402:	9304      	str	r3, [sp, #16]
 8006404:	e6aa      	b.n	800615c <_dtoa_r+0x694>
 8006406:	9c07      	ldr	r4, [sp, #28]
 8006408:	9704      	str	r7, [sp, #16]
 800640a:	4625      	mov	r5, r4
 800640c:	e7f3      	b.n	80063f6 <_dtoa_r+0x92e>
 800640e:	9b07      	ldr	r3, [sp, #28]
 8006410:	9308      	str	r3, [sp, #32]
 8006412:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8104 	beq.w	8006622 <_dtoa_r+0xb5a>
 800641a:	2e00      	cmp	r6, #0
 800641c:	dd05      	ble.n	800642a <_dtoa_r+0x962>
 800641e:	4629      	mov	r1, r5
 8006420:	4632      	mov	r2, r6
 8006422:	4658      	mov	r0, fp
 8006424:	f000 fc22 	bl	8006c6c <__lshift>
 8006428:	4605      	mov	r5, r0
 800642a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800642c:	2b00      	cmp	r3, #0
 800642e:	d05a      	beq.n	80064e6 <_dtoa_r+0xa1e>
 8006430:	4658      	mov	r0, fp
 8006432:	6869      	ldr	r1, [r5, #4]
 8006434:	f000 fa0e 	bl	8006854 <_Balloc>
 8006438:	4606      	mov	r6, r0
 800643a:	b928      	cbnz	r0, 8006448 <_dtoa_r+0x980>
 800643c:	4602      	mov	r2, r0
 800643e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006442:	4b83      	ldr	r3, [pc, #524]	@ (8006650 <_dtoa_r+0xb88>)
 8006444:	f7ff bb54 	b.w	8005af0 <_dtoa_r+0x28>
 8006448:	692a      	ldr	r2, [r5, #16]
 800644a:	f105 010c 	add.w	r1, r5, #12
 800644e:	3202      	adds	r2, #2
 8006450:	0092      	lsls	r2, r2, #2
 8006452:	300c      	adds	r0, #12
 8006454:	f000 fe36 	bl	80070c4 <memcpy>
 8006458:	2201      	movs	r2, #1
 800645a:	4631      	mov	r1, r6
 800645c:	4658      	mov	r0, fp
 800645e:	f000 fc05 	bl	8006c6c <__lshift>
 8006462:	462f      	mov	r7, r5
 8006464:	4605      	mov	r5, r0
 8006466:	f10a 0301 	add.w	r3, sl, #1
 800646a:	9307      	str	r3, [sp, #28]
 800646c:	9b08      	ldr	r3, [sp, #32]
 800646e:	4453      	add	r3, sl
 8006470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006472:	9b02      	ldr	r3, [sp, #8]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	930a      	str	r3, [sp, #40]	@ 0x28
 800647a:	9b07      	ldr	r3, [sp, #28]
 800647c:	4621      	mov	r1, r4
 800647e:	3b01      	subs	r3, #1
 8006480:	4648      	mov	r0, r9
 8006482:	9302      	str	r3, [sp, #8]
 8006484:	f7ff fa95 	bl	80059b2 <quorem>
 8006488:	4639      	mov	r1, r7
 800648a:	9008      	str	r0, [sp, #32]
 800648c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006490:	4648      	mov	r0, r9
 8006492:	f000 fc57 	bl	8006d44 <__mcmp>
 8006496:	462a      	mov	r2, r5
 8006498:	9009      	str	r0, [sp, #36]	@ 0x24
 800649a:	4621      	mov	r1, r4
 800649c:	4658      	mov	r0, fp
 800649e:	f000 fc6d 	bl	8006d7c <__mdiff>
 80064a2:	68c2      	ldr	r2, [r0, #12]
 80064a4:	4606      	mov	r6, r0
 80064a6:	bb02      	cbnz	r2, 80064ea <_dtoa_r+0xa22>
 80064a8:	4601      	mov	r1, r0
 80064aa:	4648      	mov	r0, r9
 80064ac:	f000 fc4a 	bl	8006d44 <__mcmp>
 80064b0:	4602      	mov	r2, r0
 80064b2:	4631      	mov	r1, r6
 80064b4:	4658      	mov	r0, fp
 80064b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80064b8:	f000 fa0c 	bl	80068d4 <_Bfree>
 80064bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80064c0:	9e07      	ldr	r6, [sp, #28]
 80064c2:	ea43 0102 	orr.w	r1, r3, r2
 80064c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064c8:	4319      	orrs	r1, r3
 80064ca:	d110      	bne.n	80064ee <_dtoa_r+0xa26>
 80064cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064d0:	d029      	beq.n	8006526 <_dtoa_r+0xa5e>
 80064d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	dd02      	ble.n	80064de <_dtoa_r+0xa16>
 80064d8:	9b08      	ldr	r3, [sp, #32]
 80064da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80064de:	9b02      	ldr	r3, [sp, #8]
 80064e0:	f883 8000 	strb.w	r8, [r3]
 80064e4:	e63b      	b.n	800615e <_dtoa_r+0x696>
 80064e6:	4628      	mov	r0, r5
 80064e8:	e7bb      	b.n	8006462 <_dtoa_r+0x99a>
 80064ea:	2201      	movs	r2, #1
 80064ec:	e7e1      	b.n	80064b2 <_dtoa_r+0x9ea>
 80064ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db04      	blt.n	80064fe <_dtoa_r+0xa36>
 80064f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80064f6:	430b      	orrs	r3, r1
 80064f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064fa:	430b      	orrs	r3, r1
 80064fc:	d120      	bne.n	8006540 <_dtoa_r+0xa78>
 80064fe:	2a00      	cmp	r2, #0
 8006500:	dded      	ble.n	80064de <_dtoa_r+0xa16>
 8006502:	4649      	mov	r1, r9
 8006504:	2201      	movs	r2, #1
 8006506:	4658      	mov	r0, fp
 8006508:	f000 fbb0 	bl	8006c6c <__lshift>
 800650c:	4621      	mov	r1, r4
 800650e:	4681      	mov	r9, r0
 8006510:	f000 fc18 	bl	8006d44 <__mcmp>
 8006514:	2800      	cmp	r0, #0
 8006516:	dc03      	bgt.n	8006520 <_dtoa_r+0xa58>
 8006518:	d1e1      	bne.n	80064de <_dtoa_r+0xa16>
 800651a:	f018 0f01 	tst.w	r8, #1
 800651e:	d0de      	beq.n	80064de <_dtoa_r+0xa16>
 8006520:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006524:	d1d8      	bne.n	80064d8 <_dtoa_r+0xa10>
 8006526:	2339      	movs	r3, #57	@ 0x39
 8006528:	9a02      	ldr	r2, [sp, #8]
 800652a:	7013      	strb	r3, [r2, #0]
 800652c:	4633      	mov	r3, r6
 800652e:	461e      	mov	r6, r3
 8006530:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006534:	3b01      	subs	r3, #1
 8006536:	2a39      	cmp	r2, #57	@ 0x39
 8006538:	d052      	beq.n	80065e0 <_dtoa_r+0xb18>
 800653a:	3201      	adds	r2, #1
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	e60e      	b.n	800615e <_dtoa_r+0x696>
 8006540:	2a00      	cmp	r2, #0
 8006542:	dd07      	ble.n	8006554 <_dtoa_r+0xa8c>
 8006544:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006548:	d0ed      	beq.n	8006526 <_dtoa_r+0xa5e>
 800654a:	9a02      	ldr	r2, [sp, #8]
 800654c:	f108 0301 	add.w	r3, r8, #1
 8006550:	7013      	strb	r3, [r2, #0]
 8006552:	e604      	b.n	800615e <_dtoa_r+0x696>
 8006554:	9b07      	ldr	r3, [sp, #28]
 8006556:	9a07      	ldr	r2, [sp, #28]
 8006558:	f803 8c01 	strb.w	r8, [r3, #-1]
 800655c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800655e:	4293      	cmp	r3, r2
 8006560:	d028      	beq.n	80065b4 <_dtoa_r+0xaec>
 8006562:	4649      	mov	r1, r9
 8006564:	2300      	movs	r3, #0
 8006566:	220a      	movs	r2, #10
 8006568:	4658      	mov	r0, fp
 800656a:	f000 f9d5 	bl	8006918 <__multadd>
 800656e:	42af      	cmp	r7, r5
 8006570:	4681      	mov	r9, r0
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	f04f 020a 	mov.w	r2, #10
 800657a:	4639      	mov	r1, r7
 800657c:	4658      	mov	r0, fp
 800657e:	d107      	bne.n	8006590 <_dtoa_r+0xac8>
 8006580:	f000 f9ca 	bl	8006918 <__multadd>
 8006584:	4607      	mov	r7, r0
 8006586:	4605      	mov	r5, r0
 8006588:	9b07      	ldr	r3, [sp, #28]
 800658a:	3301      	adds	r3, #1
 800658c:	9307      	str	r3, [sp, #28]
 800658e:	e774      	b.n	800647a <_dtoa_r+0x9b2>
 8006590:	f000 f9c2 	bl	8006918 <__multadd>
 8006594:	4629      	mov	r1, r5
 8006596:	4607      	mov	r7, r0
 8006598:	2300      	movs	r3, #0
 800659a:	220a      	movs	r2, #10
 800659c:	4658      	mov	r0, fp
 800659e:	f000 f9bb 	bl	8006918 <__multadd>
 80065a2:	4605      	mov	r5, r0
 80065a4:	e7f0      	b.n	8006588 <_dtoa_r+0xac0>
 80065a6:	9b08      	ldr	r3, [sp, #32]
 80065a8:	2700      	movs	r7, #0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bfcc      	ite	gt
 80065ae:	461e      	movgt	r6, r3
 80065b0:	2601      	movle	r6, #1
 80065b2:	4456      	add	r6, sl
 80065b4:	4649      	mov	r1, r9
 80065b6:	2201      	movs	r2, #1
 80065b8:	4658      	mov	r0, fp
 80065ba:	f000 fb57 	bl	8006c6c <__lshift>
 80065be:	4621      	mov	r1, r4
 80065c0:	4681      	mov	r9, r0
 80065c2:	f000 fbbf 	bl	8006d44 <__mcmp>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	dcb0      	bgt.n	800652c <_dtoa_r+0xa64>
 80065ca:	d102      	bne.n	80065d2 <_dtoa_r+0xb0a>
 80065cc:	f018 0f01 	tst.w	r8, #1
 80065d0:	d1ac      	bne.n	800652c <_dtoa_r+0xa64>
 80065d2:	4633      	mov	r3, r6
 80065d4:	461e      	mov	r6, r3
 80065d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065da:	2a30      	cmp	r2, #48	@ 0x30
 80065dc:	d0fa      	beq.n	80065d4 <_dtoa_r+0xb0c>
 80065de:	e5be      	b.n	800615e <_dtoa_r+0x696>
 80065e0:	459a      	cmp	sl, r3
 80065e2:	d1a4      	bne.n	800652e <_dtoa_r+0xa66>
 80065e4:	9b04      	ldr	r3, [sp, #16]
 80065e6:	3301      	adds	r3, #1
 80065e8:	9304      	str	r3, [sp, #16]
 80065ea:	2331      	movs	r3, #49	@ 0x31
 80065ec:	f88a 3000 	strb.w	r3, [sl]
 80065f0:	e5b5      	b.n	800615e <_dtoa_r+0x696>
 80065f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80065f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006654 <_dtoa_r+0xb8c>
 80065f8:	b11b      	cbz	r3, 8006602 <_dtoa_r+0xb3a>
 80065fa:	f10a 0308 	add.w	r3, sl, #8
 80065fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	4650      	mov	r0, sl
 8006604:	b017      	add	sp, #92	@ 0x5c
 8006606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800660c:	2b01      	cmp	r3, #1
 800660e:	f77f ae3d 	ble.w	800628c <_dtoa_r+0x7c4>
 8006612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006614:	930a      	str	r3, [sp, #40]	@ 0x28
 8006616:	2001      	movs	r0, #1
 8006618:	e65b      	b.n	80062d2 <_dtoa_r+0x80a>
 800661a:	9b08      	ldr	r3, [sp, #32]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f77f aed6 	ble.w	80063ce <_dtoa_r+0x906>
 8006622:	4656      	mov	r6, sl
 8006624:	4621      	mov	r1, r4
 8006626:	4648      	mov	r0, r9
 8006628:	f7ff f9c3 	bl	80059b2 <quorem>
 800662c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006630:	9b08      	ldr	r3, [sp, #32]
 8006632:	f806 8b01 	strb.w	r8, [r6], #1
 8006636:	eba6 020a 	sub.w	r2, r6, sl
 800663a:	4293      	cmp	r3, r2
 800663c:	ddb3      	ble.n	80065a6 <_dtoa_r+0xade>
 800663e:	4649      	mov	r1, r9
 8006640:	2300      	movs	r3, #0
 8006642:	220a      	movs	r2, #10
 8006644:	4658      	mov	r0, fp
 8006646:	f000 f967 	bl	8006918 <__multadd>
 800664a:	4681      	mov	r9, r0
 800664c:	e7ea      	b.n	8006624 <_dtoa_r+0xb5c>
 800664e:	bf00      	nop
 8006650:	080077e2 	.word	0x080077e2
 8006654:	08007766 	.word	0x08007766

08006658 <_free_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4605      	mov	r5, r0
 800665c:	2900      	cmp	r1, #0
 800665e:	d040      	beq.n	80066e2 <_free_r+0x8a>
 8006660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006664:	1f0c      	subs	r4, r1, #4
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfb8      	it	lt
 800666a:	18e4      	addlt	r4, r4, r3
 800666c:	f000 f8e6 	bl	800683c <__malloc_lock>
 8006670:	4a1c      	ldr	r2, [pc, #112]	@ (80066e4 <_free_r+0x8c>)
 8006672:	6813      	ldr	r3, [r2, #0]
 8006674:	b933      	cbnz	r3, 8006684 <_free_r+0x2c>
 8006676:	6063      	str	r3, [r4, #4]
 8006678:	6014      	str	r4, [r2, #0]
 800667a:	4628      	mov	r0, r5
 800667c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006680:	f000 b8e2 	b.w	8006848 <__malloc_unlock>
 8006684:	42a3      	cmp	r3, r4
 8006686:	d908      	bls.n	800669a <_free_r+0x42>
 8006688:	6820      	ldr	r0, [r4, #0]
 800668a:	1821      	adds	r1, r4, r0
 800668c:	428b      	cmp	r3, r1
 800668e:	bf01      	itttt	eq
 8006690:	6819      	ldreq	r1, [r3, #0]
 8006692:	685b      	ldreq	r3, [r3, #4]
 8006694:	1809      	addeq	r1, r1, r0
 8006696:	6021      	streq	r1, [r4, #0]
 8006698:	e7ed      	b.n	8006676 <_free_r+0x1e>
 800669a:	461a      	mov	r2, r3
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	b10b      	cbz	r3, 80066a4 <_free_r+0x4c>
 80066a0:	42a3      	cmp	r3, r4
 80066a2:	d9fa      	bls.n	800669a <_free_r+0x42>
 80066a4:	6811      	ldr	r1, [r2, #0]
 80066a6:	1850      	adds	r0, r2, r1
 80066a8:	42a0      	cmp	r0, r4
 80066aa:	d10b      	bne.n	80066c4 <_free_r+0x6c>
 80066ac:	6820      	ldr	r0, [r4, #0]
 80066ae:	4401      	add	r1, r0
 80066b0:	1850      	adds	r0, r2, r1
 80066b2:	4283      	cmp	r3, r0
 80066b4:	6011      	str	r1, [r2, #0]
 80066b6:	d1e0      	bne.n	800667a <_free_r+0x22>
 80066b8:	6818      	ldr	r0, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	4408      	add	r0, r1
 80066be:	6010      	str	r0, [r2, #0]
 80066c0:	6053      	str	r3, [r2, #4]
 80066c2:	e7da      	b.n	800667a <_free_r+0x22>
 80066c4:	d902      	bls.n	80066cc <_free_r+0x74>
 80066c6:	230c      	movs	r3, #12
 80066c8:	602b      	str	r3, [r5, #0]
 80066ca:	e7d6      	b.n	800667a <_free_r+0x22>
 80066cc:	6820      	ldr	r0, [r4, #0]
 80066ce:	1821      	adds	r1, r4, r0
 80066d0:	428b      	cmp	r3, r1
 80066d2:	bf01      	itttt	eq
 80066d4:	6819      	ldreq	r1, [r3, #0]
 80066d6:	685b      	ldreq	r3, [r3, #4]
 80066d8:	1809      	addeq	r1, r1, r0
 80066da:	6021      	streq	r1, [r4, #0]
 80066dc:	6063      	str	r3, [r4, #4]
 80066de:	6054      	str	r4, [r2, #4]
 80066e0:	e7cb      	b.n	800667a <_free_r+0x22>
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	200004e8 	.word	0x200004e8

080066e8 <malloc>:
 80066e8:	4b02      	ldr	r3, [pc, #8]	@ (80066f4 <malloc+0xc>)
 80066ea:	4601      	mov	r1, r0
 80066ec:	6818      	ldr	r0, [r3, #0]
 80066ee:	f000 b825 	b.w	800673c <_malloc_r>
 80066f2:	bf00      	nop
 80066f4:	20000018 	.word	0x20000018

080066f8 <sbrk_aligned>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006738 <sbrk_aligned+0x40>)
 80066fc:	460c      	mov	r4, r1
 80066fe:	6831      	ldr	r1, [r6, #0]
 8006700:	4605      	mov	r5, r0
 8006702:	b911      	cbnz	r1, 800670a <sbrk_aligned+0x12>
 8006704:	f000 fcce 	bl	80070a4 <_sbrk_r>
 8006708:	6030      	str	r0, [r6, #0]
 800670a:	4621      	mov	r1, r4
 800670c:	4628      	mov	r0, r5
 800670e:	f000 fcc9 	bl	80070a4 <_sbrk_r>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	d103      	bne.n	800671e <sbrk_aligned+0x26>
 8006716:	f04f 34ff 	mov.w	r4, #4294967295
 800671a:	4620      	mov	r0, r4
 800671c:	bd70      	pop	{r4, r5, r6, pc}
 800671e:	1cc4      	adds	r4, r0, #3
 8006720:	f024 0403 	bic.w	r4, r4, #3
 8006724:	42a0      	cmp	r0, r4
 8006726:	d0f8      	beq.n	800671a <sbrk_aligned+0x22>
 8006728:	1a21      	subs	r1, r4, r0
 800672a:	4628      	mov	r0, r5
 800672c:	f000 fcba 	bl	80070a4 <_sbrk_r>
 8006730:	3001      	adds	r0, #1
 8006732:	d1f2      	bne.n	800671a <sbrk_aligned+0x22>
 8006734:	e7ef      	b.n	8006716 <sbrk_aligned+0x1e>
 8006736:	bf00      	nop
 8006738:	200004e4 	.word	0x200004e4

0800673c <_malloc_r>:
 800673c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006740:	1ccd      	adds	r5, r1, #3
 8006742:	f025 0503 	bic.w	r5, r5, #3
 8006746:	3508      	adds	r5, #8
 8006748:	2d0c      	cmp	r5, #12
 800674a:	bf38      	it	cc
 800674c:	250c      	movcc	r5, #12
 800674e:	2d00      	cmp	r5, #0
 8006750:	4606      	mov	r6, r0
 8006752:	db01      	blt.n	8006758 <_malloc_r+0x1c>
 8006754:	42a9      	cmp	r1, r5
 8006756:	d904      	bls.n	8006762 <_malloc_r+0x26>
 8006758:	230c      	movs	r3, #12
 800675a:	6033      	str	r3, [r6, #0]
 800675c:	2000      	movs	r0, #0
 800675e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006762:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006838 <_malloc_r+0xfc>
 8006766:	f000 f869 	bl	800683c <__malloc_lock>
 800676a:	f8d8 3000 	ldr.w	r3, [r8]
 800676e:	461c      	mov	r4, r3
 8006770:	bb44      	cbnz	r4, 80067c4 <_malloc_r+0x88>
 8006772:	4629      	mov	r1, r5
 8006774:	4630      	mov	r0, r6
 8006776:	f7ff ffbf 	bl	80066f8 <sbrk_aligned>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	4604      	mov	r4, r0
 800677e:	d158      	bne.n	8006832 <_malloc_r+0xf6>
 8006780:	f8d8 4000 	ldr.w	r4, [r8]
 8006784:	4627      	mov	r7, r4
 8006786:	2f00      	cmp	r7, #0
 8006788:	d143      	bne.n	8006812 <_malloc_r+0xd6>
 800678a:	2c00      	cmp	r4, #0
 800678c:	d04b      	beq.n	8006826 <_malloc_r+0xea>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	4639      	mov	r1, r7
 8006792:	4630      	mov	r0, r6
 8006794:	eb04 0903 	add.w	r9, r4, r3
 8006798:	f000 fc84 	bl	80070a4 <_sbrk_r>
 800679c:	4581      	cmp	r9, r0
 800679e:	d142      	bne.n	8006826 <_malloc_r+0xea>
 80067a0:	6821      	ldr	r1, [r4, #0]
 80067a2:	4630      	mov	r0, r6
 80067a4:	1a6d      	subs	r5, r5, r1
 80067a6:	4629      	mov	r1, r5
 80067a8:	f7ff ffa6 	bl	80066f8 <sbrk_aligned>
 80067ac:	3001      	adds	r0, #1
 80067ae:	d03a      	beq.n	8006826 <_malloc_r+0xea>
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	442b      	add	r3, r5
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	f8d8 3000 	ldr.w	r3, [r8]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	bb62      	cbnz	r2, 8006818 <_malloc_r+0xdc>
 80067be:	f8c8 7000 	str.w	r7, [r8]
 80067c2:	e00f      	b.n	80067e4 <_malloc_r+0xa8>
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	1b52      	subs	r2, r2, r5
 80067c8:	d420      	bmi.n	800680c <_malloc_r+0xd0>
 80067ca:	2a0b      	cmp	r2, #11
 80067cc:	d917      	bls.n	80067fe <_malloc_r+0xc2>
 80067ce:	1961      	adds	r1, r4, r5
 80067d0:	42a3      	cmp	r3, r4
 80067d2:	6025      	str	r5, [r4, #0]
 80067d4:	bf18      	it	ne
 80067d6:	6059      	strne	r1, [r3, #4]
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	bf08      	it	eq
 80067dc:	f8c8 1000 	streq.w	r1, [r8]
 80067e0:	5162      	str	r2, [r4, r5]
 80067e2:	604b      	str	r3, [r1, #4]
 80067e4:	4630      	mov	r0, r6
 80067e6:	f000 f82f 	bl	8006848 <__malloc_unlock>
 80067ea:	f104 000b 	add.w	r0, r4, #11
 80067ee:	1d23      	adds	r3, r4, #4
 80067f0:	f020 0007 	bic.w	r0, r0, #7
 80067f4:	1ac2      	subs	r2, r0, r3
 80067f6:	bf1c      	itt	ne
 80067f8:	1a1b      	subne	r3, r3, r0
 80067fa:	50a3      	strne	r3, [r4, r2]
 80067fc:	e7af      	b.n	800675e <_malloc_r+0x22>
 80067fe:	6862      	ldr	r2, [r4, #4]
 8006800:	42a3      	cmp	r3, r4
 8006802:	bf0c      	ite	eq
 8006804:	f8c8 2000 	streq.w	r2, [r8]
 8006808:	605a      	strne	r2, [r3, #4]
 800680a:	e7eb      	b.n	80067e4 <_malloc_r+0xa8>
 800680c:	4623      	mov	r3, r4
 800680e:	6864      	ldr	r4, [r4, #4]
 8006810:	e7ae      	b.n	8006770 <_malloc_r+0x34>
 8006812:	463c      	mov	r4, r7
 8006814:	687f      	ldr	r7, [r7, #4]
 8006816:	e7b6      	b.n	8006786 <_malloc_r+0x4a>
 8006818:	461a      	mov	r2, r3
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	42a3      	cmp	r3, r4
 800681e:	d1fb      	bne.n	8006818 <_malloc_r+0xdc>
 8006820:	2300      	movs	r3, #0
 8006822:	6053      	str	r3, [r2, #4]
 8006824:	e7de      	b.n	80067e4 <_malloc_r+0xa8>
 8006826:	230c      	movs	r3, #12
 8006828:	4630      	mov	r0, r6
 800682a:	6033      	str	r3, [r6, #0]
 800682c:	f000 f80c 	bl	8006848 <__malloc_unlock>
 8006830:	e794      	b.n	800675c <_malloc_r+0x20>
 8006832:	6005      	str	r5, [r0, #0]
 8006834:	e7d6      	b.n	80067e4 <_malloc_r+0xa8>
 8006836:	bf00      	nop
 8006838:	200004e8 	.word	0x200004e8

0800683c <__malloc_lock>:
 800683c:	4801      	ldr	r0, [pc, #4]	@ (8006844 <__malloc_lock+0x8>)
 800683e:	f7ff b8a8 	b.w	8005992 <__retarget_lock_acquire_recursive>
 8006842:	bf00      	nop
 8006844:	200004e0 	.word	0x200004e0

08006848 <__malloc_unlock>:
 8006848:	4801      	ldr	r0, [pc, #4]	@ (8006850 <__malloc_unlock+0x8>)
 800684a:	f7ff b8a3 	b.w	8005994 <__retarget_lock_release_recursive>
 800684e:	bf00      	nop
 8006850:	200004e0 	.word	0x200004e0

08006854 <_Balloc>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	69c6      	ldr	r6, [r0, #28]
 8006858:	4604      	mov	r4, r0
 800685a:	460d      	mov	r5, r1
 800685c:	b976      	cbnz	r6, 800687c <_Balloc+0x28>
 800685e:	2010      	movs	r0, #16
 8006860:	f7ff ff42 	bl	80066e8 <malloc>
 8006864:	4602      	mov	r2, r0
 8006866:	61e0      	str	r0, [r4, #28]
 8006868:	b920      	cbnz	r0, 8006874 <_Balloc+0x20>
 800686a:	216b      	movs	r1, #107	@ 0x6b
 800686c:	4b17      	ldr	r3, [pc, #92]	@ (80068cc <_Balloc+0x78>)
 800686e:	4818      	ldr	r0, [pc, #96]	@ (80068d0 <_Balloc+0x7c>)
 8006870:	f000 fc36 	bl	80070e0 <__assert_func>
 8006874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006878:	6006      	str	r6, [r0, #0]
 800687a:	60c6      	str	r6, [r0, #12]
 800687c:	69e6      	ldr	r6, [r4, #28]
 800687e:	68f3      	ldr	r3, [r6, #12]
 8006880:	b183      	cbz	r3, 80068a4 <_Balloc+0x50>
 8006882:	69e3      	ldr	r3, [r4, #28]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800688a:	b9b8      	cbnz	r0, 80068bc <_Balloc+0x68>
 800688c:	2101      	movs	r1, #1
 800688e:	fa01 f605 	lsl.w	r6, r1, r5
 8006892:	1d72      	adds	r2, r6, #5
 8006894:	4620      	mov	r0, r4
 8006896:	0092      	lsls	r2, r2, #2
 8006898:	f000 fc40 	bl	800711c <_calloc_r>
 800689c:	b160      	cbz	r0, 80068b8 <_Balloc+0x64>
 800689e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068a2:	e00e      	b.n	80068c2 <_Balloc+0x6e>
 80068a4:	2221      	movs	r2, #33	@ 0x21
 80068a6:	2104      	movs	r1, #4
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fc37 	bl	800711c <_calloc_r>
 80068ae:	69e3      	ldr	r3, [r4, #28]
 80068b0:	60f0      	str	r0, [r6, #12]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d1e4      	bne.n	8006882 <_Balloc+0x2e>
 80068b8:	2000      	movs	r0, #0
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	6802      	ldr	r2, [r0, #0]
 80068be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80068c2:	2300      	movs	r3, #0
 80068c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80068c8:	e7f7      	b.n	80068ba <_Balloc+0x66>
 80068ca:	bf00      	nop
 80068cc:	08007773 	.word	0x08007773
 80068d0:	080077f3 	.word	0x080077f3

080068d4 <_Bfree>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	69c6      	ldr	r6, [r0, #28]
 80068d8:	4605      	mov	r5, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	b976      	cbnz	r6, 80068fc <_Bfree+0x28>
 80068de:	2010      	movs	r0, #16
 80068e0:	f7ff ff02 	bl	80066e8 <malloc>
 80068e4:	4602      	mov	r2, r0
 80068e6:	61e8      	str	r0, [r5, #28]
 80068e8:	b920      	cbnz	r0, 80068f4 <_Bfree+0x20>
 80068ea:	218f      	movs	r1, #143	@ 0x8f
 80068ec:	4b08      	ldr	r3, [pc, #32]	@ (8006910 <_Bfree+0x3c>)
 80068ee:	4809      	ldr	r0, [pc, #36]	@ (8006914 <_Bfree+0x40>)
 80068f0:	f000 fbf6 	bl	80070e0 <__assert_func>
 80068f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068f8:	6006      	str	r6, [r0, #0]
 80068fa:	60c6      	str	r6, [r0, #12]
 80068fc:	b13c      	cbz	r4, 800690e <_Bfree+0x3a>
 80068fe:	69eb      	ldr	r3, [r5, #28]
 8006900:	6862      	ldr	r2, [r4, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006908:	6021      	str	r1, [r4, #0]
 800690a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800690e:	bd70      	pop	{r4, r5, r6, pc}
 8006910:	08007773 	.word	0x08007773
 8006914:	080077f3 	.word	0x080077f3

08006918 <__multadd>:
 8006918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800691c:	4607      	mov	r7, r0
 800691e:	460c      	mov	r4, r1
 8006920:	461e      	mov	r6, r3
 8006922:	2000      	movs	r0, #0
 8006924:	690d      	ldr	r5, [r1, #16]
 8006926:	f101 0c14 	add.w	ip, r1, #20
 800692a:	f8dc 3000 	ldr.w	r3, [ip]
 800692e:	3001      	adds	r0, #1
 8006930:	b299      	uxth	r1, r3
 8006932:	fb02 6101 	mla	r1, r2, r1, r6
 8006936:	0c1e      	lsrs	r6, r3, #16
 8006938:	0c0b      	lsrs	r3, r1, #16
 800693a:	fb02 3306 	mla	r3, r2, r6, r3
 800693e:	b289      	uxth	r1, r1
 8006940:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006944:	4285      	cmp	r5, r0
 8006946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800694a:	f84c 1b04 	str.w	r1, [ip], #4
 800694e:	dcec      	bgt.n	800692a <__multadd+0x12>
 8006950:	b30e      	cbz	r6, 8006996 <__multadd+0x7e>
 8006952:	68a3      	ldr	r3, [r4, #8]
 8006954:	42ab      	cmp	r3, r5
 8006956:	dc19      	bgt.n	800698c <__multadd+0x74>
 8006958:	6861      	ldr	r1, [r4, #4]
 800695a:	4638      	mov	r0, r7
 800695c:	3101      	adds	r1, #1
 800695e:	f7ff ff79 	bl	8006854 <_Balloc>
 8006962:	4680      	mov	r8, r0
 8006964:	b928      	cbnz	r0, 8006972 <__multadd+0x5a>
 8006966:	4602      	mov	r2, r0
 8006968:	21ba      	movs	r1, #186	@ 0xba
 800696a:	4b0c      	ldr	r3, [pc, #48]	@ (800699c <__multadd+0x84>)
 800696c:	480c      	ldr	r0, [pc, #48]	@ (80069a0 <__multadd+0x88>)
 800696e:	f000 fbb7 	bl	80070e0 <__assert_func>
 8006972:	6922      	ldr	r2, [r4, #16]
 8006974:	f104 010c 	add.w	r1, r4, #12
 8006978:	3202      	adds	r2, #2
 800697a:	0092      	lsls	r2, r2, #2
 800697c:	300c      	adds	r0, #12
 800697e:	f000 fba1 	bl	80070c4 <memcpy>
 8006982:	4621      	mov	r1, r4
 8006984:	4638      	mov	r0, r7
 8006986:	f7ff ffa5 	bl	80068d4 <_Bfree>
 800698a:	4644      	mov	r4, r8
 800698c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006990:	3501      	adds	r5, #1
 8006992:	615e      	str	r6, [r3, #20]
 8006994:	6125      	str	r5, [r4, #16]
 8006996:	4620      	mov	r0, r4
 8006998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800699c:	080077e2 	.word	0x080077e2
 80069a0:	080077f3 	.word	0x080077f3

080069a4 <__hi0bits>:
 80069a4:	4603      	mov	r3, r0
 80069a6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80069aa:	bf3a      	itte	cc
 80069ac:	0403      	lslcc	r3, r0, #16
 80069ae:	2010      	movcc	r0, #16
 80069b0:	2000      	movcs	r0, #0
 80069b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069b6:	bf3c      	itt	cc
 80069b8:	021b      	lslcc	r3, r3, #8
 80069ba:	3008      	addcc	r0, #8
 80069bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069c0:	bf3c      	itt	cc
 80069c2:	011b      	lslcc	r3, r3, #4
 80069c4:	3004      	addcc	r0, #4
 80069c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ca:	bf3c      	itt	cc
 80069cc:	009b      	lslcc	r3, r3, #2
 80069ce:	3002      	addcc	r0, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	db05      	blt.n	80069e0 <__hi0bits+0x3c>
 80069d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80069d8:	f100 0001 	add.w	r0, r0, #1
 80069dc:	bf08      	it	eq
 80069de:	2020      	moveq	r0, #32
 80069e0:	4770      	bx	lr

080069e2 <__lo0bits>:
 80069e2:	6803      	ldr	r3, [r0, #0]
 80069e4:	4602      	mov	r2, r0
 80069e6:	f013 0007 	ands.w	r0, r3, #7
 80069ea:	d00b      	beq.n	8006a04 <__lo0bits+0x22>
 80069ec:	07d9      	lsls	r1, r3, #31
 80069ee:	d421      	bmi.n	8006a34 <__lo0bits+0x52>
 80069f0:	0798      	lsls	r0, r3, #30
 80069f2:	bf49      	itett	mi
 80069f4:	085b      	lsrmi	r3, r3, #1
 80069f6:	089b      	lsrpl	r3, r3, #2
 80069f8:	2001      	movmi	r0, #1
 80069fa:	6013      	strmi	r3, [r2, #0]
 80069fc:	bf5c      	itt	pl
 80069fe:	2002      	movpl	r0, #2
 8006a00:	6013      	strpl	r3, [r2, #0]
 8006a02:	4770      	bx	lr
 8006a04:	b299      	uxth	r1, r3
 8006a06:	b909      	cbnz	r1, 8006a0c <__lo0bits+0x2a>
 8006a08:	2010      	movs	r0, #16
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	b2d9      	uxtb	r1, r3
 8006a0e:	b909      	cbnz	r1, 8006a14 <__lo0bits+0x32>
 8006a10:	3008      	adds	r0, #8
 8006a12:	0a1b      	lsrs	r3, r3, #8
 8006a14:	0719      	lsls	r1, r3, #28
 8006a16:	bf04      	itt	eq
 8006a18:	091b      	lsreq	r3, r3, #4
 8006a1a:	3004      	addeq	r0, #4
 8006a1c:	0799      	lsls	r1, r3, #30
 8006a1e:	bf04      	itt	eq
 8006a20:	089b      	lsreq	r3, r3, #2
 8006a22:	3002      	addeq	r0, #2
 8006a24:	07d9      	lsls	r1, r3, #31
 8006a26:	d403      	bmi.n	8006a30 <__lo0bits+0x4e>
 8006a28:	085b      	lsrs	r3, r3, #1
 8006a2a:	f100 0001 	add.w	r0, r0, #1
 8006a2e:	d003      	beq.n	8006a38 <__lo0bits+0x56>
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	4770      	bx	lr
 8006a34:	2000      	movs	r0, #0
 8006a36:	4770      	bx	lr
 8006a38:	2020      	movs	r0, #32
 8006a3a:	4770      	bx	lr

08006a3c <__i2b>:
 8006a3c:	b510      	push	{r4, lr}
 8006a3e:	460c      	mov	r4, r1
 8006a40:	2101      	movs	r1, #1
 8006a42:	f7ff ff07 	bl	8006854 <_Balloc>
 8006a46:	4602      	mov	r2, r0
 8006a48:	b928      	cbnz	r0, 8006a56 <__i2b+0x1a>
 8006a4a:	f240 1145 	movw	r1, #325	@ 0x145
 8006a4e:	4b04      	ldr	r3, [pc, #16]	@ (8006a60 <__i2b+0x24>)
 8006a50:	4804      	ldr	r0, [pc, #16]	@ (8006a64 <__i2b+0x28>)
 8006a52:	f000 fb45 	bl	80070e0 <__assert_func>
 8006a56:	2301      	movs	r3, #1
 8006a58:	6144      	str	r4, [r0, #20]
 8006a5a:	6103      	str	r3, [r0, #16]
 8006a5c:	bd10      	pop	{r4, pc}
 8006a5e:	bf00      	nop
 8006a60:	080077e2 	.word	0x080077e2
 8006a64:	080077f3 	.word	0x080077f3

08006a68 <__multiply>:
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	690a      	ldr	r2, [r1, #16]
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	460f      	mov	r7, r1
 8006a74:	429a      	cmp	r2, r3
 8006a76:	bfa2      	ittt	ge
 8006a78:	4623      	movge	r3, r4
 8006a7a:	460c      	movge	r4, r1
 8006a7c:	461f      	movge	r7, r3
 8006a7e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006a82:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a86:	68a3      	ldr	r3, [r4, #8]
 8006a88:	6861      	ldr	r1, [r4, #4]
 8006a8a:	eb0a 0609 	add.w	r6, sl, r9
 8006a8e:	42b3      	cmp	r3, r6
 8006a90:	b085      	sub	sp, #20
 8006a92:	bfb8      	it	lt
 8006a94:	3101      	addlt	r1, #1
 8006a96:	f7ff fedd 	bl	8006854 <_Balloc>
 8006a9a:	b930      	cbnz	r0, 8006aaa <__multiply+0x42>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006aa2:	4b43      	ldr	r3, [pc, #268]	@ (8006bb0 <__multiply+0x148>)
 8006aa4:	4843      	ldr	r0, [pc, #268]	@ (8006bb4 <__multiply+0x14c>)
 8006aa6:	f000 fb1b 	bl	80070e0 <__assert_func>
 8006aaa:	f100 0514 	add.w	r5, r0, #20
 8006aae:	462b      	mov	r3, r5
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ab6:	4543      	cmp	r3, r8
 8006ab8:	d321      	bcc.n	8006afe <__multiply+0x96>
 8006aba:	f107 0114 	add.w	r1, r7, #20
 8006abe:	f104 0214 	add.w	r2, r4, #20
 8006ac2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006ac6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006aca:	9302      	str	r3, [sp, #8]
 8006acc:	1b13      	subs	r3, r2, r4
 8006ace:	3b15      	subs	r3, #21
 8006ad0:	f023 0303 	bic.w	r3, r3, #3
 8006ad4:	3304      	adds	r3, #4
 8006ad6:	f104 0715 	add.w	r7, r4, #21
 8006ada:	42ba      	cmp	r2, r7
 8006adc:	bf38      	it	cc
 8006ade:	2304      	movcc	r3, #4
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	9b02      	ldr	r3, [sp, #8]
 8006ae4:	9103      	str	r1, [sp, #12]
 8006ae6:	428b      	cmp	r3, r1
 8006ae8:	d80c      	bhi.n	8006b04 <__multiply+0x9c>
 8006aea:	2e00      	cmp	r6, #0
 8006aec:	dd03      	ble.n	8006af6 <__multiply+0x8e>
 8006aee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d05a      	beq.n	8006bac <__multiply+0x144>
 8006af6:	6106      	str	r6, [r0, #16]
 8006af8:	b005      	add	sp, #20
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	f843 2b04 	str.w	r2, [r3], #4
 8006b02:	e7d8      	b.n	8006ab6 <__multiply+0x4e>
 8006b04:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b08:	f1ba 0f00 	cmp.w	sl, #0
 8006b0c:	d023      	beq.n	8006b56 <__multiply+0xee>
 8006b0e:	46a9      	mov	r9, r5
 8006b10:	f04f 0c00 	mov.w	ip, #0
 8006b14:	f104 0e14 	add.w	lr, r4, #20
 8006b18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b1c:	f8d9 3000 	ldr.w	r3, [r9]
 8006b20:	fa1f fb87 	uxth.w	fp, r7
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b2a:	4463      	add	r3, ip
 8006b2c:	f8d9 c000 	ldr.w	ip, [r9]
 8006b30:	0c3f      	lsrs	r7, r7, #16
 8006b32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b36:	fb0a c707 	mla	r7, sl, r7, ip
 8006b3a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b44:	4572      	cmp	r2, lr
 8006b46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b4a:	f849 3b04 	str.w	r3, [r9], #4
 8006b4e:	d8e3      	bhi.n	8006b18 <__multiply+0xb0>
 8006b50:	9b01      	ldr	r3, [sp, #4]
 8006b52:	f845 c003 	str.w	ip, [r5, r3]
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	3104      	adds	r1, #4
 8006b5a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b5e:	f1b9 0f00 	cmp.w	r9, #0
 8006b62:	d021      	beq.n	8006ba8 <__multiply+0x140>
 8006b64:	46ae      	mov	lr, r5
 8006b66:	f04f 0a00 	mov.w	sl, #0
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	f104 0c14 	add.w	ip, r4, #20
 8006b70:	f8bc b000 	ldrh.w	fp, [ip]
 8006b74:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	fb09 770b 	mla	r7, r9, fp, r7
 8006b7e:	4457      	add	r7, sl
 8006b80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b84:	f84e 3b04 	str.w	r3, [lr], #4
 8006b88:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b90:	f8be 3000 	ldrh.w	r3, [lr]
 8006b94:	4562      	cmp	r2, ip
 8006b96:	fb09 330a 	mla	r3, r9, sl, r3
 8006b9a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006b9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ba2:	d8e5      	bhi.n	8006b70 <__multiply+0x108>
 8006ba4:	9f01      	ldr	r7, [sp, #4]
 8006ba6:	51eb      	str	r3, [r5, r7]
 8006ba8:	3504      	adds	r5, #4
 8006baa:	e79a      	b.n	8006ae2 <__multiply+0x7a>
 8006bac:	3e01      	subs	r6, #1
 8006bae:	e79c      	b.n	8006aea <__multiply+0x82>
 8006bb0:	080077e2 	.word	0x080077e2
 8006bb4:	080077f3 	.word	0x080077f3

08006bb8 <__pow5mult>:
 8006bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bbc:	4615      	mov	r5, r2
 8006bbe:	f012 0203 	ands.w	r2, r2, #3
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	460e      	mov	r6, r1
 8006bc6:	d007      	beq.n	8006bd8 <__pow5mult+0x20>
 8006bc8:	4c25      	ldr	r4, [pc, #148]	@ (8006c60 <__pow5mult+0xa8>)
 8006bca:	3a01      	subs	r2, #1
 8006bcc:	2300      	movs	r3, #0
 8006bce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bd2:	f7ff fea1 	bl	8006918 <__multadd>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	10ad      	asrs	r5, r5, #2
 8006bda:	d03d      	beq.n	8006c58 <__pow5mult+0xa0>
 8006bdc:	69fc      	ldr	r4, [r7, #28]
 8006bde:	b97c      	cbnz	r4, 8006c00 <__pow5mult+0x48>
 8006be0:	2010      	movs	r0, #16
 8006be2:	f7ff fd81 	bl	80066e8 <malloc>
 8006be6:	4602      	mov	r2, r0
 8006be8:	61f8      	str	r0, [r7, #28]
 8006bea:	b928      	cbnz	r0, 8006bf8 <__pow5mult+0x40>
 8006bec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c64 <__pow5mult+0xac>)
 8006bf2:	481d      	ldr	r0, [pc, #116]	@ (8006c68 <__pow5mult+0xb0>)
 8006bf4:	f000 fa74 	bl	80070e0 <__assert_func>
 8006bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bfc:	6004      	str	r4, [r0, #0]
 8006bfe:	60c4      	str	r4, [r0, #12]
 8006c00:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c08:	b94c      	cbnz	r4, 8006c1e <__pow5mult+0x66>
 8006c0a:	f240 2171 	movw	r1, #625	@ 0x271
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f7ff ff14 	bl	8006a3c <__i2b>
 8006c14:	2300      	movs	r3, #0
 8006c16:	4604      	mov	r4, r0
 8006c18:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c1c:	6003      	str	r3, [r0, #0]
 8006c1e:	f04f 0900 	mov.w	r9, #0
 8006c22:	07eb      	lsls	r3, r5, #31
 8006c24:	d50a      	bpl.n	8006c3c <__pow5mult+0x84>
 8006c26:	4631      	mov	r1, r6
 8006c28:	4622      	mov	r2, r4
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	f7ff ff1c 	bl	8006a68 <__multiply>
 8006c30:	4680      	mov	r8, r0
 8006c32:	4631      	mov	r1, r6
 8006c34:	4638      	mov	r0, r7
 8006c36:	f7ff fe4d 	bl	80068d4 <_Bfree>
 8006c3a:	4646      	mov	r6, r8
 8006c3c:	106d      	asrs	r5, r5, #1
 8006c3e:	d00b      	beq.n	8006c58 <__pow5mult+0xa0>
 8006c40:	6820      	ldr	r0, [r4, #0]
 8006c42:	b938      	cbnz	r0, 8006c54 <__pow5mult+0x9c>
 8006c44:	4622      	mov	r2, r4
 8006c46:	4621      	mov	r1, r4
 8006c48:	4638      	mov	r0, r7
 8006c4a:	f7ff ff0d 	bl	8006a68 <__multiply>
 8006c4e:	6020      	str	r0, [r4, #0]
 8006c50:	f8c0 9000 	str.w	r9, [r0]
 8006c54:	4604      	mov	r4, r0
 8006c56:	e7e4      	b.n	8006c22 <__pow5mult+0x6a>
 8006c58:	4630      	mov	r0, r6
 8006c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5e:	bf00      	nop
 8006c60:	0800784c 	.word	0x0800784c
 8006c64:	08007773 	.word	0x08007773
 8006c68:	080077f3 	.word	0x080077f3

08006c6c <__lshift>:
 8006c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c70:	460c      	mov	r4, r1
 8006c72:	4607      	mov	r7, r0
 8006c74:	4691      	mov	r9, r2
 8006c76:	6923      	ldr	r3, [r4, #16]
 8006c78:	6849      	ldr	r1, [r1, #4]
 8006c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c7e:	68a3      	ldr	r3, [r4, #8]
 8006c80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c84:	f108 0601 	add.w	r6, r8, #1
 8006c88:	42b3      	cmp	r3, r6
 8006c8a:	db0b      	blt.n	8006ca4 <__lshift+0x38>
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f7ff fde1 	bl	8006854 <_Balloc>
 8006c92:	4605      	mov	r5, r0
 8006c94:	b948      	cbnz	r0, 8006caa <__lshift+0x3e>
 8006c96:	4602      	mov	r2, r0
 8006c98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c9c:	4b27      	ldr	r3, [pc, #156]	@ (8006d3c <__lshift+0xd0>)
 8006c9e:	4828      	ldr	r0, [pc, #160]	@ (8006d40 <__lshift+0xd4>)
 8006ca0:	f000 fa1e 	bl	80070e0 <__assert_func>
 8006ca4:	3101      	adds	r1, #1
 8006ca6:	005b      	lsls	r3, r3, #1
 8006ca8:	e7ee      	b.n	8006c88 <__lshift+0x1c>
 8006caa:	2300      	movs	r3, #0
 8006cac:	f100 0114 	add.w	r1, r0, #20
 8006cb0:	f100 0210 	add.w	r2, r0, #16
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	4553      	cmp	r3, sl
 8006cb8:	db33      	blt.n	8006d22 <__lshift+0xb6>
 8006cba:	6920      	ldr	r0, [r4, #16]
 8006cbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cc0:	f104 0314 	add.w	r3, r4, #20
 8006cc4:	f019 091f 	ands.w	r9, r9, #31
 8006cc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cd0:	d02b      	beq.n	8006d2a <__lshift+0xbe>
 8006cd2:	468a      	mov	sl, r1
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	fa00 f009 	lsl.w	r0, r0, r9
 8006ce0:	4310      	orrs	r0, r2
 8006ce2:	f84a 0b04 	str.w	r0, [sl], #4
 8006ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cea:	459c      	cmp	ip, r3
 8006cec:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cf0:	d8f3      	bhi.n	8006cda <__lshift+0x6e>
 8006cf2:	ebac 0304 	sub.w	r3, ip, r4
 8006cf6:	3b15      	subs	r3, #21
 8006cf8:	f023 0303 	bic.w	r3, r3, #3
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	f104 0015 	add.w	r0, r4, #21
 8006d02:	4584      	cmp	ip, r0
 8006d04:	bf38      	it	cc
 8006d06:	2304      	movcc	r3, #4
 8006d08:	50ca      	str	r2, [r1, r3]
 8006d0a:	b10a      	cbz	r2, 8006d10 <__lshift+0xa4>
 8006d0c:	f108 0602 	add.w	r6, r8, #2
 8006d10:	3e01      	subs	r6, #1
 8006d12:	4638      	mov	r0, r7
 8006d14:	4621      	mov	r1, r4
 8006d16:	612e      	str	r6, [r5, #16]
 8006d18:	f7ff fddc 	bl	80068d4 <_Bfree>
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d22:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d26:	3301      	adds	r3, #1
 8006d28:	e7c5      	b.n	8006cb6 <__lshift+0x4a>
 8006d2a:	3904      	subs	r1, #4
 8006d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d30:	459c      	cmp	ip, r3
 8006d32:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d36:	d8f9      	bhi.n	8006d2c <__lshift+0xc0>
 8006d38:	e7ea      	b.n	8006d10 <__lshift+0xa4>
 8006d3a:	bf00      	nop
 8006d3c:	080077e2 	.word	0x080077e2
 8006d40:	080077f3 	.word	0x080077f3

08006d44 <__mcmp>:
 8006d44:	4603      	mov	r3, r0
 8006d46:	690a      	ldr	r2, [r1, #16]
 8006d48:	6900      	ldr	r0, [r0, #16]
 8006d4a:	b530      	push	{r4, r5, lr}
 8006d4c:	1a80      	subs	r0, r0, r2
 8006d4e:	d10e      	bne.n	8006d6e <__mcmp+0x2a>
 8006d50:	3314      	adds	r3, #20
 8006d52:	3114      	adds	r1, #20
 8006d54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d64:	4295      	cmp	r5, r2
 8006d66:	d003      	beq.n	8006d70 <__mcmp+0x2c>
 8006d68:	d205      	bcs.n	8006d76 <__mcmp+0x32>
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	bd30      	pop	{r4, r5, pc}
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d3f3      	bcc.n	8006d5c <__mcmp+0x18>
 8006d74:	e7fb      	b.n	8006d6e <__mcmp+0x2a>
 8006d76:	2001      	movs	r0, #1
 8006d78:	e7f9      	b.n	8006d6e <__mcmp+0x2a>
	...

08006d7c <__mdiff>:
 8006d7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d80:	4689      	mov	r9, r1
 8006d82:	4606      	mov	r6, r0
 8006d84:	4611      	mov	r1, r2
 8006d86:	4648      	mov	r0, r9
 8006d88:	4614      	mov	r4, r2
 8006d8a:	f7ff ffdb 	bl	8006d44 <__mcmp>
 8006d8e:	1e05      	subs	r5, r0, #0
 8006d90:	d112      	bne.n	8006db8 <__mdiff+0x3c>
 8006d92:	4629      	mov	r1, r5
 8006d94:	4630      	mov	r0, r6
 8006d96:	f7ff fd5d 	bl	8006854 <_Balloc>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	b928      	cbnz	r0, 8006daa <__mdiff+0x2e>
 8006d9e:	f240 2137 	movw	r1, #567	@ 0x237
 8006da2:	4b3e      	ldr	r3, [pc, #248]	@ (8006e9c <__mdiff+0x120>)
 8006da4:	483e      	ldr	r0, [pc, #248]	@ (8006ea0 <__mdiff+0x124>)
 8006da6:	f000 f99b 	bl	80070e0 <__assert_func>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006db0:	4610      	mov	r0, r2
 8006db2:	b003      	add	sp, #12
 8006db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db8:	bfbc      	itt	lt
 8006dba:	464b      	movlt	r3, r9
 8006dbc:	46a1      	movlt	r9, r4
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006dc4:	bfba      	itte	lt
 8006dc6:	461c      	movlt	r4, r3
 8006dc8:	2501      	movlt	r5, #1
 8006dca:	2500      	movge	r5, #0
 8006dcc:	f7ff fd42 	bl	8006854 <_Balloc>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	b918      	cbnz	r0, 8006ddc <__mdiff+0x60>
 8006dd4:	f240 2145 	movw	r1, #581	@ 0x245
 8006dd8:	4b30      	ldr	r3, [pc, #192]	@ (8006e9c <__mdiff+0x120>)
 8006dda:	e7e3      	b.n	8006da4 <__mdiff+0x28>
 8006ddc:	f100 0b14 	add.w	fp, r0, #20
 8006de0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006de4:	f109 0310 	add.w	r3, r9, #16
 8006de8:	60c5      	str	r5, [r0, #12]
 8006dea:	f04f 0c00 	mov.w	ip, #0
 8006dee:	f109 0514 	add.w	r5, r9, #20
 8006df2:	46d9      	mov	r9, fp
 8006df4:	6926      	ldr	r6, [r4, #16]
 8006df6:	f104 0e14 	add.w	lr, r4, #20
 8006dfa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006dfe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	9b01      	ldr	r3, [sp, #4]
 8006e06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e0e:	b281      	uxth	r1, r0
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	fa1f f38a 	uxth.w	r3, sl
 8006e16:	1a5b      	subs	r3, r3, r1
 8006e18:	0c00      	lsrs	r0, r0, #16
 8006e1a:	4463      	add	r3, ip
 8006e1c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e20:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e2a:	4576      	cmp	r6, lr
 8006e2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e30:	f849 3b04 	str.w	r3, [r9], #4
 8006e34:	d8e6      	bhi.n	8006e04 <__mdiff+0x88>
 8006e36:	1b33      	subs	r3, r6, r4
 8006e38:	3b15      	subs	r3, #21
 8006e3a:	f023 0303 	bic.w	r3, r3, #3
 8006e3e:	3415      	adds	r4, #21
 8006e40:	3304      	adds	r3, #4
 8006e42:	42a6      	cmp	r6, r4
 8006e44:	bf38      	it	cc
 8006e46:	2304      	movcc	r3, #4
 8006e48:	441d      	add	r5, r3
 8006e4a:	445b      	add	r3, fp
 8006e4c:	461e      	mov	r6, r3
 8006e4e:	462c      	mov	r4, r5
 8006e50:	4544      	cmp	r4, r8
 8006e52:	d30e      	bcc.n	8006e72 <__mdiff+0xf6>
 8006e54:	f108 0103 	add.w	r1, r8, #3
 8006e58:	1b49      	subs	r1, r1, r5
 8006e5a:	f021 0103 	bic.w	r1, r1, #3
 8006e5e:	3d03      	subs	r5, #3
 8006e60:	45a8      	cmp	r8, r5
 8006e62:	bf38      	it	cc
 8006e64:	2100      	movcc	r1, #0
 8006e66:	440b      	add	r3, r1
 8006e68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e6c:	b199      	cbz	r1, 8006e96 <__mdiff+0x11a>
 8006e6e:	6117      	str	r7, [r2, #16]
 8006e70:	e79e      	b.n	8006db0 <__mdiff+0x34>
 8006e72:	46e6      	mov	lr, ip
 8006e74:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e78:	fa1f fc81 	uxth.w	ip, r1
 8006e7c:	44f4      	add	ip, lr
 8006e7e:	0c08      	lsrs	r0, r1, #16
 8006e80:	4471      	add	r1, lr
 8006e82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e86:	b289      	uxth	r1, r1
 8006e88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e90:	f846 1b04 	str.w	r1, [r6], #4
 8006e94:	e7dc      	b.n	8006e50 <__mdiff+0xd4>
 8006e96:	3f01      	subs	r7, #1
 8006e98:	e7e6      	b.n	8006e68 <__mdiff+0xec>
 8006e9a:	bf00      	nop
 8006e9c:	080077e2 	.word	0x080077e2
 8006ea0:	080077f3 	.word	0x080077f3

08006ea4 <__d2b>:
 8006ea4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	4690      	mov	r8, r2
 8006eac:	4699      	mov	r9, r3
 8006eae:	9e08      	ldr	r6, [sp, #32]
 8006eb0:	f7ff fcd0 	bl	8006854 <_Balloc>
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	b930      	cbnz	r0, 8006ec6 <__d2b+0x22>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	f240 310f 	movw	r1, #783	@ 0x30f
 8006ebe:	4b23      	ldr	r3, [pc, #140]	@ (8006f4c <__d2b+0xa8>)
 8006ec0:	4823      	ldr	r0, [pc, #140]	@ (8006f50 <__d2b+0xac>)
 8006ec2:	f000 f90d 	bl	80070e0 <__assert_func>
 8006ec6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006eca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ece:	b10d      	cbz	r5, 8006ed4 <__d2b+0x30>
 8006ed0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	f1b8 0300 	subs.w	r3, r8, #0
 8006eda:	d024      	beq.n	8006f26 <__d2b+0x82>
 8006edc:	4668      	mov	r0, sp
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	f7ff fd7f 	bl	80069e2 <__lo0bits>
 8006ee4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ee8:	b1d8      	cbz	r0, 8006f22 <__d2b+0x7e>
 8006eea:	f1c0 0320 	rsb	r3, r0, #32
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	40c2      	lsrs	r2, r0
 8006ef6:	6163      	str	r3, [r4, #20]
 8006ef8:	9201      	str	r2, [sp, #4]
 8006efa:	9b01      	ldr	r3, [sp, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	bf0c      	ite	eq
 8006f00:	2201      	moveq	r2, #1
 8006f02:	2202      	movne	r2, #2
 8006f04:	61a3      	str	r3, [r4, #24]
 8006f06:	6122      	str	r2, [r4, #16]
 8006f08:	b1ad      	cbz	r5, 8006f36 <__d2b+0x92>
 8006f0a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f0e:	4405      	add	r5, r0
 8006f10:	6035      	str	r5, [r6, #0]
 8006f12:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f18:	6018      	str	r0, [r3, #0]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	b002      	add	sp, #8
 8006f1e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006f22:	6161      	str	r1, [r4, #20]
 8006f24:	e7e9      	b.n	8006efa <__d2b+0x56>
 8006f26:	a801      	add	r0, sp, #4
 8006f28:	f7ff fd5b 	bl	80069e2 <__lo0bits>
 8006f2c:	9b01      	ldr	r3, [sp, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	6163      	str	r3, [r4, #20]
 8006f32:	3020      	adds	r0, #32
 8006f34:	e7e7      	b.n	8006f06 <__d2b+0x62>
 8006f36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f3e:	6030      	str	r0, [r6, #0]
 8006f40:	6918      	ldr	r0, [r3, #16]
 8006f42:	f7ff fd2f 	bl	80069a4 <__hi0bits>
 8006f46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f4a:	e7e4      	b.n	8006f16 <__d2b+0x72>
 8006f4c:	080077e2 	.word	0x080077e2
 8006f50:	080077f3 	.word	0x080077f3

08006f54 <__sflush_r>:
 8006f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	0716      	lsls	r6, r2, #28
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	460c      	mov	r4, r1
 8006f60:	d454      	bmi.n	800700c <__sflush_r+0xb8>
 8006f62:	684b      	ldr	r3, [r1, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dc02      	bgt.n	8006f6e <__sflush_r+0x1a>
 8006f68:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	dd48      	ble.n	8007000 <__sflush_r+0xac>
 8006f6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	d045      	beq.n	8007000 <__sflush_r+0xac>
 8006f74:	2300      	movs	r3, #0
 8006f76:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f7a:	682f      	ldr	r7, [r5, #0]
 8006f7c:	6a21      	ldr	r1, [r4, #32]
 8006f7e:	602b      	str	r3, [r5, #0]
 8006f80:	d030      	beq.n	8006fe4 <__sflush_r+0x90>
 8006f82:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f84:	89a3      	ldrh	r3, [r4, #12]
 8006f86:	0759      	lsls	r1, r3, #29
 8006f88:	d505      	bpl.n	8006f96 <__sflush_r+0x42>
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	1ad2      	subs	r2, r2, r3
 8006f8e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f90:	b10b      	cbz	r3, 8006f96 <__sflush_r+0x42>
 8006f92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f94:	1ad2      	subs	r2, r2, r3
 8006f96:	2300      	movs	r3, #0
 8006f98:	4628      	mov	r0, r5
 8006f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f9c:	6a21      	ldr	r1, [r4, #32]
 8006f9e:	47b0      	blx	r6
 8006fa0:	1c43      	adds	r3, r0, #1
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	d106      	bne.n	8006fb4 <__sflush_r+0x60>
 8006fa6:	6829      	ldr	r1, [r5, #0]
 8006fa8:	291d      	cmp	r1, #29
 8006faa:	d82b      	bhi.n	8007004 <__sflush_r+0xb0>
 8006fac:	4a28      	ldr	r2, [pc, #160]	@ (8007050 <__sflush_r+0xfc>)
 8006fae:	410a      	asrs	r2, r1
 8006fb0:	07d6      	lsls	r6, r2, #31
 8006fb2:	d427      	bmi.n	8007004 <__sflush_r+0xb0>
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	6062      	str	r2, [r4, #4]
 8006fb8:	6922      	ldr	r2, [r4, #16]
 8006fba:	04d9      	lsls	r1, r3, #19
 8006fbc:	6022      	str	r2, [r4, #0]
 8006fbe:	d504      	bpl.n	8006fca <__sflush_r+0x76>
 8006fc0:	1c42      	adds	r2, r0, #1
 8006fc2:	d101      	bne.n	8006fc8 <__sflush_r+0x74>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b903      	cbnz	r3, 8006fca <__sflush_r+0x76>
 8006fc8:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fcc:	602f      	str	r7, [r5, #0]
 8006fce:	b1b9      	cbz	r1, 8007000 <__sflush_r+0xac>
 8006fd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fd4:	4299      	cmp	r1, r3
 8006fd6:	d002      	beq.n	8006fde <__sflush_r+0x8a>
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f7ff fb3d 	bl	8006658 <_free_r>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fe2:	e00d      	b.n	8007000 <__sflush_r+0xac>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	47b0      	blx	r6
 8006fea:	4602      	mov	r2, r0
 8006fec:	1c50      	adds	r0, r2, #1
 8006fee:	d1c9      	bne.n	8006f84 <__sflush_r+0x30>
 8006ff0:	682b      	ldr	r3, [r5, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0c6      	beq.n	8006f84 <__sflush_r+0x30>
 8006ff6:	2b1d      	cmp	r3, #29
 8006ff8:	d001      	beq.n	8006ffe <__sflush_r+0xaa>
 8006ffa:	2b16      	cmp	r3, #22
 8006ffc:	d11d      	bne.n	800703a <__sflush_r+0xe6>
 8006ffe:	602f      	str	r7, [r5, #0]
 8007000:	2000      	movs	r0, #0
 8007002:	e021      	b.n	8007048 <__sflush_r+0xf4>
 8007004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007008:	b21b      	sxth	r3, r3
 800700a:	e01a      	b.n	8007042 <__sflush_r+0xee>
 800700c:	690f      	ldr	r7, [r1, #16]
 800700e:	2f00      	cmp	r7, #0
 8007010:	d0f6      	beq.n	8007000 <__sflush_r+0xac>
 8007012:	0793      	lsls	r3, r2, #30
 8007014:	bf18      	it	ne
 8007016:	2300      	movne	r3, #0
 8007018:	680e      	ldr	r6, [r1, #0]
 800701a:	bf08      	it	eq
 800701c:	694b      	ldreq	r3, [r1, #20]
 800701e:	1bf6      	subs	r6, r6, r7
 8007020:	600f      	str	r7, [r1, #0]
 8007022:	608b      	str	r3, [r1, #8]
 8007024:	2e00      	cmp	r6, #0
 8007026:	ddeb      	ble.n	8007000 <__sflush_r+0xac>
 8007028:	4633      	mov	r3, r6
 800702a:	463a      	mov	r2, r7
 800702c:	4628      	mov	r0, r5
 800702e:	6a21      	ldr	r1, [r4, #32]
 8007030:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007034:	47e0      	blx	ip
 8007036:	2800      	cmp	r0, #0
 8007038:	dc07      	bgt.n	800704a <__sflush_r+0xf6>
 800703a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800703e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007042:	f04f 30ff 	mov.w	r0, #4294967295
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800704a:	4407      	add	r7, r0
 800704c:	1a36      	subs	r6, r6, r0
 800704e:	e7e9      	b.n	8007024 <__sflush_r+0xd0>
 8007050:	dfbffffe 	.word	0xdfbffffe

08007054 <_fflush_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	690b      	ldr	r3, [r1, #16]
 8007058:	4605      	mov	r5, r0
 800705a:	460c      	mov	r4, r1
 800705c:	b913      	cbnz	r3, 8007064 <_fflush_r+0x10>
 800705e:	2500      	movs	r5, #0
 8007060:	4628      	mov	r0, r5
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	b118      	cbz	r0, 800706e <_fflush_r+0x1a>
 8007066:	6a03      	ldr	r3, [r0, #32]
 8007068:	b90b      	cbnz	r3, 800706e <_fflush_r+0x1a>
 800706a:	f7fe fb9b 	bl	80057a4 <__sinit>
 800706e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0f3      	beq.n	800705e <_fflush_r+0xa>
 8007076:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007078:	07d0      	lsls	r0, r2, #31
 800707a:	d404      	bmi.n	8007086 <_fflush_r+0x32>
 800707c:	0599      	lsls	r1, r3, #22
 800707e:	d402      	bmi.n	8007086 <_fflush_r+0x32>
 8007080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007082:	f7fe fc86 	bl	8005992 <__retarget_lock_acquire_recursive>
 8007086:	4628      	mov	r0, r5
 8007088:	4621      	mov	r1, r4
 800708a:	f7ff ff63 	bl	8006f54 <__sflush_r>
 800708e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007090:	4605      	mov	r5, r0
 8007092:	07da      	lsls	r2, r3, #31
 8007094:	d4e4      	bmi.n	8007060 <_fflush_r+0xc>
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	059b      	lsls	r3, r3, #22
 800709a:	d4e1      	bmi.n	8007060 <_fflush_r+0xc>
 800709c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800709e:	f7fe fc79 	bl	8005994 <__retarget_lock_release_recursive>
 80070a2:	e7dd      	b.n	8007060 <_fflush_r+0xc>

080070a4 <_sbrk_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	2300      	movs	r3, #0
 80070a8:	4d05      	ldr	r5, [pc, #20]	@ (80070c0 <_sbrk_r+0x1c>)
 80070aa:	4604      	mov	r4, r0
 80070ac:	4608      	mov	r0, r1
 80070ae:	602b      	str	r3, [r5, #0]
 80070b0:	f7fa fb4e 	bl	8001750 <_sbrk>
 80070b4:	1c43      	adds	r3, r0, #1
 80070b6:	d102      	bne.n	80070be <_sbrk_r+0x1a>
 80070b8:	682b      	ldr	r3, [r5, #0]
 80070ba:	b103      	cbz	r3, 80070be <_sbrk_r+0x1a>
 80070bc:	6023      	str	r3, [r4, #0]
 80070be:	bd38      	pop	{r3, r4, r5, pc}
 80070c0:	200004dc 	.word	0x200004dc

080070c4 <memcpy>:
 80070c4:	440a      	add	r2, r1
 80070c6:	4291      	cmp	r1, r2
 80070c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80070cc:	d100      	bne.n	80070d0 <memcpy+0xc>
 80070ce:	4770      	bx	lr
 80070d0:	b510      	push	{r4, lr}
 80070d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070d6:	4291      	cmp	r1, r2
 80070d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070dc:	d1f9      	bne.n	80070d2 <memcpy+0xe>
 80070de:	bd10      	pop	{r4, pc}

080070e0 <__assert_func>:
 80070e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070e2:	4614      	mov	r4, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	4b09      	ldr	r3, [pc, #36]	@ (800710c <__assert_func+0x2c>)
 80070e8:	4605      	mov	r5, r0
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68d8      	ldr	r0, [r3, #12]
 80070ee:	b954      	cbnz	r4, 8007106 <__assert_func+0x26>
 80070f0:	4b07      	ldr	r3, [pc, #28]	@ (8007110 <__assert_func+0x30>)
 80070f2:	461c      	mov	r4, r3
 80070f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070f8:	9100      	str	r1, [sp, #0]
 80070fa:	462b      	mov	r3, r5
 80070fc:	4905      	ldr	r1, [pc, #20]	@ (8007114 <__assert_func+0x34>)
 80070fe:	f000 f841 	bl	8007184 <fiprintf>
 8007102:	f000 f851 	bl	80071a8 <abort>
 8007106:	4b04      	ldr	r3, [pc, #16]	@ (8007118 <__assert_func+0x38>)
 8007108:	e7f4      	b.n	80070f4 <__assert_func+0x14>
 800710a:	bf00      	nop
 800710c:	20000018 	.word	0x20000018
 8007110:	0800798d 	.word	0x0800798d
 8007114:	0800795f 	.word	0x0800795f
 8007118:	08007952 	.word	0x08007952

0800711c <_calloc_r>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	fba1 5402 	umull	r5, r4, r1, r2
 8007122:	b93c      	cbnz	r4, 8007134 <_calloc_r+0x18>
 8007124:	4629      	mov	r1, r5
 8007126:	f7ff fb09 	bl	800673c <_malloc_r>
 800712a:	4606      	mov	r6, r0
 800712c:	b928      	cbnz	r0, 800713a <_calloc_r+0x1e>
 800712e:	2600      	movs	r6, #0
 8007130:	4630      	mov	r0, r6
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	220c      	movs	r2, #12
 8007136:	6002      	str	r2, [r0, #0]
 8007138:	e7f9      	b.n	800712e <_calloc_r+0x12>
 800713a:	462a      	mov	r2, r5
 800713c:	4621      	mov	r1, r4
 800713e:	f7fe fbaa 	bl	8005896 <memset>
 8007142:	e7f5      	b.n	8007130 <_calloc_r+0x14>

08007144 <__ascii_mbtowc>:
 8007144:	b082      	sub	sp, #8
 8007146:	b901      	cbnz	r1, 800714a <__ascii_mbtowc+0x6>
 8007148:	a901      	add	r1, sp, #4
 800714a:	b142      	cbz	r2, 800715e <__ascii_mbtowc+0x1a>
 800714c:	b14b      	cbz	r3, 8007162 <__ascii_mbtowc+0x1e>
 800714e:	7813      	ldrb	r3, [r2, #0]
 8007150:	600b      	str	r3, [r1, #0]
 8007152:	7812      	ldrb	r2, [r2, #0]
 8007154:	1e10      	subs	r0, r2, #0
 8007156:	bf18      	it	ne
 8007158:	2001      	movne	r0, #1
 800715a:	b002      	add	sp, #8
 800715c:	4770      	bx	lr
 800715e:	4610      	mov	r0, r2
 8007160:	e7fb      	b.n	800715a <__ascii_mbtowc+0x16>
 8007162:	f06f 0001 	mvn.w	r0, #1
 8007166:	e7f8      	b.n	800715a <__ascii_mbtowc+0x16>

08007168 <__ascii_wctomb>:
 8007168:	4603      	mov	r3, r0
 800716a:	4608      	mov	r0, r1
 800716c:	b141      	cbz	r1, 8007180 <__ascii_wctomb+0x18>
 800716e:	2aff      	cmp	r2, #255	@ 0xff
 8007170:	d904      	bls.n	800717c <__ascii_wctomb+0x14>
 8007172:	228a      	movs	r2, #138	@ 0x8a
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	4770      	bx	lr
 800717c:	2001      	movs	r0, #1
 800717e:	700a      	strb	r2, [r1, #0]
 8007180:	4770      	bx	lr
	...

08007184 <fiprintf>:
 8007184:	b40e      	push	{r1, r2, r3}
 8007186:	b503      	push	{r0, r1, lr}
 8007188:	4601      	mov	r1, r0
 800718a:	ab03      	add	r3, sp, #12
 800718c:	4805      	ldr	r0, [pc, #20]	@ (80071a4 <fiprintf+0x20>)
 800718e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007192:	6800      	ldr	r0, [r0, #0]
 8007194:	9301      	str	r3, [sp, #4]
 8007196:	f000 f835 	bl	8007204 <_vfiprintf_r>
 800719a:	b002      	add	sp, #8
 800719c:	f85d eb04 	ldr.w	lr, [sp], #4
 80071a0:	b003      	add	sp, #12
 80071a2:	4770      	bx	lr
 80071a4:	20000018 	.word	0x20000018

080071a8 <abort>:
 80071a8:	2006      	movs	r0, #6
 80071aa:	b508      	push	{r3, lr}
 80071ac:	f000 f9fe 	bl	80075ac <raise>
 80071b0:	2001      	movs	r0, #1
 80071b2:	f7fa fa58 	bl	8001666 <_exit>

080071b6 <__sfputc_r>:
 80071b6:	6893      	ldr	r3, [r2, #8]
 80071b8:	b410      	push	{r4}
 80071ba:	3b01      	subs	r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	6093      	str	r3, [r2, #8]
 80071c0:	da07      	bge.n	80071d2 <__sfputc_r+0x1c>
 80071c2:	6994      	ldr	r4, [r2, #24]
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	db01      	blt.n	80071cc <__sfputc_r+0x16>
 80071c8:	290a      	cmp	r1, #10
 80071ca:	d102      	bne.n	80071d2 <__sfputc_r+0x1c>
 80071cc:	bc10      	pop	{r4}
 80071ce:	f000 b931 	b.w	8007434 <__swbuf_r>
 80071d2:	6813      	ldr	r3, [r2, #0]
 80071d4:	1c58      	adds	r0, r3, #1
 80071d6:	6010      	str	r0, [r2, #0]
 80071d8:	7019      	strb	r1, [r3, #0]
 80071da:	4608      	mov	r0, r1
 80071dc:	bc10      	pop	{r4}
 80071de:	4770      	bx	lr

080071e0 <__sfputs_r>:
 80071e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e2:	4606      	mov	r6, r0
 80071e4:	460f      	mov	r7, r1
 80071e6:	4614      	mov	r4, r2
 80071e8:	18d5      	adds	r5, r2, r3
 80071ea:	42ac      	cmp	r4, r5
 80071ec:	d101      	bne.n	80071f2 <__sfputs_r+0x12>
 80071ee:	2000      	movs	r0, #0
 80071f0:	e007      	b.n	8007202 <__sfputs_r+0x22>
 80071f2:	463a      	mov	r2, r7
 80071f4:	4630      	mov	r0, r6
 80071f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071fa:	f7ff ffdc 	bl	80071b6 <__sfputc_r>
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	d1f3      	bne.n	80071ea <__sfputs_r+0xa>
 8007202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007204 <_vfiprintf_r>:
 8007204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	460d      	mov	r5, r1
 800720a:	4614      	mov	r4, r2
 800720c:	4698      	mov	r8, r3
 800720e:	4606      	mov	r6, r0
 8007210:	b09d      	sub	sp, #116	@ 0x74
 8007212:	b118      	cbz	r0, 800721c <_vfiprintf_r+0x18>
 8007214:	6a03      	ldr	r3, [r0, #32]
 8007216:	b90b      	cbnz	r3, 800721c <_vfiprintf_r+0x18>
 8007218:	f7fe fac4 	bl	80057a4 <__sinit>
 800721c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800721e:	07d9      	lsls	r1, r3, #31
 8007220:	d405      	bmi.n	800722e <_vfiprintf_r+0x2a>
 8007222:	89ab      	ldrh	r3, [r5, #12]
 8007224:	059a      	lsls	r2, r3, #22
 8007226:	d402      	bmi.n	800722e <_vfiprintf_r+0x2a>
 8007228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800722a:	f7fe fbb2 	bl	8005992 <__retarget_lock_acquire_recursive>
 800722e:	89ab      	ldrh	r3, [r5, #12]
 8007230:	071b      	lsls	r3, r3, #28
 8007232:	d501      	bpl.n	8007238 <_vfiprintf_r+0x34>
 8007234:	692b      	ldr	r3, [r5, #16]
 8007236:	b99b      	cbnz	r3, 8007260 <_vfiprintf_r+0x5c>
 8007238:	4629      	mov	r1, r5
 800723a:	4630      	mov	r0, r6
 800723c:	f000 f938 	bl	80074b0 <__swsetup_r>
 8007240:	b170      	cbz	r0, 8007260 <_vfiprintf_r+0x5c>
 8007242:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007244:	07dc      	lsls	r4, r3, #31
 8007246:	d504      	bpl.n	8007252 <_vfiprintf_r+0x4e>
 8007248:	f04f 30ff 	mov.w	r0, #4294967295
 800724c:	b01d      	add	sp, #116	@ 0x74
 800724e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007252:	89ab      	ldrh	r3, [r5, #12]
 8007254:	0598      	lsls	r0, r3, #22
 8007256:	d4f7      	bmi.n	8007248 <_vfiprintf_r+0x44>
 8007258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800725a:	f7fe fb9b 	bl	8005994 <__retarget_lock_release_recursive>
 800725e:	e7f3      	b.n	8007248 <_vfiprintf_r+0x44>
 8007260:	2300      	movs	r3, #0
 8007262:	9309      	str	r3, [sp, #36]	@ 0x24
 8007264:	2320      	movs	r3, #32
 8007266:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800726a:	2330      	movs	r3, #48	@ 0x30
 800726c:	f04f 0901 	mov.w	r9, #1
 8007270:	f8cd 800c 	str.w	r8, [sp, #12]
 8007274:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007420 <_vfiprintf_r+0x21c>
 8007278:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800727c:	4623      	mov	r3, r4
 800727e:	469a      	mov	sl, r3
 8007280:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007284:	b10a      	cbz	r2, 800728a <_vfiprintf_r+0x86>
 8007286:	2a25      	cmp	r2, #37	@ 0x25
 8007288:	d1f9      	bne.n	800727e <_vfiprintf_r+0x7a>
 800728a:	ebba 0b04 	subs.w	fp, sl, r4
 800728e:	d00b      	beq.n	80072a8 <_vfiprintf_r+0xa4>
 8007290:	465b      	mov	r3, fp
 8007292:	4622      	mov	r2, r4
 8007294:	4629      	mov	r1, r5
 8007296:	4630      	mov	r0, r6
 8007298:	f7ff ffa2 	bl	80071e0 <__sfputs_r>
 800729c:	3001      	adds	r0, #1
 800729e:	f000 80a7 	beq.w	80073f0 <_vfiprintf_r+0x1ec>
 80072a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a4:	445a      	add	r2, fp
 80072a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80072a8:	f89a 3000 	ldrb.w	r3, [sl]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f000 809f 	beq.w	80073f0 <_vfiprintf_r+0x1ec>
 80072b2:	2300      	movs	r3, #0
 80072b4:	f04f 32ff 	mov.w	r2, #4294967295
 80072b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072bc:	f10a 0a01 	add.w	sl, sl, #1
 80072c0:	9304      	str	r3, [sp, #16]
 80072c2:	9307      	str	r3, [sp, #28]
 80072c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80072ca:	4654      	mov	r4, sl
 80072cc:	2205      	movs	r2, #5
 80072ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072d2:	4853      	ldr	r0, [pc, #332]	@ (8007420 <_vfiprintf_r+0x21c>)
 80072d4:	f7fe fb5f 	bl	8005996 <memchr>
 80072d8:	9a04      	ldr	r2, [sp, #16]
 80072da:	b9d8      	cbnz	r0, 8007314 <_vfiprintf_r+0x110>
 80072dc:	06d1      	lsls	r1, r2, #27
 80072de:	bf44      	itt	mi
 80072e0:	2320      	movmi	r3, #32
 80072e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072e6:	0713      	lsls	r3, r2, #28
 80072e8:	bf44      	itt	mi
 80072ea:	232b      	movmi	r3, #43	@ 0x2b
 80072ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072f0:	f89a 3000 	ldrb.w	r3, [sl]
 80072f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f6:	d015      	beq.n	8007324 <_vfiprintf_r+0x120>
 80072f8:	4654      	mov	r4, sl
 80072fa:	2000      	movs	r0, #0
 80072fc:	f04f 0c0a 	mov.w	ip, #10
 8007300:	9a07      	ldr	r2, [sp, #28]
 8007302:	4621      	mov	r1, r4
 8007304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007308:	3b30      	subs	r3, #48	@ 0x30
 800730a:	2b09      	cmp	r3, #9
 800730c:	d94b      	bls.n	80073a6 <_vfiprintf_r+0x1a2>
 800730e:	b1b0      	cbz	r0, 800733e <_vfiprintf_r+0x13a>
 8007310:	9207      	str	r2, [sp, #28]
 8007312:	e014      	b.n	800733e <_vfiprintf_r+0x13a>
 8007314:	eba0 0308 	sub.w	r3, r0, r8
 8007318:	fa09 f303 	lsl.w	r3, r9, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	46a2      	mov	sl, r4
 8007320:	9304      	str	r3, [sp, #16]
 8007322:	e7d2      	b.n	80072ca <_vfiprintf_r+0xc6>
 8007324:	9b03      	ldr	r3, [sp, #12]
 8007326:	1d19      	adds	r1, r3, #4
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	9103      	str	r1, [sp, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	bfbb      	ittet	lt
 8007330:	425b      	neglt	r3, r3
 8007332:	f042 0202 	orrlt.w	r2, r2, #2
 8007336:	9307      	strge	r3, [sp, #28]
 8007338:	9307      	strlt	r3, [sp, #28]
 800733a:	bfb8      	it	lt
 800733c:	9204      	strlt	r2, [sp, #16]
 800733e:	7823      	ldrb	r3, [r4, #0]
 8007340:	2b2e      	cmp	r3, #46	@ 0x2e
 8007342:	d10a      	bne.n	800735a <_vfiprintf_r+0x156>
 8007344:	7863      	ldrb	r3, [r4, #1]
 8007346:	2b2a      	cmp	r3, #42	@ 0x2a
 8007348:	d132      	bne.n	80073b0 <_vfiprintf_r+0x1ac>
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	3402      	adds	r4, #2
 800734e:	1d1a      	adds	r2, r3, #4
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	9203      	str	r2, [sp, #12]
 8007354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007424 <_vfiprintf_r+0x220>
 800735e:	2203      	movs	r2, #3
 8007360:	4650      	mov	r0, sl
 8007362:	7821      	ldrb	r1, [r4, #0]
 8007364:	f7fe fb17 	bl	8005996 <memchr>
 8007368:	b138      	cbz	r0, 800737a <_vfiprintf_r+0x176>
 800736a:	2240      	movs	r2, #64	@ 0x40
 800736c:	9b04      	ldr	r3, [sp, #16]
 800736e:	eba0 000a 	sub.w	r0, r0, sl
 8007372:	4082      	lsls	r2, r0
 8007374:	4313      	orrs	r3, r2
 8007376:	3401      	adds	r4, #1
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737e:	2206      	movs	r2, #6
 8007380:	4829      	ldr	r0, [pc, #164]	@ (8007428 <_vfiprintf_r+0x224>)
 8007382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007386:	f7fe fb06 	bl	8005996 <memchr>
 800738a:	2800      	cmp	r0, #0
 800738c:	d03f      	beq.n	800740e <_vfiprintf_r+0x20a>
 800738e:	4b27      	ldr	r3, [pc, #156]	@ (800742c <_vfiprintf_r+0x228>)
 8007390:	bb1b      	cbnz	r3, 80073da <_vfiprintf_r+0x1d6>
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	3307      	adds	r3, #7
 8007396:	f023 0307 	bic.w	r3, r3, #7
 800739a:	3308      	adds	r3, #8
 800739c:	9303      	str	r3, [sp, #12]
 800739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a0:	443b      	add	r3, r7
 80073a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a4:	e76a      	b.n	800727c <_vfiprintf_r+0x78>
 80073a6:	460c      	mov	r4, r1
 80073a8:	2001      	movs	r0, #1
 80073aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ae:	e7a8      	b.n	8007302 <_vfiprintf_r+0xfe>
 80073b0:	2300      	movs	r3, #0
 80073b2:	f04f 0c0a 	mov.w	ip, #10
 80073b6:	4619      	mov	r1, r3
 80073b8:	3401      	adds	r4, #1
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	4620      	mov	r0, r4
 80073be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073c2:	3a30      	subs	r2, #48	@ 0x30
 80073c4:	2a09      	cmp	r2, #9
 80073c6:	d903      	bls.n	80073d0 <_vfiprintf_r+0x1cc>
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d0c6      	beq.n	800735a <_vfiprintf_r+0x156>
 80073cc:	9105      	str	r1, [sp, #20]
 80073ce:	e7c4      	b.n	800735a <_vfiprintf_r+0x156>
 80073d0:	4604      	mov	r4, r0
 80073d2:	2301      	movs	r3, #1
 80073d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d8:	e7f0      	b.n	80073bc <_vfiprintf_r+0x1b8>
 80073da:	ab03      	add	r3, sp, #12
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	462a      	mov	r2, r5
 80073e0:	4630      	mov	r0, r6
 80073e2:	4b13      	ldr	r3, [pc, #76]	@ (8007430 <_vfiprintf_r+0x22c>)
 80073e4:	a904      	add	r1, sp, #16
 80073e6:	f7fd fd93 	bl	8004f10 <_printf_float>
 80073ea:	4607      	mov	r7, r0
 80073ec:	1c78      	adds	r0, r7, #1
 80073ee:	d1d6      	bne.n	800739e <_vfiprintf_r+0x19a>
 80073f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073f2:	07d9      	lsls	r1, r3, #31
 80073f4:	d405      	bmi.n	8007402 <_vfiprintf_r+0x1fe>
 80073f6:	89ab      	ldrh	r3, [r5, #12]
 80073f8:	059a      	lsls	r2, r3, #22
 80073fa:	d402      	bmi.n	8007402 <_vfiprintf_r+0x1fe>
 80073fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073fe:	f7fe fac9 	bl	8005994 <__retarget_lock_release_recursive>
 8007402:	89ab      	ldrh	r3, [r5, #12]
 8007404:	065b      	lsls	r3, r3, #25
 8007406:	f53f af1f 	bmi.w	8007248 <_vfiprintf_r+0x44>
 800740a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800740c:	e71e      	b.n	800724c <_vfiprintf_r+0x48>
 800740e:	ab03      	add	r3, sp, #12
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	462a      	mov	r2, r5
 8007414:	4630      	mov	r0, r6
 8007416:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <_vfiprintf_r+0x22c>)
 8007418:	a904      	add	r1, sp, #16
 800741a:	f7fe f817 	bl	800544c <_printf_i>
 800741e:	e7e4      	b.n	80073ea <_vfiprintf_r+0x1e6>
 8007420:	08007a8f 	.word	0x08007a8f
 8007424:	08007a95 	.word	0x08007a95
 8007428:	08007a99 	.word	0x08007a99
 800742c:	08004f11 	.word	0x08004f11
 8007430:	080071e1 	.word	0x080071e1

08007434 <__swbuf_r>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	460e      	mov	r6, r1
 8007438:	4614      	mov	r4, r2
 800743a:	4605      	mov	r5, r0
 800743c:	b118      	cbz	r0, 8007446 <__swbuf_r+0x12>
 800743e:	6a03      	ldr	r3, [r0, #32]
 8007440:	b90b      	cbnz	r3, 8007446 <__swbuf_r+0x12>
 8007442:	f7fe f9af 	bl	80057a4 <__sinit>
 8007446:	69a3      	ldr	r3, [r4, #24]
 8007448:	60a3      	str	r3, [r4, #8]
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	071a      	lsls	r2, r3, #28
 800744e:	d501      	bpl.n	8007454 <__swbuf_r+0x20>
 8007450:	6923      	ldr	r3, [r4, #16]
 8007452:	b943      	cbnz	r3, 8007466 <__swbuf_r+0x32>
 8007454:	4621      	mov	r1, r4
 8007456:	4628      	mov	r0, r5
 8007458:	f000 f82a 	bl	80074b0 <__swsetup_r>
 800745c:	b118      	cbz	r0, 8007466 <__swbuf_r+0x32>
 800745e:	f04f 37ff 	mov.w	r7, #4294967295
 8007462:	4638      	mov	r0, r7
 8007464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	6922      	ldr	r2, [r4, #16]
 800746a:	b2f6      	uxtb	r6, r6
 800746c:	1a98      	subs	r0, r3, r2
 800746e:	6963      	ldr	r3, [r4, #20]
 8007470:	4637      	mov	r7, r6
 8007472:	4283      	cmp	r3, r0
 8007474:	dc05      	bgt.n	8007482 <__swbuf_r+0x4e>
 8007476:	4621      	mov	r1, r4
 8007478:	4628      	mov	r0, r5
 800747a:	f7ff fdeb 	bl	8007054 <_fflush_r>
 800747e:	2800      	cmp	r0, #0
 8007480:	d1ed      	bne.n	800745e <__swbuf_r+0x2a>
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	3b01      	subs	r3, #1
 8007486:	60a3      	str	r3, [r4, #8]
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	6022      	str	r2, [r4, #0]
 800748e:	701e      	strb	r6, [r3, #0]
 8007490:	6962      	ldr	r2, [r4, #20]
 8007492:	1c43      	adds	r3, r0, #1
 8007494:	429a      	cmp	r2, r3
 8007496:	d004      	beq.n	80074a2 <__swbuf_r+0x6e>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	07db      	lsls	r3, r3, #31
 800749c:	d5e1      	bpl.n	8007462 <__swbuf_r+0x2e>
 800749e:	2e0a      	cmp	r6, #10
 80074a0:	d1df      	bne.n	8007462 <__swbuf_r+0x2e>
 80074a2:	4621      	mov	r1, r4
 80074a4:	4628      	mov	r0, r5
 80074a6:	f7ff fdd5 	bl	8007054 <_fflush_r>
 80074aa:	2800      	cmp	r0, #0
 80074ac:	d0d9      	beq.n	8007462 <__swbuf_r+0x2e>
 80074ae:	e7d6      	b.n	800745e <__swbuf_r+0x2a>

080074b0 <__swsetup_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4b29      	ldr	r3, [pc, #164]	@ (8007558 <__swsetup_r+0xa8>)
 80074b4:	4605      	mov	r5, r0
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	460c      	mov	r4, r1
 80074ba:	b118      	cbz	r0, 80074c4 <__swsetup_r+0x14>
 80074bc:	6a03      	ldr	r3, [r0, #32]
 80074be:	b90b      	cbnz	r3, 80074c4 <__swsetup_r+0x14>
 80074c0:	f7fe f970 	bl	80057a4 <__sinit>
 80074c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c8:	0719      	lsls	r1, r3, #28
 80074ca:	d422      	bmi.n	8007512 <__swsetup_r+0x62>
 80074cc:	06da      	lsls	r2, r3, #27
 80074ce:	d407      	bmi.n	80074e0 <__swsetup_r+0x30>
 80074d0:	2209      	movs	r2, #9
 80074d2:	602a      	str	r2, [r5, #0]
 80074d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	e033      	b.n	8007548 <__swsetup_r+0x98>
 80074e0:	0758      	lsls	r0, r3, #29
 80074e2:	d512      	bpl.n	800750a <__swsetup_r+0x5a>
 80074e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074e6:	b141      	cbz	r1, 80074fa <__swsetup_r+0x4a>
 80074e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074ec:	4299      	cmp	r1, r3
 80074ee:	d002      	beq.n	80074f6 <__swsetup_r+0x46>
 80074f0:	4628      	mov	r0, r5
 80074f2:	f7ff f8b1 	bl	8006658 <_free_r>
 80074f6:	2300      	movs	r3, #0
 80074f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80074fa:	89a3      	ldrh	r3, [r4, #12]
 80074fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	2300      	movs	r3, #0
 8007504:	6063      	str	r3, [r4, #4]
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	f043 0308 	orr.w	r3, r3, #8
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	b94b      	cbnz	r3, 800752a <__swsetup_r+0x7a>
 8007516:	89a3      	ldrh	r3, [r4, #12]
 8007518:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800751c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007520:	d003      	beq.n	800752a <__swsetup_r+0x7a>
 8007522:	4621      	mov	r1, r4
 8007524:	4628      	mov	r0, r5
 8007526:	f000 f882 	bl	800762e <__smakebuf_r>
 800752a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800752e:	f013 0201 	ands.w	r2, r3, #1
 8007532:	d00a      	beq.n	800754a <__swsetup_r+0x9a>
 8007534:	2200      	movs	r2, #0
 8007536:	60a2      	str	r2, [r4, #8]
 8007538:	6962      	ldr	r2, [r4, #20]
 800753a:	4252      	negs	r2, r2
 800753c:	61a2      	str	r2, [r4, #24]
 800753e:	6922      	ldr	r2, [r4, #16]
 8007540:	b942      	cbnz	r2, 8007554 <__swsetup_r+0xa4>
 8007542:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007546:	d1c5      	bne.n	80074d4 <__swsetup_r+0x24>
 8007548:	bd38      	pop	{r3, r4, r5, pc}
 800754a:	0799      	lsls	r1, r3, #30
 800754c:	bf58      	it	pl
 800754e:	6962      	ldrpl	r2, [r4, #20]
 8007550:	60a2      	str	r2, [r4, #8]
 8007552:	e7f4      	b.n	800753e <__swsetup_r+0x8e>
 8007554:	2000      	movs	r0, #0
 8007556:	e7f7      	b.n	8007548 <__swsetup_r+0x98>
 8007558:	20000018 	.word	0x20000018

0800755c <_raise_r>:
 800755c:	291f      	cmp	r1, #31
 800755e:	b538      	push	{r3, r4, r5, lr}
 8007560:	4605      	mov	r5, r0
 8007562:	460c      	mov	r4, r1
 8007564:	d904      	bls.n	8007570 <_raise_r+0x14>
 8007566:	2316      	movs	r3, #22
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	f04f 30ff 	mov.w	r0, #4294967295
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007572:	b112      	cbz	r2, 800757a <_raise_r+0x1e>
 8007574:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007578:	b94b      	cbnz	r3, 800758e <_raise_r+0x32>
 800757a:	4628      	mov	r0, r5
 800757c:	f000 f830 	bl	80075e0 <_getpid_r>
 8007580:	4622      	mov	r2, r4
 8007582:	4601      	mov	r1, r0
 8007584:	4628      	mov	r0, r5
 8007586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800758a:	f000 b817 	b.w	80075bc <_kill_r>
 800758e:	2b01      	cmp	r3, #1
 8007590:	d00a      	beq.n	80075a8 <_raise_r+0x4c>
 8007592:	1c59      	adds	r1, r3, #1
 8007594:	d103      	bne.n	800759e <_raise_r+0x42>
 8007596:	2316      	movs	r3, #22
 8007598:	6003      	str	r3, [r0, #0]
 800759a:	2001      	movs	r0, #1
 800759c:	e7e7      	b.n	800756e <_raise_r+0x12>
 800759e:	2100      	movs	r1, #0
 80075a0:	4620      	mov	r0, r4
 80075a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80075a6:	4798      	blx	r3
 80075a8:	2000      	movs	r0, #0
 80075aa:	e7e0      	b.n	800756e <_raise_r+0x12>

080075ac <raise>:
 80075ac:	4b02      	ldr	r3, [pc, #8]	@ (80075b8 <raise+0xc>)
 80075ae:	4601      	mov	r1, r0
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	f7ff bfd3 	b.w	800755c <_raise_r>
 80075b6:	bf00      	nop
 80075b8:	20000018 	.word	0x20000018

080075bc <_kill_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	2300      	movs	r3, #0
 80075c0:	4d06      	ldr	r5, [pc, #24]	@ (80075dc <_kill_r+0x20>)
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	4611      	mov	r1, r2
 80075c8:	602b      	str	r3, [r5, #0]
 80075ca:	f7fa f83c 	bl	8001646 <_kill>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	d102      	bne.n	80075d8 <_kill_r+0x1c>
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	b103      	cbz	r3, 80075d8 <_kill_r+0x1c>
 80075d6:	6023      	str	r3, [r4, #0]
 80075d8:	bd38      	pop	{r3, r4, r5, pc}
 80075da:	bf00      	nop
 80075dc:	200004dc 	.word	0x200004dc

080075e0 <_getpid_r>:
 80075e0:	f7fa b82a 	b.w	8001638 <_getpid>

080075e4 <__swhatbuf_r>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	460c      	mov	r4, r1
 80075e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ec:	4615      	mov	r5, r2
 80075ee:	2900      	cmp	r1, #0
 80075f0:	461e      	mov	r6, r3
 80075f2:	b096      	sub	sp, #88	@ 0x58
 80075f4:	da0c      	bge.n	8007610 <__swhatbuf_r+0x2c>
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	2100      	movs	r1, #0
 80075fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80075fe:	bf14      	ite	ne
 8007600:	2340      	movne	r3, #64	@ 0x40
 8007602:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007606:	2000      	movs	r0, #0
 8007608:	6031      	str	r1, [r6, #0]
 800760a:	602b      	str	r3, [r5, #0]
 800760c:	b016      	add	sp, #88	@ 0x58
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	466a      	mov	r2, sp
 8007612:	f000 f849 	bl	80076a8 <_fstat_r>
 8007616:	2800      	cmp	r0, #0
 8007618:	dbed      	blt.n	80075f6 <__swhatbuf_r+0x12>
 800761a:	9901      	ldr	r1, [sp, #4]
 800761c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007620:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007624:	4259      	negs	r1, r3
 8007626:	4159      	adcs	r1, r3
 8007628:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800762c:	e7eb      	b.n	8007606 <__swhatbuf_r+0x22>

0800762e <__smakebuf_r>:
 800762e:	898b      	ldrh	r3, [r1, #12]
 8007630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007632:	079d      	lsls	r5, r3, #30
 8007634:	4606      	mov	r6, r0
 8007636:	460c      	mov	r4, r1
 8007638:	d507      	bpl.n	800764a <__smakebuf_r+0x1c>
 800763a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800763e:	6023      	str	r3, [r4, #0]
 8007640:	6123      	str	r3, [r4, #16]
 8007642:	2301      	movs	r3, #1
 8007644:	6163      	str	r3, [r4, #20]
 8007646:	b003      	add	sp, #12
 8007648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800764a:	466a      	mov	r2, sp
 800764c:	ab01      	add	r3, sp, #4
 800764e:	f7ff ffc9 	bl	80075e4 <__swhatbuf_r>
 8007652:	9f00      	ldr	r7, [sp, #0]
 8007654:	4605      	mov	r5, r0
 8007656:	4639      	mov	r1, r7
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff f86f 	bl	800673c <_malloc_r>
 800765e:	b948      	cbnz	r0, 8007674 <__smakebuf_r+0x46>
 8007660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007664:	059a      	lsls	r2, r3, #22
 8007666:	d4ee      	bmi.n	8007646 <__smakebuf_r+0x18>
 8007668:	f023 0303 	bic.w	r3, r3, #3
 800766c:	f043 0302 	orr.w	r3, r3, #2
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	e7e2      	b.n	800763a <__smakebuf_r+0xc>
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800767a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800767e:	81a3      	strh	r3, [r4, #12]
 8007680:	9b01      	ldr	r3, [sp, #4]
 8007682:	6020      	str	r0, [r4, #0]
 8007684:	b15b      	cbz	r3, 800769e <__smakebuf_r+0x70>
 8007686:	4630      	mov	r0, r6
 8007688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800768c:	f000 f81e 	bl	80076cc <_isatty_r>
 8007690:	b128      	cbz	r0, 800769e <__smakebuf_r+0x70>
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	f023 0303 	bic.w	r3, r3, #3
 8007698:	f043 0301 	orr.w	r3, r3, #1
 800769c:	81a3      	strh	r3, [r4, #12]
 800769e:	89a3      	ldrh	r3, [r4, #12]
 80076a0:	431d      	orrs	r5, r3
 80076a2:	81a5      	strh	r5, [r4, #12]
 80076a4:	e7cf      	b.n	8007646 <__smakebuf_r+0x18>
	...

080076a8 <_fstat_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	2300      	movs	r3, #0
 80076ac:	4d06      	ldr	r5, [pc, #24]	@ (80076c8 <_fstat_r+0x20>)
 80076ae:	4604      	mov	r4, r0
 80076b0:	4608      	mov	r0, r1
 80076b2:	4611      	mov	r1, r2
 80076b4:	602b      	str	r3, [r5, #0]
 80076b6:	f7fa f825 	bl	8001704 <_fstat>
 80076ba:	1c43      	adds	r3, r0, #1
 80076bc:	d102      	bne.n	80076c4 <_fstat_r+0x1c>
 80076be:	682b      	ldr	r3, [r5, #0]
 80076c0:	b103      	cbz	r3, 80076c4 <_fstat_r+0x1c>
 80076c2:	6023      	str	r3, [r4, #0]
 80076c4:	bd38      	pop	{r3, r4, r5, pc}
 80076c6:	bf00      	nop
 80076c8:	200004dc 	.word	0x200004dc

080076cc <_isatty_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	2300      	movs	r3, #0
 80076d0:	4d05      	ldr	r5, [pc, #20]	@ (80076e8 <_isatty_r+0x1c>)
 80076d2:	4604      	mov	r4, r0
 80076d4:	4608      	mov	r0, r1
 80076d6:	602b      	str	r3, [r5, #0]
 80076d8:	f7fa f823 	bl	8001722 <_isatty>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d102      	bne.n	80076e6 <_isatty_r+0x1a>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	b103      	cbz	r3, 80076e6 <_isatty_r+0x1a>
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
 80076e8:	200004dc 	.word	0x200004dc

080076ec <_init>:
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	bf00      	nop
 80076f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f2:	bc08      	pop	{r3}
 80076f4:	469e      	mov	lr, r3
 80076f6:	4770      	bx	lr

080076f8 <_fini>:
 80076f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fa:	bf00      	nop
 80076fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076fe:	bc08      	pop	{r3}
 8007700:	469e      	mov	lr, r3
 8007702:	4770      	bx	lr
