
test_7_RAW_UDP_server_with_lwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010010  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002be0  080101c0  080101c0  000201c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012da0  08012da0  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08012da0  08012da0  00022da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012da8  08012da8  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012da8  08012da8  00022da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012dac  08012dac  00022dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012db0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          0000899c  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008a24  20008a24  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e348  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005453  00000000  00000000  0004e443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016a8  00000000  00000000  00053898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000120e  00000000  00000000  00054f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00030587  00000000  00000000  0005614e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000274dd  00000000  00000000  000866d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed717  00000000  00000000  000adbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000066e8  00000000  00000000  0019b2cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001a19b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080101a8 	.word	0x080101a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	080101a8 	.word	0x080101a8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fd74 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f812 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8d2 	bl	8000740 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800059c:	f000 f878 	bl	8000690 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a0:	f000 f8a0 	bl	80006e4 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005a4:	f003 fd18 	bl	8003fd8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udpServer_init();
 80005a8:	f000 fb78 	bl	8000c9c <udpServer_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	MX_LWIP_Process();
 80005ac:	f003 fe54 	bl	8004258 <MX_LWIP_Process>

  	ethernetif_notify_conn_changed(&gnetif);
 80005b0:	4801      	ldr	r0, [pc, #4]	; (80005b8 <main+0x2c>)
 80005b2:	f000 f973 	bl	800089c <ethernetif_notify_conn_changed>
  	MX_LWIP_Process();
 80005b6:	e7f9      	b.n	80005ac <main+0x20>
 80005b8:	200005dc 	.word	0x200005dc

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00e fdb1 	bl	800f132 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	; 0xa8
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fa6d 	bl	8002b20 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f950 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2105      	movs	r1, #5
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fcce 	bl	8003010 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 f939 	bl	80008f0 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART3_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006c8:	f002 fec2 	bl	8003450 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f90d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000a4 	.word	0x200000a4
 80006e0:	40004800 	.word	0x40004800

080006e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000704:	2202      	movs	r2, #2
 8000706:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	2201      	movs	r2, #1
 800070c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071c:	2201      	movs	r2, #1
 800071e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000728:	f002 f8eb 	bl	8002902 <HAL_PCD_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f8dd 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000ec 	.word	0x200000ec

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	4b4c      	ldr	r3, [pc, #304]	; (800088c <MX_GPIO_Init+0x14c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a4b      	ldr	r2, [pc, #300]	; (800088c <MX_GPIO_Init+0x14c>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b49      	ldr	r3, [pc, #292]	; (800088c <MX_GPIO_Init+0x14c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a44      	ldr	r2, [pc, #272]	; (800088c <MX_GPIO_Init+0x14c>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <MX_GPIO_Init+0x14c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <MX_GPIO_Init+0x14c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a3d      	ldr	r2, [pc, #244]	; (800088c <MX_GPIO_Init+0x14c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <MX_GPIO_Init+0x14c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_GPIO_Init+0x14c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a36      	ldr	r2, [pc, #216]	; (800088c <MX_GPIO_Init+0x14c>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b30      	ldr	r3, [pc, #192]	; (800088c <MX_GPIO_Init+0x14c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <MX_GPIO_Init+0x14c>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_GPIO_Init+0x14c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a28      	ldr	r2, [pc, #160]	; (800088c <MX_GPIO_Init+0x14c>)
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f244 0181 	movw	r1, #16513	; 0x4081
 8000804:	4822      	ldr	r0, [pc, #136]	; (8000890 <MX_GPIO_Init+0x150>)
 8000806:	f002 f863 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	4821      	ldr	r0, [pc, #132]	; (8000894 <MX_GPIO_Init+0x154>)
 8000810:	f002 f85e 	bl	80028d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	481b      	ldr	r0, [pc, #108]	; (8000898 <MX_GPIO_Init+0x158>)
 800082c:	f001 fea4 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000830:	f244 0381 	movw	r3, #16513	; 0x4081
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_GPIO_Init+0x150>)
 800084a:	f001 fe95 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x154>)
 8000866:	f001 fe87 	bl	8002578 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0x154>)
 800087e:	f001 fe7b 	bl	8002578 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40021800 	.word	0x40021800
 8000898:	40020800 	.word	0x40020800

0800089c <ethernetif_notify_conn_changed>:

/* USER CODE BEGIN 4 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	/* NOTE : This is function could be implemented in user file
	 when the callback is needed,
	 */
	if (netif_is_link_up(netif))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00b      	beq.n	80008ce <ethernetif_notify_conn_changed+0x32>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2101      	movs	r1, #1
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <ethernetif_notify_conn_changed+0x50>)
 80008bc:	f002 f808 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <ethernetif_notify_conn_changed+0x50>)
 80008c8:	f002 f802 	bl	80028d0 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	}
}
 80008cc:	e00a      	b.n	80008e4 <ethernetif_notify_conn_changed+0x48>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2101      	movs	r1, #1
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <ethernetif_notify_conn_changed+0x50>)
 80008d4:	f001 fffc 	bl	80028d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008de:	4803      	ldr	r0, [pc, #12]	; (80008ec <ethernetif_notify_conn_changed+0x50>)
 80008e0:	f001 fff6 	bl	80028d0 <HAL_GPIO_WritePin>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40020400 	.word	0x40020400

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_UART_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12c      	bne.n	80009c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_UART_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009b8:	2307      	movs	r3, #7
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_UART_MspInit+0x8c>)
 80009c4:	f001 fdd8 	bl	8002578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40004800 	.word	0x40004800
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020c00 	.word	0x40020c00

080009dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009fc:	d13f      	bne.n	8000a7e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a20      	ldr	r2, [pc, #128]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4815      	ldr	r0, [pc, #84]	; (8000a8c <HAL_PCD_MspInit+0xb0>)
 8000a38:	f001 fd9e 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480e      	ldr	r0, [pc, #56]	; (8000a8c <HAL_PCD_MspInit+0xb0>)
 8000a52:	f001 fd91 	bl	8002578 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	6353      	str	r3, [r2, #52]	; 0x34
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 fb20 	bl	8001120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return 1;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_kill>:

int _kill(int pid, int sig)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <_kill+0x20>)
 8000b00:	2216      	movs	r2, #22
 8000b02:	601a      	str	r2, [r3, #0]
  return -1;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	20008a14 	.word	0x20008a14

08000b18 <_exit>:

void _exit (int status)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ffe5 	bl	8000af4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b2a:	e7fe      	b.n	8000b2a <_exit+0x12>

08000b2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e00a      	b.n	8000b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b3e:	f3af 8000 	nop.w
 8000b42:	4601      	mov	r1, r0
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <_read+0x12>
  }

  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e009      	b.n	8000b8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf1      	blt.n	8000b78 <_write+0x12>
  }
  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:

int _close(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:

int _isatty(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d205      	bcs.n	8000c44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <_sbrk+0x6c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	371c      	adds	r7, #28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	20030000 	.word	0x20030000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200005d0 	.word	0x200005d0
 8000c70:	20008a28 	.word	0x20008a28
 8000c74:	20008a14 	.word	0x20008a14

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <udpServer_init>:
4. Process the datagram packet and send a reply to client.
5. Go back to Step 3.
*/

void udpServer_init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
	// UDP Control Block structure
   struct udp_pcb *upcb;
   err_t err;

   /* 1. Create a new UDP control block  */
   upcb = udp_new();
 8000ca2:	f00b fd09 	bl	800c6b8 <udp_new>
 8000ca6:	60f8      	str	r0, [r7, #12]

   /* 2. Bind the upcb to the local port */
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 1, 194);
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <udpServer_init+0x44>)
 8000caa:	607b      	str	r3, [r7, #4]

   err = udp_bind(upcb, &myIPADDR, 22);  // 22 is the server UDP port
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2216      	movs	r2, #22
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f00b fb80 	bl	800c3b8 <udp_bind>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	72fb      	strb	r3, [r7, #11]


   /* 3. Set a receive callback for the upcb */
   if(err == ERR_OK)
 8000cbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d105      	bne.n	8000cd0 <udpServer_init+0x34>
   {
	   udp_recv(upcb, udp_receive_callback, NULL);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4907      	ldr	r1, [pc, #28]	; (8000ce4 <udpServer_init+0x48>)
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f00b fc93 	bl	800c5f4 <udp_recv>
   }
   else
   {
	   udp_remove(upcb);
   }
}
 8000cce:	e002      	b.n	8000cd6 <udpServer_init+0x3a>
	   udp_remove(upcb);
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f00b fcaf 	bl	800c634 <udp_remove>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	c201a8c0 	.word	0xc201a8c0
 8000ce4:	08000ce9 	.word	0x08000ce9

08000ce8 <udp_receive_callback>:

// udp_receive_callback will be called, when the client sends some data to the server
/* 4. Process the datagram packet and send a reply to client. */

void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0a0      	sub	sp, #128	; 0x80
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	603b      	str	r3, [r7, #0]
	// make for data transport
	struct pbuf *txBuf;

	/* Get the IP of the Client */
	// change IP address from integer to char*
	char *remoteIP = ipaddr_ntoa(addr);
 8000cf6:	6838      	ldr	r0, [r7, #0]
 8000cf8:	f00d f8d8 	bl	800deac <ip4addr_ntoa>
 8000cfc:	67f8      	str	r0, [r7, #124]	; 0x7c

	char buf[100];


	int len = sprintf (buf,"Hello %s From UDP SERVER\n", (char*)p->payload);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4917      	ldr	r1, [pc, #92]	; (8000d64 <udp_receive_callback+0x7c>)
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f00e f985 	bl	800f018 <siprintf>
 8000d0e:	67b8      	str	r0, [r7, #120]	; 0x78

	/* allocate pbuf from RAM*/
	txBuf = pbuf_alloc(PBUF_TRANSPORT,len, PBUF_RAM);
 8000d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d18:	4619      	mov	r1, r3
 8000d1a:	2036      	movs	r0, #54	; 0x36
 8000d1c:	f004 fee6 	bl	8005aec <pbuf_alloc>
 8000d20:	6778      	str	r0, [r7, #116]	; 0x74

	/* copy the data into the buffer  */
	pbuf_take(txBuf, buf, len);
 8000d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	f107 0310 	add.w	r3, r7, #16
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000d2e:	f005 fc2d 	bl	800658c <pbuf_take>

	/* Connect to the remote client */
	udp_connect(upcb, addr, port);
 8000d32:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8000d36:	461a      	mov	r2, r3
 8000d38:	6839      	ldr	r1, [r7, #0]
 8000d3a:	68b8      	ldr	r0, [r7, #8]
 8000d3c:	f00b fbc4 	bl	800c4c8 <udp_connect>

	/* Send a Reply to the Client */
	udp_send(upcb, txBuf);
 8000d40:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f00b f94e 	bl	800bfe4 <udp_send>

	/* free the UDP connection, so we can accept new clients */
	udp_disconnect(upcb);
 8000d48:	68b8      	ldr	r0, [r7, #8]
 8000d4a:	f00b fc2b 	bl	800c5a4 <udp_disconnect>

	/* Free the p_tx buffer */
	pbuf_free(txBuf);
 8000d4e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000d50:	f005 f9b0 	bl	80060b4 <pbuf_free>

	/* Free the p buffer */
	pbuf_free(p);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f005 f9ad 	bl	80060b4 <pbuf_free>
}
 8000d5a:	bf00      	nop
 8000d5c:	3780      	adds	r7, #128	; 0x80
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	080101c0 	.word	0x080101c0

08000d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d6c:	f7ff ff84 	bl	8000c78 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d70:	480c      	ldr	r0, [pc, #48]	; (8000da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d72:	490d      	ldr	r1, [pc, #52]	; (8000da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d78:	e002      	b.n	8000d80 <LoopCopyDataInit>

08000d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7e:	3304      	adds	r3, #4

08000d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d84:	d3f9      	bcc.n	8000d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d88:	4c0a      	ldr	r4, [pc, #40]	; (8000db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d8c:	e001      	b.n	8000d92 <LoopFillZerobss>

08000d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d90:	3204      	adds	r2, #4

08000d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d94:	d3fb      	bcc.n	8000d8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d96:	f00e fa1b 	bl	800f1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9a:	f7ff fbf7 	bl	800058c <main>
  bx  lr    
 8000d9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000da0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000dac:	08012db0 	.word	0x08012db0
  ldr r2, =_sbss
 8000db0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000db4:	20008a24 	.word	0x20008a24

08000db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db8:	e7fe      	b.n	8000db8 <ADC_IRQHandler>

08000dba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00b      	beq.n	8000de2 <LAN8742_RegisterBusIO+0x28>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d007      	beq.n	8000de2 <LAN8742_RegisterBusIO+0x28>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <LAN8742_RegisterBusIO+0x28>
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e014      	b.n	8000e12 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d17c      	bne.n	8000f38 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2220      	movs	r2, #32
 8000e50:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e01c      	b.n	8000e92 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	f107 0208 	add.w	r2, r7, #8
 8000e60:	2112      	movs	r1, #18
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	4798      	blx	r3
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	da03      	bge.n	8000e74 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000e6c:	f06f 0304 	mvn.w	r3, #4
 8000e70:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000e72:	e00b      	b.n	8000e8c <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	f003 031f 	and.w	r3, r3, #31
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d105      	bne.n	8000e8c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
         break;
 8000e8a:	e005      	b.n	8000e98 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2b1f      	cmp	r3, #31
 8000e96:	d9df      	bls.n	8000e58 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b1f      	cmp	r3, #31
 8000e9e:	d902      	bls.n	8000ea6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ea0:	f06f 0302 	mvn.w	r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d145      	bne.n	8000f38 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	687a      	ldr	r2, [r7, #4]
 8000eb2:	6810      	ldr	r0, [r2, #0]
 8000eb4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4798      	blx	r3
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db37      	blt.n	8000f32 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6810      	ldr	r0, [r2, #0]
 8000eca:	f107 0208 	add.w	r2, r7, #8
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4798      	blx	r3
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db28      	blt.n	8000f2a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4798      	blx	r3
 8000ede:	4603      	mov	r3, r0
 8000ee0:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000ee2:	e01c      	b.n	8000f1e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4798      	blx	r3
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ef6:	d80e      	bhi.n	8000f16 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	695b      	ldr	r3, [r3, #20]
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6810      	ldr	r0, [r2, #0]
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	2100      	movs	r1, #0
 8000f06:	4798      	blx	r3
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	da07      	bge.n	8000f1e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000f0e:	f06f 0304 	mvn.w	r3, #4
 8000f12:	613b      	str	r3, [r7, #16]
                 break;
 8000f14:	e010      	b.n	8000f38 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f16:	f06f 0301 	mvn.w	r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
               break;
 8000f1c:	e00c      	b.n	8000f38 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1dd      	bne.n	8000ee4 <LAN8742_Init+0xc6>
 8000f28:	e006      	b.n	8000f38 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000f2a:	f06f 0304 	mvn.w	r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	e002      	b.n	8000f38 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000f32:	f06f 0303 	mvn.w	r3, #3
 8000f36:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d112      	bne.n	8000f64 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	4798      	blx	r3
 8000f44:	4603      	mov	r3, r0
 8000f46:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000f48:	bf00      	nop
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	4798      	blx	r3
 8000f50:	4603      	mov	r3, r0
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f5c:	d9f5      	bls.n	8000f4a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000f64:	693b      	ldr	r3, [r7, #16]
 }
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b084      	sub	sp, #16
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	6810      	ldr	r0, [r2, #0]
 8000f82:	f107 020c 	add.w	r2, r7, #12
 8000f86:	2101      	movs	r1, #1
 8000f88:	4798      	blx	r3
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	da02      	bge.n	8000f96 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f90:	f06f 0304 	mvn.w	r3, #4
 8000f94:	e06e      	b.n	8001074 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	695b      	ldr	r3, [r3, #20]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	6810      	ldr	r0, [r2, #0]
 8000f9e:	f107 020c 	add.w	r2, r7, #12
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4798      	blx	r3
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da02      	bge.n	8000fb2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fac:	f06f 0304 	mvn.w	r3, #4
 8000fb0:	e060      	b.n	8001074 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e059      	b.n	8001074 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	6810      	ldr	r0, [r2, #0]
 8000fc8:	f107 020c 	add.w	r2, r7, #12
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4798      	blx	r3
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	da02      	bge.n	8000fdc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fd6:	f06f 0304 	mvn.w	r3, #4
 8000fda:	e04b      	b.n	8001074 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d11b      	bne.n	800101e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d006      	beq.n	8000ffe <LAN8742_GetLinkState+0x90>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e03a      	b.n	8001074 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001008:	2303      	movs	r3, #3
 800100a:	e033      	b.n	8001074 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001016:	2304      	movs	r3, #4
 8001018:	e02c      	b.n	8001074 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800101a:	2305      	movs	r3, #5
 800101c:	e02a      	b.n	8001074 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6810      	ldr	r0, [r2, #0]
 8001026:	f107 020c 	add.w	r2, r7, #12
 800102a:	211f      	movs	r1, #31
 800102c:	4798      	blx	r3
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	da02      	bge.n	800103a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001034:	f06f 0304 	mvn.w	r3, #4
 8001038:	e01c      	b.n	8001074 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001044:	2306      	movs	r3, #6
 8001046:	e015      	b.n	8001074 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 031c 	and.w	r3, r3, #28
 800104e:	2b18      	cmp	r3, #24
 8001050:	d101      	bne.n	8001056 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001052:	2302      	movs	r3, #2
 8001054:	e00e      	b.n	8001074 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f003 031c 	and.w	r3, r3, #28
 800105c:	2b08      	cmp	r3, #8
 800105e:	d101      	bne.n	8001064 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001060:	2303      	movs	r3, #3
 8001062:	e007      	b.n	8001074 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 031c 	and.w	r3, r3, #28
 800106a:	2b14      	cmp	r3, #20
 800106c:	d101      	bne.n	8001072 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800106e:	2304      	movs	r3, #4
 8001070:	e000      	b.n	8001074 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001072:	2305      	movs	r3, #5
    }
  }
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_Init+0x40>)
 8001086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800108a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_Init+0x40>)
 8001092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_Init+0x40>)
 800109e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f931 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f808 	bl	80010c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b0:	f7ff fc24 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b4:	2300      	movs	r3, #0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x54>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_InitTick+0x58>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	4619      	mov	r1, r3
 80010d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010da:	fbb2 f3f3 	udiv	r3, r2, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 f93b 	bl	800135a <HAL_SYSTICK_Config>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00e      	b.n	800110c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d80a      	bhi.n	800110a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f911 	bl	8001322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001100:	4a06      	ldr	r2, [pc, #24]	; (800111c <HAL_InitTick+0x5c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	e000      	b.n	800110c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000000 	.word	0x20000000
 8001118:	20000008 	.word	0x20000008
 800111c:	20000004 	.word	0x20000004

08001120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x20>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	461a      	mov	r2, r3
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x24>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4413      	add	r3, r2
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_IncTick+0x24>)
 8001132:	6013      	str	r3, [r2, #0]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000008 	.word	0x20000008
 8001144:	200005d4 	.word	0x200005d4

08001148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return uwTick;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_GetTick+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	200005d4 	.word	0x200005d4

08001160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001168:	f7ff ffee 	bl	8001148 <HAL_GetTick>
 800116c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001178:	d005      	beq.n	8001186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_Delay+0x44>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4413      	add	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001186:	bf00      	nop
 8001188:	f7ff ffde 	bl	8001148 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d8f7      	bhi.n	8001188 <HAL_Delay+0x28>
  {
  }
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000008 	.word	0x20000008

080011a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c4:	4013      	ands	r3, r2
 80011c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011da:	4a04      	ldr	r2, [pc, #16]	; (80011ec <__NVIC_SetPriorityGrouping+0x44>)
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	60d3      	str	r3, [r2, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <__NVIC_GetPriorityGrouping+0x18>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	f003 0307 	and.w	r3, r3, #7
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff47 	bl	80011a8 <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff5c 	bl	80011f0 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff8e 	bl	8001260 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5d 	bl	800120c <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffb0 	bl	80012c8 <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e06c      	b.n	8001460 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800138c:	2b00      	cmp	r3, #0
 800138e:	d106      	bne.n	800139e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2223      	movs	r2, #35	; 0x23
 8001394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f003 f91d 	bl	80045d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <HAL_ETH_Init+0xf4>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a30      	ldr	r2, [pc, #192]	; (8001468 <HAL_ETH_Init+0xf4>)
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <HAL_ETH_Init+0xf4>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <HAL_ETH_Init+0xf8>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4a2b      	ldr	r2, [pc, #172]	; (800146c <HAL_ETH_Init+0xf8>)
 80013c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_ETH_Init+0xf8>)
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	4927      	ldr	r1, [pc, #156]	; (800146c <HAL_ETH_Init+0xf8>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <HAL_ETH_Init+0xf8>)
 80013d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013f0:	f7ff feaa 	bl	8001148 <HAL_GetTick>
 80013f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013f6:	e011      	b.n	800141c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013f8:	f7ff fea6 	bl	8001148 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001406:	d909      	bls.n	800141c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2204      	movs	r2, #4
 800140c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	22e0      	movs	r2, #224	; 0xe0
 8001414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e021      	b.n	8001460 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e4      	bne.n	80013f8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fdfc 	bl	800202c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fea3 	bl	8002180 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fef9 	bl	8002232 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	461a      	mov	r2, r3
 8001446:	2100      	movs	r1, #0
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 fe61 	bl	8002110 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2210      	movs	r2, #16
 800145a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800

08001470 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800147e:	2b10      	cmp	r3, #16
 8001480:	d150      	bne.n	8001524 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2223      	movs	r2, #35	; 0x23
 8001486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2204      	movs	r2, #4
 800148e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 f9fd 	bl	8001890 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0208 	orr.w	r2, r2, #8
 80014a4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7ff fe56 	bl	8001160 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0204 	orr.w	r2, r2, #4
 80014ca:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f7ff fe43 	bl	8001160 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 fc42 	bl	8001d6c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014fe:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001516:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2223      	movs	r2, #35	; 0x23
 800151c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	e000      	b.n	8001526 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
  }
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800153c:	2b23      	cmp	r3, #35	; 0x23
 800153e:	d14a      	bne.n	80015d6 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2223      	movs	r2, #35	; 0x23
 8001544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800155a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800155e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	f023 0302 	bic.w	r3, r3, #2
 8001572:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001576:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0204 	bic.w	r2, r2, #4
 8001586:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff fde5 	bl	8001160 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fbe4 	bl	8001d6c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 0208 	bic.w	r2, r2, #8
 80015b2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff fdcf 	bl	8001160 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2210      	movs	r2, #16
 80015ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
  }
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d109      	bne.n	8001606 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07c      	b.n	8001700 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800160c:	2b23      	cmp	r3, #35	; 0x23
 800160e:	d176      	bne.n	80016fe <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001610:	2200      	movs	r2, #0
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 fe79 	bl	800230c <ETH_Prepare_Tx_Descriptors>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d009      	beq.n	8001634 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001626:	f043 0202 	orr.w	r2, r3, #2
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e065      	b.n	8001700 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001634:	f3bf 8f4f 	dsb	sy
}
 8001638:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3206      	adds	r2, #6
 8001642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001646:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	629a      	str	r2, [r3, #40]	; 0x28
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	2b03      	cmp	r3, #3
 8001658:	d904      	bls.n	8001664 <HAL_ETH_Transmit+0x84>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	1f1a      	subs	r2, r3, #4
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3106      	adds	r1, #6
 8001670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001678:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800167a:	f7ff fd65 	bl	8001148 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001680:	e037      	b.n	80016f2 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d011      	beq.n	80016b8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	f043 0208 	orr.w	r2, r3, #8
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e023      	b.n	8001700 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016be:	d018      	beq.n	80016f2 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016c0:	f7ff fd42 	bl	8001148 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d302      	bcc.n	80016d6 <HAL_ETH_Transmit+0xf6>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016dc:	f043 0204 	orr.w	r2, r3, #4
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80016ec:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e006      	b.n	8001700 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dbc3      	blt.n	8001682 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
  }
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d109      	bne.n	8001734 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	f043 0201 	orr.w	r2, r3, #1
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0a8      	b.n	8001886 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800173a:	2b23      	cmp	r3, #35	; 0x23
 800173c:	d001      	beq.n	8001742 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0a1      	b.n	8001886 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	3212      	adds	r2, #18
 800174e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001758:	f1c3 0304 	rsb	r3, r3, #4
 800175c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800175e:	e06a      	b.n	8001836 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	699a      	ldr	r2, [r3, #24]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001784:	2b00      	cmp	r3, #0
 8001786:	d103      	bne.n	8001790 <HAL_ETH_ReadData+0x88>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d040      	beq.n	8001812 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00c      	beq.n	80017d4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	0c1b      	lsrs	r3, r3, #16
 80017c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017c4:	3b04      	subs	r3, #4
 80017c6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017ec:	461a      	mov	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	f003 f8c1 	bl	8004978 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	441a      	add	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3301      	adds	r3, #1
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d902      	bls.n	8001824 <HAL_ETH_ReadData+0x11c>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b04      	subs	r3, #4
 8001822:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	3212      	adds	r2, #18
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800183a:	2b00      	cmp	r3, #0
 800183c:	db06      	blt.n	800184c <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800183e:	697a      	ldr	r2, [r7, #20]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	429a      	cmp	r2, r3
 8001844:	d202      	bcs.n	800184c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d089      	beq.n	8001760 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	441a      	add	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f815 	bl	8001890 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	e000      	b.n	8001886 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800189c:	2301      	movs	r3, #1
 800189e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018a4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	3212      	adds	r2, #18
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80018b8:	e03d      	b.n	8001936 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d112      	bne.n	80018e8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 f826 	bl	8004918 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	74fb      	strb	r3, [r7, #19]
 80018d6:	e007      	b.n	80018e8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	461a      	mov	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	461a      	mov	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80018e8:	7cfb      	ldrb	r3, [r7, #19]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d023      	beq.n	8001936 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d103      	bne.n	80018fe <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4a24      	ldr	r2, [pc, #144]	; (800198c <ETH_UpdateDescriptor+0xfc>)
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	e003      	b.n	8001906 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001904:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d902      	bls.n	8001924 <ETH_UpdateDescriptor+0x94>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b04      	subs	r3, #4
 8001922:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	3212      	adds	r2, #18
 800192a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	3b01      	subs	r3, #1
 8001934:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <ETH_UpdateDescriptor+0xb2>
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1bb      	bne.n	80018ba <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	429a      	cmp	r2, r3
 800194a:	d01a      	beq.n	8001982 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001956:	f3bf 8f5f 	dmb	sy
}
 800195a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6919      	ldr	r1, [r3, #16]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4613      	mov	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4413      	add	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	18ca      	adds	r2, r1, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001974:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	80004600 	.word	0x80004600

08001990 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 031c 	and.w	r3, r3, #28
 80019ac:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	02db      	lsls	r3, r3, #11
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f023 0302 	bic.w	r3, r3, #2
 80019ce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80019e0:	f7ff fbb2 	bl	8001148 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019e6:	e00d      	b.n	8001a04 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80019e8:	f7ff fbae 	bl	8001148 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f6:	d301      	bcc.n	80019fc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e010      	b.n	8001a1e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ec      	bne.n	80019e8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b086      	sub	sp, #24
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	607a      	str	r2, [r7, #4]
 8001a32:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f003 031c 	and.w	r3, r3, #28
 8001a42:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	02db      	lsls	r3, r3, #11
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	019b      	lsls	r3, r3, #6
 8001a54:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fb62 	bl	8001148 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a86:	e00d      	b.n	8001aa4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001a88:	f7ff fb5e 	bl	8001148 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a96:	d301      	bcc.n	8001a9c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e009      	b.n	8001ab0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ec      	bne.n	8001a88 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0d9      	b.n	8001c80 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	bf14      	ite	ne
 8001b20:	2301      	movne	r3, #1
 8001b22:	2300      	moveq	r3, #0
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf0c      	ite	eq
 8001b3a:	2301      	moveq	r3, #1
 8001b3c:	2300      	movne	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf14      	ite	ne
 8001b54:	2301      	movne	r3, #1
 8001b56:	2300      	moveq	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf0c      	ite	eq
 8001b8a:	2301      	moveq	r3, #1
 8001b8c:	2300      	movne	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bf14      	ite	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	2300      	moveq	r3, #0
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf14      	ite	ne
 8001be6:	2301      	movne	r3, #1
 8001be8:	2300      	moveq	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf14      	ite	ne
 8001c00:	2301      	movne	r3, #1
 8001c02:	2300      	moveq	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf14      	ite	ne
 8001c54:	2301      	movne	r3, #1
 8001c56:	2300      	moveq	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	bf14      	ite	ne
 8001c70:	2301      	movne	r3, #1
 8001c72:	2300      	moveq	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e00b      	b.n	8001cb8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d105      	bne.n	8001cb6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001caa:	6839      	ldr	r1, [r7, #0]
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f883 	bl	8001db8 <ETH_SetMACConfig>

    return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e000      	b.n	8001cb8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
  }
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 031c 	bic.w	r3, r3, #28
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cd8:	f001 fb86 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8001cdc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4a1d      	ldr	r2, [pc, #116]	; (8001d58 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d908      	bls.n	8001cf8 <HAL_ETH_SetMDIOClockRange+0x38>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d804      	bhi.n	8001cf8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e027      	b.n	8001d48 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4a18      	ldr	r2, [pc, #96]	; (8001d5c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d908      	bls.n	8001d12 <HAL_ETH_SetMDIOClockRange+0x52>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4a17      	ldr	r2, [pc, #92]	; (8001d60 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d204      	bcs.n	8001d12 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f043 030c 	orr.w	r3, r3, #12
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e01a      	b.n	8001d48 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d303      	bcc.n	8001d22 <HAL_ETH_SetMDIOClockRange+0x62>
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	4a11      	ldr	r2, [pc, #68]	; (8001d64 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d911      	bls.n	8001d46 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d908      	bls.n	8001d3c <HAL_ETH_SetMDIOClockRange+0x7c>
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d804      	bhi.n	8001d3c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e005      	b.n	8001d48 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f043 0310 	orr.w	r3, r3, #16
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e000      	b.n	8001d48 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001d46:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	01312cff 	.word	0x01312cff
 8001d5c:	02160ebf 	.word	0x02160ebf
 8001d60:	03938700 	.word	0x03938700
 8001d64:	05f5e0ff 	.word	0x05f5e0ff
 8001d68:	08f0d17f 	.word	0x08f0d17f

08001d6c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6812      	ldr	r2, [r2, #0]
 8001d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d8e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7ff f9df 	bl	8001160 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001dac:	6193      	str	r3, [r2, #24]
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4b51      	ldr	r3, [pc, #324]	; (8001f14 <ETH_SetMACConfig+0x15c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	7c1b      	ldrb	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <ETH_SetMACConfig+0x28>
 8001dda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001dde:	e000      	b.n	8001de2 <ETH_SetMACConfig+0x2a>
 8001de0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7c5b      	ldrb	r3, [r3, #17]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <ETH_SetMACConfig+0x38>
 8001dea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dee:	e000      	b.n	8001df2 <ETH_SetMACConfig+0x3a>
 8001df0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001df2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001df8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	7fdb      	ldrb	r3, [r3, #31]
 8001dfe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e00:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	7f92      	ldrb	r2, [r2, #30]
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	d102      	bne.n	8001e16 <ETH_SetMACConfig+0x5e>
 8001e10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e14:	e000      	b.n	8001e18 <ETH_SetMACConfig+0x60>
 8001e16:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	7f1b      	ldrb	r3, [r3, #28]
 8001e1e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e20:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	791b      	ldrb	r3, [r3, #4]
 8001e2c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001e2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001e36:	2a00      	cmp	r2, #0
 8001e38:	d102      	bne.n	8001e40 <ETH_SetMACConfig+0x88>
 8001e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3e:	e000      	b.n	8001e42 <ETH_SetMACConfig+0x8a>
 8001e40:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	7bdb      	ldrb	r3, [r3, #15]
 8001e48:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e4a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e58:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff f974 	bl	8001160 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e8e:	4013      	ands	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e96:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e9e:	2a00      	cmp	r2, #0
 8001ea0:	d101      	bne.n	8001ea6 <ETH_SetMACConfig+0xee>
 8001ea2:	2280      	movs	r2, #128	; 0x80
 8001ea4:	e000      	b.n	8001ea8 <ETH_SetMACConfig+0xf0>
 8001ea6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ea8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001eae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001eb6:	2a01      	cmp	r2, #1
 8001eb8:	d101      	bne.n	8001ebe <ETH_SetMACConfig+0x106>
 8001eba:	2208      	movs	r2, #8
 8001ebc:	e000      	b.n	8001ec0 <ETH_SetMACConfig+0x108>
 8001ebe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001ec0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001ec8:	2a01      	cmp	r2, #1
 8001eca:	d101      	bne.n	8001ed0 <ETH_SetMACConfig+0x118>
 8001ecc:	2204      	movs	r2, #4
 8001ece:	e000      	b.n	8001ed2 <ETH_SetMACConfig+0x11a>
 8001ed0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001ed2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001eda:	2a01      	cmp	r2, #1
 8001edc:	d101      	bne.n	8001ee2 <ETH_SetMACConfig+0x12a>
 8001ede:	2202      	movs	r2, #2
 8001ee0:	e000      	b.n	8001ee4 <ETH_SetMACConfig+0x12c>
 8001ee2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7ff f92f 	bl	8001160 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	ff20810f 	.word	0xff20810f

08001f18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <ETH_SetDMAConfig+0x110>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	7b1b      	ldrb	r3, [r3, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d102      	bne.n	8001f44 <ETH_SetDMAConfig+0x2c>
 8001f3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f42:	e000      	b.n	8001f46 <ETH_SetDMAConfig+0x2e>
 8001f44:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	7b5b      	ldrb	r3, [r3, #13]
 8001f4a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f4c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	7f52      	ldrb	r2, [r2, #29]
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	d102      	bne.n	8001f5c <ETH_SetDMAConfig+0x44>
 8001f56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f5a:	e000      	b.n	8001f5e <ETH_SetDMAConfig+0x46>
 8001f5c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f5e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	7b9b      	ldrb	r3, [r3, #14]
 8001f64:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f66:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f6c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7f1b      	ldrb	r3, [r3, #28]
 8001f72:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	7f9b      	ldrb	r3, [r3, #30]
 8001f7a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f7c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f82:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f8a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff f8d6 	bl	8001160 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	791b      	ldrb	r3, [r3, #4]
 8001fc6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001fcc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001fd2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001fd8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fe0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001fe2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ff0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ffa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ffe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800200c:	2001      	movs	r0, #1
 800200e:	f7ff f8a7 	bl	8001160 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6013      	str	r3, [r2, #0]
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	f8de3f23 	.word	0xf8de3f23

0800202c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b0a6      	sub	sp, #152	; 0x98
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800203a:	2301      	movs	r3, #1
 800203c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002040:	2300      	movs	r3, #0
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002068:	2300      	movs	r3, #0
 800206a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002072:	2300      	movs	r3, #0
 8002074:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002082:	2300      	movs	r3, #0
 8002084:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800208e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002094:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002098:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fe86 	bl	8001db8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80020ac:	2301      	movs	r3, #1
 80020ae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80020b0:	2301      	movs	r3, #1
 80020b2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80020d2:	2301      	movs	r3, #1
 80020d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020d8:	2301      	movs	r3, #1
 80020da:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020e0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020ee:	2301      	movs	r3, #1
 80020f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	4619      	mov	r1, r3
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff08 	bl	8001f18 <ETH_SetDMAConfig>
}
 8002108:	bf00      	nop
 800210a:	3798      	adds	r7, #152	; 0x98
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3305      	adds	r3, #5
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	021b      	lsls	r3, r3, #8
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	3204      	adds	r2, #4
 8002128:	7812      	ldrb	r2, [r2, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800212e:	68ba      	ldr	r2, [r7, #8]
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <ETH_MACAddressConfig+0x68>)
 8002132:	4413      	add	r3, r2
 8002134:	461a      	mov	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3303      	adds	r3, #3
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	061a      	lsls	r2, r3, #24
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3302      	adds	r3, #2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3301      	adds	r3, #1
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	4313      	orrs	r3, r2
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <ETH_MACAddressConfig+0x6c>)
 8002162:	4413      	add	r3, r2
 8002164:	461a      	mov	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	6013      	str	r3, [r2, #0]
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40028040 	.word	0x40028040
 800217c:	40028044 	.word	0x40028044

08002180 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002188:	2300      	movs	r3, #0
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e03e      	b.n	800220c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68d9      	ldr	r1, [r3, #12]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2200      	movs	r2, #0
 80021aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	3206      	adds	r2, #6
 80021c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d80c      	bhi.n	80021f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68d9      	ldr	r1, [r3, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	e004      	b.n	80021fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3301      	adds	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d9bd      	bls.n	800218e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002224:	611a      	str	r2, [r3, #16]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e046      	b.n	80022ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6919      	ldr	r1, [r3, #16]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2200      	movs	r2, #0
 800225c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2200      	movs	r2, #0
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800227c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002284:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	3212      	adds	r2, #18
 800229a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d80c      	bhi.n	80022be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6919      	ldr	r1, [r3, #16]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	461a      	mov	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	60da      	str	r2, [r3, #12]
 80022bc:	e004      	b.n	80022c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	461a      	mov	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3301      	adds	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d9b5      	bls.n	8002240 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fe:	60da      	str	r2, [r3, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800230c:	b480      	push	{r7}
 800230e:	b08d      	sub	sp, #52	; 0x34
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	3318      	adds	r3, #24
 800231c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002336:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800234a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800234e:	d007      	beq.n	8002360 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002354:	3304      	adds	r3, #4
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002360:	2302      	movs	r3, #2
 8002362:	e103      	b.n	800256c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	3301      	adds	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800237c:	f023 031f 	bic.w	r3, r3, #31
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	6852      	ldr	r2, [r2, #4]
 8002384:	431a      	orrs	r2, r3
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	431a      	orrs	r2, r3
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80023ea:	f3bf 8f5f 	dmb	sy
}
 80023ee:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023f8:	6a3b      	ldr	r3, [r7, #32]
 80023fa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80023fc:	e084      	b.n	8002508 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e005      	b.n	800242a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	3301      	adds	r3, #1
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	2b03      	cmp	r3, #3
 8002434:	d902      	bls.n	800243c <ETH_Prepare_Tx_Descriptors+0x130>
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	3b04      	subs	r3, #4
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002444:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800245a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800245e:	d007      	beq.n	8002470 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	3304      	adds	r3, #4
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d029      	beq.n	80024c4 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800247c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
 8002482:	e019      	b.n	80024b8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002484:	f3bf 8f5f 	dmb	sy
}
 8002488:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	3301      	adds	r3, #1
 800249a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d902      	bls.n	80024a8 <ETH_Prepare_Tx_Descriptors+0x19c>
 80024a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a4:	3b04      	subs	r3, #4
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	3301      	adds	r3, #1
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3e1      	bcc.n	8002484 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80024c0:	2302      	movs	r3, #2
 80024c2:	e053      	b.n	800256c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	3301      	adds	r3, #1
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80024e2:	f023 031f 	bic.w	r3, r3, #31
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	6852      	ldr	r2, [r2, #4]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	3301      	adds	r3, #1
 80024f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80024f6:	f3bf 8f5f 	dmb	sy
}
 80024fa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f47f af76 	bne.w	80023fe <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e005      	b.n	8002532 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002542:	6979      	ldr	r1, [r7, #20]
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	3304      	adds	r3, #4
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002552:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002554:	b672      	cpsid	i
}
 8002556:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	1c5a      	adds	r2, r3, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002566:	b662      	cpsie	i
}
 8002568:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3734      	adds	r7, #52	; 0x34
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	e177      	b.n	8002884 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	f040 8166 	bne.w	800287e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d005      	beq.n	80025ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d130      	bne.n	800262c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002600:	2201      	movs	r2, #1
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	4013      	ands	r3, r2
 800260e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 0201 	and.w	r2, r3, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b03      	cmp	r3, #3
 8002636:	d017      	beq.n	8002668 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d123      	bne.n	80026bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3208      	adds	r2, #8
 800267c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	220f      	movs	r2, #15
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f003 0203 	and.w	r2, r3, #3
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 80c0 	beq.w	800287e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b66      	ldr	r3, [pc, #408]	; (800289c <HAL_GPIO_Init+0x324>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_GPIO_Init+0x324>)
 8002708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800270c:	6453      	str	r3, [r2, #68]	; 0x44
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_GPIO_Init+0x324>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800271a:	4a61      	ldr	r2, [pc, #388]	; (80028a0 <HAL_GPIO_Init+0x328>)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a58      	ldr	r2, [pc, #352]	; (80028a4 <HAL_GPIO_Init+0x32c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d037      	beq.n	80027b6 <HAL_GPIO_Init+0x23e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a57      	ldr	r2, [pc, #348]	; (80028a8 <HAL_GPIO_Init+0x330>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d031      	beq.n	80027b2 <HAL_GPIO_Init+0x23a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_GPIO_Init+0x334>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d02b      	beq.n	80027ae <HAL_GPIO_Init+0x236>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a55      	ldr	r2, [pc, #340]	; (80028b0 <HAL_GPIO_Init+0x338>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d025      	beq.n	80027aa <HAL_GPIO_Init+0x232>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a54      	ldr	r2, [pc, #336]	; (80028b4 <HAL_GPIO_Init+0x33c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01f      	beq.n	80027a6 <HAL_GPIO_Init+0x22e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a53      	ldr	r2, [pc, #332]	; (80028b8 <HAL_GPIO_Init+0x340>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d019      	beq.n	80027a2 <HAL_GPIO_Init+0x22a>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_GPIO_Init+0x344>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d013      	beq.n	800279e <HAL_GPIO_Init+0x226>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a51      	ldr	r2, [pc, #324]	; (80028c0 <HAL_GPIO_Init+0x348>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d00d      	beq.n	800279a <HAL_GPIO_Init+0x222>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_GPIO_Init+0x34c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <HAL_GPIO_Init+0x21e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4f      	ldr	r2, [pc, #316]	; (80028c8 <HAL_GPIO_Init+0x350>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <HAL_GPIO_Init+0x21a>
 800278e:	2309      	movs	r3, #9
 8002790:	e012      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 8002792:	230a      	movs	r3, #10
 8002794:	e010      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 8002796:	2308      	movs	r3, #8
 8002798:	e00e      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 800279a:	2307      	movs	r3, #7
 800279c:	e00c      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 800279e:	2306      	movs	r3, #6
 80027a0:	e00a      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 80027a2:	2305      	movs	r3, #5
 80027a4:	e008      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 80027a6:	2304      	movs	r3, #4
 80027a8:	e006      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 80027aa:	2303      	movs	r3, #3
 80027ac:	e004      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e002      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_GPIO_Init+0x240>
 80027b6:	2300      	movs	r3, #0
 80027b8:	69fa      	ldr	r2, [r7, #28]
 80027ba:	f002 0203 	and.w	r2, r2, #3
 80027be:	0092      	lsls	r2, r2, #2
 80027c0:	4093      	lsls	r3, r2
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027c8:	4935      	ldr	r1, [pc, #212]	; (80028a0 <HAL_GPIO_Init+0x328>)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	089b      	lsrs	r3, r3, #2
 80027ce:	3302      	adds	r3, #2
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_GPIO_Init+0x354>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	43db      	mvns	r3, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4013      	ands	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027fa:	4a34      	ldr	r2, [pc, #208]	; (80028cc <HAL_GPIO_Init+0x354>)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002800:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_GPIO_Init+0x354>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002824:	4a29      	ldr	r2, [pc, #164]	; (80028cc <HAL_GPIO_Init+0x354>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800282a:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_GPIO_Init+0x354>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800284e:	4a1f      	ldr	r2, [pc, #124]	; (80028cc <HAL_GPIO_Init+0x354>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_GPIO_Init+0x354>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002878:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_GPIO_Init+0x354>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3301      	adds	r3, #1
 8002882:	61fb      	str	r3, [r7, #28]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	f67f ae84 	bls.w	8002594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800288c:	bf00      	nop
 800288e:	bf00      	nop
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40023800 	.word	0x40023800
 80028a0:	40013800 	.word	0x40013800
 80028a4:	40020000 	.word	0x40020000
 80028a8:	40020400 	.word	0x40020400
 80028ac:	40020800 	.word	0x40020800
 80028b0:	40020c00 	.word	0x40020c00
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40021400 	.word	0x40021400
 80028bc:	40021800 	.word	0x40021800
 80028c0:	40021c00 	.word	0x40021c00
 80028c4:	40022000 	.word	0x40022000
 80028c8:	40022400 	.word	0x40022400
 80028cc:	40013c00 	.word	0x40013c00

080028d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	807b      	strh	r3, [r7, #2]
 80028dc:	4613      	mov	r3, r2
 80028de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e0:	787b      	ldrb	r3, [r7, #1]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028ec:	e003      	b.n	80028f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028ee:	887b      	ldrh	r3, [r7, #2]
 80028f0:	041a      	lsls	r2, r3, #16
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	619a      	str	r2, [r3, #24]
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af02      	add	r7, sp, #8
 8002908:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e101      	b.n	8002b18 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7fe f854 	bl	80009dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2203      	movs	r2, #3
 8002938:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002942:	d102      	bne.n	800294a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f8a6 	bl	8003aa0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7c1a      	ldrb	r2, [r3, #16]
 800295c:	f88d 2000 	strb.w	r2, [sp]
 8002960:	3304      	adds	r3, #4
 8002962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002964:	f001 f838 	bl	80039d8 <USB_CoreInit>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2202      	movs	r2, #2
 8002972:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0ce      	b.n	8002b18 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f89e 	bl	8003ac2 <USB_SetCurrentMode>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e0bf      	b.n	8002b18 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]
 800299c:	e04a      	b.n	8002a34 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	3315      	adds	r3, #21
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	4413      	add	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	3314      	adds	r3, #20
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	b298      	uxth	r0, r3
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	332e      	adds	r3, #46	; 0x2e
 80029da:	4602      	mov	r2, r0
 80029dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3318      	adds	r3, #24
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029f2:	7bfa      	ldrb	r2, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	331c      	adds	r3, #28
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	3320      	adds	r3, #32
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a1a:	7bfa      	ldrb	r2, [r7, #15]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3324      	adds	r3, #36	; 0x24
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	3301      	adds	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	791b      	ldrb	r3, [r3, #4]
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d3af      	bcc.n	800299e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	e044      	b.n	8002ace <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002a56:	2200      	movs	r2, #0
 8002a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a5a:	7bfa      	ldrb	r2, [r7, #15]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a86:	7bfa      	ldrb	r2, [r7, #15]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4413      	add	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ab2:	7bfa      	ldrb	r2, [r7, #15]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	3301      	adds	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	791b      	ldrb	r3, [r3, #4]
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d3b5      	bcc.n	8002a44 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	7c1a      	ldrb	r2, [r3, #16]
 8002ae0:	f88d 2000 	strb.w	r2, [sp]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae8:	f001 f838 	bl	8003b5c <USB_DevInit>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e00c      	b.n	8002b18 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 fa00 	bl	8003f16 <USB_DevDisconnect>

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e267      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d075      	beq.n	8002c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b3e:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d00c      	beq.n	8002b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d112      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b82      	ldr	r3, [pc, #520]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b62:	d10b      	bne.n	8002b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b64:	4b7e      	ldr	r3, [pc, #504]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d05b      	beq.n	8002c28 <HAL_RCC_OscConfig+0x108>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d157      	bne.n	8002c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e242      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b84:	d106      	bne.n	8002b94 <HAL_RCC_OscConfig+0x74>
 8002b86:	4b76      	ldr	r3, [pc, #472]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a75      	ldr	r2, [pc, #468]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e01d      	b.n	8002bd0 <HAL_RCC_OscConfig+0xb0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x98>
 8002b9e:	4b70      	ldr	r3, [pc, #448]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a6f      	ldr	r2, [pc, #444]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	4b6d      	ldr	r3, [pc, #436]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a6c      	ldr	r2, [pc, #432]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0xb0>
 8002bb8:	4b69      	ldr	r3, [pc, #420]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a68      	ldr	r2, [pc, #416]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d013      	beq.n	8002c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe fab6 	bl	8001148 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe fab2 	bl	8001148 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e207      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0xc0>
 8002bfe:	e014      	b.n	8002c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe faa2 	bl	8001148 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c08:	f7fe fa9e 	bl	8001148 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b64      	cmp	r3, #100	; 0x64
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e1f3      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1a:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0xe8>
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d063      	beq.n	8002cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c36:	4b4a      	ldr	r3, [pc, #296]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c42:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d11c      	bne.n	8002c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4e:	4b44      	ldr	r3, [pc, #272]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d116      	bne.n	8002c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5a:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d005      	beq.n	8002c72 <HAL_RCC_OscConfig+0x152>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e1c7      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c72:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4937      	ldr	r1, [pc, #220]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c86:	e03a      	b.n	8002cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d020      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c90:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <HAL_RCC_OscConfig+0x244>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe fa57 	bl	8001148 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c9e:	f7fe fa53 	bl	8001148 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e1a8      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	4925      	ldr	r1, [pc, #148]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
 8002cd0:	e015      	b.n	8002cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd2:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCC_OscConfig+0x244>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fa36 	bl	8001148 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce0:	f7fe fa32 	bl	8001148 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e187      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d036      	beq.n	8002d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d016      	beq.n	8002d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d12:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <HAL_RCC_OscConfig+0x248>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d18:	f7fe fa16 	bl	8001148 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d20:	f7fe fa12 	bl	8001148 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e167      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <HAL_RCC_OscConfig+0x240>)
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f0      	beq.n	8002d20 <HAL_RCC_OscConfig+0x200>
 8002d3e:	e01b      	b.n	8002d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d40:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_RCC_OscConfig+0x248>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d46:	f7fe f9ff 	bl	8001148 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4c:	e00e      	b.n	8002d6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4e:	f7fe f9fb 	bl	8001148 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d907      	bls.n	8002d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e150      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
 8002d60:	40023800 	.word	0x40023800
 8002d64:	42470000 	.word	0x42470000
 8002d68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	4b88      	ldr	r3, [pc, #544]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ea      	bne.n	8002d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8097 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d8a:	4b81      	ldr	r3, [pc, #516]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10f      	bne.n	8002db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	4b7d      	ldr	r3, [pc, #500]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4a7c      	ldr	r2, [pc, #496]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6413      	str	r3, [r2, #64]	; 0x40
 8002da6:	4b7a      	ldr	r3, [pc, #488]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	4b77      	ldr	r3, [pc, #476]	; (8002f94 <HAL_RCC_OscConfig+0x474>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d118      	bne.n	8002df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc2:	4b74      	ldr	r3, [pc, #464]	; (8002f94 <HAL_RCC_OscConfig+0x474>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a73      	ldr	r2, [pc, #460]	; (8002f94 <HAL_RCC_OscConfig+0x474>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dce:	f7fe f9bb 	bl	8001148 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd6:	f7fe f9b7 	bl	8001148 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e10c      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de8:	4b6a      	ldr	r3, [pc, #424]	; (8002f94 <HAL_RCC_OscConfig+0x474>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2ea>
 8002dfc:	4b64      	ldr	r3, [pc, #400]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e00:	4a63      	ldr	r2, [pc, #396]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	6713      	str	r3, [r2, #112]	; 0x70
 8002e08:	e01c      	b.n	8002e44 <HAL_RCC_OscConfig+0x324>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x30c>
 8002e12:	4b5f      	ldr	r3, [pc, #380]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a5e      	ldr	r2, [pc, #376]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1e:	4b5c      	ldr	r3, [pc, #368]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a5b      	ldr	r2, [pc, #364]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e24:	f043 0301 	orr.w	r3, r3, #1
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCC_OscConfig+0x324>
 8002e2c:	4b58      	ldr	r3, [pc, #352]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	4a57      	ldr	r2, [pc, #348]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e32:	f023 0301 	bic.w	r3, r3, #1
 8002e36:	6713      	str	r3, [r2, #112]	; 0x70
 8002e38:	4b55      	ldr	r3, [pc, #340]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	4a54      	ldr	r2, [pc, #336]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	f023 0304 	bic.w	r3, r3, #4
 8002e42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d015      	beq.n	8002e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e4c:	f7fe f97c 	bl	8001148 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e54:	f7fe f978 	bl	8001148 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e0cb      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e6a:	4b49      	ldr	r3, [pc, #292]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0ee      	beq.n	8002e54 <HAL_RCC_OscConfig+0x334>
 8002e76:	e014      	b.n	8002ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e78:	f7fe f966 	bl	8001148 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e80:	f7fe f962 	bl	8001148 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e0b5      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e96:	4b3e      	ldr	r3, [pc, #248]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1ee      	bne.n	8002e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea2:	7dfb      	ldrb	r3, [r7, #23]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea8:	4b39      	ldr	r3, [pc, #228]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	4a38      	ldr	r2, [pc, #224]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a1 	beq.w	8003000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ebe:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d05c      	beq.n	8002f84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d141      	bne.n	8002f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed2:	4b31      	ldr	r3, [pc, #196]	; (8002f98 <HAL_RCC_OscConfig+0x478>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe f936 	bl	8001148 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee0:	f7fe f932 	bl	8001148 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e087      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef2:	4b27      	ldr	r3, [pc, #156]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	019b      	lsls	r3, r3, #6
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	3b01      	subs	r3, #1
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f20:	061b      	lsls	r3, r3, #24
 8002f22:	491b      	ldr	r1, [pc, #108]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCC_OscConfig+0x478>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2e:	f7fe f90b 	bl	8001148 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fe f907 	bl	8001148 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e05c      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x416>
 8002f54:	e054      	b.n	8003000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_RCC_OscConfig+0x478>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f8f4 	bl	8001148 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe f8f0 	bl	8001148 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e045      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_RCC_OscConfig+0x470>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x444>
 8002f82:	e03d      	b.n	8003000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e038      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40007000 	.word	0x40007000
 8002f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f9c:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_RCC_OscConfig+0x4ec>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d028      	beq.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d121      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d11a      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d111      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800

08003010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0cc      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b68      	ldr	r3, [pc, #416]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d90c      	bls.n	800304c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b63      	ldr	r3, [pc, #396]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0b8      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d020      	beq.n	800309a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003064:	4b59      	ldr	r3, [pc, #356]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a58      	ldr	r2, [pc, #352]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800306e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800307c:	4b53      	ldr	r3, [pc, #332]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a52      	ldr	r2, [pc, #328]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003088:	4b50      	ldr	r3, [pc, #320]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	494d      	ldr	r1, [pc, #308]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d044      	beq.n	8003130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d119      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e07f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d003      	beq.n	80030ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ce:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e06f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030de:	4b3b      	ldr	r3, [pc, #236]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e067      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030ee:	4b37      	ldr	r3, [pc, #220]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f023 0203 	bic.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	4934      	ldr	r1, [pc, #208]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003100:	f7fe f822 	bl	8001148 <HAL_GetTick>
 8003104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003106:	e00a      	b.n	800311e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003108:	f7fe f81e 	bl	8001148 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	f241 3288 	movw	r2, #5000	; 0x1388
 8003116:	4293      	cmp	r3, r2
 8003118:	d901      	bls.n	800311e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e04f      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 020c 	and.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	429a      	cmp	r2, r3
 800312e:	d1eb      	bne.n	8003108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d20c      	bcs.n	8003158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e032      	b.n	80031be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d008      	beq.n	8003176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4916      	ldr	r1, [pc, #88]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	4313      	orrs	r3, r2
 8003174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003182:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	490e      	ldr	r1, [pc, #56]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003196:	f000 f821 	bl	80031dc <HAL_RCC_GetSysClockFreq>
 800319a:	4602      	mov	r2, r0
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	091b      	lsrs	r3, r3, #4
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	490a      	ldr	r1, [pc, #40]	; (80031d0 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	5ccb      	ldrb	r3, [r1, r3]
 80031aa:	fa22 f303 	lsr.w	r3, r2, r3
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031b2:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_RCC_ClockConfig+0x1c8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fd ff82 	bl	80010c0 <HAL_InitTick>

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023c00 	.word	0x40023c00
 80031cc:	40023800 	.word	0x40023800
 80031d0:	08012bbc 	.word	0x08012bbc
 80031d4:	20000000 	.word	0x20000000
 80031d8:	20000004 	.word	0x20000004

080031dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031e0:	b094      	sub	sp, #80	; 0x50
 80031e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	647b      	str	r3, [r7, #68]	; 0x44
 80031e8:	2300      	movs	r3, #0
 80031ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031ec:	2300      	movs	r3, #0
 80031ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031f4:	4b79      	ldr	r3, [pc, #484]	; (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d00d      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x40>
 8003200:	2b08      	cmp	r3, #8
 8003202:	f200 80e1 	bhi.w	80033c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x34>
 800320a:	2b04      	cmp	r3, #4
 800320c:	d003      	beq.n	8003216 <HAL_RCC_GetSysClockFreq+0x3a>
 800320e:	e0db      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003210:	4b73      	ldr	r3, [pc, #460]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003212:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003214:	e0db      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003216:	4b73      	ldr	r3, [pc, #460]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800321a:	e0d8      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800321c:	4b6f      	ldr	r3, [pc, #444]	; (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003224:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003226:	4b6d      	ldr	r3, [pc, #436]	; (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d063      	beq.n	80032fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003232:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	099b      	lsrs	r3, r3, #6
 8003238:	2200      	movs	r2, #0
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
 800323c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800323e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
 8003246:	2300      	movs	r3, #0
 8003248:	637b      	str	r3, [r7, #52]	; 0x34
 800324a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800324e:	4622      	mov	r2, r4
 8003250:	462b      	mov	r3, r5
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f04f 0100 	mov.w	r1, #0
 800325a:	0159      	lsls	r1, r3, #5
 800325c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003260:	0150      	lsls	r0, r2, #5
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4621      	mov	r1, r4
 8003268:	1a51      	subs	r1, r2, r1
 800326a:	6139      	str	r1, [r7, #16]
 800326c:	4629      	mov	r1, r5
 800326e:	eb63 0301 	sbc.w	r3, r3, r1
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003280:	4659      	mov	r1, fp
 8003282:	018b      	lsls	r3, r1, #6
 8003284:	4651      	mov	r1, sl
 8003286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800328a:	4651      	mov	r1, sl
 800328c:	018a      	lsls	r2, r1, #6
 800328e:	4651      	mov	r1, sl
 8003290:	ebb2 0801 	subs.w	r8, r2, r1
 8003294:	4659      	mov	r1, fp
 8003296:	eb63 0901 	sbc.w	r9, r3, r1
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ae:	4690      	mov	r8, r2
 80032b0:	4699      	mov	r9, r3
 80032b2:	4623      	mov	r3, r4
 80032b4:	eb18 0303 	adds.w	r3, r8, r3
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	462b      	mov	r3, r5
 80032bc:	eb49 0303 	adc.w	r3, r9, r3
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ce:	4629      	mov	r1, r5
 80032d0:	024b      	lsls	r3, r1, #9
 80032d2:	4621      	mov	r1, r4
 80032d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032d8:	4621      	mov	r1, r4
 80032da:	024a      	lsls	r2, r1, #9
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e2:	2200      	movs	r2, #0
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032ec:	f7fc ffd0 	bl	8000290 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4613      	mov	r3, r2
 80032f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032f8:	e058      	b.n	80033ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fa:	4b38      	ldr	r3, [pc, #224]	; (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	099b      	lsrs	r3, r3, #6
 8003300:	2200      	movs	r2, #0
 8003302:	4618      	mov	r0, r3
 8003304:	4611      	mov	r1, r2
 8003306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800330a:	623b      	str	r3, [r7, #32]
 800330c:	2300      	movs	r3, #0
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
 8003310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003314:	4642      	mov	r2, r8
 8003316:	464b      	mov	r3, r9
 8003318:	f04f 0000 	mov.w	r0, #0
 800331c:	f04f 0100 	mov.w	r1, #0
 8003320:	0159      	lsls	r1, r3, #5
 8003322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003326:	0150      	lsls	r0, r2, #5
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4641      	mov	r1, r8
 800332e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003332:	4649      	mov	r1, r9
 8003334:	eb63 0b01 	sbc.w	fp, r3, r1
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800334c:	ebb2 040a 	subs.w	r4, r2, sl
 8003350:	eb63 050b 	sbc.w	r5, r3, fp
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	00eb      	lsls	r3, r5, #3
 800335e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003362:	00e2      	lsls	r2, r4, #3
 8003364:	4614      	mov	r4, r2
 8003366:	461d      	mov	r5, r3
 8003368:	4643      	mov	r3, r8
 800336a:	18e3      	adds	r3, r4, r3
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	464b      	mov	r3, r9
 8003370:	eb45 0303 	adc.w	r3, r5, r3
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003382:	4629      	mov	r1, r5
 8003384:	028b      	lsls	r3, r1, #10
 8003386:	4621      	mov	r1, r4
 8003388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800338c:	4621      	mov	r1, r4
 800338e:	028a      	lsls	r2, r1, #10
 8003390:	4610      	mov	r0, r2
 8003392:	4619      	mov	r1, r3
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	2200      	movs	r2, #0
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	61fa      	str	r2, [r7, #28]
 800339c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033a0:	f7fc ff76 	bl	8000290 <__aeabi_uldivmod>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4613      	mov	r3, r2
 80033aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_GetSysClockFreq+0x200>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	0c1b      	lsrs	r3, r3, #16
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	3301      	adds	r3, #1
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80033bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3750      	adds	r7, #80	; 0x50
 80033d4:	46bd      	mov	sp, r7
 80033d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000000 	.word	0x20000000

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003404:	f7ff fff0 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003408:	4602      	mov	r2, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4903      	ldr	r1, [pc, #12]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003416:	5ccb      	ldrb	r3, [r1, r3]
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	08012bcc 	.word	0x08012bcc

08003428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800342c:	f7ff ffdc 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003430:	4602      	mov	r2, r0
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	0b5b      	lsrs	r3, r3, #13
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	4903      	ldr	r1, [pc, #12]	; (800344c <HAL_RCC_GetPCLK2Freq+0x24>)
 800343e:	5ccb      	ldrb	r3, [r1, r3]
 8003440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003444:	4618      	mov	r0, r3
 8003446:	bd80      	pop	{r7, pc}
 8003448:	40023800 	.word	0x40023800
 800344c:	08012bcc 	.word	0x08012bcc

08003450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e042      	b.n	80034e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fa68 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	; 0x24
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f82b 	bl	80034f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f4:	b0c0      	sub	sp, #256	; 0x100
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	68d9      	ldr	r1, [r3, #12]
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	ea40 0301 	orr.w	r3, r0, r1
 8003518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800351a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	431a      	orrs	r2, r3
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	431a      	orrs	r2, r3
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003548:	f021 010c 	bic.w	r1, r1, #12
 800354c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003556:	430b      	orrs	r3, r1
 8003558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	6999      	ldr	r1, [r3, #24]
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	ea40 0301 	orr.w	r3, r0, r1
 8003576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	4b8f      	ldr	r3, [pc, #572]	; (80037bc <UART_SetConfig+0x2cc>)
 8003580:	429a      	cmp	r2, r3
 8003582:	d005      	beq.n	8003590 <UART_SetConfig+0xa0>
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4b8d      	ldr	r3, [pc, #564]	; (80037c0 <UART_SetConfig+0x2d0>)
 800358c:	429a      	cmp	r2, r3
 800358e:	d104      	bne.n	800359a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003590:	f7ff ff4a 	bl	8003428 <HAL_RCC_GetPCLK2Freq>
 8003594:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003598:	e003      	b.n	80035a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800359a:	f7ff ff31 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 800359e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ac:	f040 810c 	bne.w	80037c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035c2:	4622      	mov	r2, r4
 80035c4:	462b      	mov	r3, r5
 80035c6:	1891      	adds	r1, r2, r2
 80035c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80035ca:	415b      	adcs	r3, r3
 80035cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035d2:	4621      	mov	r1, r4
 80035d4:	eb12 0801 	adds.w	r8, r2, r1
 80035d8:	4629      	mov	r1, r5
 80035da:	eb43 0901 	adc.w	r9, r3, r1
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035f2:	4690      	mov	r8, r2
 80035f4:	4699      	mov	r9, r3
 80035f6:	4623      	mov	r3, r4
 80035f8:	eb18 0303 	adds.w	r3, r8, r3
 80035fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003600:	462b      	mov	r3, r5
 8003602:	eb49 0303 	adc.w	r3, r9, r3
 8003606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003616:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800361a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800361e:	460b      	mov	r3, r1
 8003620:	18db      	adds	r3, r3, r3
 8003622:	653b      	str	r3, [r7, #80]	; 0x50
 8003624:	4613      	mov	r3, r2
 8003626:	eb42 0303 	adc.w	r3, r2, r3
 800362a:	657b      	str	r3, [r7, #84]	; 0x54
 800362c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003634:	f7fc fe2c 	bl	8000290 <__aeabi_uldivmod>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4b61      	ldr	r3, [pc, #388]	; (80037c4 <UART_SetConfig+0x2d4>)
 800363e:	fba3 2302 	umull	r2, r3, r3, r2
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	011c      	lsls	r4, r3, #4
 8003646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003650:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003658:	4642      	mov	r2, r8
 800365a:	464b      	mov	r3, r9
 800365c:	1891      	adds	r1, r2, r2
 800365e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003660:	415b      	adcs	r3, r3
 8003662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003668:	4641      	mov	r1, r8
 800366a:	eb12 0a01 	adds.w	sl, r2, r1
 800366e:	4649      	mov	r1, r9
 8003670:	eb43 0b01 	adc.w	fp, r3, r1
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003688:	4692      	mov	sl, r2
 800368a:	469b      	mov	fp, r3
 800368c:	4643      	mov	r3, r8
 800368e:	eb1a 0303 	adds.w	r3, sl, r3
 8003692:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003696:	464b      	mov	r3, r9
 8003698:	eb4b 0303 	adc.w	r3, fp, r3
 800369c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036b4:	460b      	mov	r3, r1
 80036b6:	18db      	adds	r3, r3, r3
 80036b8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ba:	4613      	mov	r3, r2
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	647b      	str	r3, [r7, #68]	; 0x44
 80036c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ca:	f7fc fde1 	bl	8000290 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	4b3b      	ldr	r3, [pc, #236]	; (80037c4 <UART_SetConfig+0x2d4>)
 80036d6:	fba3 2301 	umull	r2, r3, r3, r1
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2264      	movs	r2, #100	; 0x64
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	1acb      	subs	r3, r1, r3
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036ea:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <UART_SetConfig+0x2d4>)
 80036ec:	fba3 2302 	umull	r2, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036f8:	441c      	add	r4, r3
 80036fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003704:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	1891      	adds	r1, r2, r2
 8003712:	63b9      	str	r1, [r7, #56]	; 0x38
 8003714:	415b      	adcs	r3, r3
 8003716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800371c:	4641      	mov	r1, r8
 800371e:	1851      	adds	r1, r2, r1
 8003720:	6339      	str	r1, [r7, #48]	; 0x30
 8003722:	4649      	mov	r1, r9
 8003724:	414b      	adcs	r3, r1
 8003726:	637b      	str	r3, [r7, #52]	; 0x34
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003734:	4659      	mov	r1, fp
 8003736:	00cb      	lsls	r3, r1, #3
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800373e:	4651      	mov	r1, sl
 8003740:	00ca      	lsls	r2, r1, #3
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	4603      	mov	r3, r0
 8003748:	4642      	mov	r2, r8
 800374a:	189b      	adds	r3, r3, r2
 800374c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003750:	464b      	mov	r3, r9
 8003752:	460a      	mov	r2, r1
 8003754:	eb42 0303 	adc.w	r3, r2, r3
 8003758:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003768:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800376c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003770:	460b      	mov	r3, r1
 8003772:	18db      	adds	r3, r3, r3
 8003774:	62bb      	str	r3, [r7, #40]	; 0x28
 8003776:	4613      	mov	r3, r2
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800377e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003786:	f7fc fd83 	bl	8000290 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <UART_SetConfig+0x2d4>)
 8003790:	fba3 1302 	umull	r1, r3, r3, r2
 8003794:	095b      	lsrs	r3, r3, #5
 8003796:	2164      	movs	r1, #100	; 0x64
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	3332      	adds	r3, #50	; 0x32
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <UART_SetConfig+0x2d4>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	095b      	lsrs	r3, r3, #5
 80037aa:	f003 0207 	and.w	r2, r3, #7
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4422      	add	r2, r4
 80037b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b8:	e106      	b.n	80039c8 <UART_SetConfig+0x4d8>
 80037ba:	bf00      	nop
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80037d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80037d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80037da:	4642      	mov	r2, r8
 80037dc:	464b      	mov	r3, r9
 80037de:	1891      	adds	r1, r2, r2
 80037e0:	6239      	str	r1, [r7, #32]
 80037e2:	415b      	adcs	r3, r3
 80037e4:	627b      	str	r3, [r7, #36]	; 0x24
 80037e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037ea:	4641      	mov	r1, r8
 80037ec:	1854      	adds	r4, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb43 0501 	adc.w	r5, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	00eb      	lsls	r3, r5, #3
 80037fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003802:	00e2      	lsls	r2, r4, #3
 8003804:	4614      	mov	r4, r2
 8003806:	461d      	mov	r5, r3
 8003808:	4643      	mov	r3, r8
 800380a:	18e3      	adds	r3, r4, r3
 800380c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003810:	464b      	mov	r3, r9
 8003812:	eb45 0303 	adc.w	r3, r5, r3
 8003816:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003836:	4629      	mov	r1, r5
 8003838:	008b      	lsls	r3, r1, #2
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003840:	4621      	mov	r1, r4
 8003842:	008a      	lsls	r2, r1, #2
 8003844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003848:	f7fc fd22 	bl	8000290 <__aeabi_uldivmod>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4b60      	ldr	r3, [pc, #384]	; (80039d4 <UART_SetConfig+0x4e4>)
 8003852:	fba3 2302 	umull	r2, r3, r3, r2
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	011c      	lsls	r4, r3, #4
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003864:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	1891      	adds	r1, r2, r2
 8003872:	61b9      	str	r1, [r7, #24]
 8003874:	415b      	adcs	r3, r3
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800387c:	4641      	mov	r1, r8
 800387e:	1851      	adds	r1, r2, r1
 8003880:	6139      	str	r1, [r7, #16]
 8003882:	4649      	mov	r1, r9
 8003884:	414b      	adcs	r3, r1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003894:	4659      	mov	r1, fp
 8003896:	00cb      	lsls	r3, r1, #3
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389e:	4651      	mov	r1, sl
 80038a0:	00ca      	lsls	r2, r1, #3
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	4642      	mov	r2, r8
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80038c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80038d4:	4649      	mov	r1, r9
 80038d6:	008b      	lsls	r3, r1, #2
 80038d8:	4641      	mov	r1, r8
 80038da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038de:	4641      	mov	r1, r8
 80038e0:	008a      	lsls	r2, r1, #2
 80038e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80038e6:	f7fc fcd3 	bl	8000290 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	4b38      	ldr	r3, [pc, #224]	; (80039d4 <UART_SetConfig+0x4e4>)
 80038f2:	fba3 2301 	umull	r2, r3, r3, r1
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2264      	movs	r2, #100	; 0x64
 80038fa:	fb02 f303 	mul.w	r3, r2, r3
 80038fe:	1acb      	subs	r3, r1, r3
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	3332      	adds	r3, #50	; 0x32
 8003904:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <UART_SetConfig+0x4e4>)
 8003906:	fba2 2303 	umull	r2, r3, r2, r3
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003910:	441c      	add	r4, r3
 8003912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003916:	2200      	movs	r2, #0
 8003918:	673b      	str	r3, [r7, #112]	; 0x70
 800391a:	677a      	str	r2, [r7, #116]	; 0x74
 800391c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	1891      	adds	r1, r2, r2
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	415b      	adcs	r3, r3
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003930:	4641      	mov	r1, r8
 8003932:	1851      	adds	r1, r2, r1
 8003934:	6039      	str	r1, [r7, #0]
 8003936:	4649      	mov	r1, r9
 8003938:	414b      	adcs	r3, r1
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003948:	4659      	mov	r1, fp
 800394a:	00cb      	lsls	r3, r1, #3
 800394c:	4651      	mov	r1, sl
 800394e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003952:	4651      	mov	r1, sl
 8003954:	00ca      	lsls	r2, r1, #3
 8003956:	4610      	mov	r0, r2
 8003958:	4619      	mov	r1, r3
 800395a:	4603      	mov	r3, r0
 800395c:	4642      	mov	r2, r8
 800395e:	189b      	adds	r3, r3, r2
 8003960:	66bb      	str	r3, [r7, #104]	; 0x68
 8003962:	464b      	mov	r3, r9
 8003964:	460a      	mov	r2, r1
 8003966:	eb42 0303 	adc.w	r3, r2, r3
 800396a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	663b      	str	r3, [r7, #96]	; 0x60
 8003976:	667a      	str	r2, [r7, #100]	; 0x64
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003984:	4649      	mov	r1, r9
 8003986:	008b      	lsls	r3, r1, #2
 8003988:	4641      	mov	r1, r8
 800398a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800398e:	4641      	mov	r1, r8
 8003990:	008a      	lsls	r2, r1, #2
 8003992:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003996:	f7fc fc7b 	bl	8000290 <__aeabi_uldivmod>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <UART_SetConfig+0x4e4>)
 80039a0:	fba3 1302 	umull	r1, r3, r3, r2
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	2164      	movs	r1, #100	; 0x64
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	3332      	adds	r3, #50	; 0x32
 80039b2:	4a08      	ldr	r2, [pc, #32]	; (80039d4 <UART_SetConfig+0x4e4>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	095b      	lsrs	r3, r3, #5
 80039ba:	f003 020f 	and.w	r2, r3, #15
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4422      	add	r2, r4
 80039c6:	609a      	str	r2, [r3, #8]
}
 80039c8:	bf00      	nop
 80039ca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80039ce:	46bd      	mov	sp, r7
 80039d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d4:	51eb851f 	.word	0x51eb851f

080039d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039d8:	b084      	sub	sp, #16
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	f107 001c 	add.w	r0, r7, #28
 80039e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d123      	bne.n	8003a3a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003a06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003a1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d105      	bne.n	8003a2e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 faa0 	bl	8003f74 <USB_CoreReset>
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	e01b      	b.n	8003a72 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa94 	bl	8003f74 <USB_CoreReset>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
 8003a64:	e005      	b.n	8003a72 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a72:	7fbb      	ldrb	r3, [r7, #30]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d10b      	bne.n	8003a90 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f043 0206 	orr.w	r2, r3, #6
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f043 0220 	orr.w	r2, r3, #32
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a9c:	b004      	add	sp, #16
 8003a9e:	4770      	bx	lr

08003aa0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f023 0201 	bic.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	460b      	mov	r3, r1
 8003acc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d115      	bne.n	8003b10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003af0:	200a      	movs	r0, #10
 8003af2:	f7fd fb35 	bl	8001160 <HAL_Delay>
      ms += 10U;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	330a      	adds	r3, #10
 8003afa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa2b 	bl	8003f58 <USB_GetMode>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d01e      	beq.n	8003b46 <USB_SetCurrentMode+0x84>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2bc7      	cmp	r3, #199	; 0xc7
 8003b0c:	d9f0      	bls.n	8003af0 <USB_SetCurrentMode+0x2e>
 8003b0e:	e01a      	b.n	8003b46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d115      	bne.n	8003b42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003b22:	200a      	movs	r0, #10
 8003b24:	f7fd fb1c 	bl	8001160 <HAL_Delay>
      ms += 10U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	330a      	adds	r3, #10
 8003b2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa12 	bl	8003f58 <USB_GetMode>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <USB_SetCurrentMode+0x84>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2bc7      	cmp	r3, #199	; 0xc7
 8003b3e:	d9f0      	bls.n	8003b22 <USB_SetCurrentMode+0x60>
 8003b40:	e001      	b.n	8003b46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e005      	b.n	8003b52 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2bc8      	cmp	r3, #200	; 0xc8
 8003b4a:	d101      	bne.n	8003b50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	e009      	b.n	8003b90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	3340      	adds	r3, #64	; 0x40
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	2200      	movs	r2, #0
 8003b88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b0e      	cmp	r3, #14
 8003b94:	d9f2      	bls.n	8003b7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11c      	bne.n	8003bd8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bce:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8003bd6:	e00b      	b.n	8003bf0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bfc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d10d      	bne.n	8003c20 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f968 	bl	8003ee4 <USB_SetDevSpeed>
 8003c14:	e008      	b.n	8003c28 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c16:	2101      	movs	r1, #1
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f963 	bl	8003ee4 <USB_SetDevSpeed>
 8003c1e:	e003      	b.n	8003c28 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c20:	2103      	movs	r1, #3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f95e 	bl	8003ee4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c28:	2110      	movs	r1, #16
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8fa 	bl	8003e24 <USB_FlushTxFifo>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f924 	bl	8003e88 <USB_FlushRxFifo>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c50:	461a      	mov	r2, r3
 8003c52:	2300      	movs	r3, #0
 8003c54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c68:	461a      	mov	r2, r3
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	613b      	str	r3, [r7, #16]
 8003c72:	e043      	b.n	8003cfc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c8a:	d118      	bne.n	8003cbe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10a      	bne.n	8003ca8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e013      	b.n	8003cd0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	e008      	b.n	8003cd0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cca:	461a      	mov	r2, r3
 8003ccc:	2300      	movs	r3, #0
 8003cce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2300      	movs	r3, #0
 8003ce0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d00:	461a      	mov	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d3b5      	bcc.n	8003c74 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	e043      	b.n	8003d96 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d24:	d118      	bne.n	8003d58 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	e013      	b.n	8003d6a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e008      	b.n	8003d6a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	461a      	mov	r2, r3
 8003d66:	2300      	movs	r3, #0
 8003d68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d76:	461a      	mov	r2, r3
 8003d78:	2300      	movs	r3, #0
 8003d7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	3301      	adds	r3, #1
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d3b5      	bcc.n	8003d0e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003dc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003dc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	f043 0210 	orr.w	r2, r3, #16
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <USB_DevInit+0x2c4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003de4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d005      	beq.n	8003df8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	f043 0208 	orr.w	r2, r3, #8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003df8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e08:	f043 0304 	orr.w	r3, r3, #4
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e1c:	b004      	add	sp, #16
 8003e1e:	4770      	bx	lr
 8003e20:	803c3800 	.word	0x803c3800

08003e24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3301      	adds	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e3e:	d901      	bls.n	8003e44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e01b      	b.n	8003e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	daf2      	bge.n	8003e32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	019b      	lsls	r3, r3, #6
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e68:	d901      	bls.n	8003e6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e006      	b.n	8003e7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d0f0      	beq.n	8003e5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3301      	adds	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ea0:	d901      	bls.n	8003ea6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e018      	b.n	8003ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	daf2      	bge.n	8003e94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ec4:	d901      	bls.n	8003eca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e006      	b.n	8003ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d0f0      	beq.n	8003eb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f30:	f023 0303 	bic.w	r3, r3, #3
 8003f34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f44:	f043 0302 	orr.w	r3, r3, #2
 8003f48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	f003 0301 	and.w	r3, r3, #1
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3301      	adds	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003f8c:	d901      	bls.n	8003f92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e01b      	b.n	8003fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	daf2      	bge.n	8003f80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3301      	adds	r3, #1
 8003fae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003fb6:	d901      	bls.n	8003fbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e006      	b.n	8003fca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d0f0      	beq.n	8003faa <USB_CoreReset+0x36>

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003fde:	4b87      	ldr	r3, [pc, #540]	; (80041fc <MX_LWIP_Init+0x224>)
 8003fe0:	22c0      	movs	r2, #192	; 0xc0
 8003fe2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003fe4:	4b85      	ldr	r3, [pc, #532]	; (80041fc <MX_LWIP_Init+0x224>)
 8003fe6:	22a8      	movs	r2, #168	; 0xa8
 8003fe8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003fea:	4b84      	ldr	r3, [pc, #528]	; (80041fc <MX_LWIP_Init+0x224>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 194;
 8003ff0:	4b82      	ldr	r3, [pc, #520]	; (80041fc <MX_LWIP_Init+0x224>)
 8003ff2:	22c2      	movs	r2, #194	; 0xc2
 8003ff4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003ff6:	4b82      	ldr	r3, [pc, #520]	; (8004200 <MX_LWIP_Init+0x228>)
 8003ff8:	22ff      	movs	r2, #255	; 0xff
 8003ffa:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003ffc:	4b80      	ldr	r3, [pc, #512]	; (8004200 <MX_LWIP_Init+0x228>)
 8003ffe:	22ff      	movs	r2, #255	; 0xff
 8004000:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004002:	4b7f      	ldr	r3, [pc, #508]	; (8004200 <MX_LWIP_Init+0x228>)
 8004004:	22ff      	movs	r2, #255	; 0xff
 8004006:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004008:	4b7d      	ldr	r3, [pc, #500]	; (8004200 <MX_LWIP_Init+0x228>)
 800400a:	2200      	movs	r2, #0
 800400c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800400e:	4b7d      	ldr	r3, [pc, #500]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004010:	22c0      	movs	r2, #192	; 0xc0
 8004012:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004014:	4b7b      	ldr	r3, [pc, #492]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004016:	22a8      	movs	r2, #168	; 0xa8
 8004018:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800401a:	4b7a      	ldr	r3, [pc, #488]	; (8004204 <MX_LWIP_Init+0x22c>)
 800401c:	2201      	movs	r2, #1
 800401e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004020:	4b78      	ldr	r3, [pc, #480]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004022:	2201      	movs	r2, #1
 8004024:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004026:	f000 fd15 	bl	8004a54 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800402a:	4b74      	ldr	r3, [pc, #464]	; (80041fc <MX_LWIP_Init+0x224>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	061a      	lsls	r2, r3, #24
 8004030:	4b72      	ldr	r3, [pc, #456]	; (80041fc <MX_LWIP_Init+0x224>)
 8004032:	785b      	ldrb	r3, [r3, #1]
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	431a      	orrs	r2, r3
 8004038:	4b70      	ldr	r3, [pc, #448]	; (80041fc <MX_LWIP_Init+0x224>)
 800403a:	789b      	ldrb	r3, [r3, #2]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	4313      	orrs	r3, r2
 8004040:	4a6e      	ldr	r2, [pc, #440]	; (80041fc <MX_LWIP_Init+0x224>)
 8004042:	78d2      	ldrb	r2, [r2, #3]
 8004044:	4313      	orrs	r3, r2
 8004046:	061a      	lsls	r2, r3, #24
 8004048:	4b6c      	ldr	r3, [pc, #432]	; (80041fc <MX_LWIP_Init+0x224>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	0619      	lsls	r1, r3, #24
 800404e:	4b6b      	ldr	r3, [pc, #428]	; (80041fc <MX_LWIP_Init+0x224>)
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	4319      	orrs	r1, r3
 8004056:	4b69      	ldr	r3, [pc, #420]	; (80041fc <MX_LWIP_Init+0x224>)
 8004058:	789b      	ldrb	r3, [r3, #2]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	430b      	orrs	r3, r1
 800405e:	4967      	ldr	r1, [pc, #412]	; (80041fc <MX_LWIP_Init+0x224>)
 8004060:	78c9      	ldrb	r1, [r1, #3]
 8004062:	430b      	orrs	r3, r1
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800406a:	431a      	orrs	r2, r3
 800406c:	4b63      	ldr	r3, [pc, #396]	; (80041fc <MX_LWIP_Init+0x224>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	0619      	lsls	r1, r3, #24
 8004072:	4b62      	ldr	r3, [pc, #392]	; (80041fc <MX_LWIP_Init+0x224>)
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	4319      	orrs	r1, r3
 800407a:	4b60      	ldr	r3, [pc, #384]	; (80041fc <MX_LWIP_Init+0x224>)
 800407c:	789b      	ldrb	r3, [r3, #2]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	430b      	orrs	r3, r1
 8004082:	495e      	ldr	r1, [pc, #376]	; (80041fc <MX_LWIP_Init+0x224>)
 8004084:	78c9      	ldrb	r1, [r1, #3]
 8004086:	430b      	orrs	r3, r1
 8004088:	0a1b      	lsrs	r3, r3, #8
 800408a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800408e:	431a      	orrs	r2, r3
 8004090:	4b5a      	ldr	r3, [pc, #360]	; (80041fc <MX_LWIP_Init+0x224>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	0619      	lsls	r1, r3, #24
 8004096:	4b59      	ldr	r3, [pc, #356]	; (80041fc <MX_LWIP_Init+0x224>)
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	4319      	orrs	r1, r3
 800409e:	4b57      	ldr	r3, [pc, #348]	; (80041fc <MX_LWIP_Init+0x224>)
 80040a0:	789b      	ldrb	r3, [r3, #2]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	430b      	orrs	r3, r1
 80040a6:	4955      	ldr	r1, [pc, #340]	; (80041fc <MX_LWIP_Init+0x224>)
 80040a8:	78c9      	ldrb	r1, [r1, #3]
 80040aa:	430b      	orrs	r3, r1
 80040ac:	0e1b      	lsrs	r3, r3, #24
 80040ae:	4313      	orrs	r3, r2
 80040b0:	4a55      	ldr	r2, [pc, #340]	; (8004208 <MX_LWIP_Init+0x230>)
 80040b2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80040b4:	4b52      	ldr	r3, [pc, #328]	; (8004200 <MX_LWIP_Init+0x228>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	061a      	lsls	r2, r3, #24
 80040ba:	4b51      	ldr	r3, [pc, #324]	; (8004200 <MX_LWIP_Init+0x228>)
 80040bc:	785b      	ldrb	r3, [r3, #1]
 80040be:	041b      	lsls	r3, r3, #16
 80040c0:	431a      	orrs	r2, r3
 80040c2:	4b4f      	ldr	r3, [pc, #316]	; (8004200 <MX_LWIP_Init+0x228>)
 80040c4:	789b      	ldrb	r3, [r3, #2]
 80040c6:	021b      	lsls	r3, r3, #8
 80040c8:	4313      	orrs	r3, r2
 80040ca:	4a4d      	ldr	r2, [pc, #308]	; (8004200 <MX_LWIP_Init+0x228>)
 80040cc:	78d2      	ldrb	r2, [r2, #3]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	061a      	lsls	r2, r3, #24
 80040d2:	4b4b      	ldr	r3, [pc, #300]	; (8004200 <MX_LWIP_Init+0x228>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	0619      	lsls	r1, r3, #24
 80040d8:	4b49      	ldr	r3, [pc, #292]	; (8004200 <MX_LWIP_Init+0x228>)
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	4319      	orrs	r1, r3
 80040e0:	4b47      	ldr	r3, [pc, #284]	; (8004200 <MX_LWIP_Init+0x228>)
 80040e2:	789b      	ldrb	r3, [r3, #2]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	430b      	orrs	r3, r1
 80040e8:	4945      	ldr	r1, [pc, #276]	; (8004200 <MX_LWIP_Init+0x228>)
 80040ea:	78c9      	ldrb	r1, [r1, #3]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	021b      	lsls	r3, r3, #8
 80040f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040f4:	431a      	orrs	r2, r3
 80040f6:	4b42      	ldr	r3, [pc, #264]	; (8004200 <MX_LWIP_Init+0x228>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	0619      	lsls	r1, r3, #24
 80040fc:	4b40      	ldr	r3, [pc, #256]	; (8004200 <MX_LWIP_Init+0x228>)
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	4319      	orrs	r1, r3
 8004104:	4b3e      	ldr	r3, [pc, #248]	; (8004200 <MX_LWIP_Init+0x228>)
 8004106:	789b      	ldrb	r3, [r3, #2]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	430b      	orrs	r3, r1
 800410c:	493c      	ldr	r1, [pc, #240]	; (8004200 <MX_LWIP_Init+0x228>)
 800410e:	78c9      	ldrb	r1, [r1, #3]
 8004110:	430b      	orrs	r3, r1
 8004112:	0a1b      	lsrs	r3, r3, #8
 8004114:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004118:	431a      	orrs	r2, r3
 800411a:	4b39      	ldr	r3, [pc, #228]	; (8004200 <MX_LWIP_Init+0x228>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	0619      	lsls	r1, r3, #24
 8004120:	4b37      	ldr	r3, [pc, #220]	; (8004200 <MX_LWIP_Init+0x228>)
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	4319      	orrs	r1, r3
 8004128:	4b35      	ldr	r3, [pc, #212]	; (8004200 <MX_LWIP_Init+0x228>)
 800412a:	789b      	ldrb	r3, [r3, #2]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	430b      	orrs	r3, r1
 8004130:	4933      	ldr	r1, [pc, #204]	; (8004200 <MX_LWIP_Init+0x228>)
 8004132:	78c9      	ldrb	r1, [r1, #3]
 8004134:	430b      	orrs	r3, r1
 8004136:	0e1b      	lsrs	r3, r3, #24
 8004138:	4313      	orrs	r3, r2
 800413a:	4a34      	ldr	r2, [pc, #208]	; (800420c <MX_LWIP_Init+0x234>)
 800413c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800413e:	4b31      	ldr	r3, [pc, #196]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	061a      	lsls	r2, r3, #24
 8004144:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004146:	785b      	ldrb	r3, [r3, #1]
 8004148:	041b      	lsls	r3, r3, #16
 800414a:	431a      	orrs	r2, r3
 800414c:	4b2d      	ldr	r3, [pc, #180]	; (8004204 <MX_LWIP_Init+0x22c>)
 800414e:	789b      	ldrb	r3, [r3, #2]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	4313      	orrs	r3, r2
 8004154:	4a2b      	ldr	r2, [pc, #172]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004156:	78d2      	ldrb	r2, [r2, #3]
 8004158:	4313      	orrs	r3, r2
 800415a:	061a      	lsls	r2, r3, #24
 800415c:	4b29      	ldr	r3, [pc, #164]	; (8004204 <MX_LWIP_Init+0x22c>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	0619      	lsls	r1, r3, #24
 8004162:	4b28      	ldr	r3, [pc, #160]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	4319      	orrs	r1, r3
 800416a:	4b26      	ldr	r3, [pc, #152]	; (8004204 <MX_LWIP_Init+0x22c>)
 800416c:	789b      	ldrb	r3, [r3, #2]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	430b      	orrs	r3, r1
 8004172:	4924      	ldr	r1, [pc, #144]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004174:	78c9      	ldrb	r1, [r1, #3]
 8004176:	430b      	orrs	r3, r1
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800417e:	431a      	orrs	r2, r3
 8004180:	4b20      	ldr	r3, [pc, #128]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	0619      	lsls	r1, r3, #24
 8004186:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004188:	785b      	ldrb	r3, [r3, #1]
 800418a:	041b      	lsls	r3, r3, #16
 800418c:	4319      	orrs	r1, r3
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004190:	789b      	ldrb	r3, [r3, #2]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	430b      	orrs	r3, r1
 8004196:	491b      	ldr	r1, [pc, #108]	; (8004204 <MX_LWIP_Init+0x22c>)
 8004198:	78c9      	ldrb	r1, [r1, #3]
 800419a:	430b      	orrs	r3, r1
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80041a2:	431a      	orrs	r2, r3
 80041a4:	4b17      	ldr	r3, [pc, #92]	; (8004204 <MX_LWIP_Init+0x22c>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	0619      	lsls	r1, r3, #24
 80041aa:	4b16      	ldr	r3, [pc, #88]	; (8004204 <MX_LWIP_Init+0x22c>)
 80041ac:	785b      	ldrb	r3, [r3, #1]
 80041ae:	041b      	lsls	r3, r3, #16
 80041b0:	4319      	orrs	r1, r3
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <MX_LWIP_Init+0x22c>)
 80041b4:	789b      	ldrb	r3, [r3, #2]
 80041b6:	021b      	lsls	r3, r3, #8
 80041b8:	430b      	orrs	r3, r1
 80041ba:	4912      	ldr	r1, [pc, #72]	; (8004204 <MX_LWIP_Init+0x22c>)
 80041bc:	78c9      	ldrb	r1, [r1, #3]
 80041be:	430b      	orrs	r3, r1
 80041c0:	0e1b      	lsrs	r3, r3, #24
 80041c2:	4313      	orrs	r3, r2
 80041c4:	4a12      	ldr	r2, [pc, #72]	; (8004210 <MX_LWIP_Init+0x238>)
 80041c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <MX_LWIP_Init+0x23c>)
 80041ca:	9302      	str	r3, [sp, #8]
 80041cc:	4b12      	ldr	r3, [pc, #72]	; (8004218 <MX_LWIP_Init+0x240>)
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	2300      	movs	r3, #0
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <MX_LWIP_Init+0x238>)
 80041d6:	4a0d      	ldr	r2, [pc, #52]	; (800420c <MX_LWIP_Init+0x234>)
 80041d8:	490b      	ldr	r1, [pc, #44]	; (8004208 <MX_LWIP_Init+0x230>)
 80041da:	4810      	ldr	r0, [pc, #64]	; (800421c <MX_LWIP_Init+0x244>)
 80041dc:	f001 f926 	bl	800542c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80041e0:	480e      	ldr	r0, [pc, #56]	; (800421c <MX_LWIP_Init+0x244>)
 80041e2:	f001 fad5 	bl	8005790 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80041e6:	480d      	ldr	r0, [pc, #52]	; (800421c <MX_LWIP_Init+0x244>)
 80041e8:	f001 fae2 	bl	80057b0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80041ec:	490c      	ldr	r1, [pc, #48]	; (8004220 <MX_LWIP_Init+0x248>)
 80041ee:	480b      	ldr	r0, [pc, #44]	; (800421c <MX_LWIP_Init+0x244>)
 80041f0:	f001 fbe0 	bl	80059b4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80041f4:	bf00      	nop
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	2000061c 	.word	0x2000061c
 8004200:	20000620 	.word	0x20000620
 8004204:	20000624 	.word	0x20000624
 8004208:	20000610 	.word	0x20000610
 800420c:	20000614 	.word	0x20000614
 8004210:	20000618 	.word	0x20000618
 8004214:	0800ec49 	.word	0x0800ec49
 8004218:	08004539 	.word	0x08004539
 800421c:	200005dc 	.word	0x200005dc
 8004220:	0800427d 	.word	0x0800427d

08004224 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800422c:	f7fc ff8c 	bl	8001148 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	4b08      	ldr	r3, [pc, #32]	; (8004254 <Ethernet_Link_Periodic_Handle+0x30>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b63      	cmp	r3, #99	; 0x63
 800423a:	d907      	bls.n	800424c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800423c:	f7fc ff84 	bl	8001148 <HAL_GetTick>
 8004240:	4603      	mov	r3, r0
 8004242:	4a04      	ldr	r2, [pc, #16]	; (8004254 <Ethernet_Link_Periodic_Handle+0x30>)
 8004244:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fada 	bl	8004800 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800424c:	bf00      	nop
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	200005d8 	.word	0x200005d8

08004258 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800425c:	4806      	ldr	r0, [pc, #24]	; (8004278 <MX_LWIP_Process+0x20>)
 800425e:	f000 f94b 	bl	80044f8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004262:	f007 fcbb 	bl	800bbdc <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004266:	4804      	ldr	r0, [pc, #16]	; (8004278 <MX_LWIP_Process+0x20>)
 8004268:	f7ff ffdc 	bl	8004224 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
	ethernet_link_status_updated(&gnetif);
 800426c:	4802      	ldr	r0, [pc, #8]	; (8004278 <MX_LWIP_Process+0x20>)
 800426e:	f000 f805 	bl	800427c <ethernet_link_status_updated>
/* USER CODE END 4_3 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200005dc 	.word	0x200005dc

0800427c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800429c:	4b40      	ldr	r3, [pc, #256]	; (80043a0 <low_level_init+0x110>)
 800429e:	4a41      	ldr	r2, [pc, #260]	; (80043a4 <low_level_init+0x114>)
 80042a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80042a2:	2300      	movs	r3, #0
 80042a4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80042a6:	2380      	movs	r3, #128	; 0x80
 80042a8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80042aa:	23e1      	movs	r3, #225	; 0xe1
 80042ac:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80042ae:	2300      	movs	r3, #0
 80042b0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80042b2:	2300      	movs	r3, #0
 80042b4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80042b6:	2300      	movs	r3, #0
 80042b8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80042ba:	4a39      	ldr	r2, [pc, #228]	; (80043a0 <low_level_init+0x110>)
 80042bc:	f107 0308 	add.w	r3, r7, #8
 80042c0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80042c2:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <low_level_init+0x110>)
 80042c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80042c8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80042ca:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <low_level_init+0x110>)
 80042cc:	4a36      	ldr	r2, [pc, #216]	; (80043a8 <low_level_init+0x118>)
 80042ce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80042d0:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <low_level_init+0x110>)
 80042d2:	4a36      	ldr	r2, [pc, #216]	; (80043ac <low_level_init+0x11c>)
 80042d4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80042d6:	4b32      	ldr	r3, [pc, #200]	; (80043a0 <low_level_init+0x110>)
 80042d8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80042dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80042de:	4830      	ldr	r0, [pc, #192]	; (80043a0 <low_level_init+0x110>)
 80042e0:	f7fd f848 	bl	8001374 <HAL_ETH_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80042e8:	2238      	movs	r2, #56	; 0x38
 80042ea:	2100      	movs	r1, #0
 80042ec:	4830      	ldr	r0, [pc, #192]	; (80043b0 <low_level_init+0x120>)
 80042ee:	f00a ff20 	bl	800f132 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80042f2:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <low_level_init+0x120>)
 80042f4:	2221      	movs	r2, #33	; 0x21
 80042f6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80042f8:	4b2d      	ldr	r3, [pc, #180]	; (80043b0 <low_level_init+0x120>)
 80042fa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80042fe:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004300:	4b2b      	ldr	r3, [pc, #172]	; (80043b0 <low_level_init+0x120>)
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004306:	482b      	ldr	r0, [pc, #172]	; (80043b4 <low_level_init+0x124>)
 8004308:	f000 ff58 	bl	80051bc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2206      	movs	r2, #6
 8004310:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004314:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <low_level_init+0x110>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	781a      	ldrb	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004320:	4b1f      	ldr	r3, [pc, #124]	; (80043a0 <low_level_init+0x110>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	785a      	ldrb	r2, [r3, #1]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800432c:	4b1c      	ldr	r3, [pc, #112]	; (80043a0 <low_level_init+0x110>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	789a      	ldrb	r2, [r3, #2]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004338:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <low_level_init+0x110>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	78da      	ldrb	r2, [r3, #3]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <low_level_init+0x110>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	791a      	ldrb	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004350:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <low_level_init+0x110>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	795a      	ldrb	r2, [r3, #5]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004362:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800436a:	f043 030a 	orr.w	r3, r3, #10
 800436e:	b2da      	uxtb	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004376:	4910      	ldr	r1, [pc, #64]	; (80043b8 <low_level_init+0x128>)
 8004378:	4810      	ldr	r0, [pc, #64]	; (80043bc <low_level_init+0x12c>)
 800437a:	f7fc fd1e 	bl	8000dba <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800437e:	480f      	ldr	r0, [pc, #60]	; (80043bc <low_level_init+0x12c>)
 8004380:	f7fc fd4d 	bl	8000e1e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fa38 	bl	8004800 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004390:	e001      	b.n	8004396 <low_level_init+0x106>
    Error_Handler();
 8004392:	f7fc faad 	bl	80008f0 <Error_Handler>
}
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	200050f4 	.word	0x200050f4
 80043a4:	40028000 	.word	0x40028000
 80043a8:	20005054 	.word	0x20005054
 80043ac:	20004fb4 	.word	0x20004fb4
 80043b0:	200051a4 	.word	0x200051a4
 80043b4:	08012bd4 	.word	0x08012bd4
 80043b8:	2000000c 	.word	0x2000000c
 80043bc:	200051dc 	.word	0x200051dc

080043c0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b092      	sub	sp, #72	; 0x48
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80043d8:	f107 030c 	add.w	r3, r7, #12
 80043dc:	2230      	movs	r2, #48	; 0x30
 80043de:	2100      	movs	r1, #0
 80043e0:	4618      	mov	r0, r3
 80043e2:	f00a fea6 	bl	800f132 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	2230      	movs	r2, #48	; 0x30
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f00a fe9f 	bl	800f132 <memset>

  for(q = p; q != NULL; q = q->next)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	643b      	str	r3, [r7, #64]	; 0x40
 80043f8:	e045      	b.n	8004486 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80043fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d902      	bls.n	8004406 <low_level_output+0x46>
      return ERR_IF;
 8004400:	f06f 030b 	mvn.w	r3, #11
 8004404:	e055      	b.n	80044b2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004408:	6859      	ldr	r1, [r3, #4]
 800440a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800440c:	4613      	mov	r3, r2
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	3348      	adds	r3, #72	; 0x48
 8004416:	443b      	add	r3, r7
 8004418:	3b3c      	subs	r3, #60	; 0x3c
 800441a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800441c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441e:	895b      	ldrh	r3, [r3, #10]
 8004420:	4619      	mov	r1, r3
 8004422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004424:	4613      	mov	r3, r2
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	3348      	adds	r3, #72	; 0x48
 800442e:	443b      	add	r3, r7
 8004430:	3b38      	subs	r3, #56	; 0x38
 8004432:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004436:	2b00      	cmp	r3, #0
 8004438:	d011      	beq.n	800445e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800443a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443c:	1e5a      	subs	r2, r3, #1
 800443e:	f107 000c 	add.w	r0, r7, #12
 8004442:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004444:	460b      	mov	r3, r1
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	440b      	add	r3, r1
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	18c1      	adds	r1, r0, r3
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	3348      	adds	r3, #72	; 0x48
 8004458:	443b      	add	r3, r7
 800445a:	3b34      	subs	r3, #52	; 0x34
 800445c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800445e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	3348      	adds	r3, #72	; 0x48
 8004472:	443b      	add	r3, r7
 8004474:	3b34      	subs	r3, #52	; 0x34
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
    }

    i++;
 800447a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447c:	3301      	adds	r3, #1
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	643b      	str	r3, [r7, #64]	; 0x40
 8004486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1b6      	bne.n	80043fa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	891b      	ldrh	r3, [r3, #8]
 8004490:	461a      	mov	r2, r3
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <low_level_output+0xfc>)
 8004494:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <low_level_output+0xfc>)
 8004498:	f107 030c 	add.w	r3, r7, #12
 800449c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <low_level_output+0xfc>)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80044a4:	2214      	movs	r2, #20
 80044a6:	4905      	ldr	r1, [pc, #20]	; (80044bc <low_level_output+0xfc>)
 80044a8:	4805      	ldr	r0, [pc, #20]	; (80044c0 <low_level_output+0x100>)
 80044aa:	f7fd f899 	bl	80015e0 <HAL_ETH_Transmit>

  return errval;
 80044ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3748      	adds	r7, #72	; 0x48
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200051a4 	.word	0x200051a4
 80044c0:	200050f4 	.word	0x200050f4

080044c4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80044d0:	4b07      	ldr	r3, [pc, #28]	; (80044f0 <low_level_input+0x2c>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d105      	bne.n	80044e4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	4619      	mov	r1, r3
 80044de:	4805      	ldr	r0, [pc, #20]	; (80044f4 <low_level_input+0x30>)
 80044e0:	f7fd f912 	bl	8001708 <HAL_ETH_ReadData>
  }

  return p;
 80044e4:	68fb      	ldr	r3, [r7, #12]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20004fb0 	.word	0x20004fb0
 80044f4:	200050f4 	.word	0x200050f4

080044f8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff ffdd 	bl	80044c4 <low_level_input>
 800450a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	4798      	blx	r3
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f001 fdc6 	bl	80060b4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1ea      	bne.n	8004504 <ethernetif_input+0xc>
}
 800452e:	bf00      	nop
 8004530:	bf00      	nop
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <ethernetif_init+0x1c>
 8004546:	4b0e      	ldr	r3, [pc, #56]	; (8004580 <ethernetif_init+0x48>)
 8004548:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800454c:	490d      	ldr	r1, [pc, #52]	; (8004584 <ethernetif_init+0x4c>)
 800454e:	480e      	ldr	r0, [pc, #56]	; (8004588 <ethernetif_init+0x50>)
 8004550:	f00a fd50 	bl	800eff4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2273      	movs	r2, #115	; 0x73
 8004558:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2274      	movs	r2, #116	; 0x74
 8004560:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a09      	ldr	r2, [pc, #36]	; (800458c <ethernetif_init+0x54>)
 8004568:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a08      	ldr	r2, [pc, #32]	; (8004590 <ethernetif_init+0x58>)
 800456e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fe8d 	bl	8004290 <low_level_init>

  return ERR_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	080101dc 	.word	0x080101dc
 8004584:	080101f8 	.word	0x080101f8
 8004588:	08010208 	.word	0x08010208
 800458c:	0800cfe1 	.word	0x0800cfe1
 8004590:	080043c1 	.word	0x080043c1

08004594 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80045a0:	68f9      	ldr	r1, [r7, #12]
 80045a2:	4807      	ldr	r0, [pc, #28]	; (80045c0 <pbuf_free_custom+0x2c>)
 80045a4:	f000 feec 	bl	8005380 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <pbuf_free_custom+0x30>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d102      	bne.n	80045b6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80045b0:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <pbuf_free_custom+0x30>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
  }
}
 80045b6:	bf00      	nop
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	08012bd4 	.word	0x08012bd4
 80045c4:	20004fb0 	.word	0x20004fb0

080045c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80045cc:	f7fc fdbc 	bl	8001148 <HAL_GetTick>
 80045d0:	4603      	mov	r3, r0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08e      	sub	sp, #56	; 0x38
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a55      	ldr	r2, [pc, #340]	; (800474c <HAL_ETH_MspInit+0x174>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	f040 80a4 	bne.w	8004744 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80045fc:	2300      	movs	r3, #0
 80045fe:	623b      	str	r3, [r7, #32]
 8004600:	4b53      	ldr	r3, [pc, #332]	; (8004750 <HAL_ETH_MspInit+0x178>)
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	4a52      	ldr	r2, [pc, #328]	; (8004750 <HAL_ETH_MspInit+0x178>)
 8004606:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800460a:	6313      	str	r3, [r2, #48]	; 0x30
 800460c:	4b50      	ldr	r3, [pc, #320]	; (8004750 <HAL_ETH_MspInit+0x178>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004614:	623b      	str	r3, [r7, #32]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	4b4c      	ldr	r3, [pc, #304]	; (8004750 <HAL_ETH_MspInit+0x178>)
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	4a4b      	ldr	r2, [pc, #300]	; (8004750 <HAL_ETH_MspInit+0x178>)
 8004622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004626:	6313      	str	r3, [r2, #48]	; 0x30
 8004628:	4b49      	ldr	r3, [pc, #292]	; (8004750 <HAL_ETH_MspInit+0x178>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
 8004638:	4b45      	ldr	r3, [pc, #276]	; (8004750 <HAL_ETH_MspInit+0x178>)
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	4a44      	ldr	r2, [pc, #272]	; (8004750 <HAL_ETH_MspInit+0x178>)
 800463e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004642:	6313      	str	r3, [r2, #48]	; 0x30
 8004644:	4b42      	ldr	r3, [pc, #264]	; (8004750 <HAL_ETH_MspInit+0x178>)
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]
 8004654:	4b3e      	ldr	r3, [pc, #248]	; (8004750 <HAL_ETH_MspInit+0x178>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	4a3d      	ldr	r2, [pc, #244]	; (8004750 <HAL_ETH_MspInit+0x178>)
 800465a:	f043 0304 	orr.w	r3, r3, #4
 800465e:	6313      	str	r3, [r2, #48]	; 0x30
 8004660:	4b3b      	ldr	r3, [pc, #236]	; (8004750 <HAL_ETH_MspInit+0x178>)
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466c:	2300      	movs	r3, #0
 800466e:	613b      	str	r3, [r7, #16]
 8004670:	4b37      	ldr	r3, [pc, #220]	; (8004750 <HAL_ETH_MspInit+0x178>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	4a36      	ldr	r2, [pc, #216]	; (8004750 <HAL_ETH_MspInit+0x178>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6313      	str	r3, [r2, #48]	; 0x30
 800467c:	4b34      	ldr	r3, [pc, #208]	; (8004750 <HAL_ETH_MspInit+0x178>)
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_ETH_MspInit+0x178>)
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <HAL_ETH_MspInit+0x178>)
 8004692:	f043 0302 	orr.w	r3, r3, #2
 8004696:	6313      	str	r3, [r2, #48]	; 0x30
 8004698:	4b2d      	ldr	r3, [pc, #180]	; (8004750 <HAL_ETH_MspInit+0x178>)
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80046a4:	2300      	movs	r3, #0
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	4b29      	ldr	r3, [pc, #164]	; (8004750 <HAL_ETH_MspInit+0x178>)
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	4a28      	ldr	r2, [pc, #160]	; (8004750 <HAL_ETH_MspInit+0x178>)
 80046ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046b2:	6313      	str	r3, [r2, #48]	; 0x30
 80046b4:	4b26      	ldr	r3, [pc, #152]	; (8004750 <HAL_ETH_MspInit+0x178>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80046c0:	2332      	movs	r3, #50	; 0x32
 80046c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c4:	2302      	movs	r3, #2
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c8:	2300      	movs	r3, #0
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046cc:	2303      	movs	r3, #3
 80046ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046d0:	230b      	movs	r3, #11
 80046d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d8:	4619      	mov	r1, r3
 80046da:	481e      	ldr	r0, [pc, #120]	; (8004754 <HAL_ETH_MspInit+0x17c>)
 80046dc:	f7fd ff4c 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80046e0:	2386      	movs	r3, #134	; 0x86
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e4:	2302      	movs	r3, #2
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ec:	2303      	movs	r3, #3
 80046ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046f0:	230b      	movs	r3, #11
 80046f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f8:	4619      	mov	r1, r3
 80046fa:	4817      	ldr	r0, [pc, #92]	; (8004758 <HAL_ETH_MspInit+0x180>)
 80046fc:	f7fd ff3c 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004706:	2302      	movs	r3, #2
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	2300      	movs	r3, #0
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470e:	2303      	movs	r3, #3
 8004710:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004712:	230b      	movs	r3, #11
 8004714:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800471a:	4619      	mov	r1, r3
 800471c:	480f      	ldr	r0, [pc, #60]	; (800475c <HAL_ETH_MspInit+0x184>)
 800471e:	f7fd ff2b 	bl	8002578 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004722:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004728:	2302      	movs	r3, #2
 800472a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472c:	2300      	movs	r3, #0
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004730:	2303      	movs	r3, #3
 8004732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004734:	230b      	movs	r3, #11
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800473c:	4619      	mov	r1, r3
 800473e:	4808      	ldr	r0, [pc, #32]	; (8004760 <HAL_ETH_MspInit+0x188>)
 8004740:	f7fd ff1a 	bl	8002578 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004744:	bf00      	nop
 8004746:	3738      	adds	r7, #56	; 0x38
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40028000 	.word	0x40028000
 8004750:	40023800 	.word	0x40023800
 8004754:	40020800 	.word	0x40020800
 8004758:	40020000 	.word	0x40020000
 800475c:	40020400 	.word	0x40020400
 8004760:	40021800 	.word	0x40021800

08004764 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004768:	4802      	ldr	r0, [pc, #8]	; (8004774 <ETH_PHY_IO_Init+0x10>)
 800476a:	f7fd faa9 	bl	8001cc0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	200050f4 	.word	0x200050f4

08004778 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return 0;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	68f9      	ldr	r1, [r7, #12]
 800479a:	4807      	ldr	r0, [pc, #28]	; (80047b8 <ETH_PHY_IO_ReadReg+0x30>)
 800479c:	f7fd f8f8 	bl	8001990 <HAL_ETH_ReadPHYRegister>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295
 80047aa:	e000      	b.n	80047ae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	200050f4 	.word	0x200050f4

080047bc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	68f9      	ldr	r1, [r7, #12]
 80047ce:	4807      	ldr	r0, [pc, #28]	; (80047ec <ETH_PHY_IO_WriteReg+0x30>)
 80047d0:	f7fd f929 	bl	8001a26 <HAL_ETH_WritePHYRegister>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80047da:	f04f 33ff 	mov.w	r3, #4294967295
 80047de:	e000      	b.n	80047e2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	200050f4 	.word	0x200050f4

080047f0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047f4:	f7fc fca8 	bl	8001148 <HAL_GetTick>
 80047f8:	4603      	mov	r3, r0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b0a0      	sub	sp, #128	; 0x80
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004808:	f107 030c 	add.w	r3, r7, #12
 800480c:	2264      	movs	r2, #100	; 0x64
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f00a fc8e 	bl	800f132 <memset>
  int32_t PHYLinkState = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800481e:	2300      	movs	r3, #0
 8004820:	67bb      	str	r3, [r7, #120]	; 0x78
 8004822:	2300      	movs	r3, #0
 8004824:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004826:	483a      	ldr	r0, [pc, #232]	; (8004910 <ethernet_link_check_state+0x110>)
 8004828:	f7fc fba1 	bl	8000f6e <LAN8742_GetLinkState>
 800482c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00c      	beq.n	800485a <ethernet_link_check_state+0x5a>
 8004840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004842:	2b01      	cmp	r3, #1
 8004844:	dc09      	bgt.n	800485a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004846:	4833      	ldr	r0, [pc, #204]	; (8004914 <ethernet_link_check_state+0x114>)
 8004848:	f7fc fe71 	bl	800152e <HAL_ETH_Stop>
    netif_set_down(netif);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f001 f81b 	bl	8005888 <netif_set_down>
    netif_set_link_down(netif);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f001 f87e 	bl	8005954 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004858:	e055      	b.n	8004906 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d14e      	bne.n	8004906 <ethernet_link_check_state+0x106>
 8004868:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800486a:	2b01      	cmp	r3, #1
 800486c:	dd4b      	ble.n	8004906 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800486e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004870:	3b02      	subs	r3, #2
 8004872:	2b03      	cmp	r3, #3
 8004874:	d82a      	bhi.n	80048cc <ethernet_link_check_state+0xcc>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <ethernet_link_check_state+0x7c>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	0800488d 	.word	0x0800488d
 8004880:	0800489f 	.word	0x0800489f
 8004884:	080048af 	.word	0x080048af
 8004888:	080048bf 	.word	0x080048bf
      duplex = ETH_FULLDUPLEX_MODE;
 800488c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004890:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004892:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004896:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004898:	2301      	movs	r3, #1
 800489a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800489c:	e017      	b.n	80048ce <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800489e:	2300      	movs	r3, #0
 80048a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80048a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048a8:	2301      	movs	r3, #1
 80048aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048ac:	e00f      	b.n	80048ce <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80048ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048b2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80048b4:	2300      	movs	r3, #0
 80048b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048b8:	2301      	movs	r3, #1
 80048ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048bc:	e007      	b.n	80048ce <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80048be:	2300      	movs	r3, #0
 80048c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80048c2:	2300      	movs	r3, #0
 80048c4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80048c6:	2301      	movs	r3, #1
 80048c8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80048ca:	e000      	b.n	80048ce <ethernet_link_check_state+0xce>
      break;
 80048cc:	bf00      	nop
    if(linkchanged)
 80048ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d018      	beq.n	8004906 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80048d4:	f107 030c 	add.w	r3, r7, #12
 80048d8:	4619      	mov	r1, r3
 80048da:	480e      	ldr	r0, [pc, #56]	; (8004914 <ethernet_link_check_state+0x114>)
 80048dc:	f7fd f8ec 	bl	8001ab8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80048e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048e2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80048e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048e6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	4619      	mov	r1, r3
 80048ee:	4809      	ldr	r0, [pc, #36]	; (8004914 <ethernet_link_check_state+0x114>)
 80048f0:	f7fd f9cc 	bl	8001c8c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80048f4:	4807      	ldr	r0, [pc, #28]	; (8004914 <ethernet_link_check_state+0x114>)
 80048f6:	f7fc fdbb 	bl	8001470 <HAL_ETH_Start>
      netif_set_up(netif);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 ff58 	bl	80057b0 <netif_set_up>
      netif_set_link_up(netif);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fff3 	bl	80058ec <netif_set_link_up>
}
 8004906:	bf00      	nop
 8004908:	3780      	adds	r7, #128	; 0x80
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200051dc 	.word	0x200051dc
 8004914:	200050f4 	.word	0x200050f4

08004918 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af02      	add	r7, sp, #8
 800491e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004920:	4812      	ldr	r0, [pc, #72]	; (800496c <HAL_ETH_RxAllocateCallback+0x54>)
 8004922:	f000 fcbf 	bl	80052a4 <memp_malloc_pool>
 8004926:	60f8      	str	r0, [r7, #12]
  if (p)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d014      	beq.n	8004958 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f103 0220 	add.w	r2, r3, #32
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a0d      	ldr	r2, [pc, #52]	; (8004970 <HAL_ETH_RxAllocateCallback+0x58>)
 800493c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004946:	9201      	str	r2, [sp, #4]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2241      	movs	r2, #65	; 0x41
 800494e:	2100      	movs	r1, #0
 8004950:	2000      	movs	r0, #0
 8004952:	f001 f9f5 	bl	8005d40 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004956:	e005      	b.n	8004964 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_ETH_RxAllocateCallback+0x5c>)
 800495a:	2201      	movs	r2, #1
 800495c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	08012bd4 	.word	0x08012bd4
 8004970:	08004595 	.word	0x08004595
 8004974:	20004fb0 	.word	0x20004fb0

08004978 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004978:	b480      	push	{r7}
 800497a:	b089      	sub	sp, #36	; 0x24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3b20      	subs	r3, #32
 8004996:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	2200      	movs	r2, #0
 80049a2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e003      	b.n	80049c2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69fa      	ldr	r2, [r7, #28]
 80049c0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	e009      	b.n	80049e4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	891a      	ldrh	r2, [r3, #8]
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	4413      	add	r3, r2
 80049d8:	b29a      	uxth	r2, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f2      	bne.n	80049d0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80049ea:	bf00      	nop
 80049ec:	bf00      	nop
 80049ee:	3724      	adds	r7, #36	; 0x24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	b21a      	sxth	r2, r3
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	b21b      	sxth	r3, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	b21b      	sxth	r3, r3
 8004a14:	b29b      	uxth	r3, r3
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	061a      	lsls	r2, r3, #24
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0e1b      	lsrs	r3, r3, #24
 8004a46:	4313      	orrs	r3, r2
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004a5e:	f000 f8d5 	bl	8004c0c <mem_init>
  memp_init();
 8004a62:	f000 fbdb 	bl	800521c <memp_init>
  pbuf_init();
  netif_init();
 8004a66:	f000 fcd9 	bl	800541c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004a6a:	f007 f8f9 	bl	800bc60 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004a6e:	f001 fe51 	bl	8006714 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004a72:	f007 f86b 	bl	800bb4c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <ptr_to_mem+0x20>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	4413      	add	r3, r2
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20005868 	.word	0x20005868

08004aa4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <mem_to_ptr+0x20>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	b29b      	uxth	r3, r3
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20005868 	.word	0x20005868

08004ac8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004ac8:	b590      	push	{r4, r7, lr}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004ad0:	4b45      	ldr	r3, [pc, #276]	; (8004be8 <plug_holes+0x120>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d206      	bcs.n	8004ae8 <plug_holes+0x20>
 8004ada:	4b44      	ldr	r3, [pc, #272]	; (8004bec <plug_holes+0x124>)
 8004adc:	f240 12df 	movw	r2, #479	; 0x1df
 8004ae0:	4943      	ldr	r1, [pc, #268]	; (8004bf0 <plug_holes+0x128>)
 8004ae2:	4844      	ldr	r0, [pc, #272]	; (8004bf4 <plug_holes+0x12c>)
 8004ae4:	f00a fa86 	bl	800eff4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004ae8:	4b43      	ldr	r3, [pc, #268]	; (8004bf8 <plug_holes+0x130>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d306      	bcc.n	8004b00 <plug_holes+0x38>
 8004af2:	4b3e      	ldr	r3, [pc, #248]	; (8004bec <plug_holes+0x124>)
 8004af4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004af8:	4940      	ldr	r1, [pc, #256]	; (8004bfc <plug_holes+0x134>)
 8004afa:	483e      	ldr	r0, [pc, #248]	; (8004bf4 <plug_holes+0x12c>)
 8004afc:	f00a fa7a 	bl	800eff4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	791b      	ldrb	r3, [r3, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d006      	beq.n	8004b16 <plug_holes+0x4e>
 8004b08:	4b38      	ldr	r3, [pc, #224]	; (8004bec <plug_holes+0x124>)
 8004b0a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004b0e:	493c      	ldr	r1, [pc, #240]	; (8004c00 <plug_holes+0x138>)
 8004b10:	4838      	ldr	r0, [pc, #224]	; (8004bf4 <plug_holes+0x12c>)
 8004b12:	f00a fa6f 	bl	800eff4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b1e:	d906      	bls.n	8004b2e <plug_holes+0x66>
 8004b20:	4b32      	ldr	r3, [pc, #200]	; (8004bec <plug_holes+0x124>)
 8004b22:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004b26:	4937      	ldr	r1, [pc, #220]	; (8004c04 <plug_holes+0x13c>)
 8004b28:	4832      	ldr	r0, [pc, #200]	; (8004bf4 <plug_holes+0x12c>)
 8004b2a:	f00a fa63 	bl	800eff4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ffa4 	bl	8004a80 <ptr_to_mem>
 8004b38:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d024      	beq.n	8004b8c <plug_holes+0xc4>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	791b      	ldrb	r3, [r3, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d120      	bne.n	8004b8c <plug_holes+0xc4>
 8004b4a:	4b2b      	ldr	r3, [pc, #172]	; (8004bf8 <plug_holes+0x130>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d01b      	beq.n	8004b8c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004b54:	4b2c      	ldr	r3, [pc, #176]	; (8004c08 <plug_holes+0x140>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d102      	bne.n	8004b64 <plug_holes+0x9c>
      lfree = mem;
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	; (8004c08 <plug_holes+0x140>)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	881a      	ldrh	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b74:	d00a      	beq.n	8004b8c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	881b      	ldrh	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff80 	bl	8004a80 <ptr_to_mem>
 8004b80:	4604      	mov	r4, r0
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff ff8e 	bl	8004aa4 <mem_to_ptr>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	885b      	ldrh	r3, [r3, #2]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff ff75 	bl	8004a80 <ptr_to_mem>
 8004b96:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d01f      	beq.n	8004be0 <plug_holes+0x118>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	791b      	ldrb	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d11b      	bne.n	8004be0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004ba8:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <plug_holes+0x140>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d102      	bne.n	8004bb8 <plug_holes+0xf0>
      lfree = pmem;
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <plug_holes+0x140>)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	881a      	ldrh	r2, [r3, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bc8:	d00a      	beq.n	8004be0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff ff56 	bl	8004a80 <ptr_to_mem>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	68b8      	ldr	r0, [r7, #8]
 8004bd8:	f7ff ff64 	bl	8004aa4 <mem_to_ptr>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd90      	pop	{r4, r7, pc}
 8004be8:	20005868 	.word	0x20005868
 8004bec:	08010230 	.word	0x08010230
 8004bf0:	08010260 	.word	0x08010260
 8004bf4:	08010278 	.word	0x08010278
 8004bf8:	2000586c 	.word	0x2000586c
 8004bfc:	080102a0 	.word	0x080102a0
 8004c00:	080102bc 	.word	0x080102bc
 8004c04:	080102d8 	.word	0x080102d8
 8004c08:	20005870 	.word	0x20005870

08004c0c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004c12:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <mem_init+0x68>)
 8004c14:	3303      	adds	r3, #3
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <mem_init+0x6c>)
 8004c1e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004c20:	4b15      	ldr	r3, [pc, #84]	; (8004c78 <mem_init+0x6c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c2c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004c3a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004c3e:	f7ff ff1f 	bl	8004a80 <ptr_to_mem>
 8004c42:	4603      	mov	r3, r0
 8004c44:	4a0d      	ldr	r2, [pc, #52]	; (8004c7c <mem_init+0x70>)
 8004c46:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <mem_init+0x70>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <mem_init+0x70>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c58:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004c5a:	4b08      	ldr	r3, [pc, #32]	; (8004c7c <mem_init+0x70>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c62:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <mem_init+0x6c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a05      	ldr	r2, [pc, #20]	; (8004c80 <mem_init+0x74>)
 8004c6a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20005214 	.word	0x20005214
 8004c78:	20005868 	.word	0x20005868
 8004c7c:	2000586c 	.word	0x2000586c
 8004c80:	20005870 	.word	0x20005870

08004c84 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff ff09 	bl	8004aa4 <mem_to_ptr>
 8004c92:	4603      	mov	r3, r0
 8004c94:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff fef0 	bl	8004a80 <ptr_to_mem>
 8004ca0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	885b      	ldrh	r3, [r3, #2]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff feea 	bl	8004a80 <ptr_to_mem>
 8004cac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cb6:	d818      	bhi.n	8004cea <mem_link_valid+0x66>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	885b      	ldrh	r3, [r3, #2]
 8004cbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cc0:	d813      	bhi.n	8004cea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004cc6:	8afa      	ldrh	r2, [r7, #22]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d004      	beq.n	8004cd6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	8afa      	ldrh	r2, [r7, #22]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d109      	bne.n	8004cea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <mem_link_valid+0x74>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d006      	beq.n	8004cee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	885b      	ldrh	r3, [r3, #2]
 8004ce4:	8afa      	ldrh	r2, [r7, #22]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d001      	beq.n	8004cee <mem_link_valid+0x6a>
    return 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e000      	b.n	8004cf0 <mem_link_valid+0x6c>
  }
  return 1;
 8004cee:	2301      	movs	r3, #1
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	2000586c 	.word	0x2000586c

08004cfc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d04c      	beq.n	8004da4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <mem_free+0xb0>)
 8004d16:	f240 2273 	movw	r2, #627	; 0x273
 8004d1a:	4925      	ldr	r1, [pc, #148]	; (8004db0 <mem_free+0xb4>)
 8004d1c:	4825      	ldr	r0, [pc, #148]	; (8004db4 <mem_free+0xb8>)
 8004d1e:	f00a f969 	bl	800eff4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d22:	e040      	b.n	8004da6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3b08      	subs	r3, #8
 8004d28:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004d2a:	4b23      	ldr	r3, [pc, #140]	; (8004db8 <mem_free+0xbc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d306      	bcc.n	8004d42 <mem_free+0x46>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f103 020c 	add.w	r2, r3, #12
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <mem_free+0xc0>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d907      	bls.n	8004d52 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004d42:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <mem_free+0xb0>)
 8004d44:	f240 227f 	movw	r2, #639	; 0x27f
 8004d48:	491d      	ldr	r1, [pc, #116]	; (8004dc0 <mem_free+0xc4>)
 8004d4a:	481a      	ldr	r0, [pc, #104]	; (8004db4 <mem_free+0xb8>)
 8004d4c:	f00a f952 	bl	800eff4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d50:	e029      	b.n	8004da6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	791b      	ldrb	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <mem_free+0xb0>)
 8004d5c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004d60:	4918      	ldr	r1, [pc, #96]	; (8004dc4 <mem_free+0xc8>)
 8004d62:	4814      	ldr	r0, [pc, #80]	; (8004db4 <mem_free+0xb8>)
 8004d64:	f00a f946 	bl	800eff4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d68:	e01d      	b.n	8004da6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff ff8a 	bl	8004c84 <mem_link_valid>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d107      	bne.n	8004d86 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004d76:	4b0d      	ldr	r3, [pc, #52]	; (8004dac <mem_free+0xb0>)
 8004d78:	f240 2295 	movw	r2, #661	; 0x295
 8004d7c:	4912      	ldr	r1, [pc, #72]	; (8004dc8 <mem_free+0xcc>)
 8004d7e:	480d      	ldr	r0, [pc, #52]	; (8004db4 <mem_free+0xb8>)
 8004d80:	f00a f938 	bl	800eff4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d84:	e00f      	b.n	8004da6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <mem_free+0xd0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d202      	bcs.n	8004d9c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004d96:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <mem_free+0xd0>)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f7ff fe93 	bl	8004ac8 <plug_holes>
 8004da2:	e000      	b.n	8004da6 <mem_free+0xaa>
    return;
 8004da4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	08010230 	.word	0x08010230
 8004db0:	08010304 	.word	0x08010304
 8004db4:	08010278 	.word	0x08010278
 8004db8:	20005868 	.word	0x20005868
 8004dbc:	2000586c 	.word	0x2000586c
 8004dc0:	08010328 	.word	0x08010328
 8004dc4:	08010344 	.word	0x08010344
 8004dc8:	0801036c 	.word	0x0801036c
 8004dcc:	20005870 	.word	0x20005870

08004dd0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b088      	sub	sp, #32
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004ddc:	887b      	ldrh	r3, [r7, #2]
 8004dde:	3303      	adds	r3, #3
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004de8:	8bfb      	ldrh	r3, [r7, #30]
 8004dea:	2b0b      	cmp	r3, #11
 8004dec:	d801      	bhi.n	8004df2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004dee:	230c      	movs	r3, #12
 8004df0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004df2:	8bfb      	ldrh	r3, [r7, #30]
 8004df4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004df8:	d803      	bhi.n	8004e02 <mem_trim+0x32>
 8004dfa:	8bfa      	ldrh	r2, [r7, #30]
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d201      	bcs.n	8004e06 <mem_trim+0x36>
    return NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e0cc      	b.n	8004fa0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004e06:	4b68      	ldr	r3, [pc, #416]	; (8004fa8 <mem_trim+0x1d8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d304      	bcc.n	8004e1a <mem_trim+0x4a>
 8004e10:	4b66      	ldr	r3, [pc, #408]	; (8004fac <mem_trim+0x1dc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d306      	bcc.n	8004e28 <mem_trim+0x58>
 8004e1a:	4b65      	ldr	r3, [pc, #404]	; (8004fb0 <mem_trim+0x1e0>)
 8004e1c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004e20:	4964      	ldr	r1, [pc, #400]	; (8004fb4 <mem_trim+0x1e4>)
 8004e22:	4865      	ldr	r0, [pc, #404]	; (8004fb8 <mem_trim+0x1e8>)
 8004e24:	f00a f8e6 	bl	800eff4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004e28:	4b5f      	ldr	r3, [pc, #380]	; (8004fa8 <mem_trim+0x1d8>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d304      	bcc.n	8004e3c <mem_trim+0x6c>
 8004e32:	4b5e      	ldr	r3, [pc, #376]	; (8004fac <mem_trim+0x1dc>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d301      	bcc.n	8004e40 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	e0af      	b.n	8004fa0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3b08      	subs	r3, #8
 8004e44:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004e46:	69b8      	ldr	r0, [r7, #24]
 8004e48:	f7ff fe2c 	bl	8004aa4 <mem_to_ptr>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	881a      	ldrh	r2, [r3, #0]
 8004e54:	8afb      	ldrh	r3, [r7, #22]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b08      	subs	r3, #8
 8004e5c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004e5e:	8bfa      	ldrh	r2, [r7, #30]
 8004e60:	8abb      	ldrh	r3, [r7, #20]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d906      	bls.n	8004e74 <mem_trim+0xa4>
 8004e66:	4b52      	ldr	r3, [pc, #328]	; (8004fb0 <mem_trim+0x1e0>)
 8004e68:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004e6c:	4953      	ldr	r1, [pc, #332]	; (8004fbc <mem_trim+0x1ec>)
 8004e6e:	4852      	ldr	r0, [pc, #328]	; (8004fb8 <mem_trim+0x1e8>)
 8004e70:	f00a f8c0 	bl	800eff4 <iprintf>
  if (newsize > size) {
 8004e74:	8bfa      	ldrh	r2, [r7, #30]
 8004e76:	8abb      	ldrh	r3, [r7, #20]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d901      	bls.n	8004e80 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	e08f      	b.n	8004fa0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004e80:	8bfa      	ldrh	r2, [r7, #30]
 8004e82:	8abb      	ldrh	r3, [r7, #20]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d101      	bne.n	8004e8c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	e089      	b.n	8004fa0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fdf5 	bl	8004a80 <ptr_to_mem>
 8004e96:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	791b      	ldrb	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d13f      	bne.n	8004f20 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ea8:	d106      	bne.n	8004eb8 <mem_trim+0xe8>
 8004eaa:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <mem_trim+0x1e0>)
 8004eac:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004eb0:	4943      	ldr	r1, [pc, #268]	; (8004fc0 <mem_trim+0x1f0>)
 8004eb2:	4841      	ldr	r0, [pc, #260]	; (8004fb8 <mem_trim+0x1e8>)
 8004eb4:	f00a f89e 	bl	800eff4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004ebe:	8afa      	ldrh	r2, [r7, #22]
 8004ec0:	8bfb      	ldrh	r3, [r7, #30]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004eca:	4b3e      	ldr	r3, [pc, #248]	; (8004fc4 <mem_trim+0x1f4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d106      	bne.n	8004ee2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004ed4:	89fb      	ldrh	r3, [r7, #14]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fdd2 	bl	8004a80 <ptr_to_mem>
 8004edc:	4603      	mov	r3, r0
 8004ede:	4a39      	ldr	r2, [pc, #228]	; (8004fc4 <mem_trim+0x1f4>)
 8004ee0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004ee2:	89fb      	ldrh	r3, [r7, #14]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fdcb 	bl	8004a80 <ptr_to_mem>
 8004eea:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	89ba      	ldrh	r2, [r7, #12]
 8004ef6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	8afa      	ldrh	r2, [r7, #22]
 8004efc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	89fa      	ldrh	r2, [r7, #14]
 8004f02:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f0c:	d047      	beq.n	8004f9e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff fdb4 	bl	8004a80 <ptr_to_mem>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	89fb      	ldrh	r3, [r7, #14]
 8004f1c:	8053      	strh	r3, [r2, #2]
 8004f1e:	e03e      	b.n	8004f9e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004f20:	8bfb      	ldrh	r3, [r7, #30]
 8004f22:	f103 0214 	add.w	r2, r3, #20
 8004f26:	8abb      	ldrh	r3, [r7, #20]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d838      	bhi.n	8004f9e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004f2c:	8afa      	ldrh	r2, [r7, #22]
 8004f2e:	8bfb      	ldrh	r3, [r7, #30]
 8004f30:	4413      	add	r3, r2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3308      	adds	r3, #8
 8004f36:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f40:	d106      	bne.n	8004f50 <mem_trim+0x180>
 8004f42:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <mem_trim+0x1e0>)
 8004f44:	f240 3216 	movw	r2, #790	; 0x316
 8004f48:	491d      	ldr	r1, [pc, #116]	; (8004fc0 <mem_trim+0x1f0>)
 8004f4a:	481b      	ldr	r0, [pc, #108]	; (8004fb8 <mem_trim+0x1e8>)
 8004f4c:	f00a f852 	bl	800eff4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004f50:	89fb      	ldrh	r3, [r7, #14]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fd94 	bl	8004a80 <ptr_to_mem>
 8004f58:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <mem_trim+0x1f4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d202      	bcs.n	8004f6a <mem_trim+0x19a>
      lfree = mem2;
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <mem_trim+0x1f4>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	881a      	ldrh	r2, [r3, #0]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	8afa      	ldrh	r2, [r7, #22]
 8004f7c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	89fa      	ldrh	r2, [r7, #14]
 8004f82:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f8c:	d007      	beq.n	8004f9e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	881b      	ldrh	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fd74 	bl	8004a80 <ptr_to_mem>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	89fb      	ldrh	r3, [r7, #14]
 8004f9c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004f9e:	687b      	ldr	r3, [r7, #4]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20005868 	.word	0x20005868
 8004fac:	2000586c 	.word	0x2000586c
 8004fb0:	08010230 	.word	0x08010230
 8004fb4:	080103a0 	.word	0x080103a0
 8004fb8:	08010278 	.word	0x08010278
 8004fbc:	080103b8 	.word	0x080103b8
 8004fc0:	080103d8 	.word	0x080103d8
 8004fc4:	20005870 	.word	0x20005870

08004fc8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <mem_malloc+0x14>
    return NULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	e0d9      	b.n	8005190 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004fdc:	88fb      	ldrh	r3, [r7, #6]
 8004fde:	3303      	adds	r3, #3
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	f023 0303 	bic.w	r3, r3, #3
 8004fe6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004fe8:	8bbb      	ldrh	r3, [r7, #28]
 8004fea:	2b0b      	cmp	r3, #11
 8004fec:	d801      	bhi.n	8004ff2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004fee:	230c      	movs	r3, #12
 8004ff0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004ff2:	8bbb      	ldrh	r3, [r7, #28]
 8004ff4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ff8:	d803      	bhi.n	8005002 <mem_malloc+0x3a>
 8004ffa:	8bba      	ldrh	r2, [r7, #28]
 8004ffc:	88fb      	ldrh	r3, [r7, #6]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d201      	bcs.n	8005006 <mem_malloc+0x3e>
    return NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	e0c4      	b.n	8005190 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005006:	4b64      	ldr	r3, [pc, #400]	; (8005198 <mem_malloc+0x1d0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fd4a 	bl	8004aa4 <mem_to_ptr>
 8005010:	4603      	mov	r3, r0
 8005012:	83fb      	strh	r3, [r7, #30]
 8005014:	e0b4      	b.n	8005180 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005016:	8bfb      	ldrh	r3, [r7, #30]
 8005018:	4618      	mov	r0, r3
 800501a:	f7ff fd31 	bl	8004a80 <ptr_to_mem>
 800501e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	791b      	ldrb	r3, [r3, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 80a4 	bne.w	8005172 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	8bfb      	ldrh	r3, [r7, #30]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f1a3 0208 	sub.w	r2, r3, #8
 8005038:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800503a:	429a      	cmp	r2, r3
 800503c:	f0c0 8099 	bcc.w	8005172 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	461a      	mov	r2, r3
 8005046:	8bfb      	ldrh	r3, [r7, #30]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	f1a3 0208 	sub.w	r2, r3, #8
 800504e:	8bbb      	ldrh	r3, [r7, #28]
 8005050:	3314      	adds	r3, #20
 8005052:	429a      	cmp	r2, r3
 8005054:	d333      	bcc.n	80050be <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005056:	8bfa      	ldrh	r2, [r7, #30]
 8005058:	8bbb      	ldrh	r3, [r7, #28]
 800505a:	4413      	add	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	3308      	adds	r3, #8
 8005060:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005062:	8a7b      	ldrh	r3, [r7, #18]
 8005064:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005068:	d106      	bne.n	8005078 <mem_malloc+0xb0>
 800506a:	4b4c      	ldr	r3, [pc, #304]	; (800519c <mem_malloc+0x1d4>)
 800506c:	f240 3287 	movw	r2, #903	; 0x387
 8005070:	494b      	ldr	r1, [pc, #300]	; (80051a0 <mem_malloc+0x1d8>)
 8005072:	484c      	ldr	r0, [pc, #304]	; (80051a4 <mem_malloc+0x1dc>)
 8005074:	f009 ffbe 	bl	800eff4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005078:	8a7b      	ldrh	r3, [r7, #18]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fd00 	bl	8004a80 <ptr_to_mem>
 8005080:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	881a      	ldrh	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8bfa      	ldrh	r2, [r7, #30]
 8005094:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	8a7a      	ldrh	r2, [r7, #18]
 800509a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	2201      	movs	r2, #1
 80050a0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050aa:	d00b      	beq.n	80050c4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	881b      	ldrh	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fce5 	bl	8004a80 <ptr_to_mem>
 80050b6:	4602      	mov	r2, r0
 80050b8:	8a7b      	ldrh	r3, [r7, #18]
 80050ba:	8053      	strh	r3, [r2, #2]
 80050bc:	e002      	b.n	80050c4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2201      	movs	r2, #1
 80050c2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80050c4:	4b34      	ldr	r3, [pc, #208]	; (8005198 <mem_malloc+0x1d0>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d127      	bne.n	800511e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80050ce:	4b32      	ldr	r3, [pc, #200]	; (8005198 <mem_malloc+0x1d0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80050d4:	e005      	b.n	80050e2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fcd0 	bl	8004a80 <ptr_to_mem>
 80050e0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	791b      	ldrb	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <mem_malloc+0x12c>
 80050ea:	4b2f      	ldr	r3, [pc, #188]	; (80051a8 <mem_malloc+0x1e0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1f0      	bne.n	80050d6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80050f4:	4a28      	ldr	r2, [pc, #160]	; (8005198 <mem_malloc+0x1d0>)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80050fa:	4b27      	ldr	r3, [pc, #156]	; (8005198 <mem_malloc+0x1d0>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <mem_malloc+0x1e0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d00b      	beq.n	800511e <mem_malloc+0x156>
 8005106:	4b24      	ldr	r3, [pc, #144]	; (8005198 <mem_malloc+0x1d0>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	791b      	ldrb	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d006      	beq.n	800511e <mem_malloc+0x156>
 8005110:	4b22      	ldr	r3, [pc, #136]	; (800519c <mem_malloc+0x1d4>)
 8005112:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005116:	4925      	ldr	r1, [pc, #148]	; (80051ac <mem_malloc+0x1e4>)
 8005118:	4822      	ldr	r0, [pc, #136]	; (80051a4 <mem_malloc+0x1dc>)
 800511a:	f009 ff6b 	bl	800eff4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800511e:	8bba      	ldrh	r2, [r7, #28]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	3308      	adds	r3, #8
 8005126:	4a20      	ldr	r2, [pc, #128]	; (80051a8 <mem_malloc+0x1e0>)
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	4293      	cmp	r3, r2
 800512c:	d906      	bls.n	800513c <mem_malloc+0x174>
 800512e:	4b1b      	ldr	r3, [pc, #108]	; (800519c <mem_malloc+0x1d4>)
 8005130:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005134:	491e      	ldr	r1, [pc, #120]	; (80051b0 <mem_malloc+0x1e8>)
 8005136:	481b      	ldr	r0, [pc, #108]	; (80051a4 <mem_malloc+0x1dc>)
 8005138:	f009 ff5c 	bl	800eff4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d006      	beq.n	8005154 <mem_malloc+0x18c>
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <mem_malloc+0x1d4>)
 8005148:	f240 32bb 	movw	r2, #955	; 0x3bb
 800514c:	4919      	ldr	r1, [pc, #100]	; (80051b4 <mem_malloc+0x1ec>)
 800514e:	4815      	ldr	r0, [pc, #84]	; (80051a4 <mem_malloc+0x1dc>)
 8005150:	f009 ff50 	bl	800eff4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <mem_malloc+0x1a4>
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <mem_malloc+0x1d4>)
 8005160:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005164:	4914      	ldr	r1, [pc, #80]	; (80051b8 <mem_malloc+0x1f0>)
 8005166:	480f      	ldr	r0, [pc, #60]	; (80051a4 <mem_malloc+0x1dc>)
 8005168:	f009 ff44 	bl	800eff4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3308      	adds	r3, #8
 8005170:	e00e      	b.n	8005190 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005172:	8bfb      	ldrh	r3, [r7, #30]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fc83 	bl	8004a80 <ptr_to_mem>
 800517a:	4603      	mov	r3, r0
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005180:	8bfa      	ldrh	r2, [r7, #30]
 8005182:	8bbb      	ldrh	r3, [r7, #28]
 8005184:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005188:	429a      	cmp	r2, r3
 800518a:	f4ff af44 	bcc.w	8005016 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20005870 	.word	0x20005870
 800519c:	08010230 	.word	0x08010230
 80051a0:	080103d8 	.word	0x080103d8
 80051a4:	08010278 	.word	0x08010278
 80051a8:	2000586c 	.word	0x2000586c
 80051ac:	080103ec 	.word	0x080103ec
 80051b0:	08010408 	.word	0x08010408
 80051b4:	08010438 	.word	0x08010438
 80051b8:	08010468 	.word	0x08010468

080051bc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	3303      	adds	r3, #3
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e011      	b.n	8005202 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	4413      	add	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	885b      	ldrh	r3, [r3, #2]
 8005206:	461a      	mov	r2, r3
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4293      	cmp	r3, r2
 800520c:	dbe7      	blt.n	80051de <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005222:	2300      	movs	r3, #0
 8005224:	80fb      	strh	r3, [r7, #6]
 8005226:	e009      	b.n	800523c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	4a08      	ldr	r2, [pc, #32]	; (800524c <memp_init+0x30>)
 800522c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ffc3 	bl	80051bc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	3301      	adds	r3, #1
 800523a:	80fb      	strh	r3, [r7, #6]
 800523c:	88fb      	ldrh	r3, [r7, #6]
 800523e:	2b08      	cmp	r3, #8
 8005240:	d9f2      	bls.n	8005228 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	08012c4c 	.word	0x08012c4c

08005250 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d012      	beq.n	800528c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	6812      	ldr	r2, [r2, #0]
 800526e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d006      	beq.n	8005288 <do_memp_malloc_pool+0x38>
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <do_memp_malloc_pool+0x48>)
 800527c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005280:	4906      	ldr	r1, [pc, #24]	; (800529c <do_memp_malloc_pool+0x4c>)
 8005282:	4807      	ldr	r0, [pc, #28]	; (80052a0 <do_memp_malloc_pool+0x50>)
 8005284:	f009 feb6 	bl	800eff4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	e000      	b.n	800528e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	0801048c 	.word	0x0801048c
 800529c:	080104bc 	.word	0x080104bc
 80052a0:	080104e0 	.word	0x080104e0

080052a4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <memp_malloc_pool+0x1c>
 80052b2:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <memp_malloc_pool+0x38>)
 80052b4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80052b8:	4909      	ldr	r1, [pc, #36]	; (80052e0 <memp_malloc_pool+0x3c>)
 80052ba:	480a      	ldr	r0, [pc, #40]	; (80052e4 <memp_malloc_pool+0x40>)
 80052bc:	f009 fe9a 	bl	800eff4 <iprintf>
  if (desc == NULL) {
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <memp_malloc_pool+0x26>
    return NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	e003      	b.n	80052d2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff ffc0 	bl	8005250 <do_memp_malloc_pool>
 80052d0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	0801048c 	.word	0x0801048c
 80052e0:	08010508 	.word	0x08010508
 80052e4:	080104e0 	.word	0x080104e0

080052e8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d908      	bls.n	800530a <memp_malloc+0x22>
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <memp_malloc+0x3c>)
 80052fa:	f240 1257 	movw	r2, #343	; 0x157
 80052fe:	490a      	ldr	r1, [pc, #40]	; (8005328 <memp_malloc+0x40>)
 8005300:	480a      	ldr	r0, [pc, #40]	; (800532c <memp_malloc+0x44>)
 8005302:	f009 fe77 	bl	800eff4 <iprintf>
 8005306:	2300      	movs	r3, #0
 8005308:	e008      	b.n	800531c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	4a08      	ldr	r2, [pc, #32]	; (8005330 <memp_malloc+0x48>)
 800530e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff ff9c 	bl	8005250 <do_memp_malloc_pool>
 8005318:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800531a:	68fb      	ldr	r3, [r7, #12]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	0801048c 	.word	0x0801048c
 8005328:	0801051c 	.word	0x0801051c
 800532c:	080104e0 	.word	0x080104e0
 8005330:	08012c4c 	.word	0x08012c4c

08005334 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d006      	beq.n	8005356 <do_memp_free_pool+0x22>
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <do_memp_free_pool+0x40>)
 800534a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800534e:	490a      	ldr	r1, [pc, #40]	; (8005378 <do_memp_free_pool+0x44>)
 8005350:	480a      	ldr	r0, [pc, #40]	; (800537c <do_memp_free_pool+0x48>)
 8005352:	f009 fe4f 	bl	800eff4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	0801048c 	.word	0x0801048c
 8005378:	0801053c 	.word	0x0801053c
 800537c:	080104e0 	.word	0x080104e0

08005380 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d106      	bne.n	800539e <memp_free_pool+0x1e>
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <memp_free_pool+0x3c>)
 8005392:	f240 1295 	movw	r2, #405	; 0x195
 8005396:	490a      	ldr	r1, [pc, #40]	; (80053c0 <memp_free_pool+0x40>)
 8005398:	480a      	ldr	r0, [pc, #40]	; (80053c4 <memp_free_pool+0x44>)
 800539a:	f009 fe2b 	bl	800eff4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <memp_free_pool+0x34>
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d004      	beq.n	80053b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff ffc1 	bl	8005334 <do_memp_free_pool>
 80053b2:	e000      	b.n	80053b6 <memp_free_pool+0x36>
    return;
 80053b4:	bf00      	nop
}
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	0801048c 	.word	0x0801048c
 80053c0:	08010508 	.word	0x08010508
 80053c4:	080104e0 	.word	0x080104e0

080053c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	6039      	str	r1, [r7, #0]
 80053d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d907      	bls.n	80053ea <memp_free+0x22>
 80053da:	4b0c      	ldr	r3, [pc, #48]	; (800540c <memp_free+0x44>)
 80053dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80053e0:	490b      	ldr	r1, [pc, #44]	; (8005410 <memp_free+0x48>)
 80053e2:	480c      	ldr	r0, [pc, #48]	; (8005414 <memp_free+0x4c>)
 80053e4:	f009 fe06 	bl	800eff4 <iprintf>
 80053e8:	e00c      	b.n	8005404 <memp_free+0x3c>

  if (mem == NULL) {
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <memp_free+0x50>)
 80053f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff ff9a 	bl	8005334 <do_memp_free_pool>
 8005400:	e000      	b.n	8005404 <memp_free+0x3c>
    return;
 8005402:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	0801048c 	.word	0x0801048c
 8005410:	0801055c 	.word	0x0801055c
 8005414:	080104e0 	.word	0x080104e0
 8005418:	08012c4c 	.word	0x08012c4c

0800541c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
	...

0800542c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d108      	bne.n	8005452 <netif_add+0x26>
 8005440:	4b57      	ldr	r3, [pc, #348]	; (80055a0 <netif_add+0x174>)
 8005442:	f240 1227 	movw	r2, #295	; 0x127
 8005446:	4957      	ldr	r1, [pc, #348]	; (80055a4 <netif_add+0x178>)
 8005448:	4857      	ldr	r0, [pc, #348]	; (80055a8 <netif_add+0x17c>)
 800544a:	f009 fdd3 	bl	800eff4 <iprintf>
 800544e:	2300      	movs	r3, #0
 8005450:	e0a2      	b.n	8005598 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <netif_add+0x3e>
 8005458:	4b51      	ldr	r3, [pc, #324]	; (80055a0 <netif_add+0x174>)
 800545a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800545e:	4953      	ldr	r1, [pc, #332]	; (80055ac <netif_add+0x180>)
 8005460:	4851      	ldr	r0, [pc, #324]	; (80055a8 <netif_add+0x17c>)
 8005462:	f009 fdc7 	bl	800eff4 <iprintf>
 8005466:	2300      	movs	r3, #0
 8005468:	e096      	b.n	8005598 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005470:	4b4f      	ldr	r3, [pc, #316]	; (80055b0 <netif_add+0x184>)
 8005472:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800547a:	4b4d      	ldr	r3, [pc, #308]	; (80055b0 <netif_add+0x184>)
 800547c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005484:	4b4a      	ldr	r3, [pc, #296]	; (80055b0 <netif_add+0x184>)
 8005486:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a45      	ldr	r2, [pc, #276]	; (80055b4 <netif_add+0x188>)
 800549e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a3a      	ldr	r2, [r7, #32]
 80054b8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80054ba:	4b3f      	ldr	r3, [pc, #252]	; (80055b8 <netif_add+0x18c>)
 80054bc:	781a      	ldrb	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f913 	bl	80056fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	4798      	blx	r3
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <netif_add+0xba>
    return NULL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e058      	b.n	8005598 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054ec:	2bff      	cmp	r3, #255	; 0xff
 80054ee:	d103      	bne.n	80054f8 <netif_add+0xcc>
        netif->num = 0;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80054f8:	2300      	movs	r3, #0
 80054fa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80054fc:	4b2f      	ldr	r3, [pc, #188]	; (80055bc <netif_add+0x190>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e02b      	b.n	800555c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	429a      	cmp	r2, r3
 800550a:	d106      	bne.n	800551a <netif_add+0xee>
 800550c:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <netif_add+0x174>)
 800550e:	f240 128b 	movw	r2, #395	; 0x18b
 8005512:	492b      	ldr	r1, [pc, #172]	; (80055c0 <netif_add+0x194>)
 8005514:	4824      	ldr	r0, [pc, #144]	; (80055a8 <netif_add+0x17c>)
 8005516:	f009 fd6d 	bl	800eff4 <iprintf>
        num_netifs++;
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	3301      	adds	r3, #1
 800551e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	2bff      	cmp	r3, #255	; 0xff
 8005524:	dd06      	ble.n	8005534 <netif_add+0x108>
 8005526:	4b1e      	ldr	r3, [pc, #120]	; (80055a0 <netif_add+0x174>)
 8005528:	f240 128d 	movw	r2, #397	; 0x18d
 800552c:	4925      	ldr	r1, [pc, #148]	; (80055c4 <netif_add+0x198>)
 800552e:	481e      	ldr	r0, [pc, #120]	; (80055a8 <netif_add+0x17c>)
 8005530:	f009 fd60 	bl	800eff4 <iprintf>
        if (netif2->num == netif->num) {
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005540:	429a      	cmp	r2, r3
 8005542:	d108      	bne.n	8005556 <netif_add+0x12a>
          netif->num++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800554a:	3301      	adds	r3, #1
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005554:	e005      	b.n	8005562 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1d0      	bne.n	8005504 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1be      	bne.n	80054e6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800556e:	2bfe      	cmp	r3, #254	; 0xfe
 8005570:	d103      	bne.n	800557a <netif_add+0x14e>
    netif_num = 0;
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <netif_add+0x18c>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
 8005578:	e006      	b.n	8005588 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005580:	3301      	adds	r3, #1
 8005582:	b2da      	uxtb	r2, r3
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <netif_add+0x18c>)
 8005586:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005588:	4b0c      	ldr	r3, [pc, #48]	; (80055bc <netif_add+0x190>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005590:	4a0a      	ldr	r2, [pc, #40]	; (80055bc <netif_add+0x190>)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005596:	68fb      	ldr	r3, [r7, #12]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	08010578 	.word	0x08010578
 80055a4:	0801060c 	.word	0x0801060c
 80055a8:	080105c8 	.word	0x080105c8
 80055ac:	08010628 	.word	0x08010628
 80055b0:	08012cb0 	.word	0x08012cb0
 80055b4:	080059d7 	.word	0x080059d7
 80055b8:	20008768 	.word	0x20008768
 80055bc:	20008760 	.word	0x20008760
 80055c0:	0801064c 	.word	0x0801064c
 80055c4:	08010660 	.word	0x08010660

080055c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80055d2:	6839      	ldr	r1, [r7, #0]
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f002 fbe5 	bl	8007da4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80055da:	6839      	ldr	r1, [r7, #0]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f007 f883 	bl	800c6e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
	...

080055ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <netif_do_set_ipaddr+0x20>
 80055fe:	4b1d      	ldr	r3, [pc, #116]	; (8005674 <netif_do_set_ipaddr+0x88>)
 8005600:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005604:	491c      	ldr	r1, [pc, #112]	; (8005678 <netif_do_set_ipaddr+0x8c>)
 8005606:	481d      	ldr	r0, [pc, #116]	; (800567c <netif_do_set_ipaddr+0x90>)
 8005608:	f009 fcf4 	bl	800eff4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <netif_do_set_ipaddr+0x34>
 8005612:	4b18      	ldr	r3, [pc, #96]	; (8005674 <netif_do_set_ipaddr+0x88>)
 8005614:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005618:	4917      	ldr	r1, [pc, #92]	; (8005678 <netif_do_set_ipaddr+0x8c>)
 800561a:	4818      	ldr	r0, [pc, #96]	; (800567c <netif_do_set_ipaddr+0x90>)
 800561c:	f009 fcea 	bl	800eff4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3304      	adds	r3, #4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d01c      	beq.n	8005668 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3304      	adds	r3, #4
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800563e:	f107 0314 	add.w	r3, r7, #20
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ffbf 	bl	80055c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <netif_do_set_ipaddr+0x6a>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	e000      	b.n	8005658 <netif_do_set_ipaddr+0x6c>
 8005656:	2300      	movs	r3, #0
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800565c:	2101      	movs	r1, #1
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 f8d2 	bl	8005808 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3718      	adds	r7, #24
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	08010578 	.word	0x08010578
 8005678:	08010690 	.word	0x08010690
 800567c:	080105c8 	.word	0x080105c8

08005680 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3308      	adds	r3, #8
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d00a      	beq.n	80056b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <netif_do_set_netmask+0x26>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	e000      	b.n	80056a8 <netif_do_set_netmask+0x28>
 80056a6:	2300      	movs	r3, #0
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80056be:	b480      	push	{r7}
 80056c0:	b085      	sub	sp, #20
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	330c      	adds	r3, #12
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d00a      	beq.n	80056ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <netif_do_set_gw+0x26>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	e000      	b.n	80056e6 <netif_do_set_gw+0x28>
 80056e4:	2300      	movs	r3, #0
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
 8005708:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800570e:	2300      	movs	r3, #0
 8005710:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005718:	4b1c      	ldr	r3, [pc, #112]	; (800578c <netif_set_addr+0x90>)
 800571a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005722:	4b1a      	ldr	r3, [pc, #104]	; (800578c <netif_set_addr+0x90>)
 8005724:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800572c:	4b17      	ldr	r3, [pc, #92]	; (800578c <netif_set_addr+0x90>)
 800572e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <netif_set_addr+0x42>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <netif_set_addr+0x46>
 800573e:	2301      	movs	r3, #1
 8005740:	e000      	b.n	8005744 <netif_set_addr+0x48>
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d006      	beq.n	800575a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800574c:	f107 0310 	add.w	r3, r7, #16
 8005750:	461a      	mov	r2, r3
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ff49 	bl	80055ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800575a:	69fa      	ldr	r2, [r7, #28]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f7ff ff8e 	bl	8005680 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff ffa8 	bl	80056be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d106      	bne.n	8005782 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005774:	f107 0310 	add.w	r3, r7, #16
 8005778:	461a      	mov	r2, r3
 800577a:	68b9      	ldr	r1, [r7, #8]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff ff35 	bl	80055ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005782:	bf00      	nop
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	08012cb0 	.word	0x08012cb0

08005790 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <netif_set_default+0x1c>)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20008764 	.word	0x20008764

080057b0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d107      	bne.n	80057ce <netif_set_up+0x1e>
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <netif_set_up+0x4c>)
 80057c0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80057c4:	490e      	ldr	r1, [pc, #56]	; (8005800 <netif_set_up+0x50>)
 80057c6:	480f      	ldr	r0, [pc, #60]	; (8005804 <netif_set_up+0x54>)
 80057c8:	f009 fc14 	bl	800eff4 <iprintf>
 80057cc:	e013      	b.n	80057f6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10c      	bne.n	80057f6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057e2:	f043 0301 	orr.w	r3, r3, #1
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80057ee:	2103      	movs	r1, #3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f000 f809 	bl	8005808 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	08010578 	.word	0x08010578
 8005800:	08010700 	.word	0x08010700
 8005804:	080105c8 	.word	0x080105c8

08005808 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <netif_issue_reports+0x20>
 800581a:	4b18      	ldr	r3, [pc, #96]	; (800587c <netif_issue_reports+0x74>)
 800581c:	f240 326d 	movw	r2, #877	; 0x36d
 8005820:	4917      	ldr	r1, [pc, #92]	; (8005880 <netif_issue_reports+0x78>)
 8005822:	4818      	ldr	r0, [pc, #96]	; (8005884 <netif_issue_reports+0x7c>)
 8005824:	f009 fbe6 	bl	800eff4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01e      	beq.n	8005874 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800583c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005840:	2b00      	cmp	r3, #0
 8005842:	d017      	beq.n	8005874 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d013      	beq.n	8005876 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3304      	adds	r3, #4
 8005852:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00e      	beq.n	8005876 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800585e:	f003 0308 	and.w	r3, r3, #8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d007      	beq.n	8005876 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	4619      	mov	r1, r3
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f007 fea5 	bl	800d5bc <etharp_request>
 8005872:	e000      	b.n	8005876 <netif_issue_reports+0x6e>
    return;
 8005874:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	08010578 	.word	0x08010578
 8005880:	0801071c 	.word	0x0801071c
 8005884:	080105c8 	.word	0x080105c8

08005888 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d107      	bne.n	80058a6 <netif_set_down+0x1e>
 8005896:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <netif_set_down+0x58>)
 8005898:	f240 329b 	movw	r2, #923	; 0x39b
 800589c:	4911      	ldr	r1, [pc, #68]	; (80058e4 <netif_set_down+0x5c>)
 800589e:	4812      	ldr	r0, [pc, #72]	; (80058e8 <netif_set_down+0x60>)
 80058a0:	f009 fba8 	bl	800eff4 <iprintf>
 80058a4:	e019      	b.n	80058da <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d012      	beq.n	80058da <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f007 fa2f 	bl	800cd38 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80058da:	3708      	adds	r7, #8
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	08010578 	.word	0x08010578
 80058e4:	08010740 	.word	0x08010740
 80058e8:	080105c8 	.word	0x080105c8

080058ec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d107      	bne.n	800590a <netif_set_link_up+0x1e>
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <netif_set_link_up+0x5c>)
 80058fc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005900:	4912      	ldr	r1, [pc, #72]	; (800594c <netif_set_link_up+0x60>)
 8005902:	4813      	ldr	r0, [pc, #76]	; (8005950 <netif_set_link_up+0x64>)
 8005904:	f009 fb76 	bl	800eff4 <iprintf>
 8005908:	e01b      	b.n	8005942 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005910:	f003 0304 	and.w	r3, r3, #4
 8005914:	2b00      	cmp	r3, #0
 8005916:	d114      	bne.n	8005942 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800591e:	f043 0304 	orr.w	r3, r3, #4
 8005922:	b2da      	uxtb	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800592a:	2103      	movs	r1, #3
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff ff6b 	bl	8005808 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d003      	beq.n	8005942 <netif_set_link_up+0x56>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	08010578 	.word	0x08010578
 800594c:	08010760 	.word	0x08010760
 8005950:	080105c8 	.word	0x080105c8

08005954 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d107      	bne.n	8005972 <netif_set_link_down+0x1e>
 8005962:	4b11      	ldr	r3, [pc, #68]	; (80059a8 <netif_set_link_down+0x54>)
 8005964:	f240 4206 	movw	r2, #1030	; 0x406
 8005968:	4910      	ldr	r1, [pc, #64]	; (80059ac <netif_set_link_down+0x58>)
 800596a:	4811      	ldr	r0, [pc, #68]	; (80059b0 <netif_set_link_down+0x5c>)
 800596c:	f009 fb42 	bl	800eff4 <iprintf>
 8005970:	e017      	b.n	80059a2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005978:	f003 0304 	and.w	r3, r3, #4
 800597c:	2b00      	cmp	r3, #0
 800597e:	d010      	beq.n	80059a2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005986:	f023 0304 	bic.w	r3, r3, #4
 800598a:	b2da      	uxtb	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <netif_set_link_down+0x4e>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08010578 	.word	0x08010578
 80059ac:	08010784 	.word	0x08010784
 80059b0:	080105c8 	.word	0x080105c8

080059b4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	61da      	str	r2, [r3, #28]
  }
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b085      	sub	sp, #20
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80059e2:	f06f 030b 	mvn.w	r3, #11
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d013      	beq.n	8005a2c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005a04:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <netif_get_by_index+0x48>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]
 8005a0a:	e00c      	b.n	8005a26 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a12:	3301      	adds	r3, #1
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	79fa      	ldrb	r2, [r7, #7]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d101      	bne.n	8005a20 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	e006      	b.n	8005a2e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ef      	bne.n	8005a0c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	20008760 	.word	0x20008760

08005a40 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005a46:	4b0c      	ldr	r3, [pc, #48]	; (8005a78 <pbuf_free_ooseq+0x38>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <pbuf_free_ooseq+0x3c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	607b      	str	r3, [r7, #4]
 8005a52:	e00a      	b.n	8005a6a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f002 f9df 	bl	8007e20 <tcp_free_ooseq>
      return;
 8005a62:	e005      	b.n	8005a70 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	607b      	str	r3, [r7, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1f1      	bne.n	8005a54 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20008769 	.word	0x20008769
 8005a7c:	20008778 	.word	0x20008778

08005a80 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005a84:	4b03      	ldr	r3, [pc, #12]	; (8005a94 <pbuf_pool_is_empty+0x14>)
 8005a86:	2201      	movs	r2, #1
 8005a88:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005a8a:	bf00      	nop
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	20008769 	.word	0x20008769

08005a98 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	80fb      	strh	r3, [r7, #6]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	88fa      	ldrh	r2, [r7, #6]
 8005abe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	88ba      	ldrh	r2, [r7, #4]
 8005ac4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005ac6:	8b3b      	ldrh	r3, [r7, #24]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	7f3a      	ldrb	r2, [r7, #28]
 8005ad2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	73da      	strb	r2, [r3, #15]
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08c      	sub	sp, #48	; 0x30
 8005af0:	af02      	add	r7, sp, #8
 8005af2:	4603      	mov	r3, r0
 8005af4:	71fb      	strb	r3, [r7, #7]
 8005af6:	460b      	mov	r3, r1
 8005af8:	80bb      	strh	r3, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005b02:	887b      	ldrh	r3, [r7, #2]
 8005b04:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b08:	d07f      	beq.n	8005c0a <pbuf_alloc+0x11e>
 8005b0a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005b0e:	f300 80c8 	bgt.w	8005ca2 <pbuf_alloc+0x1b6>
 8005b12:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b16:	d010      	beq.n	8005b3a <pbuf_alloc+0x4e>
 8005b18:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005b1c:	f300 80c1 	bgt.w	8005ca2 <pbuf_alloc+0x1b6>
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d002      	beq.n	8005b2a <pbuf_alloc+0x3e>
 8005b24:	2b41      	cmp	r3, #65	; 0x41
 8005b26:	f040 80bc 	bne.w	8005ca2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005b2a:	887a      	ldrh	r2, [r7, #2]
 8005b2c:	88bb      	ldrh	r3, [r7, #4]
 8005b2e:	4619      	mov	r1, r3
 8005b30:	2000      	movs	r0, #0
 8005b32:	f000 f8d1 	bl	8005cd8 <pbuf_alloc_reference>
 8005b36:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005b38:	e0bd      	b.n	8005cb6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005b42:	88bb      	ldrh	r3, [r7, #4]
 8005b44:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005b46:	2008      	movs	r0, #8
 8005b48:	f7ff fbce 	bl	80052e8 <memp_malloc>
 8005b4c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d109      	bne.n	8005b68 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005b54:	f7ff ff94 	bl	8005a80 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005b5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b60:	f000 faa8 	bl	80060b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	e0a7      	b.n	8005cb8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005b68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b6a:	3303      	adds	r3, #3
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	8b7a      	ldrh	r2, [r7, #26]
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	bf28      	it	cs
 8005b80:	4613      	movcs	r3, r2
 8005b82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b86:	3310      	adds	r3, #16
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	3303      	adds	r3, #3
 8005b8e:	f023 0303 	bic.w	r3, r3, #3
 8005b92:	4618      	mov	r0, r3
 8005b94:	89f9      	ldrh	r1, [r7, #14]
 8005b96:	8b7a      	ldrh	r2, [r7, #26]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	887b      	ldrh	r3, [r7, #2]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	6938      	ldr	r0, [r7, #16]
 8005ba6:	f7ff ff77 	bl	8005a98 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d006      	beq.n	8005bc4 <pbuf_alloc+0xd8>
 8005bb6:	4b42      	ldr	r3, [pc, #264]	; (8005cc0 <pbuf_alloc+0x1d4>)
 8005bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bbc:	4941      	ldr	r1, [pc, #260]	; (8005cc4 <pbuf_alloc+0x1d8>)
 8005bbe:	4842      	ldr	r0, [pc, #264]	; (8005cc8 <pbuf_alloc+0x1dc>)
 8005bc0:	f009 fa18 	bl	800eff4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005bc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bc6:	3303      	adds	r3, #3
 8005bc8:	f023 0303 	bic.w	r3, r3, #3
 8005bcc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005bd0:	d106      	bne.n	8005be0 <pbuf_alloc+0xf4>
 8005bd2:	4b3b      	ldr	r3, [pc, #236]	; (8005cc0 <pbuf_alloc+0x1d4>)
 8005bd4:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005bd8:	493c      	ldr	r1, [pc, #240]	; (8005ccc <pbuf_alloc+0x1e0>)
 8005bda:	483b      	ldr	r0, [pc, #236]	; (8005cc8 <pbuf_alloc+0x1dc>)
 8005bdc:	f009 fa0a 	bl	800eff4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d102      	bne.n	8005bec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bea:	e002      	b.n	8005bf2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005bf6:	8b7a      	ldrh	r2, [r7, #26]
 8005bf8:	89fb      	ldrh	r3, [r7, #14]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005c02:	8b7b      	ldrh	r3, [r7, #26]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d19e      	bne.n	8005b46 <pbuf_alloc+0x5a>
      break;
 8005c08:	e055      	b.n	8005cb6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005c0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c0c:	3303      	adds	r3, #3
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	f023 0303 	bic.w	r3, r3, #3
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	88bb      	ldrh	r3, [r7, #4]
 8005c18:	3303      	adds	r3, #3
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	f023 0303 	bic.w	r3, r3, #3
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	4413      	add	r3, r2
 8005c24:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005c26:	8b3b      	ldrh	r3, [r7, #24]
 8005c28:	3310      	adds	r3, #16
 8005c2a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005c2c:	8b3a      	ldrh	r2, [r7, #24]
 8005c2e:	88bb      	ldrh	r3, [r7, #4]
 8005c30:	3303      	adds	r3, #3
 8005c32:	f023 0303 	bic.w	r3, r3, #3
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d306      	bcc.n	8005c48 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005c3a:	8afa      	ldrh	r2, [r7, #22]
 8005c3c:	88bb      	ldrh	r3, [r7, #4]
 8005c3e:	3303      	adds	r3, #3
 8005c40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d201      	bcs.n	8005c4c <pbuf_alloc+0x160>
        return NULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e035      	b.n	8005cb8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005c4c:	8afb      	ldrh	r3, [r7, #22]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff f9ba 	bl	8004fc8 <mem_malloc>
 8005c54:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <pbuf_alloc+0x174>
        return NULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e02b      	b.n	8005cb8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c62:	3310      	adds	r3, #16
 8005c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c66:	4413      	add	r3, r2
 8005c68:	3303      	adds	r3, #3
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	4618      	mov	r0, r3
 8005c70:	88b9      	ldrh	r1, [r7, #4]
 8005c72:	88ba      	ldrh	r2, [r7, #4]
 8005c74:	2300      	movs	r3, #0
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	887b      	ldrh	r3, [r7, #2]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	4601      	mov	r1, r0
 8005c80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c82:	f7ff ff09 	bl	8005a98 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d010      	beq.n	8005cb4 <pbuf_alloc+0x1c8>
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <pbuf_alloc+0x1d4>)
 8005c94:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005c98:	490d      	ldr	r1, [pc, #52]	; (8005cd0 <pbuf_alloc+0x1e4>)
 8005c9a:	480b      	ldr	r0, [pc, #44]	; (8005cc8 <pbuf_alloc+0x1dc>)
 8005c9c:	f009 f9aa 	bl	800eff4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005ca0:	e008      	b.n	8005cb4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <pbuf_alloc+0x1d4>)
 8005ca4:	f240 1227 	movw	r2, #295	; 0x127
 8005ca8:	490a      	ldr	r1, [pc, #40]	; (8005cd4 <pbuf_alloc+0x1e8>)
 8005caa:	4807      	ldr	r0, [pc, #28]	; (8005cc8 <pbuf_alloc+0x1dc>)
 8005cac:	f009 f9a2 	bl	800eff4 <iprintf>
      return NULL;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	e001      	b.n	8005cb8 <pbuf_alloc+0x1cc>
      break;
 8005cb4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3728      	adds	r7, #40	; 0x28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	080107a8 	.word	0x080107a8
 8005cc4:	080107d8 	.word	0x080107d8
 8005cc8:	08010808 	.word	0x08010808
 8005ccc:	08010830 	.word	0x08010830
 8005cd0:	08010864 	.word	0x08010864
 8005cd4:	08010890 	.word	0x08010890

08005cd8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005ce8:	883b      	ldrh	r3, [r7, #0]
 8005cea:	2b41      	cmp	r3, #65	; 0x41
 8005cec:	d009      	beq.n	8005d02 <pbuf_alloc_reference+0x2a>
 8005cee:	883b      	ldrh	r3, [r7, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d006      	beq.n	8005d02 <pbuf_alloc_reference+0x2a>
 8005cf4:	4b0f      	ldr	r3, [pc, #60]	; (8005d34 <pbuf_alloc_reference+0x5c>)
 8005cf6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005cfa:	490f      	ldr	r1, [pc, #60]	; (8005d38 <pbuf_alloc_reference+0x60>)
 8005cfc:	480f      	ldr	r0, [pc, #60]	; (8005d3c <pbuf_alloc_reference+0x64>)
 8005cfe:	f009 f979 	bl	800eff4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005d02:	2007      	movs	r0, #7
 8005d04:	f7ff faf0 	bl	80052e8 <memp_malloc>
 8005d08:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d101      	bne.n	8005d14 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005d10:	2300      	movs	r3, #0
 8005d12:	e00b      	b.n	8005d2c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005d14:	8879      	ldrh	r1, [r7, #2]
 8005d16:	887a      	ldrh	r2, [r7, #2]
 8005d18:	2300      	movs	r3, #0
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	883b      	ldrh	r3, [r7, #0]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	460b      	mov	r3, r1
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff feb7 	bl	8005a98 <pbuf_init_alloced_pbuf>
  return p;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	080107a8 	.word	0x080107a8
 8005d38:	080108ac 	.word	0x080108ac
 8005d3c:	08010808 	.word	0x08010808

08005d40 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b088      	sub	sp, #32
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	607b      	str	r3, [r7, #4]
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	81bb      	strh	r3, [r7, #12]
 8005d50:	4613      	mov	r3, r2
 8005d52:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005d58:	8a7b      	ldrh	r3, [r7, #18]
 8005d5a:	3303      	adds	r3, #3
 8005d5c:	f023 0203 	bic.w	r2, r3, #3
 8005d60:	89bb      	ldrh	r3, [r7, #12]
 8005d62:	441a      	add	r2, r3
 8005d64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d901      	bls.n	8005d6e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e018      	b.n	8005da0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d007      	beq.n	8005d84 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005d74:	8a7b      	ldrh	r3, [r7, #18]
 8005d76:	3303      	adds	r3, #3
 8005d78:	f023 0303 	bic.w	r3, r3, #3
 8005d7c:	6a3a      	ldr	r2, [r7, #32]
 8005d7e:	4413      	add	r3, r2
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e001      	b.n	8005d88 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	89b9      	ldrh	r1, [r7, #12]
 8005d8c:	89ba      	ldrh	r2, [r7, #12]
 8005d8e:	2302      	movs	r3, #2
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	897b      	ldrh	r3, [r7, #10]
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	460b      	mov	r3, r1
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	f7ff fe7d 	bl	8005a98 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005d9e:	687b      	ldr	r3, [r7, #4]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	460b      	mov	r3, r1
 8005db2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <pbuf_realloc+0x20>
 8005dba:	4b3a      	ldr	r3, [pc, #232]	; (8005ea4 <pbuf_realloc+0xfc>)
 8005dbc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005dc0:	4939      	ldr	r1, [pc, #228]	; (8005ea8 <pbuf_realloc+0x100>)
 8005dc2:	483a      	ldr	r0, [pc, #232]	; (8005eac <pbuf_realloc+0x104>)
 8005dc4:	f009 f916 	bl	800eff4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	891b      	ldrh	r3, [r3, #8]
 8005dcc:	887a      	ldrh	r2, [r7, #2]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d263      	bcs.n	8005e9a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	891a      	ldrh	r2, [r3, #8]
 8005dd6:	887b      	ldrh	r3, [r7, #2]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005ddc:	887b      	ldrh	r3, [r7, #2]
 8005dde:	817b      	strh	r3, [r7, #10]
  q = p;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005de4:	e018      	b.n	8005e18 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	895b      	ldrh	r3, [r3, #10]
 8005dea:	897a      	ldrh	r2, [r7, #10]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	891a      	ldrh	r2, [r3, #8]
 8005df4:	893b      	ldrh	r3, [r7, #8]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <pbuf_realloc+0x70>
 8005e0a:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <pbuf_realloc+0xfc>)
 8005e0c:	f240 12af 	movw	r2, #431	; 0x1af
 8005e10:	4927      	ldr	r1, [pc, #156]	; (8005eb0 <pbuf_realloc+0x108>)
 8005e12:	4826      	ldr	r0, [pc, #152]	; (8005eac <pbuf_realloc+0x104>)
 8005e14:	f009 f8ee 	bl	800eff4 <iprintf>
  while (rem_len > q->len) {
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	895b      	ldrh	r3, [r3, #10]
 8005e1c:	897a      	ldrh	r2, [r7, #10]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d8e1      	bhi.n	8005de6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	7b1b      	ldrb	r3, [r3, #12]
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d121      	bne.n	8005e72 <pbuf_realloc+0xca>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	895b      	ldrh	r3, [r3, #10]
 8005e32:	897a      	ldrh	r2, [r7, #10]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d01c      	beq.n	8005e72 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	7b5b      	ldrb	r3, [r3, #13]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d116      	bne.n	8005e72 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	897b      	ldrh	r3, [r7, #10]
 8005e50:	4413      	add	r3, r2
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	4619      	mov	r1, r3
 8005e56:	68f8      	ldr	r0, [r7, #12]
 8005e58:	f7fe ffba 	bl	8004dd0 <mem_trim>
 8005e5c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d106      	bne.n	8005e72 <pbuf_realloc+0xca>
 8005e64:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <pbuf_realloc+0xfc>)
 8005e66:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005e6a:	4912      	ldr	r1, [pc, #72]	; (8005eb4 <pbuf_realloc+0x10c>)
 8005e6c:	480f      	ldr	r0, [pc, #60]	; (8005eac <pbuf_realloc+0x104>)
 8005e6e:	f009 f8c1 	bl	800eff4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	897a      	ldrh	r2, [r7, #10]
 8005e76:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	895a      	ldrh	r2, [r3, #10]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 f911 	bl	80060b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e000      	b.n	8005e9c <pbuf_realloc+0xf4>
    return;
 8005e9a:	bf00      	nop

}
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	080107a8 	.word	0x080107a8
 8005ea8:	080108c0 	.word	0x080108c0
 8005eac:	08010808 	.word	0x08010808
 8005eb0:	080108d8 	.word	0x080108d8
 8005eb4:	080108f0 	.word	0x080108f0

08005eb8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <pbuf_add_header_impl+0x22>
 8005ecc:	4b2b      	ldr	r3, [pc, #172]	; (8005f7c <pbuf_add_header_impl+0xc4>)
 8005ece:	f240 12df 	movw	r2, #479	; 0x1df
 8005ed2:	492b      	ldr	r1, [pc, #172]	; (8005f80 <pbuf_add_header_impl+0xc8>)
 8005ed4:	482b      	ldr	r0, [pc, #172]	; (8005f84 <pbuf_add_header_impl+0xcc>)
 8005ed6:	f009 f88d 	bl	800eff4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d003      	beq.n	8005ee8 <pbuf_add_header_impl+0x30>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ee6:	d301      	bcc.n	8005eec <pbuf_add_header_impl+0x34>
    return 1;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e043      	b.n	8005f74 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <pbuf_add_header_impl+0x3e>
    return 0;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e03e      	b.n	8005f74 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	891a      	ldrh	r2, [r3, #8]
 8005efe:	8a7b      	ldrh	r3, [r7, #18]
 8005f00:	4413      	add	r3, r2
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	8a7a      	ldrh	r2, [r7, #18]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d901      	bls.n	8005f0e <pbuf_add_header_impl+0x56>
    return 1;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e032      	b.n	8005f74 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	7b1b      	ldrb	r3, [r3, #12]
 8005f12:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005f14:	8a3b      	ldrh	r3, [r7, #16]
 8005f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00c      	beq.n	8005f38 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	425b      	negs	r3, r3
 8005f26:	4413      	add	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3310      	adds	r3, #16
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d20d      	bcs.n	8005f50 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e01d      	b.n	8005f74 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d006      	beq.n	8005f4c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	425b      	negs	r3, r3
 8005f46:	4413      	add	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	e001      	b.n	8005f50 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e011      	b.n	8005f74 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	895a      	ldrh	r2, [r3, #10]
 8005f5a:	8a7b      	ldrh	r3, [r7, #18]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	891a      	ldrh	r2, [r3, #8]
 8005f68:	8a7b      	ldrh	r3, [r7, #18]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	811a      	strh	r2, [r3, #8]


  return 0;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	080107a8 	.word	0x080107a8
 8005f80:	0801090c 	.word	0x0801090c
 8005f84:	08010808 	.word	0x08010808

08005f88 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005f92:	2200      	movs	r2, #0
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff ff8e 	bl	8005eb8 <pbuf_add_header_impl>
 8005f9c:	4603      	mov	r3, r0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
	...

08005fa8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <pbuf_remove_header+0x1e>
 8005fb8:	4b20      	ldr	r3, [pc, #128]	; (800603c <pbuf_remove_header+0x94>)
 8005fba:	f240 224b 	movw	r2, #587	; 0x24b
 8005fbe:	4920      	ldr	r1, [pc, #128]	; (8006040 <pbuf_remove_header+0x98>)
 8005fc0:	4820      	ldr	r0, [pc, #128]	; (8006044 <pbuf_remove_header+0x9c>)
 8005fc2:	f009 f817 	bl	800eff4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <pbuf_remove_header+0x2c>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd2:	d301      	bcc.n	8005fd8 <pbuf_remove_header+0x30>
    return 1;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e02c      	b.n	8006032 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <pbuf_remove_header+0x3a>
    return 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e027      	b.n	8006032 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	895b      	ldrh	r3, [r3, #10]
 8005fea:	89fa      	ldrh	r2, [r7, #14]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d908      	bls.n	8006002 <pbuf_remove_header+0x5a>
 8005ff0:	4b12      	ldr	r3, [pc, #72]	; (800603c <pbuf_remove_header+0x94>)
 8005ff2:	f240 2255 	movw	r2, #597	; 0x255
 8005ff6:	4914      	ldr	r1, [pc, #80]	; (8006048 <pbuf_remove_header+0xa0>)
 8005ff8:	4812      	ldr	r0, [pc, #72]	; (8006044 <pbuf_remove_header+0x9c>)
 8005ffa:	f008 fffb 	bl	800eff4 <iprintf>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e017      	b.n	8006032 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	441a      	add	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	895a      	ldrh	r2, [r3, #10]
 8006018:	89fb      	ldrh	r3, [r7, #14]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	b29a      	uxth	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	891a      	ldrh	r2, [r3, #8]
 8006026:	89fb      	ldrh	r3, [r7, #14]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	b29a      	uxth	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	080107a8 	.word	0x080107a8
 8006040:	0801090c 	.word	0x0801090c
 8006044:	08010808 	.word	0x08010808
 8006048:	08010918 	.word	0x08010918

0800604c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	807b      	strh	r3, [r7, #2]
 8006058:	4613      	mov	r3, r2
 800605a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800605c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da08      	bge.n	8006076 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006064:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006068:	425b      	negs	r3, r3
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff ff9b 	bl	8005fa8 <pbuf_remove_header>
 8006072:	4603      	mov	r3, r0
 8006074:	e007      	b.n	8006086 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006076:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800607a:	787a      	ldrb	r2, [r7, #1]
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff ff1a 	bl	8005eb8 <pbuf_add_header_impl>
 8006084:	4603      	mov	r3, r0
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	460b      	mov	r3, r1
 8006098:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800609a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800609e:	2201      	movs	r2, #1
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff ffd2 	bl	800604c <pbuf_header_impl>
 80060a8:	4603      	mov	r3, r0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10b      	bne.n	80060da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d106      	bne.n	80060d6 <pbuf_free+0x22>
 80060c8:	4b38      	ldr	r3, [pc, #224]	; (80061ac <pbuf_free+0xf8>)
 80060ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80060ce:	4938      	ldr	r1, [pc, #224]	; (80061b0 <pbuf_free+0xfc>)
 80060d0:	4838      	ldr	r0, [pc, #224]	; (80061b4 <pbuf_free+0x100>)
 80060d2:	f008 ff8f 	bl	800eff4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e063      	b.n	80061a2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80060de:	e05c      	b.n	800619a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7b9b      	ldrb	r3, [r3, #14]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d106      	bne.n	80060f6 <pbuf_free+0x42>
 80060e8:	4b30      	ldr	r3, [pc, #192]	; (80061ac <pbuf_free+0xf8>)
 80060ea:	f240 22f1 	movw	r2, #753	; 0x2f1
 80060ee:	4932      	ldr	r1, [pc, #200]	; (80061b8 <pbuf_free+0x104>)
 80060f0:	4830      	ldr	r0, [pc, #192]	; (80061b4 <pbuf_free+0x100>)
 80060f2:	f008 ff7f 	bl	800eff4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	7b9b      	ldrb	r3, [r3, #14]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	739a      	strb	r2, [r3, #14]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	7b9b      	ldrb	r3, [r3, #14]
 8006106:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006108:	7dbb      	ldrb	r3, [r7, #22]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d143      	bne.n	8006196 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	7b1b      	ldrb	r3, [r3, #12]
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7b5b      	ldrb	r3, [r3, #13]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d011      	beq.n	800614e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d106      	bne.n	8006144 <pbuf_free+0x90>
 8006136:	4b1d      	ldr	r3, [pc, #116]	; (80061ac <pbuf_free+0xf8>)
 8006138:	f240 22ff 	movw	r2, #767	; 0x2ff
 800613c:	491f      	ldr	r1, [pc, #124]	; (80061bc <pbuf_free+0x108>)
 800613e:	481d      	ldr	r0, [pc, #116]	; (80061b4 <pbuf_free+0x100>)
 8006140:	f008 ff58 	bl	800eff4 <iprintf>
        pc->custom_free_function(p);
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
 800614c:	e01d      	b.n	800618a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d104      	bne.n	800615e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	2008      	movs	r0, #8
 8006158:	f7ff f936 	bl	80053c8 <memp_free>
 800615c:	e015      	b.n	800618a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d104      	bne.n	800616e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006164:	6879      	ldr	r1, [r7, #4]
 8006166:	2007      	movs	r0, #7
 8006168:	f7ff f92e 	bl	80053c8 <memp_free>
 800616c:	e00d      	b.n	800618a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d103      	bne.n	800617c <pbuf_free+0xc8>
          mem_free(p);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7fe fdc1 	bl	8004cfc <mem_free>
 800617a:	e006      	b.n	800618a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <pbuf_free+0xf8>)
 800617e:	f240 320f 	movw	r2, #783	; 0x30f
 8006182:	490f      	ldr	r1, [pc, #60]	; (80061c0 <pbuf_free+0x10c>)
 8006184:	480b      	ldr	r0, [pc, #44]	; (80061b4 <pbuf_free+0x100>)
 8006186:	f008 ff35 	bl	800eff4 <iprintf>
        }
      }
      count++;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
 800618c:	3301      	adds	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	607b      	str	r3, [r7, #4]
 8006194:	e001      	b.n	800619a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d19f      	bne.n	80060e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	080107a8 	.word	0x080107a8
 80061b0:	0801090c 	.word	0x0801090c
 80061b4:	08010808 	.word	0x08010808
 80061b8:	08010938 	.word	0x08010938
 80061bc:	08010950 	.word	0x08010950
 80061c0:	08010974 	.word	0x08010974

080061c4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80061d0:	e005      	b.n	80061de <pbuf_clen+0x1a>
    ++len;
 80061d2:	89fb      	ldrh	r3, [r7, #14]
 80061d4:	3301      	adds	r3, #1
 80061d6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f6      	bne.n	80061d2 <pbuf_clen+0xe>
  }
  return len;
 80061e4:	89fb      	ldrh	r3, [r7, #14]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
	...

080061f4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d010      	beq.n	8006224 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	7b9b      	ldrb	r3, [r3, #14]
 8006206:	3301      	adds	r3, #1
 8006208:	b2da      	uxtb	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	7b9b      	ldrb	r3, [r3, #14]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <pbuf_ref+0x30>
 8006216:	4b05      	ldr	r3, [pc, #20]	; (800622c <pbuf_ref+0x38>)
 8006218:	f240 3242 	movw	r2, #834	; 0x342
 800621c:	4904      	ldr	r1, [pc, #16]	; (8006230 <pbuf_ref+0x3c>)
 800621e:	4805      	ldr	r0, [pc, #20]	; (8006234 <pbuf_ref+0x40>)
 8006220:	f008 fee8 	bl	800eff4 <iprintf>
  }
}
 8006224:	bf00      	nop
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	080107a8 	.word	0x080107a8
 8006230:	08010988 	.word	0x08010988
 8006234:	08010808 	.word	0x08010808

08006238 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <pbuf_cat+0x16>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d107      	bne.n	800625e <pbuf_cat+0x26>
 800624e:	4b20      	ldr	r3, [pc, #128]	; (80062d0 <pbuf_cat+0x98>)
 8006250:	f240 3259 	movw	r2, #857	; 0x359
 8006254:	491f      	ldr	r1, [pc, #124]	; (80062d4 <pbuf_cat+0x9c>)
 8006256:	4820      	ldr	r0, [pc, #128]	; (80062d8 <pbuf_cat+0xa0>)
 8006258:	f008 fecc 	bl	800eff4 <iprintf>
 800625c:	e034      	b.n	80062c8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e00a      	b.n	800627a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	891a      	ldrh	r2, [r3, #8]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	891b      	ldrh	r3, [r3, #8]
 800626c:	4413      	add	r3, r2
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1f0      	bne.n	8006264 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	891a      	ldrh	r2, [r3, #8]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	895b      	ldrh	r3, [r3, #10]
 800628a:	429a      	cmp	r2, r3
 800628c:	d006      	beq.n	800629c <pbuf_cat+0x64>
 800628e:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <pbuf_cat+0x98>)
 8006290:	f240 3262 	movw	r2, #866	; 0x362
 8006294:	4911      	ldr	r1, [pc, #68]	; (80062dc <pbuf_cat+0xa4>)
 8006296:	4810      	ldr	r0, [pc, #64]	; (80062d8 <pbuf_cat+0xa0>)
 8006298:	f008 feac 	bl	800eff4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d006      	beq.n	80062b2 <pbuf_cat+0x7a>
 80062a4:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <pbuf_cat+0x98>)
 80062a6:	f240 3263 	movw	r2, #867	; 0x363
 80062aa:	490d      	ldr	r1, [pc, #52]	; (80062e0 <pbuf_cat+0xa8>)
 80062ac:	480a      	ldr	r0, [pc, #40]	; (80062d8 <pbuf_cat+0xa0>)
 80062ae:	f008 fea1 	bl	800eff4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	891a      	ldrh	r2, [r3, #8]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	891b      	ldrh	r3, [r3, #8]
 80062ba:	4413      	add	r3, r2
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	080107a8 	.word	0x080107a8
 80062d4:	0801099c 	.word	0x0801099c
 80062d8:	08010808 	.word	0x08010808
 80062dc:	080109d4 	.word	0x080109d4
 80062e0:	08010a04 	.word	0x08010a04

080062e4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ffa1 	bl	8006238 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80062f6:	6838      	ldr	r0, [r7, #0]
 80062f8:	f7ff ff7c 	bl	80061f4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b086      	sub	sp, #24
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <pbuf_copy+0x2a>
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <pbuf_copy+0x2a>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	891a      	ldrh	r2, [r3, #8]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	891b      	ldrh	r3, [r3, #8]
 800632a:	429a      	cmp	r2, r3
 800632c:	d209      	bcs.n	8006342 <pbuf_copy+0x3e>
 800632e:	4b57      	ldr	r3, [pc, #348]	; (800648c <pbuf_copy+0x188>)
 8006330:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006334:	4956      	ldr	r1, [pc, #344]	; (8006490 <pbuf_copy+0x18c>)
 8006336:	4857      	ldr	r0, [pc, #348]	; (8006494 <pbuf_copy+0x190>)
 8006338:	f008 fe5c 	bl	800eff4 <iprintf>
 800633c:	f06f 030f 	mvn.w	r3, #15
 8006340:	e09f      	b.n	8006482 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	895b      	ldrh	r3, [r3, #10]
 8006346:	461a      	mov	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	895b      	ldrh	r3, [r3, #10]
 8006350:	4619      	mov	r1, r3
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	1acb      	subs	r3, r1, r3
 8006356:	429a      	cmp	r2, r3
 8006358:	d306      	bcc.n	8006368 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	895b      	ldrh	r3, [r3, #10]
 800635e:	461a      	mov	r2, r3
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	e005      	b.n	8006374 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	895b      	ldrh	r3, [r3, #10]
 800636c:	461a      	mov	r2, r3
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	18d0      	adds	r0, r2, r3
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	4413      	add	r3, r2
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4619      	mov	r1, r3
 8006388:	f008 ff49 	bl	800f21e <memcpy>
    offset_to += len;
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	895b      	ldrh	r3, [r3, #10]
 80063a0:	461a      	mov	r2, r3
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d906      	bls.n	80063b6 <pbuf_copy+0xb2>
 80063a8:	4b38      	ldr	r3, [pc, #224]	; (800648c <pbuf_copy+0x188>)
 80063aa:	f240 32d9 	movw	r2, #985	; 0x3d9
 80063ae:	493a      	ldr	r1, [pc, #232]	; (8006498 <pbuf_copy+0x194>)
 80063b0:	4838      	ldr	r0, [pc, #224]	; (8006494 <pbuf_copy+0x190>)
 80063b2:	f008 fe1f 	bl	800eff4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	895b      	ldrh	r3, [r3, #10]
 80063ba:	461a      	mov	r2, r3
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4293      	cmp	r3, r2
 80063c0:	d906      	bls.n	80063d0 <pbuf_copy+0xcc>
 80063c2:	4b32      	ldr	r3, [pc, #200]	; (800648c <pbuf_copy+0x188>)
 80063c4:	f240 32da 	movw	r2, #986	; 0x3da
 80063c8:	4934      	ldr	r1, [pc, #208]	; (800649c <pbuf_copy+0x198>)
 80063ca:	4832      	ldr	r0, [pc, #200]	; (8006494 <pbuf_copy+0x190>)
 80063cc:	f008 fe12 	bl	800eff4 <iprintf>
    if (offset_from >= p_from->len) {
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	895b      	ldrh	r3, [r3, #10]
 80063d4:	461a      	mov	r2, r3
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4293      	cmp	r3, r2
 80063da:	d304      	bcc.n	80063e6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	895b      	ldrh	r3, [r3, #10]
 80063ea:	461a      	mov	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d114      	bne.n	800641c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10c      	bne.n	800641c <pbuf_copy+0x118>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d009      	beq.n	800641c <pbuf_copy+0x118>
 8006408:	4b20      	ldr	r3, [pc, #128]	; (800648c <pbuf_copy+0x188>)
 800640a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800640e:	4924      	ldr	r1, [pc, #144]	; (80064a0 <pbuf_copy+0x19c>)
 8006410:	4820      	ldr	r0, [pc, #128]	; (8006494 <pbuf_copy+0x190>)
 8006412:	f008 fdef 	bl	800eff4 <iprintf>
 8006416:	f06f 030f 	mvn.w	r3, #15
 800641a:	e032      	b.n	8006482 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d013      	beq.n	800644a <pbuf_copy+0x146>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	895a      	ldrh	r2, [r3, #10]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	891b      	ldrh	r3, [r3, #8]
 800642a:	429a      	cmp	r2, r3
 800642c:	d10d      	bne.n	800644a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <pbuf_copy+0x146>
 8006436:	4b15      	ldr	r3, [pc, #84]	; (800648c <pbuf_copy+0x188>)
 8006438:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800643c:	4919      	ldr	r1, [pc, #100]	; (80064a4 <pbuf_copy+0x1a0>)
 800643e:	4815      	ldr	r0, [pc, #84]	; (8006494 <pbuf_copy+0x190>)
 8006440:	f008 fdd8 	bl	800eff4 <iprintf>
 8006444:	f06f 0305 	mvn.w	r3, #5
 8006448:	e01b      	b.n	8006482 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d013      	beq.n	8006478 <pbuf_copy+0x174>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	895a      	ldrh	r2, [r3, #10]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	891b      	ldrh	r3, [r3, #8]
 8006458:	429a      	cmp	r2, r3
 800645a:	d10d      	bne.n	8006478 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <pbuf_copy+0x174>
 8006464:	4b09      	ldr	r3, [pc, #36]	; (800648c <pbuf_copy+0x188>)
 8006466:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800646a:	490e      	ldr	r1, [pc, #56]	; (80064a4 <pbuf_copy+0x1a0>)
 800646c:	4809      	ldr	r0, [pc, #36]	; (8006494 <pbuf_copy+0x190>)
 800646e:	f008 fdc1 	bl	800eff4 <iprintf>
 8006472:	f06f 0305 	mvn.w	r3, #5
 8006476:	e004      	b.n	8006482 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	f47f af61 	bne.w	8006342 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3718      	adds	r7, #24
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	080107a8 	.word	0x080107a8
 8006490:	08010a50 	.word	0x08010a50
 8006494:	08010808 	.word	0x08010808
 8006498:	08010a80 	.word	0x08010a80
 800649c:	08010a98 	.word	0x08010a98
 80064a0:	08010ab4 	.word	0x08010ab4
 80064a4:	08010ac4 	.word	0x08010ac4

080064a8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4611      	mov	r1, r2
 80064b4:	461a      	mov	r2, r3
 80064b6:	460b      	mov	r3, r1
 80064b8:	80fb      	strh	r3, [r7, #6]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80064c2:	2300      	movs	r3, #0
 80064c4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d108      	bne.n	80064de <pbuf_copy_partial+0x36>
 80064cc:	4b2b      	ldr	r3, [pc, #172]	; (800657c <pbuf_copy_partial+0xd4>)
 80064ce:	f240 420a 	movw	r2, #1034	; 0x40a
 80064d2:	492b      	ldr	r1, [pc, #172]	; (8006580 <pbuf_copy_partial+0xd8>)
 80064d4:	482b      	ldr	r0, [pc, #172]	; (8006584 <pbuf_copy_partial+0xdc>)
 80064d6:	f008 fd8d 	bl	800eff4 <iprintf>
 80064da:	2300      	movs	r3, #0
 80064dc:	e04a      	b.n	8006574 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d108      	bne.n	80064f6 <pbuf_copy_partial+0x4e>
 80064e4:	4b25      	ldr	r3, [pc, #148]	; (800657c <pbuf_copy_partial+0xd4>)
 80064e6:	f240 420b 	movw	r2, #1035	; 0x40b
 80064ea:	4927      	ldr	r1, [pc, #156]	; (8006588 <pbuf_copy_partial+0xe0>)
 80064ec:	4825      	ldr	r0, [pc, #148]	; (8006584 <pbuf_copy_partial+0xdc>)
 80064ee:	f008 fd81 	bl	800eff4 <iprintf>
 80064f2:	2300      	movs	r3, #0
 80064f4:	e03e      	b.n	8006574 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	61fb      	str	r3, [r7, #28]
 80064fa:	e034      	b.n	8006566 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80064fc:	88bb      	ldrh	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <pbuf_copy_partial+0x70>
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	895b      	ldrh	r3, [r3, #10]
 8006506:	88ba      	ldrh	r2, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d305      	bcc.n	8006518 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	895b      	ldrh	r3, [r3, #10]
 8006510:	88ba      	ldrh	r2, [r7, #4]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	80bb      	strh	r3, [r7, #4]
 8006516:	e023      	b.n	8006560 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	895a      	ldrh	r2, [r3, #10]
 800651c:	88bb      	ldrh	r3, [r7, #4]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006522:	8b3a      	ldrh	r2, [r7, #24]
 8006524:	88fb      	ldrh	r3, [r7, #6]
 8006526:	429a      	cmp	r2, r3
 8006528:	d901      	bls.n	800652e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800652e:	8b7b      	ldrh	r3, [r7, #26]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	18d0      	adds	r0, r2, r3
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	88bb      	ldrh	r3, [r7, #4]
 800653a:	4413      	add	r3, r2
 800653c:	8b3a      	ldrh	r2, [r7, #24]
 800653e:	4619      	mov	r1, r3
 8006540:	f008 fe6d 	bl	800f21e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006544:	8afa      	ldrh	r2, [r7, #22]
 8006546:	8b3b      	ldrh	r3, [r7, #24]
 8006548:	4413      	add	r3, r2
 800654a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800654c:	8b7a      	ldrh	r2, [r7, #26]
 800654e:	8b3b      	ldrh	r3, [r7, #24]
 8006550:	4413      	add	r3, r2
 8006552:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006554:	88fa      	ldrh	r2, [r7, #6]
 8006556:	8b3b      	ldrh	r3, [r7, #24]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800655c:	2300      	movs	r3, #0
 800655e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	61fb      	str	r3, [r7, #28]
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d002      	beq.n	8006572 <pbuf_copy_partial+0xca>
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1c4      	bne.n	80064fc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006572:	8afb      	ldrh	r3, [r7, #22]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	080107a8 	.word	0x080107a8
 8006580:	08010af0 	.word	0x08010af0
 8006584:	08010808 	.word	0x08010808
 8006588:	08010b10 	.word	0x08010b10

0800658c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <pbuf_take+0x30>
 80065a8:	4b3a      	ldr	r3, [pc, #232]	; (8006694 <pbuf_take+0x108>)
 80065aa:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80065ae:	493a      	ldr	r1, [pc, #232]	; (8006698 <pbuf_take+0x10c>)
 80065b0:	483a      	ldr	r0, [pc, #232]	; (800669c <pbuf_take+0x110>)
 80065b2:	f008 fd1f 	bl	800eff4 <iprintf>
 80065b6:	f06f 030f 	mvn.w	r3, #15
 80065ba:	e067      	b.n	800668c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <pbuf_take+0x4a>
 80065c2:	4b34      	ldr	r3, [pc, #208]	; (8006694 <pbuf_take+0x108>)
 80065c4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80065c8:	4935      	ldr	r1, [pc, #212]	; (80066a0 <pbuf_take+0x114>)
 80065ca:	4834      	ldr	r0, [pc, #208]	; (800669c <pbuf_take+0x110>)
 80065cc:	f008 fd12 	bl	800eff4 <iprintf>
 80065d0:	f06f 030f 	mvn.w	r3, #15
 80065d4:	e05a      	b.n	800668c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	891b      	ldrh	r3, [r3, #8]
 80065da:	88fa      	ldrh	r2, [r7, #6]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d909      	bls.n	80065f4 <pbuf_take+0x68>
 80065e0:	4b2c      	ldr	r3, [pc, #176]	; (8006694 <pbuf_take+0x108>)
 80065e2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80065e6:	492f      	ldr	r1, [pc, #188]	; (80066a4 <pbuf_take+0x118>)
 80065e8:	482c      	ldr	r0, [pc, #176]	; (800669c <pbuf_take+0x110>)
 80065ea:	f008 fd03 	bl	800eff4 <iprintf>
 80065ee:	f04f 33ff 	mov.w	r3, #4294967295
 80065f2:	e04b      	b.n	800668c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <pbuf_take+0x7e>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d004      	beq.n	800660a <pbuf_take+0x7e>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	891b      	ldrh	r3, [r3, #8]
 8006604:	88fa      	ldrh	r2, [r7, #6]
 8006606:	429a      	cmp	r2, r3
 8006608:	d902      	bls.n	8006610 <pbuf_take+0x84>
    return ERR_ARG;
 800660a:	f06f 030f 	mvn.w	r3, #15
 800660e:	e03d      	b.n	800668c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	e028      	b.n	8006668 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <pbuf_take+0x9e>
 800661c:	4b1d      	ldr	r3, [pc, #116]	; (8006694 <pbuf_take+0x108>)
 800661e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006622:	4921      	ldr	r1, [pc, #132]	; (80066a8 <pbuf_take+0x11c>)
 8006624:	481d      	ldr	r0, [pc, #116]	; (800669c <pbuf_take+0x110>)
 8006626:	f008 fce5 	bl	800eff4 <iprintf>
    buf_copy_len = total_copy_len;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	895b      	ldrh	r3, [r3, #10]
 8006632:	461a      	mov	r2, r3
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	4293      	cmp	r3, r2
 8006638:	d902      	bls.n	8006640 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	895b      	ldrh	r3, [r3, #10]
 800663e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	6858      	ldr	r0, [r3, #4]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4619      	mov	r1, r3
 800664e:	f008 fde6 	bl	800f21e <memcpy>
    total_copy_len -= buf_copy_len;
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	4413      	add	r3, r2
 8006660:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1d3      	bne.n	8006616 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <pbuf_take+0xf0>
 8006674:	88fb      	ldrh	r3, [r7, #6]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	429a      	cmp	r2, r3
 800667a:	d006      	beq.n	800668a <pbuf_take+0xfe>
 800667c:	4b05      	ldr	r3, [pc, #20]	; (8006694 <pbuf_take+0x108>)
 800667e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8006682:	490a      	ldr	r1, [pc, #40]	; (80066ac <pbuf_take+0x120>)
 8006684:	4805      	ldr	r0, [pc, #20]	; (800669c <pbuf_take+0x110>)
 8006686:	f008 fcb5 	bl	800eff4 <iprintf>
  return ERR_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3720      	adds	r7, #32
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	080107a8 	.word	0x080107a8
 8006698:	08010b80 	.word	0x08010b80
 800669c:	08010808 	.word	0x08010808
 80066a0:	08010b98 	.word	0x08010b98
 80066a4:	08010bb4 	.word	0x08010bb4
 80066a8:	08010bd4 	.word	0x08010bd4
 80066ac:	08010bec 	.word	0x08010bec

080066b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	603a      	str	r2, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
 80066bc:	460b      	mov	r3, r1
 80066be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	8919      	ldrh	r1, [r3, #8]
 80066c4:	88ba      	ldrh	r2, [r7, #4]
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff fa0f 	bl	8005aec <pbuf_alloc>
 80066ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <pbuf_clone+0x2a>
    return NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	e011      	b.n	80066fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80066da:	6839      	ldr	r1, [r7, #0]
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fe11 	bl	8006304 <pbuf_copy>
 80066e2:	4603      	mov	r3, r0
 80066e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80066e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d006      	beq.n	80066fc <pbuf_clone+0x4c>
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <pbuf_clone+0x58>)
 80066f0:	f240 5224 	movw	r2, #1316	; 0x524
 80066f4:	4905      	ldr	r1, [pc, #20]	; (800670c <pbuf_clone+0x5c>)
 80066f6:	4806      	ldr	r0, [pc, #24]	; (8006710 <pbuf_clone+0x60>)
 80066f8:	f008 fc7c 	bl	800eff4 <iprintf>
  return q;
 80066fc:	68fb      	ldr	r3, [r7, #12]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	080107a8 	.word	0x080107a8
 800670c:	08010c1c 	.word	0x08010c1c
 8006710:	08010808 	.word	0x08010808

08006714 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006718:	f008 fb6c 	bl	800edf4 <rand>
 800671c:	4603      	mov	r3, r0
 800671e:	b29b      	uxth	r3, r3
 8006720:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006724:	b29b      	uxth	r3, r3
 8006726:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800672a:	b29a      	uxth	r2, r3
 800672c:	4b01      	ldr	r3, [pc, #4]	; (8006734 <tcp_init+0x20>)
 800672e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006730:	bf00      	nop
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000020 	.word	0x20000020

08006738 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	7d1b      	ldrb	r3, [r3, #20]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d105      	bne.n	8006754 <tcp_free+0x1c>
 8006748:	4b06      	ldr	r3, [pc, #24]	; (8006764 <tcp_free+0x2c>)
 800674a:	22d4      	movs	r2, #212	; 0xd4
 800674c:	4906      	ldr	r1, [pc, #24]	; (8006768 <tcp_free+0x30>)
 800674e:	4807      	ldr	r0, [pc, #28]	; (800676c <tcp_free+0x34>)
 8006750:	f008 fc50 	bl	800eff4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	2001      	movs	r0, #1
 8006758:	f7fe fe36 	bl	80053c8 <memp_free>
}
 800675c:	bf00      	nop
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	08010ca8 	.word	0x08010ca8
 8006768:	08010cd8 	.word	0x08010cd8
 800676c:	08010cec 	.word	0x08010cec

08006770 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	7d1b      	ldrb	r3, [r3, #20]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d105      	bne.n	800678c <tcp_free_listen+0x1c>
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <tcp_free_listen+0x2c>)
 8006782:	22df      	movs	r2, #223	; 0xdf
 8006784:	4906      	ldr	r1, [pc, #24]	; (80067a0 <tcp_free_listen+0x30>)
 8006786:	4807      	ldr	r0, [pc, #28]	; (80067a4 <tcp_free_listen+0x34>)
 8006788:	f008 fc34 	bl	800eff4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	2002      	movs	r0, #2
 8006790:	f7fe fe1a 	bl	80053c8 <memp_free>
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	08010ca8 	.word	0x08010ca8
 80067a0:	08010d14 	.word	0x08010d14
 80067a4:	08010cec 	.word	0x08010cec

080067a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80067ac:	f000 fea2 	bl	80074f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80067b0:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <tcp_tmr+0x28>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	3301      	adds	r3, #1
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <tcp_tmr+0x28>)
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <tcp_tmr+0x28>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80067c8:	f000 fb54 	bl	8006e74 <tcp_slowtmr>
  }
}
 80067cc:	bf00      	nop
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20008781 	.word	0x20008781

080067d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d105      	bne.n	80067f0 <tcp_remove_listener+0x1c>
 80067e4:	4b0d      	ldr	r3, [pc, #52]	; (800681c <tcp_remove_listener+0x48>)
 80067e6:	22ff      	movs	r2, #255	; 0xff
 80067e8:	490d      	ldr	r1, [pc, #52]	; (8006820 <tcp_remove_listener+0x4c>)
 80067ea:	480e      	ldr	r0, [pc, #56]	; (8006824 <tcp_remove_listener+0x50>)
 80067ec:	f008 fc02 	bl	800eff4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e00a      	b.n	800680c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d102      	bne.n	8006806 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1f1      	bne.n	80067f6 <tcp_remove_listener+0x22>
    }
  }
}
 8006812:	bf00      	nop
 8006814:	bf00      	nop
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	08010ca8 	.word	0x08010ca8
 8006820:	08010d30 	.word	0x08010d30
 8006824:	08010cec 	.word	0x08010cec

08006828 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <tcp_listen_closed+0x1c>
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <tcp_listen_closed+0x60>)
 8006838:	f240 1211 	movw	r2, #273	; 0x111
 800683c:	4913      	ldr	r1, [pc, #76]	; (800688c <tcp_listen_closed+0x64>)
 800683e:	4814      	ldr	r0, [pc, #80]	; (8006890 <tcp_listen_closed+0x68>)
 8006840:	f008 fbd8 	bl	800eff4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	7d1b      	ldrb	r3, [r3, #20]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d006      	beq.n	800685a <tcp_listen_closed+0x32>
 800684c:	4b0e      	ldr	r3, [pc, #56]	; (8006888 <tcp_listen_closed+0x60>)
 800684e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006852:	4910      	ldr	r1, [pc, #64]	; (8006894 <tcp_listen_closed+0x6c>)
 8006854:	480e      	ldr	r0, [pc, #56]	; (8006890 <tcp_listen_closed+0x68>)
 8006856:	f008 fbcd 	bl	800eff4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800685a:	2301      	movs	r3, #1
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e00b      	b.n	8006878 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006860:	4a0d      	ldr	r2, [pc, #52]	; (8006898 <tcp_listen_closed+0x70>)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff ffb1 	bl	80067d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b03      	cmp	r3, #3
 800687c:	d9f0      	bls.n	8006860 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800687e:	bf00      	nop
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	08010ca8 	.word	0x08010ca8
 800688c:	08010d58 	.word	0x08010d58
 8006890:	08010cec 	.word	0x08010cec
 8006894:	08010d64 	.word	0x08010d64
 8006898:	08012c88 	.word	0x08012c88

0800689c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800689c:	b5b0      	push	{r4, r5, r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af04      	add	r7, sp, #16
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <tcp_close_shutdown+0x20>
 80068ae:	4b63      	ldr	r3, [pc, #396]	; (8006a3c <tcp_close_shutdown+0x1a0>)
 80068b0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80068b4:	4962      	ldr	r1, [pc, #392]	; (8006a40 <tcp_close_shutdown+0x1a4>)
 80068b6:	4863      	ldr	r0, [pc, #396]	; (8006a44 <tcp_close_shutdown+0x1a8>)
 80068b8:	f008 fb9c 	bl	800eff4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80068bc:	78fb      	ldrb	r3, [r7, #3]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d066      	beq.n	8006990 <tcp_close_shutdown+0xf4>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	7d1b      	ldrb	r3, [r3, #20]
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d003      	beq.n	80068d2 <tcp_close_shutdown+0x36>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7d1b      	ldrb	r3, [r3, #20]
 80068ce:	2b07      	cmp	r3, #7
 80068d0:	d15e      	bne.n	8006990 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d104      	bne.n	80068e4 <tcp_close_shutdown+0x48>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80068e2:	d055      	beq.n	8006990 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8b5b      	ldrh	r3, [r3, #26]
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <tcp_close_shutdown+0x62>
 80068f0:	4b52      	ldr	r3, [pc, #328]	; (8006a3c <tcp_close_shutdown+0x1a0>)
 80068f2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80068f6:	4954      	ldr	r1, [pc, #336]	; (8006a48 <tcp_close_shutdown+0x1ac>)
 80068f8:	4852      	ldr	r0, [pc, #328]	; (8006a44 <tcp_close_shutdown+0x1a8>)
 80068fa:	f008 fb7b 	bl	800eff4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006906:	687d      	ldr	r5, [r7, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3304      	adds	r3, #4
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	8ad2      	ldrh	r2, [r2, #22]
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	8b09      	ldrh	r1, [r1, #24]
 8006914:	9102      	str	r1, [sp, #8]
 8006916:	9201      	str	r2, [sp, #4]
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	462b      	mov	r3, r5
 800691c:	4622      	mov	r2, r4
 800691e:	4601      	mov	r1, r0
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f004 fe91 	bl	800b648 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 f8c6 	bl	8007ab8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800692c:	4b47      	ldr	r3, [pc, #284]	; (8006a4c <tcp_close_shutdown+0x1b0>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	429a      	cmp	r2, r3
 8006934:	d105      	bne.n	8006942 <tcp_close_shutdown+0xa6>
 8006936:	4b45      	ldr	r3, [pc, #276]	; (8006a4c <tcp_close_shutdown+0x1b0>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	4a43      	ldr	r2, [pc, #268]	; (8006a4c <tcp_close_shutdown+0x1b0>)
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	e013      	b.n	800696a <tcp_close_shutdown+0xce>
 8006942:	4b42      	ldr	r3, [pc, #264]	; (8006a4c <tcp_close_shutdown+0x1b0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	e00c      	b.n	8006964 <tcp_close_shutdown+0xc8>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d104      	bne.n	800695e <tcp_close_shutdown+0xc2>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	60da      	str	r2, [r3, #12]
 800695c:	e005      	b.n	800696a <tcp_close_shutdown+0xce>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1ef      	bne.n	800694a <tcp_close_shutdown+0xae>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	60da      	str	r2, [r3, #12]
 8006970:	4b37      	ldr	r3, [pc, #220]	; (8006a50 <tcp_close_shutdown+0x1b4>)
 8006972:	2201      	movs	r2, #1
 8006974:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006976:	4b37      	ldr	r3, [pc, #220]	; (8006a54 <tcp_close_shutdown+0x1b8>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d102      	bne.n	8006986 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006980:	f003 fd5e 	bl	800a440 <tcp_trigger_input_pcb_close>
 8006984:	e002      	b.n	800698c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7ff fed6 	bl	8006738 <tcp_free>
      }
      return ERR_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	e050      	b.n	8006a32 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	7d1b      	ldrb	r3, [r3, #20]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d03b      	beq.n	8006a10 <tcp_close_shutdown+0x174>
 8006998:	2b02      	cmp	r3, #2
 800699a:	dc44      	bgt.n	8006a26 <tcp_close_shutdown+0x18a>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <tcp_close_shutdown+0x10a>
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d02a      	beq.n	80069fa <tcp_close_shutdown+0x15e>
 80069a4:	e03f      	b.n	8006a26 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8adb      	ldrh	r3, [r3, #22]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d021      	beq.n	80069f2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80069ae:	4b2a      	ldr	r3, [pc, #168]	; (8006a58 <tcp_close_shutdown+0x1bc>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d105      	bne.n	80069c4 <tcp_close_shutdown+0x128>
 80069b8:	4b27      	ldr	r3, [pc, #156]	; (8006a58 <tcp_close_shutdown+0x1bc>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	4a26      	ldr	r2, [pc, #152]	; (8006a58 <tcp_close_shutdown+0x1bc>)
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	e013      	b.n	80069ec <tcp_close_shutdown+0x150>
 80069c4:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <tcp_close_shutdown+0x1bc>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	e00c      	b.n	80069e6 <tcp_close_shutdown+0x14a>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d104      	bne.n	80069e0 <tcp_close_shutdown+0x144>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	60da      	str	r2, [r3, #12]
 80069de:	e005      	b.n	80069ec <tcp_close_shutdown+0x150>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1ef      	bne.n	80069cc <tcp_close_shutdown+0x130>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7ff fea0 	bl	8006738 <tcp_free>
      break;
 80069f8:	e01a      	b.n	8006a30 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff ff14 	bl	8006828 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	4816      	ldr	r0, [pc, #88]	; (8006a5c <tcp_close_shutdown+0x1c0>)
 8006a04:	f001 f8a8 	bl	8007b58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff feb1 	bl	8006770 <tcp_free_listen>
      break;
 8006a0e:	e00f      	b.n	8006a30 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	480e      	ldr	r0, [pc, #56]	; (8006a4c <tcp_close_shutdown+0x1b0>)
 8006a14:	f001 f8a0 	bl	8007b58 <tcp_pcb_remove>
 8006a18:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <tcp_close_shutdown+0x1b4>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fe8a 	bl	8006738 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006a24:	e004      	b.n	8006a30 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f81a 	bl	8006a60 <tcp_close_shutdown_fin>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	e000      	b.n	8006a32 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bdb0      	pop	{r4, r5, r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	08010ca8 	.word	0x08010ca8
 8006a40:	08010d7c 	.word	0x08010d7c
 8006a44:	08010cec 	.word	0x08010cec
 8006a48:	08010d9c 	.word	0x08010d9c
 8006a4c:	20008778 	.word	0x20008778
 8006a50:	20008780 	.word	0x20008780
 8006a54:	200087b8 	.word	0x200087b8
 8006a58:	20008770 	.word	0x20008770
 8006a5c:	20008774 	.word	0x20008774

08006a60 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <tcp_close_shutdown_fin+0x1c>
 8006a6e:	4b2e      	ldr	r3, [pc, #184]	; (8006b28 <tcp_close_shutdown_fin+0xc8>)
 8006a70:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006a74:	492d      	ldr	r1, [pc, #180]	; (8006b2c <tcp_close_shutdown_fin+0xcc>)
 8006a76:	482e      	ldr	r0, [pc, #184]	; (8006b30 <tcp_close_shutdown_fin+0xd0>)
 8006a78:	f008 fabc 	bl	800eff4 <iprintf>

  switch (pcb->state) {
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7d1b      	ldrb	r3, [r3, #20]
 8006a80:	2b07      	cmp	r3, #7
 8006a82:	d020      	beq.n	8006ac6 <tcp_close_shutdown_fin+0x66>
 8006a84:	2b07      	cmp	r3, #7
 8006a86:	dc2b      	bgt.n	8006ae0 <tcp_close_shutdown_fin+0x80>
 8006a88:	2b03      	cmp	r3, #3
 8006a8a:	d002      	beq.n	8006a92 <tcp_close_shutdown_fin+0x32>
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d00d      	beq.n	8006aac <tcp_close_shutdown_fin+0x4c>
 8006a90:	e026      	b.n	8006ae0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f003 fee6 	bl	800a864 <tcp_send_fin>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d11f      	bne.n	8006ae4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2205      	movs	r2, #5
 8006aa8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006aaa:	e01b      	b.n	8006ae4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f003 fed9 	bl	800a864 <tcp_send_fin>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d114      	bne.n	8006ae8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2205      	movs	r2, #5
 8006ac2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006ac4:	e010      	b.n	8006ae8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f003 fecc 	bl	800a864 <tcp_send_fin>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d109      	bne.n	8006aec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2209      	movs	r2, #9
 8006adc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006ade:	e005      	b.n	8006aec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e01c      	b.n	8006b1e <tcp_close_shutdown_fin+0xbe>
      break;
 8006ae4:	bf00      	nop
 8006ae6:	e002      	b.n	8006aee <tcp_close_shutdown_fin+0x8e>
      break;
 8006ae8:	bf00      	nop
 8006aea:	e000      	b.n	8006aee <tcp_close_shutdown_fin+0x8e>
      break;
 8006aec:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f003 fff2 	bl	800aae0 <tcp_output>
 8006afc:	e00d      	b.n	8006b1a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b06:	d108      	bne.n	8006b1a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8b5b      	ldrh	r3, [r3, #26]
 8006b0c:	f043 0308 	orr.w	r3, r3, #8
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e001      	b.n	8006b1e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	08010ca8 	.word	0x08010ca8
 8006b2c:	08010d58 	.word	0x08010d58
 8006b30:	08010cec 	.word	0x08010cec

08006b34 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d109      	bne.n	8006b56 <tcp_close+0x22>
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <tcp_close+0x4c>)
 8006b44:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006b48:	490e      	ldr	r1, [pc, #56]	; (8006b84 <tcp_close+0x50>)
 8006b4a:	480f      	ldr	r0, [pc, #60]	; (8006b88 <tcp_close+0x54>)
 8006b4c:	f008 fa52 	bl	800eff4 <iprintf>
 8006b50:	f06f 030f 	mvn.w	r3, #15
 8006b54:	e00f      	b.n	8006b76 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	7d1b      	ldrb	r3, [r3, #20]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d006      	beq.n	8006b6c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8b5b      	ldrh	r3, [r3, #26]
 8006b62:	f043 0310 	orr.w	r3, r3, #16
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff fe94 	bl	800689c <tcp_close_shutdown>
 8006b74:	4603      	mov	r3, r0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	08010ca8 	.word	0x08010ca8
 8006b84:	08010db8 	.word	0x08010db8
 8006b88:	08010cec 	.word	0x08010cec

08006b8c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08e      	sub	sp, #56	; 0x38
 8006b90:	af04      	add	r7, sp, #16
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d107      	bne.n	8006bac <tcp_abandon+0x20>
 8006b9c:	4b52      	ldr	r3, [pc, #328]	; (8006ce8 <tcp_abandon+0x15c>)
 8006b9e:	f240 223d 	movw	r2, #573	; 0x23d
 8006ba2:	4952      	ldr	r1, [pc, #328]	; (8006cec <tcp_abandon+0x160>)
 8006ba4:	4852      	ldr	r0, [pc, #328]	; (8006cf0 <tcp_abandon+0x164>)
 8006ba6:	f008 fa25 	bl	800eff4 <iprintf>
 8006baa:	e099      	b.n	8006ce0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7d1b      	ldrb	r3, [r3, #20]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d106      	bne.n	8006bc2 <tcp_abandon+0x36>
 8006bb4:	4b4c      	ldr	r3, [pc, #304]	; (8006ce8 <tcp_abandon+0x15c>)
 8006bb6:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006bba:	494e      	ldr	r1, [pc, #312]	; (8006cf4 <tcp_abandon+0x168>)
 8006bbc:	484c      	ldr	r0, [pc, #304]	; (8006cf0 <tcp_abandon+0x164>)
 8006bbe:	f008 fa19 	bl	800eff4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	7d1b      	ldrb	r3, [r3, #20]
 8006bc6:	2b0a      	cmp	r3, #10
 8006bc8:	d107      	bne.n	8006bda <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	484a      	ldr	r0, [pc, #296]	; (8006cf8 <tcp_abandon+0x16c>)
 8006bce:	f000 ffc3 	bl	8007b58 <tcp_pcb_remove>
    tcp_free(pcb);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff fdb0 	bl	8006738 <tcp_free>
 8006bd8:	e082      	b.n	8006ce0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006bde:	2300      	movs	r3, #0
 8006be0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	7d1b      	ldrb	r3, [r3, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d126      	bne.n	8006c52 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8adb      	ldrh	r3, [r3, #22]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d02e      	beq.n	8006c6a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006c0c:	4b3b      	ldr	r3, [pc, #236]	; (8006cfc <tcp_abandon+0x170>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d105      	bne.n	8006c22 <tcp_abandon+0x96>
 8006c16:	4b39      	ldr	r3, [pc, #228]	; (8006cfc <tcp_abandon+0x170>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4a37      	ldr	r2, [pc, #220]	; (8006cfc <tcp_abandon+0x170>)
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	e013      	b.n	8006c4a <tcp_abandon+0xbe>
 8006c22:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <tcp_abandon+0x170>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	e00c      	b.n	8006c44 <tcp_abandon+0xb8>
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d104      	bne.n	8006c3e <tcp_abandon+0xb2>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68da      	ldr	r2, [r3, #12]
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	e005      	b.n	8006c4a <tcp_abandon+0xbe>
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	61fb      	str	r3, [r7, #28]
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1ef      	bne.n	8006c2a <tcp_abandon+0x9e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	60da      	str	r2, [r3, #12]
 8006c50:	e00b      	b.n	8006c6a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	8adb      	ldrh	r3, [r3, #22]
 8006c5a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006c5c:	6879      	ldr	r1, [r7, #4]
 8006c5e:	4828      	ldr	r0, [pc, #160]	; (8006d00 <tcp_abandon+0x174>)
 8006c60:	f000 ff7a 	bl	8007b58 <tcp_pcb_remove>
 8006c64:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <tcp_abandon+0x178>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d004      	beq.n	8006c7c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fd1c 	bl	80076b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fd13 	bl	80076b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d004      	beq.n	8006ca0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fd0a 	bl	80076b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00e      	beq.n	8006cc4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	3304      	adds	r3, #4
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	8b12      	ldrh	r2, [r2, #24]
 8006cb0:	9202      	str	r2, [sp, #8]
 8006cb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006cb4:	9201      	str	r2, [sp, #4]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f004 fcc2 	bl	800b648 <tcp_rst>
    }
    last_state = pcb->state;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	7d1b      	ldrb	r3, [r3, #20]
 8006cc8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff fd34 	bl	8006738 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d004      	beq.n	8006ce0 <tcp_abandon+0x154>
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f06f 010c 	mvn.w	r1, #12
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	4798      	blx	r3
  }
}
 8006ce0:	3728      	adds	r7, #40	; 0x28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	08010ca8 	.word	0x08010ca8
 8006cec:	08010dec 	.word	0x08010dec
 8006cf0:	08010cec 	.word	0x08010cec
 8006cf4:	08010e08 	.word	0x08010e08
 8006cf8:	2000877c 	.word	0x2000877c
 8006cfc:	20008770 	.word	0x20008770
 8006d00:	20008778 	.word	0x20008778
 8006d04:	20008780 	.word	0x20008780

08006d08 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006d10:	2101      	movs	r1, #1
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff ff3a 	bl	8006b8c <tcp_abandon>
}
 8006d18:	bf00      	nop
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d106      	bne.n	8006d3c <tcp_update_rcv_ann_wnd+0x1c>
 8006d2e:	4b25      	ldr	r3, [pc, #148]	; (8006dc4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006d30:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006d34:	4924      	ldr	r1, [pc, #144]	; (8006dc8 <tcp_update_rcv_ann_wnd+0xa8>)
 8006d36:	4825      	ldr	r0, [pc, #148]	; (8006dcc <tcp_update_rcv_ann_wnd+0xac>)
 8006d38:	f008 f95c 	bl	800eff4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006d44:	4413      	add	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006d50:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006d54:	bf28      	it	cs
 8006d56:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006d5a:	b292      	uxth	r2, r2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	db08      	blt.n	8006d78 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	e020      	b.n	8006dba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	dd03      	ble.n	8006d8e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d8c:	e014      	b.n	8006db8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da0:	d306      	bcc.n	8006db0 <tcp_update_rcv_ann_wnd+0x90>
 8006da2:	4b08      	ldr	r3, [pc, #32]	; (8006dc4 <tcp_update_rcv_ann_wnd+0xa4>)
 8006da4:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006da8:	4909      	ldr	r1, [pc, #36]	; (8006dd0 <tcp_update_rcv_ann_wnd+0xb0>)
 8006daa:	4808      	ldr	r0, [pc, #32]	; (8006dcc <tcp_update_rcv_ann_wnd+0xac>)
 8006dac:	f008 f922 	bl	800eff4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006db8:	2300      	movs	r3, #0
  }
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08010ca8 	.word	0x08010ca8
 8006dc8:	08010f04 	.word	0x08010f04
 8006dcc:	08010cec 	.word	0x08010cec
 8006dd0:	08010f28 	.word	0x08010f28

08006dd4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d107      	bne.n	8006df6 <tcp_recved+0x22>
 8006de6:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <tcp_recved+0x90>)
 8006de8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006dec:	491e      	ldr	r1, [pc, #120]	; (8006e68 <tcp_recved+0x94>)
 8006dee:	481f      	ldr	r0, [pc, #124]	; (8006e6c <tcp_recved+0x98>)
 8006df0:	f008 f900 	bl	800eff4 <iprintf>
 8006df4:	e032      	b.n	8006e5c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	7d1b      	ldrb	r3, [r3, #20]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d106      	bne.n	8006e0c <tcp_recved+0x38>
 8006dfe:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <tcp_recved+0x90>)
 8006e00:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006e04:	491a      	ldr	r1, [pc, #104]	; (8006e70 <tcp_recved+0x9c>)
 8006e06:	4819      	ldr	r0, [pc, #100]	; (8006e6c <tcp_recved+0x98>)
 8006e08:	f008 f8f4 	bl	800eff4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006e10:	887b      	ldrh	r3, [r7, #2]
 8006e12:	4413      	add	r3, r2
 8006e14:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006e16:	89fb      	ldrh	r3, [r7, #14]
 8006e18:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006e1c:	d804      	bhi.n	8006e28 <tcp_recved+0x54>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e22:	89fa      	ldrh	r2, [r7, #14]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d204      	bcs.n	8006e32 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006e2e:	851a      	strh	r2, [r3, #40]	; 0x28
 8006e30:	e002      	b.n	8006e38 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	89fa      	ldrh	r2, [r7, #14]
 8006e36:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff ff71 	bl	8006d20 <tcp_update_rcv_ann_wnd>
 8006e3e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006e46:	d309      	bcc.n	8006e5c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	8b5b      	ldrh	r3, [r3, #26]
 8006e4c:	f043 0302 	orr.w	r3, r3, #2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f003 fe42 	bl	800aae0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	08010ca8 	.word	0x08010ca8
 8006e68:	08010f44 	.word	0x08010f44
 8006e6c:	08010cec 	.word	0x08010cec
 8006e70:	08010f5c 	.word	0x08010f5c

08006e74 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006e74:	b5b0      	push	{r4, r5, r7, lr}
 8006e76:	b090      	sub	sp, #64	; 0x40
 8006e78:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006e80:	4b94      	ldr	r3, [pc, #592]	; (80070d4 <tcp_slowtmr+0x260>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3301      	adds	r3, #1
 8006e86:	4a93      	ldr	r2, [pc, #588]	; (80070d4 <tcp_slowtmr+0x260>)
 8006e88:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006e8a:	4b93      	ldr	r3, [pc, #588]	; (80070d8 <tcp_slowtmr+0x264>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	4b91      	ldr	r3, [pc, #580]	; (80070d8 <tcp_slowtmr+0x264>)
 8006e94:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006e9a:	4b90      	ldr	r3, [pc, #576]	; (80070dc <tcp_slowtmr+0x268>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006ea0:	e29f      	b.n	80073e2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	7d1b      	ldrb	r3, [r3, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <tcp_slowtmr+0x44>
 8006eaa:	4b8d      	ldr	r3, [pc, #564]	; (80070e0 <tcp_slowtmr+0x26c>)
 8006eac:	f240 42be 	movw	r2, #1214	; 0x4be
 8006eb0:	498c      	ldr	r1, [pc, #560]	; (80070e4 <tcp_slowtmr+0x270>)
 8006eb2:	488d      	ldr	r0, [pc, #564]	; (80070e8 <tcp_slowtmr+0x274>)
 8006eb4:	f008 f89e 	bl	800eff4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	7d1b      	ldrb	r3, [r3, #20]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d106      	bne.n	8006ece <tcp_slowtmr+0x5a>
 8006ec0:	4b87      	ldr	r3, [pc, #540]	; (80070e0 <tcp_slowtmr+0x26c>)
 8006ec2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006ec6:	4989      	ldr	r1, [pc, #548]	; (80070ec <tcp_slowtmr+0x278>)
 8006ec8:	4887      	ldr	r0, [pc, #540]	; (80070e8 <tcp_slowtmr+0x274>)
 8006eca:	f008 f893 	bl	800eff4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed0:	7d1b      	ldrb	r3, [r3, #20]
 8006ed2:	2b0a      	cmp	r3, #10
 8006ed4:	d106      	bne.n	8006ee4 <tcp_slowtmr+0x70>
 8006ed6:	4b82      	ldr	r3, [pc, #520]	; (80070e0 <tcp_slowtmr+0x26c>)
 8006ed8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006edc:	4984      	ldr	r1, [pc, #528]	; (80070f0 <tcp_slowtmr+0x27c>)
 8006ede:	4882      	ldr	r0, [pc, #520]	; (80070e8 <tcp_slowtmr+0x274>)
 8006ee0:	f008 f888 	bl	800eff4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	7f9a      	ldrb	r2, [r3, #30]
 8006ee8:	4b7b      	ldr	r3, [pc, #492]	; (80070d8 <tcp_slowtmr+0x264>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d105      	bne.n	8006efc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006efa:	e272      	b.n	80073e2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006efc:	4b76      	ldr	r3, [pc, #472]	; (80070d8 <tcp_slowtmr+0x264>)
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f12:	7d1b      	ldrb	r3, [r3, #20]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d10a      	bne.n	8006f2e <tcp_slowtmr+0xba>
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f1e:	2b05      	cmp	r3, #5
 8006f20:	d905      	bls.n	8006f2e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f26:	3301      	adds	r3, #1
 8006f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f2c:	e11e      	b.n	800716c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f34:	2b0b      	cmp	r3, #11
 8006f36:	d905      	bls.n	8006f44 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006f38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f42:	e113      	b.n	800716c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d075      	beq.n	800703a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d006      	beq.n	8006f64 <tcp_slowtmr+0xf0>
 8006f56:	4b62      	ldr	r3, [pc, #392]	; (80070e0 <tcp_slowtmr+0x26c>)
 8006f58:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006f5c:	4965      	ldr	r1, [pc, #404]	; (80070f4 <tcp_slowtmr+0x280>)
 8006f5e:	4862      	ldr	r0, [pc, #392]	; (80070e8 <tcp_slowtmr+0x274>)
 8006f60:	f008 f848 	bl	800eff4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d106      	bne.n	8006f7a <tcp_slowtmr+0x106>
 8006f6c:	4b5c      	ldr	r3, [pc, #368]	; (80070e0 <tcp_slowtmr+0x26c>)
 8006f6e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006f72:	4961      	ldr	r1, [pc, #388]	; (80070f8 <tcp_slowtmr+0x284>)
 8006f74:	485c      	ldr	r0, [pc, #368]	; (80070e8 <tcp_slowtmr+0x274>)
 8006f76:	f008 f83d 	bl	800eff4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	d905      	bls.n	8006f90 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f88:	3301      	adds	r3, #1
 8006f8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006f8e:	e0ed      	b.n	800716c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006f96:	3b01      	subs	r3, #1
 8006f98:	4a58      	ldr	r2, [pc, #352]	; (80070fc <tcp_slowtmr+0x288>)
 8006f9a:	5cd3      	ldrb	r3, [r2, r3]
 8006f9c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006fa4:	7c7a      	ldrb	r2, [r7, #17]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d907      	bls.n	8006fba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006fc0:	7c7a      	ldrb	r2, [r7, #17]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	f200 80d2 	bhi.w	800716c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006fc8:	2301      	movs	r3, #1
 8006fca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d108      	bne.n	8006fe8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006fd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006fd8:	f004 fc2a 	bl	800b830 <tcp_zero_window_probe>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d014      	beq.n	800700c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	623b      	str	r3, [r7, #32]
 8006fe6:	e011      	b.n	800700c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ff2:	f003 faef 	bl	800a5d4 <tcp_split_unsent_seg>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d107      	bne.n	800700c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ffe:	f003 fd6f 	bl	800aae0 <tcp_output>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 80ac 	beq.w	800716c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800701c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007022:	2b06      	cmp	r3, #6
 8007024:	f200 80a2 	bhi.w	800716c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800702e:	3301      	adds	r3, #1
 8007030:	b2da      	uxtb	r2, r3
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007038:	e098      	b.n	800716c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800703a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007040:	2b00      	cmp	r3, #0
 8007042:	db0f      	blt.n	8007064 <tcp_slowtmr+0x1f0>
 8007044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007046:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800704a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800704e:	4293      	cmp	r3, r2
 8007050:	d008      	beq.n	8007064 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007058:	b29b      	uxth	r3, r3
 800705a:	3301      	adds	r3, #1
 800705c:	b29b      	uxth	r3, r3
 800705e:	b21a      	sxth	r2, r3
 8007060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007062:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007070:	429a      	cmp	r2, r3
 8007072:	db7b      	blt.n	800716c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007076:	f004 f827 	bl	800b0c8 <tcp_rexmit_rto_prepare>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <tcp_slowtmr+0x21c>
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007084:	2b00      	cmp	r3, #0
 8007086:	d171      	bne.n	800716c <tcp_slowtmr+0x2f8>
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d06d      	beq.n	800716c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007092:	7d1b      	ldrb	r3, [r3, #20]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d03a      	beq.n	800710e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800709a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800709e:	2b0c      	cmp	r3, #12
 80070a0:	bf28      	it	cs
 80070a2:	230c      	movcs	r3, #12
 80070a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80070ac:	10db      	asrs	r3, r3, #3
 80070ae:	b21b      	sxth	r3, r3
 80070b0:	461a      	mov	r2, r3
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80070b8:	4413      	add	r3, r2
 80070ba:	7efa      	ldrb	r2, [r7, #27]
 80070bc:	4910      	ldr	r1, [pc, #64]	; (8007100 <tcp_slowtmr+0x28c>)
 80070be:	5c8a      	ldrb	r2, [r1, r2]
 80070c0:	4093      	lsls	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80070ca:	4293      	cmp	r3, r2
 80070cc:	dc1a      	bgt.n	8007104 <tcp_slowtmr+0x290>
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	b21a      	sxth	r2, r3
 80070d2:	e019      	b.n	8007108 <tcp_slowtmr+0x294>
 80070d4:	2000876c 	.word	0x2000876c
 80070d8:	20008782 	.word	0x20008782
 80070dc:	20008778 	.word	0x20008778
 80070e0:	08010ca8 	.word	0x08010ca8
 80070e4:	08010fec 	.word	0x08010fec
 80070e8:	08010cec 	.word	0x08010cec
 80070ec:	08011018 	.word	0x08011018
 80070f0:	08011044 	.word	0x08011044
 80070f4:	08011074 	.word	0x08011074
 80070f8:	080110a8 	.word	0x080110a8
 80070fc:	08012c80 	.word	0x08012c80
 8007100:	08012c70 	.word	0x08012c70
 8007104:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	2200      	movs	r2, #0
 8007112:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007116:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007120:	4293      	cmp	r3, r2
 8007122:	bf28      	it	cs
 8007124:	4613      	movcs	r3, r2
 8007126:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007128:	8a7b      	ldrh	r3, [r7, #18]
 800712a:	085b      	lsrs	r3, r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007130:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	b29b      	uxth	r3, r3
 8007142:	429a      	cmp	r2, r3
 8007144:	d206      	bcs.n	8007154 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800715a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	2200      	movs	r2, #0
 8007162:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007168:	f004 f81e 	bl	800b1a8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716e:	7d1b      	ldrb	r3, [r3, #20]
 8007170:	2b06      	cmp	r3, #6
 8007172:	d111      	bne.n	8007198 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007176:	8b5b      	ldrh	r3, [r3, #26]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007180:	4b9d      	ldr	r3, [pc, #628]	; (80073f8 <tcp_slowtmr+0x584>)
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b28      	cmp	r3, #40	; 0x28
 800718c:	d904      	bls.n	8007198 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800718e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007192:	3301      	adds	r3, #1
 8007194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	7a5b      	ldrb	r3, [r3, #9]
 800719c:	f003 0308 	and.w	r3, r3, #8
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d04c      	beq.n	800723e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80071a8:	2b04      	cmp	r3, #4
 80071aa:	d003      	beq.n	80071b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80071b0:	2b07      	cmp	r3, #7
 80071b2:	d144      	bne.n	800723e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80071b4:	4b90      	ldr	r3, [pc, #576]	; (80073f8 <tcp_slowtmr+0x584>)
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071c4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80071c8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80071cc:	498b      	ldr	r1, [pc, #556]	; (80073fc <tcp_slowtmr+0x588>)
 80071ce:	fba1 1303 	umull	r1, r3, r1, r3
 80071d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d90a      	bls.n	80071ee <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80071d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071dc:	3301      	adds	r3, #1
 80071de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80071e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071e6:	3301      	adds	r3, #1
 80071e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071ec:	e027      	b.n	800723e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80071ee:	4b82      	ldr	r3, [pc, #520]	; (80073f8 <tcp_slowtmr+0x584>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80071f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80071fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007200:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007204:	4618      	mov	r0, r3
 8007206:	4b7e      	ldr	r3, [pc, #504]	; (8007400 <tcp_slowtmr+0x58c>)
 8007208:	fb00 f303 	mul.w	r3, r0, r3
 800720c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800720e:	497b      	ldr	r1, [pc, #492]	; (80073fc <tcp_slowtmr+0x588>)
 8007210:	fba1 1303 	umull	r1, r3, r1, r3
 8007214:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007216:	429a      	cmp	r2, r3
 8007218:	d911      	bls.n	800723e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800721a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800721c:	f004 fac8 	bl	800b7b0 <tcp_keepalive>
 8007220:	4603      	mov	r3, r0
 8007222:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007226:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800722a:	2b00      	cmp	r3, #0
 800722c:	d107      	bne.n	800723e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007234:	3301      	adds	r3, #1
 8007236:	b2da      	uxtb	r2, r3
 8007238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007242:	2b00      	cmp	r3, #0
 8007244:	d011      	beq.n	800726a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007246:	4b6c      	ldr	r3, [pc, #432]	; (80073f8 <tcp_slowtmr+0x584>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	1ad2      	subs	r2, r2, r3
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007256:	4619      	mov	r1, r3
 8007258:	460b      	mov	r3, r1
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	440b      	add	r3, r1
 800725e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007260:	429a      	cmp	r2, r3
 8007262:	d302      	bcc.n	800726a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007266:	f000 fddb 	bl	8007e20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800726a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726c:	7d1b      	ldrb	r3, [r3, #20]
 800726e:	2b03      	cmp	r3, #3
 8007270:	d10b      	bne.n	800728a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007272:	4b61      	ldr	r3, [pc, #388]	; (80073f8 <tcp_slowtmr+0x584>)
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	6a1b      	ldr	r3, [r3, #32]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b28      	cmp	r3, #40	; 0x28
 800727e:	d904      	bls.n	800728a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007284:	3301      	adds	r3, #1
 8007286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	7d1b      	ldrb	r3, [r3, #20]
 800728e:	2b09      	cmp	r3, #9
 8007290:	d10b      	bne.n	80072aa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007292:	4b59      	ldr	r3, [pc, #356]	; (80073f8 <tcp_slowtmr+0x584>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2bf0      	cmp	r3, #240	; 0xf0
 800729e:	d904      	bls.n	80072aa <tcp_slowtmr+0x436>
        ++pcb_remove;
 80072a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072a4:	3301      	adds	r3, #1
 80072a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80072aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d060      	beq.n	8007374 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80072ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072bc:	f000 fbfc 	bl	8007ab8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d010      	beq.n	80072e8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80072c6:	4b4f      	ldr	r3, [pc, #316]	; (8007404 <tcp_slowtmr+0x590>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d106      	bne.n	80072de <tcp_slowtmr+0x46a>
 80072d0:	4b4d      	ldr	r3, [pc, #308]	; (8007408 <tcp_slowtmr+0x594>)
 80072d2:	f240 526d 	movw	r2, #1389	; 0x56d
 80072d6:	494d      	ldr	r1, [pc, #308]	; (800740c <tcp_slowtmr+0x598>)
 80072d8:	484d      	ldr	r0, [pc, #308]	; (8007410 <tcp_slowtmr+0x59c>)
 80072da:	f007 fe8b 	bl	800eff4 <iprintf>
        prev->next = pcb->next;
 80072de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e0:	68da      	ldr	r2, [r3, #12]
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	60da      	str	r2, [r3, #12]
 80072e6:	e00f      	b.n	8007308 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80072e8:	4b46      	ldr	r3, [pc, #280]	; (8007404 <tcp_slowtmr+0x590>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d006      	beq.n	8007300 <tcp_slowtmr+0x48c>
 80072f2:	4b45      	ldr	r3, [pc, #276]	; (8007408 <tcp_slowtmr+0x594>)
 80072f4:	f240 5271 	movw	r2, #1393	; 0x571
 80072f8:	4946      	ldr	r1, [pc, #280]	; (8007414 <tcp_slowtmr+0x5a0>)
 80072fa:	4845      	ldr	r0, [pc, #276]	; (8007410 <tcp_slowtmr+0x59c>)
 80072fc:	f007 fe7a 	bl	800eff4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	4a3f      	ldr	r2, [pc, #252]	; (8007404 <tcp_slowtmr+0x590>)
 8007306:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007308:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800730c:	2b00      	cmp	r3, #0
 800730e:	d013      	beq.n	8007338 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007312:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007318:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	3304      	adds	r3, #4
 800731e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007320:	8ad2      	ldrh	r2, [r2, #22]
 8007322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007324:	8b09      	ldrh	r1, [r1, #24]
 8007326:	9102      	str	r1, [sp, #8]
 8007328:	9201      	str	r2, [sp, #4]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	462b      	mov	r3, r5
 800732e:	4622      	mov	r2, r4
 8007330:	4601      	mov	r1, r0
 8007332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007334:	f004 f988 	bl	800b648 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	7d1b      	ldrb	r3, [r3, #20]
 8007342:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800734e:	6838      	ldr	r0, [r7, #0]
 8007350:	f7ff f9f2 	bl	8006738 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007354:	4b30      	ldr	r3, [pc, #192]	; (8007418 <tcp_slowtmr+0x5a4>)
 8007356:	2200      	movs	r2, #0
 8007358:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d004      	beq.n	800736a <tcp_slowtmr+0x4f6>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f06f 010c 	mvn.w	r1, #12
 8007366:	68b8      	ldr	r0, [r7, #8]
 8007368:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800736a:	4b2b      	ldr	r3, [pc, #172]	; (8007418 <tcp_slowtmr+0x5a4>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d037      	beq.n	80073e2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007372:	e590      	b.n	8006e96 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800737e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007380:	7f1b      	ldrb	r3, [r3, #28]
 8007382:	3301      	adds	r3, #1
 8007384:	b2da      	uxtb	r2, r3
 8007386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007388:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	7f1a      	ldrb	r2, [r3, #28]
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	7f5b      	ldrb	r3, [r3, #29]
 8007392:	429a      	cmp	r2, r3
 8007394:	d325      	bcc.n	80073e2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	2200      	movs	r2, #0
 800739a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800739c:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <tcp_slowtmr+0x5a4>)
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00b      	beq.n	80073c4 <tcp_slowtmr+0x550>
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b4:	6912      	ldr	r2, [r2, #16]
 80073b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073b8:	4610      	mov	r0, r2
 80073ba:	4798      	blx	r3
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80073c2:	e002      	b.n	80073ca <tcp_slowtmr+0x556>
 80073c4:	2300      	movs	r3, #0
 80073c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80073ca:	4b13      	ldr	r3, [pc, #76]	; (8007418 <tcp_slowtmr+0x5a4>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d000      	beq.n	80073d4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80073d2:	e560      	b.n	8006e96 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80073d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d102      	bne.n	80073e2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80073dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073de:	f003 fb7f 	bl	800aae0 <tcp_output>
  while (pcb != NULL) {
 80073e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f47f ad5c 	bne.w	8006ea2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80073ee:	4b0b      	ldr	r3, [pc, #44]	; (800741c <tcp_slowtmr+0x5a8>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80073f4:	e067      	b.n	80074c6 <tcp_slowtmr+0x652>
 80073f6:	bf00      	nop
 80073f8:	2000876c 	.word	0x2000876c
 80073fc:	10624dd3 	.word	0x10624dd3
 8007400:	000124f8 	.word	0x000124f8
 8007404:	20008778 	.word	0x20008778
 8007408:	08010ca8 	.word	0x08010ca8
 800740c:	080110e0 	.word	0x080110e0
 8007410:	08010cec 	.word	0x08010cec
 8007414:	0801110c 	.word	0x0801110c
 8007418:	20008780 	.word	0x20008780
 800741c:	2000877c 	.word	0x2000877c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	7d1b      	ldrb	r3, [r3, #20]
 8007424:	2b0a      	cmp	r3, #10
 8007426:	d006      	beq.n	8007436 <tcp_slowtmr+0x5c2>
 8007428:	4b2b      	ldr	r3, [pc, #172]	; (80074d8 <tcp_slowtmr+0x664>)
 800742a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800742e:	492b      	ldr	r1, [pc, #172]	; (80074dc <tcp_slowtmr+0x668>)
 8007430:	482b      	ldr	r0, [pc, #172]	; (80074e0 <tcp_slowtmr+0x66c>)
 8007432:	f007 fddf 	bl	800eff4 <iprintf>
    pcb_remove = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800743c:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <tcp_slowtmr+0x670>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2bf0      	cmp	r3, #240	; 0xf0
 8007448:	d904      	bls.n	8007454 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800744a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800744e:	3301      	adds	r3, #1
 8007450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02f      	beq.n	80074bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800745c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800745e:	f000 fb2b 	bl	8007ab8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007464:	2b00      	cmp	r3, #0
 8007466:	d010      	beq.n	800748a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007468:	4b1f      	ldr	r3, [pc, #124]	; (80074e8 <tcp_slowtmr+0x674>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800746e:	429a      	cmp	r2, r3
 8007470:	d106      	bne.n	8007480 <tcp_slowtmr+0x60c>
 8007472:	4b19      	ldr	r3, [pc, #100]	; (80074d8 <tcp_slowtmr+0x664>)
 8007474:	f240 52af 	movw	r2, #1455	; 0x5af
 8007478:	491c      	ldr	r1, [pc, #112]	; (80074ec <tcp_slowtmr+0x678>)
 800747a:	4819      	ldr	r0, [pc, #100]	; (80074e0 <tcp_slowtmr+0x66c>)
 800747c:	f007 fdba 	bl	800eff4 <iprintf>
        prev->next = pcb->next;
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007486:	60da      	str	r2, [r3, #12]
 8007488:	e00f      	b.n	80074aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800748a:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <tcp_slowtmr+0x674>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007490:	429a      	cmp	r2, r3
 8007492:	d006      	beq.n	80074a2 <tcp_slowtmr+0x62e>
 8007494:	4b10      	ldr	r3, [pc, #64]	; (80074d8 <tcp_slowtmr+0x664>)
 8007496:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800749a:	4915      	ldr	r1, [pc, #84]	; (80074f0 <tcp_slowtmr+0x67c>)
 800749c:	4810      	ldr	r0, [pc, #64]	; (80074e0 <tcp_slowtmr+0x66c>)
 800749e:	f007 fda9 	bl	800eff4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	4a10      	ldr	r2, [pc, #64]	; (80074e8 <tcp_slowtmr+0x674>)
 80074a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80074b4:	69f8      	ldr	r0, [r7, #28]
 80074b6:	f7ff f93f 	bl	8006738 <tcp_free>
 80074ba:	e004      	b.n	80074c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80074c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1a9      	bne.n	8007420 <tcp_slowtmr+0x5ac>
    }
  }
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	3730      	adds	r7, #48	; 0x30
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bdb0      	pop	{r4, r5, r7, pc}
 80074d6:	bf00      	nop
 80074d8:	08010ca8 	.word	0x08010ca8
 80074dc:	08011138 	.word	0x08011138
 80074e0:	08010cec 	.word	0x08010cec
 80074e4:	2000876c 	.word	0x2000876c
 80074e8:	2000877c 	.word	0x2000877c
 80074ec:	08011168 	.word	0x08011168
 80074f0:	08011190 	.word	0x08011190

080074f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80074fa:	4b2d      	ldr	r3, [pc, #180]	; (80075b0 <tcp_fasttmr+0xbc>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	3301      	adds	r3, #1
 8007500:	b2da      	uxtb	r2, r3
 8007502:	4b2b      	ldr	r3, [pc, #172]	; (80075b0 <tcp_fasttmr+0xbc>)
 8007504:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007506:	4b2b      	ldr	r3, [pc, #172]	; (80075b4 <tcp_fasttmr+0xc0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800750c:	e048      	b.n	80075a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7f9a      	ldrb	r2, [r3, #30]
 8007512:	4b27      	ldr	r3, [pc, #156]	; (80075b0 <tcp_fasttmr+0xbc>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d03f      	beq.n	800759a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800751a:	4b25      	ldr	r3, [pc, #148]	; (80075b0 <tcp_fasttmr+0xbc>)
 800751c:	781a      	ldrb	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	8b5b      	ldrh	r3, [r3, #26]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d010      	beq.n	8007550 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	8b5b      	ldrh	r3, [r3, #26]
 8007532:	f043 0302 	orr.w	r3, r3, #2
 8007536:	b29a      	uxth	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f003 facf 	bl	800aae0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	8b5b      	ldrh	r3, [r3, #26]
 8007546:	f023 0303 	bic.w	r3, r3, #3
 800754a:	b29a      	uxth	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8b5b      	ldrh	r3, [r3, #26]
 8007554:	f003 0308 	and.w	r3, r3, #8
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8b5b      	ldrh	r3, [r3, #26]
 8007560:	f023 0308 	bic.w	r3, r3, #8
 8007564:	b29a      	uxth	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7ff fa78 	bl	8006a60 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00a      	beq.n	8007594 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800757e:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <tcp_fasttmr+0xc4>)
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f819 	bl	80075bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800758a:	4b0b      	ldr	r3, [pc, #44]	; (80075b8 <tcp_fasttmr+0xc4>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d000      	beq.n	8007594 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007592:	e7b8      	b.n	8007506 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	e002      	b.n	80075a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1b3      	bne.n	800750e <tcp_fasttmr+0x1a>
    }
  }
}
 80075a6:	bf00      	nop
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	20008782 	.word	0x20008782
 80075b4:	20008778 	.word	0x20008778
 80075b8:	20008780 	.word	0x20008780

080075bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d109      	bne.n	80075de <tcp_process_refused_data+0x22>
 80075ca:	4b37      	ldr	r3, [pc, #220]	; (80076a8 <tcp_process_refused_data+0xec>)
 80075cc:	f240 6209 	movw	r2, #1545	; 0x609
 80075d0:	4936      	ldr	r1, [pc, #216]	; (80076ac <tcp_process_refused_data+0xf0>)
 80075d2:	4837      	ldr	r0, [pc, #220]	; (80076b0 <tcp_process_refused_data+0xf4>)
 80075d4:	f007 fd0e 	bl	800eff4 <iprintf>
 80075d8:	f06f 030f 	mvn.w	r3, #15
 80075dc:	e060      	b.n	80076a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075e2:	7b5b      	ldrb	r3, [r3, #13]
 80075e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <tcp_process_refused_data+0x58>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6918      	ldr	r0, [r3, #16]
 8007606:	2300      	movs	r3, #0
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	47a0      	blx	r4
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
 8007612:	e007      	b.n	8007624 <tcp_process_refused_data+0x68>
 8007614:	2300      	movs	r3, #0
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	2000      	movs	r0, #0
 800761c:	f000 f8a4 	bl	8007768 <tcp_recv_null>
 8007620:	4603      	mov	r3, r0
 8007622:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d12a      	bne.n	8007682 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800762c:	7bbb      	ldrb	r3, [r7, #14]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d033      	beq.n	800769e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800763e:	d005      	beq.n	800764c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007644:	3301      	adds	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00b      	beq.n	800766e <tcp_process_refused_data+0xb2>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6918      	ldr	r0, [r3, #16]
 8007660:	2300      	movs	r3, #0
 8007662:	2200      	movs	r2, #0
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	47a0      	blx	r4
 8007668:	4603      	mov	r3, r0
 800766a:	73fb      	strb	r3, [r7, #15]
 800766c:	e001      	b.n	8007672 <tcp_process_refused_data+0xb6>
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007676:	f113 0f0d 	cmn.w	r3, #13
 800767a:	d110      	bne.n	800769e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800767c:	f06f 030c 	mvn.w	r3, #12
 8007680:	e00e      	b.n	80076a0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007686:	f113 0f0d 	cmn.w	r3, #13
 800768a:	d102      	bne.n	8007692 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800768c:	f06f 030c 	mvn.w	r3, #12
 8007690:	e006      	b.n	80076a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007698:	f06f 0304 	mvn.w	r3, #4
 800769c:	e000      	b.n	80076a0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd90      	pop	{r4, r7, pc}
 80076a8:	08010ca8 	.word	0x08010ca8
 80076ac:	080111b8 	.word	0x080111b8
 80076b0:	08010cec 	.word	0x08010cec

080076b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80076bc:	e007      	b.n	80076ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f80a 	bl	80076de <tcp_seg_free>
    seg = next;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1f4      	bne.n	80076be <tcp_segs_free+0xa>
  }
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00c      	beq.n	8007706 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d004      	beq.n	80076fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe fcdb 	bl	80060b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	2003      	movs	r0, #3
 8007702:	f7fd fe61 	bl	80053c8 <memp_free>
  }
}
 8007706:	bf00      	nop
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <tcp_seg_copy+0x1c>
 800771e:	4b0f      	ldr	r3, [pc, #60]	; (800775c <tcp_seg_copy+0x4c>)
 8007720:	f240 6282 	movw	r2, #1666	; 0x682
 8007724:	490e      	ldr	r1, [pc, #56]	; (8007760 <tcp_seg_copy+0x50>)
 8007726:	480f      	ldr	r0, [pc, #60]	; (8007764 <tcp_seg_copy+0x54>)
 8007728:	f007 fc64 	bl	800eff4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800772c:	2003      	movs	r0, #3
 800772e:	f7fd fddb 	bl	80052e8 <memp_malloc>
 8007732:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <tcp_seg_copy+0x2e>
    return NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	e00a      	b.n	8007754 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800773e:	2210      	movs	r2, #16
 8007740:	6879      	ldr	r1, [r7, #4]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f007 fd6b 	bl	800f21e <memcpy>
  pbuf_ref(cseg->p);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	4618      	mov	r0, r3
 800774e:	f7fe fd51 	bl	80061f4 <pbuf_ref>
  return cseg;
 8007752:	68fb      	ldr	r3, [r7, #12]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	08010ca8 	.word	0x08010ca8
 8007760:	080111fc 	.word	0x080111fc
 8007764:	08010cec 	.word	0x08010cec

08007768 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d109      	bne.n	8007790 <tcp_recv_null+0x28>
 800777c:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <tcp_recv_null+0x60>)
 800777e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007782:	4912      	ldr	r1, [pc, #72]	; (80077cc <tcp_recv_null+0x64>)
 8007784:	4812      	ldr	r0, [pc, #72]	; (80077d0 <tcp_recv_null+0x68>)
 8007786:	f007 fc35 	bl	800eff4 <iprintf>
 800778a:	f06f 030f 	mvn.w	r3, #15
 800778e:	e016      	b.n	80077be <tcp_recv_null+0x56>

  if (p != NULL) {
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	891b      	ldrh	r3, [r3, #8]
 800779a:	4619      	mov	r1, r3
 800779c:	68b8      	ldr	r0, [r7, #8]
 800779e:	f7ff fb19 	bl	8006dd4 <tcp_recved>
    pbuf_free(p);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f7fe fc86 	bl	80060b4 <pbuf_free>
 80077a8:	e008      	b.n	80077bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80077aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d104      	bne.n	80077bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80077b2:	68b8      	ldr	r0, [r7, #8]
 80077b4:	f7ff f9be 	bl	8006b34 <tcp_close>
 80077b8:	4603      	mov	r3, r0
 80077ba:	e000      	b.n	80077be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	08010ca8 	.word	0x08010ca8
 80077cc:	08011218 	.word	0x08011218
 80077d0:	08010cec 	.word	0x08010cec

080077d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4603      	mov	r3, r0
 80077dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80077de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	db01      	blt.n	80077ea <tcp_kill_prio+0x16>
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	e000      	b.n	80077ec <tcp_kill_prio+0x18>
 80077ea:	237f      	movs	r3, #127	; 0x7f
 80077ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d034      	beq.n	800785e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007802:	4b19      	ldr	r3, [pc, #100]	; (8007868 <tcp_kill_prio+0x94>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	e01f      	b.n	800784a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	7d5b      	ldrb	r3, [r3, #21]
 800780e:	7afa      	ldrb	r2, [r7, #11]
 8007810:	429a      	cmp	r2, r3
 8007812:	d80c      	bhi.n	800782e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007818:	7afa      	ldrb	r2, [r7, #11]
 800781a:	429a      	cmp	r2, r3
 800781c:	d112      	bne.n	8007844 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <tcp_kill_prio+0x98>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	6a1b      	ldr	r3, [r3, #32]
 8007826:	1ad3      	subs	r3, r2, r3
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	429a      	cmp	r2, r3
 800782c:	d80a      	bhi.n	8007844 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <tcp_kill_prio+0x98>)
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	7d5b      	ldrb	r3, [r3, #21]
 8007842:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1dc      	bne.n	800780a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007856:	6938      	ldr	r0, [r7, #16]
 8007858:	f7ff fa56 	bl	8006d08 <tcp_abort>
 800785c:	e000      	b.n	8007860 <tcp_kill_prio+0x8c>
    return;
 800785e:	bf00      	nop
  }
}
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	20008778 	.word	0x20008778
 800786c:	2000876c 	.word	0x2000876c

08007870 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	2b08      	cmp	r3, #8
 800787e:	d009      	beq.n	8007894 <tcp_kill_state+0x24>
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	2b09      	cmp	r3, #9
 8007884:	d006      	beq.n	8007894 <tcp_kill_state+0x24>
 8007886:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <tcp_kill_state+0x80>)
 8007888:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800788c:	4919      	ldr	r1, [pc, #100]	; (80078f4 <tcp_kill_state+0x84>)
 800788e:	481a      	ldr	r0, [pc, #104]	; (80078f8 <tcp_kill_state+0x88>)
 8007890:	f007 fbb0 	bl	800eff4 <iprintf>

  inactivity = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800789c:	4b17      	ldr	r3, [pc, #92]	; (80078fc <tcp_kill_state+0x8c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	e017      	b.n	80078d4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	7d1b      	ldrb	r3, [r3, #20]
 80078a8:	79fa      	ldrb	r2, [r7, #7]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d10f      	bne.n	80078ce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80078ae:	4b14      	ldr	r3, [pc, #80]	; (8007900 <tcp_kill_state+0x90>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d807      	bhi.n	80078ce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80078be:	4b10      	ldr	r3, [pc, #64]	; (8007900 <tcp_kill_state+0x90>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e4      	bne.n	80078a4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80078e0:	2100      	movs	r1, #0
 80078e2:	6938      	ldr	r0, [r7, #16]
 80078e4:	f7ff f952 	bl	8006b8c <tcp_abandon>
  }
}
 80078e8:	bf00      	nop
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	08010ca8 	.word	0x08010ca8
 80078f4:	08011234 	.word	0x08011234
 80078f8:	08010cec 	.word	0x08010cec
 80078fc:	20008778 	.word	0x20008778
 8007900:	2000876c 	.word	0x2000876c

08007904 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007912:	4b12      	ldr	r3, [pc, #72]	; (800795c <tcp_kill_timewait+0x58>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	e012      	b.n	8007940 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800791a:	4b11      	ldr	r3, [pc, #68]	; (8007960 <tcp_kill_timewait+0x5c>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	429a      	cmp	r2, r3
 8007928:	d807      	bhi.n	800793a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800792a:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <tcp_kill_timewait+0x5c>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e9      	bne.n	800791a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d002      	beq.n	8007952 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800794c:	68b8      	ldr	r0, [r7, #8]
 800794e:	f7ff f9db 	bl	8006d08 <tcp_abort>
  }
}
 8007952:	bf00      	nop
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	2000877c 	.word	0x2000877c
 8007960:	2000876c 	.word	0x2000876c

08007964 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800796a:	4b10      	ldr	r3, [pc, #64]	; (80079ac <tcp_handle_closepend+0x48>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007970:	e014      	b.n	800799c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	8b5b      	ldrh	r3, [r3, #26]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d009      	beq.n	8007998 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	8b5b      	ldrh	r3, [r3, #26]
 8007988:	f023 0308 	bic.w	r3, r3, #8
 800798c:	b29a      	uxth	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff f864 	bl	8006a60 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e7      	bne.n	8007972 <tcp_handle_closepend+0xe>
  }
}
 80079a2:	bf00      	nop
 80079a4:	bf00      	nop
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	20008778 	.word	0x20008778

080079b0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4603      	mov	r3, r0
 80079b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80079ba:	2001      	movs	r0, #1
 80079bc:	f7fd fc94 	bl	80052e8 <memp_malloc>
 80079c0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d126      	bne.n	8007a16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80079c8:	f7ff ffcc 	bl	8007964 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80079cc:	f7ff ff9a 	bl	8007904 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80079d0:	2001      	movs	r0, #1
 80079d2:	f7fd fc89 	bl	80052e8 <memp_malloc>
 80079d6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d11b      	bne.n	8007a16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80079de:	2009      	movs	r0, #9
 80079e0:	f7ff ff46 	bl	8007870 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80079e4:	2001      	movs	r0, #1
 80079e6:	f7fd fc7f 	bl	80052e8 <memp_malloc>
 80079ea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d111      	bne.n	8007a16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80079f2:	2008      	movs	r0, #8
 80079f4:	f7ff ff3c 	bl	8007870 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80079f8:	2001      	movs	r0, #1
 80079fa:	f7fd fc75 	bl	80052e8 <memp_malloc>
 80079fe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d107      	bne.n	8007a16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff fee3 	bl	80077d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007a0e:	2001      	movs	r0, #1
 8007a10:	f7fd fc6a 	bl	80052e8 <memp_malloc>
 8007a14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d03f      	beq.n	8007a9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007a1c:	229c      	movs	r2, #156	; 0x9c
 8007a1e:	2100      	movs	r1, #0
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f007 fb86 	bl	800f132 <memset>
    pcb->prio = prio;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	79fa      	ldrb	r2, [r7, #7]
 8007a2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007a32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	22ff      	movs	r2, #255	; 0xff
 8007a4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007a52:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2206      	movs	r2, #6
 8007a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2206      	movs	r2, #6
 8007a60:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a68:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007a72:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <tcp_alloc+0xf8>)
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007a7a:	4b0c      	ldr	r3, [pc, #48]	; (8007aac <tcp_alloc+0xfc>)
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007a88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4a08      	ldr	r2, [pc, #32]	; (8007ab0 <tcp_alloc+0x100>)
 8007a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <tcp_alloc+0x104>)
 8007a98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	2000876c 	.word	0x2000876c
 8007aac:	20008782 	.word	0x20008782
 8007ab0:	08007769 	.word	0x08007769
 8007ab4:	006ddd00 	.word	0x006ddd00

08007ab8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d107      	bne.n	8007ad6 <tcp_pcb_purge+0x1e>
 8007ac6:	4b21      	ldr	r3, [pc, #132]	; (8007b4c <tcp_pcb_purge+0x94>)
 8007ac8:	f640 0251 	movw	r2, #2129	; 0x851
 8007acc:	4920      	ldr	r1, [pc, #128]	; (8007b50 <tcp_pcb_purge+0x98>)
 8007ace:	4821      	ldr	r0, [pc, #132]	; (8007b54 <tcp_pcb_purge+0x9c>)
 8007ad0:	f007 fa90 	bl	800eff4 <iprintf>
 8007ad4:	e037      	b.n	8007b46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	7d1b      	ldrb	r3, [r3, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d033      	beq.n	8007b46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007ae2:	2b0a      	cmp	r3, #10
 8007ae4:	d02f      	beq.n	8007b46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d02b      	beq.n	8007b46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d007      	beq.n	8007b06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7fe fada 	bl	80060b4 <pbuf_free>
      pcb->refused_data = NULL;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f986 	bl	8007e20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff fdc7 	bl	80076b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7ff fdc2 	bl	80076b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	66da      	str	r2, [r3, #108]	; 0x6c
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	08010ca8 	.word	0x08010ca8
 8007b50:	080112f4 	.word	0x080112f4
 8007b54:	08010cec 	.word	0x08010cec

08007b58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d106      	bne.n	8007b76 <tcp_pcb_remove+0x1e>
 8007b68:	4b3e      	ldr	r3, [pc, #248]	; (8007c64 <tcp_pcb_remove+0x10c>)
 8007b6a:	f640 0283 	movw	r2, #2179	; 0x883
 8007b6e:	493e      	ldr	r1, [pc, #248]	; (8007c68 <tcp_pcb_remove+0x110>)
 8007b70:	483e      	ldr	r0, [pc, #248]	; (8007c6c <tcp_pcb_remove+0x114>)
 8007b72:	f007 fa3f 	bl	800eff4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d106      	bne.n	8007b8a <tcp_pcb_remove+0x32>
 8007b7c:	4b39      	ldr	r3, [pc, #228]	; (8007c64 <tcp_pcb_remove+0x10c>)
 8007b7e:	f640 0284 	movw	r2, #2180	; 0x884
 8007b82:	493b      	ldr	r1, [pc, #236]	; (8007c70 <tcp_pcb_remove+0x118>)
 8007b84:	4839      	ldr	r0, [pc, #228]	; (8007c6c <tcp_pcb_remove+0x114>)
 8007b86:	f007 fa35 	bl	800eff4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d105      	bne.n	8007ba0 <tcp_pcb_remove+0x48>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68da      	ldr	r2, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e013      	b.n	8007bc8 <tcp_pcb_remove+0x70>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	e00c      	b.n	8007bc2 <tcp_pcb_remove+0x6a>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d104      	bne.n	8007bbc <tcp_pcb_remove+0x64>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	60da      	str	r2, [r3, #12]
 8007bba:	e005      	b.n	8007bc8 <tcp_pcb_remove+0x70>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1ef      	bne.n	8007ba8 <tcp_pcb_remove+0x50>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007bce:	6838      	ldr	r0, [r7, #0]
 8007bd0:	f7ff ff72 	bl	8007ab8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	7d1b      	ldrb	r3, [r3, #20]
 8007bd8:	2b0a      	cmp	r3, #10
 8007bda:	d013      	beq.n	8007c04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d00f      	beq.n	8007c04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	8b5b      	ldrh	r3, [r3, #26]
 8007be8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d009      	beq.n	8007c04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	8b5b      	ldrh	r3, [r3, #26]
 8007bf4:	f043 0302 	orr.w	r3, r3, #2
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007bfe:	6838      	ldr	r0, [r7, #0]
 8007c00:	f002 ff6e 	bl	800aae0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	7d1b      	ldrb	r3, [r3, #20]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d020      	beq.n	8007c4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d006      	beq.n	8007c22 <tcp_pcb_remove+0xca>
 8007c14:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <tcp_pcb_remove+0x10c>)
 8007c16:	f640 0293 	movw	r2, #2195	; 0x893
 8007c1a:	4916      	ldr	r1, [pc, #88]	; (8007c74 <tcp_pcb_remove+0x11c>)
 8007c1c:	4813      	ldr	r0, [pc, #76]	; (8007c6c <tcp_pcb_remove+0x114>)
 8007c1e:	f007 f9e9 	bl	800eff4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d006      	beq.n	8007c38 <tcp_pcb_remove+0xe0>
 8007c2a:	4b0e      	ldr	r3, [pc, #56]	; (8007c64 <tcp_pcb_remove+0x10c>)
 8007c2c:	f640 0294 	movw	r2, #2196	; 0x894
 8007c30:	4911      	ldr	r1, [pc, #68]	; (8007c78 <tcp_pcb_remove+0x120>)
 8007c32:	480e      	ldr	r0, [pc, #56]	; (8007c6c <tcp_pcb_remove+0x114>)
 8007c34:	f007 f9de 	bl	800eff4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d006      	beq.n	8007c4e <tcp_pcb_remove+0xf6>
 8007c40:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <tcp_pcb_remove+0x10c>)
 8007c42:	f640 0296 	movw	r2, #2198	; 0x896
 8007c46:	490d      	ldr	r1, [pc, #52]	; (8007c7c <tcp_pcb_remove+0x124>)
 8007c48:	4808      	ldr	r0, [pc, #32]	; (8007c6c <tcp_pcb_remove+0x114>)
 8007c4a:	f007 f9d3 	bl	800eff4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2200      	movs	r2, #0
 8007c52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2200      	movs	r2, #0
 8007c58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	08010ca8 	.word	0x08010ca8
 8007c68:	08011310 	.word	0x08011310
 8007c6c:	08010cec 	.word	0x08010cec
 8007c70:	0801132c 	.word	0x0801132c
 8007c74:	0801134c 	.word	0x0801134c
 8007c78:	08011364 	.word	0x08011364
 8007c7c:	08011380 	.word	0x08011380

08007c80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <tcp_next_iss+0x1c>
 8007c8e:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <tcp_next_iss+0x38>)
 8007c90:	f640 02af 	movw	r2, #2223	; 0x8af
 8007c94:	4909      	ldr	r1, [pc, #36]	; (8007cbc <tcp_next_iss+0x3c>)
 8007c96:	480a      	ldr	r0, [pc, #40]	; (8007cc0 <tcp_next_iss+0x40>)
 8007c98:	f007 f9ac 	bl	800eff4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007c9c:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <tcp_next_iss+0x44>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	4b09      	ldr	r3, [pc, #36]	; (8007cc8 <tcp_next_iss+0x48>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	4a07      	ldr	r2, [pc, #28]	; (8007cc4 <tcp_next_iss+0x44>)
 8007ca8:	6013      	str	r3, [r2, #0]
  return iss;
 8007caa:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <tcp_next_iss+0x44>)
 8007cac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	08010ca8 	.word	0x08010ca8
 8007cbc:	08011398 	.word	0x08011398
 8007cc0:	08010cec 	.word	0x08010cec
 8007cc4:	20000024 	.word	0x20000024
 8007cc8:	2000876c 	.word	0x2000876c

08007ccc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d106      	bne.n	8007cee <tcp_eff_send_mss_netif+0x22>
 8007ce0:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <tcp_eff_send_mss_netif+0x68>)
 8007ce2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007ce6:	4914      	ldr	r1, [pc, #80]	; (8007d38 <tcp_eff_send_mss_netif+0x6c>)
 8007ce8:	4814      	ldr	r0, [pc, #80]	; (8007d3c <tcp_eff_send_mss_netif+0x70>)
 8007cea:	f007 f983 	bl	800eff4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007cf4:	89fb      	ldrh	r3, [r7, #14]
 8007cf6:	e019      	b.n	8007d2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007cfc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007cfe:	8afb      	ldrh	r3, [r7, #22]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d012      	beq.n	8007d2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007d04:	2328      	movs	r3, #40	; 0x28
 8007d06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007d08:	8afa      	ldrh	r2, [r7, #22]
 8007d0a:	8abb      	ldrh	r3, [r7, #20]
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d904      	bls.n	8007d1a <tcp_eff_send_mss_netif+0x4e>
 8007d10:	8afa      	ldrh	r2, [r7, #22]
 8007d12:	8abb      	ldrh	r3, [r7, #20]
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	e000      	b.n	8007d1c <tcp_eff_send_mss_netif+0x50>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007d1e:	8a7a      	ldrh	r2, [r7, #18]
 8007d20:	89fb      	ldrh	r3, [r7, #14]
 8007d22:	4293      	cmp	r3, r2
 8007d24:	bf28      	it	cs
 8007d26:	4613      	movcs	r3, r2
 8007d28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007d2a:	89fb      	ldrh	r3, [r7, #14]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	08010ca8 	.word	0x08010ca8
 8007d38:	080113b4 	.word	0x080113b4
 8007d3c:	08010cec 	.word	0x08010cec

08007d40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d119      	bne.n	8007d88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007d54:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007d56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007d5a:	4910      	ldr	r1, [pc, #64]	; (8007d9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007d5c:	4810      	ldr	r0, [pc, #64]	; (8007da0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007d5e:	f007 f949 	bl	800eff4 <iprintf>

  while (pcb != NULL) {
 8007d62:	e011      	b.n	8007d88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d108      	bne.n	8007d82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7fe ffc6 	bl	8006d08 <tcp_abort>
      pcb = next;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e002      	b.n	8007d88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1ea      	bne.n	8007d64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007d8e:	bf00      	nop
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	08010ca8 	.word	0x08010ca8
 8007d9c:	080113dc 	.word	0x080113dc
 8007da0:	08010cec 	.word	0x08010cec

08007da4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d02a      	beq.n	8007e0a <tcp_netif_ip_addr_changed+0x66>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d026      	beq.n	8007e0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007dbc:	4b15      	ldr	r3, [pc, #84]	; (8007e14 <tcp_netif_ip_addr_changed+0x70>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff ffbc 	bl	8007d40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007dc8:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <tcp_netif_ip_addr_changed+0x74>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7ff ffb6 	bl	8007d40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d017      	beq.n	8007e0a <tcp_netif_ip_addr_changed+0x66>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d013      	beq.n	8007e0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007de2:	4b0e      	ldr	r3, [pc, #56]	; (8007e1c <tcp_netif_ip_addr_changed+0x78>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e00c      	b.n	8007e04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d103      	bne.n	8007dfe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	60fb      	str	r3, [r7, #12]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1ef      	bne.n	8007dea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20008778 	.word	0x20008778
 8007e18:	20008770 	.word	0x20008770
 8007e1c:	20008774 	.word	0x20008774

08007e20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d007      	beq.n	8007e40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff fc3d 	bl	80076b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b08d      	sub	sp, #52	; 0x34
 8007e4c:	af04      	add	r7, sp, #16
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d105      	bne.n	8007e64 <tcp_input+0x1c>
 8007e58:	4b9b      	ldr	r3, [pc, #620]	; (80080c8 <tcp_input+0x280>)
 8007e5a:	2283      	movs	r2, #131	; 0x83
 8007e5c:	499b      	ldr	r1, [pc, #620]	; (80080cc <tcp_input+0x284>)
 8007e5e:	489c      	ldr	r0, [pc, #624]	; (80080d0 <tcp_input+0x288>)
 8007e60:	f007 f8c8 	bl	800eff4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	4a9a      	ldr	r2, [pc, #616]	; (80080d4 <tcp_input+0x28c>)
 8007e6a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	895b      	ldrh	r3, [r3, #10]
 8007e70:	2b13      	cmp	r3, #19
 8007e72:	f240 83d1 	bls.w	8008618 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007e76:	4b98      	ldr	r3, [pc, #608]	; (80080d8 <tcp_input+0x290>)
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	4a97      	ldr	r2, [pc, #604]	; (80080d8 <tcp_input+0x290>)
 8007e7c:	6812      	ldr	r2, [r2, #0]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f005 ffd1 	bl	800de28 <ip4_addr_isbroadcast_u32>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f040 83c7 	bne.w	800861c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007e8e:	4b92      	ldr	r3, [pc, #584]	; (80080d8 <tcp_input+0x290>)
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007e96:	2be0      	cmp	r3, #224	; 0xe0
 8007e98:	f000 83c0 	beq.w	800861c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007e9c:	4b8d      	ldr	r3, [pc, #564]	; (80080d4 <tcp_input+0x28c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	899b      	ldrh	r3, [r3, #12]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fc fda7 	bl	80049f8 <lwip_htons>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	0b1b      	lsrs	r3, r3, #12
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007eb6:	7cbb      	ldrb	r3, [r7, #18]
 8007eb8:	2b13      	cmp	r3, #19
 8007eba:	f240 83b1 	bls.w	8008620 <tcp_input+0x7d8>
 8007ebe:	7cbb      	ldrb	r3, [r7, #18]
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	891b      	ldrh	r3, [r3, #8]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	f200 83aa 	bhi.w	8008620 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007ecc:	7cbb      	ldrb	r3, [r7, #18]
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	3b14      	subs	r3, #20
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	4b81      	ldr	r3, [pc, #516]	; (80080dc <tcp_input+0x294>)
 8007ed6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007ed8:	4b81      	ldr	r3, [pc, #516]	; (80080e0 <tcp_input+0x298>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	895a      	ldrh	r2, [r3, #10]
 8007ee2:	7cbb      	ldrb	r3, [r7, #18]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d309      	bcc.n	8007efe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007eea:	4b7c      	ldr	r3, [pc, #496]	; (80080dc <tcp_input+0x294>)
 8007eec:	881a      	ldrh	r2, [r3, #0]
 8007eee:	4b7d      	ldr	r3, [pc, #500]	; (80080e4 <tcp_input+0x29c>)
 8007ef0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007ef2:	7cbb      	ldrb	r3, [r7, #18]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7fe f856 	bl	8005fa8 <pbuf_remove_header>
 8007efc:	e04e      	b.n	8007f9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d105      	bne.n	8007f12 <tcp_input+0xca>
 8007f06:	4b70      	ldr	r3, [pc, #448]	; (80080c8 <tcp_input+0x280>)
 8007f08:	22c2      	movs	r2, #194	; 0xc2
 8007f0a:	4977      	ldr	r1, [pc, #476]	; (80080e8 <tcp_input+0x2a0>)
 8007f0c:	4870      	ldr	r0, [pc, #448]	; (80080d0 <tcp_input+0x288>)
 8007f0e:	f007 f871 	bl	800eff4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007f12:	2114      	movs	r1, #20
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7fe f847 	bl	8005fa8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	895a      	ldrh	r2, [r3, #10]
 8007f1e:	4b71      	ldr	r3, [pc, #452]	; (80080e4 <tcp_input+0x29c>)
 8007f20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007f22:	4b6e      	ldr	r3, [pc, #440]	; (80080dc <tcp_input+0x294>)
 8007f24:	881a      	ldrh	r2, [r3, #0]
 8007f26:	4b6f      	ldr	r3, [pc, #444]	; (80080e4 <tcp_input+0x29c>)
 8007f28:	881b      	ldrh	r3, [r3, #0]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007f2e:	4b6d      	ldr	r3, [pc, #436]	; (80080e4 <tcp_input+0x29c>)
 8007f30:	881b      	ldrh	r3, [r3, #0]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fe f837 	bl	8005fa8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	895b      	ldrh	r3, [r3, #10]
 8007f40:	8a3a      	ldrh	r2, [r7, #16]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	f200 836e 	bhi.w	8008624 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	4a64      	ldr	r2, [pc, #400]	; (80080e0 <tcp_input+0x298>)
 8007f50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	8a3a      	ldrh	r2, [r7, #16]
 8007f58:	4611      	mov	r1, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7fe f824 	bl	8005fa8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	891a      	ldrh	r2, [r3, #8]
 8007f64:	8a3b      	ldrh	r3, [r7, #16]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	895b      	ldrh	r3, [r3, #10]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <tcp_input+0x13a>
 8007f76:	4b54      	ldr	r3, [pc, #336]	; (80080c8 <tcp_input+0x280>)
 8007f78:	22df      	movs	r2, #223	; 0xdf
 8007f7a:	495c      	ldr	r1, [pc, #368]	; (80080ec <tcp_input+0x2a4>)
 8007f7c:	4854      	ldr	r0, [pc, #336]	; (80080d0 <tcp_input+0x288>)
 8007f7e:	f007 f839 	bl	800eff4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	891a      	ldrh	r2, [r3, #8]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	891b      	ldrh	r3, [r3, #8]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d005      	beq.n	8007f9c <tcp_input+0x154>
 8007f90:	4b4d      	ldr	r3, [pc, #308]	; (80080c8 <tcp_input+0x280>)
 8007f92:	22e0      	movs	r2, #224	; 0xe0
 8007f94:	4956      	ldr	r1, [pc, #344]	; (80080f0 <tcp_input+0x2a8>)
 8007f96:	484e      	ldr	r0, [pc, #312]	; (80080d0 <tcp_input+0x288>)
 8007f98:	f007 f82c 	bl	800eff4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007f9c:	4b4d      	ldr	r3, [pc, #308]	; (80080d4 <tcp_input+0x28c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	4a4b      	ldr	r2, [pc, #300]	; (80080d4 <tcp_input+0x28c>)
 8007fa6:	6814      	ldr	r4, [r2, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7fc fd25 	bl	80049f8 <lwip_htons>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007fb2:	4b48      	ldr	r3, [pc, #288]	; (80080d4 <tcp_input+0x28c>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	885b      	ldrh	r3, [r3, #2]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	4a46      	ldr	r2, [pc, #280]	; (80080d4 <tcp_input+0x28c>)
 8007fbc:	6814      	ldr	r4, [r2, #0]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fc fd1a 	bl	80049f8 <lwip_htons>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007fc8:	4b42      	ldr	r3, [pc, #264]	; (80080d4 <tcp_input+0x28c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	4a41      	ldr	r2, [pc, #260]	; (80080d4 <tcp_input+0x28c>)
 8007fd0:	6814      	ldr	r4, [r2, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fc fd25 	bl	8004a22 <lwip_htonl>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	6063      	str	r3, [r4, #4]
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	4a45      	ldr	r2, [pc, #276]	; (80080f4 <tcp_input+0x2ac>)
 8007fe0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007fe2:	4b3c      	ldr	r3, [pc, #240]	; (80080d4 <tcp_input+0x28c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	4a3a      	ldr	r2, [pc, #232]	; (80080d4 <tcp_input+0x28c>)
 8007fea:	6814      	ldr	r4, [r2, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fc fd18 	bl	8004a22 <lwip_htonl>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	60a3      	str	r3, [r4, #8]
 8007ff6:	68a3      	ldr	r3, [r4, #8]
 8007ff8:	4a3f      	ldr	r2, [pc, #252]	; (80080f8 <tcp_input+0x2b0>)
 8007ffa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007ffc:	4b35      	ldr	r3, [pc, #212]	; (80080d4 <tcp_input+0x28c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	89db      	ldrh	r3, [r3, #14]
 8008002:	b29b      	uxth	r3, r3
 8008004:	4a33      	ldr	r2, [pc, #204]	; (80080d4 <tcp_input+0x28c>)
 8008006:	6814      	ldr	r4, [r2, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f7fc fcf5 	bl	80049f8 <lwip_htons>
 800800e:	4603      	mov	r3, r0
 8008010:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008012:	4b30      	ldr	r3, [pc, #192]	; (80080d4 <tcp_input+0x28c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	899b      	ldrh	r3, [r3, #12]
 8008018:	b29b      	uxth	r3, r3
 800801a:	4618      	mov	r0, r3
 800801c:	f7fc fcec 	bl	80049f8 <lwip_htons>
 8008020:	4603      	mov	r3, r0
 8008022:	b2db      	uxtb	r3, r3
 8008024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008028:	b2da      	uxtb	r2, r3
 800802a:	4b34      	ldr	r3, [pc, #208]	; (80080fc <tcp_input+0x2b4>)
 800802c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	891a      	ldrh	r2, [r3, #8]
 8008032:	4b33      	ldr	r3, [pc, #204]	; (8008100 <tcp_input+0x2b8>)
 8008034:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008036:	4b31      	ldr	r3, [pc, #196]	; (80080fc <tcp_input+0x2b4>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00c      	beq.n	800805c <tcp_input+0x214>
    tcplen++;
 8008042:	4b2f      	ldr	r3, [pc, #188]	; (8008100 <tcp_input+0x2b8>)
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	3301      	adds	r3, #1
 8008048:	b29a      	uxth	r2, r3
 800804a:	4b2d      	ldr	r3, [pc, #180]	; (8008100 <tcp_input+0x2b8>)
 800804c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	891a      	ldrh	r2, [r3, #8]
 8008052:	4b2b      	ldr	r3, [pc, #172]	; (8008100 <tcp_input+0x2b8>)
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	f200 82e6 	bhi.w	8008628 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800805c:	2300      	movs	r3, #0
 800805e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008060:	4b28      	ldr	r3, [pc, #160]	; (8008104 <tcp_input+0x2bc>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	61fb      	str	r3, [r7, #28]
 8008066:	e09d      	b.n	80081a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	7d1b      	ldrb	r3, [r3, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d105      	bne.n	800807c <tcp_input+0x234>
 8008070:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <tcp_input+0x280>)
 8008072:	22fb      	movs	r2, #251	; 0xfb
 8008074:	4924      	ldr	r1, [pc, #144]	; (8008108 <tcp_input+0x2c0>)
 8008076:	4816      	ldr	r0, [pc, #88]	; (80080d0 <tcp_input+0x288>)
 8008078:	f006 ffbc 	bl	800eff4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	7d1b      	ldrb	r3, [r3, #20]
 8008080:	2b0a      	cmp	r3, #10
 8008082:	d105      	bne.n	8008090 <tcp_input+0x248>
 8008084:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <tcp_input+0x280>)
 8008086:	22fc      	movs	r2, #252	; 0xfc
 8008088:	4920      	ldr	r1, [pc, #128]	; (800810c <tcp_input+0x2c4>)
 800808a:	4811      	ldr	r0, [pc, #68]	; (80080d0 <tcp_input+0x288>)
 800808c:	f006 ffb2 	bl	800eff4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	7d1b      	ldrb	r3, [r3, #20]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d105      	bne.n	80080a4 <tcp_input+0x25c>
 8008098:	4b0b      	ldr	r3, [pc, #44]	; (80080c8 <tcp_input+0x280>)
 800809a:	22fd      	movs	r2, #253	; 0xfd
 800809c:	491c      	ldr	r1, [pc, #112]	; (8008110 <tcp_input+0x2c8>)
 800809e:	480c      	ldr	r0, [pc, #48]	; (80080d0 <tcp_input+0x288>)
 80080a0:	f006 ffa8 	bl	800eff4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	7a1b      	ldrb	r3, [r3, #8]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d033      	beq.n	8008114 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	7a1a      	ldrb	r2, [r3, #8]
 80080b0:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <tcp_input+0x290>)
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080b8:	3301      	adds	r3, #1
 80080ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80080bc:	429a      	cmp	r2, r3
 80080be:	d029      	beq.n	8008114 <tcp_input+0x2cc>
      prev = pcb;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	61bb      	str	r3, [r7, #24]
      continue;
 80080c4:	e06b      	b.n	800819e <tcp_input+0x356>
 80080c6:	bf00      	nop
 80080c8:	08011410 	.word	0x08011410
 80080cc:	08011444 	.word	0x08011444
 80080d0:	0801145c 	.word	0x0801145c
 80080d4:	20008794 	.word	0x20008794
 80080d8:	200051fc 	.word	0x200051fc
 80080dc:	20008798 	.word	0x20008798
 80080e0:	2000879c 	.word	0x2000879c
 80080e4:	2000879a 	.word	0x2000879a
 80080e8:	08011484 	.word	0x08011484
 80080ec:	08011494 	.word	0x08011494
 80080f0:	080114a0 	.word	0x080114a0
 80080f4:	200087a4 	.word	0x200087a4
 80080f8:	200087a8 	.word	0x200087a8
 80080fc:	200087b0 	.word	0x200087b0
 8008100:	200087ae 	.word	0x200087ae
 8008104:	20008778 	.word	0x20008778
 8008108:	080114c0 	.word	0x080114c0
 800810c:	080114e8 	.word	0x080114e8
 8008110:	08011514 	.word	0x08011514
    }

    if (pcb->remote_port == tcphdr->src &&
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	8b1a      	ldrh	r2, [r3, #24]
 8008118:	4b72      	ldr	r3, [pc, #456]	; (80082e4 <tcp_input+0x49c>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	429a      	cmp	r2, r3
 8008122:	d13a      	bne.n	800819a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	8ada      	ldrh	r2, [r3, #22]
 8008128:	4b6e      	ldr	r3, [pc, #440]	; (80082e4 <tcp_input+0x49c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	885b      	ldrh	r3, [r3, #2]
 800812e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008130:	429a      	cmp	r2, r3
 8008132:	d132      	bne.n	800819a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	4b6b      	ldr	r3, [pc, #428]	; (80082e8 <tcp_input+0x4a0>)
 800813a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800813c:	429a      	cmp	r2, r3
 800813e:	d12c      	bne.n	800819a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	4b68      	ldr	r3, [pc, #416]	; (80082e8 <tcp_input+0x4a0>)
 8008146:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008148:	429a      	cmp	r2, r3
 800814a:	d126      	bne.n	800819a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	429a      	cmp	r2, r3
 8008154:	d106      	bne.n	8008164 <tcp_input+0x31c>
 8008156:	4b65      	ldr	r3, [pc, #404]	; (80082ec <tcp_input+0x4a4>)
 8008158:	f240 120d 	movw	r2, #269	; 0x10d
 800815c:	4964      	ldr	r1, [pc, #400]	; (80082f0 <tcp_input+0x4a8>)
 800815e:	4865      	ldr	r0, [pc, #404]	; (80082f4 <tcp_input+0x4ac>)
 8008160:	f006 ff48 	bl	800eff4 <iprintf>
      if (prev != NULL) {
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d00a      	beq.n	8008180 <tcp_input+0x338>
        prev->next = pcb->next;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008172:	4b61      	ldr	r3, [pc, #388]	; (80082f8 <tcp_input+0x4b0>)
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800817a:	4a5f      	ldr	r2, [pc, #380]	; (80082f8 <tcp_input+0x4b0>)
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	429a      	cmp	r2, r3
 8008188:	d111      	bne.n	80081ae <tcp_input+0x366>
 800818a:	4b58      	ldr	r3, [pc, #352]	; (80082ec <tcp_input+0x4a4>)
 800818c:	f240 1215 	movw	r2, #277	; 0x115
 8008190:	495a      	ldr	r1, [pc, #360]	; (80082fc <tcp_input+0x4b4>)
 8008192:	4858      	ldr	r0, [pc, #352]	; (80082f4 <tcp_input+0x4ac>)
 8008194:	f006 ff2e 	bl	800eff4 <iprintf>
      break;
 8008198:	e009      	b.n	80081ae <tcp_input+0x366>
    }
    prev = pcb;
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f47f af5e 	bne.w	8008068 <tcp_input+0x220>
 80081ac:	e000      	b.n	80081b0 <tcp_input+0x368>
      break;
 80081ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	f040 80aa 	bne.w	800830c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80081b8:	4b51      	ldr	r3, [pc, #324]	; (8008300 <tcp_input+0x4b8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	e03f      	b.n	8008240 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	7d1b      	ldrb	r3, [r3, #20]
 80081c4:	2b0a      	cmp	r3, #10
 80081c6:	d006      	beq.n	80081d6 <tcp_input+0x38e>
 80081c8:	4b48      	ldr	r3, [pc, #288]	; (80082ec <tcp_input+0x4a4>)
 80081ca:	f240 121f 	movw	r2, #287	; 0x11f
 80081ce:	494d      	ldr	r1, [pc, #308]	; (8008304 <tcp_input+0x4bc>)
 80081d0:	4848      	ldr	r0, [pc, #288]	; (80082f4 <tcp_input+0x4ac>)
 80081d2:	f006 ff0f 	bl	800eff4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	7a1b      	ldrb	r3, [r3, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d009      	beq.n	80081f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	7a1a      	ldrb	r2, [r3, #8]
 80081e2:	4b41      	ldr	r3, [pc, #260]	; (80082e8 <tcp_input+0x4a0>)
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081ea:	3301      	adds	r3, #1
 80081ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d122      	bne.n	8008238 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	8b1a      	ldrh	r2, [r3, #24]
 80081f6:	4b3b      	ldr	r3, [pc, #236]	; (80082e4 <tcp_input+0x49c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	429a      	cmp	r2, r3
 8008200:	d11b      	bne.n	800823a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	8ada      	ldrh	r2, [r3, #22]
 8008206:	4b37      	ldr	r3, [pc, #220]	; (80082e4 <tcp_input+0x49c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	885b      	ldrh	r3, [r3, #2]
 800820c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800820e:	429a      	cmp	r2, r3
 8008210:	d113      	bne.n	800823a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	4b34      	ldr	r3, [pc, #208]	; (80082e8 <tcp_input+0x4a0>)
 8008218:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800821a:	429a      	cmp	r2, r3
 800821c:	d10d      	bne.n	800823a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b31      	ldr	r3, [pc, #196]	; (80082e8 <tcp_input+0x4a0>)
 8008224:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008226:	429a      	cmp	r2, r3
 8008228:	d107      	bne.n	800823a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800822a:	69f8      	ldr	r0, [r7, #28]
 800822c:	f000 fb56 	bl	80088dc <tcp_timewait_input>
        }
        pbuf_free(p);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7fd ff3f 	bl	80060b4 <pbuf_free>
        return;
 8008236:	e1fd      	b.n	8008634 <tcp_input+0x7ec>
        continue;
 8008238:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1bc      	bne.n	80081c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008246:	2300      	movs	r3, #0
 8008248:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800824a:	4b2f      	ldr	r3, [pc, #188]	; (8008308 <tcp_input+0x4c0>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	e02a      	b.n	80082a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	7a1b      	ldrb	r3, [r3, #8]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00c      	beq.n	8008274 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	7a1a      	ldrb	r2, [r3, #8]
 800825e:	4b22      	ldr	r3, [pc, #136]	; (80082e8 <tcp_input+0x4a0>)
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008266:	3301      	adds	r3, #1
 8008268:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800826a:	429a      	cmp	r2, r3
 800826c:	d002      	beq.n	8008274 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	61bb      	str	r3, [r7, #24]
        continue;
 8008272:	e016      	b.n	80082a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	8ada      	ldrh	r2, [r3, #22]
 8008278:	4b1a      	ldr	r3, [pc, #104]	; (80082e4 <tcp_input+0x49c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	885b      	ldrh	r3, [r3, #2]
 800827e:	b29b      	uxth	r3, r3
 8008280:	429a      	cmp	r2, r3
 8008282:	d10c      	bne.n	800829e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	4b17      	ldr	r3, [pc, #92]	; (80082e8 <tcp_input+0x4a0>)
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	429a      	cmp	r2, r3
 800828e:	d00f      	beq.n	80082b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00d      	beq.n	80082b2 <tcp_input+0x46a>
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d009      	beq.n	80082b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1d1      	bne.n	8008252 <tcp_input+0x40a>
 80082ae:	e000      	b.n	80082b2 <tcp_input+0x46a>
            break;
 80082b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d029      	beq.n	800830c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	68da      	ldr	r2, [r3, #12]
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80082c6:	4b10      	ldr	r3, [pc, #64]	; (8008308 <tcp_input+0x4c0>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80082ce:	4a0e      	ldr	r2, [pc, #56]	; (8008308 <tcp_input+0x4c0>)
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80082d4:	6978      	ldr	r0, [r7, #20]
 80082d6:	f000 fa03 	bl	80086e0 <tcp_listen_input>
      }
      pbuf_free(p);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7fd feea 	bl	80060b4 <pbuf_free>
      return;
 80082e0:	e1a8      	b.n	8008634 <tcp_input+0x7ec>
 80082e2:	bf00      	nop
 80082e4:	20008794 	.word	0x20008794
 80082e8:	200051fc 	.word	0x200051fc
 80082ec:	08011410 	.word	0x08011410
 80082f0:	0801153c 	.word	0x0801153c
 80082f4:	0801145c 	.word	0x0801145c
 80082f8:	20008778 	.word	0x20008778
 80082fc:	08011568 	.word	0x08011568
 8008300:	2000877c 	.word	0x2000877c
 8008304:	08011594 	.word	0x08011594
 8008308:	20008774 	.word	0x20008774
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 8158 	beq.w	80085c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008314:	4b95      	ldr	r3, [pc, #596]	; (800856c <tcp_input+0x724>)
 8008316:	2200      	movs	r2, #0
 8008318:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	891a      	ldrh	r2, [r3, #8]
 800831e:	4b93      	ldr	r3, [pc, #588]	; (800856c <tcp_input+0x724>)
 8008320:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008322:	4a92      	ldr	r2, [pc, #584]	; (800856c <tcp_input+0x724>)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008328:	4b91      	ldr	r3, [pc, #580]	; (8008570 <tcp_input+0x728>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a8f      	ldr	r2, [pc, #572]	; (800856c <tcp_input+0x724>)
 800832e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008330:	4b90      	ldr	r3, [pc, #576]	; (8008574 <tcp_input+0x72c>)
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008336:	4b90      	ldr	r3, [pc, #576]	; (8008578 <tcp_input+0x730>)
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800833c:	4b8f      	ldr	r3, [pc, #572]	; (800857c <tcp_input+0x734>)
 800833e:	2200      	movs	r2, #0
 8008340:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008342:	4b8f      	ldr	r3, [pc, #572]	; (8008580 <tcp_input+0x738>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	f003 0308 	and.w	r3, r3, #8
 800834a:	2b00      	cmp	r3, #0
 800834c:	d006      	beq.n	800835c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	7b5b      	ldrb	r3, [r3, #13]
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008360:	2b00      	cmp	r3, #0
 8008362:	d017      	beq.n	8008394 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008364:	69f8      	ldr	r0, [r7, #28]
 8008366:	f7ff f929 	bl	80075bc <tcp_process_refused_data>
 800836a:	4603      	mov	r3, r0
 800836c:	f113 0f0d 	cmn.w	r3, #13
 8008370:	d007      	beq.n	8008382 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00c      	beq.n	8008394 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800837a:	4b82      	ldr	r3, [pc, #520]	; (8008584 <tcp_input+0x73c>)
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 80e3 	bne.w	8008552 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800838c:	69f8      	ldr	r0, [r7, #28]
 800838e:	f003 f9ad 	bl	800b6ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008392:	e0de      	b.n	8008552 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008394:	4a7c      	ldr	r2, [pc, #496]	; (8008588 <tcp_input+0x740>)
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800839a:	69f8      	ldr	r0, [r7, #28]
 800839c:	f000 fb18 	bl	80089d0 <tcp_process>
 80083a0:	4603      	mov	r3, r0
 80083a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80083a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083a8:	f113 0f0d 	cmn.w	r3, #13
 80083ac:	f000 80d3 	beq.w	8008556 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80083b0:	4b71      	ldr	r3, [pc, #452]	; (8008578 <tcp_input+0x730>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	f003 0308 	and.w	r3, r3, #8
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d015      	beq.n	80083e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d008      	beq.n	80083d8 <tcp_input+0x590>
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	6912      	ldr	r2, [r2, #16]
 80083d0:	f06f 010d 	mvn.w	r1, #13
 80083d4:	4610      	mov	r0, r2
 80083d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80083d8:	69f9      	ldr	r1, [r7, #28]
 80083da:	486c      	ldr	r0, [pc, #432]	; (800858c <tcp_input+0x744>)
 80083dc:	f7ff fbbc 	bl	8007b58 <tcp_pcb_remove>
        tcp_free(pcb);
 80083e0:	69f8      	ldr	r0, [r7, #28]
 80083e2:	f7fe f9a9 	bl	8006738 <tcp_free>
 80083e6:	e0da      	b.n	800859e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80083ec:	4b63      	ldr	r3, [pc, #396]	; (800857c <tcp_input+0x734>)
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01d      	beq.n	8008430 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80083f4:	4b61      	ldr	r3, [pc, #388]	; (800857c <tcp_input+0x734>)
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00a      	beq.n	800841a <tcp_input+0x5d2>
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	6910      	ldr	r0, [r2, #16]
 800840e:	89fa      	ldrh	r2, [r7, #14]
 8008410:	69f9      	ldr	r1, [r7, #28]
 8008412:	4798      	blx	r3
 8008414:	4603      	mov	r3, r0
 8008416:	74fb      	strb	r3, [r7, #19]
 8008418:	e001      	b.n	800841e <tcp_input+0x5d6>
 800841a:	2300      	movs	r3, #0
 800841c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800841e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008422:	f113 0f0d 	cmn.w	r3, #13
 8008426:	f000 8098 	beq.w	800855a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800842a:	4b54      	ldr	r3, [pc, #336]	; (800857c <tcp_input+0x734>)
 800842c:	2200      	movs	r2, #0
 800842e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008430:	69f8      	ldr	r0, [r7, #28]
 8008432:	f000 f915 	bl	8008660 <tcp_input_delayed_close>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	f040 8090 	bne.w	800855e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800843e:	4b4d      	ldr	r3, [pc, #308]	; (8008574 <tcp_input+0x72c>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d041      	beq.n	80084ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800844a:	2b00      	cmp	r3, #0
 800844c:	d006      	beq.n	800845c <tcp_input+0x614>
 800844e:	4b50      	ldr	r3, [pc, #320]	; (8008590 <tcp_input+0x748>)
 8008450:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008454:	494f      	ldr	r1, [pc, #316]	; (8008594 <tcp_input+0x74c>)
 8008456:	4850      	ldr	r0, [pc, #320]	; (8008598 <tcp_input+0x750>)
 8008458:	f006 fdcc 	bl	800eff4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	8b5b      	ldrh	r3, [r3, #26]
 8008460:	f003 0310 	and.w	r3, r3, #16
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008468:	4b42      	ldr	r3, [pc, #264]	; (8008574 <tcp_input+0x72c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f7fd fe21 	bl	80060b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008472:	69f8      	ldr	r0, [r7, #28]
 8008474:	f7fe fc48 	bl	8006d08 <tcp_abort>
            goto aborted;
 8008478:	e091      	b.n	800859e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00c      	beq.n	800849e <tcp_input+0x656>
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	6918      	ldr	r0, [r3, #16]
 800848e:	4b39      	ldr	r3, [pc, #228]	; (8008574 <tcp_input+0x72c>)
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	69f9      	ldr	r1, [r7, #28]
 8008496:	47a0      	blx	r4
 8008498:	4603      	mov	r3, r0
 800849a:	74fb      	strb	r3, [r7, #19]
 800849c:	e008      	b.n	80084b0 <tcp_input+0x668>
 800849e:	4b35      	ldr	r3, [pc, #212]	; (8008574 <tcp_input+0x72c>)
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	2300      	movs	r3, #0
 80084a4:	69f9      	ldr	r1, [r7, #28]
 80084a6:	2000      	movs	r0, #0
 80084a8:	f7ff f95e 	bl	8007768 <tcp_recv_null>
 80084ac:	4603      	mov	r3, r0
 80084ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80084b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084b4:	f113 0f0d 	cmn.w	r3, #13
 80084b8:	d053      	beq.n	8008562 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80084ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80084c2:	4b2c      	ldr	r3, [pc, #176]	; (8008574 <tcp_input+0x72c>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80084ca:	4b2b      	ldr	r3, [pc, #172]	; (8008578 <tcp_input+0x730>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d030      	beq.n	8008538 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d009      	beq.n	80084f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e2:	7b5a      	ldrb	r2, [r3, #13]
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e8:	f042 0220 	orr.w	r2, r2, #32
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	735a      	strb	r2, [r3, #13]
 80084f0:	e022      	b.n	8008538 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80084fa:	d005      	beq.n	8008508 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008500:	3301      	adds	r3, #1
 8008502:	b29a      	uxth	r2, r3
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <tcp_input+0x6e2>
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	6918      	ldr	r0, [r3, #16]
 800851c:	2300      	movs	r3, #0
 800851e:	2200      	movs	r2, #0
 8008520:	69f9      	ldr	r1, [r7, #28]
 8008522:	47a0      	blx	r4
 8008524:	4603      	mov	r3, r0
 8008526:	74fb      	strb	r3, [r7, #19]
 8008528:	e001      	b.n	800852e <tcp_input+0x6e6>
 800852a:	2300      	movs	r3, #0
 800852c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800852e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008532:	f113 0f0d 	cmn.w	r3, #13
 8008536:	d016      	beq.n	8008566 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008538:	4b13      	ldr	r3, [pc, #76]	; (8008588 <tcp_input+0x740>)
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800853e:	69f8      	ldr	r0, [r7, #28]
 8008540:	f000 f88e 	bl	8008660 <tcp_input_delayed_close>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d128      	bne.n	800859c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800854a:	69f8      	ldr	r0, [r7, #28]
 800854c:	f002 fac8 	bl	800aae0 <tcp_output>
 8008550:	e025      	b.n	800859e <tcp_input+0x756>
        goto aborted;
 8008552:	bf00      	nop
 8008554:	e023      	b.n	800859e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008556:	bf00      	nop
 8008558:	e021      	b.n	800859e <tcp_input+0x756>
              goto aborted;
 800855a:	bf00      	nop
 800855c:	e01f      	b.n	800859e <tcp_input+0x756>
          goto aborted;
 800855e:	bf00      	nop
 8008560:	e01d      	b.n	800859e <tcp_input+0x756>
            goto aborted;
 8008562:	bf00      	nop
 8008564:	e01b      	b.n	800859e <tcp_input+0x756>
              goto aborted;
 8008566:	bf00      	nop
 8008568:	e019      	b.n	800859e <tcp_input+0x756>
 800856a:	bf00      	nop
 800856c:	20008784 	.word	0x20008784
 8008570:	20008794 	.word	0x20008794
 8008574:	200087b4 	.word	0x200087b4
 8008578:	200087b1 	.word	0x200087b1
 800857c:	200087ac 	.word	0x200087ac
 8008580:	200087b0 	.word	0x200087b0
 8008584:	200087ae 	.word	0x200087ae
 8008588:	200087b8 	.word	0x200087b8
 800858c:	20008778 	.word	0x20008778
 8008590:	08011410 	.word	0x08011410
 8008594:	080115c4 	.word	0x080115c4
 8008598:	0801145c 	.word	0x0801145c
          goto aborted;
 800859c:	bf00      	nop
    tcp_input_pcb = NULL;
 800859e:	4b27      	ldr	r3, [pc, #156]	; (800863c <tcp_input+0x7f4>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80085a4:	4b26      	ldr	r3, [pc, #152]	; (8008640 <tcp_input+0x7f8>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80085aa:	4b26      	ldr	r3, [pc, #152]	; (8008644 <tcp_input+0x7fc>)
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d03f      	beq.n	8008632 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80085b2:	4b24      	ldr	r3, [pc, #144]	; (8008644 <tcp_input+0x7fc>)
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fd fd7c 	bl	80060b4 <pbuf_free>
      inseg.p = NULL;
 80085bc:	4b21      	ldr	r3, [pc, #132]	; (8008644 <tcp_input+0x7fc>)
 80085be:	2200      	movs	r2, #0
 80085c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80085c2:	e036      	b.n	8008632 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80085c4:	4b20      	ldr	r3, [pc, #128]	; (8008648 <tcp_input+0x800>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	899b      	ldrh	r3, [r3, #12]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fc fa13 	bl	80049f8 <lwip_htons>
 80085d2:	4603      	mov	r3, r0
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d118      	bne.n	8008610 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085de:	4b1b      	ldr	r3, [pc, #108]	; (800864c <tcp_input+0x804>)
 80085e0:	6819      	ldr	r1, [r3, #0]
 80085e2:	4b1b      	ldr	r3, [pc, #108]	; (8008650 <tcp_input+0x808>)
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	4b1a      	ldr	r3, [pc, #104]	; (8008654 <tcp_input+0x80c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085ee:	4b16      	ldr	r3, [pc, #88]	; (8008648 <tcp_input+0x800>)
 80085f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085f2:	885b      	ldrh	r3, [r3, #2]
 80085f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085f6:	4a14      	ldr	r2, [pc, #80]	; (8008648 <tcp_input+0x800>)
 80085f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085fa:	8812      	ldrh	r2, [r2, #0]
 80085fc:	b292      	uxth	r2, r2
 80085fe:	9202      	str	r2, [sp, #8]
 8008600:	9301      	str	r3, [sp, #4]
 8008602:	4b15      	ldr	r3, [pc, #84]	; (8008658 <tcp_input+0x810>)
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	4b15      	ldr	r3, [pc, #84]	; (800865c <tcp_input+0x814>)
 8008608:	4602      	mov	r2, r0
 800860a:	2000      	movs	r0, #0
 800860c:	f003 f81c 	bl	800b648 <tcp_rst>
    pbuf_free(p);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7fd fd4f 	bl	80060b4 <pbuf_free>
  return;
 8008616:	e00c      	b.n	8008632 <tcp_input+0x7ea>
    goto dropped;
 8008618:	bf00      	nop
 800861a:	e006      	b.n	800862a <tcp_input+0x7e2>
    goto dropped;
 800861c:	bf00      	nop
 800861e:	e004      	b.n	800862a <tcp_input+0x7e2>
    goto dropped;
 8008620:	bf00      	nop
 8008622:	e002      	b.n	800862a <tcp_input+0x7e2>
      goto dropped;
 8008624:	bf00      	nop
 8008626:	e000      	b.n	800862a <tcp_input+0x7e2>
      goto dropped;
 8008628:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fd fd42 	bl	80060b4 <pbuf_free>
 8008630:	e000      	b.n	8008634 <tcp_input+0x7ec>
  return;
 8008632:	bf00      	nop
}
 8008634:	3724      	adds	r7, #36	; 0x24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd90      	pop	{r4, r7, pc}
 800863a:	bf00      	nop
 800863c:	200087b8 	.word	0x200087b8
 8008640:	200087b4 	.word	0x200087b4
 8008644:	20008784 	.word	0x20008784
 8008648:	20008794 	.word	0x20008794
 800864c:	200087a8 	.word	0x200087a8
 8008650:	200087ae 	.word	0x200087ae
 8008654:	200087a4 	.word	0x200087a4
 8008658:	2000520c 	.word	0x2000520c
 800865c:	20005210 	.word	0x20005210

08008660 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d106      	bne.n	800867c <tcp_input_delayed_close+0x1c>
 800866e:	4b17      	ldr	r3, [pc, #92]	; (80086cc <tcp_input_delayed_close+0x6c>)
 8008670:	f240 225a 	movw	r2, #602	; 0x25a
 8008674:	4916      	ldr	r1, [pc, #88]	; (80086d0 <tcp_input_delayed_close+0x70>)
 8008676:	4817      	ldr	r0, [pc, #92]	; (80086d4 <tcp_input_delayed_close+0x74>)
 8008678:	f006 fcbc 	bl	800eff4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800867c:	4b16      	ldr	r3, [pc, #88]	; (80086d8 <tcp_input_delayed_close+0x78>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01c      	beq.n	80086c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	8b5b      	ldrh	r3, [r3, #26]
 800868c:	f003 0310 	and.w	r3, r3, #16
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10d      	bne.n	80086b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <tcp_input_delayed_close+0x50>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	6912      	ldr	r2, [r2, #16]
 80086a8:	f06f 010e 	mvn.w	r1, #14
 80086ac:	4610      	mov	r0, r2
 80086ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	480a      	ldr	r0, [pc, #40]	; (80086dc <tcp_input_delayed_close+0x7c>)
 80086b4:	f7ff fa50 	bl	8007b58 <tcp_pcb_remove>
    tcp_free(pcb);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7fe f83d 	bl	8006738 <tcp_free>
    return 1;
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	08011410 	.word	0x08011410
 80086d0:	080115e0 	.word	0x080115e0
 80086d4:	0801145c 	.word	0x0801145c
 80086d8:	200087b1 	.word	0x200087b1
 80086dc:	20008778 	.word	0x20008778

080086e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80086e0:	b590      	push	{r4, r7, lr}
 80086e2:	b08b      	sub	sp, #44	; 0x2c
 80086e4:	af04      	add	r7, sp, #16
 80086e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80086e8:	4b6f      	ldr	r3, [pc, #444]	; (80088a8 <tcp_listen_input+0x1c8>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f040 80d2 	bne.w	800889a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d106      	bne.n	800870a <tcp_listen_input+0x2a>
 80086fc:	4b6b      	ldr	r3, [pc, #428]	; (80088ac <tcp_listen_input+0x1cc>)
 80086fe:	f240 2281 	movw	r2, #641	; 0x281
 8008702:	496b      	ldr	r1, [pc, #428]	; (80088b0 <tcp_listen_input+0x1d0>)
 8008704:	486b      	ldr	r0, [pc, #428]	; (80088b4 <tcp_listen_input+0x1d4>)
 8008706:	f006 fc75 	bl	800eff4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800870a:	4b67      	ldr	r3, [pc, #412]	; (80088a8 <tcp_listen_input+0x1c8>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	f003 0310 	and.w	r3, r3, #16
 8008712:	2b00      	cmp	r3, #0
 8008714:	d019      	beq.n	800874a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008716:	4b68      	ldr	r3, [pc, #416]	; (80088b8 <tcp_listen_input+0x1d8>)
 8008718:	6819      	ldr	r1, [r3, #0]
 800871a:	4b68      	ldr	r3, [pc, #416]	; (80088bc <tcp_listen_input+0x1dc>)
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	4b67      	ldr	r3, [pc, #412]	; (80088c0 <tcp_listen_input+0x1e0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008726:	4b67      	ldr	r3, [pc, #412]	; (80088c4 <tcp_listen_input+0x1e4>)
 8008728:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800872a:	885b      	ldrh	r3, [r3, #2]
 800872c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800872e:	4a65      	ldr	r2, [pc, #404]	; (80088c4 <tcp_listen_input+0x1e4>)
 8008730:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008732:	8812      	ldrh	r2, [r2, #0]
 8008734:	b292      	uxth	r2, r2
 8008736:	9202      	str	r2, [sp, #8]
 8008738:	9301      	str	r3, [sp, #4]
 800873a:	4b63      	ldr	r3, [pc, #396]	; (80088c8 <tcp_listen_input+0x1e8>)
 800873c:	9300      	str	r3, [sp, #0]
 800873e:	4b63      	ldr	r3, [pc, #396]	; (80088cc <tcp_listen_input+0x1ec>)
 8008740:	4602      	mov	r2, r0
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f002 ff80 	bl	800b648 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008748:	e0a9      	b.n	800889e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800874a:	4b57      	ldr	r3, [pc, #348]	; (80088a8 <tcp_listen_input+0x1c8>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	f000 80a3 	beq.w	800889e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	7d5b      	ldrb	r3, [r3, #21]
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff f927 	bl	80079b0 <tcp_alloc>
 8008762:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d111      	bne.n	800878e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <tcp_listen_input+0xa8>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6910      	ldr	r0, [r2, #16]
 800877a:	f04f 32ff 	mov.w	r2, #4294967295
 800877e:	2100      	movs	r1, #0
 8008780:	4798      	blx	r3
 8008782:	4603      	mov	r3, r0
 8008784:	73bb      	strb	r3, [r7, #14]
      return;
 8008786:	e08b      	b.n	80088a0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008788:	23f0      	movs	r3, #240	; 0xf0
 800878a:	73bb      	strb	r3, [r7, #14]
      return;
 800878c:	e088      	b.n	80088a0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800878e:	4b50      	ldr	r3, [pc, #320]	; (80088d0 <tcp_listen_input+0x1f0>)
 8008790:	695a      	ldr	r2, [r3, #20]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008796:	4b4e      	ldr	r3, [pc, #312]	; (80088d0 <tcp_listen_input+0x1f0>)
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	8ada      	ldrh	r2, [r3, #22]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80087a6:	4b47      	ldr	r3, [pc, #284]	; (80088c4 <tcp_listen_input+0x1e4>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	2203      	movs	r2, #3
 80087b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80087b8:	4b41      	ldr	r3, [pc, #260]	; (80088c0 <tcp_listen_input+0x1e0>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	1c5a      	adds	r2, r3, #1
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	f7ff fa58 	bl	8007c80 <tcp_next_iss>
 80087d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80087ea:	4b35      	ldr	r3, [pc, #212]	; (80088c0 <tcp_listen_input+0x1e0>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	1e5a      	subs	r2, r3, #1
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691a      	ldr	r2, [r3, #16]
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	7a5b      	ldrb	r3, [r3, #9]
 8008806:	f003 030c 	and.w	r3, r3, #12
 800880a:	b2da      	uxtb	r2, r3
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7a1a      	ldrb	r2, [r3, #8]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008818:	4b2e      	ldr	r3, [pc, #184]	; (80088d4 <tcp_listen_input+0x1f4>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	60da      	str	r2, [r3, #12]
 8008820:	4a2c      	ldr	r2, [pc, #176]	; (80088d4 <tcp_listen_input+0x1f4>)
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	f003 f8d1 	bl	800b9cc <tcp_timer_needed>
 800882a:	4b2b      	ldr	r3, [pc, #172]	; (80088d8 <tcp_listen_input+0x1f8>)
 800882c:	2201      	movs	r2, #1
 800882e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008830:	6978      	ldr	r0, [r7, #20]
 8008832:	f001 fd8f 	bl	800a354 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008836:	4b23      	ldr	r3, [pc, #140]	; (80088c4 <tcp_listen_input+0x1e4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	89db      	ldrh	r3, [r3, #14]
 800883c:	b29a      	uxth	r2, r3
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3304      	adds	r3, #4
 8008858:	4618      	mov	r0, r3
 800885a:	f005 f84f 	bl	800d8fc <ip4_route>
 800885e:	4601      	mov	r1, r0
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	3304      	adds	r3, #4
 8008864:	461a      	mov	r2, r3
 8008866:	4620      	mov	r0, r4
 8008868:	f7ff fa30 	bl	8007ccc <tcp_eff_send_mss_netif>
 800886c:	4603      	mov	r3, r0
 800886e:	461a      	mov	r2, r3
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008874:	2112      	movs	r1, #18
 8008876:	6978      	ldr	r0, [r7, #20]
 8008878:	f002 f844 	bl	800a904 <tcp_enqueue_flags>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008888:	2100      	movs	r1, #0
 800888a:	6978      	ldr	r0, [r7, #20]
 800888c:	f7fe f97e 	bl	8006b8c <tcp_abandon>
      return;
 8008890:	e006      	b.n	80088a0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008892:	6978      	ldr	r0, [r7, #20]
 8008894:	f002 f924 	bl	800aae0 <tcp_output>
  return;
 8008898:	e001      	b.n	800889e <tcp_listen_input+0x1be>
    return;
 800889a:	bf00      	nop
 800889c:	e000      	b.n	80088a0 <tcp_listen_input+0x1c0>
  return;
 800889e:	bf00      	nop
}
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd90      	pop	{r4, r7, pc}
 80088a6:	bf00      	nop
 80088a8:	200087b0 	.word	0x200087b0
 80088ac:	08011410 	.word	0x08011410
 80088b0:	08011608 	.word	0x08011608
 80088b4:	0801145c 	.word	0x0801145c
 80088b8:	200087a8 	.word	0x200087a8
 80088bc:	200087ae 	.word	0x200087ae
 80088c0:	200087a4 	.word	0x200087a4
 80088c4:	20008794 	.word	0x20008794
 80088c8:	2000520c 	.word	0x2000520c
 80088cc:	20005210 	.word	0x20005210
 80088d0:	200051fc 	.word	0x200051fc
 80088d4:	20008778 	.word	0x20008778
 80088d8:	20008780 	.word	0x20008780

080088dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af04      	add	r7, sp, #16
 80088e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80088e4:	4b2f      	ldr	r3, [pc, #188]	; (80089a4 <tcp_timewait_input+0xc8>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d153      	bne.n	8008998 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d106      	bne.n	8008904 <tcp_timewait_input+0x28>
 80088f6:	4b2c      	ldr	r3, [pc, #176]	; (80089a8 <tcp_timewait_input+0xcc>)
 80088f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80088fc:	492b      	ldr	r1, [pc, #172]	; (80089ac <tcp_timewait_input+0xd0>)
 80088fe:	482c      	ldr	r0, [pc, #176]	; (80089b0 <tcp_timewait_input+0xd4>)
 8008900:	f006 fb78 	bl	800eff4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008904:	4b27      	ldr	r3, [pc, #156]	; (80089a4 <tcp_timewait_input+0xc8>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d02a      	beq.n	8008966 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008910:	4b28      	ldr	r3, [pc, #160]	; (80089b4 <tcp_timewait_input+0xd8>)
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	db2d      	blt.n	800897a <tcp_timewait_input+0x9e>
 800891e:	4b25      	ldr	r3, [pc, #148]	; (80089b4 <tcp_timewait_input+0xd8>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800892a:	440b      	add	r3, r1
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	dc23      	bgt.n	800897a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008932:	4b21      	ldr	r3, [pc, #132]	; (80089b8 <tcp_timewait_input+0xdc>)
 8008934:	6819      	ldr	r1, [r3, #0]
 8008936:	4b21      	ldr	r3, [pc, #132]	; (80089bc <tcp_timewait_input+0xe0>)
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	4b1d      	ldr	r3, [pc, #116]	; (80089b4 <tcp_timewait_input+0xd8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008942:	4b1f      	ldr	r3, [pc, #124]	; (80089c0 <tcp_timewait_input+0xe4>)
 8008944:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008946:	885b      	ldrh	r3, [r3, #2]
 8008948:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800894a:	4a1d      	ldr	r2, [pc, #116]	; (80089c0 <tcp_timewait_input+0xe4>)
 800894c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800894e:	8812      	ldrh	r2, [r2, #0]
 8008950:	b292      	uxth	r2, r2
 8008952:	9202      	str	r2, [sp, #8]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	4b1b      	ldr	r3, [pc, #108]	; (80089c4 <tcp_timewait_input+0xe8>)
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	4b1b      	ldr	r3, [pc, #108]	; (80089c8 <tcp_timewait_input+0xec>)
 800895c:	4602      	mov	r2, r0
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f002 fe72 	bl	800b648 <tcp_rst>
      return;
 8008964:	e01b      	b.n	800899e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008966:	4b0f      	ldr	r3, [pc, #60]	; (80089a4 <tcp_timewait_input+0xc8>)
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008972:	4b16      	ldr	r3, [pc, #88]	; (80089cc <tcp_timewait_input+0xf0>)
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800897a:	4b10      	ldr	r3, [pc, #64]	; (80089bc <tcp_timewait_input+0xe0>)
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00c      	beq.n	800899c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	8b5b      	ldrh	r3, [r3, #26]
 8008986:	f043 0302 	orr.w	r3, r3, #2
 800898a:	b29a      	uxth	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f002 f8a5 	bl	800aae0 <tcp_output>
  }
  return;
 8008996:	e001      	b.n	800899c <tcp_timewait_input+0xc0>
    return;
 8008998:	bf00      	nop
 800899a:	e000      	b.n	800899e <tcp_timewait_input+0xc2>
  return;
 800899c:	bf00      	nop
}
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	200087b0 	.word	0x200087b0
 80089a8:	08011410 	.word	0x08011410
 80089ac:	08011628 	.word	0x08011628
 80089b0:	0801145c 	.word	0x0801145c
 80089b4:	200087a4 	.word	0x200087a4
 80089b8:	200087a8 	.word	0x200087a8
 80089bc:	200087ae 	.word	0x200087ae
 80089c0:	20008794 	.word	0x20008794
 80089c4:	2000520c 	.word	0x2000520c
 80089c8:	20005210 	.word	0x20005210
 80089cc:	2000876c 	.word	0x2000876c

080089d0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80089d0:	b590      	push	{r4, r7, lr}
 80089d2:	b08d      	sub	sp, #52	; 0x34
 80089d4:	af04      	add	r7, sp, #16
 80089d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d106      	bne.n	80089f4 <tcp_process+0x24>
 80089e6:	4b9d      	ldr	r3, [pc, #628]	; (8008c5c <tcp_process+0x28c>)
 80089e8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80089ec:	499c      	ldr	r1, [pc, #624]	; (8008c60 <tcp_process+0x290>)
 80089ee:	489d      	ldr	r0, [pc, #628]	; (8008c64 <tcp_process+0x294>)
 80089f0:	f006 fb00 	bl	800eff4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80089f4:	4b9c      	ldr	r3, [pc, #624]	; (8008c68 <tcp_process+0x298>)
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d04e      	beq.n	8008a9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	7d1b      	ldrb	r3, [r3, #20]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d108      	bne.n	8008a1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a0c:	4b97      	ldr	r3, [pc, #604]	; (8008c6c <tcp_process+0x29c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d123      	bne.n	8008a5c <tcp_process+0x8c>
        acceptable = 1;
 8008a14:	2301      	movs	r3, #1
 8008a16:	76fb      	strb	r3, [r7, #27]
 8008a18:	e020      	b.n	8008a5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a1e:	4b94      	ldr	r3, [pc, #592]	; (8008c70 <tcp_process+0x2a0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d102      	bne.n	8008a2c <tcp_process+0x5c>
        acceptable = 1;
 8008a26:	2301      	movs	r3, #1
 8008a28:	76fb      	strb	r3, [r7, #27]
 8008a2a:	e017      	b.n	8008a5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008a2c:	4b90      	ldr	r3, [pc, #576]	; (8008c70 <tcp_process+0x2a0>)
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	db10      	blt.n	8008a5c <tcp_process+0x8c>
 8008a3a:	4b8d      	ldr	r3, [pc, #564]	; (8008c70 <tcp_process+0x2a0>)
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008a46:	440b      	add	r3, r1
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	dc06      	bgt.n	8008a5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	8b5b      	ldrh	r3, [r3, #26]
 8008a52:	f043 0302 	orr.w	r3, r3, #2
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008a5c:	7efb      	ldrb	r3, [r7, #27]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d01b      	beq.n	8008a9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	7d1b      	ldrb	r3, [r3, #20]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d106      	bne.n	8008a78 <tcp_process+0xa8>
 8008a6a:	4b7c      	ldr	r3, [pc, #496]	; (8008c5c <tcp_process+0x28c>)
 8008a6c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008a70:	4980      	ldr	r1, [pc, #512]	; (8008c74 <tcp_process+0x2a4>)
 8008a72:	487c      	ldr	r0, [pc, #496]	; (8008c64 <tcp_process+0x294>)
 8008a74:	f006 fabe 	bl	800eff4 <iprintf>
      recv_flags |= TF_RESET;
 8008a78:	4b7f      	ldr	r3, [pc, #508]	; (8008c78 <tcp_process+0x2a8>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f043 0308 	orr.w	r3, r3, #8
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	4b7d      	ldr	r3, [pc, #500]	; (8008c78 <tcp_process+0x2a8>)
 8008a84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	8b5b      	ldrh	r3, [r3, #26]
 8008a8a:	f023 0301 	bic.w	r3, r3, #1
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008a94:	f06f 030d 	mvn.w	r3, #13
 8008a98:	e37a      	b.n	8009190 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e378      	b.n	8009190 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008a9e:	4b72      	ldr	r3, [pc, #456]	; (8008c68 <tcp_process+0x298>)
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	f003 0302 	and.w	r3, r3, #2
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d010      	beq.n	8008acc <tcp_process+0xfc>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7d1b      	ldrb	r3, [r3, #20]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d00c      	beq.n	8008acc <tcp_process+0xfc>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7d1b      	ldrb	r3, [r3, #20]
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d008      	beq.n	8008acc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	8b5b      	ldrh	r3, [r3, #26]
 8008abe:	f043 0302 	orr.w	r3, r3, #2
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	e361      	b.n	8009190 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	8b5b      	ldrh	r3, [r3, #26]
 8008ad0:	f003 0310 	and.w	r3, r3, #16
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d103      	bne.n	8008ae0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008ad8:	4b68      	ldr	r3, [pc, #416]	; (8008c7c <tcp_process+0x2ac>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f001 fc2f 	bl	800a354 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7d1b      	ldrb	r3, [r3, #20]
 8008afa:	3b02      	subs	r3, #2
 8008afc:	2b07      	cmp	r3, #7
 8008afe:	f200 8337 	bhi.w	8009170 <tcp_process+0x7a0>
 8008b02:	a201      	add	r2, pc, #4	; (adr r2, 8008b08 <tcp_process+0x138>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008b29 	.word	0x08008b29
 8008b0c:	08008d59 	.word	0x08008d59
 8008b10:	08008ed1 	.word	0x08008ed1
 8008b14:	08008efb 	.word	0x08008efb
 8008b18:	0800901f 	.word	0x0800901f
 8008b1c:	08008ed1 	.word	0x08008ed1
 8008b20:	080090ab 	.word	0x080090ab
 8008b24:	0800913b 	.word	0x0800913b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008b28:	4b4f      	ldr	r3, [pc, #316]	; (8008c68 <tcp_process+0x298>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 80e4 	beq.w	8008cfe <tcp_process+0x32e>
 8008b36:	4b4c      	ldr	r3, [pc, #304]	; (8008c68 <tcp_process+0x298>)
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 80dd 	beq.w	8008cfe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b48:	1c5a      	adds	r2, r3, #1
 8008b4a:	4b48      	ldr	r3, [pc, #288]	; (8008c6c <tcp_process+0x29c>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	f040 80d5 	bne.w	8008cfe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008b54:	4b46      	ldr	r3, [pc, #280]	; (8008c70 <tcp_process+0x2a0>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	1c5a      	adds	r2, r3, #1
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008b66:	4b41      	ldr	r3, [pc, #260]	; (8008c6c <tcp_process+0x29c>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008b6e:	4b44      	ldr	r3, [pc, #272]	; (8008c80 <tcp_process+0x2b0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	89db      	ldrh	r3, [r3, #14]
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008b88:	4b39      	ldr	r3, [pc, #228]	; (8008c70 <tcp_process+0x2a0>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	1e5a      	subs	r2, r3, #1
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2204      	movs	r2, #4
 8008b96:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f004 feab 	bl	800d8fc <ip4_route>
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3304      	adds	r3, #4
 8008bac:	461a      	mov	r2, r3
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f7ff f88c 	bl	8007ccc <tcp_eff_send_mss_netif>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bc0:	009a      	lsls	r2, r3, #2
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	f241 111c 	movw	r1, #4380	; 0x111c
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf38      	it	cc
 8008bd0:	460b      	movcc	r3, r1
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d204      	bcs.n	8008be0 <tcp_process+0x210>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	e00d      	b.n	8008bfc <tcp_process+0x22c>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	f241 121c 	movw	r2, #4380	; 0x111c
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d904      	bls.n	8008bf8 <tcp_process+0x228>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	e001      	b.n	8008bfc <tcp_process+0x22c>
 8008bf8:	f241 131c 	movw	r3, #4380	; 0x111c
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <tcp_process+0x24a>
 8008c0c:	4b13      	ldr	r3, [pc, #76]	; (8008c5c <tcp_process+0x28c>)
 8008c0e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008c12:	491c      	ldr	r1, [pc, #112]	; (8008c84 <tcp_process+0x2b4>)
 8008c14:	4813      	ldr	r0, [pc, #76]	; (8008c64 <tcp_process+0x294>)
 8008c16:	f006 f9ed 	bl	800eff4 <iprintf>
        --pcb->snd_queuelen;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c20:	3b01      	subs	r3, #1
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c2e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d12a      	bne.n	8008c8c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <tcp_process+0x280>
 8008c42:	4b06      	ldr	r3, [pc, #24]	; (8008c5c <tcp_process+0x28c>)
 8008c44:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008c48:	490f      	ldr	r1, [pc, #60]	; (8008c88 <tcp_process+0x2b8>)
 8008c4a:	4806      	ldr	r0, [pc, #24]	; (8008c64 <tcp_process+0x294>)
 8008c4c:	f006 f9d2 	bl	800eff4 <iprintf>
          pcb->unsent = rseg->next;
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c58:	e01c      	b.n	8008c94 <tcp_process+0x2c4>
 8008c5a:	bf00      	nop
 8008c5c:	08011410 	.word	0x08011410
 8008c60:	08011648 	.word	0x08011648
 8008c64:	0801145c 	.word	0x0801145c
 8008c68:	200087b0 	.word	0x200087b0
 8008c6c:	200087a8 	.word	0x200087a8
 8008c70:	200087a4 	.word	0x200087a4
 8008c74:	08011664 	.word	0x08011664
 8008c78:	200087b1 	.word	0x200087b1
 8008c7c:	2000876c 	.word	0x2000876c
 8008c80:	20008794 	.word	0x20008794
 8008c84:	08011684 	.word	0x08011684
 8008c88:	0801169c 	.word	0x0801169c
        } else {
          pcb->unacked = rseg->next;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008c94:	69f8      	ldr	r0, [r7, #28]
 8008c96:	f7fe fd22 	bl	80076de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d104      	bne.n	8008cac <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ca8:	861a      	strh	r2, [r3, #48]	; 0x30
 8008caa:	e006      	b.n	8008cba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00a      	beq.n	8008cda <tcp_process+0x30a>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	6910      	ldr	r0, [r2, #16]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	4798      	blx	r3
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	76bb      	strb	r3, [r7, #26]
 8008cd8:	e001      	b.n	8008cde <tcp_process+0x30e>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008cde:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008ce2:	f113 0f0d 	cmn.w	r3, #13
 8008ce6:	d102      	bne.n	8008cee <tcp_process+0x31e>
          return ERR_ABRT;
 8008ce8:	f06f 030c 	mvn.w	r3, #12
 8008cec:	e250      	b.n	8009190 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	8b5b      	ldrh	r3, [r3, #26]
 8008cf2:	f043 0302 	orr.w	r3, r3, #2
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008cfc:	e23a      	b.n	8009174 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008cfe:	4b98      	ldr	r3, [pc, #608]	; (8008f60 <tcp_process+0x590>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f003 0310 	and.w	r3, r3, #16
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 8234 	beq.w	8009174 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d0c:	4b95      	ldr	r3, [pc, #596]	; (8008f64 <tcp_process+0x594>)
 8008d0e:	6819      	ldr	r1, [r3, #0]
 8008d10:	4b95      	ldr	r3, [pc, #596]	; (8008f68 <tcp_process+0x598>)
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	461a      	mov	r2, r3
 8008d16:	4b95      	ldr	r3, [pc, #596]	; (8008f6c <tcp_process+0x59c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d1c:	4b94      	ldr	r3, [pc, #592]	; (8008f70 <tcp_process+0x5a0>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d20:	885b      	ldrh	r3, [r3, #2]
 8008d22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d24:	4a92      	ldr	r2, [pc, #584]	; (8008f70 <tcp_process+0x5a0>)
 8008d26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d28:	8812      	ldrh	r2, [r2, #0]
 8008d2a:	b292      	uxth	r2, r2
 8008d2c:	9202      	str	r2, [sp, #8]
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	4b90      	ldr	r3, [pc, #576]	; (8008f74 <tcp_process+0x5a4>)
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4b90      	ldr	r3, [pc, #576]	; (8008f78 <tcp_process+0x5a8>)
 8008d36:	4602      	mov	r2, r0
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f002 fc85 	bl	800b648 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d44:	2b05      	cmp	r3, #5
 8008d46:	f200 8215 	bhi.w	8009174 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f002 fa51 	bl	800b1f8 <tcp_rexmit_rto>
      break;
 8008d56:	e20d      	b.n	8009174 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008d58:	4b81      	ldr	r3, [pc, #516]	; (8008f60 <tcp_process+0x590>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	f003 0310 	and.w	r3, r3, #16
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 80a1 	beq.w	8008ea8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008d66:	4b7f      	ldr	r3, [pc, #508]	; (8008f64 <tcp_process+0x594>)
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	3b01      	subs	r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	db7e      	blt.n	8008e74 <tcp_process+0x4a4>
 8008d76:	4b7b      	ldr	r3, [pc, #492]	; (8008f64 <tcp_process+0x594>)
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	dc77      	bgt.n	8008e74 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2204      	movs	r2, #4
 8008d88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d102      	bne.n	8008d98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008d92:	23fa      	movs	r3, #250	; 0xfa
 8008d94:	76bb      	strb	r3, [r7, #26]
 8008d96:	e01d      	b.n	8008dd4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <tcp_process+0x3e0>
 8008da2:	4b76      	ldr	r3, [pc, #472]	; (8008f7c <tcp_process+0x5ac>)
 8008da4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008da8:	4975      	ldr	r1, [pc, #468]	; (8008f80 <tcp_process+0x5b0>)
 8008daa:	4876      	ldr	r0, [pc, #472]	; (8008f84 <tcp_process+0x5b4>)
 8008dac:	f006 f922 	bl	800eff4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <tcp_process+0x400>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	6910      	ldr	r0, [r2, #16]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	4798      	blx	r3
 8008dca:	4603      	mov	r3, r0
 8008dcc:	76bb      	strb	r3, [r7, #26]
 8008dce:	e001      	b.n	8008dd4 <tcp_process+0x404>
 8008dd0:	23f0      	movs	r3, #240	; 0xf0
 8008dd2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008dd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008ddc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008de0:	f113 0f0d 	cmn.w	r3, #13
 8008de4:	d002      	beq.n	8008dec <tcp_process+0x41c>
              tcp_abort(pcb);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7fd ff8e 	bl	8006d08 <tcp_abort>
            }
            return ERR_ABRT;
 8008dec:	f06f 030c 	mvn.w	r3, #12
 8008df0:	e1ce      	b.n	8009190 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fae0 	bl	80093b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008df8:	4b63      	ldr	r3, [pc, #396]	; (8008f88 <tcp_process+0x5b8>)
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d005      	beq.n	8008e0c <tcp_process+0x43c>
            recv_acked--;
 8008e00:	4b61      	ldr	r3, [pc, #388]	; (8008f88 <tcp_process+0x5b8>)
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	4b5f      	ldr	r3, [pc, #380]	; (8008f88 <tcp_process+0x5b8>)
 8008e0a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e10:	009a      	lsls	r2, r3, #2
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e16:	005b      	lsls	r3, r3, #1
 8008e18:	f241 111c 	movw	r1, #4380	; 0x111c
 8008e1c:	428b      	cmp	r3, r1
 8008e1e:	bf38      	it	cc
 8008e20:	460b      	movcc	r3, r1
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d204      	bcs.n	8008e30 <tcp_process+0x460>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	e00d      	b.n	8008e4c <tcp_process+0x47c>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e34:	005b      	lsls	r3, r3, #1
 8008e36:	f241 121c 	movw	r2, #4380	; 0x111c
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d904      	bls.n	8008e48 <tcp_process+0x478>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e42:	005b      	lsls	r3, r3, #1
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	e001      	b.n	8008e4c <tcp_process+0x47c>
 8008e48:	f241 131c 	movw	r3, #4380	; 0x111c
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008e52:	4b4e      	ldr	r3, [pc, #312]	; (8008f8c <tcp_process+0x5bc>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	f003 0320 	and.w	r3, r3, #32
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d037      	beq.n	8008ece <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	8b5b      	ldrh	r3, [r3, #26]
 8008e62:	f043 0302 	orr.w	r3, r3, #2
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2207      	movs	r2, #7
 8008e70:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008e72:	e02c      	b.n	8008ece <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e74:	4b3b      	ldr	r3, [pc, #236]	; (8008f64 <tcp_process+0x594>)
 8008e76:	6819      	ldr	r1, [r3, #0]
 8008e78:	4b3b      	ldr	r3, [pc, #236]	; (8008f68 <tcp_process+0x598>)
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4b3b      	ldr	r3, [pc, #236]	; (8008f6c <tcp_process+0x59c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e84:	4b3a      	ldr	r3, [pc, #232]	; (8008f70 <tcp_process+0x5a0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e88:	885b      	ldrh	r3, [r3, #2]
 8008e8a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e8c:	4a38      	ldr	r2, [pc, #224]	; (8008f70 <tcp_process+0x5a0>)
 8008e8e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e90:	8812      	ldrh	r2, [r2, #0]
 8008e92:	b292      	uxth	r2, r2
 8008e94:	9202      	str	r2, [sp, #8]
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	4b36      	ldr	r3, [pc, #216]	; (8008f74 <tcp_process+0x5a4>)
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	4b36      	ldr	r3, [pc, #216]	; (8008f78 <tcp_process+0x5a8>)
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f002 fbd1 	bl	800b648 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008ea6:	e167      	b.n	8009178 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008ea8:	4b2d      	ldr	r3, [pc, #180]	; (8008f60 <tcp_process+0x590>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 8161 	beq.w	8009178 <tcp_process+0x7a8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eba:	1e5a      	subs	r2, r3, #1
 8008ebc:	4b2b      	ldr	r3, [pc, #172]	; (8008f6c <tcp_process+0x59c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	f040 8159 	bne.w	8009178 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f002 f9b8 	bl	800b23c <tcp_rexmit>
      break;
 8008ecc:	e154      	b.n	8009178 <tcp_process+0x7a8>
 8008ece:	e153      	b.n	8009178 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fa71 	bl	80093b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008ed6:	4b2d      	ldr	r3, [pc, #180]	; (8008f8c <tcp_process+0x5bc>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	f003 0320 	and.w	r3, r3, #32
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	f000 814c 	beq.w	800917c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	8b5b      	ldrh	r3, [r3, #26]
 8008ee8:	f043 0302 	orr.w	r3, r3, #2
 8008eec:	b29a      	uxth	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2207      	movs	r2, #7
 8008ef6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ef8:	e140      	b.n	800917c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fa5c 	bl	80093b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008f00:	4b22      	ldr	r3, [pc, #136]	; (8008f8c <tcp_process+0x5bc>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d071      	beq.n	8008ff0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f0c:	4b14      	ldr	r3, [pc, #80]	; (8008f60 <tcp_process+0x590>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d060      	beq.n	8008fda <tcp_process+0x60a>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f1c:	4b11      	ldr	r3, [pc, #68]	; (8008f64 <tcp_process+0x594>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d15a      	bne.n	8008fda <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d156      	bne.n	8008fda <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	8b5b      	ldrh	r3, [r3, #26]
 8008f30:	f043 0302 	orr.w	r3, r3, #2
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7fe fdbc 	bl	8007ab8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008f40:	4b13      	ldr	r3, [pc, #76]	; (8008f90 <tcp_process+0x5c0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d105      	bne.n	8008f56 <tcp_process+0x586>
 8008f4a:	4b11      	ldr	r3, [pc, #68]	; (8008f90 <tcp_process+0x5c0>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	4a0f      	ldr	r2, [pc, #60]	; (8008f90 <tcp_process+0x5c0>)
 8008f52:	6013      	str	r3, [r2, #0]
 8008f54:	e02e      	b.n	8008fb4 <tcp_process+0x5e4>
 8008f56:	4b0e      	ldr	r3, [pc, #56]	; (8008f90 <tcp_process+0x5c0>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e027      	b.n	8008fae <tcp_process+0x5de>
 8008f5e:	bf00      	nop
 8008f60:	200087b0 	.word	0x200087b0
 8008f64:	200087a8 	.word	0x200087a8
 8008f68:	200087ae 	.word	0x200087ae
 8008f6c:	200087a4 	.word	0x200087a4
 8008f70:	20008794 	.word	0x20008794
 8008f74:	2000520c 	.word	0x2000520c
 8008f78:	20005210 	.word	0x20005210
 8008f7c:	08011410 	.word	0x08011410
 8008f80:	080116b0 	.word	0x080116b0
 8008f84:	0801145c 	.word	0x0801145c
 8008f88:	200087ac 	.word	0x200087ac
 8008f8c:	200087b1 	.word	0x200087b1
 8008f90:	20008778 	.word	0x20008778
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d104      	bne.n	8008fa8 <tcp_process+0x5d8>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	60da      	str	r2, [r3, #12]
 8008fa6:	e005      	b.n	8008fb4 <tcp_process+0x5e4>
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	617b      	str	r3, [r7, #20]
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1ef      	bne.n	8008f94 <tcp_process+0x5c4>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	60da      	str	r2, [r3, #12]
 8008fba:	4b77      	ldr	r3, [pc, #476]	; (8009198 <tcp_process+0x7c8>)
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	220a      	movs	r2, #10
 8008fc4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008fc6:	4b75      	ldr	r3, [pc, #468]	; (800919c <tcp_process+0x7cc>)
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60da      	str	r2, [r3, #12]
 8008fce:	4a73      	ldr	r2, [pc, #460]	; (800919c <tcp_process+0x7cc>)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	f002 fcfa 	bl	800b9cc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008fd8:	e0d2      	b.n	8009180 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	8b5b      	ldrh	r3, [r3, #26]
 8008fde:	f043 0302 	orr.w	r3, r3, #2
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2208      	movs	r2, #8
 8008fec:	751a      	strb	r2, [r3, #20]
      break;
 8008fee:	e0c7      	b.n	8009180 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ff0:	4b6b      	ldr	r3, [pc, #428]	; (80091a0 <tcp_process+0x7d0>)
 8008ff2:	781b      	ldrb	r3, [r3, #0]
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f000 80c1 	beq.w	8009180 <tcp_process+0x7b0>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009002:	4b68      	ldr	r3, [pc, #416]	; (80091a4 <tcp_process+0x7d4>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	429a      	cmp	r2, r3
 8009008:	f040 80ba 	bne.w	8009180 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009010:	2b00      	cmp	r3, #0
 8009012:	f040 80b5 	bne.w	8009180 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2206      	movs	r2, #6
 800901a:	751a      	strb	r2, [r3, #20]
      break;
 800901c:	e0b0      	b.n	8009180 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f9ca 	bl	80093b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009024:	4b60      	ldr	r3, [pc, #384]	; (80091a8 <tcp_process+0x7d8>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 80a9 	beq.w	8009184 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8b5b      	ldrh	r3, [r3, #26]
 8009036:	f043 0302 	orr.w	r3, r3, #2
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7fe fd39 	bl	8007ab8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009046:	4b59      	ldr	r3, [pc, #356]	; (80091ac <tcp_process+0x7dc>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	429a      	cmp	r2, r3
 800904e:	d105      	bne.n	800905c <tcp_process+0x68c>
 8009050:	4b56      	ldr	r3, [pc, #344]	; (80091ac <tcp_process+0x7dc>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	4a55      	ldr	r2, [pc, #340]	; (80091ac <tcp_process+0x7dc>)
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	e013      	b.n	8009084 <tcp_process+0x6b4>
 800905c:	4b53      	ldr	r3, [pc, #332]	; (80091ac <tcp_process+0x7dc>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	613b      	str	r3, [r7, #16]
 8009062:	e00c      	b.n	800907e <tcp_process+0x6ae>
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	429a      	cmp	r2, r3
 800906c:	d104      	bne.n	8009078 <tcp_process+0x6a8>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	60da      	str	r2, [r3, #12]
 8009076:	e005      	b.n	8009084 <tcp_process+0x6b4>
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	613b      	str	r3, [r7, #16]
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1ef      	bne.n	8009064 <tcp_process+0x694>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	60da      	str	r2, [r3, #12]
 800908a:	4b43      	ldr	r3, [pc, #268]	; (8009198 <tcp_process+0x7c8>)
 800908c:	2201      	movs	r2, #1
 800908e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	220a      	movs	r2, #10
 8009094:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009096:	4b41      	ldr	r3, [pc, #260]	; (800919c <tcp_process+0x7cc>)
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60da      	str	r2, [r3, #12]
 800909e:	4a3f      	ldr	r2, [pc, #252]	; (800919c <tcp_process+0x7cc>)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	f002 fc92 	bl	800b9cc <tcp_timer_needed>
      }
      break;
 80090a8:	e06c      	b.n	8009184 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f984 	bl	80093b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80090b0:	4b3b      	ldr	r3, [pc, #236]	; (80091a0 <tcp_process+0x7d0>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	f003 0310 	and.w	r3, r3, #16
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d065      	beq.n	8009188 <tcp_process+0x7b8>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c0:	4b38      	ldr	r3, [pc, #224]	; (80091a4 <tcp_process+0x7d4>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d15f      	bne.n	8009188 <tcp_process+0x7b8>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d15b      	bne.n	8009188 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7fe fcf1 	bl	8007ab8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80090d6:	4b35      	ldr	r3, [pc, #212]	; (80091ac <tcp_process+0x7dc>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d105      	bne.n	80090ec <tcp_process+0x71c>
 80090e0:	4b32      	ldr	r3, [pc, #200]	; (80091ac <tcp_process+0x7dc>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	4a31      	ldr	r2, [pc, #196]	; (80091ac <tcp_process+0x7dc>)
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	e013      	b.n	8009114 <tcp_process+0x744>
 80090ec:	4b2f      	ldr	r3, [pc, #188]	; (80091ac <tcp_process+0x7dc>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	60fb      	str	r3, [r7, #12]
 80090f2:	e00c      	b.n	800910e <tcp_process+0x73e>
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d104      	bne.n	8009108 <tcp_process+0x738>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	60da      	str	r2, [r3, #12]
 8009106:	e005      	b.n	8009114 <tcp_process+0x744>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1ef      	bne.n	80090f4 <tcp_process+0x724>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	60da      	str	r2, [r3, #12]
 800911a:	4b1f      	ldr	r3, [pc, #124]	; (8009198 <tcp_process+0x7c8>)
 800911c:	2201      	movs	r2, #1
 800911e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	220a      	movs	r2, #10
 8009124:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009126:	4b1d      	ldr	r3, [pc, #116]	; (800919c <tcp_process+0x7cc>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60da      	str	r2, [r3, #12]
 800912e:	4a1b      	ldr	r2, [pc, #108]	; (800919c <tcp_process+0x7cc>)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	f002 fc4a 	bl	800b9cc <tcp_timer_needed>
      }
      break;
 8009138:	e026      	b.n	8009188 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f93c 	bl	80093b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009140:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <tcp_process+0x7d0>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b00      	cmp	r3, #0
 800914a:	d01f      	beq.n	800918c <tcp_process+0x7bc>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009150:	4b14      	ldr	r3, [pc, #80]	; (80091a4 <tcp_process+0x7d4>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d119      	bne.n	800918c <tcp_process+0x7bc>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915c:	2b00      	cmp	r3, #0
 800915e:	d115      	bne.n	800918c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009160:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <tcp_process+0x7d8>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	f043 0310 	orr.w	r3, r3, #16
 8009168:	b2da      	uxtb	r2, r3
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <tcp_process+0x7d8>)
 800916c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800916e:	e00d      	b.n	800918c <tcp_process+0x7bc>
    default:
      break;
 8009170:	bf00      	nop
 8009172:	e00c      	b.n	800918e <tcp_process+0x7be>
      break;
 8009174:	bf00      	nop
 8009176:	e00a      	b.n	800918e <tcp_process+0x7be>
      break;
 8009178:	bf00      	nop
 800917a:	e008      	b.n	800918e <tcp_process+0x7be>
      break;
 800917c:	bf00      	nop
 800917e:	e006      	b.n	800918e <tcp_process+0x7be>
      break;
 8009180:	bf00      	nop
 8009182:	e004      	b.n	800918e <tcp_process+0x7be>
      break;
 8009184:	bf00      	nop
 8009186:	e002      	b.n	800918e <tcp_process+0x7be>
      break;
 8009188:	bf00      	nop
 800918a:	e000      	b.n	800918e <tcp_process+0x7be>
      break;
 800918c:	bf00      	nop
  }
  return ERR_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3724      	adds	r7, #36	; 0x24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd90      	pop	{r4, r7, pc}
 8009198:	20008780 	.word	0x20008780
 800919c:	2000877c 	.word	0x2000877c
 80091a0:	200087b0 	.word	0x200087b0
 80091a4:	200087a8 	.word	0x200087a8
 80091a8:	200087b1 	.word	0x200087b1
 80091ac:	20008778 	.word	0x20008778

080091b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80091b0:	b590      	push	{r4, r7, lr}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d106      	bne.n	80091ce <tcp_oos_insert_segment+0x1e>
 80091c0:	4b3b      	ldr	r3, [pc, #236]	; (80092b0 <tcp_oos_insert_segment+0x100>)
 80091c2:	f240 421f 	movw	r2, #1055	; 0x41f
 80091c6:	493b      	ldr	r1, [pc, #236]	; (80092b4 <tcp_oos_insert_segment+0x104>)
 80091c8:	483b      	ldr	r0, [pc, #236]	; (80092b8 <tcp_oos_insert_segment+0x108>)
 80091ca:	f005 ff13 	bl	800eff4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	899b      	ldrh	r3, [r3, #12]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fb fc0e 	bl	80049f8 <lwip_htons>
 80091dc:	4603      	mov	r3, r0
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d028      	beq.n	800923a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80091e8:	6838      	ldr	r0, [r7, #0]
 80091ea:	f7fe fa63 	bl	80076b4 <tcp_segs_free>
    next = NULL;
 80091ee:	2300      	movs	r3, #0
 80091f0:	603b      	str	r3, [r7, #0]
 80091f2:	e056      	b.n	80092a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	899b      	ldrh	r3, [r3, #12]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fb fbfb 	bl	80049f8 <lwip_htons>
 8009202:	4603      	mov	r3, r0
 8009204:	b2db      	uxtb	r3, r3
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00d      	beq.n	800922a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	899b      	ldrh	r3, [r3, #12]
 8009214:	b29c      	uxth	r4, r3
 8009216:	2001      	movs	r0, #1
 8009218:	f7fb fbee 	bl	80049f8 <lwip_htons>
 800921c:	4603      	mov	r3, r0
 800921e:	461a      	mov	r2, r3
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	4322      	orrs	r2, r4
 8009226:	b292      	uxth	r2, r2
 8009228:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f7fe fa52 	bl	80076de <tcp_seg_free>
    while (next &&
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00e      	beq.n	800925e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	891b      	ldrh	r3, [r3, #8]
 8009244:	461a      	mov	r2, r3
 8009246:	4b1d      	ldr	r3, [pc, #116]	; (80092bc <tcp_oos_insert_segment+0x10c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	441a      	add	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	8909      	ldrh	r1, [r1, #8]
 8009256:	440b      	add	r3, r1
 8009258:	1ad3      	subs	r3, r2, r3
    while (next &&
 800925a:	2b00      	cmp	r3, #0
 800925c:	daca      	bge.n	80091f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d01e      	beq.n	80092a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	891b      	ldrh	r3, [r3, #8]
 8009268:	461a      	mov	r2, r3
 800926a:	4b14      	ldr	r3, [pc, #80]	; (80092bc <tcp_oos_insert_segment+0x10c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	441a      	add	r2, r3
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009278:	2b00      	cmp	r3, #0
 800927a:	dd12      	ble.n	80092a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	b29a      	uxth	r2, r3
 8009284:	4b0d      	ldr	r3, [pc, #52]	; (80092bc <tcp_oos_insert_segment+0x10c>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	b29b      	uxth	r3, r3
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	b29a      	uxth	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	685a      	ldr	r2, [r3, #4]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	891b      	ldrh	r3, [r3, #8]
 800929a:	4619      	mov	r1, r3
 800929c:	4610      	mov	r0, r2
 800929e:	f7fc fd83 	bl	8005da8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	601a      	str	r2, [r3, #0]
}
 80092a8:	bf00      	nop
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd90      	pop	{r4, r7, pc}
 80092b0:	08011410 	.word	0x08011410
 80092b4:	080116d0 	.word	0x080116d0
 80092b8:	0801145c 	.word	0x0801145c
 80092bc:	200087a4 	.word	0x200087a4

080092c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80092c0:	b5b0      	push	{r4, r5, r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80092ce:	e03e      	b.n	800934e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fc ff70 	bl	80061c4 <pbuf_clen>
 80092e4:	4603      	mov	r3, r0
 80092e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80092ee:	8a7a      	ldrh	r2, [r7, #18]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d906      	bls.n	8009302 <tcp_free_acked_segments+0x42>
 80092f4:	4b2a      	ldr	r3, [pc, #168]	; (80093a0 <tcp_free_acked_segments+0xe0>)
 80092f6:	f240 4257 	movw	r2, #1111	; 0x457
 80092fa:	492a      	ldr	r1, [pc, #168]	; (80093a4 <tcp_free_acked_segments+0xe4>)
 80092fc:	482a      	ldr	r0, [pc, #168]	; (80093a8 <tcp_free_acked_segments+0xe8>)
 80092fe:	f005 fe79 	bl	800eff4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009308:	8a7b      	ldrh	r3, [r7, #18]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	b29a      	uxth	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	891a      	ldrh	r2, [r3, #8]
 8009318:	4b24      	ldr	r3, [pc, #144]	; (80093ac <tcp_free_acked_segments+0xec>)
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	4413      	add	r3, r2
 800931e:	b29a      	uxth	r2, r3
 8009320:	4b22      	ldr	r3, [pc, #136]	; (80093ac <tcp_free_acked_segments+0xec>)
 8009322:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009324:	6978      	ldr	r0, [r7, #20]
 8009326:	f7fe f9da 	bl	80076de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00c      	beq.n	800934e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d109      	bne.n	800934e <tcp_free_acked_segments+0x8e>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d106      	bne.n	800934e <tcp_free_acked_segments+0x8e>
 8009340:	4b17      	ldr	r3, [pc, #92]	; (80093a0 <tcp_free_acked_segments+0xe0>)
 8009342:	f240 4261 	movw	r2, #1121	; 0x461
 8009346:	491a      	ldr	r1, [pc, #104]	; (80093b0 <tcp_free_acked_segments+0xf0>)
 8009348:	4817      	ldr	r0, [pc, #92]	; (80093a8 <tcp_free_acked_segments+0xe8>)
 800934a:	f005 fe53 	bl	800eff4 <iprintf>
  while (seg_list != NULL &&
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d020      	beq.n	8009396 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	4618      	mov	r0, r3
 800935c:	f7fb fb61 	bl	8004a22 <lwip_htonl>
 8009360:	4604      	mov	r4, r0
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	891b      	ldrh	r3, [r3, #8]
 8009366:	461d      	mov	r5, r3
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	899b      	ldrh	r3, [r3, #12]
 800936e:	b29b      	uxth	r3, r3
 8009370:	4618      	mov	r0, r3
 8009372:	f7fb fb41 	bl	80049f8 <lwip_htons>
 8009376:	4603      	mov	r3, r0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <tcp_free_acked_segments+0xc6>
 8009382:	2301      	movs	r3, #1
 8009384:	e000      	b.n	8009388 <tcp_free_acked_segments+0xc8>
 8009386:	2300      	movs	r3, #0
 8009388:	442b      	add	r3, r5
 800938a:	18e2      	adds	r2, r4, r3
 800938c:	4b09      	ldr	r3, [pc, #36]	; (80093b4 <tcp_free_acked_segments+0xf4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009392:	2b00      	cmp	r3, #0
 8009394:	dd9c      	ble.n	80092d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009396:	68bb      	ldr	r3, [r7, #8]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bdb0      	pop	{r4, r5, r7, pc}
 80093a0:	08011410 	.word	0x08011410
 80093a4:	080116f8 	.word	0x080116f8
 80093a8:	0801145c 	.word	0x0801145c
 80093ac:	200087ac 	.word	0x200087ac
 80093b0:	08011720 	.word	0x08011720
 80093b4:	200087a8 	.word	0x200087a8

080093b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80093b8:	b5b0      	push	{r4, r5, r7, lr}
 80093ba:	b094      	sub	sp, #80	; 0x50
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d106      	bne.n	80093d8 <tcp_receive+0x20>
 80093ca:	4b91      	ldr	r3, [pc, #580]	; (8009610 <tcp_receive+0x258>)
 80093cc:	f240 427b 	movw	r2, #1147	; 0x47b
 80093d0:	4990      	ldr	r1, [pc, #576]	; (8009614 <tcp_receive+0x25c>)
 80093d2:	4891      	ldr	r0, [pc, #580]	; (8009618 <tcp_receive+0x260>)
 80093d4:	f005 fe0e 	bl	800eff4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	7d1b      	ldrb	r3, [r3, #20]
 80093dc:	2b03      	cmp	r3, #3
 80093de:	d806      	bhi.n	80093ee <tcp_receive+0x36>
 80093e0:	4b8b      	ldr	r3, [pc, #556]	; (8009610 <tcp_receive+0x258>)
 80093e2:	f240 427c 	movw	r2, #1148	; 0x47c
 80093e6:	498d      	ldr	r1, [pc, #564]	; (800961c <tcp_receive+0x264>)
 80093e8:	488b      	ldr	r0, [pc, #556]	; (8009618 <tcp_receive+0x260>)
 80093ea:	f005 fe03 	bl	800eff4 <iprintf>

  if (flags & TCP_ACK) {
 80093ee:	4b8c      	ldr	r3, [pc, #560]	; (8009620 <tcp_receive+0x268>)
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	f003 0310 	and.w	r3, r3, #16
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 8264 	beq.w	80098c4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009402:	461a      	mov	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009408:	4413      	add	r3, r2
 800940a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009410:	4b84      	ldr	r3, [pc, #528]	; (8009624 <tcp_receive+0x26c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	db1b      	blt.n	8009452 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800941e:	4b81      	ldr	r3, [pc, #516]	; (8009624 <tcp_receive+0x26c>)
 8009420:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009422:	429a      	cmp	r2, r3
 8009424:	d106      	bne.n	8009434 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800942a:	4b7f      	ldr	r3, [pc, #508]	; (8009628 <tcp_receive+0x270>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	1ad3      	subs	r3, r2, r3
 8009430:	2b00      	cmp	r3, #0
 8009432:	db0e      	blt.n	8009452 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009438:	4b7b      	ldr	r3, [pc, #492]	; (8009628 <tcp_receive+0x270>)
 800943a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800943c:	429a      	cmp	r2, r3
 800943e:	d125      	bne.n	800948c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009440:	4b7a      	ldr	r3, [pc, #488]	; (800962c <tcp_receive+0x274>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	89db      	ldrh	r3, [r3, #14]
 8009446:	b29a      	uxth	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800944e:	429a      	cmp	r2, r3
 8009450:	d91c      	bls.n	800948c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009452:	4b76      	ldr	r3, [pc, #472]	; (800962c <tcp_receive+0x274>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	89db      	ldrh	r3, [r3, #14]
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800946c:	429a      	cmp	r2, r3
 800946e:	d205      	bcs.n	800947c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800947c:	4b69      	ldr	r3, [pc, #420]	; (8009624 <tcp_receive+0x26c>)
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009484:	4b68      	ldr	r3, [pc, #416]	; (8009628 <tcp_receive+0x270>)
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800948c:	4b66      	ldr	r3, [pc, #408]	; (8009628 <tcp_receive+0x270>)
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	dc58      	bgt.n	800954c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800949a:	4b65      	ldr	r3, [pc, #404]	; (8009630 <tcp_receive+0x278>)
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d14b      	bne.n	800953a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80094ac:	4413      	add	r3, r2
 80094ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d142      	bne.n	800953a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	db3d      	blt.n	800953a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094c2:	4b59      	ldr	r3, [pc, #356]	; (8009628 <tcp_receive+0x270>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d137      	bne.n	800953a <tcp_receive+0x182>
              found_dupack = 1;
 80094ca:	2301      	movs	r3, #1
 80094cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094d4:	2bff      	cmp	r3, #255	; 0xff
 80094d6:	d007      	beq.n	80094e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094de:	3301      	adds	r3, #1
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d91b      	bls.n	800952a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094fc:	4413      	add	r3, r2
 80094fe:	b29a      	uxth	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009506:	429a      	cmp	r2, r3
 8009508:	d30a      	bcc.n	8009520 <tcp_receive+0x168>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009514:	4413      	add	r3, r2
 8009516:	b29a      	uxth	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800951e:	e004      	b.n	800952a <tcp_receive+0x172>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009526:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009530:	2b02      	cmp	r3, #2
 8009532:	d902      	bls.n	800953a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f001 feed 	bl	800b314 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800953a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800953c:	2b00      	cmp	r3, #0
 800953e:	f040 8161 	bne.w	8009804 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800954a:	e15b      	b.n	8009804 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800954c:	4b36      	ldr	r3, [pc, #216]	; (8009628 <tcp_receive+0x270>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	f2c0 814e 	blt.w	80097fa <tcp_receive+0x442>
 800955e:	4b32      	ldr	r3, [pc, #200]	; (8009628 <tcp_receive+0x270>)
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	f300 8146 	bgt.w	80097fa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	8b5b      	ldrh	r3, [r3, #26]
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	2b00      	cmp	r3, #0
 8009578:	d010      	beq.n	800959c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	8b5b      	ldrh	r3, [r3, #26]
 800957e:	f023 0304 	bic.w	r3, r3, #4
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80095aa:	10db      	asrs	r3, r3, #3
 80095ac:	b21b      	sxth	r3, r3
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	4413      	add	r3, r2
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	b21a      	sxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80095c4:	4b18      	ldr	r3, [pc, #96]	; (8009628 <tcp_receive+0x270>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80095dc:	4b12      	ldr	r3, [pc, #72]	; (8009628 <tcp_receive+0x270>)
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	7d1b      	ldrb	r3, [r3, #20]
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	f240 8097 	bls.w	800971c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d245      	bcs.n	800968a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	8b5b      	ldrh	r3, [r3, #26]
 8009602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009606:	2b00      	cmp	r3, #0
 8009608:	d014      	beq.n	8009634 <tcp_receive+0x27c>
 800960a:	2301      	movs	r3, #1
 800960c:	e013      	b.n	8009636 <tcp_receive+0x27e>
 800960e:	bf00      	nop
 8009610:	08011410 	.word	0x08011410
 8009614:	08011740 	.word	0x08011740
 8009618:	0801145c 	.word	0x0801145c
 800961c:	0801175c 	.word	0x0801175c
 8009620:	200087b0 	.word	0x200087b0
 8009624:	200087a4 	.word	0x200087a4
 8009628:	200087a8 	.word	0x200087a8
 800962c:	20008794 	.word	0x20008794
 8009630:	200087ae 	.word	0x200087ae
 8009634:	2302      	movs	r3, #2
 8009636:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800963a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800963e:	b29a      	uxth	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009644:	fb12 f303 	smulbb	r3, r2, r3
 8009648:	b29b      	uxth	r3, r3
 800964a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800964c:	4293      	cmp	r3, r2
 800964e:	bf28      	it	cs
 8009650:	4613      	movcs	r3, r2
 8009652:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800965a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800965c:	4413      	add	r3, r2
 800965e:	b29a      	uxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009666:	429a      	cmp	r2, r3
 8009668:	d309      	bcc.n	800967e <tcp_receive+0x2c6>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009670:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009672:	4413      	add	r3, r2
 8009674:	b29a      	uxth	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800967c:	e04e      	b.n	800971c <tcp_receive+0x364>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009684:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009688:	e048      	b.n	800971c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009690:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009692:	4413      	add	r3, r2
 8009694:	b29a      	uxth	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800969c:	429a      	cmp	r2, r3
 800969e:	d309      	bcc.n	80096b4 <tcp_receive+0x2fc>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096a8:	4413      	add	r3, r2
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80096b2:	e004      	b.n	80096be <tcp_receive+0x306>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80096ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d326      	bcc.n	800971c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	b29a      	uxth	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096ee:	4413      	add	r3, r2
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d30a      	bcc.n	8009712 <tcp_receive+0x35a>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009706:	4413      	add	r3, r2
 8009708:	b29a      	uxth	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009710:	e004      	b.n	800971c <tcp_receive+0x364>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009718:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009724:	4a98      	ldr	r2, [pc, #608]	; (8009988 <tcp_receive+0x5d0>)
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f7ff fdca 	bl	80092c0 <tcp_free_acked_segments>
 800972c:	4602      	mov	r2, r0
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973a:	4a94      	ldr	r2, [pc, #592]	; (800998c <tcp_receive+0x5d4>)
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff fdbf 	bl	80092c0 <tcp_free_acked_segments>
 8009742:	4602      	mov	r2, r0
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800974c:	2b00      	cmp	r3, #0
 800974e:	d104      	bne.n	800975a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009756:	861a      	strh	r2, [r3, #48]	; 0x30
 8009758:	e002      	b.n	8009760 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d103      	bne.n	8009776 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800977c:	4b84      	ldr	r3, [pc, #528]	; (8009990 <tcp_receive+0x5d8>)
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	4413      	add	r3, r2
 8009782:	b29a      	uxth	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	8b5b      	ldrh	r3, [r3, #26]
 800978e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009792:	2b00      	cmp	r3, #0
 8009794:	d035      	beq.n	8009802 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	2b00      	cmp	r3, #0
 800979c:	d118      	bne.n	80097d0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00c      	beq.n	80097c0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fb f935 	bl	8004a22 <lwip_htonl>
 80097b8:	4603      	mov	r3, r0
 80097ba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80097bc:	2b00      	cmp	r3, #0
 80097be:	dc20      	bgt.n	8009802 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	8b5b      	ldrh	r3, [r3, #26]
 80097c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097c8:	b29a      	uxth	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097ce:	e018      	b.n	8009802 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fb f920 	bl	8004a22 <lwip_htonl>
 80097e2:	4603      	mov	r3, r0
 80097e4:	1ae3      	subs	r3, r4, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	dc0b      	bgt.n	8009802 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	8b5b      	ldrh	r3, [r3, #26]
 80097ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80097f8:	e003      	b.n	8009802 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f001 ff76 	bl	800b6ec <tcp_send_empty_ack>
 8009800:	e000      	b.n	8009804 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009802:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009808:	2b00      	cmp	r3, #0
 800980a:	d05b      	beq.n	80098c4 <tcp_receive+0x50c>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009810:	4b60      	ldr	r3, [pc, #384]	; (8009994 <tcp_receive+0x5dc>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	da54      	bge.n	80098c4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800981a:	4b5f      	ldr	r3, [pc, #380]	; (8009998 <tcp_receive+0x5e0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	b29a      	uxth	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009824:	b29b      	uxth	r3, r3
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	b29b      	uxth	r3, r3
 800982a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800982e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009838:	10db      	asrs	r3, r3, #3
 800983a:	b21b      	sxth	r3, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	b29b      	uxth	r3, r3
 8009842:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800984c:	b29a      	uxth	r2, r3
 800984e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009852:	4413      	add	r3, r2
 8009854:	b29b      	uxth	r3, r3
 8009856:	b21a      	sxth	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800985c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009860:	2b00      	cmp	r3, #0
 8009862:	da05      	bge.n	8009870 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009864:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009868:	425b      	negs	r3, r3
 800986a:	b29b      	uxth	r3, r3
 800986c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009870:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800987a:	109b      	asrs	r3, r3, #2
 800987c:	b21b      	sxth	r3, r3
 800987e:	b29b      	uxth	r3, r3
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	b29b      	uxth	r3, r3
 8009884:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800988e:	b29a      	uxth	r2, r3
 8009890:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009894:	4413      	add	r3, r2
 8009896:	b29b      	uxth	r3, r3
 8009898:	b21a      	sxth	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80098a4:	10db      	asrs	r3, r3, #3
 80098a6:	b21b      	sxth	r3, r3
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	4413      	add	r3, r2
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	b21a      	sxth	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80098c4:	4b35      	ldr	r3, [pc, #212]	; (800999c <tcp_receive+0x5e4>)
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 84e2 	beq.w	800a292 <tcp_receive+0xeda>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	7d1b      	ldrb	r3, [r3, #20]
 80098d2:	2b06      	cmp	r3, #6
 80098d4:	f200 84dd 	bhi.w	800a292 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098dc:	4b30      	ldr	r3, [pc, #192]	; (80099a0 <tcp_receive+0x5e8>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	1ad3      	subs	r3, r2, r3
 80098e2:	3b01      	subs	r3, #1
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f2c0 808f 	blt.w	8009a08 <tcp_receive+0x650>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098ee:	4b2b      	ldr	r3, [pc, #172]	; (800999c <tcp_receive+0x5e4>)
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	4619      	mov	r1, r3
 80098f4:	4b2a      	ldr	r3, [pc, #168]	; (80099a0 <tcp_receive+0x5e8>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	440b      	add	r3, r1
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	3301      	adds	r3, #1
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f300 8082 	bgt.w	8009a08 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009904:	4b27      	ldr	r3, [pc, #156]	; (80099a4 <tcp_receive+0x5ec>)
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800990e:	4b24      	ldr	r3, [pc, #144]	; (80099a0 <tcp_receive+0x5e8>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009916:	4b23      	ldr	r3, [pc, #140]	; (80099a4 <tcp_receive+0x5ec>)
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <tcp_receive+0x574>
 800991e:	4b22      	ldr	r3, [pc, #136]	; (80099a8 <tcp_receive+0x5f0>)
 8009920:	f240 5294 	movw	r2, #1428	; 0x594
 8009924:	4921      	ldr	r1, [pc, #132]	; (80099ac <tcp_receive+0x5f4>)
 8009926:	4822      	ldr	r0, [pc, #136]	; (80099b0 <tcp_receive+0x5f8>)
 8009928:	f005 fb64 	bl	800eff4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009932:	4293      	cmp	r3, r2
 8009934:	d906      	bls.n	8009944 <tcp_receive+0x58c>
 8009936:	4b1c      	ldr	r3, [pc, #112]	; (80099a8 <tcp_receive+0x5f0>)
 8009938:	f240 5295 	movw	r2, #1429	; 0x595
 800993c:	491d      	ldr	r1, [pc, #116]	; (80099b4 <tcp_receive+0x5fc>)
 800993e:	481c      	ldr	r0, [pc, #112]	; (80099b0 <tcp_receive+0x5f8>)
 8009940:	f005 fb58 	bl	800eff4 <iprintf>
      off = (u16_t)off32;
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800994a:	4b16      	ldr	r3, [pc, #88]	; (80099a4 <tcp_receive+0x5ec>)
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	891b      	ldrh	r3, [r3, #8]
 8009950:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009954:	429a      	cmp	r2, r3
 8009956:	d906      	bls.n	8009966 <tcp_receive+0x5ae>
 8009958:	4b13      	ldr	r3, [pc, #76]	; (80099a8 <tcp_receive+0x5f0>)
 800995a:	f240 5297 	movw	r2, #1431	; 0x597
 800995e:	4916      	ldr	r1, [pc, #88]	; (80099b8 <tcp_receive+0x600>)
 8009960:	4813      	ldr	r0, [pc, #76]	; (80099b0 <tcp_receive+0x5f8>)
 8009962:	f005 fb47 	bl	800eff4 <iprintf>
      inseg.len -= off;
 8009966:	4b0f      	ldr	r3, [pc, #60]	; (80099a4 <tcp_receive+0x5ec>)
 8009968:	891a      	ldrh	r2, [r3, #8]
 800996a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	b29a      	uxth	r2, r3
 8009972:	4b0c      	ldr	r3, [pc, #48]	; (80099a4 <tcp_receive+0x5ec>)
 8009974:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009976:	4b0b      	ldr	r3, [pc, #44]	; (80099a4 <tcp_receive+0x5ec>)
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	891a      	ldrh	r2, [r3, #8]
 800997c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009980:	1ad3      	subs	r3, r2, r3
 8009982:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009984:	e02a      	b.n	80099dc <tcp_receive+0x624>
 8009986:	bf00      	nop
 8009988:	08011778 	.word	0x08011778
 800998c:	08011780 	.word	0x08011780
 8009990:	200087ac 	.word	0x200087ac
 8009994:	200087a8 	.word	0x200087a8
 8009998:	2000876c 	.word	0x2000876c
 800999c:	200087ae 	.word	0x200087ae
 80099a0:	200087a4 	.word	0x200087a4
 80099a4:	20008784 	.word	0x20008784
 80099a8:	08011410 	.word	0x08011410
 80099ac:	08011788 	.word	0x08011788
 80099b0:	0801145c 	.word	0x0801145c
 80099b4:	08011798 	.word	0x08011798
 80099b8:	080117a8 	.word	0x080117a8
        off -= p->len;
 80099bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099be:	895b      	ldrh	r3, [r3, #10]
 80099c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80099ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80099ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80099d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d2:	2200      	movs	r2, #0
 80099d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80099d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80099dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099de:	895b      	ldrh	r3, [r3, #10]
 80099e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80099e4:	429a      	cmp	r2, r3
 80099e6:	d8e9      	bhi.n	80099bc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80099e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80099ec:	4619      	mov	r1, r3
 80099ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80099f0:	f7fc fada 	bl	8005fa8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f8:	4a91      	ldr	r2, [pc, #580]	; (8009c40 <tcp_receive+0x888>)
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	4b91      	ldr	r3, [pc, #580]	; (8009c44 <tcp_receive+0x88c>)
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	4a8f      	ldr	r2, [pc, #572]	; (8009c40 <tcp_receive+0x888>)
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009a06:	e00d      	b.n	8009a24 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009a08:	4b8d      	ldr	r3, [pc, #564]	; (8009c40 <tcp_receive+0x888>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	da06      	bge.n	8009a24 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	8b5b      	ldrh	r3, [r3, #26]
 8009a1a:	f043 0302 	orr.w	r3, r3, #2
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009a24:	4b86      	ldr	r3, [pc, #536]	; (8009c40 <tcp_receive+0x888>)
 8009a26:	681a      	ldr	r2, [r3, #0]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f2c0 842a 	blt.w	800a288 <tcp_receive+0xed0>
 8009a34:	4b82      	ldr	r3, [pc, #520]	; (8009c40 <tcp_receive+0x888>)
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3c:	6879      	ldr	r1, [r7, #4]
 8009a3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a40:	440b      	add	r3, r1
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	3301      	adds	r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f300 841e 	bgt.w	800a288 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a50:	4b7b      	ldr	r3, [pc, #492]	; (8009c40 <tcp_receive+0x888>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	f040 829a 	bne.w	8009f8e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009a5a:	4b7a      	ldr	r3, [pc, #488]	; (8009c44 <tcp_receive+0x88c>)
 8009a5c:	891c      	ldrh	r4, [r3, #8]
 8009a5e:	4b79      	ldr	r3, [pc, #484]	; (8009c44 <tcp_receive+0x88c>)
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	899b      	ldrh	r3, [r3, #12]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fa ffc6 	bl	80049f8 <lwip_htons>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	f003 0303 	and.w	r3, r3, #3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <tcp_receive+0x6c4>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e000      	b.n	8009a7e <tcp_receive+0x6c6>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	4423      	add	r3, r4
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	4b71      	ldr	r3, [pc, #452]	; (8009c48 <tcp_receive+0x890>)
 8009a84:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009a8a:	4b6f      	ldr	r3, [pc, #444]	; (8009c48 <tcp_receive+0x890>)
 8009a8c:	881b      	ldrh	r3, [r3, #0]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d275      	bcs.n	8009b7e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009a92:	4b6c      	ldr	r3, [pc, #432]	; (8009c44 <tcp_receive+0x88c>)
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	899b      	ldrh	r3, [r3, #12]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fa ffac 	bl	80049f8 <lwip_htons>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d01f      	beq.n	8009aec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009aac:	4b65      	ldr	r3, [pc, #404]	; (8009c44 <tcp_receive+0x88c>)
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	899b      	ldrh	r3, [r3, #12]
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	b21b      	sxth	r3, r3
 8009ab6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009aba:	b21c      	sxth	r4, r3
 8009abc:	4b61      	ldr	r3, [pc, #388]	; (8009c44 <tcp_receive+0x88c>)
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	899b      	ldrh	r3, [r3, #12]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fa ff97 	bl	80049f8 <lwip_htons>
 8009aca:	4603      	mov	r3, r0
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fa ff8e 	bl	80049f8 <lwip_htons>
 8009adc:	4603      	mov	r3, r0
 8009ade:	b21b      	sxth	r3, r3
 8009ae0:	4323      	orrs	r3, r4
 8009ae2:	b21a      	sxth	r2, r3
 8009ae4:	4b57      	ldr	r3, [pc, #348]	; (8009c44 <tcp_receive+0x88c>)
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	b292      	uxth	r2, r2
 8009aea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009af0:	4b54      	ldr	r3, [pc, #336]	; (8009c44 <tcp_receive+0x88c>)
 8009af2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009af4:	4b53      	ldr	r3, [pc, #332]	; (8009c44 <tcp_receive+0x88c>)
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	899b      	ldrh	r3, [r3, #12]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fa ff7b 	bl	80049f8 <lwip_htons>
 8009b02:	4603      	mov	r3, r0
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	f003 0302 	and.w	r3, r3, #2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d005      	beq.n	8009b1a <tcp_receive+0x762>
            inseg.len -= 1;
 8009b0e:	4b4d      	ldr	r3, [pc, #308]	; (8009c44 <tcp_receive+0x88c>)
 8009b10:	891b      	ldrh	r3, [r3, #8]
 8009b12:	3b01      	subs	r3, #1
 8009b14:	b29a      	uxth	r2, r3
 8009b16:	4b4b      	ldr	r3, [pc, #300]	; (8009c44 <tcp_receive+0x88c>)
 8009b18:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009b1a:	4b4a      	ldr	r3, [pc, #296]	; (8009c44 <tcp_receive+0x88c>)
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	4a49      	ldr	r2, [pc, #292]	; (8009c44 <tcp_receive+0x88c>)
 8009b20:	8912      	ldrh	r2, [r2, #8]
 8009b22:	4611      	mov	r1, r2
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fc f93f 	bl	8005da8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009b2a:	4b46      	ldr	r3, [pc, #280]	; (8009c44 <tcp_receive+0x88c>)
 8009b2c:	891c      	ldrh	r4, [r3, #8]
 8009b2e:	4b45      	ldr	r3, [pc, #276]	; (8009c44 <tcp_receive+0x88c>)
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	899b      	ldrh	r3, [r3, #12]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fa ff5e 	bl	80049f8 <lwip_htons>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f003 0303 	and.w	r3, r3, #3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d001      	beq.n	8009b4c <tcp_receive+0x794>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e000      	b.n	8009b4e <tcp_receive+0x796>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4423      	add	r3, r4
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	4b3d      	ldr	r3, [pc, #244]	; (8009c48 <tcp_receive+0x890>)
 8009b54:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009b56:	4b3c      	ldr	r3, [pc, #240]	; (8009c48 <tcp_receive+0x890>)
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	4b38      	ldr	r3, [pc, #224]	; (8009c40 <tcp_receive+0x888>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	441a      	add	r2, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b6a:	440b      	add	r3, r1
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d006      	beq.n	8009b7e <tcp_receive+0x7c6>
 8009b70:	4b36      	ldr	r3, [pc, #216]	; (8009c4c <tcp_receive+0x894>)
 8009b72:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009b76:	4936      	ldr	r1, [pc, #216]	; (8009c50 <tcp_receive+0x898>)
 8009b78:	4836      	ldr	r0, [pc, #216]	; (8009c54 <tcp_receive+0x89c>)
 8009b7a:	f005 fa3b 	bl	800eff4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f000 80e7 	beq.w	8009d56 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009b88:	4b2e      	ldr	r3, [pc, #184]	; (8009c44 <tcp_receive+0x88c>)
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	899b      	ldrh	r3, [r3, #12]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7fa ff31 	bl	80049f8 <lwip_htons>
 8009b96:	4603      	mov	r3, r0
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d010      	beq.n	8009bc4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009ba2:	e00a      	b.n	8009bba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ba8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7fd fd92 	bl	80076de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1f0      	bne.n	8009ba4 <tcp_receive+0x7ec>
 8009bc2:	e0c8      	b.n	8009d56 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009bca:	e052      	b.n	8009c72 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	899b      	ldrh	r3, [r3, #12]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fa ff0f 	bl	80049f8 <lwip_htons>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d03d      	beq.n	8009c62 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009be6:	4b17      	ldr	r3, [pc, #92]	; (8009c44 <tcp_receive+0x88c>)
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	899b      	ldrh	r3, [r3, #12]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fa ff02 	bl	80049f8 <lwip_htons>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d130      	bne.n	8009c62 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009c00:	4b10      	ldr	r3, [pc, #64]	; (8009c44 <tcp_receive+0x88c>)
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	899b      	ldrh	r3, [r3, #12]
 8009c06:	b29c      	uxth	r4, r3
 8009c08:	2001      	movs	r0, #1
 8009c0a:	f7fa fef5 	bl	80049f8 <lwip_htons>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	461a      	mov	r2, r3
 8009c12:	4b0c      	ldr	r3, [pc, #48]	; (8009c44 <tcp_receive+0x88c>)
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	4322      	orrs	r2, r4
 8009c18:	b292      	uxth	r2, r2
 8009c1a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009c1c:	4b09      	ldr	r3, [pc, #36]	; (8009c44 <tcp_receive+0x88c>)
 8009c1e:	891c      	ldrh	r4, [r3, #8]
 8009c20:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <tcp_receive+0x88c>)
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	899b      	ldrh	r3, [r3, #12]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fa fee5 	bl	80049f8 <lwip_htons>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	b2db      	uxtb	r3, r3
 8009c32:	f003 0303 	and.w	r3, r3, #3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00e      	beq.n	8009c58 <tcp_receive+0x8a0>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e00d      	b.n	8009c5a <tcp_receive+0x8a2>
 8009c3e:	bf00      	nop
 8009c40:	200087a4 	.word	0x200087a4
 8009c44:	20008784 	.word	0x20008784
 8009c48:	200087ae 	.word	0x200087ae
 8009c4c:	08011410 	.word	0x08011410
 8009c50:	080117b8 	.word	0x080117b8
 8009c54:	0801145c 	.word	0x0801145c
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4423      	add	r3, r4
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	4b98      	ldr	r3, [pc, #608]	; (8009ec0 <tcp_receive+0xb08>)
 8009c60:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c64:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009c6c:	6938      	ldr	r0, [r7, #16]
 8009c6e:	f7fd fd36 	bl	80076de <tcp_seg_free>
            while (next &&
 8009c72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00e      	beq.n	8009c96 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009c78:	4b91      	ldr	r3, [pc, #580]	; (8009ec0 <tcp_receive+0xb08>)
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	4b91      	ldr	r3, [pc, #580]	; (8009ec4 <tcp_receive+0xb0c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	441a      	add	r2, r3
 8009c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c8c:	8909      	ldrh	r1, [r1, #8]
 8009c8e:	440b      	add	r3, r1
 8009c90:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	da9a      	bge.n	8009bcc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d059      	beq.n	8009d50 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009c9c:	4b88      	ldr	r3, [pc, #544]	; (8009ec0 <tcp_receive+0xb08>)
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	4b88      	ldr	r3, [pc, #544]	; (8009ec4 <tcp_receive+0xb0c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	441a      	add	r2, r3
 8009ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	dd4d      	ble.n	8009d50 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	b29a      	uxth	r2, r3
 8009cbc:	4b81      	ldr	r3, [pc, #516]	; (8009ec4 <tcp_receive+0xb0c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	4b80      	ldr	r3, [pc, #512]	; (8009ec8 <tcp_receive+0xb10>)
 8009cc8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009cca:	4b7f      	ldr	r3, [pc, #508]	; (8009ec8 <tcp_receive+0xb10>)
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	899b      	ldrh	r3, [r3, #12]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fa fe90 	bl	80049f8 <lwip_htons>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d005      	beq.n	8009cf0 <tcp_receive+0x938>
                inseg.len -= 1;
 8009ce4:	4b78      	ldr	r3, [pc, #480]	; (8009ec8 <tcp_receive+0xb10>)
 8009ce6:	891b      	ldrh	r3, [r3, #8]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	4b76      	ldr	r3, [pc, #472]	; (8009ec8 <tcp_receive+0xb10>)
 8009cee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009cf0:	4b75      	ldr	r3, [pc, #468]	; (8009ec8 <tcp_receive+0xb10>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	4a74      	ldr	r2, [pc, #464]	; (8009ec8 <tcp_receive+0xb10>)
 8009cf6:	8912      	ldrh	r2, [r2, #8]
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fc f854 	bl	8005da8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009d00:	4b71      	ldr	r3, [pc, #452]	; (8009ec8 <tcp_receive+0xb10>)
 8009d02:	891c      	ldrh	r4, [r3, #8]
 8009d04:	4b70      	ldr	r3, [pc, #448]	; (8009ec8 <tcp_receive+0xb10>)
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	899b      	ldrh	r3, [r3, #12]
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fa fe73 	bl	80049f8 <lwip_htons>
 8009d12:	4603      	mov	r3, r0
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <tcp_receive+0x96a>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e000      	b.n	8009d24 <tcp_receive+0x96c>
 8009d22:	2300      	movs	r3, #0
 8009d24:	4423      	add	r3, r4
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	4b65      	ldr	r3, [pc, #404]	; (8009ec0 <tcp_receive+0xb08>)
 8009d2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009d2c:	4b64      	ldr	r3, [pc, #400]	; (8009ec0 <tcp_receive+0xb08>)
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	4b64      	ldr	r3, [pc, #400]	; (8009ec4 <tcp_receive+0xb0c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	441a      	add	r2, r3
 8009d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d006      	beq.n	8009d50 <tcp_receive+0x998>
 8009d42:	4b62      	ldr	r3, [pc, #392]	; (8009ecc <tcp_receive+0xb14>)
 8009d44:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009d48:	4961      	ldr	r1, [pc, #388]	; (8009ed0 <tcp_receive+0xb18>)
 8009d4a:	4862      	ldr	r0, [pc, #392]	; (8009ed4 <tcp_receive+0xb1c>)
 8009d4c:	f005 f952 	bl	800eff4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d54:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009d56:	4b5a      	ldr	r3, [pc, #360]	; (8009ec0 <tcp_receive+0xb08>)
 8009d58:	881b      	ldrh	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	4b59      	ldr	r3, [pc, #356]	; (8009ec4 <tcp_receive+0xb0c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	441a      	add	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d6a:	4b55      	ldr	r3, [pc, #340]	; (8009ec0 <tcp_receive+0xb08>)
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d206      	bcs.n	8009d80 <tcp_receive+0x9c8>
 8009d72:	4b56      	ldr	r3, [pc, #344]	; (8009ecc <tcp_receive+0xb14>)
 8009d74:	f240 6207 	movw	r2, #1543	; 0x607
 8009d78:	4957      	ldr	r1, [pc, #348]	; (8009ed8 <tcp_receive+0xb20>)
 8009d7a:	4856      	ldr	r0, [pc, #344]	; (8009ed4 <tcp_receive+0xb1c>)
 8009d7c:	f005 f93a 	bl	800eff4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d84:	4b4e      	ldr	r3, [pc, #312]	; (8009ec0 <tcp_receive+0xb08>)
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f7fc ffc5 	bl	8006d20 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009d96:	4b4c      	ldr	r3, [pc, #304]	; (8009ec8 <tcp_receive+0xb10>)
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	891b      	ldrh	r3, [r3, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d006      	beq.n	8009dae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009da0:	4b49      	ldr	r3, [pc, #292]	; (8009ec8 <tcp_receive+0xb10>)
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	4a4d      	ldr	r2, [pc, #308]	; (8009edc <tcp_receive+0xb24>)
 8009da6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009da8:	4b47      	ldr	r3, [pc, #284]	; (8009ec8 <tcp_receive+0xb10>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009dae:	4b46      	ldr	r3, [pc, #280]	; (8009ec8 <tcp_receive+0xb10>)
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	899b      	ldrh	r3, [r3, #12]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fa fe1e 	bl	80049f8 <lwip_htons>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	f003 0301 	and.w	r3, r3, #1
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 80b8 	beq.w	8009f3a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009dca:	4b45      	ldr	r3, [pc, #276]	; (8009ee0 <tcp_receive+0xb28>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	f043 0320 	orr.w	r3, r3, #32
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	4b42      	ldr	r3, [pc, #264]	; (8009ee0 <tcp_receive+0xb28>)
 8009dd6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009dd8:	e0af      	b.n	8009f3a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dde:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	4a36      	ldr	r2, [pc, #216]	; (8009ec4 <tcp_receive+0xb0c>)
 8009dea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	891b      	ldrh	r3, [r3, #8]
 8009df0:	461c      	mov	r4, r3
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	899b      	ldrh	r3, [r3, #12]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fa fdfc 	bl	80049f8 <lwip_htons>
 8009e00:	4603      	mov	r3, r0
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	f003 0303 	and.w	r3, r3, #3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d001      	beq.n	8009e10 <tcp_receive+0xa58>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e000      	b.n	8009e12 <tcp_receive+0xa5a>
 8009e10:	2300      	movs	r3, #0
 8009e12:	191a      	adds	r2, r3, r4
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e18:	441a      	add	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e22:	461c      	mov	r4, r3
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	891b      	ldrh	r3, [r3, #8]
 8009e28:	461d      	mov	r5, r3
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	899b      	ldrh	r3, [r3, #12]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7fa fde0 	bl	80049f8 <lwip_htons>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	f003 0303 	and.w	r3, r3, #3
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <tcp_receive+0xa90>
 8009e44:	2301      	movs	r3, #1
 8009e46:	e000      	b.n	8009e4a <tcp_receive+0xa92>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	442b      	add	r3, r5
 8009e4c:	429c      	cmp	r4, r3
 8009e4e:	d206      	bcs.n	8009e5e <tcp_receive+0xaa6>
 8009e50:	4b1e      	ldr	r3, [pc, #120]	; (8009ecc <tcp_receive+0xb14>)
 8009e52:	f240 622b 	movw	r2, #1579	; 0x62b
 8009e56:	4923      	ldr	r1, [pc, #140]	; (8009ee4 <tcp_receive+0xb2c>)
 8009e58:	481e      	ldr	r0, [pc, #120]	; (8009ed4 <tcp_receive+0xb1c>)
 8009e5a:	f005 f8cb 	bl	800eff4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	891b      	ldrh	r3, [r3, #8]
 8009e62:	461c      	mov	r4, r3
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	899b      	ldrh	r3, [r3, #12]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fa fdc3 	bl	80049f8 <lwip_htons>
 8009e72:	4603      	mov	r3, r0
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	f003 0303 	and.w	r3, r3, #3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <tcp_receive+0xaca>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e000      	b.n	8009e84 <tcp_receive+0xacc>
 8009e82:	2300      	movs	r3, #0
 8009e84:	1919      	adds	r1, r3, r4
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e8a:	b28b      	uxth	r3, r1
 8009e8c:	1ad3      	subs	r3, r2, r3
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f7fc ff43 	bl	8006d20 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	891b      	ldrh	r3, [r3, #8]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d028      	beq.n	8009ef6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009ea4:	4b0d      	ldr	r3, [pc, #52]	; (8009edc <tcp_receive+0xb24>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d01d      	beq.n	8009ee8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009eac:	4b0b      	ldr	r3, [pc, #44]	; (8009edc <tcp_receive+0xb24>)
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	4610      	mov	r0, r2
 8009eb8:	f7fc f9be 	bl	8006238 <pbuf_cat>
 8009ebc:	e018      	b.n	8009ef0 <tcp_receive+0xb38>
 8009ebe:	bf00      	nop
 8009ec0:	200087ae 	.word	0x200087ae
 8009ec4:	200087a4 	.word	0x200087a4
 8009ec8:	20008784 	.word	0x20008784
 8009ecc:	08011410 	.word	0x08011410
 8009ed0:	080117f0 	.word	0x080117f0
 8009ed4:	0801145c 	.word	0x0801145c
 8009ed8:	0801182c 	.word	0x0801182c
 8009edc:	200087b4 	.word	0x200087b4
 8009ee0:	200087b1 	.word	0x200087b1
 8009ee4:	0801184c 	.word	0x0801184c
            } else {
              recv_data = cseg->p;
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	4a70      	ldr	r2, [pc, #448]	; (800a0b0 <tcp_receive+0xcf8>)
 8009eee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	899b      	ldrh	r3, [r3, #12]
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fa fd7a 	bl	80049f8 <lwip_htons>
 8009f04:	4603      	mov	r3, r0
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00d      	beq.n	8009f2c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009f10:	4b68      	ldr	r3, [pc, #416]	; (800a0b4 <tcp_receive+0xcfc>)
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	f043 0320 	orr.w	r3, r3, #32
 8009f18:	b2da      	uxtb	r2, r3
 8009f1a:	4b66      	ldr	r3, [pc, #408]	; (800a0b4 <tcp_receive+0xcfc>)
 8009f1c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	7d1b      	ldrb	r3, [r3, #20]
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d102      	bne.n	8009f2c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2207      	movs	r2, #7
 8009f2a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009f34:	68b8      	ldr	r0, [r7, #8]
 8009f36:	f7fd fbd2 	bl	80076de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	f43f af43 	beq.w	8009dda <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	8b5b      	ldrh	r3, [r3, #26]
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00e      	beq.n	8009f7e <tcp_receive+0xbc6>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	8b5b      	ldrh	r3, [r3, #26]
 8009f64:	f023 0301 	bic.w	r3, r3, #1
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	835a      	strh	r2, [r3, #26]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	8b5b      	ldrh	r3, [r3, #26]
 8009f72:	f043 0302 	orr.w	r3, r3, #2
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009f7c:	e188      	b.n	800a290 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	8b5b      	ldrh	r3, [r3, #26]
 8009f82:	f043 0301 	orr.w	r3, r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009f8c:	e180      	b.n	800a290 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d106      	bne.n	8009fa4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009f96:	4848      	ldr	r0, [pc, #288]	; (800a0b8 <tcp_receive+0xd00>)
 8009f98:	f7fd fbba 	bl	8007710 <tcp_seg_copy>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	675a      	str	r2, [r3, #116]	; 0x74
 8009fa2:	e16d      	b.n	800a280 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fac:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fae:	e157      	b.n	800a260 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	4b41      	ldr	r3, [pc, #260]	; (800a0bc <tcp_receive+0xd04>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d11d      	bne.n	8009ffa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009fbe:	4b3e      	ldr	r3, [pc, #248]	; (800a0b8 <tcp_receive+0xd00>)
 8009fc0:	891a      	ldrh	r2, [r3, #8]
 8009fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc4:	891b      	ldrh	r3, [r3, #8]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	f240 814f 	bls.w	800a26a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009fcc:	483a      	ldr	r0, [pc, #232]	; (800a0b8 <tcp_receive+0xd00>)
 8009fce:	f7fd fb9f 	bl	8007710 <tcp_seg_copy>
 8009fd2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	f000 8149 	beq.w	800a26e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d003      	beq.n	8009fea <tcp_receive+0xc32>
                    prev->next = cseg;
 8009fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	601a      	str	r2, [r3, #0]
 8009fe8:	e002      	b.n	8009ff0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	697a      	ldr	r2, [r7, #20]
 8009fee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ff2:	6978      	ldr	r0, [r7, #20]
 8009ff4:	f7ff f8dc 	bl	80091b0 <tcp_oos_insert_segment>
                }
                break;
 8009ff8:	e139      	b.n	800a26e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d117      	bne.n	800a030 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a000:	4b2e      	ldr	r3, [pc, #184]	; (800a0bc <tcp_receive+0xd04>)
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	da57      	bge.n	800a0c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a010:	4829      	ldr	r0, [pc, #164]	; (800a0b8 <tcp_receive+0xd00>)
 800a012:	f7fd fb7d 	bl	8007710 <tcp_seg_copy>
 800a016:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 8129 	beq.w	800a272 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a026:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a028:	69b8      	ldr	r0, [r7, #24]
 800a02a:	f7ff f8c1 	bl	80091b0 <tcp_oos_insert_segment>
                  }
                  break;
 800a02e:	e120      	b.n	800a272 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a030:	4b22      	ldr	r3, [pc, #136]	; (800a0bc <tcp_receive+0xd04>)
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	3b01      	subs	r3, #1
 800a03e:	2b00      	cmp	r3, #0
 800a040:	db3e      	blt.n	800a0c0 <tcp_receive+0xd08>
 800a042:	4b1e      	ldr	r3, [pc, #120]	; (800a0bc <tcp_receive+0xd04>)
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	3301      	adds	r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	dc35      	bgt.n	800a0c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a054:	4818      	ldr	r0, [pc, #96]	; (800a0b8 <tcp_receive+0xd00>)
 800a056:	f7fd fb5b 	bl	8007710 <tcp_seg_copy>
 800a05a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 8109 	beq.w	800a276 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a06c:	8912      	ldrh	r2, [r2, #8]
 800a06e:	441a      	add	r2, r3
 800a070:	4b12      	ldr	r3, [pc, #72]	; (800a0bc <tcp_receive+0xd04>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	dd12      	ble.n	800a0a0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a07a:	4b10      	ldr	r3, [pc, #64]	; (800a0bc <tcp_receive+0xd04>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	b29a      	uxth	r2, r3
 800a080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	b29b      	uxth	r3, r3
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a08e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a096:	891b      	ldrh	r3, [r3, #8]
 800a098:	4619      	mov	r1, r3
 800a09a:	4610      	mov	r0, r2
 800a09c:	f7fb fe84 	bl	8005da8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a0a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a2:	69fa      	ldr	r2, [r7, #28]
 800a0a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a0a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0a8:	69f8      	ldr	r0, [r7, #28]
 800a0aa:	f7ff f881 	bl	80091b0 <tcp_oos_insert_segment>
                  }
                  break;
 800a0ae:	e0e2      	b.n	800a276 <tcp_receive+0xebe>
 800a0b0:	200087b4 	.word	0x200087b4
 800a0b4:	200087b1 	.word	0x200087b1
 800a0b8:	20008784 	.word	0x20008784
 800a0bc:	200087a4 	.word	0x200087a4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f040 80c6 	bne.w	800a25a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a0ce:	4b80      	ldr	r3, [pc, #512]	; (800a2d0 <tcp_receive+0xf18>)
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f340 80bd 	ble.w	800a25a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	899b      	ldrh	r3, [r3, #12]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fa fc85 	bl	80049f8 <lwip_htons>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f040 80bf 	bne.w	800a27a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a0fc:	4875      	ldr	r0, [pc, #468]	; (800a2d4 <tcp_receive+0xf1c>)
 800a0fe:	f7fd fb07 	bl	8007710 <tcp_seg_copy>
 800a102:	4602      	mov	r2, r0
 800a104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a106:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 80b6 	beq.w	800a27e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a11a:	8912      	ldrh	r2, [r2, #8]
 800a11c:	441a      	add	r2, r3
 800a11e:	4b6c      	ldr	r3, [pc, #432]	; (800a2d0 <tcp_receive+0xf18>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	2b00      	cmp	r3, #0
 800a126:	dd12      	ble.n	800a14e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a128:	4b69      	ldr	r3, [pc, #420]	; (800a2d0 <tcp_receive+0xf18>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	b29b      	uxth	r3, r3
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	b29a      	uxth	r2, r3
 800a13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a144:	891b      	ldrh	r3, [r3, #8]
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f7fb fe2d 	bl	8005da8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a14e:	4b62      	ldr	r3, [pc, #392]	; (800a2d8 <tcp_receive+0xf20>)
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	4b5e      	ldr	r3, [pc, #376]	; (800a2d0 <tcp_receive+0xf18>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	441a      	add	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a162:	440b      	add	r3, r1
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	2b00      	cmp	r3, #0
 800a168:	f340 8089 	ble.w	800a27e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	899b      	ldrh	r3, [r3, #12]
 800a174:	b29b      	uxth	r3, r3
 800a176:	4618      	mov	r0, r3
 800a178:	f7fa fc3e 	bl	80049f8 <lwip_htons>
 800a17c:	4603      	mov	r3, r0
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b00      	cmp	r3, #0
 800a186:	d022      	beq.n	800a1ce <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	899b      	ldrh	r3, [r3, #12]
 800a190:	b29b      	uxth	r3, r3
 800a192:	b21b      	sxth	r3, r3
 800a194:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a198:	b21c      	sxth	r4, r3
 800a19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	899b      	ldrh	r3, [r3, #12]
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fa fc27 	bl	80049f8 <lwip_htons>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7fa fc1e 	bl	80049f8 <lwip_htons>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	b21b      	sxth	r3, r3
 800a1c0:	4323      	orrs	r3, r4
 800a1c2:	b21a      	sxth	r2, r3
 800a1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	b292      	uxth	r2, r2
 800a1cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1d8:	4413      	add	r3, r2
 800a1da:	b299      	uxth	r1, r3
 800a1dc:	4b3c      	ldr	r3, [pc, #240]	; (800a2d0 <tcp_receive+0xf18>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	1a8a      	subs	r2, r1, r2
 800a1e8:	b292      	uxth	r2, r2
 800a1ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	685a      	ldr	r2, [r3, #4]
 800a1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	891b      	ldrh	r3, [r3, #8]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	f7fb fdd4 	bl	8005da8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	891c      	ldrh	r4, [r3, #8]
 800a206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	899b      	ldrh	r3, [r3, #12]
 800a20e:	b29b      	uxth	r3, r3
 800a210:	4618      	mov	r0, r3
 800a212:	f7fa fbf1 	bl	80049f8 <lwip_htons>
 800a216:	4603      	mov	r3, r0
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d001      	beq.n	800a226 <tcp_receive+0xe6e>
 800a222:	2301      	movs	r3, #1
 800a224:	e000      	b.n	800a228 <tcp_receive+0xe70>
 800a226:	2300      	movs	r3, #0
 800a228:	4423      	add	r3, r4
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	4b2a      	ldr	r3, [pc, #168]	; (800a2d8 <tcp_receive+0xf20>)
 800a22e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a230:	4b29      	ldr	r3, [pc, #164]	; (800a2d8 <tcp_receive+0xf20>)
 800a232:	881b      	ldrh	r3, [r3, #0]
 800a234:	461a      	mov	r2, r3
 800a236:	4b26      	ldr	r3, [pc, #152]	; (800a2d0 <tcp_receive+0xf18>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	441a      	add	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a244:	440b      	add	r3, r1
 800a246:	429a      	cmp	r2, r3
 800a248:	d019      	beq.n	800a27e <tcp_receive+0xec6>
 800a24a:	4b24      	ldr	r3, [pc, #144]	; (800a2dc <tcp_receive+0xf24>)
 800a24c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a250:	4923      	ldr	r1, [pc, #140]	; (800a2e0 <tcp_receive+0xf28>)
 800a252:	4824      	ldr	r0, [pc, #144]	; (800a2e4 <tcp_receive+0xf2c>)
 800a254:	f004 fece 	bl	800eff4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a258:	e011      	b.n	800a27e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	2b00      	cmp	r3, #0
 800a264:	f47f aea4 	bne.w	8009fb0 <tcp_receive+0xbf8>
 800a268:	e00a      	b.n	800a280 <tcp_receive+0xec8>
                break;
 800a26a:	bf00      	nop
 800a26c:	e008      	b.n	800a280 <tcp_receive+0xec8>
                break;
 800a26e:	bf00      	nop
 800a270:	e006      	b.n	800a280 <tcp_receive+0xec8>
                  break;
 800a272:	bf00      	nop
 800a274:	e004      	b.n	800a280 <tcp_receive+0xec8>
                  break;
 800a276:	bf00      	nop
 800a278:	e002      	b.n	800a280 <tcp_receive+0xec8>
                  break;
 800a27a:	bf00      	nop
 800a27c:	e000      	b.n	800a280 <tcp_receive+0xec8>
                break;
 800a27e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f001 fa33 	bl	800b6ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a286:	e003      	b.n	800a290 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 fa2f 	bl	800b6ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a28e:	e01a      	b.n	800a2c6 <tcp_receive+0xf0e>
 800a290:	e019      	b.n	800a2c6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a292:	4b0f      	ldr	r3, [pc, #60]	; (800a2d0 <tcp_receive+0xf18>)
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	db0a      	blt.n	800a2b6 <tcp_receive+0xefe>
 800a2a0:	4b0b      	ldr	r3, [pc, #44]	; (800a2d0 <tcp_receive+0xf18>)
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	6879      	ldr	r1, [r7, #4]
 800a2aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a2ac:	440b      	add	r3, r1
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dd07      	ble.n	800a2c6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	8b5b      	ldrh	r3, [r3, #26]
 800a2ba:	f043 0302 	orr.w	r3, r3, #2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a2c4:	e7ff      	b.n	800a2c6 <tcp_receive+0xf0e>
 800a2c6:	bf00      	nop
 800a2c8:	3750      	adds	r7, #80	; 0x50
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bdb0      	pop	{r4, r5, r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	200087a4 	.word	0x200087a4
 800a2d4:	20008784 	.word	0x20008784
 800a2d8:	200087ae 	.word	0x200087ae
 800a2dc:	08011410 	.word	0x08011410
 800a2e0:	080117b8 	.word	0x080117b8
 800a2e4:	0801145c 	.word	0x0801145c

0800a2e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a2ee:	4b15      	ldr	r3, [pc, #84]	; (800a344 <tcp_get_next_optbyte+0x5c>)
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	1c5a      	adds	r2, r3, #1
 800a2f4:	b291      	uxth	r1, r2
 800a2f6:	4a13      	ldr	r2, [pc, #76]	; (800a344 <tcp_get_next_optbyte+0x5c>)
 800a2f8:	8011      	strh	r1, [r2, #0]
 800a2fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a2fc:	4b12      	ldr	r3, [pc, #72]	; (800a348 <tcp_get_next_optbyte+0x60>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d004      	beq.n	800a30e <tcp_get_next_optbyte+0x26>
 800a304:	4b11      	ldr	r3, [pc, #68]	; (800a34c <tcp_get_next_optbyte+0x64>)
 800a306:	881b      	ldrh	r3, [r3, #0]
 800a308:	88fa      	ldrh	r2, [r7, #6]
 800a30a:	429a      	cmp	r2, r3
 800a30c:	d208      	bcs.n	800a320 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a30e:	4b10      	ldr	r3, [pc, #64]	; (800a350 <tcp_get_next_optbyte+0x68>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	3314      	adds	r3, #20
 800a314:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a316:	88fb      	ldrh	r3, [r7, #6]
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	4413      	add	r3, r2
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	e00b      	b.n	800a338 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a320:	88fb      	ldrh	r3, [r7, #6]
 800a322:	b2da      	uxtb	r2, r3
 800a324:	4b09      	ldr	r3, [pc, #36]	; (800a34c <tcp_get_next_optbyte+0x64>)
 800a326:	881b      	ldrh	r3, [r3, #0]
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a32e:	4b06      	ldr	r3, [pc, #24]	; (800a348 <tcp_get_next_optbyte+0x60>)
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	797b      	ldrb	r3, [r7, #5]
 800a334:	4413      	add	r3, r2
 800a336:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a338:	4618      	mov	r0, r3
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	200087a0 	.word	0x200087a0
 800a348:	2000879c 	.word	0x2000879c
 800a34c:	2000879a 	.word	0x2000879a
 800a350:	20008794 	.word	0x20008794

0800a354 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d106      	bne.n	800a370 <tcp_parseopt+0x1c>
 800a362:	4b32      	ldr	r3, [pc, #200]	; (800a42c <tcp_parseopt+0xd8>)
 800a364:	f240 727d 	movw	r2, #1917	; 0x77d
 800a368:	4931      	ldr	r1, [pc, #196]	; (800a430 <tcp_parseopt+0xdc>)
 800a36a:	4832      	ldr	r0, [pc, #200]	; (800a434 <tcp_parseopt+0xe0>)
 800a36c:	f004 fe42 	bl	800eff4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a370:	4b31      	ldr	r3, [pc, #196]	; (800a438 <tcp_parseopt+0xe4>)
 800a372:	881b      	ldrh	r3, [r3, #0]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d055      	beq.n	800a424 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a378:	4b30      	ldr	r3, [pc, #192]	; (800a43c <tcp_parseopt+0xe8>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	801a      	strh	r2, [r3, #0]
 800a37e:	e045      	b.n	800a40c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a380:	f7ff ffb2 	bl	800a2e8 <tcp_get_next_optbyte>
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	d006      	beq.n	800a39c <tcp_parseopt+0x48>
 800a38e:	2b02      	cmp	r3, #2
 800a390:	dc2b      	bgt.n	800a3ea <tcp_parseopt+0x96>
 800a392:	2b00      	cmp	r3, #0
 800a394:	d041      	beq.n	800a41a <tcp_parseopt+0xc6>
 800a396:	2b01      	cmp	r3, #1
 800a398:	d127      	bne.n	800a3ea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a39a:	e037      	b.n	800a40c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a39c:	f7ff ffa4 	bl	800a2e8 <tcp_get_next_optbyte>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d13b      	bne.n	800a41e <tcp_parseopt+0xca>
 800a3a6:	4b25      	ldr	r3, [pc, #148]	; (800a43c <tcp_parseopt+0xe8>)
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	4a22      	ldr	r2, [pc, #136]	; (800a438 <tcp_parseopt+0xe4>)
 800a3ae:	8812      	ldrh	r2, [r2, #0]
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	da34      	bge.n	800a41e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a3b4:	f7ff ff98 	bl	800a2e8 <tcp_get_next_optbyte>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	021b      	lsls	r3, r3, #8
 800a3be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a3c0:	f7ff ff92 	bl	800a2e8 <tcp_get_next_optbyte>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	89bb      	ldrh	r3, [r7, #12]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a3ce:	89bb      	ldrh	r3, [r7, #12]
 800a3d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a3d4:	d804      	bhi.n	800a3e0 <tcp_parseopt+0x8c>
 800a3d6:	89bb      	ldrh	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <tcp_parseopt+0x8c>
 800a3dc:	89ba      	ldrh	r2, [r7, #12]
 800a3de:	e001      	b.n	800a3e4 <tcp_parseopt+0x90>
 800a3e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a3e8:	e010      	b.n	800a40c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a3ea:	f7ff ff7d 	bl	800a2e8 <tcp_get_next_optbyte>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a3f2:	7afb      	ldrb	r3, [r7, #11]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d914      	bls.n	800a422 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a3f8:	7afb      	ldrb	r3, [r7, #11]
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	4b0f      	ldr	r3, [pc, #60]	; (800a43c <tcp_parseopt+0xe8>)
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	4413      	add	r3, r2
 800a402:	b29b      	uxth	r3, r3
 800a404:	3b02      	subs	r3, #2
 800a406:	b29a      	uxth	r2, r3
 800a408:	4b0c      	ldr	r3, [pc, #48]	; (800a43c <tcp_parseopt+0xe8>)
 800a40a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a40c:	4b0b      	ldr	r3, [pc, #44]	; (800a43c <tcp_parseopt+0xe8>)
 800a40e:	881a      	ldrh	r2, [r3, #0]
 800a410:	4b09      	ldr	r3, [pc, #36]	; (800a438 <tcp_parseopt+0xe4>)
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d3b3      	bcc.n	800a380 <tcp_parseopt+0x2c>
 800a418:	e004      	b.n	800a424 <tcp_parseopt+0xd0>
          return;
 800a41a:	bf00      	nop
 800a41c:	e002      	b.n	800a424 <tcp_parseopt+0xd0>
            return;
 800a41e:	bf00      	nop
 800a420:	e000      	b.n	800a424 <tcp_parseopt+0xd0>
            return;
 800a422:	bf00      	nop
      }
    }
  }
}
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	08011410 	.word	0x08011410
 800a430:	08011874 	.word	0x08011874
 800a434:	0801145c 	.word	0x0801145c
 800a438:	20008798 	.word	0x20008798
 800a43c:	200087a0 	.word	0x200087a0

0800a440 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a440:	b480      	push	{r7}
 800a442:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a444:	4b05      	ldr	r3, [pc, #20]	; (800a45c <tcp_trigger_input_pcb_close+0x1c>)
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	f043 0310 	orr.w	r3, r3, #16
 800a44c:	b2da      	uxtb	r2, r3
 800a44e:	4b03      	ldr	r3, [pc, #12]	; (800a45c <tcp_trigger_input_pcb_close+0x1c>)
 800a450:	701a      	strb	r2, [r3, #0]
}
 800a452:	bf00      	nop
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr
 800a45c:	200087b1 	.word	0x200087b1

0800a460 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00a      	beq.n	800a488 <tcp_route+0x28>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	7a1b      	ldrb	r3, [r3, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d006      	beq.n	800a488 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	7a1b      	ldrb	r3, [r3, #8]
 800a47e:	4618      	mov	r0, r3
 800a480:	f7fb fab8 	bl	80059f4 <netif_get_by_index>
 800a484:	4603      	mov	r3, r0
 800a486:	e003      	b.n	800a490 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f003 fa37 	bl	800d8fc <ip4_route>
 800a48e:	4603      	mov	r3, r0
  }
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a498:	b590      	push	{r4, r7, lr}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	603b      	str	r3, [r7, #0]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d105      	bne.n	800a4ba <tcp_create_segment+0x22>
 800a4ae:	4b44      	ldr	r3, [pc, #272]	; (800a5c0 <tcp_create_segment+0x128>)
 800a4b0:	22a3      	movs	r2, #163	; 0xa3
 800a4b2:	4944      	ldr	r1, [pc, #272]	; (800a5c4 <tcp_create_segment+0x12c>)
 800a4b4:	4844      	ldr	r0, [pc, #272]	; (800a5c8 <tcp_create_segment+0x130>)
 800a4b6:	f004 fd9d 	bl	800eff4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d105      	bne.n	800a4cc <tcp_create_segment+0x34>
 800a4c0:	4b3f      	ldr	r3, [pc, #252]	; (800a5c0 <tcp_create_segment+0x128>)
 800a4c2:	22a4      	movs	r2, #164	; 0xa4
 800a4c4:	4941      	ldr	r1, [pc, #260]	; (800a5cc <tcp_create_segment+0x134>)
 800a4c6:	4840      	ldr	r0, [pc, #256]	; (800a5c8 <tcp_create_segment+0x130>)
 800a4c8:	f004 fd94 	bl	800eff4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a4cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a4da:	2003      	movs	r0, #3
 800a4dc:	f7fa ff04 	bl	80052e8 <memp_malloc>
 800a4e0:	6138      	str	r0, [r7, #16]
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d104      	bne.n	800a4f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a4e8:	68b8      	ldr	r0, [r7, #8]
 800a4ea:	f7fb fde3 	bl	80060b4 <pbuf_free>
    return NULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	e061      	b.n	800a5b6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a4f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	891a      	ldrh	r2, [r3, #8]
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	429a      	cmp	r2, r3
 800a510:	d205      	bcs.n	800a51e <tcp_create_segment+0x86>
 800a512:	4b2b      	ldr	r3, [pc, #172]	; (800a5c0 <tcp_create_segment+0x128>)
 800a514:	22b0      	movs	r2, #176	; 0xb0
 800a516:	492e      	ldr	r1, [pc, #184]	; (800a5d0 <tcp_create_segment+0x138>)
 800a518:	482b      	ldr	r0, [pc, #172]	; (800a5c8 <tcp_create_segment+0x130>)
 800a51a:	f004 fd6b 	bl	800eff4 <iprintf>
  seg->len = p->tot_len - optlen;
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	891a      	ldrh	r2, [r3, #8]
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	b29b      	uxth	r3, r3
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	b29a      	uxth	r2, r3
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a52e:	2114      	movs	r1, #20
 800a530:	68b8      	ldr	r0, [r7, #8]
 800a532:	f7fb fd29 	bl	8005f88 <pbuf_add_header>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d004      	beq.n	800a546 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a53c:	6938      	ldr	r0, [r7, #16]
 800a53e:	f7fd f8ce 	bl	80076de <tcp_seg_free>
    return NULL;
 800a542:	2300      	movs	r3, #0
 800a544:	e037      	b.n	800a5b6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8ada      	ldrh	r2, [r3, #22]
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	68dc      	ldr	r4, [r3, #12]
 800a558:	4610      	mov	r0, r2
 800a55a:	f7fa fa4d 	bl	80049f8 <lwip_htons>
 800a55e:	4603      	mov	r3, r0
 800a560:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8b1a      	ldrh	r2, [r3, #24]
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	68dc      	ldr	r4, [r3, #12]
 800a56a:	4610      	mov	r0, r2
 800a56c:	f7fa fa44 	bl	80049f8 <lwip_htons>
 800a570:	4603      	mov	r3, r0
 800a572:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	68dc      	ldr	r4, [r3, #12]
 800a578:	6838      	ldr	r0, [r7, #0]
 800a57a:	f7fa fa52 	bl	8004a22 <lwip_htonl>
 800a57e:	4603      	mov	r3, r0
 800a580:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a582:	7dfb      	ldrb	r3, [r7, #23]
 800a584:	089b      	lsrs	r3, r3, #2
 800a586:	b2db      	uxtb	r3, r3
 800a588:	b29b      	uxth	r3, r3
 800a58a:	3305      	adds	r3, #5
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	031b      	lsls	r3, r3, #12
 800a590:	b29a      	uxth	r2, r3
 800a592:	79fb      	ldrb	r3, [r7, #7]
 800a594:	b29b      	uxth	r3, r3
 800a596:	4313      	orrs	r3, r2
 800a598:	b29a      	uxth	r2, r3
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	68dc      	ldr	r4, [r3, #12]
 800a59e:	4610      	mov	r0, r2
 800a5a0:	f7fa fa2a 	bl	80049f8 <lwip_htons>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	68db      	ldr	r3, [r3, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	749a      	strb	r2, [r3, #18]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	74da      	strb	r2, [r3, #19]
  return seg;
 800a5b4:	693b      	ldr	r3, [r7, #16]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	371c      	adds	r7, #28
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd90      	pop	{r4, r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	08011890 	.word	0x08011890
 800a5c4:	080118c4 	.word	0x080118c4
 800a5c8:	080118e4 	.word	0x080118e4
 800a5cc:	0801190c 	.word	0x0801190c
 800a5d0:	08011930 	.word	0x08011930

0800a5d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a5d4:	b590      	push	{r4, r7, lr}
 800a5d6:	b08b      	sub	sp, #44	; 0x2c
 800a5d8:	af02      	add	r7, sp, #8
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	61fb      	str	r3, [r7, #28]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d106      	bne.n	800a600 <tcp_split_unsent_seg+0x2c>
 800a5f2:	4b95      	ldr	r3, [pc, #596]	; (800a848 <tcp_split_unsent_seg+0x274>)
 800a5f4:	f240 324b 	movw	r2, #843	; 0x34b
 800a5f8:	4994      	ldr	r1, [pc, #592]	; (800a84c <tcp_split_unsent_seg+0x278>)
 800a5fa:	4895      	ldr	r0, [pc, #596]	; (800a850 <tcp_split_unsent_seg+0x27c>)
 800a5fc:	f004 fcfa 	bl	800eff4 <iprintf>

  useg = pcb->unsent;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a604:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d102      	bne.n	800a612 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a60c:	f04f 33ff 	mov.w	r3, #4294967295
 800a610:	e116      	b.n	800a840 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a612:	887b      	ldrh	r3, [r7, #2]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d109      	bne.n	800a62c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a618:	4b8b      	ldr	r3, [pc, #556]	; (800a848 <tcp_split_unsent_seg+0x274>)
 800a61a:	f240 3253 	movw	r2, #851	; 0x353
 800a61e:	498d      	ldr	r1, [pc, #564]	; (800a854 <tcp_split_unsent_seg+0x280>)
 800a620:	488b      	ldr	r0, [pc, #556]	; (800a850 <tcp_split_unsent_seg+0x27c>)
 800a622:	f004 fce7 	bl	800eff4 <iprintf>
    return ERR_VAL;
 800a626:	f06f 0305 	mvn.w	r3, #5
 800a62a:	e109      	b.n	800a840 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	891b      	ldrh	r3, [r3, #8]
 800a630:	887a      	ldrh	r2, [r7, #2]
 800a632:	429a      	cmp	r2, r3
 800a634:	d301      	bcc.n	800a63a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	e102      	b.n	800a840 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a63e:	887a      	ldrh	r2, [r7, #2]
 800a640:	429a      	cmp	r2, r3
 800a642:	d906      	bls.n	800a652 <tcp_split_unsent_seg+0x7e>
 800a644:	4b80      	ldr	r3, [pc, #512]	; (800a848 <tcp_split_unsent_seg+0x274>)
 800a646:	f240 325b 	movw	r2, #859	; 0x35b
 800a64a:	4983      	ldr	r1, [pc, #524]	; (800a858 <tcp_split_unsent_seg+0x284>)
 800a64c:	4880      	ldr	r0, [pc, #512]	; (800a850 <tcp_split_unsent_seg+0x27c>)
 800a64e:	f004 fcd1 	bl	800eff4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	891b      	ldrh	r3, [r3, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d106      	bne.n	800a668 <tcp_split_unsent_seg+0x94>
 800a65a:	4b7b      	ldr	r3, [pc, #492]	; (800a848 <tcp_split_unsent_seg+0x274>)
 800a65c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a660:	497e      	ldr	r1, [pc, #504]	; (800a85c <tcp_split_unsent_seg+0x288>)
 800a662:	487b      	ldr	r0, [pc, #492]	; (800a850 <tcp_split_unsent_seg+0x27c>)
 800a664:	f004 fcc6 	bl	800eff4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	7a9b      	ldrb	r3, [r3, #10]
 800a66c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	b2db      	uxtb	r3, r3
 800a674:	f003 0304 	and.w	r3, r3, #4
 800a678:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	891a      	ldrh	r2, [r3, #8]
 800a67e:	887b      	ldrh	r3, [r7, #2]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a684:	7bbb      	ldrb	r3, [r7, #14]
 800a686:	b29a      	uxth	r2, r3
 800a688:	89bb      	ldrh	r3, [r7, #12]
 800a68a:	4413      	add	r3, r2
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a692:	4619      	mov	r1, r3
 800a694:	2036      	movs	r0, #54	; 0x36
 800a696:	f7fb fa29 	bl	8005aec <pbuf_alloc>
 800a69a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 80b7 	beq.w	800a812 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	891a      	ldrh	r2, [r3, #8]
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	891b      	ldrh	r3, [r3, #8]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	887b      	ldrh	r3, [r7, #2]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	6858      	ldr	r0, [r3, #4]
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	7bbb      	ldrb	r3, [r7, #14]
 800a6c2:	18d1      	adds	r1, r2, r3
 800a6c4:	897b      	ldrh	r3, [r7, #10]
 800a6c6:	89ba      	ldrh	r2, [r7, #12]
 800a6c8:	f7fb feee 	bl	80064a8 <pbuf_copy_partial>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	89bb      	ldrh	r3, [r7, #12]
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	f040 809f 	bne.w	800a816 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	899b      	ldrh	r3, [r3, #12]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fa f989 	bl	80049f8 <lwip_htons>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	b2db      	uxtb	r3, r3
 800a6ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a6f4:	7efb      	ldrb	r3, [r7, #27]
 800a6f6:	f003 0308 	and.w	r3, r3, #8
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d007      	beq.n	800a70e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a6fe:	7efb      	ldrb	r3, [r7, #27]
 800a700:	f023 0308 	bic.w	r3, r3, #8
 800a704:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a706:	7ebb      	ldrb	r3, [r7, #26]
 800a708:	f043 0308 	orr.w	r3, r3, #8
 800a70c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a70e:	7efb      	ldrb	r3, [r7, #27]
 800a710:	f003 0301 	and.w	r3, r3, #1
 800a714:	2b00      	cmp	r3, #0
 800a716:	d007      	beq.n	800a728 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a718:	7efb      	ldrb	r3, [r7, #27]
 800a71a:	f023 0301 	bic.w	r3, r3, #1
 800a71e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a720:	7ebb      	ldrb	r3, [r7, #26]
 800a722:	f043 0301 	orr.w	r3, r3, #1
 800a726:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fa f977 	bl	8004a22 <lwip_htonl>
 800a734:	4602      	mov	r2, r0
 800a736:	887b      	ldrh	r3, [r7, #2]
 800a738:	18d1      	adds	r1, r2, r3
 800a73a:	7eba      	ldrb	r2, [r7, #26]
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	460b      	mov	r3, r1
 800a742:	6939      	ldr	r1, [r7, #16]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff fea7 	bl	800a498 <tcp_create_segment>
 800a74a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d063      	beq.n	800a81a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	4618      	mov	r0, r3
 800a758:	f7fb fd34 	bl	80061c4 <pbuf_clen>
 800a75c:	4603      	mov	r3, r0
 800a75e:	461a      	mov	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a766:	1a9b      	subs	r3, r3, r2
 800a768:	b29a      	uxth	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	6858      	ldr	r0, [r3, #4]
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	891a      	ldrh	r2, [r3, #8]
 800a77a:	89bb      	ldrh	r3, [r7, #12]
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	b29b      	uxth	r3, r3
 800a780:	4619      	mov	r1, r3
 800a782:	f7fb fb11 	bl	8005da8 <pbuf_realloc>
  useg->len -= remainder;
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	891a      	ldrh	r2, [r3, #8]
 800a78a:	89bb      	ldrh	r3, [r7, #12]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	b29a      	uxth	r2, r3
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	899b      	ldrh	r3, [r3, #12]
 800a79a:	b29c      	uxth	r4, r3
 800a79c:	7efb      	ldrb	r3, [r7, #27]
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7fa f929 	bl	80049f8 <lwip_htons>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	4322      	orrs	r2, r4
 800a7b0:	b292      	uxth	r2, r2
 800a7b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	685b      	ldr	r3, [r3, #4]
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7fb fd03 	bl	80061c4 <pbuf_clen>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7c8:	4413      	add	r3, r2
 800a7ca:	b29a      	uxth	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fb fcf4 	bl	80061c4 <pbuf_clen>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	461a      	mov	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a7e6:	4413      	add	r3, r2
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	69fa      	ldr	r2, [r7, #28]
 800a7fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a7fe:	69fb      	ldr	r3, [r7, #28]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	e016      	b.n	800a840 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a812:	bf00      	nop
 800a814:	e002      	b.n	800a81c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a816:	bf00      	nop
 800a818:	e000      	b.n	800a81c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a81a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d006      	beq.n	800a830 <tcp_split_unsent_seg+0x25c>
 800a822:	4b09      	ldr	r3, [pc, #36]	; (800a848 <tcp_split_unsent_seg+0x274>)
 800a824:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a828:	490d      	ldr	r1, [pc, #52]	; (800a860 <tcp_split_unsent_seg+0x28c>)
 800a82a:	4809      	ldr	r0, [pc, #36]	; (800a850 <tcp_split_unsent_seg+0x27c>)
 800a82c:	f004 fbe2 	bl	800eff4 <iprintf>
  if (p != NULL) {
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d002      	beq.n	800a83c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a836:	6938      	ldr	r0, [r7, #16]
 800a838:	f7fb fc3c 	bl	80060b4 <pbuf_free>
  }

  return ERR_MEM;
 800a83c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a840:	4618      	mov	r0, r3
 800a842:	3724      	adds	r7, #36	; 0x24
 800a844:	46bd      	mov	sp, r7
 800a846:	bd90      	pop	{r4, r7, pc}
 800a848:	08011890 	.word	0x08011890
 800a84c:	08011c24 	.word	0x08011c24
 800a850:	080118e4 	.word	0x080118e4
 800a854:	08011c48 	.word	0x08011c48
 800a858:	08011c6c 	.word	0x08011c6c
 800a85c:	08011c7c 	.word	0x08011c7c
 800a860:	08011c8c 	.word	0x08011c8c

0800a864 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a864:	b590      	push	{r4, r7, lr}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d106      	bne.n	800a880 <tcp_send_fin+0x1c>
 800a872:	4b21      	ldr	r3, [pc, #132]	; (800a8f8 <tcp_send_fin+0x94>)
 800a874:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a878:	4920      	ldr	r1, [pc, #128]	; (800a8fc <tcp_send_fin+0x98>)
 800a87a:	4821      	ldr	r0, [pc, #132]	; (800a900 <tcp_send_fin+0x9c>)
 800a87c:	f004 fbba 	bl	800eff4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a884:	2b00      	cmp	r3, #0
 800a886:	d02e      	beq.n	800a8e6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	e002      	b.n	800a896 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1f8      	bne.n	800a890 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	899b      	ldrh	r3, [r3, #12]
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7fa f8a6 	bl	80049f8 <lwip_htons>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	f003 0307 	and.w	r3, r3, #7
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d116      	bne.n	800a8e6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	899b      	ldrh	r3, [r3, #12]
 800a8be:	b29c      	uxth	r4, r3
 800a8c0:	2001      	movs	r0, #1
 800a8c2:	f7fa f899 	bl	80049f8 <lwip_htons>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	4322      	orrs	r2, r4
 800a8d0:	b292      	uxth	r2, r2
 800a8d2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	8b5b      	ldrh	r3, [r3, #26]
 800a8d8:	f043 0320 	orr.w	r3, r3, #32
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e004      	b.n	800a8f0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f80b 	bl	800a904 <tcp_enqueue_flags>
 800a8ee:	4603      	mov	r3, r0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd90      	pop	{r4, r7, pc}
 800a8f8:	08011890 	.word	0x08011890
 800a8fc:	08011c98 	.word	0x08011c98
 800a900:	080118e4 	.word	0x080118e4

0800a904 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08a      	sub	sp, #40	; 0x28
 800a908:	af02      	add	r7, sp, #8
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	460b      	mov	r3, r1
 800a90e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a918:	78fb      	ldrb	r3, [r7, #3]
 800a91a:	f003 0303 	and.w	r3, r3, #3
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d106      	bne.n	800a930 <tcp_enqueue_flags+0x2c>
 800a922:	4b67      	ldr	r3, [pc, #412]	; (800aac0 <tcp_enqueue_flags+0x1bc>)
 800a924:	f240 4211 	movw	r2, #1041	; 0x411
 800a928:	4966      	ldr	r1, [pc, #408]	; (800aac4 <tcp_enqueue_flags+0x1c0>)
 800a92a:	4867      	ldr	r0, [pc, #412]	; (800aac8 <tcp_enqueue_flags+0x1c4>)
 800a92c:	f004 fb62 	bl	800eff4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d106      	bne.n	800a944 <tcp_enqueue_flags+0x40>
 800a936:	4b62      	ldr	r3, [pc, #392]	; (800aac0 <tcp_enqueue_flags+0x1bc>)
 800a938:	f240 4213 	movw	r2, #1043	; 0x413
 800a93c:	4963      	ldr	r1, [pc, #396]	; (800aacc <tcp_enqueue_flags+0x1c8>)
 800a93e:	4862      	ldr	r0, [pc, #392]	; (800aac8 <tcp_enqueue_flags+0x1c4>)
 800a940:	f004 fb58 	bl	800eff4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	f003 0302 	and.w	r3, r3, #2
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a94e:	2301      	movs	r3, #1
 800a950:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a952:	7ffb      	ldrb	r3, [r7, #31]
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	b2db      	uxtb	r3, r3
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	b29b      	uxth	r3, r3
 800a962:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a966:	4619      	mov	r1, r3
 800a968:	2036      	movs	r0, #54	; 0x36
 800a96a:	f7fb f8bf 	bl	8005aec <pbuf_alloc>
 800a96e:	6138      	str	r0, [r7, #16]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d109      	bne.n	800a98a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	8b5b      	ldrh	r3, [r3, #26]
 800a97a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a97e:	b29a      	uxth	r2, r3
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	e095      	b.n	800aab6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	895a      	ldrh	r2, [r3, #10]
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
 800a990:	b29b      	uxth	r3, r3
 800a992:	429a      	cmp	r2, r3
 800a994:	d206      	bcs.n	800a9a4 <tcp_enqueue_flags+0xa0>
 800a996:	4b4a      	ldr	r3, [pc, #296]	; (800aac0 <tcp_enqueue_flags+0x1bc>)
 800a998:	f240 4239 	movw	r2, #1081	; 0x439
 800a99c:	494c      	ldr	r1, [pc, #304]	; (800aad0 <tcp_enqueue_flags+0x1cc>)
 800a99e:	484a      	ldr	r0, [pc, #296]	; (800aac8 <tcp_enqueue_flags+0x1c4>)
 800a9a0:	f004 fb28 	bl	800eff4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a9a8:	78fa      	ldrb	r2, [r7, #3]
 800a9aa:	7ffb      	ldrb	r3, [r7, #31]
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	6939      	ldr	r1, [r7, #16]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff fd70 	bl	800a498 <tcp_create_segment>
 800a9b8:	60f8      	str	r0, [r7, #12]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d109      	bne.n	800a9d4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	8b5b      	ldrh	r3, [r3, #26]
 800a9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d2:	e070      	b.n	800aab6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	f003 0303 	and.w	r3, r3, #3
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d006      	beq.n	800a9ee <tcp_enqueue_flags+0xea>
 800a9e0:	4b37      	ldr	r3, [pc, #220]	; (800aac0 <tcp_enqueue_flags+0x1bc>)
 800a9e2:	f240 4242 	movw	r2, #1090	; 0x442
 800a9e6:	493b      	ldr	r1, [pc, #236]	; (800aad4 <tcp_enqueue_flags+0x1d0>)
 800a9e8:	4837      	ldr	r0, [pc, #220]	; (800aac8 <tcp_enqueue_flags+0x1c4>)
 800a9ea:	f004 fb03 	bl	800eff4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	891b      	ldrh	r3, [r3, #8]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d006      	beq.n	800aa04 <tcp_enqueue_flags+0x100>
 800a9f6:	4b32      	ldr	r3, [pc, #200]	; (800aac0 <tcp_enqueue_flags+0x1bc>)
 800a9f8:	f240 4243 	movw	r2, #1091	; 0x443
 800a9fc:	4936      	ldr	r1, [pc, #216]	; (800aad8 <tcp_enqueue_flags+0x1d4>)
 800a9fe:	4832      	ldr	r0, [pc, #200]	; (800aac8 <tcp_enqueue_flags+0x1c4>)
 800aa00:	f004 faf8 	bl	800eff4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d103      	bne.n	800aa14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	66da      	str	r2, [r3, #108]	; 0x6c
 800aa12:	e00d      	b.n	800aa30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa18:	61bb      	str	r3, [r7, #24]
 800aa1a:	e002      	b.n	800aa22 <tcp_enqueue_flags+0x11e>
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	61bb      	str	r3, [r7, #24]
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1f8      	bne.n	800aa1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800aa38:	78fb      	ldrb	r3, [r7, #3]
 800aa3a:	f003 0302 	and.w	r3, r3, #2
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d104      	bne.n	800aa4c <tcp_enqueue_flags+0x148>
 800aa42:	78fb      	ldrb	r3, [r7, #3]
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d004      	beq.n	800aa56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800aa56:	78fb      	ldrb	r3, [r7, #3]
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d006      	beq.n	800aa6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	8b5b      	ldrh	r3, [r3, #26]
 800aa64:	f043 0320 	orr.w	r3, r3, #32
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fb fba6 	bl	80061c4 <pbuf_clen>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa82:	4413      	add	r3, r2
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00e      	beq.n	800aab4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d10a      	bne.n	800aab4 <tcp_enqueue_flags+0x1b0>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <tcp_enqueue_flags+0x1b0>
 800aaa6:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <tcp_enqueue_flags+0x1bc>)
 800aaa8:	f240 4265 	movw	r2, #1125	; 0x465
 800aaac:	490b      	ldr	r1, [pc, #44]	; (800aadc <tcp_enqueue_flags+0x1d8>)
 800aaae:	4806      	ldr	r0, [pc, #24]	; (800aac8 <tcp_enqueue_flags+0x1c4>)
 800aab0:	f004 faa0 	bl	800eff4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3720      	adds	r7, #32
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	08011890 	.word	0x08011890
 800aac4:	08011cb4 	.word	0x08011cb4
 800aac8:	080118e4 	.word	0x080118e4
 800aacc:	08011d0c 	.word	0x08011d0c
 800aad0:	08011d2c 	.word	0x08011d2c
 800aad4:	08011d68 	.word	0x08011d68
 800aad8:	08011d80 	.word	0x08011d80
 800aadc:	08011dac 	.word	0x08011dac

0800aae0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800aae0:	b5b0      	push	{r4, r5, r7, lr}
 800aae2:	b08a      	sub	sp, #40	; 0x28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d106      	bne.n	800aafc <tcp_output+0x1c>
 800aaee:	4b8a      	ldr	r3, [pc, #552]	; (800ad18 <tcp_output+0x238>)
 800aaf0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800aaf4:	4989      	ldr	r1, [pc, #548]	; (800ad1c <tcp_output+0x23c>)
 800aaf6:	488a      	ldr	r0, [pc, #552]	; (800ad20 <tcp_output+0x240>)
 800aaf8:	f004 fa7c 	bl	800eff4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7d1b      	ldrb	r3, [r3, #20]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d106      	bne.n	800ab12 <tcp_output+0x32>
 800ab04:	4b84      	ldr	r3, [pc, #528]	; (800ad18 <tcp_output+0x238>)
 800ab06:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ab0a:	4986      	ldr	r1, [pc, #536]	; (800ad24 <tcp_output+0x244>)
 800ab0c:	4884      	ldr	r0, [pc, #528]	; (800ad20 <tcp_output+0x240>)
 800ab0e:	f004 fa71 	bl	800eff4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ab12:	4b85      	ldr	r3, [pc, #532]	; (800ad28 <tcp_output+0x248>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d101      	bne.n	800ab20 <tcp_output+0x40>
    return ERR_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	e1ce      	b.n	800aebe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	bf28      	it	cs
 800ab30:	4613      	movcs	r3, r2
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10b      	bne.n	800ab5a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	8b5b      	ldrh	r3, [r3, #26]
 800ab46:	f003 0302 	and.w	r3, r3, #2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 81aa 	beq.w	800aea4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fdcb 	bl	800b6ec <tcp_send_empty_ack>
 800ab56:	4603      	mov	r3, r0
 800ab58:	e1b1      	b.n	800aebe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ab5a:	6879      	ldr	r1, [r7, #4]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	461a      	mov	r2, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7ff fc7c 	bl	800a460 <tcp_route>
 800ab68:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d102      	bne.n	800ab76 <tcp_output+0x96>
    return ERR_RTE;
 800ab70:	f06f 0303 	mvn.w	r3, #3
 800ab74:	e1a3      	b.n	800aebe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <tcp_output+0xa4>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d111      	bne.n	800aba8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <tcp_output+0xb0>
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	e000      	b.n	800ab92 <tcp_output+0xb2>
 800ab90:	2300      	movs	r3, #0
 800ab92:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d102      	bne.n	800aba0 <tcp_output+0xc0>
      return ERR_RTE;
 800ab9a:	f06f 0303 	mvn.w	r3, #3
 800ab9e:	e18e      	b.n	800aebe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800aba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7f9 ff37 	bl	8004a22 <lwip_htonl>
 800abb4:	4602      	mov	r2, r0
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abbe:	8912      	ldrh	r2, [r2, #8]
 800abc0:	4413      	add	r3, r2
 800abc2:	69ba      	ldr	r2, [r7, #24]
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d227      	bcs.n	800ac18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800abce:	461a      	mov	r2, r3
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d114      	bne.n	800ac00 <tcp_output+0x120>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d110      	bne.n	800ac00 <tcp_output+0x120>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d10b      	bne.n	800ac00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	8b5b      	ldrh	r3, [r3, #26]
 800ac04:	f003 0302 	and.w	r3, r3, #2
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 814d 	beq.w	800aea8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fd6c 	bl	800b6ec <tcp_send_empty_ack>
 800ac14:	4603      	mov	r3, r0
 800ac16:	e152      	b.n	800aebe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ac26:	6a3b      	ldr	r3, [r7, #32]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 811c 	beq.w	800ae66 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ac2e:	e002      	b.n	800ac36 <tcp_output+0x156>
 800ac30:	6a3b      	ldr	r3, [r7, #32]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	623b      	str	r3, [r7, #32]
 800ac36:	6a3b      	ldr	r3, [r7, #32]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1f8      	bne.n	800ac30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ac3e:	e112      	b.n	800ae66 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	899b      	ldrh	r3, [r3, #12]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7f9 fed5 	bl	80049f8 <lwip_htons>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	f003 0304 	and.w	r3, r3, #4
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d006      	beq.n	800ac68 <tcp_output+0x188>
 800ac5a:	4b2f      	ldr	r3, [pc, #188]	; (800ad18 <tcp_output+0x238>)
 800ac5c:	f240 5236 	movw	r2, #1334	; 0x536
 800ac60:	4932      	ldr	r1, [pc, #200]	; (800ad2c <tcp_output+0x24c>)
 800ac62:	482f      	ldr	r0, [pc, #188]	; (800ad20 <tcp_output+0x240>)
 800ac64:	f004 f9c6 	bl	800eff4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01f      	beq.n	800acb0 <tcp_output+0x1d0>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	8b5b      	ldrh	r3, [r3, #26]
 800ac74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d119      	bne.n	800acb0 <tcp_output+0x1d0>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00b      	beq.n	800ac9c <tcp_output+0x1bc>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d110      	bne.n	800acb0 <tcp_output+0x1d0>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac92:	891a      	ldrh	r2, [r3, #8]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d209      	bcs.n	800acb0 <tcp_output+0x1d0>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d004      	beq.n	800acb0 <tcp_output+0x1d0>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800acac:	2b08      	cmp	r3, #8
 800acae:	d901      	bls.n	800acb4 <tcp_output+0x1d4>
 800acb0:	2301      	movs	r3, #1
 800acb2:	e000      	b.n	800acb6 <tcp_output+0x1d6>
 800acb4:	2300      	movs	r3, #0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d106      	bne.n	800acc8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	8b5b      	ldrh	r3, [r3, #26]
 800acbe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 80e4 	beq.w	800ae90 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	7d1b      	ldrb	r3, [r3, #20]
 800accc:	2b02      	cmp	r3, #2
 800acce:	d00d      	beq.n	800acec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	899b      	ldrh	r3, [r3, #12]
 800acd6:	b29c      	uxth	r4, r3
 800acd8:	2010      	movs	r0, #16
 800acda:	f7f9 fe8d 	bl	80049f8 <lwip_htons>
 800acde:	4603      	mov	r3, r0
 800ace0:	461a      	mov	r2, r3
 800ace2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	4322      	orrs	r2, r4
 800ace8:	b292      	uxth	r2, r2
 800acea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acf2:	f000 f909 	bl	800af08 <tcp_output_segment>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800acfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d016      	beq.n	800ad30 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	8b5b      	ldrh	r3, [r3, #26]
 800ad06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	835a      	strh	r2, [r3, #26]
      return err;
 800ad10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad14:	e0d3      	b.n	800aebe <tcp_output+0x3de>
 800ad16:	bf00      	nop
 800ad18:	08011890 	.word	0x08011890
 800ad1c:	08011dd4 	.word	0x08011dd4
 800ad20:	080118e4 	.word	0x080118e4
 800ad24:	08011dec 	.word	0x08011dec
 800ad28:	200087b8 	.word	0x200087b8
 800ad2c:	08011e14 	.word	0x08011e14
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ad30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	7d1b      	ldrb	r3, [r3, #20]
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	d006      	beq.n	800ad4e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	8b5b      	ldrh	r3, [r3, #26]
 800ad44:	f023 0303 	bic.w	r3, r3, #3
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7f9 fe64 	bl	8004a22 <lwip_htonl>
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	891b      	ldrh	r3, [r3, #8]
 800ad60:	461d      	mov	r5, r3
 800ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	899b      	ldrh	r3, [r3, #12]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7f9 fe44 	bl	80049f8 <lwip_htons>
 800ad70:	4603      	mov	r3, r0
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	f003 0303 	and.w	r3, r3, #3
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <tcp_output+0x2a0>
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e000      	b.n	800ad82 <tcp_output+0x2a2>
 800ad80:	2300      	movs	r3, #0
 800ad82:	442b      	add	r3, r5
 800ad84:	4423      	add	r3, r4
 800ad86:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	da02      	bge.n	800ad9a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	891b      	ldrh	r3, [r3, #8]
 800ad9e:	461c      	mov	r4, r3
 800ada0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	899b      	ldrh	r3, [r3, #12]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7f9 fe25 	bl	80049f8 <lwip_htons>
 800adae:	4603      	mov	r3, r0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <tcp_output+0x2de>
 800adba:	2301      	movs	r3, #1
 800adbc:	e000      	b.n	800adc0 <tcp_output+0x2e0>
 800adbe:	2300      	movs	r3, #0
 800adc0:	4423      	add	r3, r4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d049      	beq.n	800ae5a <tcp_output+0x37a>
      seg->next = NULL;
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add0:	2b00      	cmp	r3, #0
 800add2:	d105      	bne.n	800ade0 <tcp_output+0x300>
        pcb->unacked = seg;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800add8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	623b      	str	r3, [r7, #32]
 800adde:	e03f      	b.n	800ae60 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ade0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade2:	68db      	ldr	r3, [r3, #12]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f9 fe1b 	bl	8004a22 <lwip_htonl>
 800adec:	4604      	mov	r4, r0
 800adee:	6a3b      	ldr	r3, [r7, #32]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7f9 fe14 	bl	8004a22 <lwip_htonl>
 800adfa:	4603      	mov	r3, r0
 800adfc:	1ae3      	subs	r3, r4, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	da24      	bge.n	800ae4c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3370      	adds	r3, #112	; 0x70
 800ae06:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ae08:	e002      	b.n	800ae10 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d011      	beq.n	800ae3c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7f9 fdfe 	bl	8004a22 <lwip_htonl>
 800ae26:	4604      	mov	r4, r0
 800ae28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7f9 fdf7 	bl	8004a22 <lwip_htonl>
 800ae34:	4603      	mov	r3, r0
 800ae36:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	dbe6      	blt.n	800ae0a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ae44:	69fb      	ldr	r3, [r7, #28]
 800ae46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	e009      	b.n	800ae60 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae50:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	623b      	str	r3, [r7, #32]
 800ae58:	e002      	b.n	800ae60 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ae5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae5c:	f7fc fc3f 	bl	80076de <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae64:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d012      	beq.n	800ae92 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ae6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7f9 fdd5 	bl	8004a22 <lwip_htonl>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae7e:	1ad3      	subs	r3, r2, r3
 800ae80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae82:	8912      	ldrh	r2, [r2, #8]
 800ae84:	4413      	add	r3, r2
  while (seg != NULL &&
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	f4bf aed9 	bcs.w	800ac40 <tcp_output+0x160>
 800ae8e:	e000      	b.n	800ae92 <tcp_output+0x3b2>
      break;
 800ae90:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d108      	bne.n	800aeac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800aea2:	e004      	b.n	800aeae <tcp_output+0x3ce>
    goto output_done;
 800aea4:	bf00      	nop
 800aea6:	e002      	b.n	800aeae <tcp_output+0x3ce>
    goto output_done;
 800aea8:	bf00      	nop
 800aeaa:	e000      	b.n	800aeae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800aeac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	8b5b      	ldrh	r3, [r3, #26]
 800aeb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3728      	adds	r7, #40	; 0x28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bdb0      	pop	{r4, r5, r7, pc}
 800aec6:	bf00      	nop

0800aec8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d106      	bne.n	800aee4 <tcp_output_segment_busy+0x1c>
 800aed6:	4b09      	ldr	r3, [pc, #36]	; (800aefc <tcp_output_segment_busy+0x34>)
 800aed8:	f240 529a 	movw	r2, #1434	; 0x59a
 800aedc:	4908      	ldr	r1, [pc, #32]	; (800af00 <tcp_output_segment_busy+0x38>)
 800aede:	4809      	ldr	r0, [pc, #36]	; (800af04 <tcp_output_segment_busy+0x3c>)
 800aee0:	f004 f888 	bl	800eff4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	7b9b      	ldrb	r3, [r3, #14]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d001      	beq.n	800aef2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	08011890 	.word	0x08011890
 800af00:	08011e2c 	.word	0x08011e2c
 800af04:	080118e4 	.word	0x080118e4

0800af08 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800af08:	b5b0      	push	{r4, r5, r7, lr}
 800af0a:	b08c      	sub	sp, #48	; 0x30
 800af0c:	af04      	add	r7, sp, #16
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d106      	bne.n	800af28 <tcp_output_segment+0x20>
 800af1a:	4b64      	ldr	r3, [pc, #400]	; (800b0ac <tcp_output_segment+0x1a4>)
 800af1c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800af20:	4963      	ldr	r1, [pc, #396]	; (800b0b0 <tcp_output_segment+0x1a8>)
 800af22:	4864      	ldr	r0, [pc, #400]	; (800b0b4 <tcp_output_segment+0x1ac>)
 800af24:	f004 f866 	bl	800eff4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d106      	bne.n	800af3c <tcp_output_segment+0x34>
 800af2e:	4b5f      	ldr	r3, [pc, #380]	; (800b0ac <tcp_output_segment+0x1a4>)
 800af30:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800af34:	4960      	ldr	r1, [pc, #384]	; (800b0b8 <tcp_output_segment+0x1b0>)
 800af36:	485f      	ldr	r0, [pc, #380]	; (800b0b4 <tcp_output_segment+0x1ac>)
 800af38:	f004 f85c 	bl	800eff4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d106      	bne.n	800af50 <tcp_output_segment+0x48>
 800af42:	4b5a      	ldr	r3, [pc, #360]	; (800b0ac <tcp_output_segment+0x1a4>)
 800af44:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800af48:	495c      	ldr	r1, [pc, #368]	; (800b0bc <tcp_output_segment+0x1b4>)
 800af4a:	485a      	ldr	r0, [pc, #360]	; (800b0b4 <tcp_output_segment+0x1ac>)
 800af4c:	f004 f852 	bl	800eff4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff ffb9 	bl	800aec8 <tcp_output_segment_busy>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	e0a1      	b.n	800b0a4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	68dc      	ldr	r4, [r3, #12]
 800af68:	4610      	mov	r0, r2
 800af6a:	f7f9 fd5a 	bl	8004a22 <lwip_htonl>
 800af6e:	4603      	mov	r3, r0
 800af70:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	68dc      	ldr	r4, [r3, #12]
 800af7a:	4610      	mov	r0, r2
 800af7c:	f7f9 fd3c 	bl	80049f8 <lwip_htons>
 800af80:	4603      	mov	r3, r0
 800af82:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800af8c:	441a      	add	r2, r3
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	3314      	adds	r3, #20
 800af98:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	7a9b      	ldrb	r3, [r3, #10]
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d015      	beq.n	800afd2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	3304      	adds	r3, #4
 800afaa:	461a      	mov	r2, r3
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	f44f 7006 	mov.w	r0, #536	; 0x218
 800afb2:	f7fc fe8b 	bl	8007ccc <tcp_eff_send_mss_netif>
 800afb6:	4603      	mov	r3, r0
 800afb8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800afba:	8b7b      	ldrh	r3, [r7, #26]
 800afbc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7f9 fd2e 	bl	8004a22 <lwip_htonl>
 800afc6:	4602      	mov	r2, r0
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	601a      	str	r2, [r3, #0]
    opts += 1;
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	3304      	adds	r3, #4
 800afd0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800afd8:	2b00      	cmp	r3, #0
 800afda:	da02      	bge.n	800afe2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	2200      	movs	r2, #0
 800afe0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10c      	bne.n	800b004 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800afea:	4b35      	ldr	r3, [pc, #212]	; (800b0c0 <tcp_output_segment+0x1b8>)
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	4618      	mov	r0, r3
 800affa:	f7f9 fd12 	bl	8004a22 <lwip_htonl>
 800affe:	4602      	mov	r2, r0
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	68da      	ldr	r2, [r3, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	8959      	ldrh	r1, [r3, #10]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	8b3a      	ldrh	r2, [r7, #24]
 800b01e:	1a8a      	subs	r2, r1, r2
 800b020:	b292      	uxth	r2, r2
 800b022:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	8919      	ldrh	r1, [r3, #8]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	8b3a      	ldrh	r2, [r7, #24]
 800b030:	1a8a      	subs	r2, r1, r2
 800b032:	b292      	uxth	r2, r2
 800b034:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	68d2      	ldr	r2, [r2, #12]
 800b03e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	741a      	strb	r2, [r3, #16]
 800b048:	2200      	movs	r2, #0
 800b04a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	68da      	ldr	r2, [r3, #12]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	7a9b      	ldrb	r3, [r3, #10]
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d001      	beq.n	800b060 <tcp_output_segment+0x158>
 800b05c:	2318      	movs	r3, #24
 800b05e:	e000      	b.n	800b062 <tcp_output_segment+0x15a>
 800b060:	2314      	movs	r3, #20
 800b062:	4413      	add	r3, r2
 800b064:	69fa      	ldr	r2, [r7, #28]
 800b066:	429a      	cmp	r2, r3
 800b068:	d006      	beq.n	800b078 <tcp_output_segment+0x170>
 800b06a:	4b10      	ldr	r3, [pc, #64]	; (800b0ac <tcp_output_segment+0x1a4>)
 800b06c:	f240 621c 	movw	r2, #1564	; 0x61c
 800b070:	4914      	ldr	r1, [pc, #80]	; (800b0c4 <tcp_output_segment+0x1bc>)
 800b072:	4810      	ldr	r0, [pc, #64]	; (800b0b4 <tcp_output_segment+0x1ac>)
 800b074:	f003 ffbe 	bl	800eff4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	6858      	ldr	r0, [r3, #4]
 800b07c:	68b9      	ldr	r1, [r7, #8]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	1d1c      	adds	r4, r3, #4
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	7add      	ldrb	r5, [r3, #11]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	7a9b      	ldrb	r3, [r3, #10]
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	9202      	str	r2, [sp, #8]
 800b08e:	2206      	movs	r2, #6
 800b090:	9201      	str	r2, [sp, #4]
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	462b      	mov	r3, r5
 800b096:	4622      	mov	r2, r4
 800b098:	f002 fdee 	bl	800dc78 <ip4_output_if>
 800b09c:	4603      	mov	r3, r0
 800b09e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b0a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3720      	adds	r7, #32
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b0ac:	08011890 	.word	0x08011890
 800b0b0:	08011e54 	.word	0x08011e54
 800b0b4:	080118e4 	.word	0x080118e4
 800b0b8:	08011e74 	.word	0x08011e74
 800b0bc:	08011e94 	.word	0x08011e94
 800b0c0:	2000876c 	.word	0x2000876c
 800b0c4:	08011eb8 	.word	0x08011eb8

0800b0c8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b0c8:	b5b0      	push	{r4, r5, r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d106      	bne.n	800b0e4 <tcp_rexmit_rto_prepare+0x1c>
 800b0d6:	4b31      	ldr	r3, [pc, #196]	; (800b19c <tcp_rexmit_rto_prepare+0xd4>)
 800b0d8:	f240 6263 	movw	r2, #1635	; 0x663
 800b0dc:	4930      	ldr	r1, [pc, #192]	; (800b1a0 <tcp_rexmit_rto_prepare+0xd8>)
 800b0de:	4831      	ldr	r0, [pc, #196]	; (800b1a4 <tcp_rexmit_rto_prepare+0xdc>)
 800b0e0:	f003 ff88 	bl	800eff4 <iprintf>

  if (pcb->unacked == NULL) {
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d102      	bne.n	800b0f2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b0ec:	f06f 0305 	mvn.w	r3, #5
 800b0f0:	e050      	b.n	800b194 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f6:	60fb      	str	r3, [r7, #12]
 800b0f8:	e00b      	b.n	800b112 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f7ff fee4 	bl	800aec8 <tcp_output_segment_busy>
 800b100:	4603      	mov	r3, r0
 800b102:	2b00      	cmp	r3, #0
 800b104:	d002      	beq.n	800b10c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b106:	f06f 0305 	mvn.w	r3, #5
 800b10a:	e043      	b.n	800b194 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1ef      	bne.n	800b0fa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff fed4 	bl	800aec8 <tcp_output_segment_busy>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b126:	f06f 0305 	mvn.w	r3, #5
 800b12a:	e033      	b.n	800b194 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	8b5b      	ldrh	r3, [r3, #26]
 800b146:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	4618      	mov	r0, r3
 800b158:	f7f9 fc63 	bl	8004a22 <lwip_htonl>
 800b15c:	4604      	mov	r4, r0
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	891b      	ldrh	r3, [r3, #8]
 800b162:	461d      	mov	r5, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	899b      	ldrh	r3, [r3, #12]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7f9 fc43 	bl	80049f8 <lwip_htons>
 800b172:	4603      	mov	r3, r0
 800b174:	b2db      	uxtb	r3, r3
 800b176:	f003 0303 	and.w	r3, r3, #3
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d001      	beq.n	800b182 <tcp_rexmit_rto_prepare+0xba>
 800b17e:	2301      	movs	r3, #1
 800b180:	e000      	b.n	800b184 <tcp_rexmit_rto_prepare+0xbc>
 800b182:	2300      	movs	r3, #0
 800b184:	442b      	add	r3, r5
 800b186:	18e2      	adds	r2, r4, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3710      	adds	r7, #16
 800b198:	46bd      	mov	sp, r7
 800b19a:	bdb0      	pop	{r4, r5, r7, pc}
 800b19c:	08011890 	.word	0x08011890
 800b1a0:	08011ecc 	.word	0x08011ecc
 800b1a4:	080118e4 	.word	0x080118e4

0800b1a8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <tcp_rexmit_rto_commit+0x1c>
 800b1b6:	4b0d      	ldr	r3, [pc, #52]	; (800b1ec <tcp_rexmit_rto_commit+0x44>)
 800b1b8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b1bc:	490c      	ldr	r1, [pc, #48]	; (800b1f0 <tcp_rexmit_rto_commit+0x48>)
 800b1be:	480d      	ldr	r0, [pc, #52]	; (800b1f4 <tcp_rexmit_rto_commit+0x4c>)
 800b1c0:	f003 ff18 	bl	800eff4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1ca:	2bff      	cmp	r3, #255	; 0xff
 800b1cc:	d007      	beq.n	800b1de <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f7ff fc7e 	bl	800aae0 <tcp_output>
}
 800b1e4:	bf00      	nop
 800b1e6:	3708      	adds	r7, #8
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	08011890 	.word	0x08011890
 800b1f0:	08011ef0 	.word	0x08011ef0
 800b1f4:	080118e4 	.word	0x080118e4

0800b1f8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <tcp_rexmit_rto+0x1c>
 800b206:	4b0a      	ldr	r3, [pc, #40]	; (800b230 <tcp_rexmit_rto+0x38>)
 800b208:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b20c:	4909      	ldr	r1, [pc, #36]	; (800b234 <tcp_rexmit_rto+0x3c>)
 800b20e:	480a      	ldr	r0, [pc, #40]	; (800b238 <tcp_rexmit_rto+0x40>)
 800b210:	f003 fef0 	bl	800eff4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff ff57 	bl	800b0c8 <tcp_rexmit_rto_prepare>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d102      	bne.n	800b226 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f7ff ffc1 	bl	800b1a8 <tcp_rexmit_rto_commit>
  }
}
 800b226:	bf00      	nop
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	08011890 	.word	0x08011890
 800b234:	08011f14 	.word	0x08011f14
 800b238:	080118e4 	.word	0x080118e4

0800b23c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b23c:	b590      	push	{r4, r7, lr}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d106      	bne.n	800b258 <tcp_rexmit+0x1c>
 800b24a:	4b2f      	ldr	r3, [pc, #188]	; (800b308 <tcp_rexmit+0xcc>)
 800b24c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b250:	492e      	ldr	r1, [pc, #184]	; (800b30c <tcp_rexmit+0xd0>)
 800b252:	482f      	ldr	r0, [pc, #188]	; (800b310 <tcp_rexmit+0xd4>)
 800b254:	f003 fece 	bl	800eff4 <iprintf>

  if (pcb->unacked == NULL) {
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d102      	bne.n	800b266 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b260:	f06f 0305 	mvn.w	r3, #5
 800b264:	e04c      	b.n	800b300 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b26c:	68b8      	ldr	r0, [r7, #8]
 800b26e:	f7ff fe2b 	bl	800aec8 <tcp_output_segment_busy>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b278:	f06f 0305 	mvn.w	r3, #5
 800b27c:	e040      	b.n	800b300 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	336c      	adds	r3, #108	; 0x6c
 800b28a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b28c:	e002      	b.n	800b294 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d011      	beq.n	800b2c0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7f9 fbbc 	bl	8004a22 <lwip_htonl>
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7f9 fbb5 	bl	8004a22 <lwip_htonl>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	dbe6      	blt.n	800b28e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d103      	bne.n	800b2de <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2e4:	2bff      	cmp	r3, #255	; 0xff
 800b2e6:	d007      	beq.n	800b2f8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	bd90      	pop	{r4, r7, pc}
 800b308:	08011890 	.word	0x08011890
 800b30c:	08011f30 	.word	0x08011f30
 800b310:	080118e4 	.word	0x080118e4

0800b314 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d106      	bne.n	800b330 <tcp_rexmit_fast+0x1c>
 800b322:	4b2a      	ldr	r3, [pc, #168]	; (800b3cc <tcp_rexmit_fast+0xb8>)
 800b324:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b328:	4929      	ldr	r1, [pc, #164]	; (800b3d0 <tcp_rexmit_fast+0xbc>)
 800b32a:	482a      	ldr	r0, [pc, #168]	; (800b3d4 <tcp_rexmit_fast+0xc0>)
 800b32c:	f003 fe62 	bl	800eff4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b334:	2b00      	cmp	r3, #0
 800b336:	d044      	beq.n	800b3c2 <tcp_rexmit_fast+0xae>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	8b5b      	ldrh	r3, [r3, #26]
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	d13e      	bne.n	800b3c2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f7ff ff79 	bl	800b23c <tcp_rexmit>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d138      	bne.n	800b3c2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b35c:	4293      	cmp	r3, r2
 800b35e:	bf28      	it	cs
 800b360:	4613      	movcs	r3, r2
 800b362:	b29b      	uxth	r3, r3
 800b364:	0fda      	lsrs	r2, r3, #31
 800b366:	4413      	add	r3, r2
 800b368:	105b      	asrs	r3, r3, #1
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b378:	461a      	mov	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	429a      	cmp	r2, r3
 800b382:	d206      	bcs.n	800b392 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b388:	005b      	lsls	r3, r3, #1
 800b38a:	b29a      	uxth	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b39c:	4619      	mov	r1, r3
 800b39e:	0049      	lsls	r1, r1, #1
 800b3a0:	440b      	add	r3, r1
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	4413      	add	r3, r2
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	8b5b      	ldrh	r3, [r3, #26]
 800b3b2:	f043 0304 	orr.w	r3, r3, #4
 800b3b6:	b29a      	uxth	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b3c2:	bf00      	nop
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	08011890 	.word	0x08011890
 800b3d0:	08011f48 	.word	0x08011f48
 800b3d4:	080118e4 	.word	0x080118e4

0800b3d8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	607b      	str	r3, [r7, #4]
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	817b      	strh	r3, [r7, #10]
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b3ea:	897a      	ldrh	r2, [r7, #10]
 800b3ec:	893b      	ldrh	r3, [r7, #8]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	3314      	adds	r3, #20
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	2022      	movs	r0, #34	; 0x22
 800b3fe:	f7fa fb75 	bl	8005aec <pbuf_alloc>
 800b402:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d04d      	beq.n	800b4a6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b40a:	897b      	ldrh	r3, [r7, #10]
 800b40c:	3313      	adds	r3, #19
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	8952      	ldrh	r2, [r2, #10]
 800b412:	4293      	cmp	r3, r2
 800b414:	db06      	blt.n	800b424 <tcp_output_alloc_header_common+0x4c>
 800b416:	4b26      	ldr	r3, [pc, #152]	; (800b4b0 <tcp_output_alloc_header_common+0xd8>)
 800b418:	f240 7223 	movw	r2, #1827	; 0x723
 800b41c:	4925      	ldr	r1, [pc, #148]	; (800b4b4 <tcp_output_alloc_header_common+0xdc>)
 800b41e:	4826      	ldr	r0, [pc, #152]	; (800b4b8 <tcp_output_alloc_header_common+0xe0>)
 800b420:	f003 fde8 	bl	800eff4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b42a:	8c3b      	ldrh	r3, [r7, #32]
 800b42c:	4618      	mov	r0, r3
 800b42e:	f7f9 fae3 	bl	80049f8 <lwip_htons>
 800b432:	4603      	mov	r3, r0
 800b434:	461a      	mov	r2, r3
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b43a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b43c:	4618      	mov	r0, r3
 800b43e:	f7f9 fadb 	bl	80049f8 <lwip_htons>
 800b442:	4603      	mov	r3, r0
 800b444:	461a      	mov	r2, r3
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7f9 fae6 	bl	8004a22 <lwip_htonl>
 800b456:	4602      	mov	r2, r0
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b45c:	897b      	ldrh	r3, [r7, #10]
 800b45e:	089b      	lsrs	r3, r3, #2
 800b460:	b29b      	uxth	r3, r3
 800b462:	3305      	adds	r3, #5
 800b464:	b29b      	uxth	r3, r3
 800b466:	031b      	lsls	r3, r3, #12
 800b468:	b29a      	uxth	r2, r3
 800b46a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b46e:	b29b      	uxth	r3, r3
 800b470:	4313      	orrs	r3, r2
 800b472:	b29b      	uxth	r3, r3
 800b474:	4618      	mov	r0, r3
 800b476:	f7f9 fabf 	bl	80049f8 <lwip_htons>
 800b47a:	4603      	mov	r3, r0
 800b47c:	461a      	mov	r2, r3
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b482:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b484:	4618      	mov	r0, r3
 800b486:	f7f9 fab7 	bl	80049f8 <lwip_htons>
 800b48a:	4603      	mov	r3, r0
 800b48c:	461a      	mov	r2, r3
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	2200      	movs	r2, #0
 800b496:	741a      	strb	r2, [r3, #16]
 800b498:	2200      	movs	r2, #0
 800b49a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	749a      	strb	r2, [r3, #18]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b4a6:	697b      	ldr	r3, [r7, #20]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	08011890 	.word	0x08011890
 800b4b4:	08011f68 	.word	0x08011f68
 800b4b8:	080118e4 	.word	0x080118e4

0800b4bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b4bc:	b5b0      	push	{r4, r5, r7, lr}
 800b4be:	b08a      	sub	sp, #40	; 0x28
 800b4c0:	af04      	add	r7, sp, #16
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	607b      	str	r3, [r7, #4]
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	817b      	strh	r3, [r7, #10]
 800b4ca:	4613      	mov	r3, r2
 800b4cc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d106      	bne.n	800b4e2 <tcp_output_alloc_header+0x26>
 800b4d4:	4b15      	ldr	r3, [pc, #84]	; (800b52c <tcp_output_alloc_header+0x70>)
 800b4d6:	f240 7242 	movw	r2, #1858	; 0x742
 800b4da:	4915      	ldr	r1, [pc, #84]	; (800b530 <tcp_output_alloc_header+0x74>)
 800b4dc:	4815      	ldr	r0, [pc, #84]	; (800b534 <tcp_output_alloc_header+0x78>)
 800b4de:	f003 fd89 	bl	800eff4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	8adb      	ldrh	r3, [r3, #22]
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	8b12      	ldrh	r2, [r2, #24]
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b4f2:	893d      	ldrh	r5, [r7, #8]
 800b4f4:	897c      	ldrh	r4, [r7, #10]
 800b4f6:	9103      	str	r1, [sp, #12]
 800b4f8:	2110      	movs	r1, #16
 800b4fa:	9102      	str	r1, [sp, #8]
 800b4fc:	9201      	str	r2, [sp, #4]
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	462a      	mov	r2, r5
 800b504:	4621      	mov	r1, r4
 800b506:	f7ff ff67 	bl	800b3d8 <tcp_output_alloc_header_common>
 800b50a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b51a:	441a      	add	r2, r3
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b520:	697b      	ldr	r3, [r7, #20]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bdb0      	pop	{r4, r5, r7, pc}
 800b52a:	bf00      	nop
 800b52c:	08011890 	.word	0x08011890
 800b530:	08011f98 	.word	0x08011f98
 800b534:	080118e4 	.word	0x080118e4

0800b538 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b088      	sub	sp, #32
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	4611      	mov	r1, r2
 800b544:	461a      	mov	r2, r3
 800b546:	460b      	mov	r3, r1
 800b548:	71fb      	strb	r3, [r7, #7]
 800b54a:	4613      	mov	r3, r2
 800b54c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d106      	bne.n	800b566 <tcp_output_fill_options+0x2e>
 800b558:	4b12      	ldr	r3, [pc, #72]	; (800b5a4 <tcp_output_fill_options+0x6c>)
 800b55a:	f240 7256 	movw	r2, #1878	; 0x756
 800b55e:	4912      	ldr	r1, [pc, #72]	; (800b5a8 <tcp_output_fill_options+0x70>)
 800b560:	4812      	ldr	r0, [pc, #72]	; (800b5ac <tcp_output_fill_options+0x74>)
 800b562:	f003 fd47 	bl	800eff4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	3314      	adds	r3, #20
 800b570:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b572:	8bfb      	ldrh	r3, [r7, #30]
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	461a      	mov	r2, r3
 800b578:	79fb      	ldrb	r3, [r7, #7]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	f003 0304 	and.w	r3, r3, #4
 800b580:	4413      	add	r3, r2
 800b582:	3314      	adds	r3, #20
 800b584:	69ba      	ldr	r2, [r7, #24]
 800b586:	4413      	add	r3, r2
 800b588:	697a      	ldr	r2, [r7, #20]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d006      	beq.n	800b59c <tcp_output_fill_options+0x64>
 800b58e:	4b05      	ldr	r3, [pc, #20]	; (800b5a4 <tcp_output_fill_options+0x6c>)
 800b590:	f240 7275 	movw	r2, #1909	; 0x775
 800b594:	4906      	ldr	r1, [pc, #24]	; (800b5b0 <tcp_output_fill_options+0x78>)
 800b596:	4805      	ldr	r0, [pc, #20]	; (800b5ac <tcp_output_fill_options+0x74>)
 800b598:	f003 fd2c 	bl	800eff4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b59c:	bf00      	nop
 800b59e:	3720      	adds	r7, #32
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	08011890 	.word	0x08011890
 800b5a8:	08011fc0 	.word	0x08011fc0
 800b5ac:	080118e4 	.word	0x080118e4
 800b5b0:	08011eb8 	.word	0x08011eb8

0800b5b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b08a      	sub	sp, #40	; 0x28
 800b5b8:	af04      	add	r7, sp, #16
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d106      	bne.n	800b5d6 <tcp_output_control_segment+0x22>
 800b5c8:	4b1c      	ldr	r3, [pc, #112]	; (800b63c <tcp_output_control_segment+0x88>)
 800b5ca:	f240 7287 	movw	r2, #1927	; 0x787
 800b5ce:	491c      	ldr	r1, [pc, #112]	; (800b640 <tcp_output_control_segment+0x8c>)
 800b5d0:	481c      	ldr	r0, [pc, #112]	; (800b644 <tcp_output_control_segment+0x90>)
 800b5d2:	f003 fd0f 	bl	800eff4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	6879      	ldr	r1, [r7, #4]
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f7fe ff40 	bl	800a460 <tcp_route>
 800b5e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d102      	bne.n	800b5ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b5e8:	23fc      	movs	r3, #252	; 0xfc
 800b5ea:	75fb      	strb	r3, [r7, #23]
 800b5ec:	e01c      	b.n	800b628 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d006      	beq.n	800b602 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	7adb      	ldrb	r3, [r3, #11]
 800b5f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	7a9b      	ldrb	r3, [r3, #10]
 800b5fe:	757b      	strb	r3, [r7, #21]
 800b600:	e003      	b.n	800b60a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b602:	23ff      	movs	r3, #255	; 0xff
 800b604:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b60a:	7dba      	ldrb	r2, [r7, #22]
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	9302      	str	r3, [sp, #8]
 800b610:	2306      	movs	r3, #6
 800b612:	9301      	str	r3, [sp, #4]
 800b614:	7d7b      	ldrb	r3, [r7, #21]
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	4613      	mov	r3, r2
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	68b8      	ldr	r0, [r7, #8]
 800b620:	f002 fb2a 	bl	800dc78 <ip4_output_if>
 800b624:	4603      	mov	r3, r0
 800b626:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b628:	68b8      	ldr	r0, [r7, #8]
 800b62a:	f7fa fd43 	bl	80060b4 <pbuf_free>
  return err;
 800b62e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3718      	adds	r7, #24
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	08011890 	.word	0x08011890
 800b640:	08011fe8 	.word	0x08011fe8
 800b644:	080118e4 	.word	0x080118e4

0800b648 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b648:	b590      	push	{r4, r7, lr}
 800b64a:	b08b      	sub	sp, #44	; 0x2c
 800b64c:	af04      	add	r7, sp, #16
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	60b9      	str	r1, [r7, #8]
 800b652:	607a      	str	r2, [r7, #4]
 800b654:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d106      	bne.n	800b66a <tcp_rst+0x22>
 800b65c:	4b1f      	ldr	r3, [pc, #124]	; (800b6dc <tcp_rst+0x94>)
 800b65e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b662:	491f      	ldr	r1, [pc, #124]	; (800b6e0 <tcp_rst+0x98>)
 800b664:	481f      	ldr	r0, [pc, #124]	; (800b6e4 <tcp_rst+0x9c>)
 800b666:	f003 fcc5 	bl	800eff4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d106      	bne.n	800b67e <tcp_rst+0x36>
 800b670:	4b1a      	ldr	r3, [pc, #104]	; (800b6dc <tcp_rst+0x94>)
 800b672:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b676:	491c      	ldr	r1, [pc, #112]	; (800b6e8 <tcp_rst+0xa0>)
 800b678:	481a      	ldr	r0, [pc, #104]	; (800b6e4 <tcp_rst+0x9c>)
 800b67a:	f003 fcbb 	bl	800eff4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b67e:	2300      	movs	r3, #0
 800b680:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b682:	f246 0308 	movw	r3, #24584	; 0x6008
 800b686:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b688:	7dfb      	ldrb	r3, [r7, #23]
 800b68a:	b29c      	uxth	r4, r3
 800b68c:	68b8      	ldr	r0, [r7, #8]
 800b68e:	f7f9 f9c8 	bl	8004a22 <lwip_htonl>
 800b692:	4602      	mov	r2, r0
 800b694:	8abb      	ldrh	r3, [r7, #20]
 800b696:	9303      	str	r3, [sp, #12]
 800b698:	2314      	movs	r3, #20
 800b69a:	9302      	str	r3, [sp, #8]
 800b69c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b69e:	9301      	str	r3, [sp, #4]
 800b6a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff fe94 	bl	800b3d8 <tcp_output_alloc_header_common>
 800b6b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00c      	beq.n	800b6d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b6b8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	6939      	ldr	r1, [r7, #16]
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f7ff ff3a 	bl	800b538 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	6939      	ldr	r1, [r7, #16]
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f7ff ff72 	bl	800b5b4 <tcp_output_control_segment>
 800b6d0:	e000      	b.n	800b6d4 <tcp_rst+0x8c>
    return;
 800b6d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b6d4:	371c      	adds	r7, #28
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd90      	pop	{r4, r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08011890 	.word	0x08011890
 800b6e0:	08012014 	.word	0x08012014
 800b6e4:	080118e4 	.word	0x080118e4
 800b6e8:	08012030 	.word	0x08012030

0800b6ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b6ec:	b590      	push	{r4, r7, lr}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d106      	bne.n	800b710 <tcp_send_empty_ack+0x24>
 800b702:	4b28      	ldr	r3, [pc, #160]	; (800b7a4 <tcp_send_empty_ack+0xb8>)
 800b704:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b708:	4927      	ldr	r1, [pc, #156]	; (800b7a8 <tcp_send_empty_ack+0xbc>)
 800b70a:	4828      	ldr	r0, [pc, #160]	; (800b7ac <tcp_send_empty_ack+0xc0>)
 800b70c:	f003 fc72 	bl	800eff4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b710:	7dfb      	ldrb	r3, [r7, #23]
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	b2db      	uxtb	r3, r3
 800b716:	f003 0304 	and.w	r3, r3, #4
 800b71a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b71c:	7d7b      	ldrb	r3, [r7, #21]
 800b71e:	b29c      	uxth	r4, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b724:	4618      	mov	r0, r3
 800b726:	f7f9 f97c 	bl	8004a22 <lwip_htonl>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2200      	movs	r2, #0
 800b72e:	4621      	mov	r1, r4
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f7ff fec3 	bl	800b4bc <tcp_output_alloc_header>
 800b736:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d109      	bne.n	800b752 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	8b5b      	ldrh	r3, [r3, #26]
 800b742:	f043 0303 	orr.w	r3, r3, #3
 800b746:	b29a      	uxth	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b74c:	f06f 0301 	mvn.w	r3, #1
 800b750:	e023      	b.n	800b79a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b752:	7dbb      	ldrb	r3, [r7, #22]
 800b754:	7dfa      	ldrb	r2, [r7, #23]
 800b756:	6939      	ldr	r1, [r7, #16]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f7ff feed 	bl	800b538 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3304      	adds	r3, #4
 800b764:	6939      	ldr	r1, [r7, #16]
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff ff24 	bl	800b5b4 <tcp_output_control_segment>
 800b76c:	4603      	mov	r3, r0
 800b76e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d007      	beq.n	800b788 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	8b5b      	ldrh	r3, [r3, #26]
 800b77c:	f043 0303 	orr.w	r3, r3, #3
 800b780:	b29a      	uxth	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	835a      	strh	r2, [r3, #26]
 800b786:	e006      	b.n	800b796 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	8b5b      	ldrh	r3, [r3, #26]
 800b78c:	f023 0303 	bic.w	r3, r3, #3
 800b790:	b29a      	uxth	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b796:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	371c      	adds	r7, #28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd90      	pop	{r4, r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	08011890 	.word	0x08011890
 800b7a8:	0801204c 	.word	0x0801204c
 800b7ac:	080118e4 	.word	0x080118e4

0800b7b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b7b0:	b590      	push	{r4, r7, lr}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d106      	bne.n	800b7d0 <tcp_keepalive+0x20>
 800b7c2:	4b18      	ldr	r3, [pc, #96]	; (800b824 <tcp_keepalive+0x74>)
 800b7c4:	f640 0224 	movw	r2, #2084	; 0x824
 800b7c8:	4917      	ldr	r1, [pc, #92]	; (800b828 <tcp_keepalive+0x78>)
 800b7ca:	4818      	ldr	r0, [pc, #96]	; (800b82c <tcp_keepalive+0x7c>)
 800b7cc:	f003 fc12 	bl	800eff4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b7d0:	7dfb      	ldrb	r3, [r7, #23]
 800b7d2:	b29c      	uxth	r4, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7f9 f921 	bl	8004a22 <lwip_htonl>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7ff fe68 	bl	800b4bc <tcp_output_alloc_header>
 800b7ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b7f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f8:	e010      	b.n	800b81c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	6939      	ldr	r1, [r7, #16]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f7ff fe99 	bl	800b538 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3304      	adds	r3, #4
 800b80c:	6939      	ldr	r1, [r7, #16]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff fed0 	bl	800b5b4 <tcp_output_control_segment>
 800b814:	4603      	mov	r3, r0
 800b816:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b818:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	371c      	adds	r7, #28
 800b820:	46bd      	mov	sp, r7
 800b822:	bd90      	pop	{r4, r7, pc}
 800b824:	08011890 	.word	0x08011890
 800b828:	0801206c 	.word	0x0801206c
 800b82c:	080118e4 	.word	0x080118e4

0800b830 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b830:	b590      	push	{r4, r7, lr}
 800b832:	b08b      	sub	sp, #44	; 0x2c
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b838:	2300      	movs	r3, #0
 800b83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d106      	bne.n	800b852 <tcp_zero_window_probe+0x22>
 800b844:	4b4c      	ldr	r3, [pc, #304]	; (800b978 <tcp_zero_window_probe+0x148>)
 800b846:	f640 024f 	movw	r2, #2127	; 0x84f
 800b84a:	494c      	ldr	r1, [pc, #304]	; (800b97c <tcp_zero_window_probe+0x14c>)
 800b84c:	484c      	ldr	r0, [pc, #304]	; (800b980 <tcp_zero_window_probe+0x150>)
 800b84e:	f003 fbd1 	bl	800eff4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b856:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	e086      	b.n	800b970 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b868:	2bff      	cmp	r3, #255	; 0xff
 800b86a:	d007      	beq.n	800b87c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b872:	3301      	adds	r3, #1
 800b874:	b2da      	uxtb	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	899b      	ldrh	r3, [r3, #12]
 800b882:	b29b      	uxth	r3, r3
 800b884:	4618      	mov	r0, r3
 800b886:	f7f9 f8b7 	bl	80049f8 <lwip_htons>
 800b88a:	4603      	mov	r3, r0
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	2b00      	cmp	r3, #0
 800b894:	d005      	beq.n	800b8a2 <tcp_zero_window_probe+0x72>
 800b896:	6a3b      	ldr	r3, [r7, #32]
 800b898:	891b      	ldrh	r3, [r3, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d101      	bne.n	800b8a2 <tcp_zero_window_probe+0x72>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	e000      	b.n	800b8a4 <tcp_zero_window_probe+0x74>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b8a6:	7ffb      	ldrb	r3, [r7, #31]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	bf0c      	ite	eq
 800b8ac:	2301      	moveq	r3, #1
 800b8ae:	2300      	movne	r3, #0
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b8:	b299      	uxth	r1, r3
 800b8ba:	6a3b      	ldr	r3, [r7, #32]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	8bba      	ldrh	r2, [r7, #28]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff fdfa 	bl	800b4bc <tcp_output_alloc_header>
 800b8c8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d102      	bne.n	800b8d6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d4:	e04c      	b.n	800b970 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b8dc:	7ffb      	ldrb	r3, [r7, #31]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d011      	beq.n	800b906 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	899b      	ldrh	r3, [r3, #12]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	b21b      	sxth	r3, r3
 800b8ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b8ee:	b21c      	sxth	r4, r3
 800b8f0:	2011      	movs	r0, #17
 800b8f2:	f7f9 f881 	bl	80049f8 <lwip_htons>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	b21b      	sxth	r3, r3
 800b8fa:	4323      	orrs	r3, r4
 800b8fc:	b21b      	sxth	r3, r3
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	819a      	strh	r2, [r3, #12]
 800b904:	e010      	b.n	800b928 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	3314      	adds	r3, #20
 800b90c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b90e:	6a3b      	ldr	r3, [r7, #32]
 800b910:	6858      	ldr	r0, [r3, #4]
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	891a      	ldrh	r2, [r3, #8]
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	891b      	ldrh	r3, [r3, #8]
 800b91c:	1ad3      	subs	r3, r2, r3
 800b91e:	b29b      	uxth	r3, r3
 800b920:	2201      	movs	r2, #1
 800b922:	6939      	ldr	r1, [r7, #16]
 800b924:	f7fa fdc0 	bl	80064a8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	4618      	mov	r0, r3
 800b930:	f7f9 f877 	bl	8004a22 <lwip_htonl>
 800b934:	4603      	mov	r3, r0
 800b936:	3301      	adds	r3, #1
 800b938:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	1ad3      	subs	r3, r2, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	da02      	bge.n	800b94c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b94c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b950:	2200      	movs	r2, #0
 800b952:	69b9      	ldr	r1, [r7, #24]
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff fdef 	bl	800b538 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3304      	adds	r3, #4
 800b960:	69b9      	ldr	r1, [r7, #24]
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f7ff fe26 	bl	800b5b4 <tcp_output_control_segment>
 800b968:	4603      	mov	r3, r0
 800b96a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b96c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b970:	4618      	mov	r0, r3
 800b972:	372c      	adds	r7, #44	; 0x2c
 800b974:	46bd      	mov	sp, r7
 800b976:	bd90      	pop	{r4, r7, pc}
 800b978:	08011890 	.word	0x08011890
 800b97c:	08012088 	.word	0x08012088
 800b980:	080118e4 	.word	0x080118e4

0800b984 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b98c:	f7fa ff0c 	bl	80067a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b990:	4b0a      	ldr	r3, [pc, #40]	; (800b9bc <tcpip_tcp_timer+0x38>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d103      	bne.n	800b9a0 <tcpip_tcp_timer+0x1c>
 800b998:	4b09      	ldr	r3, [pc, #36]	; (800b9c0 <tcpip_tcp_timer+0x3c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d005      	beq.n	800b9ac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	4908      	ldr	r1, [pc, #32]	; (800b9c4 <tcpip_tcp_timer+0x40>)
 800b9a4:	20fa      	movs	r0, #250	; 0xfa
 800b9a6:	f000 f8f3 	bl	800bb90 <sys_timeout>
 800b9aa:	e003      	b.n	800b9b4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b9ac:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <tcpip_tcp_timer+0x44>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
  }
}
 800b9b2:	bf00      	nop
 800b9b4:	bf00      	nop
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20008778 	.word	0x20008778
 800b9c0:	2000877c 	.word	0x2000877c
 800b9c4:	0800b985 	.word	0x0800b985
 800b9c8:	200087c4 	.word	0x200087c4

0800b9cc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b9d0:	4b0a      	ldr	r3, [pc, #40]	; (800b9fc <tcp_timer_needed+0x30>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10f      	bne.n	800b9f8 <tcp_timer_needed+0x2c>
 800b9d8:	4b09      	ldr	r3, [pc, #36]	; (800ba00 <tcp_timer_needed+0x34>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d103      	bne.n	800b9e8 <tcp_timer_needed+0x1c>
 800b9e0:	4b08      	ldr	r3, [pc, #32]	; (800ba04 <tcp_timer_needed+0x38>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d007      	beq.n	800b9f8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b9e8:	4b04      	ldr	r3, [pc, #16]	; (800b9fc <tcp_timer_needed+0x30>)
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4905      	ldr	r1, [pc, #20]	; (800ba08 <tcp_timer_needed+0x3c>)
 800b9f2:	20fa      	movs	r0, #250	; 0xfa
 800b9f4:	f000 f8cc 	bl	800bb90 <sys_timeout>
  }
}
 800b9f8:	bf00      	nop
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	200087c4 	.word	0x200087c4
 800ba00:	20008778 	.word	0x20008778
 800ba04:	2000877c 	.word	0x2000877c
 800ba08:	0800b985 	.word	0x0800b985

0800ba0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b086      	sub	sp, #24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ba18:	2006      	movs	r0, #6
 800ba1a:	f7f9 fc65 	bl	80052e8 <memp_malloc>
 800ba1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d109      	bne.n	800ba3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d151      	bne.n	800bad0 <sys_timeout_abs+0xc4>
 800ba2c:	4b2a      	ldr	r3, [pc, #168]	; (800bad8 <sys_timeout_abs+0xcc>)
 800ba2e:	22be      	movs	r2, #190	; 0xbe
 800ba30:	492a      	ldr	r1, [pc, #168]	; (800badc <sys_timeout_abs+0xd0>)
 800ba32:	482b      	ldr	r0, [pc, #172]	; (800bae0 <sys_timeout_abs+0xd4>)
 800ba34:	f003 fade 	bl	800eff4 <iprintf>
    return;
 800ba38:	e04a      	b.n	800bad0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ba52:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <sys_timeout_abs+0xd8>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d103      	bne.n	800ba62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ba5a:	4a22      	ldr	r2, [pc, #136]	; (800bae4 <sys_timeout_abs+0xd8>)
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	6013      	str	r3, [r2, #0]
    return;
 800ba60:	e037      	b.n	800bad2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	4b1f      	ldr	r3, [pc, #124]	; (800bae4 <sys_timeout_abs+0xd8>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	0fdb      	lsrs	r3, r3, #31
 800ba70:	f003 0301 	and.w	r3, r3, #1
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d007      	beq.n	800ba8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ba7a:	4b1a      	ldr	r3, [pc, #104]	; (800bae4 <sys_timeout_abs+0xd8>)
 800ba7c:	681a      	ldr	r2, [r3, #0]
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ba82:	4a18      	ldr	r2, [pc, #96]	; (800bae4 <sys_timeout_abs+0xd8>)
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	6013      	str	r3, [r2, #0]
 800ba88:	e023      	b.n	800bad2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ba8a:	4b16      	ldr	r3, [pc, #88]	; (800bae4 <sys_timeout_abs+0xd8>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	617b      	str	r3, [r7, #20]
 800ba90:	e01a      	b.n	800bac8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00b      	beq.n	800bab2 <sys_timeout_abs+0xa6>
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	685a      	ldr	r2, [r3, #4]
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	0fdb      	lsrs	r3, r3, #31
 800baa8:	f003 0301 	and.w	r3, r3, #1
 800baac:	b2db      	uxtb	r3, r3
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d007      	beq.n	800bac2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	601a      	str	r2, [r3, #0]
        break;
 800bac0:	e007      	b.n	800bad2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	617b      	str	r3, [r7, #20]
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1e1      	bne.n	800ba92 <sys_timeout_abs+0x86>
 800bace:	e000      	b.n	800bad2 <sys_timeout_abs+0xc6>
    return;
 800bad0:	bf00      	nop
      }
    }
  }
}
 800bad2:	3718      	adds	r7, #24
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	080120ac 	.word	0x080120ac
 800badc:	080120e0 	.word	0x080120e0
 800bae0:	08012120 	.word	0x08012120
 800bae4:	200087bc 	.word	0x200087bc

0800bae8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	4798      	blx	r3

  now = sys_now();
 800bafa:	f7f8 fd65 	bl	80045c8 <sys_now>
 800bafe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	4b0f      	ldr	r3, [pc, #60]	; (800bb44 <lwip_cyclic_timer+0x5c>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4413      	add	r3, r2
 800bb0a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	0fdb      	lsrs	r3, r3, #31
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d009      	beq.n	800bb32 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	4413      	add	r3, r2
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	4907      	ldr	r1, [pc, #28]	; (800bb48 <lwip_cyclic_timer+0x60>)
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff ff6e 	bl	800ba0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bb30:	e004      	b.n	800bb3c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	4904      	ldr	r1, [pc, #16]	; (800bb48 <lwip_cyclic_timer+0x60>)
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	f7ff ff68 	bl	800ba0c <sys_timeout_abs>
}
 800bb3c:	bf00      	nop
 800bb3e:	3718      	adds	r7, #24
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}
 800bb44:	200087c0 	.word	0x200087c0
 800bb48:	0800bae9 	.word	0x0800bae9

0800bb4c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bb52:	2301      	movs	r3, #1
 800bb54:	607b      	str	r3, [r7, #4]
 800bb56:	e00e      	b.n	800bb76 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bb58:	4a0b      	ldr	r2, [pc, #44]	; (800bb88 <sys_timeouts_init+0x3c>)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	4a08      	ldr	r2, [pc, #32]	; (800bb88 <sys_timeouts_init+0x3c>)
 800bb66:	4413      	add	r3, r2
 800bb68:	461a      	mov	r2, r3
 800bb6a:	4908      	ldr	r1, [pc, #32]	; (800bb8c <sys_timeouts_init+0x40>)
 800bb6c:	f000 f810 	bl	800bb90 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3301      	adds	r3, #1
 800bb74:	607b      	str	r3, [r7, #4]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d9ed      	bls.n	800bb58 <sys_timeouts_init+0xc>
  }
}
 800bb7c:	bf00      	nop
 800bb7e:	bf00      	nop
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	08012c98 	.word	0x08012c98
 800bb8c:	0800bae9 	.word	0x0800bae9

0800bb90 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bba2:	d306      	bcc.n	800bbb2 <sys_timeout+0x22>
 800bba4:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <sys_timeout+0x40>)
 800bba6:	f240 1229 	movw	r2, #297	; 0x129
 800bbaa:	490a      	ldr	r1, [pc, #40]	; (800bbd4 <sys_timeout+0x44>)
 800bbac:	480a      	ldr	r0, [pc, #40]	; (800bbd8 <sys_timeout+0x48>)
 800bbae:	f003 fa21 	bl	800eff4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bbb2:	f7f8 fd09 	bl	80045c8 <sys_now>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	68b9      	ldr	r1, [r7, #8]
 800bbc2:	6978      	ldr	r0, [r7, #20]
 800bbc4:	f7ff ff22 	bl	800ba0c <sys_timeout_abs>
#endif
}
 800bbc8:	bf00      	nop
 800bbca:	3718      	adds	r7, #24
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	080120ac 	.word	0x080120ac
 800bbd4:	08012148 	.word	0x08012148
 800bbd8:	08012120 	.word	0x08012120

0800bbdc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bbe2:	f7f8 fcf1 	bl	80045c8 <sys_now>
 800bbe6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bbe8:	4b1a      	ldr	r3, [pc, #104]	; (800bc54 <sys_check_timeouts+0x78>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <sys_check_timeouts+0x1a>
 800bbf2:	f7f9 ff25 	bl	8005a40 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bbf6:	4b18      	ldr	r3, [pc, #96]	; (800bc58 <sys_check_timeouts+0x7c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d022      	beq.n	800bc48 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	1ad3      	subs	r3, r2, r3
 800bc0a:	0fdb      	lsrs	r3, r3, #31
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d11a      	bne.n	800bc4c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a0f      	ldr	r2, [pc, #60]	; (800bc58 <sys_check_timeouts+0x7c>)
 800bc1c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	4a0b      	ldr	r2, [pc, #44]	; (800bc5c <sys_check_timeouts+0x80>)
 800bc30:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bc32:	68b9      	ldr	r1, [r7, #8]
 800bc34:	2006      	movs	r0, #6
 800bc36:	f7f9 fbc7 	bl	80053c8 <memp_free>
    if (handler != NULL) {
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0d3      	beq.n	800bbe8 <sys_check_timeouts+0xc>
      handler(arg);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6838      	ldr	r0, [r7, #0]
 800bc44:	4798      	blx	r3
  do {
 800bc46:	e7cf      	b.n	800bbe8 <sys_check_timeouts+0xc>
      return;
 800bc48:	bf00      	nop
 800bc4a:	e000      	b.n	800bc4e <sys_check_timeouts+0x72>
      return;
 800bc4c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}
 800bc54:	20008769 	.word	0x20008769
 800bc58:	200087bc 	.word	0x200087bc
 800bc5c:	200087c0 	.word	0x200087c0

0800bc60 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bc64:	f003 f8c6 	bl	800edf4 <rand>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	4b01      	ldr	r3, [pc, #4]	; (800bc80 <udp_init+0x20>)
 800bc7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bc7c:	bf00      	nop
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	20000028 	.word	0x20000028

0800bc84 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bc8e:	4b17      	ldr	r3, [pc, #92]	; (800bcec <udp_new_port+0x68>)
 800bc90:	881b      	ldrh	r3, [r3, #0]
 800bc92:	1c5a      	adds	r2, r3, #1
 800bc94:	b291      	uxth	r1, r2
 800bc96:	4a15      	ldr	r2, [pc, #84]	; (800bcec <udp_new_port+0x68>)
 800bc98:	8011      	strh	r1, [r2, #0]
 800bc9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d103      	bne.n	800bcaa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bca2:	4b12      	ldr	r3, [pc, #72]	; (800bcec <udp_new_port+0x68>)
 800bca4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bca8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcaa:	4b11      	ldr	r3, [pc, #68]	; (800bcf0 <udp_new_port+0x6c>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	603b      	str	r3, [r7, #0]
 800bcb0:	e011      	b.n	800bcd6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	8a5a      	ldrh	r2, [r3, #18]
 800bcb6:	4b0d      	ldr	r3, [pc, #52]	; (800bcec <udp_new_port+0x68>)
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d108      	bne.n	800bcd0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bcbe:	88fb      	ldrh	r3, [r7, #6]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	80fb      	strh	r3, [r7, #6]
 800bcc4:	88fb      	ldrh	r3, [r7, #6]
 800bcc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcca:	d3e0      	bcc.n	800bc8e <udp_new_port+0xa>
        return 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	e007      	b.n	800bce0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	603b      	str	r3, [r7, #0]
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1ea      	bne.n	800bcb2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bcdc:	4b03      	ldr	r3, [pc, #12]	; (800bcec <udp_new_port+0x68>)
 800bcde:	881b      	ldrh	r3, [r3, #0]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	20000028 	.word	0x20000028
 800bcf0:	200087c8 	.word	0x200087c8

0800bcf4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d105      	bne.n	800bd14 <udp_input_local_match+0x20>
 800bd08:	4b27      	ldr	r3, [pc, #156]	; (800bda8 <udp_input_local_match+0xb4>)
 800bd0a:	2287      	movs	r2, #135	; 0x87
 800bd0c:	4927      	ldr	r1, [pc, #156]	; (800bdac <udp_input_local_match+0xb8>)
 800bd0e:	4828      	ldr	r0, [pc, #160]	; (800bdb0 <udp_input_local_match+0xbc>)
 800bd10:	f003 f970 	bl	800eff4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d105      	bne.n	800bd26 <udp_input_local_match+0x32>
 800bd1a:	4b23      	ldr	r3, [pc, #140]	; (800bda8 <udp_input_local_match+0xb4>)
 800bd1c:	2288      	movs	r2, #136	; 0x88
 800bd1e:	4925      	ldr	r1, [pc, #148]	; (800bdb4 <udp_input_local_match+0xc0>)
 800bd20:	4823      	ldr	r0, [pc, #140]	; (800bdb0 <udp_input_local_match+0xbc>)
 800bd22:	f003 f967 	bl	800eff4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	7a1b      	ldrb	r3, [r3, #8]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00b      	beq.n	800bd46 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	7a1a      	ldrb	r2, [r3, #8]
 800bd32:	4b21      	ldr	r3, [pc, #132]	; (800bdb8 <udp_input_local_match+0xc4>)
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d001      	beq.n	800bd46 <udp_input_local_match+0x52>
    return 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	e02b      	b.n	800bd9e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bd46:	79fb      	ldrb	r3, [r7, #7]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d018      	beq.n	800bd7e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d013      	beq.n	800bd7a <udp_input_local_match+0x86>
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00f      	beq.n	800bd7a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bd5a:	4b17      	ldr	r3, [pc, #92]	; (800bdb8 <udp_input_local_match+0xc4>)
 800bd5c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd62:	d00a      	beq.n	800bd7a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	4b13      	ldr	r3, [pc, #76]	; (800bdb8 <udp_input_local_match+0xc4>)
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	405a      	eors	r2, r3
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	3308      	adds	r3, #8
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d110      	bne.n	800bd9c <udp_input_local_match+0xa8>
          return 1;
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e00f      	b.n	800bd9e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d009      	beq.n	800bd98 <udp_input_local_match+0xa4>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d005      	beq.n	800bd98 <udp_input_local_match+0xa4>
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681a      	ldr	r2, [r3, #0]
 800bd90:	4b09      	ldr	r3, [pc, #36]	; (800bdb8 <udp_input_local_match+0xc4>)
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d101      	bne.n	800bd9c <udp_input_local_match+0xa8>
        return 1;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e000      	b.n	800bd9e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	08012194 	.word	0x08012194
 800bdac:	080121c4 	.word	0x080121c4
 800bdb0:	080121e8 	.word	0x080121e8
 800bdb4:	08012210 	.word	0x08012210
 800bdb8:	200051fc 	.word	0x200051fc

0800bdbc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bdbc:	b590      	push	{r4, r7, lr}
 800bdbe:	b08d      	sub	sp, #52	; 0x34
 800bdc0:	af02      	add	r7, sp, #8
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d105      	bne.n	800bddc <udp_input+0x20>
 800bdd0:	4b7c      	ldr	r3, [pc, #496]	; (800bfc4 <udp_input+0x208>)
 800bdd2:	22cf      	movs	r2, #207	; 0xcf
 800bdd4:	497c      	ldr	r1, [pc, #496]	; (800bfc8 <udp_input+0x20c>)
 800bdd6:	487d      	ldr	r0, [pc, #500]	; (800bfcc <udp_input+0x210>)
 800bdd8:	f003 f90c 	bl	800eff4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d105      	bne.n	800bdee <udp_input+0x32>
 800bde2:	4b78      	ldr	r3, [pc, #480]	; (800bfc4 <udp_input+0x208>)
 800bde4:	22d0      	movs	r2, #208	; 0xd0
 800bde6:	497a      	ldr	r1, [pc, #488]	; (800bfd0 <udp_input+0x214>)
 800bde8:	4878      	ldr	r0, [pc, #480]	; (800bfcc <udp_input+0x210>)
 800bdea:	f003 f903 	bl	800eff4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	895b      	ldrh	r3, [r3, #10]
 800bdf2:	2b07      	cmp	r3, #7
 800bdf4:	d803      	bhi.n	800bdfe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7fa f95c 	bl	80060b4 <pbuf_free>
    goto end;
 800bdfc:	e0de      	b.n	800bfbc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800be04:	4b73      	ldr	r3, [pc, #460]	; (800bfd4 <udp_input+0x218>)
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	4a72      	ldr	r2, [pc, #456]	; (800bfd4 <udp_input+0x218>)
 800be0a:	6812      	ldr	r2, [r2, #0]
 800be0c:	4611      	mov	r1, r2
 800be0e:	4618      	mov	r0, r3
 800be10:	f002 f80a 	bl	800de28 <ip4_addr_isbroadcast_u32>
 800be14:	4603      	mov	r3, r0
 800be16:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	4618      	mov	r0, r3
 800be20:	f7f8 fdea 	bl	80049f8 <lwip_htons>
 800be24:	4603      	mov	r3, r0
 800be26:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	885b      	ldrh	r3, [r3, #2]
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	4618      	mov	r0, r3
 800be30:	f7f8 fde2 	bl	80049f8 <lwip_htons>
 800be34:	4603      	mov	r3, r0
 800be36:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800be38:	2300      	movs	r3, #0
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800be3c:	2300      	movs	r3, #0
 800be3e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800be40:	2300      	movs	r3, #0
 800be42:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be44:	4b64      	ldr	r3, [pc, #400]	; (800bfd8 <udp_input+0x21c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	627b      	str	r3, [r7, #36]	; 0x24
 800be4a:	e054      	b.n	800bef6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800be4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4e:	8a5b      	ldrh	r3, [r3, #18]
 800be50:	89fa      	ldrh	r2, [r7, #14]
 800be52:	429a      	cmp	r2, r3
 800be54:	d14a      	bne.n	800beec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800be56:	7cfb      	ldrb	r3, [r7, #19]
 800be58:	461a      	mov	r2, r3
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be5e:	f7ff ff49 	bl	800bcf4 <udp_input_local_match>
 800be62:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800be64:	2b00      	cmp	r3, #0
 800be66:	d041      	beq.n	800beec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	7c1b      	ldrb	r3, [r3, #16]
 800be6c:	f003 0304 	and.w	r3, r3, #4
 800be70:	2b00      	cmp	r3, #0
 800be72:	d11d      	bne.n	800beb0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d102      	bne.n	800be80 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	61fb      	str	r3, [r7, #28]
 800be7e:	e017      	b.n	800beb0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800be80:	7cfb      	ldrb	r3, [r7, #19]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d014      	beq.n	800beb0 <udp_input+0xf4>
 800be86:	4b53      	ldr	r3, [pc, #332]	; (800bfd4 <udp_input+0x218>)
 800be88:	695b      	ldr	r3, [r3, #20]
 800be8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8e:	d10f      	bne.n	800beb0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	3304      	adds	r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d008      	beq.n	800beb0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	3304      	adds	r3, #4
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d101      	bne.n	800beb0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800beac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800beb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb2:	8a9b      	ldrh	r3, [r3, #20]
 800beb4:	8a3a      	ldrh	r2, [r7, #16]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d118      	bne.n	800beec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d005      	beq.n	800bece <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	685a      	ldr	r2, [r3, #4]
 800bec6:	4b43      	ldr	r3, [pc, #268]	; (800bfd4 <udp_input+0x218>)
 800bec8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800beca:	429a      	cmp	r2, r3
 800becc:	d10e      	bne.n	800beec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d014      	beq.n	800befe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	68da      	ldr	r2, [r3, #12]
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bedc:	4b3e      	ldr	r3, [pc, #248]	; (800bfd8 <udp_input+0x21c>)
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bee4:	4a3c      	ldr	r2, [pc, #240]	; (800bfd8 <udp_input+0x21c>)
 800bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800beea:	e008      	b.n	800befe <udp_input+0x142>
      }
    }

    prev = pcb;
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	68db      	ldr	r3, [r3, #12]
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1a7      	bne.n	800be4c <udp_input+0x90>
 800befc:	e000      	b.n	800bf00 <udp_input+0x144>
        break;
 800befe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <udp_input+0x14e>
    pcb = uncon_pcb;
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <udp_input+0x15a>
    for_us = 1;
 800bf10:	2301      	movs	r3, #1
 800bf12:	76fb      	strb	r3, [r7, #27]
 800bf14:	e00a      	b.n	800bf2c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	4b2d      	ldr	r3, [pc, #180]	; (800bfd4 <udp_input+0x218>)
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	bf0c      	ite	eq
 800bf24:	2301      	moveq	r3, #1
 800bf26:	2300      	movne	r3, #0
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bf2c:	7efb      	ldrb	r3, [r7, #27]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d041      	beq.n	800bfb6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bf32:	2108      	movs	r1, #8
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7fa f837 	bl	8005fa8 <pbuf_remove_header>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00a      	beq.n	800bf56 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bf40:	4b20      	ldr	r3, [pc, #128]	; (800bfc4 <udp_input+0x208>)
 800bf42:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bf46:	4925      	ldr	r1, [pc, #148]	; (800bfdc <udp_input+0x220>)
 800bf48:	4820      	ldr	r0, [pc, #128]	; (800bfcc <udp_input+0x210>)
 800bf4a:	f003 f853 	bl	800eff4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7fa f8b0 	bl	80060b4 <pbuf_free>
      goto end;
 800bf54:	e032      	b.n	800bfbc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d012      	beq.n	800bf82 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00a      	beq.n	800bf7a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf66:	699c      	ldr	r4, [r3, #24]
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	69d8      	ldr	r0, [r3, #28]
 800bf6c:	8a3b      	ldrh	r3, [r7, #16]
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	4b1b      	ldr	r3, [pc, #108]	; (800bfe0 <udp_input+0x224>)
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf76:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bf78:	e021      	b.n	800bfbe <udp_input+0x202>
        pbuf_free(p);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f7fa f89a 	bl	80060b4 <pbuf_free>
        goto end;
 800bf80:	e01c      	b.n	800bfbc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bf82:	7cfb      	ldrb	r3, [r7, #19]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d112      	bne.n	800bfae <udp_input+0x1f2>
 800bf88:	4b12      	ldr	r3, [pc, #72]	; (800bfd4 <udp_input+0x218>)
 800bf8a:	695b      	ldr	r3, [r3, #20]
 800bf8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf90:	2be0      	cmp	r3, #224	; 0xe0
 800bf92:	d00c      	beq.n	800bfae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bf94:	4b0f      	ldr	r3, [pc, #60]	; (800bfd4 <udp_input+0x218>)
 800bf96:	899b      	ldrh	r3, [r3, #12]
 800bf98:	3308      	adds	r3, #8
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	b21b      	sxth	r3, r3
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7fa f874 	bl	800608e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bfa6:	2103      	movs	r1, #3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 fc1d 	bl	800d7e8 <icmp_dest_unreach>
      pbuf_free(p);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7fa f880 	bl	80060b4 <pbuf_free>
  return;
 800bfb4:	e003      	b.n	800bfbe <udp_input+0x202>
    pbuf_free(p);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7fa f87c 	bl	80060b4 <pbuf_free>
  return;
 800bfbc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bfbe:	372c      	adds	r7, #44	; 0x2c
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd90      	pop	{r4, r7, pc}
 800bfc4:	08012194 	.word	0x08012194
 800bfc8:	08012238 	.word	0x08012238
 800bfcc:	080121e8 	.word	0x080121e8
 800bfd0:	08012250 	.word	0x08012250
 800bfd4:	200051fc 	.word	0x200051fc
 800bfd8:	200087c8 	.word	0x200087c8
 800bfdc:	0801226c 	.word	0x0801226c
 800bfe0:	2000520c 	.word	0x2000520c

0800bfe4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d109      	bne.n	800c008 <udp_send+0x24>
 800bff4:	4b11      	ldr	r3, [pc, #68]	; (800c03c <udp_send+0x58>)
 800bff6:	f240 12d5 	movw	r2, #469	; 0x1d5
 800bffa:	4911      	ldr	r1, [pc, #68]	; (800c040 <udp_send+0x5c>)
 800bffc:	4811      	ldr	r0, [pc, #68]	; (800c044 <udp_send+0x60>)
 800bffe:	f002 fff9 	bl	800eff4 <iprintf>
 800c002:	f06f 030f 	mvn.w	r3, #15
 800c006:	e015      	b.n	800c034 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d109      	bne.n	800c022 <udp_send+0x3e>
 800c00e:	4b0b      	ldr	r3, [pc, #44]	; (800c03c <udp_send+0x58>)
 800c010:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800c014:	490c      	ldr	r1, [pc, #48]	; (800c048 <udp_send+0x64>)
 800c016:	480b      	ldr	r0, [pc, #44]	; (800c044 <udp_send+0x60>)
 800c018:	f002 ffec 	bl	800eff4 <iprintf>
 800c01c:	f06f 030f 	mvn.w	r3, #15
 800c020:	e008      	b.n	800c034 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	1d1a      	adds	r2, r3, #4
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8a9b      	ldrh	r3, [r3, #20]
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 f80d 	bl	800c04c <udp_sendto>
 800c032:	4603      	mov	r3, r0
}
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	08012194 	.word	0x08012194
 800c040:	08012288 	.word	0x08012288
 800c044:	080121e8 	.word	0x080121e8
 800c048:	080122a0 	.word	0x080122a0

0800c04c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af02      	add	r7, sp, #8
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
 800c058:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d109      	bne.n	800c074 <udp_sendto+0x28>
 800c060:	4b23      	ldr	r3, [pc, #140]	; (800c0f0 <udp_sendto+0xa4>)
 800c062:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c066:	4923      	ldr	r1, [pc, #140]	; (800c0f4 <udp_sendto+0xa8>)
 800c068:	4823      	ldr	r0, [pc, #140]	; (800c0f8 <udp_sendto+0xac>)
 800c06a:	f002 ffc3 	bl	800eff4 <iprintf>
 800c06e:	f06f 030f 	mvn.w	r3, #15
 800c072:	e038      	b.n	800c0e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d109      	bne.n	800c08e <udp_sendto+0x42>
 800c07a:	4b1d      	ldr	r3, [pc, #116]	; (800c0f0 <udp_sendto+0xa4>)
 800c07c:	f240 2219 	movw	r2, #537	; 0x219
 800c080:	491e      	ldr	r1, [pc, #120]	; (800c0fc <udp_sendto+0xb0>)
 800c082:	481d      	ldr	r0, [pc, #116]	; (800c0f8 <udp_sendto+0xac>)
 800c084:	f002 ffb6 	bl	800eff4 <iprintf>
 800c088:	f06f 030f 	mvn.w	r3, #15
 800c08c:	e02b      	b.n	800c0e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d109      	bne.n	800c0a8 <udp_sendto+0x5c>
 800c094:	4b16      	ldr	r3, [pc, #88]	; (800c0f0 <udp_sendto+0xa4>)
 800c096:	f240 221a 	movw	r2, #538	; 0x21a
 800c09a:	4919      	ldr	r1, [pc, #100]	; (800c100 <udp_sendto+0xb4>)
 800c09c:	4816      	ldr	r0, [pc, #88]	; (800c0f8 <udp_sendto+0xac>)
 800c09e:	f002 ffa9 	bl	800eff4 <iprintf>
 800c0a2:	f06f 030f 	mvn.w	r3, #15
 800c0a6:	e01e      	b.n	800c0e6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	7a1b      	ldrb	r3, [r3, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d006      	beq.n	800c0be <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	7a1b      	ldrb	r3, [r3, #8]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7f9 fc9d 	bl	80059f4 <netif_get_by_index>
 800c0ba:	6178      	str	r0, [r7, #20]
 800c0bc:	e003      	b.n	800c0c6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f001 fc1c 	bl	800d8fc <ip4_route>
 800c0c4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d102      	bne.n	800c0d2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c0cc:	f06f 0303 	mvn.w	r3, #3
 800c0d0:	e009      	b.n	800c0e6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c0d2:	887a      	ldrh	r2, [r7, #2]
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	9300      	str	r3, [sp, #0]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	68b9      	ldr	r1, [r7, #8]
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f000 f810 	bl	800c104 <udp_sendto_if>
 800c0e4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3718      	adds	r7, #24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	08012194 	.word	0x08012194
 800c0f4:	080122b8 	.word	0x080122b8
 800c0f8:	080121e8 	.word	0x080121e8
 800c0fc:	080122d0 	.word	0x080122d0
 800c100:	080122ec 	.word	0x080122ec

0800c104 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b088      	sub	sp, #32
 800c108:	af02      	add	r7, sp, #8
 800c10a:	60f8      	str	r0, [r7, #12]
 800c10c:	60b9      	str	r1, [r7, #8]
 800c10e:	607a      	str	r2, [r7, #4]
 800c110:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d109      	bne.n	800c12c <udp_sendto_if+0x28>
 800c118:	4b2e      	ldr	r3, [pc, #184]	; (800c1d4 <udp_sendto_if+0xd0>)
 800c11a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c11e:	492e      	ldr	r1, [pc, #184]	; (800c1d8 <udp_sendto_if+0xd4>)
 800c120:	482e      	ldr	r0, [pc, #184]	; (800c1dc <udp_sendto_if+0xd8>)
 800c122:	f002 ff67 	bl	800eff4 <iprintf>
 800c126:	f06f 030f 	mvn.w	r3, #15
 800c12a:	e04f      	b.n	800c1cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d109      	bne.n	800c146 <udp_sendto_if+0x42>
 800c132:	4b28      	ldr	r3, [pc, #160]	; (800c1d4 <udp_sendto_if+0xd0>)
 800c134:	f240 2281 	movw	r2, #641	; 0x281
 800c138:	4929      	ldr	r1, [pc, #164]	; (800c1e0 <udp_sendto_if+0xdc>)
 800c13a:	4828      	ldr	r0, [pc, #160]	; (800c1dc <udp_sendto_if+0xd8>)
 800c13c:	f002 ff5a 	bl	800eff4 <iprintf>
 800c140:	f06f 030f 	mvn.w	r3, #15
 800c144:	e042      	b.n	800c1cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d109      	bne.n	800c160 <udp_sendto_if+0x5c>
 800c14c:	4b21      	ldr	r3, [pc, #132]	; (800c1d4 <udp_sendto_if+0xd0>)
 800c14e:	f240 2282 	movw	r2, #642	; 0x282
 800c152:	4924      	ldr	r1, [pc, #144]	; (800c1e4 <udp_sendto_if+0xe0>)
 800c154:	4821      	ldr	r0, [pc, #132]	; (800c1dc <udp_sendto_if+0xd8>)
 800c156:	f002 ff4d 	bl	800eff4 <iprintf>
 800c15a:	f06f 030f 	mvn.w	r3, #15
 800c15e:	e035      	b.n	800c1cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d109      	bne.n	800c17a <udp_sendto_if+0x76>
 800c166:	4b1b      	ldr	r3, [pc, #108]	; (800c1d4 <udp_sendto_if+0xd0>)
 800c168:	f240 2283 	movw	r2, #643	; 0x283
 800c16c:	491e      	ldr	r1, [pc, #120]	; (800c1e8 <udp_sendto_if+0xe4>)
 800c16e:	481b      	ldr	r0, [pc, #108]	; (800c1dc <udp_sendto_if+0xd8>)
 800c170:	f002 ff40 	bl	800eff4 <iprintf>
 800c174:	f06f 030f 	mvn.w	r3, #15
 800c178:	e028      	b.n	800c1cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d009      	beq.n	800c194 <udp_sendto_if+0x90>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d005      	beq.n	800c194 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c190:	2be0      	cmp	r3, #224	; 0xe0
 800c192:	d103      	bne.n	800c19c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c194:	6a3b      	ldr	r3, [r7, #32]
 800c196:	3304      	adds	r3, #4
 800c198:	617b      	str	r3, [r7, #20]
 800c19a:	e00b      	b.n	800c1b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	6a3b      	ldr	r3, [r7, #32]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d002      	beq.n	800c1b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c1aa:	f06f 0303 	mvn.w	r3, #3
 800c1ae:	e00d      	b.n	800c1cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c1b4:	887a      	ldrh	r2, [r7, #2]
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	9301      	str	r3, [sp, #4]
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	68b9      	ldr	r1, [r7, #8]
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f000 f811 	bl	800c1ec <udp_sendto_if_src>
 800c1ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3718      	adds	r7, #24
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	08012194 	.word	0x08012194
 800c1d8:	08012308 	.word	0x08012308
 800c1dc:	080121e8 	.word	0x080121e8
 800c1e0:	08012324 	.word	0x08012324
 800c1e4:	08012340 	.word	0x08012340
 800c1e8:	08012360 	.word	0x08012360

0800c1ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08c      	sub	sp, #48	; 0x30
 800c1f0:	af04      	add	r7, sp, #16
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d109      	bne.n	800c214 <udp_sendto_if_src+0x28>
 800c200:	4b65      	ldr	r3, [pc, #404]	; (800c398 <udp_sendto_if_src+0x1ac>)
 800c202:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c206:	4965      	ldr	r1, [pc, #404]	; (800c39c <udp_sendto_if_src+0x1b0>)
 800c208:	4865      	ldr	r0, [pc, #404]	; (800c3a0 <udp_sendto_if_src+0x1b4>)
 800c20a:	f002 fef3 	bl	800eff4 <iprintf>
 800c20e:	f06f 030f 	mvn.w	r3, #15
 800c212:	e0bc      	b.n	800c38e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d109      	bne.n	800c22e <udp_sendto_if_src+0x42>
 800c21a:	4b5f      	ldr	r3, [pc, #380]	; (800c398 <udp_sendto_if_src+0x1ac>)
 800c21c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c220:	4960      	ldr	r1, [pc, #384]	; (800c3a4 <udp_sendto_if_src+0x1b8>)
 800c222:	485f      	ldr	r0, [pc, #380]	; (800c3a0 <udp_sendto_if_src+0x1b4>)
 800c224:	f002 fee6 	bl	800eff4 <iprintf>
 800c228:	f06f 030f 	mvn.w	r3, #15
 800c22c:	e0af      	b.n	800c38e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d109      	bne.n	800c248 <udp_sendto_if_src+0x5c>
 800c234:	4b58      	ldr	r3, [pc, #352]	; (800c398 <udp_sendto_if_src+0x1ac>)
 800c236:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c23a:	495b      	ldr	r1, [pc, #364]	; (800c3a8 <udp_sendto_if_src+0x1bc>)
 800c23c:	4858      	ldr	r0, [pc, #352]	; (800c3a0 <udp_sendto_if_src+0x1b4>)
 800c23e:	f002 fed9 	bl	800eff4 <iprintf>
 800c242:	f06f 030f 	mvn.w	r3, #15
 800c246:	e0a2      	b.n	800c38e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d109      	bne.n	800c262 <udp_sendto_if_src+0x76>
 800c24e:	4b52      	ldr	r3, [pc, #328]	; (800c398 <udp_sendto_if_src+0x1ac>)
 800c250:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c254:	4955      	ldr	r1, [pc, #340]	; (800c3ac <udp_sendto_if_src+0x1c0>)
 800c256:	4852      	ldr	r0, [pc, #328]	; (800c3a0 <udp_sendto_if_src+0x1b4>)
 800c258:	f002 fecc 	bl	800eff4 <iprintf>
 800c25c:	f06f 030f 	mvn.w	r3, #15
 800c260:	e095      	b.n	800c38e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c264:	2b00      	cmp	r3, #0
 800c266:	d109      	bne.n	800c27c <udp_sendto_if_src+0x90>
 800c268:	4b4b      	ldr	r3, [pc, #300]	; (800c398 <udp_sendto_if_src+0x1ac>)
 800c26a:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c26e:	4950      	ldr	r1, [pc, #320]	; (800c3b0 <udp_sendto_if_src+0x1c4>)
 800c270:	484b      	ldr	r0, [pc, #300]	; (800c3a0 <udp_sendto_if_src+0x1b4>)
 800c272:	f002 febf 	bl	800eff4 <iprintf>
 800c276:	f06f 030f 	mvn.w	r3, #15
 800c27a:	e088      	b.n	800c38e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	8a5b      	ldrh	r3, [r3, #18]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10f      	bne.n	800c2a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c284:	68f9      	ldr	r1, [r7, #12]
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	8a5b      	ldrh	r3, [r3, #18]
 800c28a:	461a      	mov	r2, r3
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	f000 f893 	bl	800c3b8 <udp_bind>
 800c292:	4603      	mov	r3, r0
 800c294:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c296:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d002      	beq.n	800c2a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c29e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c2a2:	e074      	b.n	800c38e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	891b      	ldrh	r3, [r3, #8]
 800c2a8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d902      	bls.n	800c2b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b4:	e06b      	b.n	800c38e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c2b6:	2108      	movs	r1, #8
 800c2b8:	68b8      	ldr	r0, [r7, #8]
 800c2ba:	f7f9 fe65 	bl	8005f88 <pbuf_add_header>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d015      	beq.n	800c2f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c2c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c2c8:	2108      	movs	r1, #8
 800c2ca:	2022      	movs	r0, #34	; 0x22
 800c2cc:	f7f9 fc0e 	bl	8005aec <pbuf_alloc>
 800c2d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d102      	bne.n	800c2de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c2dc:	e057      	b.n	800c38e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	891b      	ldrh	r3, [r3, #8]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d006      	beq.n	800c2f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	69f8      	ldr	r0, [r7, #28]
 800c2ea:	f7f9 fffb 	bl	80062e4 <pbuf_chain>
 800c2ee:	e001      	b.n	800c2f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	895b      	ldrh	r3, [r3, #10]
 800c2f8:	2b07      	cmp	r3, #7
 800c2fa:	d806      	bhi.n	800c30a <udp_sendto_if_src+0x11e>
 800c2fc:	4b26      	ldr	r3, [pc, #152]	; (800c398 <udp_sendto_if_src+0x1ac>)
 800c2fe:	f240 320d 	movw	r2, #781	; 0x30d
 800c302:	492c      	ldr	r1, [pc, #176]	; (800c3b4 <udp_sendto_if_src+0x1c8>)
 800c304:	4826      	ldr	r0, [pc, #152]	; (800c3a0 <udp_sendto_if_src+0x1b4>)
 800c306:	f002 fe75 	bl	800eff4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	8a5b      	ldrh	r3, [r3, #18]
 800c314:	4618      	mov	r0, r3
 800c316:	f7f8 fb6f 	bl	80049f8 <lwip_htons>
 800c31a:	4603      	mov	r3, r0
 800c31c:	461a      	mov	r2, r3
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c322:	887b      	ldrh	r3, [r7, #2]
 800c324:	4618      	mov	r0, r3
 800c326:	f7f8 fb67 	bl	80049f8 <lwip_htons>
 800c32a:	4603      	mov	r3, r0
 800c32c:	461a      	mov	r2, r3
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2200      	movs	r2, #0
 800c336:	719a      	strb	r2, [r3, #6]
 800c338:	2200      	movs	r2, #0
 800c33a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	891b      	ldrh	r3, [r3, #8]
 800c340:	4618      	mov	r0, r3
 800c342:	f7f8 fb59 	bl	80049f8 <lwip_htons>
 800c346:	4603      	mov	r3, r0
 800c348:	461a      	mov	r2, r3
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c34e:	2311      	movs	r3, #17
 800c350:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	7adb      	ldrb	r3, [r3, #11]
 800c356:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	7a9b      	ldrb	r3, [r3, #10]
 800c35c:	7cb9      	ldrb	r1, [r7, #18]
 800c35e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c360:	9202      	str	r2, [sp, #8]
 800c362:	7cfa      	ldrb	r2, [r7, #19]
 800c364:	9201      	str	r2, [sp, #4]
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	460b      	mov	r3, r1
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c36e:	69f8      	ldr	r0, [r7, #28]
 800c370:	f001 fcac 	bl	800dccc <ip4_output_if_src>
 800c374:	4603      	mov	r3, r0
 800c376:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c378:	69fa      	ldr	r2, [r7, #28]
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d004      	beq.n	800c38a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c380:	69f8      	ldr	r0, [r7, #28]
 800c382:	f7f9 fe97 	bl	80060b4 <pbuf_free>
    q = NULL;
 800c386:	2300      	movs	r3, #0
 800c388:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c38a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3720      	adds	r7, #32
 800c392:	46bd      	mov	sp, r7
 800c394:	bd80      	pop	{r7, pc}
 800c396:	bf00      	nop
 800c398:	08012194 	.word	0x08012194
 800c39c:	08012380 	.word	0x08012380
 800c3a0:	080121e8 	.word	0x080121e8
 800c3a4:	080123a0 	.word	0x080123a0
 800c3a8:	080123c0 	.word	0x080123c0
 800c3ac:	080123e4 	.word	0x080123e4
 800c3b0:	08012408 	.word	0x08012408
 800c3b4:	0801242c 	.word	0x0801242c

0800c3b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d101      	bne.n	800c3d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c3cc:	4b39      	ldr	r3, [pc, #228]	; (800c4b4 <udp_bind+0xfc>)
 800c3ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d109      	bne.n	800c3ea <udp_bind+0x32>
 800c3d6:	4b38      	ldr	r3, [pc, #224]	; (800c4b8 <udp_bind+0x100>)
 800c3d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c3dc:	4937      	ldr	r1, [pc, #220]	; (800c4bc <udp_bind+0x104>)
 800c3de:	4838      	ldr	r0, [pc, #224]	; (800c4c0 <udp_bind+0x108>)
 800c3e0:	f002 fe08 	bl	800eff4 <iprintf>
 800c3e4:	f06f 030f 	mvn.w	r3, #15
 800c3e8:	e060      	b.n	800c4ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c3ee:	4b35      	ldr	r3, [pc, #212]	; (800c4c4 <udp_bind+0x10c>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	617b      	str	r3, [r7, #20]
 800c3f4:	e009      	b.n	800c40a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d102      	bne.n	800c404 <udp_bind+0x4c>
      rebind = 1;
 800c3fe:	2301      	movs	r3, #1
 800c400:	74fb      	strb	r3, [r7, #19]
      break;
 800c402:	e005      	b.n	800c410 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	617b      	str	r3, [r7, #20]
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1f2      	bne.n	800c3f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c410:	88fb      	ldrh	r3, [r7, #6]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d109      	bne.n	800c42a <udp_bind+0x72>
    port = udp_new_port();
 800c416:	f7ff fc35 	bl	800bc84 <udp_new_port>
 800c41a:	4603      	mov	r3, r0
 800c41c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c41e:	88fb      	ldrh	r3, [r7, #6]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d12c      	bne.n	800c47e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c424:	f06f 0307 	mvn.w	r3, #7
 800c428:	e040      	b.n	800c4ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c42a:	4b26      	ldr	r3, [pc, #152]	; (800c4c4 <udp_bind+0x10c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	617b      	str	r3, [r7, #20]
 800c430:	e022      	b.n	800c478 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	429a      	cmp	r2, r3
 800c438:	d01b      	beq.n	800c472 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	8a5b      	ldrh	r3, [r3, #18]
 800c43e:	88fa      	ldrh	r2, [r7, #6]
 800c440:	429a      	cmp	r2, r3
 800c442:	d116      	bne.n	800c472 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d00d      	beq.n	800c46c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00a      	beq.n	800c46c <udp_bind+0xb4>
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d006      	beq.n	800c46c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c45e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c460:	2b00      	cmp	r3, #0
 800c462:	d003      	beq.n	800c46c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d102      	bne.n	800c472 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c46c:	f06f 0307 	mvn.w	r3, #7
 800c470:	e01c      	b.n	800c4ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c472:	697b      	ldr	r3, [r7, #20]
 800c474:	68db      	ldr	r3, [r3, #12]
 800c476:	617b      	str	r3, [r7, #20]
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1d9      	bne.n	800c432 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d002      	beq.n	800c48a <udp_bind+0xd2>
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	e000      	b.n	800c48c <udp_bind+0xd4>
 800c48a:	2300      	movs	r3, #0
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	88fa      	ldrh	r2, [r7, #6]
 800c494:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c496:	7cfb      	ldrb	r3, [r7, #19]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d106      	bne.n	800c4aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c49c:	4b09      	ldr	r3, [pc, #36]	; (800c4c4 <udp_bind+0x10c>)
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c4a4:	4a07      	ldr	r2, [pc, #28]	; (800c4c4 <udp_bind+0x10c>)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3718      	adds	r7, #24
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	08012cb0 	.word	0x08012cb0
 800c4b8:	08012194 	.word	0x08012194
 800c4bc:	0801245c 	.word	0x0801245c
 800c4c0:	080121e8 	.word	0x080121e8
 800c4c4:	200087c8 	.word	0x200087c8

0800c4c8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d109      	bne.n	800c4f0 <udp_connect+0x28>
 800c4dc:	4b2c      	ldr	r3, [pc, #176]	; (800c590 <udp_connect+0xc8>)
 800c4de:	f240 4235 	movw	r2, #1077	; 0x435
 800c4e2:	492c      	ldr	r1, [pc, #176]	; (800c594 <udp_connect+0xcc>)
 800c4e4:	482c      	ldr	r0, [pc, #176]	; (800c598 <udp_connect+0xd0>)
 800c4e6:	f002 fd85 	bl	800eff4 <iprintf>
 800c4ea:	f06f 030f 	mvn.w	r3, #15
 800c4ee:	e04b      	b.n	800c588 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d109      	bne.n	800c50a <udp_connect+0x42>
 800c4f6:	4b26      	ldr	r3, [pc, #152]	; (800c590 <udp_connect+0xc8>)
 800c4f8:	f240 4236 	movw	r2, #1078	; 0x436
 800c4fc:	4927      	ldr	r1, [pc, #156]	; (800c59c <udp_connect+0xd4>)
 800c4fe:	4826      	ldr	r0, [pc, #152]	; (800c598 <udp_connect+0xd0>)
 800c500:	f002 fd78 	bl	800eff4 <iprintf>
 800c504:	f06f 030f 	mvn.w	r3, #15
 800c508:	e03e      	b.n	800c588 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	8a5b      	ldrh	r3, [r3, #18]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d10f      	bne.n	800c532 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c512:	68f9      	ldr	r1, [r7, #12]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	8a5b      	ldrh	r3, [r3, #18]
 800c518:	461a      	mov	r2, r3
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f7ff ff4c 	bl	800c3b8 <udp_bind>
 800c520:	4603      	mov	r3, r0
 800c522:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c524:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <udp_connect+0x6a>
      return err;
 800c52c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c530:	e02a      	b.n	800c588 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <udp_connect+0x76>
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	e000      	b.n	800c540 <udp_connect+0x78>
 800c53e:	2300      	movs	r3, #0
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	88fa      	ldrh	r2, [r7, #6]
 800c548:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	7c1b      	ldrb	r3, [r3, #16]
 800c54e:	f043 0304 	orr.w	r3, r3, #4
 800c552:	b2da      	uxtb	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c558:	4b11      	ldr	r3, [pc, #68]	; (800c5a0 <udp_connect+0xd8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	617b      	str	r3, [r7, #20]
 800c55e:	e008      	b.n	800c572 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	429a      	cmp	r2, r3
 800c566:	d101      	bne.n	800c56c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c568:	2300      	movs	r3, #0
 800c56a:	e00d      	b.n	800c588 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	617b      	str	r3, [r7, #20]
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1f3      	bne.n	800c560 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c578:	4b09      	ldr	r3, [pc, #36]	; (800c5a0 <udp_connect+0xd8>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c580:	4a07      	ldr	r2, [pc, #28]	; (800c5a0 <udp_connect+0xd8>)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c586:	2300      	movs	r3, #0
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3718      	adds	r7, #24
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}
 800c590:	08012194 	.word	0x08012194
 800c594:	08012474 	.word	0x08012474
 800c598:	080121e8 	.word	0x080121e8
 800c59c:	08012490 	.word	0x08012490
 800c5a0:	200087c8 	.word	0x200087c8

0800c5a4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d107      	bne.n	800c5c2 <udp_disconnect+0x1e>
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <udp_disconnect+0x44>)
 800c5b4:	f240 426a 	movw	r2, #1130	; 0x46a
 800c5b8:	490c      	ldr	r1, [pc, #48]	; (800c5ec <udp_disconnect+0x48>)
 800c5ba:	480d      	ldr	r0, [pc, #52]	; (800c5f0 <udp_disconnect+0x4c>)
 800c5bc:	f002 fd1a 	bl	800eff4 <iprintf>
 800c5c0:	e00f      	b.n	800c5e2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	7c1b      	ldrb	r3, [r3, #16]
 800c5d8:	f023 0304 	bic.w	r3, r3, #4
 800c5dc:	b2da      	uxtb	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	741a      	strb	r2, [r3, #16]
}
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	08012194 	.word	0x08012194
 800c5ec:	080124ac 	.word	0x080124ac
 800c5f0:	080121e8 	.word	0x080121e8

0800c5f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d107      	bne.n	800c616 <udp_recv+0x22>
 800c606:	4b08      	ldr	r3, [pc, #32]	; (800c628 <udp_recv+0x34>)
 800c608:	f240 428a 	movw	r2, #1162	; 0x48a
 800c60c:	4907      	ldr	r1, [pc, #28]	; (800c62c <udp_recv+0x38>)
 800c60e:	4808      	ldr	r0, [pc, #32]	; (800c630 <udp_recv+0x3c>)
 800c610:	f002 fcf0 	bl	800eff4 <iprintf>
 800c614:	e005      	b.n	800c622 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	61da      	str	r2, [r3, #28]
}
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	08012194 	.word	0x08012194
 800c62c:	080124c8 	.word	0x080124c8
 800c630:	080121e8 	.word	0x080121e8

0800c634 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d107      	bne.n	800c652 <udp_remove+0x1e>
 800c642:	4b19      	ldr	r3, [pc, #100]	; (800c6a8 <udp_remove+0x74>)
 800c644:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c648:	4918      	ldr	r1, [pc, #96]	; (800c6ac <udp_remove+0x78>)
 800c64a:	4819      	ldr	r0, [pc, #100]	; (800c6b0 <udp_remove+0x7c>)
 800c64c:	f002 fcd2 	bl	800eff4 <iprintf>
 800c650:	e026      	b.n	800c6a0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c652:	4b18      	ldr	r3, [pc, #96]	; (800c6b4 <udp_remove+0x80>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d105      	bne.n	800c668 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c65c:	4b15      	ldr	r3, [pc, #84]	; (800c6b4 <udp_remove+0x80>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68db      	ldr	r3, [r3, #12]
 800c662:	4a14      	ldr	r2, [pc, #80]	; (800c6b4 <udp_remove+0x80>)
 800c664:	6013      	str	r3, [r2, #0]
 800c666:	e017      	b.n	800c698 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c668:	4b12      	ldr	r3, [pc, #72]	; (800c6b4 <udp_remove+0x80>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	60fb      	str	r3, [r7, #12]
 800c66e:	e010      	b.n	800c692 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	68db      	ldr	r3, [r3, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d009      	beq.n	800c68c <udp_remove+0x58>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d104      	bne.n	800c68c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	60da      	str	r2, [r3, #12]
        break;
 800c68a:	e005      	b.n	800c698 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	60fb      	str	r3, [r7, #12]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1eb      	bne.n	800c670 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c698:	6879      	ldr	r1, [r7, #4]
 800c69a:	2000      	movs	r0, #0
 800c69c:	f7f8 fe94 	bl	80053c8 <memp_free>
}
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	08012194 	.word	0x08012194
 800c6ac:	080124e0 	.word	0x080124e0
 800c6b0:	080121e8 	.word	0x080121e8
 800c6b4:	200087c8 	.word	0x200087c8

0800c6b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c6be:	2000      	movs	r0, #0
 800c6c0:	f7f8 fe12 	bl	80052e8 <memp_malloc>
 800c6c4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d007      	beq.n	800c6dc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c6cc:	2220      	movs	r2, #32
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f002 fd2e 	bl	800f132 <memset>
    pcb->ttl = UDP_TTL;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	22ff      	movs	r2, #255	; 0xff
 800c6da:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c6dc:	687b      	ldr	r3, [r7, #4]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
	...

0800c6e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d01e      	beq.n	800c736 <udp_netif_ip_addr_changed+0x4e>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d01a      	beq.n	800c736 <udp_netif_ip_addr_changed+0x4e>
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d017      	beq.n	800c736 <udp_netif_ip_addr_changed+0x4e>
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d013      	beq.n	800c736 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c70e:	4b0d      	ldr	r3, [pc, #52]	; (800c744 <udp_netif_ip_addr_changed+0x5c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	60fb      	str	r3, [r7, #12]
 800c714:	e00c      	b.n	800c730 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	429a      	cmp	r2, r3
 800c720:	d103      	bne.n	800c72a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1ef      	bne.n	800c716 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c736:	bf00      	nop
 800c738:	3714      	adds	r7, #20
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr
 800c742:	bf00      	nop
 800c744:	200087c8 	.word	0x200087c8

0800c748 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b082      	sub	sp, #8
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c750:	4915      	ldr	r1, [pc, #84]	; (800c7a8 <etharp_free_entry+0x60>)
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	4613      	mov	r3, r2
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	4413      	add	r3, r2
 800c75a:	00db      	lsls	r3, r3, #3
 800c75c:	440b      	add	r3, r1
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d013      	beq.n	800c78c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c764:	4910      	ldr	r1, [pc, #64]	; (800c7a8 <etharp_free_entry+0x60>)
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	4613      	mov	r3, r2
 800c76a:	005b      	lsls	r3, r3, #1
 800c76c:	4413      	add	r3, r2
 800c76e:	00db      	lsls	r3, r3, #3
 800c770:	440b      	add	r3, r1
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4618      	mov	r0, r3
 800c776:	f7f9 fc9d 	bl	80060b4 <pbuf_free>
    arp_table[i].q = NULL;
 800c77a:	490b      	ldr	r1, [pc, #44]	; (800c7a8 <etharp_free_entry+0x60>)
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	4613      	mov	r3, r2
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4413      	add	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	440b      	add	r3, r1
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c78c:	4906      	ldr	r1, [pc, #24]	; (800c7a8 <etharp_free_entry+0x60>)
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	4613      	mov	r3, r2
 800c792:	005b      	lsls	r3, r3, #1
 800c794:	4413      	add	r3, r2
 800c796:	00db      	lsls	r3, r3, #3
 800c798:	440b      	add	r3, r1
 800c79a:	3314      	adds	r3, #20
 800c79c:	2200      	movs	r2, #0
 800c79e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c7a0:	bf00      	nop
 800c7a2:	3708      	adds	r7, #8
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	200087cc 	.word	0x200087cc

0800c7ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	607b      	str	r3, [r7, #4]
 800c7b6:	e096      	b.n	800c8e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c7b8:	494f      	ldr	r1, [pc, #316]	; (800c8f8 <etharp_tmr+0x14c>)
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	4413      	add	r3, r2
 800c7c2:	00db      	lsls	r3, r3, #3
 800c7c4:	440b      	add	r3, r1
 800c7c6:	3314      	adds	r3, #20
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c7cc:	78fb      	ldrb	r3, [r7, #3]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f000 8086 	beq.w	800c8e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c7d4:	4948      	ldr	r1, [pc, #288]	; (800c8f8 <etharp_tmr+0x14c>)
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	4613      	mov	r3, r2
 800c7da:	005b      	lsls	r3, r3, #1
 800c7dc:	4413      	add	r3, r2
 800c7de:	00db      	lsls	r3, r3, #3
 800c7e0:	440b      	add	r3, r1
 800c7e2:	3312      	adds	r3, #18
 800c7e4:	881b      	ldrh	r3, [r3, #0]
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	b298      	uxth	r0, r3
 800c7ea:	4943      	ldr	r1, [pc, #268]	; (800c8f8 <etharp_tmr+0x14c>)
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	005b      	lsls	r3, r3, #1
 800c7f2:	4413      	add	r3, r2
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	440b      	add	r3, r1
 800c7f8:	3312      	adds	r3, #18
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c7fe:	493e      	ldr	r1, [pc, #248]	; (800c8f8 <etharp_tmr+0x14c>)
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	4613      	mov	r3, r2
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	440b      	add	r3, r1
 800c80c:	3312      	adds	r3, #18
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c814:	d215      	bcs.n	800c842 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c816:	4938      	ldr	r1, [pc, #224]	; (800c8f8 <etharp_tmr+0x14c>)
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	4613      	mov	r3, r2
 800c81c:	005b      	lsls	r3, r3, #1
 800c81e:	4413      	add	r3, r2
 800c820:	00db      	lsls	r3, r3, #3
 800c822:	440b      	add	r3, r1
 800c824:	3314      	adds	r3, #20
 800c826:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d10e      	bne.n	800c84a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c82c:	4932      	ldr	r1, [pc, #200]	; (800c8f8 <etharp_tmr+0x14c>)
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	4613      	mov	r3, r2
 800c832:	005b      	lsls	r3, r3, #1
 800c834:	4413      	add	r3, r2
 800c836:	00db      	lsls	r3, r3, #3
 800c838:	440b      	add	r3, r1
 800c83a:	3312      	adds	r3, #18
 800c83c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c83e:	2b04      	cmp	r3, #4
 800c840:	d903      	bls.n	800c84a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f7ff ff80 	bl	800c748 <etharp_free_entry>
 800c848:	e04a      	b.n	800c8e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c84a:	492b      	ldr	r1, [pc, #172]	; (800c8f8 <etharp_tmr+0x14c>)
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	4613      	mov	r3, r2
 800c850:	005b      	lsls	r3, r3, #1
 800c852:	4413      	add	r3, r2
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	440b      	add	r3, r1
 800c858:	3314      	adds	r3, #20
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	2b03      	cmp	r3, #3
 800c85e:	d10a      	bne.n	800c876 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c860:	4925      	ldr	r1, [pc, #148]	; (800c8f8 <etharp_tmr+0x14c>)
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4613      	mov	r3, r2
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	4413      	add	r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	440b      	add	r3, r1
 800c86e:	3314      	adds	r3, #20
 800c870:	2204      	movs	r2, #4
 800c872:	701a      	strb	r2, [r3, #0]
 800c874:	e034      	b.n	800c8e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c876:	4920      	ldr	r1, [pc, #128]	; (800c8f8 <etharp_tmr+0x14c>)
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	4613      	mov	r3, r2
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	440b      	add	r3, r1
 800c884:	3314      	adds	r3, #20
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	2b04      	cmp	r3, #4
 800c88a:	d10a      	bne.n	800c8a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c88c:	491a      	ldr	r1, [pc, #104]	; (800c8f8 <etharp_tmr+0x14c>)
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	4613      	mov	r3, r2
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	4413      	add	r3, r2
 800c896:	00db      	lsls	r3, r3, #3
 800c898:	440b      	add	r3, r1
 800c89a:	3314      	adds	r3, #20
 800c89c:	2202      	movs	r2, #2
 800c89e:	701a      	strb	r2, [r3, #0]
 800c8a0:	e01e      	b.n	800c8e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c8a2:	4915      	ldr	r1, [pc, #84]	; (800c8f8 <etharp_tmr+0x14c>)
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	4613      	mov	r3, r2
 800c8a8:	005b      	lsls	r3, r3, #1
 800c8aa:	4413      	add	r3, r2
 800c8ac:	00db      	lsls	r3, r3, #3
 800c8ae:	440b      	add	r3, r1
 800c8b0:	3314      	adds	r3, #20
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d113      	bne.n	800c8e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c8b8:	490f      	ldr	r1, [pc, #60]	; (800c8f8 <etharp_tmr+0x14c>)
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	005b      	lsls	r3, r3, #1
 800c8c0:	4413      	add	r3, r2
 800c8c2:	00db      	lsls	r3, r3, #3
 800c8c4:	440b      	add	r3, r1
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	6818      	ldr	r0, [r3, #0]
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	4413      	add	r3, r2
 800c8d2:	00db      	lsls	r3, r3, #3
 800c8d4:	4a08      	ldr	r2, [pc, #32]	; (800c8f8 <etharp_tmr+0x14c>)
 800c8d6:	4413      	add	r3, r2
 800c8d8:	3304      	adds	r3, #4
 800c8da:	4619      	mov	r1, r3
 800c8dc:	f000 fe6e 	bl	800d5bc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	607b      	str	r3, [r7, #4]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b09      	cmp	r3, #9
 800c8ea:	f77f af65 	ble.w	800c7b8 <etharp_tmr+0xc>
      }
    }
  }
}
 800c8ee:	bf00      	nop
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	200087cc 	.word	0x200087cc

0800c8fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b08a      	sub	sp, #40	; 0x28
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	460b      	mov	r3, r1
 800c906:	607a      	str	r2, [r7, #4]
 800c908:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c90a:	230a      	movs	r3, #10
 800c90c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c90e:	230a      	movs	r3, #10
 800c910:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c912:	230a      	movs	r3, #10
 800c914:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c91a:	230a      	movs	r3, #10
 800c91c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c91e:	2300      	movs	r3, #0
 800c920:	83bb      	strh	r3, [r7, #28]
 800c922:	2300      	movs	r3, #0
 800c924:	837b      	strh	r3, [r7, #26]
 800c926:	2300      	movs	r3, #0
 800c928:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c92a:	2300      	movs	r3, #0
 800c92c:	843b      	strh	r3, [r7, #32]
 800c92e:	e0ae      	b.n	800ca8e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c934:	49a6      	ldr	r1, [pc, #664]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800c936:	4613      	mov	r3, r2
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	4413      	add	r3, r2
 800c93c:	00db      	lsls	r3, r3, #3
 800c93e:	440b      	add	r3, r1
 800c940:	3314      	adds	r3, #20
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c946:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c94a:	2b0a      	cmp	r3, #10
 800c94c:	d105      	bne.n	800c95a <etharp_find_entry+0x5e>
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d102      	bne.n	800c95a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c954:	8c3b      	ldrh	r3, [r7, #32]
 800c956:	847b      	strh	r3, [r7, #34]	; 0x22
 800c958:	e095      	b.n	800ca86 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	f000 8092 	beq.w	800ca86 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c962:	7dfb      	ldrb	r3, [r7, #23]
 800c964:	2b01      	cmp	r3, #1
 800c966:	d009      	beq.n	800c97c <etharp_find_entry+0x80>
 800c968:	7dfb      	ldrb	r3, [r7, #23]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	d806      	bhi.n	800c97c <etharp_find_entry+0x80>
 800c96e:	4b99      	ldr	r3, [pc, #612]	; (800cbd4 <etharp_find_entry+0x2d8>)
 800c970:	f240 1223 	movw	r2, #291	; 0x123
 800c974:	4998      	ldr	r1, [pc, #608]	; (800cbd8 <etharp_find_entry+0x2dc>)
 800c976:	4899      	ldr	r0, [pc, #612]	; (800cbdc <etharp_find_entry+0x2e0>)
 800c978:	f002 fb3c 	bl	800eff4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d020      	beq.n	800c9c4 <etharp_find_entry+0xc8>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6819      	ldr	r1, [r3, #0]
 800c986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c98a:	4891      	ldr	r0, [pc, #580]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800c98c:	4613      	mov	r3, r2
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	4413      	add	r3, r2
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	4403      	add	r3, r0
 800c996:	3304      	adds	r3, #4
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4299      	cmp	r1, r3
 800c99c:	d112      	bne.n	800c9c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00c      	beq.n	800c9be <etharp_find_entry+0xc2>
 800c9a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9a8:	4989      	ldr	r1, [pc, #548]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800c9aa:	4613      	mov	r3, r2
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	4413      	add	r3, r2
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	440b      	add	r3, r1
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d102      	bne.n	800c9c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c9be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c9c2:	e100      	b.n	800cbc6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c9c4:	7dfb      	ldrb	r3, [r7, #23]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d140      	bne.n	800ca4c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c9ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9ce:	4980      	ldr	r1, [pc, #512]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	4413      	add	r3, r2
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	440b      	add	r3, r1
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d01a      	beq.n	800ca16 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c9e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9e4:	497a      	ldr	r1, [pc, #488]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800c9e6:	4613      	mov	r3, r2
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	4413      	add	r3, r2
 800c9ec:	00db      	lsls	r3, r3, #3
 800c9ee:	440b      	add	r3, r1
 800c9f0:	3312      	adds	r3, #18
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	8bba      	ldrh	r2, [r7, #28]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d845      	bhi.n	800ca86 <etharp_find_entry+0x18a>
            old_queue = i;
 800c9fa:	8c3b      	ldrh	r3, [r7, #32]
 800c9fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c9fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca02:	4973      	ldr	r1, [pc, #460]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800ca04:	4613      	mov	r3, r2
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	4413      	add	r3, r2
 800ca0a:	00db      	lsls	r3, r3, #3
 800ca0c:	440b      	add	r3, r1
 800ca0e:	3312      	adds	r3, #18
 800ca10:	881b      	ldrh	r3, [r3, #0]
 800ca12:	83bb      	strh	r3, [r7, #28]
 800ca14:	e037      	b.n	800ca86 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ca16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca1a:	496d      	ldr	r1, [pc, #436]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	4413      	add	r3, r2
 800ca22:	00db      	lsls	r3, r3, #3
 800ca24:	440b      	add	r3, r1
 800ca26:	3312      	adds	r3, #18
 800ca28:	881b      	ldrh	r3, [r3, #0]
 800ca2a:	8b7a      	ldrh	r2, [r7, #26]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d82a      	bhi.n	800ca86 <etharp_find_entry+0x18a>
            old_pending = i;
 800ca30:	8c3b      	ldrh	r3, [r7, #32]
 800ca32:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ca34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca38:	4965      	ldr	r1, [pc, #404]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	005b      	lsls	r3, r3, #1
 800ca3e:	4413      	add	r3, r2
 800ca40:	00db      	lsls	r3, r3, #3
 800ca42:	440b      	add	r3, r1
 800ca44:	3312      	adds	r3, #18
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	837b      	strh	r3, [r7, #26]
 800ca4a:	e01c      	b.n	800ca86 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ca4c:	7dfb      	ldrb	r3, [r7, #23]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d919      	bls.n	800ca86 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ca52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca56:	495e      	ldr	r1, [pc, #376]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800ca58:	4613      	mov	r3, r2
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	4413      	add	r3, r2
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	440b      	add	r3, r1
 800ca62:	3312      	adds	r3, #18
 800ca64:	881b      	ldrh	r3, [r3, #0]
 800ca66:	8b3a      	ldrh	r2, [r7, #24]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d80c      	bhi.n	800ca86 <etharp_find_entry+0x18a>
            old_stable = i;
 800ca6c:	8c3b      	ldrh	r3, [r7, #32]
 800ca6e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ca70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca74:	4956      	ldr	r1, [pc, #344]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800ca76:	4613      	mov	r3, r2
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	4413      	add	r3, r2
 800ca7c:	00db      	lsls	r3, r3, #3
 800ca7e:	440b      	add	r3, r1
 800ca80:	3312      	adds	r3, #18
 800ca82:	881b      	ldrh	r3, [r3, #0]
 800ca84:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ca86:	8c3b      	ldrh	r3, [r7, #32]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	843b      	strh	r3, [r7, #32]
 800ca8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ca92:	2b09      	cmp	r3, #9
 800ca94:	f77f af4c 	ble.w	800c930 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ca98:	7afb      	ldrb	r3, [r7, #11]
 800ca9a:	f003 0302 	and.w	r3, r3, #2
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d108      	bne.n	800cab4 <etharp_find_entry+0x1b8>
 800caa2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800caa6:	2b0a      	cmp	r3, #10
 800caa8:	d107      	bne.n	800caba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800caaa:	7afb      	ldrb	r3, [r7, #11]
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d102      	bne.n	800caba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cab4:	f04f 33ff 	mov.w	r3, #4294967295
 800cab8:	e085      	b.n	800cbc6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800caba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cabe:	2b09      	cmp	r3, #9
 800cac0:	dc02      	bgt.n	800cac8 <etharp_find_entry+0x1cc>
    i = empty;
 800cac2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cac4:	843b      	strh	r3, [r7, #32]
 800cac6:	e039      	b.n	800cb3c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800cac8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800cacc:	2b09      	cmp	r3, #9
 800cace:	dc14      	bgt.n	800cafa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cad2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cad8:	493d      	ldr	r1, [pc, #244]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800cada:	4613      	mov	r3, r2
 800cadc:	005b      	lsls	r3, r3, #1
 800cade:	4413      	add	r3, r2
 800cae0:	00db      	lsls	r3, r3, #3
 800cae2:	440b      	add	r3, r1
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d018      	beq.n	800cb1c <etharp_find_entry+0x220>
 800caea:	4b3a      	ldr	r3, [pc, #232]	; (800cbd4 <etharp_find_entry+0x2d8>)
 800caec:	f240 126d 	movw	r2, #365	; 0x16d
 800caf0:	493b      	ldr	r1, [pc, #236]	; (800cbe0 <etharp_find_entry+0x2e4>)
 800caf2:	483a      	ldr	r0, [pc, #232]	; (800cbdc <etharp_find_entry+0x2e0>)
 800caf4:	f002 fa7e 	bl	800eff4 <iprintf>
 800caf8:	e010      	b.n	800cb1c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cafa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cafe:	2b09      	cmp	r3, #9
 800cb00:	dc02      	bgt.n	800cb08 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cb02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb04:	843b      	strh	r3, [r7, #32]
 800cb06:	e009      	b.n	800cb1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cb08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cb0c:	2b09      	cmp	r3, #9
 800cb0e:	dc02      	bgt.n	800cb16 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cb10:	8bfb      	ldrh	r3, [r7, #30]
 800cb12:	843b      	strh	r3, [r7, #32]
 800cb14:	e002      	b.n	800cb1c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cb16:	f04f 33ff 	mov.w	r3, #4294967295
 800cb1a:	e054      	b.n	800cbc6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cb1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb20:	2b09      	cmp	r3, #9
 800cb22:	dd06      	ble.n	800cb32 <etharp_find_entry+0x236>
 800cb24:	4b2b      	ldr	r3, [pc, #172]	; (800cbd4 <etharp_find_entry+0x2d8>)
 800cb26:	f240 127f 	movw	r2, #383	; 0x17f
 800cb2a:	492e      	ldr	r1, [pc, #184]	; (800cbe4 <etharp_find_entry+0x2e8>)
 800cb2c:	482b      	ldr	r0, [pc, #172]	; (800cbdc <etharp_find_entry+0x2e0>)
 800cb2e:	f002 fa61 	bl	800eff4 <iprintf>
    etharp_free_entry(i);
 800cb32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7ff fe06 	bl	800c748 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cb3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cb40:	2b09      	cmp	r3, #9
 800cb42:	dd06      	ble.n	800cb52 <etharp_find_entry+0x256>
 800cb44:	4b23      	ldr	r3, [pc, #140]	; (800cbd4 <etharp_find_entry+0x2d8>)
 800cb46:	f240 1283 	movw	r2, #387	; 0x183
 800cb4a:	4926      	ldr	r1, [pc, #152]	; (800cbe4 <etharp_find_entry+0x2e8>)
 800cb4c:	4823      	ldr	r0, [pc, #140]	; (800cbdc <etharp_find_entry+0x2e0>)
 800cb4e:	f002 fa51 	bl	800eff4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cb52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb56:	491e      	ldr	r1, [pc, #120]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800cb58:	4613      	mov	r3, r2
 800cb5a:	005b      	lsls	r3, r3, #1
 800cb5c:	4413      	add	r3, r2
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	440b      	add	r3, r1
 800cb62:	3314      	adds	r3, #20
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d006      	beq.n	800cb78 <etharp_find_entry+0x27c>
 800cb6a:	4b1a      	ldr	r3, [pc, #104]	; (800cbd4 <etharp_find_entry+0x2d8>)
 800cb6c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cb70:	491d      	ldr	r1, [pc, #116]	; (800cbe8 <etharp_find_entry+0x2ec>)
 800cb72:	481a      	ldr	r0, [pc, #104]	; (800cbdc <etharp_find_entry+0x2e0>)
 800cb74:	f002 fa3e 	bl	800eff4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d00b      	beq.n	800cb96 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cb7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6819      	ldr	r1, [r3, #0]
 800cb86:	4812      	ldr	r0, [pc, #72]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800cb88:	4613      	mov	r3, r2
 800cb8a:	005b      	lsls	r3, r3, #1
 800cb8c:	4413      	add	r3, r2
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	4403      	add	r3, r0
 800cb92:	3304      	adds	r3, #4
 800cb94:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cb96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb9a:	490d      	ldr	r1, [pc, #52]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	4413      	add	r3, r2
 800cba2:	00db      	lsls	r3, r3, #3
 800cba4:	440b      	add	r3, r1
 800cba6:	3312      	adds	r3, #18
 800cba8:	2200      	movs	r2, #0
 800cbaa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cbac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbb0:	4907      	ldr	r1, [pc, #28]	; (800cbd0 <etharp_find_entry+0x2d4>)
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	005b      	lsls	r3, r3, #1
 800cbb6:	4413      	add	r3, r2
 800cbb8:	00db      	lsls	r3, r3, #3
 800cbba:	440b      	add	r3, r1
 800cbbc:	3308      	adds	r3, #8
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cbc2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3728      	adds	r7, #40	; 0x28
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	200087cc 	.word	0x200087cc
 800cbd4:	080124f8 	.word	0x080124f8
 800cbd8:	08012530 	.word	0x08012530
 800cbdc:	08012570 	.word	0x08012570
 800cbe0:	08012598 	.word	0x08012598
 800cbe4:	080125b0 	.word	0x080125b0
 800cbe8:	080125c4 	.word	0x080125c4

0800cbec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af02      	add	r7, sp, #8
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc00:	2b06      	cmp	r3, #6
 800cc02:	d006      	beq.n	800cc12 <etharp_update_arp_entry+0x26>
 800cc04:	4b48      	ldr	r3, [pc, #288]	; (800cd28 <etharp_update_arp_entry+0x13c>)
 800cc06:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cc0a:	4948      	ldr	r1, [pc, #288]	; (800cd2c <etharp_update_arp_entry+0x140>)
 800cc0c:	4848      	ldr	r0, [pc, #288]	; (800cd30 <etharp_update_arp_entry+0x144>)
 800cc0e:	f002 f9f1 	bl	800eff4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d012      	beq.n	800cc3e <etharp_update_arp_entry+0x52>
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d00e      	beq.n	800cc3e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	68f9      	ldr	r1, [r7, #12]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f001 f8fe 	bl	800de28 <ip4_addr_isbroadcast_u32>
 800cc2c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d105      	bne.n	800cc3e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc3a:	2be0      	cmp	r3, #224	; 0xe0
 800cc3c:	d102      	bne.n	800cc44 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cc3e:	f06f 030f 	mvn.w	r3, #15
 800cc42:	e06c      	b.n	800cd1e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cc44:	78fb      	ldrb	r3, [r7, #3]
 800cc46:	68fa      	ldr	r2, [r7, #12]
 800cc48:	4619      	mov	r1, r3
 800cc4a:	68b8      	ldr	r0, [r7, #8]
 800cc4c:	f7ff fe56 	bl	800c8fc <etharp_find_entry>
 800cc50:	4603      	mov	r3, r0
 800cc52:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cc54:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	da02      	bge.n	800cc62 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800cc5c:	8afb      	ldrh	r3, [r7, #22]
 800cc5e:	b25b      	sxtb	r3, r3
 800cc60:	e05d      	b.n	800cd1e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800cc62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc66:	4933      	ldr	r1, [pc, #204]	; (800cd34 <etharp_update_arp_entry+0x148>)
 800cc68:	4613      	mov	r3, r2
 800cc6a:	005b      	lsls	r3, r3, #1
 800cc6c:	4413      	add	r3, r2
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	440b      	add	r3, r1
 800cc72:	3314      	adds	r3, #20
 800cc74:	2202      	movs	r2, #2
 800cc76:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cc78:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc7c:	492d      	ldr	r1, [pc, #180]	; (800cd34 <etharp_update_arp_entry+0x148>)
 800cc7e:	4613      	mov	r3, r2
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	440b      	add	r3, r1
 800cc88:	3308      	adds	r3, #8
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cc8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cc92:	4613      	mov	r3, r2
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	4413      	add	r3, r2
 800cc98:	00db      	lsls	r3, r3, #3
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	4a25      	ldr	r2, [pc, #148]	; (800cd34 <etharp_update_arp_entry+0x148>)
 800cc9e:	4413      	add	r3, r2
 800cca0:	3304      	adds	r3, #4
 800cca2:	2206      	movs	r2, #6
 800cca4:	6879      	ldr	r1, [r7, #4]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f002 fab9 	bl	800f21e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ccac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccb0:	4920      	ldr	r1, [pc, #128]	; (800cd34 <etharp_update_arp_entry+0x148>)
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	4413      	add	r3, r2
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	440b      	add	r3, r1
 800ccbc:	3312      	adds	r3, #18
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ccc2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccc6:	491b      	ldr	r1, [pc, #108]	; (800cd34 <etharp_update_arp_entry+0x148>)
 800ccc8:	4613      	mov	r3, r2
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	4413      	add	r3, r2
 800ccce:	00db      	lsls	r3, r3, #3
 800ccd0:	440b      	add	r3, r1
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d021      	beq.n	800cd1c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ccd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccdc:	4915      	ldr	r1, [pc, #84]	; (800cd34 <etharp_update_arp_entry+0x148>)
 800ccde:	4613      	mov	r3, r2
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	4413      	add	r3, r2
 800cce4:	00db      	lsls	r3, r3, #3
 800cce6:	440b      	add	r3, r1
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ccec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ccf0:	4910      	ldr	r1, [pc, #64]	; (800cd34 <etharp_update_arp_entry+0x148>)
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	005b      	lsls	r3, r3, #1
 800ccf6:	4413      	add	r3, r2
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	440b      	add	r3, r1
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cd06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	6939      	ldr	r1, [r7, #16]
 800cd10:	68f8      	ldr	r0, [r7, #12]
 800cd12:	f002 f827 	bl	800ed64 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cd16:	6938      	ldr	r0, [r7, #16]
 800cd18:	f7f9 f9cc 	bl	80060b4 <pbuf_free>
  }
  return ERR_OK;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3718      	adds	r7, #24
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	080124f8 	.word	0x080124f8
 800cd2c:	080125f0 	.word	0x080125f0
 800cd30:	08012570 	.word	0x08012570
 800cd34:	200087cc 	.word	0x200087cc

0800cd38 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd40:	2300      	movs	r3, #0
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	e01e      	b.n	800cd84 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cd46:	4913      	ldr	r1, [pc, #76]	; (800cd94 <etharp_cleanup_netif+0x5c>)
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	440b      	add	r3, r1
 800cd54:	3314      	adds	r3, #20
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cd5a:	7afb      	ldrb	r3, [r7, #11]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00e      	beq.n	800cd7e <etharp_cleanup_netif+0x46>
 800cd60:	490c      	ldr	r1, [pc, #48]	; (800cd94 <etharp_cleanup_netif+0x5c>)
 800cd62:	68fa      	ldr	r2, [r7, #12]
 800cd64:	4613      	mov	r3, r2
 800cd66:	005b      	lsls	r3, r3, #1
 800cd68:	4413      	add	r3, r2
 800cd6a:	00db      	lsls	r3, r3, #3
 800cd6c:	440b      	add	r3, r1
 800cd6e:	3308      	adds	r3, #8
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d102      	bne.n	800cd7e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f7ff fce5 	bl	800c748 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3301      	adds	r3, #1
 800cd82:	60fb      	str	r3, [r7, #12]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2b09      	cmp	r3, #9
 800cd88:	dddd      	ble.n	800cd46 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cd8a:	bf00      	nop
 800cd8c:	bf00      	nop
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	200087cc 	.word	0x200087cc

0800cd98 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cd98:	b5b0      	push	{r4, r5, r7, lr}
 800cd9a:	b08a      	sub	sp, #40	; 0x28
 800cd9c:	af04      	add	r7, sp, #16
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d107      	bne.n	800cdb8 <etharp_input+0x20>
 800cda8:	4b3d      	ldr	r3, [pc, #244]	; (800cea0 <etharp_input+0x108>)
 800cdaa:	f240 228a 	movw	r2, #650	; 0x28a
 800cdae:	493d      	ldr	r1, [pc, #244]	; (800cea4 <etharp_input+0x10c>)
 800cdb0:	483d      	ldr	r0, [pc, #244]	; (800cea8 <etharp_input+0x110>)
 800cdb2:	f002 f91f 	bl	800eff4 <iprintf>
 800cdb6:	e06f      	b.n	800ce98 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	881b      	ldrh	r3, [r3, #0]
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdc8:	d10c      	bne.n	800cde4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cdce:	2b06      	cmp	r3, #6
 800cdd0:	d108      	bne.n	800cde4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cdd6:	2b04      	cmp	r3, #4
 800cdd8:	d104      	bne.n	800cde4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	885b      	ldrh	r3, [r3, #2]
 800cdde:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cde0:	2b08      	cmp	r3, #8
 800cde2:	d003      	beq.n	800cdec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7f9 f965 	bl	80060b4 <pbuf_free>
    return;
 800cdea:	e055      	b.n	800ce98 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	330e      	adds	r3, #14
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	3318      	adds	r3, #24
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	3304      	adds	r3, #4
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d102      	bne.n	800ce0c <etharp_input+0x74>
    for_us = 0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	75fb      	strb	r3, [r7, #23]
 800ce0a:	e009      	b.n	800ce20 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	3304      	adds	r3, #4
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	bf0c      	ite	eq
 800ce18:	2301      	moveq	r3, #1
 800ce1a:	2300      	movne	r3, #0
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	f103 0208 	add.w	r2, r3, #8
 800ce26:	7dfb      	ldrb	r3, [r7, #23]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d001      	beq.n	800ce30 <etharp_input+0x98>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e000      	b.n	800ce32 <etharp_input+0x9a>
 800ce30:	2302      	movs	r3, #2
 800ce32:	f107 010c 	add.w	r1, r7, #12
 800ce36:	6838      	ldr	r0, [r7, #0]
 800ce38:	f7ff fed8 	bl	800cbec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	88db      	ldrh	r3, [r3, #6]
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce46:	d003      	beq.n	800ce50 <etharp_input+0xb8>
 800ce48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce4c:	d01e      	beq.n	800ce8c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ce4e:	e020      	b.n	800ce92 <etharp_input+0xfa>
      if (for_us) {
 800ce50:	7dfb      	ldrb	r3, [r7, #23]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d01c      	beq.n	800ce90 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ce6c:	693a      	ldr	r2, [r7, #16]
 800ce6e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ce70:	2102      	movs	r1, #2
 800ce72:	9103      	str	r1, [sp, #12]
 800ce74:	f107 010c 	add.w	r1, r7, #12
 800ce78:	9102      	str	r1, [sp, #8]
 800ce7a:	9201      	str	r2, [sp, #4]
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	462b      	mov	r3, r5
 800ce80:	4622      	mov	r2, r4
 800ce82:	4601      	mov	r1, r0
 800ce84:	6838      	ldr	r0, [r7, #0]
 800ce86:	f000 faeb 	bl	800d460 <etharp_raw>
      break;
 800ce8a:	e001      	b.n	800ce90 <etharp_input+0xf8>
      break;
 800ce8c:	bf00      	nop
 800ce8e:	e000      	b.n	800ce92 <etharp_input+0xfa>
      break;
 800ce90:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7f9 f90e 	bl	80060b4 <pbuf_free>
}
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	080124f8 	.word	0x080124f8
 800cea4:	08012648 	.word	0x08012648
 800cea8:	08012570 	.word	0x08012570

0800ceac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af02      	add	r7, sp, #8
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ceba:	79fa      	ldrb	r2, [r7, #7]
 800cebc:	4944      	ldr	r1, [pc, #272]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cebe:	4613      	mov	r3, r2
 800cec0:	005b      	lsls	r3, r3, #1
 800cec2:	4413      	add	r3, r2
 800cec4:	00db      	lsls	r3, r3, #3
 800cec6:	440b      	add	r3, r1
 800cec8:	3314      	adds	r3, #20
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d806      	bhi.n	800cede <etharp_output_to_arp_index+0x32>
 800ced0:	4b40      	ldr	r3, [pc, #256]	; (800cfd4 <etharp_output_to_arp_index+0x128>)
 800ced2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ced6:	4940      	ldr	r1, [pc, #256]	; (800cfd8 <etharp_output_to_arp_index+0x12c>)
 800ced8:	4840      	ldr	r0, [pc, #256]	; (800cfdc <etharp_output_to_arp_index+0x130>)
 800ceda:	f002 f88b 	bl	800eff4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cede:	79fa      	ldrb	r2, [r7, #7]
 800cee0:	493b      	ldr	r1, [pc, #236]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cee2:	4613      	mov	r3, r2
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	4413      	add	r3, r2
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	440b      	add	r3, r1
 800ceec:	3314      	adds	r3, #20
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d153      	bne.n	800cf9c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cef4:	79fa      	ldrb	r2, [r7, #7]
 800cef6:	4936      	ldr	r1, [pc, #216]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cef8:	4613      	mov	r3, r2
 800cefa:	005b      	lsls	r3, r3, #1
 800cefc:	4413      	add	r3, r2
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	440b      	add	r3, r1
 800cf02:	3312      	adds	r3, #18
 800cf04:	881b      	ldrh	r3, [r3, #0]
 800cf06:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cf0a:	d919      	bls.n	800cf40 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cf0c:	79fa      	ldrb	r2, [r7, #7]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	005b      	lsls	r3, r3, #1
 800cf12:	4413      	add	r3, r2
 800cf14:	00db      	lsls	r3, r3, #3
 800cf16:	4a2e      	ldr	r2, [pc, #184]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cf18:	4413      	add	r3, r2
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f000 fb4c 	bl	800d5bc <etharp_request>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d138      	bne.n	800cf9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cf2a:	79fa      	ldrb	r2, [r7, #7]
 800cf2c:	4928      	ldr	r1, [pc, #160]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cf2e:	4613      	mov	r3, r2
 800cf30:	005b      	lsls	r3, r3, #1
 800cf32:	4413      	add	r3, r2
 800cf34:	00db      	lsls	r3, r3, #3
 800cf36:	440b      	add	r3, r1
 800cf38:	3314      	adds	r3, #20
 800cf3a:	2203      	movs	r2, #3
 800cf3c:	701a      	strb	r2, [r3, #0]
 800cf3e:	e02d      	b.n	800cf9c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cf40:	79fa      	ldrb	r2, [r7, #7]
 800cf42:	4923      	ldr	r1, [pc, #140]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cf44:	4613      	mov	r3, r2
 800cf46:	005b      	lsls	r3, r3, #1
 800cf48:	4413      	add	r3, r2
 800cf4a:	00db      	lsls	r3, r3, #3
 800cf4c:	440b      	add	r3, r1
 800cf4e:	3312      	adds	r3, #18
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cf56:	d321      	bcc.n	800cf9c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cf58:	79fa      	ldrb	r2, [r7, #7]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	005b      	lsls	r3, r3, #1
 800cf5e:	4413      	add	r3, r2
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	4a1b      	ldr	r2, [pc, #108]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cf64:	4413      	add	r3, r2
 800cf66:	1d19      	adds	r1, r3, #4
 800cf68:	79fa      	ldrb	r2, [r7, #7]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	005b      	lsls	r3, r3, #1
 800cf6e:	4413      	add	r3, r2
 800cf70:	00db      	lsls	r3, r3, #3
 800cf72:	3308      	adds	r3, #8
 800cf74:	4a16      	ldr	r2, [pc, #88]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cf76:	4413      	add	r3, r2
 800cf78:	3304      	adds	r3, #4
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f000 fafb 	bl	800d578 <etharp_request_dst>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d109      	bne.n	800cf9c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cf88:	79fa      	ldrb	r2, [r7, #7]
 800cf8a:	4911      	ldr	r1, [pc, #68]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	4413      	add	r3, r2
 800cf92:	00db      	lsls	r3, r3, #3
 800cf94:	440b      	add	r3, r1
 800cf96:	3314      	adds	r3, #20
 800cf98:	2203      	movs	r2, #3
 800cf9a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cfa2:	79fa      	ldrb	r2, [r7, #7]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	005b      	lsls	r3, r3, #1
 800cfa8:	4413      	add	r3, r2
 800cfaa:	00db      	lsls	r3, r3, #3
 800cfac:	3308      	adds	r3, #8
 800cfae:	4a08      	ldr	r2, [pc, #32]	; (800cfd0 <etharp_output_to_arp_index+0x124>)
 800cfb0:	4413      	add	r3, r2
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfb8:	9200      	str	r2, [sp, #0]
 800cfba:	460a      	mov	r2, r1
 800cfbc:	68b9      	ldr	r1, [r7, #8]
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f001 fed0 	bl	800ed64 <ethernet_output>
 800cfc4:	4603      	mov	r3, r0
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3710      	adds	r7, #16
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	200087cc 	.word	0x200087cc
 800cfd4:	080124f8 	.word	0x080124f8
 800cfd8:	08012668 	.word	0x08012668
 800cfdc:	08012570 	.word	0x08012570

0800cfe0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b08a      	sub	sp, #40	; 0x28
 800cfe4:	af02      	add	r7, sp, #8
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d106      	bne.n	800d004 <etharp_output+0x24>
 800cff6:	4b73      	ldr	r3, [pc, #460]	; (800d1c4 <etharp_output+0x1e4>)
 800cff8:	f240 321e 	movw	r2, #798	; 0x31e
 800cffc:	4972      	ldr	r1, [pc, #456]	; (800d1c8 <etharp_output+0x1e8>)
 800cffe:	4873      	ldr	r0, [pc, #460]	; (800d1cc <etharp_output+0x1ec>)
 800d000:	f001 fff8 	bl	800eff4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <etharp_output+0x38>
 800d00a:	4b6e      	ldr	r3, [pc, #440]	; (800d1c4 <etharp_output+0x1e4>)
 800d00c:	f240 321f 	movw	r2, #799	; 0x31f
 800d010:	496f      	ldr	r1, [pc, #444]	; (800d1d0 <etharp_output+0x1f0>)
 800d012:	486e      	ldr	r0, [pc, #440]	; (800d1cc <etharp_output+0x1ec>)
 800d014:	f001 ffee 	bl	800eff4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d106      	bne.n	800d02c <etharp_output+0x4c>
 800d01e:	4b69      	ldr	r3, [pc, #420]	; (800d1c4 <etharp_output+0x1e4>)
 800d020:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d024:	496b      	ldr	r1, [pc, #428]	; (800d1d4 <etharp_output+0x1f4>)
 800d026:	4869      	ldr	r0, [pc, #420]	; (800d1cc <etharp_output+0x1ec>)
 800d028:	f001 ffe4 	bl	800eff4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68f9      	ldr	r1, [r7, #12]
 800d032:	4618      	mov	r0, r3
 800d034:	f000 fef8 	bl	800de28 <ip4_addr_isbroadcast_u32>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d002      	beq.n	800d044 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d03e:	4b66      	ldr	r3, [pc, #408]	; (800d1d8 <etharp_output+0x1f8>)
 800d040:	61fb      	str	r3, [r7, #28]
 800d042:	e0af      	b.n	800d1a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d04c:	2be0      	cmp	r3, #224	; 0xe0
 800d04e:	d118      	bne.n	800d082 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d050:	2301      	movs	r3, #1
 800d052:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d054:	2300      	movs	r3, #0
 800d056:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d058:	235e      	movs	r3, #94	; 0x5e
 800d05a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	3301      	adds	r3, #1
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d066:	b2db      	uxtb	r3, r3
 800d068:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	3302      	adds	r3, #2
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3303      	adds	r3, #3
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d07a:	f107 0310 	add.w	r3, r7, #16
 800d07e:	61fb      	str	r3, [r7, #28]
 800d080:	e090      	b.n	800d1a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3304      	adds	r3, #4
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	405a      	eors	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3308      	adds	r3, #8
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4013      	ands	r3, r2
 800d096:	2b00      	cmp	r3, #0
 800d098:	d012      	beq.n	800d0c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d0a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	d00b      	beq.n	800d0c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	330c      	adds	r3, #12
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d003      	beq.n	800d0ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	330c      	adds	r3, #12
 800d0b6:	61bb      	str	r3, [r7, #24]
 800d0b8:	e002      	b.n	800d0c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d0ba:	f06f 0303 	mvn.w	r3, #3
 800d0be:	e07d      	b.n	800d1bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d0c0:	4b46      	ldr	r3, [pc, #280]	; (800d1dc <etharp_output+0x1fc>)
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	4a46      	ldr	r2, [pc, #280]	; (800d1e0 <etharp_output+0x200>)
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	005b      	lsls	r3, r3, #1
 800d0cc:	440b      	add	r3, r1
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	4413      	add	r3, r2
 800d0d2:	3314      	adds	r3, #20
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d925      	bls.n	800d126 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d0da:	4b40      	ldr	r3, [pc, #256]	; (800d1dc <etharp_output+0x1fc>)
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	4619      	mov	r1, r3
 800d0e0:	4a3f      	ldr	r2, [pc, #252]	; (800d1e0 <etharp_output+0x200>)
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	440b      	add	r3, r1
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	4413      	add	r3, r2
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d117      	bne.n	800d126 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	681a      	ldr	r2, [r3, #0]
 800d0fa:	4b38      	ldr	r3, [pc, #224]	; (800d1dc <etharp_output+0x1fc>)
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	4618      	mov	r0, r3
 800d100:	4937      	ldr	r1, [pc, #220]	; (800d1e0 <etharp_output+0x200>)
 800d102:	4603      	mov	r3, r0
 800d104:	005b      	lsls	r3, r3, #1
 800d106:	4403      	add	r3, r0
 800d108:	00db      	lsls	r3, r3, #3
 800d10a:	440b      	add	r3, r1
 800d10c:	3304      	adds	r3, #4
 800d10e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d110:	429a      	cmp	r2, r3
 800d112:	d108      	bne.n	800d126 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d114:	4b31      	ldr	r3, [pc, #196]	; (800d1dc <etharp_output+0x1fc>)
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	68b9      	ldr	r1, [r7, #8]
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f7ff fec5 	bl	800ceac <etharp_output_to_arp_index>
 800d122:	4603      	mov	r3, r0
 800d124:	e04a      	b.n	800d1bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d126:	2300      	movs	r3, #0
 800d128:	75fb      	strb	r3, [r7, #23]
 800d12a:	e031      	b.n	800d190 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d12c:	7dfa      	ldrb	r2, [r7, #23]
 800d12e:	492c      	ldr	r1, [pc, #176]	; (800d1e0 <etharp_output+0x200>)
 800d130:	4613      	mov	r3, r2
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	4413      	add	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	440b      	add	r3, r1
 800d13a:	3314      	adds	r3, #20
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d923      	bls.n	800d18a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d142:	7dfa      	ldrb	r2, [r7, #23]
 800d144:	4926      	ldr	r1, [pc, #152]	; (800d1e0 <etharp_output+0x200>)
 800d146:	4613      	mov	r3, r2
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	4413      	add	r3, r2
 800d14c:	00db      	lsls	r3, r3, #3
 800d14e:	440b      	add	r3, r1
 800d150:	3308      	adds	r3, #8
 800d152:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	429a      	cmp	r2, r3
 800d158:	d117      	bne.n	800d18a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	6819      	ldr	r1, [r3, #0]
 800d15e:	7dfa      	ldrb	r2, [r7, #23]
 800d160:	481f      	ldr	r0, [pc, #124]	; (800d1e0 <etharp_output+0x200>)
 800d162:	4613      	mov	r3, r2
 800d164:	005b      	lsls	r3, r3, #1
 800d166:	4413      	add	r3, r2
 800d168:	00db      	lsls	r3, r3, #3
 800d16a:	4403      	add	r3, r0
 800d16c:	3304      	adds	r3, #4
 800d16e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d170:	4299      	cmp	r1, r3
 800d172:	d10a      	bne.n	800d18a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d174:	4a19      	ldr	r2, [pc, #100]	; (800d1dc <etharp_output+0x1fc>)
 800d176:	7dfb      	ldrb	r3, [r7, #23]
 800d178:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d17a:	7dfb      	ldrb	r3, [r7, #23]
 800d17c:	461a      	mov	r2, r3
 800d17e:	68b9      	ldr	r1, [r7, #8]
 800d180:	68f8      	ldr	r0, [r7, #12]
 800d182:	f7ff fe93 	bl	800ceac <etharp_output_to_arp_index>
 800d186:	4603      	mov	r3, r0
 800d188:	e018      	b.n	800d1bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d18a:	7dfb      	ldrb	r3, [r7, #23]
 800d18c:	3301      	adds	r3, #1
 800d18e:	75fb      	strb	r3, [r7, #23]
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	2b09      	cmp	r3, #9
 800d194:	d9ca      	bls.n	800d12c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	69b9      	ldr	r1, [r7, #24]
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f000 f822 	bl	800d1e4 <etharp_query>
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	e00b      	b.n	800d1bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d1aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	68b9      	ldr	r1, [r7, #8]
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f001 fdd5 	bl	800ed64 <ethernet_output>
 800d1ba:	4603      	mov	r3, r0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3720      	adds	r7, #32
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	080124f8 	.word	0x080124f8
 800d1c8:	08012648 	.word	0x08012648
 800d1cc:	08012570 	.word	0x08012570
 800d1d0:	08012698 	.word	0x08012698
 800d1d4:	08012638 	.word	0x08012638
 800d1d8:	08012cb4 	.word	0x08012cb4
 800d1dc:	200088bc 	.word	0x200088bc
 800d1e0:	200087cc 	.word	0x200087cc

0800d1e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b08c      	sub	sp, #48	; 0x30
 800d1e8:	af02      	add	r7, sp, #8
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	3326      	adds	r3, #38	; 0x26
 800d1f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d1f6:	23ff      	movs	r3, #255	; 0xff
 800d1f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68f9      	ldr	r1, [r7, #12]
 800d206:	4618      	mov	r0, r3
 800d208:	f000 fe0e 	bl	800de28 <ip4_addr_isbroadcast_u32>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10c      	bne.n	800d22c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d21a:	2be0      	cmp	r3, #224	; 0xe0
 800d21c:	d006      	beq.n	800d22c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d003      	beq.n	800d22c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d102      	bne.n	800d232 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d22c:	f06f 030f 	mvn.w	r3, #15
 800d230:	e101      	b.n	800d436 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d232:	68fa      	ldr	r2, [r7, #12]
 800d234:	2101      	movs	r1, #1
 800d236:	68b8      	ldr	r0, [r7, #8]
 800d238:	f7ff fb60 	bl	800c8fc <etharp_find_entry>
 800d23c:	4603      	mov	r3, r0
 800d23e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d240:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d244:	2b00      	cmp	r3, #0
 800d246:	da02      	bge.n	800d24e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d248:	8a7b      	ldrh	r3, [r7, #18]
 800d24a:	b25b      	sxtb	r3, r3
 800d24c:	e0f3      	b.n	800d436 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d24e:	8a7b      	ldrh	r3, [r7, #18]
 800d250:	2b7e      	cmp	r3, #126	; 0x7e
 800d252:	d906      	bls.n	800d262 <etharp_query+0x7e>
 800d254:	4b7a      	ldr	r3, [pc, #488]	; (800d440 <etharp_query+0x25c>)
 800d256:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d25a:	497a      	ldr	r1, [pc, #488]	; (800d444 <etharp_query+0x260>)
 800d25c:	487a      	ldr	r0, [pc, #488]	; (800d448 <etharp_query+0x264>)
 800d25e:	f001 fec9 	bl	800eff4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d262:	8a7b      	ldrh	r3, [r7, #18]
 800d264:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d266:	7c7a      	ldrb	r2, [r7, #17]
 800d268:	4978      	ldr	r1, [pc, #480]	; (800d44c <etharp_query+0x268>)
 800d26a:	4613      	mov	r3, r2
 800d26c:	005b      	lsls	r3, r3, #1
 800d26e:	4413      	add	r3, r2
 800d270:	00db      	lsls	r3, r3, #3
 800d272:	440b      	add	r3, r1
 800d274:	3314      	adds	r3, #20
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d115      	bne.n	800d2a8 <etharp_query+0xc4>
    is_new_entry = 1;
 800d27c:	2301      	movs	r3, #1
 800d27e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d280:	7c7a      	ldrb	r2, [r7, #17]
 800d282:	4972      	ldr	r1, [pc, #456]	; (800d44c <etharp_query+0x268>)
 800d284:	4613      	mov	r3, r2
 800d286:	005b      	lsls	r3, r3, #1
 800d288:	4413      	add	r3, r2
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	440b      	add	r3, r1
 800d28e:	3314      	adds	r3, #20
 800d290:	2201      	movs	r2, #1
 800d292:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d294:	7c7a      	ldrb	r2, [r7, #17]
 800d296:	496d      	ldr	r1, [pc, #436]	; (800d44c <etharp_query+0x268>)
 800d298:	4613      	mov	r3, r2
 800d29a:	005b      	lsls	r3, r3, #1
 800d29c:	4413      	add	r3, r2
 800d29e:	00db      	lsls	r3, r3, #3
 800d2a0:	440b      	add	r3, r1
 800d2a2:	3308      	adds	r3, #8
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d2a8:	7c7a      	ldrb	r2, [r7, #17]
 800d2aa:	4968      	ldr	r1, [pc, #416]	; (800d44c <etharp_query+0x268>)
 800d2ac:	4613      	mov	r3, r2
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	4413      	add	r3, r2
 800d2b2:	00db      	lsls	r3, r3, #3
 800d2b4:	440b      	add	r3, r1
 800d2b6:	3314      	adds	r3, #20
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b01      	cmp	r3, #1
 800d2bc:	d011      	beq.n	800d2e2 <etharp_query+0xfe>
 800d2be:	7c7a      	ldrb	r2, [r7, #17]
 800d2c0:	4962      	ldr	r1, [pc, #392]	; (800d44c <etharp_query+0x268>)
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	005b      	lsls	r3, r3, #1
 800d2c6:	4413      	add	r3, r2
 800d2c8:	00db      	lsls	r3, r3, #3
 800d2ca:	440b      	add	r3, r1
 800d2cc:	3314      	adds	r3, #20
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d806      	bhi.n	800d2e2 <etharp_query+0xfe>
 800d2d4:	4b5a      	ldr	r3, [pc, #360]	; (800d440 <etharp_query+0x25c>)
 800d2d6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d2da:	495d      	ldr	r1, [pc, #372]	; (800d450 <etharp_query+0x26c>)
 800d2dc:	485a      	ldr	r0, [pc, #360]	; (800d448 <etharp_query+0x264>)
 800d2de:	f001 fe89 	bl	800eff4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d2e2:	6a3b      	ldr	r3, [r7, #32]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <etharp_query+0x10a>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d10c      	bne.n	800d308 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d2ee:	68b9      	ldr	r1, [r7, #8]
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f000 f963 	bl	800d5bc <etharp_request>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d102      	bne.n	800d308 <etharp_query+0x124>
      return result;
 800d302:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d306:	e096      	b.n	800d436 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d106      	bne.n	800d31c <etharp_query+0x138>
 800d30e:	4b4c      	ldr	r3, [pc, #304]	; (800d440 <etharp_query+0x25c>)
 800d310:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d314:	494f      	ldr	r1, [pc, #316]	; (800d454 <etharp_query+0x270>)
 800d316:	484c      	ldr	r0, [pc, #304]	; (800d448 <etharp_query+0x264>)
 800d318:	f001 fe6c 	bl	800eff4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d31c:	7c7a      	ldrb	r2, [r7, #17]
 800d31e:	494b      	ldr	r1, [pc, #300]	; (800d44c <etharp_query+0x268>)
 800d320:	4613      	mov	r3, r2
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	4413      	add	r3, r2
 800d326:	00db      	lsls	r3, r3, #3
 800d328:	440b      	add	r3, r1
 800d32a:	3314      	adds	r3, #20
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d917      	bls.n	800d362 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d332:	4a49      	ldr	r2, [pc, #292]	; (800d458 <etharp_query+0x274>)
 800d334:	7c7b      	ldrb	r3, [r7, #17]
 800d336:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d338:	7c7a      	ldrb	r2, [r7, #17]
 800d33a:	4613      	mov	r3, r2
 800d33c:	005b      	lsls	r3, r3, #1
 800d33e:	4413      	add	r3, r2
 800d340:	00db      	lsls	r3, r3, #3
 800d342:	3308      	adds	r3, #8
 800d344:	4a41      	ldr	r2, [pc, #260]	; (800d44c <etharp_query+0x268>)
 800d346:	4413      	add	r3, r2
 800d348:	3304      	adds	r3, #4
 800d34a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d34e:	9200      	str	r2, [sp, #0]
 800d350:	697a      	ldr	r2, [r7, #20]
 800d352:	6879      	ldr	r1, [r7, #4]
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f001 fd05 	bl	800ed64 <ethernet_output>
 800d35a:	4603      	mov	r3, r0
 800d35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d360:	e067      	b.n	800d432 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d362:	7c7a      	ldrb	r2, [r7, #17]
 800d364:	4939      	ldr	r1, [pc, #228]	; (800d44c <etharp_query+0x268>)
 800d366:	4613      	mov	r3, r2
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	4413      	add	r3, r2
 800d36c:	00db      	lsls	r3, r3, #3
 800d36e:	440b      	add	r3, r1
 800d370:	3314      	adds	r3, #20
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d15c      	bne.n	800d432 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d378:	2300      	movs	r3, #0
 800d37a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d380:	e01c      	b.n	800d3bc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	895a      	ldrh	r2, [r3, #10]
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	891b      	ldrh	r3, [r3, #8]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d10a      	bne.n	800d3a4 <etharp_query+0x1c0>
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d006      	beq.n	800d3a4 <etharp_query+0x1c0>
 800d396:	4b2a      	ldr	r3, [pc, #168]	; (800d440 <etharp_query+0x25c>)
 800d398:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d39c:	492f      	ldr	r1, [pc, #188]	; (800d45c <etharp_query+0x278>)
 800d39e:	482a      	ldr	r0, [pc, #168]	; (800d448 <etharp_query+0x264>)
 800d3a0:	f001 fe28 	bl	800eff4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	7b1b      	ldrb	r3, [r3, #12]
 800d3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <etharp_query+0x1d2>
        copy_needed = 1;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	61bb      	str	r3, [r7, #24]
        break;
 800d3b4:	e005      	b.n	800d3c2 <etharp_query+0x1de>
      }
      p = p->next;
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d1df      	bne.n	800d382 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d007      	beq.n	800d3d8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d3ce:	200e      	movs	r0, #14
 800d3d0:	f7f9 f96e 	bl	80066b0 <pbuf_clone>
 800d3d4:	61f8      	str	r0, [r7, #28]
 800d3d6:	e004      	b.n	800d3e2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d3dc:	69f8      	ldr	r0, [r7, #28]
 800d3de:	f7f8 ff09 	bl	80061f4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d021      	beq.n	800d42c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d3e8:	7c7a      	ldrb	r2, [r7, #17]
 800d3ea:	4918      	ldr	r1, [pc, #96]	; (800d44c <etharp_query+0x268>)
 800d3ec:	4613      	mov	r3, r2
 800d3ee:	005b      	lsls	r3, r3, #1
 800d3f0:	4413      	add	r3, r2
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	440b      	add	r3, r1
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00a      	beq.n	800d412 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d3fc:	7c7a      	ldrb	r2, [r7, #17]
 800d3fe:	4913      	ldr	r1, [pc, #76]	; (800d44c <etharp_query+0x268>)
 800d400:	4613      	mov	r3, r2
 800d402:	005b      	lsls	r3, r3, #1
 800d404:	4413      	add	r3, r2
 800d406:	00db      	lsls	r3, r3, #3
 800d408:	440b      	add	r3, r1
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7f8 fe51 	bl	80060b4 <pbuf_free>
      }
      arp_table[i].q = p;
 800d412:	7c7a      	ldrb	r2, [r7, #17]
 800d414:	490d      	ldr	r1, [pc, #52]	; (800d44c <etharp_query+0x268>)
 800d416:	4613      	mov	r3, r2
 800d418:	005b      	lsls	r3, r3, #1
 800d41a:	4413      	add	r3, r2
 800d41c:	00db      	lsls	r3, r3, #3
 800d41e:	440b      	add	r3, r1
 800d420:	69fa      	ldr	r2, [r7, #28]
 800d422:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d42a:	e002      	b.n	800d432 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d42c:	23ff      	movs	r3, #255	; 0xff
 800d42e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d432:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d436:	4618      	mov	r0, r3
 800d438:	3728      	adds	r7, #40	; 0x28
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	080124f8 	.word	0x080124f8
 800d444:	080126a4 	.word	0x080126a4
 800d448:	08012570 	.word	0x08012570
 800d44c:	200087cc 	.word	0x200087cc
 800d450:	080126b4 	.word	0x080126b4
 800d454:	08012698 	.word	0x08012698
 800d458:	200088bc 	.word	0x200088bc
 800d45c:	080126dc 	.word	0x080126dc

0800d460 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b08a      	sub	sp, #40	; 0x28
 800d464:	af02      	add	r7, sp, #8
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	607a      	str	r2, [r7, #4]
 800d46c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d46e:	2300      	movs	r3, #0
 800d470:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d106      	bne.n	800d486 <etharp_raw+0x26>
 800d478:	4b3a      	ldr	r3, [pc, #232]	; (800d564 <etharp_raw+0x104>)
 800d47a:	f240 4257 	movw	r2, #1111	; 0x457
 800d47e:	493a      	ldr	r1, [pc, #232]	; (800d568 <etharp_raw+0x108>)
 800d480:	483a      	ldr	r0, [pc, #232]	; (800d56c <etharp_raw+0x10c>)
 800d482:	f001 fdb7 	bl	800eff4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d486:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d48a:	211c      	movs	r1, #28
 800d48c:	200e      	movs	r0, #14
 800d48e:	f7f8 fb2d 	bl	8005aec <pbuf_alloc>
 800d492:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d102      	bne.n	800d4a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d49a:	f04f 33ff 	mov.w	r3, #4294967295
 800d49e:	e05d      	b.n	800d55c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	895b      	ldrh	r3, [r3, #10]
 800d4a4:	2b1b      	cmp	r3, #27
 800d4a6:	d806      	bhi.n	800d4b6 <etharp_raw+0x56>
 800d4a8:	4b2e      	ldr	r3, [pc, #184]	; (800d564 <etharp_raw+0x104>)
 800d4aa:	f240 4262 	movw	r2, #1122	; 0x462
 800d4ae:	4930      	ldr	r1, [pc, #192]	; (800d570 <etharp_raw+0x110>)
 800d4b0:	482e      	ldr	r0, [pc, #184]	; (800d56c <etharp_raw+0x10c>)
 800d4b2:	f001 fd9f 	bl	800eff4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d4bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f7f7 fa9a 	bl	80049f8 <lwip_htons>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d4d2:	2b06      	cmp	r3, #6
 800d4d4:	d006      	beq.n	800d4e4 <etharp_raw+0x84>
 800d4d6:	4b23      	ldr	r3, [pc, #140]	; (800d564 <etharp_raw+0x104>)
 800d4d8:	f240 4269 	movw	r2, #1129	; 0x469
 800d4dc:	4925      	ldr	r1, [pc, #148]	; (800d574 <etharp_raw+0x114>)
 800d4de:	4823      	ldr	r0, [pc, #140]	; (800d56c <etharp_raw+0x10c>)
 800d4e0:	f001 fd88 	bl	800eff4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	3308      	adds	r3, #8
 800d4e8:	2206      	movs	r2, #6
 800d4ea:	6839      	ldr	r1, [r7, #0]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f001 fe96 	bl	800f21e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	3312      	adds	r3, #18
 800d4f6:	2206      	movs	r2, #6
 800d4f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f001 fe8f 	bl	800f21e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	330e      	adds	r3, #14
 800d504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d506:	6812      	ldr	r2, [r2, #0]
 800d508:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	3318      	adds	r3, #24
 800d50e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d510:	6812      	ldr	r2, [r2, #0]
 800d512:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2200      	movs	r2, #0
 800d518:	701a      	strb	r2, [r3, #0]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f042 0201 	orr.w	r2, r2, #1
 800d520:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	2200      	movs	r2, #0
 800d526:	f042 0208 	orr.w	r2, r2, #8
 800d52a:	709a      	strb	r2, [r3, #2]
 800d52c:	2200      	movs	r2, #0
 800d52e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2206      	movs	r2, #6
 800d534:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	2204      	movs	r2, #4
 800d53a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d53c:	f640 0306 	movw	r3, #2054	; 0x806
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	69b9      	ldr	r1, [r7, #24]
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f001 fc0b 	bl	800ed64 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d54e:	69b8      	ldr	r0, [r7, #24]
 800d550:	f7f8 fdb0 	bl	80060b4 <pbuf_free>
  p = NULL;
 800d554:	2300      	movs	r3, #0
 800d556:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d558:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3720      	adds	r7, #32
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}
 800d564:	080124f8 	.word	0x080124f8
 800d568:	08012648 	.word	0x08012648
 800d56c:	08012570 	.word	0x08012570
 800d570:	080126f8 	.word	0x080126f8
 800d574:	0801272c 	.word	0x0801272c

0800d578 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b088      	sub	sp, #32
 800d57c:	af04      	add	r7, sp, #16
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d594:	2201      	movs	r2, #1
 800d596:	9203      	str	r2, [sp, #12]
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	9202      	str	r2, [sp, #8]
 800d59c:	4a06      	ldr	r2, [pc, #24]	; (800d5b8 <etharp_request_dst+0x40>)
 800d59e:	9201      	str	r2, [sp, #4]
 800d5a0:	9300      	str	r3, [sp, #0]
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f7ff ff5a 	bl	800d460 <etharp_raw>
 800d5ac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	08012cbc 	.word	0x08012cbc

0800d5bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d5c6:	4a05      	ldr	r2, [pc, #20]	; (800d5dc <etharp_request+0x20>)
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7ff ffd4 	bl	800d578 <etharp_request_dst>
 800d5d0:	4603      	mov	r3, r0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	08012cb4 	.word	0x08012cb4

0800d5e0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b08e      	sub	sp, #56	; 0x38
 800d5e4:	af04      	add	r7, sp, #16
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d5ea:	4b79      	ldr	r3, [pc, #484]	; (800d7d0 <icmp_input+0x1f0>)
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	f003 030f 	and.w	r3, r3, #15
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d600:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d602:	2b13      	cmp	r3, #19
 800d604:	f240 80cd 	bls.w	800d7a2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	895b      	ldrh	r3, [r3, #10]
 800d60c:	2b03      	cmp	r3, #3
 800d60e:	f240 80ca 	bls.w	800d7a6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	685b      	ldr	r3, [r3, #4]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d61c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d620:	2b00      	cmp	r3, #0
 800d622:	f000 80b7 	beq.w	800d794 <icmp_input+0x1b4>
 800d626:	2b08      	cmp	r3, #8
 800d628:	f040 80b7 	bne.w	800d79a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d62c:	4b69      	ldr	r3, [pc, #420]	; (800d7d4 <icmp_input+0x1f4>)
 800d62e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d630:	4b67      	ldr	r3, [pc, #412]	; (800d7d0 <icmp_input+0x1f0>)
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d638:	2be0      	cmp	r3, #224	; 0xe0
 800d63a:	f000 80bb 	beq.w	800d7b4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d63e:	4b64      	ldr	r3, [pc, #400]	; (800d7d0 <icmp_input+0x1f0>)
 800d640:	695b      	ldr	r3, [r3, #20]
 800d642:	4a63      	ldr	r2, [pc, #396]	; (800d7d0 <icmp_input+0x1f0>)
 800d644:	6812      	ldr	r2, [r2, #0]
 800d646:	4611      	mov	r1, r2
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 fbed 	bl	800de28 <ip4_addr_isbroadcast_u32>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	f040 80b1 	bne.w	800d7b8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	891b      	ldrh	r3, [r3, #8]
 800d65a:	2b07      	cmp	r3, #7
 800d65c:	f240 80a5 	bls.w	800d7aa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d662:	330e      	adds	r3, #14
 800d664:	4619      	mov	r1, r3
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f7f8 fc8e 	bl	8005f88 <pbuf_add_header>
 800d66c:	4603      	mov	r3, r0
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d04b      	beq.n	800d70a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	891a      	ldrh	r2, [r3, #8]
 800d676:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d678:	4413      	add	r3, r2
 800d67a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	891b      	ldrh	r3, [r3, #8]
 800d680:	8b7a      	ldrh	r2, [r7, #26]
 800d682:	429a      	cmp	r2, r3
 800d684:	f0c0 809a 	bcc.w	800d7bc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d688:	8b7b      	ldrh	r3, [r7, #26]
 800d68a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d68e:	4619      	mov	r1, r3
 800d690:	200e      	movs	r0, #14
 800d692:	f7f8 fa2b 	bl	8005aec <pbuf_alloc>
 800d696:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f000 8090 	beq.w	800d7c0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	895b      	ldrh	r3, [r3, #10]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d203      	bcs.n	800d6b6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d6ae:	6978      	ldr	r0, [r7, #20]
 800d6b0:	f7f8 fd00 	bl	80060b4 <pbuf_free>
          goto icmperr;
 800d6b4:	e085      	b.n	800d7c2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d6bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f001 fdad 	bl	800f21e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d6c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	6978      	ldr	r0, [r7, #20]
 800d6ca:	f7f8 fc6d 	bl	8005fa8 <pbuf_remove_header>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d009      	beq.n	800d6e8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d6d4:	4b40      	ldr	r3, [pc, #256]	; (800d7d8 <icmp_input+0x1f8>)
 800d6d6:	22b6      	movs	r2, #182	; 0xb6
 800d6d8:	4940      	ldr	r1, [pc, #256]	; (800d7dc <icmp_input+0x1fc>)
 800d6da:	4841      	ldr	r0, [pc, #260]	; (800d7e0 <icmp_input+0x200>)
 800d6dc:	f001 fc8a 	bl	800eff4 <iprintf>
          pbuf_free(r);
 800d6e0:	6978      	ldr	r0, [r7, #20]
 800d6e2:	f7f8 fce7 	bl	80060b4 <pbuf_free>
          goto icmperr;
 800d6e6:	e06c      	b.n	800d7c2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	6978      	ldr	r0, [r7, #20]
 800d6ec:	f7f8 fe0a 	bl	8006304 <pbuf_copy>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d6f6:	6978      	ldr	r0, [r7, #20]
 800d6f8:	f7f8 fcdc 	bl	80060b4 <pbuf_free>
          goto icmperr;
 800d6fc:	e061      	b.n	800d7c2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7f8 fcd8 	bl	80060b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	607b      	str	r3, [r7, #4]
 800d708:	e00f      	b.n	800d72a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d70a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d70c:	330e      	adds	r3, #14
 800d70e:	4619      	mov	r1, r3
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7f8 fc49 	bl	8005fa8 <pbuf_remove_header>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d006      	beq.n	800d72a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d71c:	4b2e      	ldr	r3, [pc, #184]	; (800d7d8 <icmp_input+0x1f8>)
 800d71e:	22c7      	movs	r2, #199	; 0xc7
 800d720:	4930      	ldr	r1, [pc, #192]	; (800d7e4 <icmp_input+0x204>)
 800d722:	482f      	ldr	r0, [pc, #188]	; (800d7e0 <icmp_input+0x200>)
 800d724:	f001 fc66 	bl	800eff4 <iprintf>
          goto icmperr;
 800d728:	e04b      	b.n	800d7c2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d730:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d732:	4619      	mov	r1, r3
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7f8 fc27 	bl	8005f88 <pbuf_add_header>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d12b      	bne.n	800d798 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d74e:	4b20      	ldr	r3, [pc, #128]	; (800d7d0 <icmp_input+0x1f0>)
 800d750:	691a      	ldr	r2, [r3, #16]
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	2200      	movs	r2, #0
 800d75a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	2200      	movs	r2, #0
 800d760:	709a      	strb	r2, [r3, #2]
 800d762:	2200      	movs	r2, #0
 800d764:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	22ff      	movs	r2, #255	; 0xff
 800d76a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2200      	movs	r2, #0
 800d770:	729a      	strb	r2, [r3, #10]
 800d772:	2200      	movs	r2, #0
 800d774:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	9302      	str	r3, [sp, #8]
 800d77a:	2301      	movs	r3, #1
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	2300      	movs	r3, #0
 800d780:	9300      	str	r3, [sp, #0]
 800d782:	23ff      	movs	r3, #255	; 0xff
 800d784:	2200      	movs	r2, #0
 800d786:	69f9      	ldr	r1, [r7, #28]
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fa75 	bl	800dc78 <ip4_output_if>
 800d78e:	4603      	mov	r3, r0
 800d790:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d792:	e001      	b.n	800d798 <icmp_input+0x1b8>
      break;
 800d794:	bf00      	nop
 800d796:	e000      	b.n	800d79a <icmp_input+0x1ba>
      break;
 800d798:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7f8 fc8a 	bl	80060b4 <pbuf_free>
  return;
 800d7a0:	e013      	b.n	800d7ca <icmp_input+0x1ea>
    goto lenerr;
 800d7a2:	bf00      	nop
 800d7a4:	e002      	b.n	800d7ac <icmp_input+0x1cc>
    goto lenerr;
 800d7a6:	bf00      	nop
 800d7a8:	e000      	b.n	800d7ac <icmp_input+0x1cc>
        goto lenerr;
 800d7aa:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7f8 fc81 	bl	80060b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d7b2:	e00a      	b.n	800d7ca <icmp_input+0x1ea>
        goto icmperr;
 800d7b4:	bf00      	nop
 800d7b6:	e004      	b.n	800d7c2 <icmp_input+0x1e2>
        goto icmperr;
 800d7b8:	bf00      	nop
 800d7ba:	e002      	b.n	800d7c2 <icmp_input+0x1e2>
          goto icmperr;
 800d7bc:	bf00      	nop
 800d7be:	e000      	b.n	800d7c2 <icmp_input+0x1e2>
          goto icmperr;
 800d7c0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7f8 fc76 	bl	80060b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d7c8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d7ca:	3728      	adds	r7, #40	; 0x28
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	200051fc 	.word	0x200051fc
 800d7d4:	20005210 	.word	0x20005210
 800d7d8:	08012770 	.word	0x08012770
 800d7dc:	080127a8 	.word	0x080127a8
 800d7e0:	080127e0 	.word	0x080127e0
 800d7e4:	08012808 	.word	0x08012808

0800d7e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b082      	sub	sp, #8
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	460b      	mov	r3, r1
 800d7f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d7f4:	78fb      	ldrb	r3, [r7, #3]
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	2103      	movs	r1, #3
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 f814 	bl	800d828 <icmp_send_response>
}
 800d800:	bf00      	nop
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d814:	78fb      	ldrb	r3, [r7, #3]
 800d816:	461a      	mov	r2, r3
 800d818:	210b      	movs	r1, #11
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f804 	bl	800d828 <icmp_send_response>
}
 800d820:	bf00      	nop
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08c      	sub	sp, #48	; 0x30
 800d82c:	af04      	add	r7, sp, #16
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	460b      	mov	r3, r1
 800d832:	70fb      	strb	r3, [r7, #3]
 800d834:	4613      	mov	r3, r2
 800d836:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d838:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d83c:	2124      	movs	r1, #36	; 0x24
 800d83e:	2022      	movs	r0, #34	; 0x22
 800d840:	f7f8 f954 	bl	8005aec <pbuf_alloc>
 800d844:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d04c      	beq.n	800d8e6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	895b      	ldrh	r3, [r3, #10]
 800d850:	2b23      	cmp	r3, #35	; 0x23
 800d852:	d806      	bhi.n	800d862 <icmp_send_response+0x3a>
 800d854:	4b26      	ldr	r3, [pc, #152]	; (800d8f0 <icmp_send_response+0xc8>)
 800d856:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d85a:	4926      	ldr	r1, [pc, #152]	; (800d8f4 <icmp_send_response+0xcc>)
 800d85c:	4826      	ldr	r0, [pc, #152]	; (800d8f8 <icmp_send_response+0xd0>)
 800d85e:	f001 fbc9 	bl	800eff4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	78fa      	ldrb	r2, [r7, #3]
 800d872:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	78ba      	ldrb	r2, [r7, #2]
 800d878:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	2200      	movs	r2, #0
 800d87e:	711a      	strb	r2, [r3, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	2200      	movs	r2, #0
 800d888:	719a      	strb	r2, [r3, #6]
 800d88a:	2200      	movs	r2, #0
 800d88c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	f103 0008 	add.w	r0, r3, #8
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	221c      	movs	r2, #28
 800d89c:	4619      	mov	r1, r3
 800d89e:	f001 fcbe 	bl	800f21e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d8a8:	f107 030c 	add.w	r3, r7, #12
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f000 f825 	bl	800d8fc <ip4_route>
 800d8b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d011      	beq.n	800d8de <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	709a      	strb	r2, [r3, #2]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d8c4:	f107 020c 	add.w	r2, r7, #12
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	9302      	str	r3, [sp, #8]
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	9301      	str	r3, [sp, #4]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	9300      	str	r3, [sp, #0]
 800d8d4:	23ff      	movs	r3, #255	; 0xff
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	69f8      	ldr	r0, [r7, #28]
 800d8da:	f000 f9cd 	bl	800dc78 <ip4_output_if>
  }
  pbuf_free(q);
 800d8de:	69f8      	ldr	r0, [r7, #28]
 800d8e0:	f7f8 fbe8 	bl	80060b4 <pbuf_free>
 800d8e4:	e000      	b.n	800d8e8 <icmp_send_response+0xc0>
    return;
 800d8e6:	bf00      	nop
}
 800d8e8:	3720      	adds	r7, #32
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	08012770 	.word	0x08012770
 800d8f4:	0801283c 	.word	0x0801283c
 800d8f8:	080127e0 	.word	0x080127e0

0800d8fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d904:	4b33      	ldr	r3, [pc, #204]	; (800d9d4 <ip4_route+0xd8>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	60fb      	str	r3, [r7, #12]
 800d90a:	e036      	b.n	800d97a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d912:	f003 0301 	and.w	r3, r3, #1
 800d916:	b2db      	uxtb	r3, r3
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d02b      	beq.n	800d974 <ip4_route+0x78>
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d922:	089b      	lsrs	r3, r3, #2
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d022      	beq.n	800d974 <ip4_route+0x78>
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	3304      	adds	r3, #4
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d01d      	beq.n	800d974 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	3304      	adds	r3, #4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	405a      	eors	r2, r3
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	3308      	adds	r3, #8
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	4013      	ands	r3, r2
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d101      	bne.n	800d954 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	e038      	b.n	800d9c6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d95a:	f003 0302 	and.w	r3, r3, #2
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d108      	bne.n	800d974 <ip4_route+0x78>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681a      	ldr	r2, [r3, #0]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	330c      	adds	r3, #12
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d101      	bne.n	800d974 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	e028      	b.n	800d9c6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	60fb      	str	r3, [r7, #12]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d1c5      	bne.n	800d90c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d980:	4b15      	ldr	r3, [pc, #84]	; (800d9d8 <ip4_route+0xdc>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d01a      	beq.n	800d9be <ip4_route+0xc2>
 800d988:	4b13      	ldr	r3, [pc, #76]	; (800d9d8 <ip4_route+0xdc>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	2b00      	cmp	r3, #0
 800d996:	d012      	beq.n	800d9be <ip4_route+0xc2>
 800d998:	4b0f      	ldr	r3, [pc, #60]	; (800d9d8 <ip4_route+0xdc>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9a0:	f003 0304 	and.w	r3, r3, #4
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d00a      	beq.n	800d9be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d9a8:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <ip4_route+0xdc>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	3304      	adds	r3, #4
 800d9ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d004      	beq.n	800d9be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b7f      	cmp	r3, #127	; 0x7f
 800d9bc:	d101      	bne.n	800d9c2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	e001      	b.n	800d9c6 <ip4_route+0xca>
  }

  return netif_default;
 800d9c2:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <ip4_route+0xdc>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	20008760 	.word	0x20008760
 800d9d8:	20008764 	.word	0x20008764

0800d9dc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9ea:	f003 0301 	and.w	r3, r3, #1
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d016      	beq.n	800da22 <ip4_input_accept+0x46>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	3304      	adds	r3, #4
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d011      	beq.n	800da22 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d9fe:	4b0b      	ldr	r3, [pc, #44]	; (800da2c <ip4_input_accept+0x50>)
 800da00:	695a      	ldr	r2, [r3, #20]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	3304      	adds	r3, #4
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d008      	beq.n	800da1e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800da0c:	4b07      	ldr	r3, [pc, #28]	; (800da2c <ip4_input_accept+0x50>)
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	6879      	ldr	r1, [r7, #4]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 fa08 	bl	800de28 <ip4_addr_isbroadcast_u32>
 800da18:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d001      	beq.n	800da22 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800da1e:	2301      	movs	r3, #1
 800da20:	e000      	b.n	800da24 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800da22:	2300      	movs	r3, #0
}
 800da24:	4618      	mov	r0, r3
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	200051fc 	.word	0x200051fc

0800da30 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b086      	sub	sp, #24
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
 800da38:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	091b      	lsrs	r3, r3, #4
 800da46:	b2db      	uxtb	r3, r3
 800da48:	2b04      	cmp	r3, #4
 800da4a:	d004      	beq.n	800da56 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f7f8 fb31 	bl	80060b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800da52:	2300      	movs	r3, #0
 800da54:	e107      	b.n	800dc66 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	f003 030f 	and.w	r3, r3, #15
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	b2db      	uxtb	r3, r3
 800da64:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	885b      	ldrh	r3, [r3, #2]
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7f6 ffc3 	bl	80049f8 <lwip_htons>
 800da72:	4603      	mov	r3, r0
 800da74:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	891b      	ldrh	r3, [r3, #8]
 800da7a:	89ba      	ldrh	r2, [r7, #12]
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d204      	bcs.n	800da8a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800da80:	89bb      	ldrh	r3, [r7, #12]
 800da82:	4619      	mov	r1, r3
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7f8 f98f 	bl	8005da8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	895b      	ldrh	r3, [r3, #10]
 800da8e:	89fa      	ldrh	r2, [r7, #14]
 800da90:	429a      	cmp	r2, r3
 800da92:	d807      	bhi.n	800daa4 <ip4_input+0x74>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	891b      	ldrh	r3, [r3, #8]
 800da98:	89ba      	ldrh	r2, [r7, #12]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d802      	bhi.n	800daa4 <ip4_input+0x74>
 800da9e:	89fb      	ldrh	r3, [r7, #14]
 800daa0:	2b13      	cmp	r3, #19
 800daa2:	d804      	bhi.n	800daae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7f8 fb05 	bl	80060b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800daaa:	2300      	movs	r3, #0
 800daac:	e0db      	b.n	800dc66 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	691b      	ldr	r3, [r3, #16]
 800dab2:	4a6f      	ldr	r2, [pc, #444]	; (800dc70 <ip4_input+0x240>)
 800dab4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	4a6d      	ldr	r2, [pc, #436]	; (800dc70 <ip4_input+0x240>)
 800dabc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dabe:	4b6c      	ldr	r3, [pc, #432]	; (800dc70 <ip4_input+0x240>)
 800dac0:	695b      	ldr	r3, [r3, #20]
 800dac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dac6:	2be0      	cmp	r3, #224	; 0xe0
 800dac8:	d112      	bne.n	800daf0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dad0:	f003 0301 	and.w	r3, r3, #1
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d007      	beq.n	800daea <ip4_input+0xba>
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	3304      	adds	r3, #4
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d002      	beq.n	800daea <ip4_input+0xba>
      netif = inp;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	613b      	str	r3, [r7, #16]
 800dae8:	e02a      	b.n	800db40 <ip4_input+0x110>
    } else {
      netif = NULL;
 800daea:	2300      	movs	r3, #0
 800daec:	613b      	str	r3, [r7, #16]
 800daee:	e027      	b.n	800db40 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800daf0:	6838      	ldr	r0, [r7, #0]
 800daf2:	f7ff ff73 	bl	800d9dc <ip4_input_accept>
 800daf6:	4603      	mov	r3, r0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d002      	beq.n	800db02 <ip4_input+0xd2>
      netif = inp;
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	613b      	str	r3, [r7, #16]
 800db00:	e01e      	b.n	800db40 <ip4_input+0x110>
    } else {
      netif = NULL;
 800db02:	2300      	movs	r3, #0
 800db04:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800db06:	4b5a      	ldr	r3, [pc, #360]	; (800dc70 <ip4_input+0x240>)
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	b2db      	uxtb	r3, r3
 800db0c:	2b7f      	cmp	r3, #127	; 0x7f
 800db0e:	d017      	beq.n	800db40 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800db10:	4b58      	ldr	r3, [pc, #352]	; (800dc74 <ip4_input+0x244>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	613b      	str	r3, [r7, #16]
 800db16:	e00e      	b.n	800db36 <ip4_input+0x106>
          if (netif == inp) {
 800db18:	693a      	ldr	r2, [r7, #16]
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d006      	beq.n	800db2e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800db20:	6938      	ldr	r0, [r7, #16]
 800db22:	f7ff ff5b 	bl	800d9dc <ip4_input_accept>
 800db26:	4603      	mov	r3, r0
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d108      	bne.n	800db3e <ip4_input+0x10e>
 800db2c:	e000      	b.n	800db30 <ip4_input+0x100>
            continue;
 800db2e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	613b      	str	r3, [r7, #16]
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1ed      	bne.n	800db18 <ip4_input+0xe8>
 800db3c:	e000      	b.n	800db40 <ip4_input+0x110>
            break;
 800db3e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800db40:	4b4b      	ldr	r3, [pc, #300]	; (800dc70 <ip4_input+0x240>)
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	6839      	ldr	r1, [r7, #0]
 800db46:	4618      	mov	r0, r3
 800db48:	f000 f96e 	bl	800de28 <ip4_addr_isbroadcast_u32>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d105      	bne.n	800db5e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800db52:	4b47      	ldr	r3, [pc, #284]	; (800dc70 <ip4_input+0x240>)
 800db54:	691b      	ldr	r3, [r3, #16]
 800db56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800db5a:	2be0      	cmp	r3, #224	; 0xe0
 800db5c:	d104      	bne.n	800db68 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800db5e:	6878      	ldr	r0, [r7, #4]
 800db60:	f7f8 faa8 	bl	80060b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	e07e      	b.n	800dc66 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d104      	bne.n	800db78 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7f8 faa0 	bl	80060b4 <pbuf_free>
    return ERR_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	e076      	b.n	800dc66 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	88db      	ldrh	r3, [r3, #6]
 800db7c:	b29b      	uxth	r3, r3
 800db7e:	461a      	mov	r2, r3
 800db80:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800db84:	4013      	ands	r3, r2
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00b      	beq.n	800dba2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 fd22 	bl	800e5d4 <ip4_reass>
 800db90:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d101      	bne.n	800db9c <ip4_input+0x16c>
      return ERR_OK;
 800db98:	2300      	movs	r3, #0
 800db9a:	e064      	b.n	800dc66 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dba2:	4a33      	ldr	r2, [pc, #204]	; (800dc70 <ip4_input+0x240>)
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dba8:	4a31      	ldr	r2, [pc, #196]	; (800dc70 <ip4_input+0x240>)
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dbae:	4a30      	ldr	r2, [pc, #192]	; (800dc70 <ip4_input+0x240>)
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	f003 030f 	and.w	r3, r3, #15
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	4b2a      	ldr	r3, [pc, #168]	; (800dc70 <ip4_input+0x240>)
 800dbc6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dbc8:	89fb      	ldrh	r3, [r7, #14]
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7f8 f9eb 	bl	8005fa8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	7a5b      	ldrb	r3, [r3, #9]
 800dbd6:	2b11      	cmp	r3, #17
 800dbd8:	d006      	beq.n	800dbe8 <ip4_input+0x1b8>
 800dbda:	2b11      	cmp	r3, #17
 800dbdc:	dc13      	bgt.n	800dc06 <ip4_input+0x1d6>
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d00c      	beq.n	800dbfc <ip4_input+0x1cc>
 800dbe2:	2b06      	cmp	r3, #6
 800dbe4:	d005      	beq.n	800dbf2 <ip4_input+0x1c2>
 800dbe6:	e00e      	b.n	800dc06 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dbe8:	6839      	ldr	r1, [r7, #0]
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7fe f8e6 	bl	800bdbc <udp_input>
        break;
 800dbf0:	e026      	b.n	800dc40 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dbf2:	6839      	ldr	r1, [r7, #0]
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	f7fa f927 	bl	8007e48 <tcp_input>
        break;
 800dbfa:	e021      	b.n	800dc40 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dbfc:	6839      	ldr	r1, [r7, #0]
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7ff fcee 	bl	800d5e0 <icmp_input>
        break;
 800dc04:	e01c      	b.n	800dc40 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dc06:	4b1a      	ldr	r3, [pc, #104]	; (800dc70 <ip4_input+0x240>)
 800dc08:	695b      	ldr	r3, [r3, #20]
 800dc0a:	6939      	ldr	r1, [r7, #16]
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f000 f90b 	bl	800de28 <ip4_addr_isbroadcast_u32>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10f      	bne.n	800dc38 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dc18:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <ip4_input+0x240>)
 800dc1a:	695b      	ldr	r3, [r3, #20]
 800dc1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dc20:	2be0      	cmp	r3, #224	; 0xe0
 800dc22:	d009      	beq.n	800dc38 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dc24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7f8 fa2f 	bl	800608e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dc30:	2102      	movs	r1, #2
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7ff fdd8 	bl	800d7e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7f8 fa3b 	bl	80060b4 <pbuf_free>
        break;
 800dc3e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dc40:	4b0b      	ldr	r3, [pc, #44]	; (800dc70 <ip4_input+0x240>)
 800dc42:	2200      	movs	r2, #0
 800dc44:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dc46:	4b0a      	ldr	r3, [pc, #40]	; (800dc70 <ip4_input+0x240>)
 800dc48:	2200      	movs	r2, #0
 800dc4a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dc4c:	4b08      	ldr	r3, [pc, #32]	; (800dc70 <ip4_input+0x240>)
 800dc4e:	2200      	movs	r2, #0
 800dc50:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dc52:	4b07      	ldr	r3, [pc, #28]	; (800dc70 <ip4_input+0x240>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dc58:	4b05      	ldr	r3, [pc, #20]	; (800dc70 <ip4_input+0x240>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dc5e:	4b04      	ldr	r3, [pc, #16]	; (800dc70 <ip4_input+0x240>)
 800dc60:	2200      	movs	r2, #0
 800dc62:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop
 800dc70:	200051fc 	.word	0x200051fc
 800dc74:	20008760 	.word	0x20008760

0800dc78 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b08a      	sub	sp, #40	; 0x28
 800dc7c:	af04      	add	r7, sp, #16
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	60b9      	str	r1, [r7, #8]
 800dc82:	607a      	str	r2, [r7, #4]
 800dc84:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d009      	beq.n	800dca4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <ip4_output_if+0x26>
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d102      	bne.n	800dca4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca0:	3304      	adds	r3, #4
 800dca2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dca4:	78fa      	ldrb	r2, [r7, #3]
 800dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca8:	9302      	str	r3, [sp, #8]
 800dcaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dcae:	9301      	str	r3, [sp, #4]
 800dcb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	4613      	mov	r3, r2
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	6979      	ldr	r1, [r7, #20]
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f000 f805 	bl	800dccc <ip4_output_if_src>
 800dcc2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b088      	sub	sp, #32
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
 800dcd8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	7b9b      	ldrb	r3, [r3, #14]
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d006      	beq.n	800dcf0 <ip4_output_if_src+0x24>
 800dce2:	4b4b      	ldr	r3, [pc, #300]	; (800de10 <ip4_output_if_src+0x144>)
 800dce4:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dce8:	494a      	ldr	r1, [pc, #296]	; (800de14 <ip4_output_if_src+0x148>)
 800dcea:	484b      	ldr	r0, [pc, #300]	; (800de18 <ip4_output_if_src+0x14c>)
 800dcec:	f001 f982 	bl	800eff4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d060      	beq.n	800ddb8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dcf6:	2314      	movs	r3, #20
 800dcf8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dcfa:	2114      	movs	r1, #20
 800dcfc:	68f8      	ldr	r0, [r7, #12]
 800dcfe:	f7f8 f943 	bl	8005f88 <pbuf_add_header>
 800dd02:	4603      	mov	r3, r0
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dd08:	f06f 0301 	mvn.w	r3, #1
 800dd0c:	e07c      	b.n	800de08 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	685b      	ldr	r3, [r3, #4]
 800dd12:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	895b      	ldrh	r3, [r3, #10]
 800dd18:	2b13      	cmp	r3, #19
 800dd1a:	d806      	bhi.n	800dd2a <ip4_output_if_src+0x5e>
 800dd1c:	4b3c      	ldr	r3, [pc, #240]	; (800de10 <ip4_output_if_src+0x144>)
 800dd1e:	f44f 7262 	mov.w	r2, #904	; 0x388
 800dd22:	493e      	ldr	r1, [pc, #248]	; (800de1c <ip4_output_if_src+0x150>)
 800dd24:	483c      	ldr	r0, [pc, #240]	; (800de18 <ip4_output_if_src+0x14c>)
 800dd26:	f001 f965 	bl	800eff4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dd2a:	69fb      	ldr	r3, [r7, #28]
 800dd2c:	78fa      	ldrb	r2, [r7, #3]
 800dd2e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd36:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dd40:	8b7b      	ldrh	r3, [r7, #26]
 800dd42:	089b      	lsrs	r3, r3, #2
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd4c:	b2da      	uxtb	r2, r3
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dd58:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	891b      	ldrh	r3, [r3, #8]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7f6 fe4a 	bl	80049f8 <lwip_htons>
 800dd64:	4603      	mov	r3, r0
 800dd66:	461a      	mov	r2, r3
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	719a      	strb	r2, [r3, #6]
 800dd72:	2200      	movs	r2, #0
 800dd74:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dd76:	4b2a      	ldr	r3, [pc, #168]	; (800de20 <ip4_output_if_src+0x154>)
 800dd78:	881b      	ldrh	r3, [r3, #0]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7f6 fe3c 	bl	80049f8 <lwip_htons>
 800dd80:	4603      	mov	r3, r0
 800dd82:	461a      	mov	r2, r3
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dd88:	4b25      	ldr	r3, [pc, #148]	; (800de20 <ip4_output_if_src+0x154>)
 800dd8a:	881b      	ldrh	r3, [r3, #0]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	b29a      	uxth	r2, r3
 800dd90:	4b23      	ldr	r3, [pc, #140]	; (800de20 <ip4_output_if_src+0x154>)
 800dd92:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d104      	bne.n	800dda4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dd9a:	4b22      	ldr	r3, [pc, #136]	; (800de24 <ip4_output_if_src+0x158>)
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	69fb      	ldr	r3, [r7, #28]
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	e003      	b.n	800ddac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	69fb      	ldr	r3, [r7, #28]
 800ddaa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	729a      	strb	r2, [r3, #10]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	72da      	strb	r2, [r3, #11]
 800ddb6:	e00f      	b.n	800ddd8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	895b      	ldrh	r3, [r3, #10]
 800ddbc:	2b13      	cmp	r3, #19
 800ddbe:	d802      	bhi.n	800ddc6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ddc0:	f06f 0301 	mvn.w	r3, #1
 800ddc4:	e020      	b.n	800de08 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	691b      	ldr	r3, [r3, #16]
 800ddd0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ddd2:	f107 0314 	add.w	r3, r7, #20
 800ddd6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ddd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00c      	beq.n	800ddfa <ip4_output_if_src+0x12e>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	891a      	ldrh	r2, [r3, #8]
 800dde4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dde6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d906      	bls.n	800ddfa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f000 fde3 	bl	800e9bc <ip4_frag>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	e006      	b.n	800de08 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ddfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	68f9      	ldr	r1, [r7, #12]
 800de02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de04:	4798      	blx	r3
 800de06:	4603      	mov	r3, r0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3720      	adds	r7, #32
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	08012868 	.word	0x08012868
 800de14:	0801289c 	.word	0x0801289c
 800de18:	080128a8 	.word	0x080128a8
 800de1c:	080128d0 	.word	0x080128d0
 800de20:	200088be 	.word	0x200088be
 800de24:	08012cb0 	.word	0x08012cb0

0800de28 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800de28:	b480      	push	{r7}
 800de2a:	b085      	sub	sp, #20
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de3c:	d002      	beq.n	800de44 <ip4_addr_isbroadcast_u32+0x1c>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d101      	bne.n	800de48 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800de44:	2301      	movs	r3, #1
 800de46:	e02a      	b.n	800de9e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de4e:	f003 0302 	and.w	r3, r3, #2
 800de52:	2b00      	cmp	r3, #0
 800de54:	d101      	bne.n	800de5a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800de56:	2300      	movs	r3, #0
 800de58:	e021      	b.n	800de9e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	3304      	adds	r3, #4
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	429a      	cmp	r2, r3
 800de64:	d101      	bne.n	800de6a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800de66:	2300      	movs	r3, #0
 800de68:	e019      	b.n	800de9e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	3304      	adds	r3, #4
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	405a      	eors	r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	3308      	adds	r3, #8
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4013      	ands	r3, r2
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10d      	bne.n	800de9c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	3308      	adds	r3, #8
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	43da      	mvns	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	3308      	adds	r3, #8
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de94:	429a      	cmp	r2, r3
 800de96:	d101      	bne.n	800de9c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800de98:	2301      	movs	r3, #1
 800de9a:	e000      	b.n	800de9e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800de9c:	2300      	movs	r3, #0
  }
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3714      	adds	r7, #20
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr
	...

0800deac <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800deb4:	2210      	movs	r2, #16
 800deb6:	4904      	ldr	r1, [pc, #16]	; (800dec8 <ip4addr_ntoa+0x1c>)
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 f807 	bl	800decc <ip4addr_ntoa_r>
 800debe:	4603      	mov	r3, r0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	200088c0 	.word	0x200088c0

0800decc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800decc:	b480      	push	{r7}
 800dece:	b08d      	sub	sp, #52	; 0x34
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800ded8:	2300      	movs	r3, #0
 800deda:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800dee6:	f107 0318 	add.w	r3, r7, #24
 800deea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800deec:	2300      	movs	r3, #0
 800deee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800def2:	e058      	b.n	800dfa6 <ip4addr_ntoa_r+0xda>
    i = 0;
 800def4:	2300      	movs	r3, #0
 800def6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800defa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defc:	781a      	ldrb	r2, [r3, #0]
 800defe:	4b32      	ldr	r3, [pc, #200]	; (800dfc8 <ip4addr_ntoa_r+0xfc>)
 800df00:	fba3 1302 	umull	r1, r3, r3, r2
 800df04:	08d9      	lsrs	r1, r3, #3
 800df06:	460b      	mov	r3, r1
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	440b      	add	r3, r1
 800df0c:	005b      	lsls	r3, r3, #1
 800df0e:	1ad3      	subs	r3, r2, r3
 800df10:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800df12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	4a2c      	ldr	r2, [pc, #176]	; (800dfc8 <ip4addr_ntoa_r+0xfc>)
 800df18:	fba2 2303 	umull	r2, r3, r2, r3
 800df1c:	08db      	lsrs	r3, r3, #3
 800df1e:	b2da      	uxtb	r2, r3
 800df20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df22:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800df24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df28:	1c5a      	adds	r2, r3, #1
 800df2a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800df2e:	4619      	mov	r1, r3
 800df30:	7ffb      	ldrb	r3, [r7, #31]
 800df32:	3330      	adds	r3, #48	; 0x30
 800df34:	b2da      	uxtb	r2, r3
 800df36:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800df3a:	443b      	add	r3, r7
 800df3c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1d8      	bne.n	800defa <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800df48:	e011      	b.n	800df6e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800df4a:	6a3b      	ldr	r3, [r7, #32]
 800df4c:	1c5a      	adds	r2, r3, #1
 800df4e:	623a      	str	r2, [r7, #32]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	429a      	cmp	r2, r3
 800df54:	dc01      	bgt.n	800df5a <ip4addr_ntoa_r+0x8e>
        return NULL;
 800df56:	2300      	movs	r3, #0
 800df58:	e030      	b.n	800dfbc <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800df5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800df5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df60:	1c59      	adds	r1, r3, #1
 800df62:	62f9      	str	r1, [r7, #44]	; 0x2c
 800df64:	3230      	adds	r2, #48	; 0x30
 800df66:	443a      	add	r2, r7
 800df68:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800df6c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800df6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df72:	1e5a      	subs	r2, r3, #1
 800df74:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d1e6      	bne.n	800df4a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800df7c:	6a3b      	ldr	r3, [r7, #32]
 800df7e:	1c5a      	adds	r2, r3, #1
 800df80:	623a      	str	r2, [r7, #32]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	429a      	cmp	r2, r3
 800df86:	dc01      	bgt.n	800df8c <ip4addr_ntoa_r+0xc0>
      return NULL;
 800df88:	2300      	movs	r3, #0
 800df8a:	e017      	b.n	800dfbc <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800df8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8e:	1c5a      	adds	r2, r3, #1
 800df90:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df92:	222e      	movs	r2, #46	; 0x2e
 800df94:	701a      	strb	r2, [r3, #0]
    ap++;
 800df96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df98:	3301      	adds	r3, #1
 800df9a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800df9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dfa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfaa:	2b03      	cmp	r3, #3
 800dfac:	d9a2      	bls.n	800def4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800dfae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb0:	3b01      	subs	r3, #1
 800dfb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	701a      	strb	r2, [r3, #0]
  return buf;
 800dfba:	68bb      	ldr	r3, [r7, #8]
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3734      	adds	r7, #52	; 0x34
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr
 800dfc8:	cccccccd 	.word	0xcccccccd

0800dfcc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dfd6:	4b12      	ldr	r3, [pc, #72]	; (800e020 <ip_reass_tmr+0x54>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dfdc:	e018      	b.n	800e010 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	7fdb      	ldrb	r3, [r3, #31]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d00b      	beq.n	800dffe <ip_reass_tmr+0x32>
      r->timer--;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	7fdb      	ldrb	r3, [r3, #31]
 800dfea:	3b01      	subs	r3, #1
 800dfec:	b2da      	uxtb	r2, r3
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	60fb      	str	r3, [r7, #12]
 800dffc:	e008      	b.n	800e010 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e008:	68b9      	ldr	r1, [r7, #8]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 f80a 	bl	800e024 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d1e3      	bne.n	800dfde <ip_reass_tmr+0x12>
    }
  }
}
 800e016:	bf00      	nop
 800e018:	bf00      	nop
 800e01a:	3710      	adds	r7, #16
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	200088d0 	.word	0x200088d0

0800e024 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b088      	sub	sp, #32
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e032:	683a      	ldr	r2, [r7, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	429a      	cmp	r2, r3
 800e038:	d105      	bne.n	800e046 <ip_reass_free_complete_datagram+0x22>
 800e03a:	4b45      	ldr	r3, [pc, #276]	; (800e150 <ip_reass_free_complete_datagram+0x12c>)
 800e03c:	22ab      	movs	r2, #171	; 0xab
 800e03e:	4945      	ldr	r1, [pc, #276]	; (800e154 <ip_reass_free_complete_datagram+0x130>)
 800e040:	4845      	ldr	r0, [pc, #276]	; (800e158 <ip_reass_free_complete_datagram+0x134>)
 800e042:	f000 ffd7 	bl	800eff4 <iprintf>
  if (prev != NULL) {
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00a      	beq.n	800e062 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	687a      	ldr	r2, [r7, #4]
 800e052:	429a      	cmp	r2, r3
 800e054:	d005      	beq.n	800e062 <ip_reass_free_complete_datagram+0x3e>
 800e056:	4b3e      	ldr	r3, [pc, #248]	; (800e150 <ip_reass_free_complete_datagram+0x12c>)
 800e058:	22ad      	movs	r2, #173	; 0xad
 800e05a:	4940      	ldr	r1, [pc, #256]	; (800e15c <ip_reass_free_complete_datagram+0x138>)
 800e05c:	483e      	ldr	r0, [pc, #248]	; (800e158 <ip_reass_free_complete_datagram+0x134>)
 800e05e:	f000 ffc9 	bl	800eff4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	889b      	ldrh	r3, [r3, #4]
 800e06e:	b29b      	uxth	r3, r3
 800e070:	2b00      	cmp	r3, #0
 800e072:	d12a      	bne.n	800e0ca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	685b      	ldr	r3, [r3, #4]
 800e078:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	6858      	ldr	r0, [r3, #4]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	3308      	adds	r3, #8
 800e08a:	2214      	movs	r2, #20
 800e08c:	4619      	mov	r1, r3
 800e08e:	f001 f8c6 	bl	800f21e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e092:	2101      	movs	r1, #1
 800e094:	69b8      	ldr	r0, [r7, #24]
 800e096:	f7ff fbb7 	bl	800d808 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e09a:	69b8      	ldr	r0, [r7, #24]
 800e09c:	f7f8 f892 	bl	80061c4 <pbuf_clen>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e0a4:	8bfa      	ldrh	r2, [r7, #30]
 800e0a6:	8a7b      	ldrh	r3, [r7, #18]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0ae:	db05      	blt.n	800e0bc <ip_reass_free_complete_datagram+0x98>
 800e0b0:	4b27      	ldr	r3, [pc, #156]	; (800e150 <ip_reass_free_complete_datagram+0x12c>)
 800e0b2:	22bc      	movs	r2, #188	; 0xbc
 800e0b4:	492a      	ldr	r1, [pc, #168]	; (800e160 <ip_reass_free_complete_datagram+0x13c>)
 800e0b6:	4828      	ldr	r0, [pc, #160]	; (800e158 <ip_reass_free_complete_datagram+0x134>)
 800e0b8:	f000 ff9c 	bl	800eff4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e0bc:	8bfa      	ldrh	r2, [r7, #30]
 800e0be:	8a7b      	ldrh	r3, [r7, #18]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e0c4:	69b8      	ldr	r0, [r7, #24]
 800e0c6:	f7f7 fff5 	bl	80060b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e0d0:	e01f      	b.n	800e112 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e0d2:	69bb      	ldr	r3, [r7, #24]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e0d8:	69bb      	ldr	r3, [r7, #24]
 800e0da:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f7f8 f86e 	bl	80061c4 <pbuf_clen>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e0ec:	8bfa      	ldrh	r2, [r7, #30]
 800e0ee:	8a7b      	ldrh	r3, [r7, #18]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0f6:	db05      	blt.n	800e104 <ip_reass_free_complete_datagram+0xe0>
 800e0f8:	4b15      	ldr	r3, [pc, #84]	; (800e150 <ip_reass_free_complete_datagram+0x12c>)
 800e0fa:	22cc      	movs	r2, #204	; 0xcc
 800e0fc:	4918      	ldr	r1, [pc, #96]	; (800e160 <ip_reass_free_complete_datagram+0x13c>)
 800e0fe:	4816      	ldr	r0, [pc, #88]	; (800e158 <ip_reass_free_complete_datagram+0x134>)
 800e100:	f000 ff78 	bl	800eff4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e104:	8bfa      	ldrh	r2, [r7, #30]
 800e106:	8a7b      	ldrh	r3, [r7, #18]
 800e108:	4413      	add	r3, r2
 800e10a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f7f7 ffd1 	bl	80060b4 <pbuf_free>
  while (p != NULL) {
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d1dc      	bne.n	800e0d2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e118:	6839      	ldr	r1, [r7, #0]
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 f8c2 	bl	800e2a4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e120:	4b10      	ldr	r3, [pc, #64]	; (800e164 <ip_reass_free_complete_datagram+0x140>)
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	8bfa      	ldrh	r2, [r7, #30]
 800e126:	429a      	cmp	r2, r3
 800e128:	d905      	bls.n	800e136 <ip_reass_free_complete_datagram+0x112>
 800e12a:	4b09      	ldr	r3, [pc, #36]	; (800e150 <ip_reass_free_complete_datagram+0x12c>)
 800e12c:	22d2      	movs	r2, #210	; 0xd2
 800e12e:	490e      	ldr	r1, [pc, #56]	; (800e168 <ip_reass_free_complete_datagram+0x144>)
 800e130:	4809      	ldr	r0, [pc, #36]	; (800e158 <ip_reass_free_complete_datagram+0x134>)
 800e132:	f000 ff5f 	bl	800eff4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e136:	4b0b      	ldr	r3, [pc, #44]	; (800e164 <ip_reass_free_complete_datagram+0x140>)
 800e138:	881a      	ldrh	r2, [r3, #0]
 800e13a:	8bfb      	ldrh	r3, [r7, #30]
 800e13c:	1ad3      	subs	r3, r2, r3
 800e13e:	b29a      	uxth	r2, r3
 800e140:	4b08      	ldr	r3, [pc, #32]	; (800e164 <ip_reass_free_complete_datagram+0x140>)
 800e142:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e144:	8bfb      	ldrh	r3, [r7, #30]
}
 800e146:	4618      	mov	r0, r3
 800e148:	3720      	adds	r7, #32
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	08012900 	.word	0x08012900
 800e154:	0801293c 	.word	0x0801293c
 800e158:	08012948 	.word	0x08012948
 800e15c:	08012970 	.word	0x08012970
 800e160:	08012984 	.word	0x08012984
 800e164:	200088d4 	.word	0x200088d4
 800e168:	080129a4 	.word	0x080129a4

0800e16c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b08a      	sub	sp, #40	; 0x28
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e176:	2300      	movs	r3, #0
 800e178:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e17a:	2300      	movs	r3, #0
 800e17c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e17e:	2300      	movs	r3, #0
 800e180:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e182:	2300      	movs	r3, #0
 800e184:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e186:	2300      	movs	r3, #0
 800e188:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e18a:	4b28      	ldr	r3, [pc, #160]	; (800e22c <ip_reass_remove_oldest_datagram+0xc0>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e190:	e030      	b.n	800e1f4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e194:	695a      	ldr	r2, [r3, #20]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d10c      	bne.n	800e1b8 <ip_reass_remove_oldest_datagram+0x4c>
 800e19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a0:	699a      	ldr	r2, [r3, #24]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	691b      	ldr	r3, [r3, #16]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d106      	bne.n	800e1b8 <ip_reass_remove_oldest_datagram+0x4c>
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ac:	899a      	ldrh	r2, [r3, #12]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	889b      	ldrh	r3, [r3, #4]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d014      	beq.n	800e1e2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d104      	bne.n	800e1ce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	61bb      	str	r3, [r7, #24]
 800e1cc:	e009      	b.n	800e1e2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d0:	7fda      	ldrb	r2, [r3, #31]
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	7fdb      	ldrb	r3, [r3, #31]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d803      	bhi.n	800e1e2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1dc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1cb      	bne.n	800e192 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d008      	beq.n	800e212 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e200:	69b9      	ldr	r1, [r7, #24]
 800e202:	6a38      	ldr	r0, [r7, #32]
 800e204:	f7ff ff0e 	bl	800e024 <ip_reass_free_complete_datagram>
 800e208:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e20a:	697a      	ldr	r2, [r7, #20]
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	4413      	add	r3, r2
 800e210:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e212:	697a      	ldr	r2, [r7, #20]
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	429a      	cmp	r2, r3
 800e218:	da02      	bge.n	800e220 <ip_reass_remove_oldest_datagram+0xb4>
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	dcac      	bgt.n	800e17a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e220:	697b      	ldr	r3, [r7, #20]
}
 800e222:	4618      	mov	r0, r3
 800e224:	3728      	adds	r7, #40	; 0x28
 800e226:	46bd      	mov	sp, r7
 800e228:	bd80      	pop	{r7, pc}
 800e22a:	bf00      	nop
 800e22c:	200088d0 	.word	0x200088d0

0800e230 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e23a:	2004      	movs	r0, #4
 800e23c:	f7f7 f854 	bl	80052e8 <memp_malloc>
 800e240:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d110      	bne.n	800e26a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f7ff ff8e 	bl	800e16c <ip_reass_remove_oldest_datagram>
 800e250:	4602      	mov	r2, r0
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	4293      	cmp	r3, r2
 800e256:	dc03      	bgt.n	800e260 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e258:	2004      	movs	r0, #4
 800e25a:	f7f7 f845 	bl	80052e8 <memp_malloc>
 800e25e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e266:	2300      	movs	r3, #0
 800e268:	e016      	b.n	800e298 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e26a:	2220      	movs	r2, #32
 800e26c:	2100      	movs	r1, #0
 800e26e:	68f8      	ldr	r0, [r7, #12]
 800e270:	f000 ff5f 	bl	800f132 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	220f      	movs	r2, #15
 800e278:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e27a:	4b09      	ldr	r3, [pc, #36]	; (800e2a0 <ip_reass_enqueue_new_datagram+0x70>)
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e282:	4a07      	ldr	r2, [pc, #28]	; (800e2a0 <ip_reass_enqueue_new_datagram+0x70>)
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	3308      	adds	r3, #8
 800e28c:	2214      	movs	r2, #20
 800e28e:	6879      	ldr	r1, [r7, #4]
 800e290:	4618      	mov	r0, r3
 800e292:	f000 ffc4 	bl	800f21e <memcpy>
  return ipr;
 800e296:	68fb      	ldr	r3, [r7, #12]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3710      	adds	r7, #16
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	200088d0 	.word	0x200088d0

0800e2a4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e2ae:	4b10      	ldr	r3, [pc, #64]	; (800e2f0 <ip_reass_dequeue_datagram+0x4c>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d104      	bne.n	800e2c2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	4a0c      	ldr	r2, [pc, #48]	; (800e2f0 <ip_reass_dequeue_datagram+0x4c>)
 800e2be:	6013      	str	r3, [r2, #0]
 800e2c0:	e00d      	b.n	800e2de <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d106      	bne.n	800e2d6 <ip_reass_dequeue_datagram+0x32>
 800e2c8:	4b0a      	ldr	r3, [pc, #40]	; (800e2f4 <ip_reass_dequeue_datagram+0x50>)
 800e2ca:	f240 1245 	movw	r2, #325	; 0x145
 800e2ce:	490a      	ldr	r1, [pc, #40]	; (800e2f8 <ip_reass_dequeue_datagram+0x54>)
 800e2d0:	480a      	ldr	r0, [pc, #40]	; (800e2fc <ip_reass_dequeue_datagram+0x58>)
 800e2d2:	f000 fe8f 	bl	800eff4 <iprintf>
    prev->next = ipr->next;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e2de:	6879      	ldr	r1, [r7, #4]
 800e2e0:	2004      	movs	r0, #4
 800e2e2:	f7f7 f871 	bl	80053c8 <memp_free>
}
 800e2e6:	bf00      	nop
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	200088d0 	.word	0x200088d0
 800e2f4:	08012900 	.word	0x08012900
 800e2f8:	080129c8 	.word	0x080129c8
 800e2fc:	08012948 	.word	0x08012948

0800e300 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08c      	sub	sp, #48	; 0x30
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e30c:	2300      	movs	r3, #0
 800e30e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e310:	2301      	movs	r3, #1
 800e312:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	885b      	ldrh	r3, [r3, #2]
 800e31e:	b29b      	uxth	r3, r3
 800e320:	4618      	mov	r0, r3
 800e322:	f7f6 fb69 	bl	80049f8 <lwip_htons>
 800e326:	4603      	mov	r3, r0
 800e328:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	f003 030f 	and.w	r3, r3, #15
 800e332:	b2db      	uxtb	r3, r3
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e338:	7e7b      	ldrb	r3, [r7, #25]
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	8b7a      	ldrh	r2, [r7, #26]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d202      	bcs.n	800e348 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e342:	f04f 33ff 	mov.w	r3, #4294967295
 800e346:	e135      	b.n	800e5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e348:	7e7b      	ldrb	r3, [r7, #25]
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	8b7a      	ldrh	r2, [r7, #26]
 800e34e:	1ad3      	subs	r3, r2, r3
 800e350:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	88db      	ldrh	r3, [r3, #6]
 800e356:	b29b      	uxth	r3, r3
 800e358:	4618      	mov	r0, r3
 800e35a:	f7f6 fb4d 	bl	80049f8 <lwip_htons>
 800e35e:	4603      	mov	r3, r0
 800e360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e364:	b29b      	uxth	r3, r3
 800e366:	00db      	lsls	r3, r3, #3
 800e368:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e372:	2200      	movs	r2, #0
 800e374:	701a      	strb	r2, [r3, #0]
 800e376:	2200      	movs	r2, #0
 800e378:	705a      	strb	r2, [r3, #1]
 800e37a:	2200      	movs	r2, #0
 800e37c:	709a      	strb	r2, [r3, #2]
 800e37e:	2200      	movs	r2, #0
 800e380:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e384:	8afa      	ldrh	r2, [r7, #22]
 800e386:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e388:	8afa      	ldrh	r2, [r7, #22]
 800e38a:	8b7b      	ldrh	r3, [r7, #26]
 800e38c:	4413      	add	r3, r2
 800e38e:	b29a      	uxth	r2, r3
 800e390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e392:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e396:	88db      	ldrh	r3, [r3, #6]
 800e398:	b29b      	uxth	r3, r3
 800e39a:	8afa      	ldrh	r2, [r7, #22]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d902      	bls.n	800e3a6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e3a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3a4:	e106      	b.n	800e5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ac:	e068      	b.n	800e480 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b6:	889b      	ldrh	r3, [r3, #4]
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	693b      	ldr	r3, [r7, #16]
 800e3bc:	889b      	ldrh	r3, [r3, #4]
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d235      	bcs.n	800e430 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d020      	beq.n	800e412 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d2:	889b      	ldrh	r3, [r3, #4]
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3d8:	88db      	ldrh	r3, [r3, #6]
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	429a      	cmp	r2, r3
 800e3de:	d307      	bcc.n	800e3f0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e2:	88db      	ldrh	r3, [r3, #6]
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	889b      	ldrh	r3, [r3, #4]
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	429a      	cmp	r2, r3
 800e3ee:	d902      	bls.n	800e3f6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3f4:	e0de      	b.n	800e5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3fe:	88db      	ldrh	r3, [r3, #6]
 800e400:	b29a      	uxth	r2, r3
 800e402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e404:	889b      	ldrh	r3, [r3, #4]
 800e406:	b29b      	uxth	r3, r3
 800e408:	429a      	cmp	r2, r3
 800e40a:	d03d      	beq.n	800e488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e40c:	2300      	movs	r3, #0
 800e40e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e410:	e03a      	b.n	800e488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e414:	88db      	ldrh	r3, [r3, #6]
 800e416:	b29a      	uxth	r2, r3
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	889b      	ldrh	r3, [r3, #4]
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	429a      	cmp	r2, r3
 800e420:	d902      	bls.n	800e428 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e422:	f04f 33ff 	mov.w	r3, #4294967295
 800e426:	e0c5      	b.n	800e5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	68ba      	ldr	r2, [r7, #8]
 800e42c:	605a      	str	r2, [r3, #4]
      break;
 800e42e:	e02b      	b.n	800e488 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e432:	889b      	ldrh	r3, [r3, #4]
 800e434:	b29a      	uxth	r2, r3
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	889b      	ldrh	r3, [r3, #4]
 800e43a:	b29b      	uxth	r3, r3
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d102      	bne.n	800e446 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e440:	f04f 33ff 	mov.w	r3, #4294967295
 800e444:	e0b6      	b.n	800e5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e448:	889b      	ldrh	r3, [r3, #4]
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	88db      	ldrh	r3, [r3, #6]
 800e450:	b29b      	uxth	r3, r3
 800e452:	429a      	cmp	r2, r3
 800e454:	d202      	bcs.n	800e45c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e456:	f04f 33ff 	mov.w	r3, #4294967295
 800e45a:	e0ab      	b.n	800e5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d009      	beq.n	800e476 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e464:	88db      	ldrh	r3, [r3, #6]
 800e466:	b29a      	uxth	r2, r3
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	889b      	ldrh	r3, [r3, #4]
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	429a      	cmp	r2, r3
 800e470:	d001      	beq.n	800e476 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e472:	2300      	movs	r3, #0
 800e474:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	2b00      	cmp	r3, #0
 800e484:	d193      	bne.n	800e3ae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e486:	e000      	b.n	800e48a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e488:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d12d      	bne.n	800e4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	2b00      	cmp	r3, #0
 800e494:	d01c      	beq.n	800e4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e498:	88db      	ldrh	r3, [r3, #6]
 800e49a:	b29a      	uxth	r2, r3
 800e49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49e:	889b      	ldrh	r3, [r3, #4]
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d906      	bls.n	800e4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e4a6:	4b45      	ldr	r3, [pc, #276]	; (800e5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e4a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e4ac:	4944      	ldr	r1, [pc, #272]	; (800e5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e4ae:	4845      	ldr	r0, [pc, #276]	; (800e5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e4b0:	f000 fda0 	bl	800eff4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4bc:	88db      	ldrh	r3, [r3, #6]
 800e4be:	b29a      	uxth	r2, r3
 800e4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c2:	889b      	ldrh	r3, [r3, #4]
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	429a      	cmp	r2, r3
 800e4c8:	d010      	beq.n	800e4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	623b      	str	r3, [r7, #32]
 800e4ce:	e00d      	b.n	800e4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d006      	beq.n	800e4e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e4d8:	4b38      	ldr	r3, [pc, #224]	; (800e5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e4da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e4de:	493a      	ldr	r1, [pc, #232]	; (800e5c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e4e0:	4838      	ldr	r0, [pc, #224]	; (800e5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e4e2:	f000 fd87 	bl	800eff4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	68ba      	ldr	r2, [r7, #8]
 800e4ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d105      	bne.n	800e4fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	7f9b      	ldrb	r3, [r3, #30]
 800e4f6:	f003 0301 	and.w	r3, r3, #1
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d059      	beq.n	800e5b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e4fe:	6a3b      	ldr	r3, [r7, #32]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d04f      	beq.n	800e5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d006      	beq.n	800e51a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	889b      	ldrh	r3, [r3, #4]
 800e514:	b29b      	uxth	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d002      	beq.n	800e520 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e51a:	2300      	movs	r3, #0
 800e51c:	623b      	str	r3, [r7, #32]
 800e51e:	e041      	b.n	800e5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e522:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e52a:	e012      	b.n	800e552 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e534:	88db      	ldrh	r3, [r3, #6]
 800e536:	b29a      	uxth	r2, r3
 800e538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53a:	889b      	ldrh	r3, [r3, #4]
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	429a      	cmp	r2, r3
 800e540:	d002      	beq.n	800e548 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e542:	2300      	movs	r3, #0
 800e544:	623b      	str	r3, [r7, #32]
            break;
 800e546:	e007      	b.n	800e558 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	2b00      	cmp	r3, #0
 800e556:	d1e9      	bne.n	800e52c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d022      	beq.n	800e5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d106      	bne.n	800e574 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e566:	4b15      	ldr	r3, [pc, #84]	; (800e5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e568:	f240 12df 	movw	r2, #479	; 0x1df
 800e56c:	4917      	ldr	r1, [pc, #92]	; (800e5cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e56e:	4815      	ldr	r0, [pc, #84]	; (800e5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e570:	f000 fd40 	bl	800eff4 <iprintf>
          LWIP_ASSERT("sanity check",
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d106      	bne.n	800e58e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e580:	4b0e      	ldr	r3, [pc, #56]	; (800e5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e582:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e586:	4911      	ldr	r1, [pc, #68]	; (800e5cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e588:	480e      	ldr	r0, [pc, #56]	; (800e5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e58a:	f000 fd33 	bl	800eff4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d006      	beq.n	800e5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e596:	4b09      	ldr	r3, [pc, #36]	; (800e5bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e598:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e59c:	490c      	ldr	r1, [pc, #48]	; (800e5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e59e:	4809      	ldr	r0, [pc, #36]	; (800e5c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e5a0:	f000 fd28 	bl	800eff4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e5a4:	6a3b      	ldr	r3, [r7, #32]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	bf14      	ite	ne
 800e5aa:	2301      	movne	r3, #1
 800e5ac:	2300      	moveq	r3, #0
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	e000      	b.n	800e5b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3730      	adds	r7, #48	; 0x30
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	08012900 	.word	0x08012900
 800e5c0:	080129e4 	.word	0x080129e4
 800e5c4:	08012948 	.word	0x08012948
 800e5c8:	08012a04 	.word	0x08012a04
 800e5cc:	08012a3c 	.word	0x08012a3c
 800e5d0:	08012a4c 	.word	0x08012a4c

0800e5d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b08e      	sub	sp, #56	; 0x38
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	f003 030f 	and.w	r3, r3, #15
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	2b14      	cmp	r3, #20
 800e5f2:	f040 8171 	bne.w	800e8d8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	88db      	ldrh	r3, [r3, #6]
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7f6 f9fb 	bl	80049f8 <lwip_htons>
 800e602:	4603      	mov	r3, r0
 800e604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e608:	b29b      	uxth	r3, r3
 800e60a:	00db      	lsls	r3, r3, #3
 800e60c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e610:	885b      	ldrh	r3, [r3, #2]
 800e612:	b29b      	uxth	r3, r3
 800e614:	4618      	mov	r0, r3
 800e616:	f7f6 f9ef 	bl	80049f8 <lwip_htons>
 800e61a:	4603      	mov	r3, r0
 800e61c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	f003 030f 	and.w	r3, r3, #15
 800e626:	b2db      	uxtb	r3, r3
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e62e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e632:	b29b      	uxth	r3, r3
 800e634:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e636:	429a      	cmp	r2, r3
 800e638:	f0c0 8150 	bcc.w	800e8dc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e63c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e640:	b29b      	uxth	r3, r3
 800e642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f7f7 fdbb 	bl	80061c4 <pbuf_clen>
 800e64e:	4603      	mov	r3, r0
 800e650:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e652:	4b8c      	ldr	r3, [pc, #560]	; (800e884 <ip4_reass+0x2b0>)
 800e654:	881b      	ldrh	r3, [r3, #0]
 800e656:	461a      	mov	r2, r3
 800e658:	8c3b      	ldrh	r3, [r7, #32]
 800e65a:	4413      	add	r3, r2
 800e65c:	2b0a      	cmp	r3, #10
 800e65e:	dd10      	ble.n	800e682 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e660:	8c3b      	ldrh	r3, [r7, #32]
 800e662:	4619      	mov	r1, r3
 800e664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e666:	f7ff fd81 	bl	800e16c <ip_reass_remove_oldest_datagram>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f000 8137 	beq.w	800e8e0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e672:	4b84      	ldr	r3, [pc, #528]	; (800e884 <ip4_reass+0x2b0>)
 800e674:	881b      	ldrh	r3, [r3, #0]
 800e676:	461a      	mov	r2, r3
 800e678:	8c3b      	ldrh	r3, [r7, #32]
 800e67a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e67c:	2b0a      	cmp	r3, #10
 800e67e:	f300 812f 	bgt.w	800e8e0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e682:	4b81      	ldr	r3, [pc, #516]	; (800e888 <ip4_reass+0x2b4>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	633b      	str	r3, [r7, #48]	; 0x30
 800e688:	e015      	b.n	800e6b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68c:	695a      	ldr	r2, [r3, #20]
 800e68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e690:	68db      	ldr	r3, [r3, #12]
 800e692:	429a      	cmp	r2, r3
 800e694:	d10c      	bne.n	800e6b0 <ip4_reass+0xdc>
 800e696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e698:	699a      	ldr	r2, [r3, #24]
 800e69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69c:	691b      	ldr	r3, [r3, #16]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d106      	bne.n	800e6b0 <ip4_reass+0xdc>
 800e6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a4:	899a      	ldrh	r2, [r3, #12]
 800e6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a8:	889b      	ldrh	r3, [r3, #4]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d006      	beq.n	800e6be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	633b      	str	r3, [r7, #48]	; 0x30
 800e6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1e6      	bne.n	800e68a <ip4_reass+0xb6>
 800e6bc:	e000      	b.n	800e6c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e6be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d109      	bne.n	800e6da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e6c6:	8c3b      	ldrh	r3, [r7, #32]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e6cc:	f7ff fdb0 	bl	800e230 <ip_reass_enqueue_new_datagram>
 800e6d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d11c      	bne.n	800e712 <ip4_reass+0x13e>
      goto nullreturn;
 800e6d8:	e105      	b.n	800e8e6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6dc:	88db      	ldrh	r3, [r3, #6]
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7f6 f989 	bl	80049f8 <lwip_htons>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d110      	bne.n	800e712 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f2:	89db      	ldrh	r3, [r3, #14]
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f7f6 f97f 	bl	80049f8 <lwip_htons>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e700:	2b00      	cmp	r3, #0
 800e702:	d006      	beq.n	800e712 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e706:	3308      	adds	r3, #8
 800e708:	2214      	movs	r2, #20
 800e70a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e70c:	4618      	mov	r0, r3
 800e70e:	f000 fd86 	bl	800f21e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e714:	88db      	ldrh	r3, [r3, #6]
 800e716:	b29b      	uxth	r3, r3
 800e718:	f003 0320 	and.w	r3, r3, #32
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	bf0c      	ite	eq
 800e720:	2301      	moveq	r3, #1
 800e722:	2300      	movne	r3, #0
 800e724:	b2db      	uxtb	r3, r3
 800e726:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00e      	beq.n	800e74c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e72e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e730:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e732:	4413      	add	r3, r2
 800e734:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e736:	8b7a      	ldrh	r2, [r7, #26]
 800e738:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e73a:	429a      	cmp	r2, r3
 800e73c:	f0c0 80a0 	bcc.w	800e880 <ip4_reass+0x2ac>
 800e740:	8b7b      	ldrh	r3, [r7, #26]
 800e742:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e746:	4293      	cmp	r3, r2
 800e748:	f200 809a 	bhi.w	800e880 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e74c:	69fa      	ldr	r2, [r7, #28]
 800e74e:	6879      	ldr	r1, [r7, #4]
 800e750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e752:	f7ff fdd5 	bl	800e300 <ip_reass_chain_frag_into_datagram_and_validate>
 800e756:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e75e:	f000 809b 	beq.w	800e898 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e762:	4b48      	ldr	r3, [pc, #288]	; (800e884 <ip4_reass+0x2b0>)
 800e764:	881a      	ldrh	r2, [r3, #0]
 800e766:	8c3b      	ldrh	r3, [r7, #32]
 800e768:	4413      	add	r3, r2
 800e76a:	b29a      	uxth	r2, r3
 800e76c:	4b45      	ldr	r3, [pc, #276]	; (800e884 <ip4_reass+0x2b0>)
 800e76e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d00d      	beq.n	800e792 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e776:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e77a:	4413      	add	r3, r2
 800e77c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e780:	8a7a      	ldrh	r2, [r7, #18]
 800e782:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e786:	7f9b      	ldrb	r3, [r3, #30]
 800e788:	f043 0301 	orr.w	r3, r3, #1
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e790:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2b01      	cmp	r3, #1
 800e796:	d171      	bne.n	800e87c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	8b9b      	ldrh	r3, [r3, #28]
 800e79c:	3314      	adds	r3, #20
 800e79e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b4:	3308      	adds	r3, #8
 800e7b6:	2214      	movs	r2, #20
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7bc:	f000 fd2f 	bl	800f21e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e7c0:	8a3b      	ldrh	r3, [r7, #16]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7f6 f918 	bl	80049f8 <lwip_htons>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	719a      	strb	r2, [r3, #6]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7dc:	2200      	movs	r2, #0
 800e7de:	729a      	strb	r2, [r3, #10]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e7ea:	e00d      	b.n	800e808 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e7f2:	2114      	movs	r1, #20
 800e7f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e7f6:	f7f7 fbd7 	bl	8005fa8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e7fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7f7 fd1b 	bl	8006238 <pbuf_cat>
      r = iprh->next_pbuf;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1ee      	bne.n	800e7ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e80e:	4b1e      	ldr	r3, [pc, #120]	; (800e888 <ip4_reass+0x2b4>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e814:	429a      	cmp	r2, r3
 800e816:	d102      	bne.n	800e81e <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e818:	2300      	movs	r3, #0
 800e81a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e81c:	e010      	b.n	800e840 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e81e:	4b1a      	ldr	r3, [pc, #104]	; (800e888 <ip4_reass+0x2b4>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e824:	e007      	b.n	800e836 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d006      	beq.n	800e83e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d1f4      	bne.n	800e826 <ip4_reass+0x252>
 800e83c:	e000      	b.n	800e840 <ip4_reass+0x26c>
          break;
 800e83e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e844:	f7ff fd2e 	bl	800e2a4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f7f7 fcbb 	bl	80061c4 <pbuf_clen>
 800e84e:	4603      	mov	r3, r0
 800e850:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e852:	4b0c      	ldr	r3, [pc, #48]	; (800e884 <ip4_reass+0x2b0>)
 800e854:	881b      	ldrh	r3, [r3, #0]
 800e856:	8c3a      	ldrh	r2, [r7, #32]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d906      	bls.n	800e86a <ip4_reass+0x296>
 800e85c:	4b0b      	ldr	r3, [pc, #44]	; (800e88c <ip4_reass+0x2b8>)
 800e85e:	f240 229b 	movw	r2, #667	; 0x29b
 800e862:	490b      	ldr	r1, [pc, #44]	; (800e890 <ip4_reass+0x2bc>)
 800e864:	480b      	ldr	r0, [pc, #44]	; (800e894 <ip4_reass+0x2c0>)
 800e866:	f000 fbc5 	bl	800eff4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e86a:	4b06      	ldr	r3, [pc, #24]	; (800e884 <ip4_reass+0x2b0>)
 800e86c:	881a      	ldrh	r2, [r3, #0]
 800e86e:	8c3b      	ldrh	r3, [r7, #32]
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	b29a      	uxth	r2, r3
 800e874:	4b03      	ldr	r3, [pc, #12]	; (800e884 <ip4_reass+0x2b0>)
 800e876:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	e038      	b.n	800e8ee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e87c:	2300      	movs	r3, #0
 800e87e:	e036      	b.n	800e8ee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e880:	bf00      	nop
 800e882:	e00a      	b.n	800e89a <ip4_reass+0x2c6>
 800e884:	200088d4 	.word	0x200088d4
 800e888:	200088d0 	.word	0x200088d0
 800e88c:	08012900 	.word	0x08012900
 800e890:	08012a70 	.word	0x08012a70
 800e894:	08012948 	.word	0x08012948
    goto nullreturn_ipr;
 800e898:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d106      	bne.n	800e8ae <ip4_reass+0x2da>
 800e8a0:	4b15      	ldr	r3, [pc, #84]	; (800e8f8 <ip4_reass+0x324>)
 800e8a2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e8a6:	4915      	ldr	r1, [pc, #84]	; (800e8fc <ip4_reass+0x328>)
 800e8a8:	4815      	ldr	r0, [pc, #84]	; (800e900 <ip4_reass+0x32c>)
 800e8aa:	f000 fba3 	bl	800eff4 <iprintf>
  if (ipr->p == NULL) {
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b0:	685b      	ldr	r3, [r3, #4]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d116      	bne.n	800e8e4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e8b6:	4b13      	ldr	r3, [pc, #76]	; (800e904 <ip4_reass+0x330>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d006      	beq.n	800e8ce <ip4_reass+0x2fa>
 800e8c0:	4b0d      	ldr	r3, [pc, #52]	; (800e8f8 <ip4_reass+0x324>)
 800e8c2:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e8c6:	4910      	ldr	r1, [pc, #64]	; (800e908 <ip4_reass+0x334>)
 800e8c8:	480d      	ldr	r0, [pc, #52]	; (800e900 <ip4_reass+0x32c>)
 800e8ca:	f000 fb93 	bl	800eff4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8d2:	f7ff fce7 	bl	800e2a4 <ip_reass_dequeue_datagram>
 800e8d6:	e006      	b.n	800e8e6 <ip4_reass+0x312>
    goto nullreturn;
 800e8d8:	bf00      	nop
 800e8da:	e004      	b.n	800e8e6 <ip4_reass+0x312>
    goto nullreturn;
 800e8dc:	bf00      	nop
 800e8de:	e002      	b.n	800e8e6 <ip4_reass+0x312>
      goto nullreturn;
 800e8e0:	bf00      	nop
 800e8e2:	e000      	b.n	800e8e6 <ip4_reass+0x312>
  }

nullreturn:
 800e8e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7f7 fbe4 	bl	80060b4 <pbuf_free>
  return NULL;
 800e8ec:	2300      	movs	r3, #0
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3738      	adds	r7, #56	; 0x38
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}
 800e8f6:	bf00      	nop
 800e8f8:	08012900 	.word	0x08012900
 800e8fc:	08012a8c 	.word	0x08012a8c
 800e900:	08012948 	.word	0x08012948
 800e904:	200088d0 	.word	0x200088d0
 800e908:	08012a98 	.word	0x08012a98

0800e90c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e910:	2005      	movs	r0, #5
 800e912:	f7f6 fce9 	bl	80052e8 <memp_malloc>
 800e916:	4603      	mov	r3, r0
}
 800e918:	4618      	mov	r0, r3
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d106      	bne.n	800e938 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e92a:	4b07      	ldr	r3, [pc, #28]	; (800e948 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e92c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e930:	4906      	ldr	r1, [pc, #24]	; (800e94c <ip_frag_free_pbuf_custom_ref+0x30>)
 800e932:	4807      	ldr	r0, [pc, #28]	; (800e950 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e934:	f000 fb5e 	bl	800eff4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e938:	6879      	ldr	r1, [r7, #4]
 800e93a:	2005      	movs	r0, #5
 800e93c:	f7f6 fd44 	bl	80053c8 <memp_free>
}
 800e940:	bf00      	nop
 800e942:	3708      	adds	r7, #8
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}
 800e948:	08012900 	.word	0x08012900
 800e94c:	08012ab8 	.word	0x08012ab8
 800e950:	08012948 	.word	0x08012948

0800e954 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d106      	bne.n	800e974 <ipfrag_free_pbuf_custom+0x20>
 800e966:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <ipfrag_free_pbuf_custom+0x58>)
 800e968:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e96c:	4910      	ldr	r1, [pc, #64]	; (800e9b0 <ipfrag_free_pbuf_custom+0x5c>)
 800e96e:	4811      	ldr	r0, [pc, #68]	; (800e9b4 <ipfrag_free_pbuf_custom+0x60>)
 800e970:	f000 fb40 	bl	800eff4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e974:	68fa      	ldr	r2, [r7, #12]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d006      	beq.n	800e98a <ipfrag_free_pbuf_custom+0x36>
 800e97c:	4b0b      	ldr	r3, [pc, #44]	; (800e9ac <ipfrag_free_pbuf_custom+0x58>)
 800e97e:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e982:	490d      	ldr	r1, [pc, #52]	; (800e9b8 <ipfrag_free_pbuf_custom+0x64>)
 800e984:	480b      	ldr	r0, [pc, #44]	; (800e9b4 <ipfrag_free_pbuf_custom+0x60>)
 800e986:	f000 fb35 	bl	800eff4 <iprintf>
  if (pcr->original != NULL) {
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	695b      	ldr	r3, [r3, #20]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d004      	beq.n	800e99c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	695b      	ldr	r3, [r3, #20]
 800e996:	4618      	mov	r0, r3
 800e998:	f7f7 fb8c 	bl	80060b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e99c:	68f8      	ldr	r0, [r7, #12]
 800e99e:	f7ff ffbd 	bl	800e91c <ip_frag_free_pbuf_custom_ref>
}
 800e9a2:	bf00      	nop
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}
 800e9aa:	bf00      	nop
 800e9ac:	08012900 	.word	0x08012900
 800e9b0:	08012ac4 	.word	0x08012ac4
 800e9b4:	08012948 	.word	0x08012948
 800e9b8:	08012ad0 	.word	0x08012ad0

0800e9bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b094      	sub	sp, #80	; 0x50
 800e9c0:	af02      	add	r7, sp, #8
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9d2:	3b14      	subs	r3, #20
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	da00      	bge.n	800e9da <ip4_frag+0x1e>
 800e9d8:	3307      	adds	r3, #7
 800e9da:	10db      	asrs	r3, r3, #3
 800e9dc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e9de:	2314      	movs	r3, #20
 800e9e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ee:	781b      	ldrb	r3, [r3, #0]
 800e9f0:	f003 030f 	and.w	r3, r3, #15
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	2b14      	cmp	r3, #20
 800e9fc:	d002      	beq.n	800ea04 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e9fe:	f06f 0305 	mvn.w	r3, #5
 800ea02:	e110      	b.n	800ec26 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	895b      	ldrh	r3, [r3, #10]
 800ea08:	2b13      	cmp	r3, #19
 800ea0a:	d809      	bhi.n	800ea20 <ip4_frag+0x64>
 800ea0c:	4b88      	ldr	r3, [pc, #544]	; (800ec30 <ip4_frag+0x274>)
 800ea0e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ea12:	4988      	ldr	r1, [pc, #544]	; (800ec34 <ip4_frag+0x278>)
 800ea14:	4888      	ldr	r0, [pc, #544]	; (800ec38 <ip4_frag+0x27c>)
 800ea16:	f000 faed 	bl	800eff4 <iprintf>
 800ea1a:	f06f 0305 	mvn.w	r3, #5
 800ea1e:	e102      	b.n	800ec26 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ea20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea22:	88db      	ldrh	r3, [r3, #6]
 800ea24:	b29b      	uxth	r3, r3
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7f5 ffe6 	bl	80049f8 <lwip_htons>
 800ea2c:	4603      	mov	r3, r0
 800ea2e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ea30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ea3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea40:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	891b      	ldrh	r3, [r3, #8]
 800ea46:	3b14      	subs	r3, #20
 800ea48:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ea4c:	e0e1      	b.n	800ec12 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ea4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ea50:	00db      	lsls	r3, r3, #3
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	bf28      	it	cs
 800ea5c:	4613      	movcs	r3, r2
 800ea5e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ea60:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea64:	2114      	movs	r1, #20
 800ea66:	200e      	movs	r0, #14
 800ea68:	f7f7 f840 	bl	8005aec <pbuf_alloc>
 800ea6c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	f000 80d5 	beq.w	800ec20 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	895b      	ldrh	r3, [r3, #10]
 800ea7a:	2b13      	cmp	r3, #19
 800ea7c:	d806      	bhi.n	800ea8c <ip4_frag+0xd0>
 800ea7e:	4b6c      	ldr	r3, [pc, #432]	; (800ec30 <ip4_frag+0x274>)
 800ea80:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ea84:	496d      	ldr	r1, [pc, #436]	; (800ec3c <ip4_frag+0x280>)
 800ea86:	486c      	ldr	r0, [pc, #432]	; (800ec38 <ip4_frag+0x27c>)
 800ea88:	f000 fab4 	bl	800eff4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ea8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	2214      	movs	r2, #20
 800ea92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea94:	4618      	mov	r0, r3
 800ea96:	f000 fbc2 	bl	800f21e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800eaa0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eaa2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800eaa6:	e064      	b.n	800eb72 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	895a      	ldrh	r2, [r3, #10]
 800eaac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eaae:	1ad3      	subs	r3, r2, r3
 800eab0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	895b      	ldrh	r3, [r3, #10]
 800eab6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d906      	bls.n	800eaca <ip4_frag+0x10e>
 800eabc:	4b5c      	ldr	r3, [pc, #368]	; (800ec30 <ip4_frag+0x274>)
 800eabe:	f240 322d 	movw	r2, #813	; 0x32d
 800eac2:	495f      	ldr	r1, [pc, #380]	; (800ec40 <ip4_frag+0x284>)
 800eac4:	485c      	ldr	r0, [pc, #368]	; (800ec38 <ip4_frag+0x27c>)
 800eac6:	f000 fa95 	bl	800eff4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800eaca:	8bfa      	ldrh	r2, [r7, #30]
 800eacc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ead0:	4293      	cmp	r3, r2
 800ead2:	bf28      	it	cs
 800ead4:	4613      	movcs	r3, r2
 800ead6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800eada:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d105      	bne.n	800eaee <ip4_frag+0x132>
        poff = 0;
 800eae2:	2300      	movs	r3, #0
 800eae4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	60fb      	str	r3, [r7, #12]
        continue;
 800eaec:	e041      	b.n	800eb72 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800eaee:	f7ff ff0d 	bl	800e90c <ip_frag_alloc_pbuf_custom_ref>
 800eaf2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d103      	bne.n	800eb02 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800eafa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eafc:	f7f7 fada 	bl	80060b4 <pbuf_free>
        goto memerr;
 800eb00:	e08f      	b.n	800ec22 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eb02:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800eb08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eb0a:	4413      	add	r3, r2
 800eb0c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800eb10:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800eb14:	9201      	str	r2, [sp, #4]
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2241      	movs	r2, #65	; 0x41
 800eb1c:	2000      	movs	r0, #0
 800eb1e:	f7f7 f90f 	bl	8005d40 <pbuf_alloced_custom>
 800eb22:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800eb2a:	69b8      	ldr	r0, [r7, #24]
 800eb2c:	f7ff fef6 	bl	800e91c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800eb30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb32:	f7f7 fabf 	bl	80060b4 <pbuf_free>
        goto memerr;
 800eb36:	e074      	b.n	800ec22 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f7f7 fb5b 	bl	80061f4 <pbuf_ref>
      pcr->original = p;
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800eb44:	69bb      	ldr	r3, [r7, #24]
 800eb46:	4a3f      	ldr	r2, [pc, #252]	; (800ec44 <ip4_frag+0x288>)
 800eb48:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800eb4a:	6979      	ldr	r1, [r7, #20]
 800eb4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb4e:	f7f7 fb73 	bl	8006238 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800eb52:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800eb56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800eb60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d004      	beq.n	800eb72 <ip4_frag+0x1b6>
        poff = 0;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800eb72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d196      	bne.n	800eaa8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800eb7a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eb7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb80:	4413      	add	r3, r2
 800eb82:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eb88:	f1a3 0213 	sub.w	r2, r3, #19
 800eb8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb90:	429a      	cmp	r2, r3
 800eb92:	bfcc      	ite	gt
 800eb94:	2301      	movgt	r3, #1
 800eb96:	2300      	movle	r3, #0
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800eb9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800eba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eba4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800eba6:	6a3b      	ldr	r3, [r7, #32]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d002      	beq.n	800ebb2 <ip4_frag+0x1f6>
 800ebac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d003      	beq.n	800ebba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ebb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ebb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ebb8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ebba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7f5 ff1b 	bl	80049f8 <lwip_htons>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	461a      	mov	r2, r3
 800ebc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ebca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ebcc:	3314      	adds	r3, #20
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7f5 ff11 	bl	80049f8 <lwip_htons>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	461a      	mov	r2, r3
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	729a      	strb	r2, [r3, #10]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	695b      	ldr	r3, [r3, #20]
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebf0:	68b8      	ldr	r0, [r7, #8]
 800ebf2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ebf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebf6:	f7f7 fa5d 	bl	80060b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ebfa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ebfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ec06:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ec0a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec0c:	4413      	add	r3, r2
 800ec0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ec12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	f47f af19 	bne.w	800ea4e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	e002      	b.n	800ec26 <ip4_frag+0x26a>
      goto memerr;
 800ec20:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ec22:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3748      	adds	r7, #72	; 0x48
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	08012900 	.word	0x08012900
 800ec34:	08012adc 	.word	0x08012adc
 800ec38:	08012948 	.word	0x08012948
 800ec3c:	08012af8 	.word	0x08012af8
 800ec40:	08012b18 	.word	0x08012b18
 800ec44:	0800e955 	.word	0x0800e955

0800ec48 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ec52:	230e      	movs	r3, #14
 800ec54:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	895b      	ldrh	r3, [r3, #10]
 800ec5a:	2b0e      	cmp	r3, #14
 800ec5c:	d96e      	bls.n	800ed3c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	7bdb      	ldrb	r3, [r3, #15]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d106      	bne.n	800ec74 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	b2da      	uxtb	r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	7b1a      	ldrb	r2, [r3, #12]
 800ec7e:	7b5b      	ldrb	r3, [r3, #13]
 800ec80:	021b      	lsls	r3, r3, #8
 800ec82:	4313      	orrs	r3, r2
 800ec84:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	781b      	ldrb	r3, [r3, #0]
 800ec8a:	f003 0301 	and.w	r3, r3, #1
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d023      	beq.n	800ecda <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d10f      	bne.n	800ecba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	785b      	ldrb	r3, [r3, #1]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d11b      	bne.n	800ecda <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800eca6:	2b5e      	cmp	r3, #94	; 0x5e
 800eca8:	d117      	bne.n	800ecda <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	7b5b      	ldrb	r3, [r3, #13]
 800ecae:	f043 0310 	orr.w	r3, r3, #16
 800ecb2:	b2da      	uxtb	r2, r3
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	735a      	strb	r2, [r3, #13]
 800ecb8:	e00f      	b.n	800ecda <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	2206      	movs	r2, #6
 800ecbe:	4928      	ldr	r1, [pc, #160]	; (800ed60 <ethernet_input+0x118>)
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 fa0c 	bl	800f0de <memcmp>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d106      	bne.n	800ecda <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	7b5b      	ldrb	r3, [r3, #13]
 800ecd0:	f043 0308 	orr.w	r3, r3, #8
 800ecd4:	b2da      	uxtb	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ecda:	89fb      	ldrh	r3, [r7, #14]
 800ecdc:	2b08      	cmp	r3, #8
 800ecde:	d003      	beq.n	800ece8 <ethernet_input+0xa0>
 800ece0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ece4:	d014      	beq.n	800ed10 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ece6:	e032      	b.n	800ed4e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecee:	f003 0308 	and.w	r3, r3, #8
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d024      	beq.n	800ed40 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ecf6:	8afb      	ldrh	r3, [r7, #22]
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f7f7 f954 	bl	8005fa8 <pbuf_remove_header>
 800ed00:	4603      	mov	r3, r0
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d11e      	bne.n	800ed44 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ed06:	6839      	ldr	r1, [r7, #0]
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7fe fe91 	bl	800da30 <ip4_input>
      break;
 800ed0e:	e013      	b.n	800ed38 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed16:	f003 0308 	and.w	r3, r3, #8
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d014      	beq.n	800ed48 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ed1e:	8afb      	ldrh	r3, [r7, #22]
 800ed20:	4619      	mov	r1, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7f7 f940 	bl	8005fa8 <pbuf_remove_header>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10e      	bne.n	800ed4c <ethernet_input+0x104>
        etharp_input(p, netif);
 800ed2e:	6839      	ldr	r1, [r7, #0]
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f7fe f831 	bl	800cd98 <etharp_input>
      break;
 800ed36:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e00c      	b.n	800ed56 <ethernet_input+0x10e>
    goto free_and_return;
 800ed3c:	bf00      	nop
 800ed3e:	e006      	b.n	800ed4e <ethernet_input+0x106>
        goto free_and_return;
 800ed40:	bf00      	nop
 800ed42:	e004      	b.n	800ed4e <ethernet_input+0x106>
        goto free_and_return;
 800ed44:	bf00      	nop
 800ed46:	e002      	b.n	800ed4e <ethernet_input+0x106>
        goto free_and_return;
 800ed48:	bf00      	nop
 800ed4a:	e000      	b.n	800ed4e <ethernet_input+0x106>
        goto free_and_return;
 800ed4c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7f7 f9b0 	bl	80060b4 <pbuf_free>
  return ERR_OK;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3718      	adds	r7, #24
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	08012cb4 	.word	0x08012cb4

0800ed64 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
 800ed70:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800ed72:	8c3b      	ldrh	r3, [r7, #32]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7f5 fe3f 	bl	80049f8 <lwip_htons>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800ed7e:	210e      	movs	r1, #14
 800ed80:	68b8      	ldr	r0, [r7, #8]
 800ed82:	f7f7 f901 	bl	8005f88 <pbuf_add_header>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d125      	bne.n	800edd8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	8afa      	ldrh	r2, [r7, #22]
 800ed96:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	2206      	movs	r2, #6
 800ed9c:	6839      	ldr	r1, [r7, #0]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f000 fa3d 	bl	800f21e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	3306      	adds	r3, #6
 800eda8:	2206      	movs	r2, #6
 800edaa:	6879      	ldr	r1, [r7, #4]
 800edac:	4618      	mov	r0, r3
 800edae:	f000 fa36 	bl	800f21e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800edb8:	2b06      	cmp	r3, #6
 800edba:	d006      	beq.n	800edca <ethernet_output+0x66>
 800edbc:	4b0a      	ldr	r3, [pc, #40]	; (800ede8 <ethernet_output+0x84>)
 800edbe:	f44f 7299 	mov.w	r2, #306	; 0x132
 800edc2:	490a      	ldr	r1, [pc, #40]	; (800edec <ethernet_output+0x88>)
 800edc4:	480a      	ldr	r0, [pc, #40]	; (800edf0 <ethernet_output+0x8c>)
 800edc6:	f000 f915 	bl	800eff4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	699b      	ldr	r3, [r3, #24]
 800edce:	68b9      	ldr	r1, [r7, #8]
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	4798      	blx	r3
 800edd4:	4603      	mov	r3, r0
 800edd6:	e002      	b.n	800edde <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800edd8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800edda:	f06f 0301 	mvn.w	r3, #1
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3718      	adds	r7, #24
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	08012b28 	.word	0x08012b28
 800edec:	08012b60 	.word	0x08012b60
 800edf0:	08012b94 	.word	0x08012b94

0800edf4 <rand>:
 800edf4:	4b16      	ldr	r3, [pc, #88]	; (800ee50 <rand+0x5c>)
 800edf6:	b510      	push	{r4, lr}
 800edf8:	681c      	ldr	r4, [r3, #0]
 800edfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800edfc:	b9b3      	cbnz	r3, 800ee2c <rand+0x38>
 800edfe:	2018      	movs	r0, #24
 800ee00:	f000 fa86 	bl	800f310 <malloc>
 800ee04:	4602      	mov	r2, r0
 800ee06:	6320      	str	r0, [r4, #48]	; 0x30
 800ee08:	b920      	cbnz	r0, 800ee14 <rand+0x20>
 800ee0a:	4b12      	ldr	r3, [pc, #72]	; (800ee54 <rand+0x60>)
 800ee0c:	4812      	ldr	r0, [pc, #72]	; (800ee58 <rand+0x64>)
 800ee0e:	2152      	movs	r1, #82	; 0x52
 800ee10:	f000 fa14 	bl	800f23c <__assert_func>
 800ee14:	4911      	ldr	r1, [pc, #68]	; (800ee5c <rand+0x68>)
 800ee16:	4b12      	ldr	r3, [pc, #72]	; (800ee60 <rand+0x6c>)
 800ee18:	e9c0 1300 	strd	r1, r3, [r0]
 800ee1c:	4b11      	ldr	r3, [pc, #68]	; (800ee64 <rand+0x70>)
 800ee1e:	6083      	str	r3, [r0, #8]
 800ee20:	230b      	movs	r3, #11
 800ee22:	8183      	strh	r3, [r0, #12]
 800ee24:	2100      	movs	r1, #0
 800ee26:	2001      	movs	r0, #1
 800ee28:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ee2c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ee2e:	480e      	ldr	r0, [pc, #56]	; (800ee68 <rand+0x74>)
 800ee30:	690b      	ldr	r3, [r1, #16]
 800ee32:	694c      	ldr	r4, [r1, #20]
 800ee34:	4a0d      	ldr	r2, [pc, #52]	; (800ee6c <rand+0x78>)
 800ee36:	4358      	muls	r0, r3
 800ee38:	fb02 0004 	mla	r0, r2, r4, r0
 800ee3c:	fba3 3202 	umull	r3, r2, r3, r2
 800ee40:	3301      	adds	r3, #1
 800ee42:	eb40 0002 	adc.w	r0, r0, r2
 800ee46:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ee4a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ee4e:	bd10      	pop	{r4, pc}
 800ee50:	20000084 	.word	0x20000084
 800ee54:	08012cc2 	.word	0x08012cc2
 800ee58:	08012cd9 	.word	0x08012cd9
 800ee5c:	abcd330e 	.word	0xabcd330e
 800ee60:	e66d1234 	.word	0xe66d1234
 800ee64:	0005deec 	.word	0x0005deec
 800ee68:	5851f42d 	.word	0x5851f42d
 800ee6c:	4c957f2d 	.word	0x4c957f2d

0800ee70 <std>:
 800ee70:	2300      	movs	r3, #0
 800ee72:	b510      	push	{r4, lr}
 800ee74:	4604      	mov	r4, r0
 800ee76:	e9c0 3300 	strd	r3, r3, [r0]
 800ee7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ee7e:	6083      	str	r3, [r0, #8]
 800ee80:	8181      	strh	r1, [r0, #12]
 800ee82:	6643      	str	r3, [r0, #100]	; 0x64
 800ee84:	81c2      	strh	r2, [r0, #14]
 800ee86:	6183      	str	r3, [r0, #24]
 800ee88:	4619      	mov	r1, r3
 800ee8a:	2208      	movs	r2, #8
 800ee8c:	305c      	adds	r0, #92	; 0x5c
 800ee8e:	f000 f950 	bl	800f132 <memset>
 800ee92:	4b0d      	ldr	r3, [pc, #52]	; (800eec8 <std+0x58>)
 800ee94:	6263      	str	r3, [r4, #36]	; 0x24
 800ee96:	4b0d      	ldr	r3, [pc, #52]	; (800eecc <std+0x5c>)
 800ee98:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee9a:	4b0d      	ldr	r3, [pc, #52]	; (800eed0 <std+0x60>)
 800ee9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee9e:	4b0d      	ldr	r3, [pc, #52]	; (800eed4 <std+0x64>)
 800eea0:	6323      	str	r3, [r4, #48]	; 0x30
 800eea2:	4b0d      	ldr	r3, [pc, #52]	; (800eed8 <std+0x68>)
 800eea4:	6224      	str	r4, [r4, #32]
 800eea6:	429c      	cmp	r4, r3
 800eea8:	d006      	beq.n	800eeb8 <std+0x48>
 800eeaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800eeae:	4294      	cmp	r4, r2
 800eeb0:	d002      	beq.n	800eeb8 <std+0x48>
 800eeb2:	33d0      	adds	r3, #208	; 0xd0
 800eeb4:	429c      	cmp	r4, r3
 800eeb6:	d105      	bne.n	800eec4 <std+0x54>
 800eeb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eec0:	f000 b9aa 	b.w	800f218 <__retarget_lock_init_recursive>
 800eec4:	bd10      	pop	{r4, pc}
 800eec6:	bf00      	nop
 800eec8:	0800f059 	.word	0x0800f059
 800eecc:	0800f07b 	.word	0x0800f07b
 800eed0:	0800f0b3 	.word	0x0800f0b3
 800eed4:	0800f0d7 	.word	0x0800f0d7
 800eed8:	200088d8 	.word	0x200088d8

0800eedc <stdio_exit_handler>:
 800eedc:	4a02      	ldr	r2, [pc, #8]	; (800eee8 <stdio_exit_handler+0xc>)
 800eede:	4903      	ldr	r1, [pc, #12]	; (800eeec <stdio_exit_handler+0x10>)
 800eee0:	4803      	ldr	r0, [pc, #12]	; (800eef0 <stdio_exit_handler+0x14>)
 800eee2:	f000 b869 	b.w	800efb8 <_fwalk_sglue>
 800eee6:	bf00      	nop
 800eee8:	2000002c 	.word	0x2000002c
 800eeec:	0800fddd 	.word	0x0800fddd
 800eef0:	20000038 	.word	0x20000038

0800eef4 <cleanup_stdio>:
 800eef4:	6841      	ldr	r1, [r0, #4]
 800eef6:	4b0c      	ldr	r3, [pc, #48]	; (800ef28 <cleanup_stdio+0x34>)
 800eef8:	4299      	cmp	r1, r3
 800eefa:	b510      	push	{r4, lr}
 800eefc:	4604      	mov	r4, r0
 800eefe:	d001      	beq.n	800ef04 <cleanup_stdio+0x10>
 800ef00:	f000 ff6c 	bl	800fddc <_fflush_r>
 800ef04:	68a1      	ldr	r1, [r4, #8]
 800ef06:	4b09      	ldr	r3, [pc, #36]	; (800ef2c <cleanup_stdio+0x38>)
 800ef08:	4299      	cmp	r1, r3
 800ef0a:	d002      	beq.n	800ef12 <cleanup_stdio+0x1e>
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	f000 ff65 	bl	800fddc <_fflush_r>
 800ef12:	68e1      	ldr	r1, [r4, #12]
 800ef14:	4b06      	ldr	r3, [pc, #24]	; (800ef30 <cleanup_stdio+0x3c>)
 800ef16:	4299      	cmp	r1, r3
 800ef18:	d004      	beq.n	800ef24 <cleanup_stdio+0x30>
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef20:	f000 bf5c 	b.w	800fddc <_fflush_r>
 800ef24:	bd10      	pop	{r4, pc}
 800ef26:	bf00      	nop
 800ef28:	200088d8 	.word	0x200088d8
 800ef2c:	20008940 	.word	0x20008940
 800ef30:	200089a8 	.word	0x200089a8

0800ef34 <global_stdio_init.part.0>:
 800ef34:	b510      	push	{r4, lr}
 800ef36:	4b0b      	ldr	r3, [pc, #44]	; (800ef64 <global_stdio_init.part.0+0x30>)
 800ef38:	4c0b      	ldr	r4, [pc, #44]	; (800ef68 <global_stdio_init.part.0+0x34>)
 800ef3a:	4a0c      	ldr	r2, [pc, #48]	; (800ef6c <global_stdio_init.part.0+0x38>)
 800ef3c:	601a      	str	r2, [r3, #0]
 800ef3e:	4620      	mov	r0, r4
 800ef40:	2200      	movs	r2, #0
 800ef42:	2104      	movs	r1, #4
 800ef44:	f7ff ff94 	bl	800ee70 <std>
 800ef48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	2109      	movs	r1, #9
 800ef50:	f7ff ff8e 	bl	800ee70 <std>
 800ef54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ef58:	2202      	movs	r2, #2
 800ef5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef5e:	2112      	movs	r1, #18
 800ef60:	f7ff bf86 	b.w	800ee70 <std>
 800ef64:	20008a10 	.word	0x20008a10
 800ef68:	200088d8 	.word	0x200088d8
 800ef6c:	0800eedd 	.word	0x0800eedd

0800ef70 <__sfp_lock_acquire>:
 800ef70:	4801      	ldr	r0, [pc, #4]	; (800ef78 <__sfp_lock_acquire+0x8>)
 800ef72:	f000 b952 	b.w	800f21a <__retarget_lock_acquire_recursive>
 800ef76:	bf00      	nop
 800ef78:	20008a19 	.word	0x20008a19

0800ef7c <__sfp_lock_release>:
 800ef7c:	4801      	ldr	r0, [pc, #4]	; (800ef84 <__sfp_lock_release+0x8>)
 800ef7e:	f000 b94d 	b.w	800f21c <__retarget_lock_release_recursive>
 800ef82:	bf00      	nop
 800ef84:	20008a19 	.word	0x20008a19

0800ef88 <__sinit>:
 800ef88:	b510      	push	{r4, lr}
 800ef8a:	4604      	mov	r4, r0
 800ef8c:	f7ff fff0 	bl	800ef70 <__sfp_lock_acquire>
 800ef90:	6a23      	ldr	r3, [r4, #32]
 800ef92:	b11b      	cbz	r3, 800ef9c <__sinit+0x14>
 800ef94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef98:	f7ff bff0 	b.w	800ef7c <__sfp_lock_release>
 800ef9c:	4b04      	ldr	r3, [pc, #16]	; (800efb0 <__sinit+0x28>)
 800ef9e:	6223      	str	r3, [r4, #32]
 800efa0:	4b04      	ldr	r3, [pc, #16]	; (800efb4 <__sinit+0x2c>)
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d1f5      	bne.n	800ef94 <__sinit+0xc>
 800efa8:	f7ff ffc4 	bl	800ef34 <global_stdio_init.part.0>
 800efac:	e7f2      	b.n	800ef94 <__sinit+0xc>
 800efae:	bf00      	nop
 800efb0:	0800eef5 	.word	0x0800eef5
 800efb4:	20008a10 	.word	0x20008a10

0800efb8 <_fwalk_sglue>:
 800efb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efbc:	4607      	mov	r7, r0
 800efbe:	4688      	mov	r8, r1
 800efc0:	4614      	mov	r4, r2
 800efc2:	2600      	movs	r6, #0
 800efc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efc8:	f1b9 0901 	subs.w	r9, r9, #1
 800efcc:	d505      	bpl.n	800efda <_fwalk_sglue+0x22>
 800efce:	6824      	ldr	r4, [r4, #0]
 800efd0:	2c00      	cmp	r4, #0
 800efd2:	d1f7      	bne.n	800efc4 <_fwalk_sglue+0xc>
 800efd4:	4630      	mov	r0, r6
 800efd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efda:	89ab      	ldrh	r3, [r5, #12]
 800efdc:	2b01      	cmp	r3, #1
 800efde:	d907      	bls.n	800eff0 <_fwalk_sglue+0x38>
 800efe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efe4:	3301      	adds	r3, #1
 800efe6:	d003      	beq.n	800eff0 <_fwalk_sglue+0x38>
 800efe8:	4629      	mov	r1, r5
 800efea:	4638      	mov	r0, r7
 800efec:	47c0      	blx	r8
 800efee:	4306      	orrs	r6, r0
 800eff0:	3568      	adds	r5, #104	; 0x68
 800eff2:	e7e9      	b.n	800efc8 <_fwalk_sglue+0x10>

0800eff4 <iprintf>:
 800eff4:	b40f      	push	{r0, r1, r2, r3}
 800eff6:	b507      	push	{r0, r1, r2, lr}
 800eff8:	4906      	ldr	r1, [pc, #24]	; (800f014 <iprintf+0x20>)
 800effa:	ab04      	add	r3, sp, #16
 800effc:	6808      	ldr	r0, [r1, #0]
 800effe:	f853 2b04 	ldr.w	r2, [r3], #4
 800f002:	6881      	ldr	r1, [r0, #8]
 800f004:	9301      	str	r3, [sp, #4]
 800f006:	f000 fbb9 	bl	800f77c <_vfiprintf_r>
 800f00a:	b003      	add	sp, #12
 800f00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f010:	b004      	add	sp, #16
 800f012:	4770      	bx	lr
 800f014:	20000084 	.word	0x20000084

0800f018 <siprintf>:
 800f018:	b40e      	push	{r1, r2, r3}
 800f01a:	b500      	push	{lr}
 800f01c:	b09c      	sub	sp, #112	; 0x70
 800f01e:	ab1d      	add	r3, sp, #116	; 0x74
 800f020:	9002      	str	r0, [sp, #8]
 800f022:	9006      	str	r0, [sp, #24]
 800f024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f028:	4809      	ldr	r0, [pc, #36]	; (800f050 <siprintf+0x38>)
 800f02a:	9107      	str	r1, [sp, #28]
 800f02c:	9104      	str	r1, [sp, #16]
 800f02e:	4909      	ldr	r1, [pc, #36]	; (800f054 <siprintf+0x3c>)
 800f030:	f853 2b04 	ldr.w	r2, [r3], #4
 800f034:	9105      	str	r1, [sp, #20]
 800f036:	6800      	ldr	r0, [r0, #0]
 800f038:	9301      	str	r3, [sp, #4]
 800f03a:	a902      	add	r1, sp, #8
 800f03c:	f000 fa76 	bl	800f52c <_svfiprintf_r>
 800f040:	9b02      	ldr	r3, [sp, #8]
 800f042:	2200      	movs	r2, #0
 800f044:	701a      	strb	r2, [r3, #0]
 800f046:	b01c      	add	sp, #112	; 0x70
 800f048:	f85d eb04 	ldr.w	lr, [sp], #4
 800f04c:	b003      	add	sp, #12
 800f04e:	4770      	bx	lr
 800f050:	20000084 	.word	0x20000084
 800f054:	ffff0208 	.word	0xffff0208

0800f058 <__sread>:
 800f058:	b510      	push	{r4, lr}
 800f05a:	460c      	mov	r4, r1
 800f05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f060:	f000 f892 	bl	800f188 <_read_r>
 800f064:	2800      	cmp	r0, #0
 800f066:	bfab      	itete	ge
 800f068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f06a:	89a3      	ldrhlt	r3, [r4, #12]
 800f06c:	181b      	addge	r3, r3, r0
 800f06e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f072:	bfac      	ite	ge
 800f074:	6563      	strge	r3, [r4, #84]	; 0x54
 800f076:	81a3      	strhlt	r3, [r4, #12]
 800f078:	bd10      	pop	{r4, pc}

0800f07a <__swrite>:
 800f07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f07e:	461f      	mov	r7, r3
 800f080:	898b      	ldrh	r3, [r1, #12]
 800f082:	05db      	lsls	r3, r3, #23
 800f084:	4605      	mov	r5, r0
 800f086:	460c      	mov	r4, r1
 800f088:	4616      	mov	r6, r2
 800f08a:	d505      	bpl.n	800f098 <__swrite+0x1e>
 800f08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f090:	2302      	movs	r3, #2
 800f092:	2200      	movs	r2, #0
 800f094:	f000 f866 	bl	800f164 <_lseek_r>
 800f098:	89a3      	ldrh	r3, [r4, #12]
 800f09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f0a2:	81a3      	strh	r3, [r4, #12]
 800f0a4:	4632      	mov	r2, r6
 800f0a6:	463b      	mov	r3, r7
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ae:	f000 b87d 	b.w	800f1ac <_write_r>

0800f0b2 <__sseek>:
 800f0b2:	b510      	push	{r4, lr}
 800f0b4:	460c      	mov	r4, r1
 800f0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0ba:	f000 f853 	bl	800f164 <_lseek_r>
 800f0be:	1c43      	adds	r3, r0, #1
 800f0c0:	89a3      	ldrh	r3, [r4, #12]
 800f0c2:	bf15      	itete	ne
 800f0c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f0c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f0ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f0ce:	81a3      	strheq	r3, [r4, #12]
 800f0d0:	bf18      	it	ne
 800f0d2:	81a3      	strhne	r3, [r4, #12]
 800f0d4:	bd10      	pop	{r4, pc}

0800f0d6 <__sclose>:
 800f0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0da:	f000 b833 	b.w	800f144 <_close_r>

0800f0de <memcmp>:
 800f0de:	b510      	push	{r4, lr}
 800f0e0:	3901      	subs	r1, #1
 800f0e2:	4402      	add	r2, r0
 800f0e4:	4290      	cmp	r0, r2
 800f0e6:	d101      	bne.n	800f0ec <memcmp+0xe>
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	e005      	b.n	800f0f8 <memcmp+0x1a>
 800f0ec:	7803      	ldrb	r3, [r0, #0]
 800f0ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f0f2:	42a3      	cmp	r3, r4
 800f0f4:	d001      	beq.n	800f0fa <memcmp+0x1c>
 800f0f6:	1b18      	subs	r0, r3, r4
 800f0f8:	bd10      	pop	{r4, pc}
 800f0fa:	3001      	adds	r0, #1
 800f0fc:	e7f2      	b.n	800f0e4 <memcmp+0x6>

0800f0fe <memmove>:
 800f0fe:	4288      	cmp	r0, r1
 800f100:	b510      	push	{r4, lr}
 800f102:	eb01 0402 	add.w	r4, r1, r2
 800f106:	d902      	bls.n	800f10e <memmove+0x10>
 800f108:	4284      	cmp	r4, r0
 800f10a:	4623      	mov	r3, r4
 800f10c:	d807      	bhi.n	800f11e <memmove+0x20>
 800f10e:	1e43      	subs	r3, r0, #1
 800f110:	42a1      	cmp	r1, r4
 800f112:	d008      	beq.n	800f126 <memmove+0x28>
 800f114:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f118:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f11c:	e7f8      	b.n	800f110 <memmove+0x12>
 800f11e:	4402      	add	r2, r0
 800f120:	4601      	mov	r1, r0
 800f122:	428a      	cmp	r2, r1
 800f124:	d100      	bne.n	800f128 <memmove+0x2a>
 800f126:	bd10      	pop	{r4, pc}
 800f128:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f12c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f130:	e7f7      	b.n	800f122 <memmove+0x24>

0800f132 <memset>:
 800f132:	4402      	add	r2, r0
 800f134:	4603      	mov	r3, r0
 800f136:	4293      	cmp	r3, r2
 800f138:	d100      	bne.n	800f13c <memset+0xa>
 800f13a:	4770      	bx	lr
 800f13c:	f803 1b01 	strb.w	r1, [r3], #1
 800f140:	e7f9      	b.n	800f136 <memset+0x4>
	...

0800f144 <_close_r>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	4d06      	ldr	r5, [pc, #24]	; (800f160 <_close_r+0x1c>)
 800f148:	2300      	movs	r3, #0
 800f14a:	4604      	mov	r4, r0
 800f14c:	4608      	mov	r0, r1
 800f14e:	602b      	str	r3, [r5, #0]
 800f150:	f7f1 fd25 	bl	8000b9e <_close>
 800f154:	1c43      	adds	r3, r0, #1
 800f156:	d102      	bne.n	800f15e <_close_r+0x1a>
 800f158:	682b      	ldr	r3, [r5, #0]
 800f15a:	b103      	cbz	r3, 800f15e <_close_r+0x1a>
 800f15c:	6023      	str	r3, [r4, #0]
 800f15e:	bd38      	pop	{r3, r4, r5, pc}
 800f160:	20008a14 	.word	0x20008a14

0800f164 <_lseek_r>:
 800f164:	b538      	push	{r3, r4, r5, lr}
 800f166:	4d07      	ldr	r5, [pc, #28]	; (800f184 <_lseek_r+0x20>)
 800f168:	4604      	mov	r4, r0
 800f16a:	4608      	mov	r0, r1
 800f16c:	4611      	mov	r1, r2
 800f16e:	2200      	movs	r2, #0
 800f170:	602a      	str	r2, [r5, #0]
 800f172:	461a      	mov	r2, r3
 800f174:	f7f1 fd3a 	bl	8000bec <_lseek>
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	d102      	bne.n	800f182 <_lseek_r+0x1e>
 800f17c:	682b      	ldr	r3, [r5, #0]
 800f17e:	b103      	cbz	r3, 800f182 <_lseek_r+0x1e>
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	bd38      	pop	{r3, r4, r5, pc}
 800f184:	20008a14 	.word	0x20008a14

0800f188 <_read_r>:
 800f188:	b538      	push	{r3, r4, r5, lr}
 800f18a:	4d07      	ldr	r5, [pc, #28]	; (800f1a8 <_read_r+0x20>)
 800f18c:	4604      	mov	r4, r0
 800f18e:	4608      	mov	r0, r1
 800f190:	4611      	mov	r1, r2
 800f192:	2200      	movs	r2, #0
 800f194:	602a      	str	r2, [r5, #0]
 800f196:	461a      	mov	r2, r3
 800f198:	f7f1 fcc8 	bl	8000b2c <_read>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_read_r+0x1e>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_read_r+0x1e>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	20008a14 	.word	0x20008a14

0800f1ac <_write_r>:
 800f1ac:	b538      	push	{r3, r4, r5, lr}
 800f1ae:	4d07      	ldr	r5, [pc, #28]	; (800f1cc <_write_r+0x20>)
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	4608      	mov	r0, r1
 800f1b4:	4611      	mov	r1, r2
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	602a      	str	r2, [r5, #0]
 800f1ba:	461a      	mov	r2, r3
 800f1bc:	f7f1 fcd3 	bl	8000b66 <_write>
 800f1c0:	1c43      	adds	r3, r0, #1
 800f1c2:	d102      	bne.n	800f1ca <_write_r+0x1e>
 800f1c4:	682b      	ldr	r3, [r5, #0]
 800f1c6:	b103      	cbz	r3, 800f1ca <_write_r+0x1e>
 800f1c8:	6023      	str	r3, [r4, #0]
 800f1ca:	bd38      	pop	{r3, r4, r5, pc}
 800f1cc:	20008a14 	.word	0x20008a14

0800f1d0 <__libc_init_array>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	4d0d      	ldr	r5, [pc, #52]	; (800f208 <__libc_init_array+0x38>)
 800f1d4:	4c0d      	ldr	r4, [pc, #52]	; (800f20c <__libc_init_array+0x3c>)
 800f1d6:	1b64      	subs	r4, r4, r5
 800f1d8:	10a4      	asrs	r4, r4, #2
 800f1da:	2600      	movs	r6, #0
 800f1dc:	42a6      	cmp	r6, r4
 800f1de:	d109      	bne.n	800f1f4 <__libc_init_array+0x24>
 800f1e0:	4d0b      	ldr	r5, [pc, #44]	; (800f210 <__libc_init_array+0x40>)
 800f1e2:	4c0c      	ldr	r4, [pc, #48]	; (800f214 <__libc_init_array+0x44>)
 800f1e4:	f000 ffe0 	bl	80101a8 <_init>
 800f1e8:	1b64      	subs	r4, r4, r5
 800f1ea:	10a4      	asrs	r4, r4, #2
 800f1ec:	2600      	movs	r6, #0
 800f1ee:	42a6      	cmp	r6, r4
 800f1f0:	d105      	bne.n	800f1fe <__libc_init_array+0x2e>
 800f1f2:	bd70      	pop	{r4, r5, r6, pc}
 800f1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800f1f8:	4798      	blx	r3
 800f1fa:	3601      	adds	r6, #1
 800f1fc:	e7ee      	b.n	800f1dc <__libc_init_array+0xc>
 800f1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800f202:	4798      	blx	r3
 800f204:	3601      	adds	r6, #1
 800f206:	e7f2      	b.n	800f1ee <__libc_init_array+0x1e>
 800f208:	08012da8 	.word	0x08012da8
 800f20c:	08012da8 	.word	0x08012da8
 800f210:	08012da8 	.word	0x08012da8
 800f214:	08012dac 	.word	0x08012dac

0800f218 <__retarget_lock_init_recursive>:
 800f218:	4770      	bx	lr

0800f21a <__retarget_lock_acquire_recursive>:
 800f21a:	4770      	bx	lr

0800f21c <__retarget_lock_release_recursive>:
 800f21c:	4770      	bx	lr

0800f21e <memcpy>:
 800f21e:	440a      	add	r2, r1
 800f220:	4291      	cmp	r1, r2
 800f222:	f100 33ff 	add.w	r3, r0, #4294967295
 800f226:	d100      	bne.n	800f22a <memcpy+0xc>
 800f228:	4770      	bx	lr
 800f22a:	b510      	push	{r4, lr}
 800f22c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f230:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f234:	4291      	cmp	r1, r2
 800f236:	d1f9      	bne.n	800f22c <memcpy+0xe>
 800f238:	bd10      	pop	{r4, pc}
	...

0800f23c <__assert_func>:
 800f23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f23e:	4614      	mov	r4, r2
 800f240:	461a      	mov	r2, r3
 800f242:	4b09      	ldr	r3, [pc, #36]	; (800f268 <__assert_func+0x2c>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4605      	mov	r5, r0
 800f248:	68d8      	ldr	r0, [r3, #12]
 800f24a:	b14c      	cbz	r4, 800f260 <__assert_func+0x24>
 800f24c:	4b07      	ldr	r3, [pc, #28]	; (800f26c <__assert_func+0x30>)
 800f24e:	9100      	str	r1, [sp, #0]
 800f250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f254:	4906      	ldr	r1, [pc, #24]	; (800f270 <__assert_func+0x34>)
 800f256:	462b      	mov	r3, r5
 800f258:	f000 fde8 	bl	800fe2c <fiprintf>
 800f25c:	f000 fe9e 	bl	800ff9c <abort>
 800f260:	4b04      	ldr	r3, [pc, #16]	; (800f274 <__assert_func+0x38>)
 800f262:	461c      	mov	r4, r3
 800f264:	e7f3      	b.n	800f24e <__assert_func+0x12>
 800f266:	bf00      	nop
 800f268:	20000084 	.word	0x20000084
 800f26c:	08012d31 	.word	0x08012d31
 800f270:	08012d3e 	.word	0x08012d3e
 800f274:	08012d6c 	.word	0x08012d6c

0800f278 <_free_r>:
 800f278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f27a:	2900      	cmp	r1, #0
 800f27c:	d044      	beq.n	800f308 <_free_r+0x90>
 800f27e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f282:	9001      	str	r0, [sp, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	f1a1 0404 	sub.w	r4, r1, #4
 800f28a:	bfb8      	it	lt
 800f28c:	18e4      	addlt	r4, r4, r3
 800f28e:	f000 f8e7 	bl	800f460 <__malloc_lock>
 800f292:	4a1e      	ldr	r2, [pc, #120]	; (800f30c <_free_r+0x94>)
 800f294:	9801      	ldr	r0, [sp, #4]
 800f296:	6813      	ldr	r3, [r2, #0]
 800f298:	b933      	cbnz	r3, 800f2a8 <_free_r+0x30>
 800f29a:	6063      	str	r3, [r4, #4]
 800f29c:	6014      	str	r4, [r2, #0]
 800f29e:	b003      	add	sp, #12
 800f2a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2a4:	f000 b8e2 	b.w	800f46c <__malloc_unlock>
 800f2a8:	42a3      	cmp	r3, r4
 800f2aa:	d908      	bls.n	800f2be <_free_r+0x46>
 800f2ac:	6825      	ldr	r5, [r4, #0]
 800f2ae:	1961      	adds	r1, r4, r5
 800f2b0:	428b      	cmp	r3, r1
 800f2b2:	bf01      	itttt	eq
 800f2b4:	6819      	ldreq	r1, [r3, #0]
 800f2b6:	685b      	ldreq	r3, [r3, #4]
 800f2b8:	1949      	addeq	r1, r1, r5
 800f2ba:	6021      	streq	r1, [r4, #0]
 800f2bc:	e7ed      	b.n	800f29a <_free_r+0x22>
 800f2be:	461a      	mov	r2, r3
 800f2c0:	685b      	ldr	r3, [r3, #4]
 800f2c2:	b10b      	cbz	r3, 800f2c8 <_free_r+0x50>
 800f2c4:	42a3      	cmp	r3, r4
 800f2c6:	d9fa      	bls.n	800f2be <_free_r+0x46>
 800f2c8:	6811      	ldr	r1, [r2, #0]
 800f2ca:	1855      	adds	r5, r2, r1
 800f2cc:	42a5      	cmp	r5, r4
 800f2ce:	d10b      	bne.n	800f2e8 <_free_r+0x70>
 800f2d0:	6824      	ldr	r4, [r4, #0]
 800f2d2:	4421      	add	r1, r4
 800f2d4:	1854      	adds	r4, r2, r1
 800f2d6:	42a3      	cmp	r3, r4
 800f2d8:	6011      	str	r1, [r2, #0]
 800f2da:	d1e0      	bne.n	800f29e <_free_r+0x26>
 800f2dc:	681c      	ldr	r4, [r3, #0]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	6053      	str	r3, [r2, #4]
 800f2e2:	440c      	add	r4, r1
 800f2e4:	6014      	str	r4, [r2, #0]
 800f2e6:	e7da      	b.n	800f29e <_free_r+0x26>
 800f2e8:	d902      	bls.n	800f2f0 <_free_r+0x78>
 800f2ea:	230c      	movs	r3, #12
 800f2ec:	6003      	str	r3, [r0, #0]
 800f2ee:	e7d6      	b.n	800f29e <_free_r+0x26>
 800f2f0:	6825      	ldr	r5, [r4, #0]
 800f2f2:	1961      	adds	r1, r4, r5
 800f2f4:	428b      	cmp	r3, r1
 800f2f6:	bf04      	itt	eq
 800f2f8:	6819      	ldreq	r1, [r3, #0]
 800f2fa:	685b      	ldreq	r3, [r3, #4]
 800f2fc:	6063      	str	r3, [r4, #4]
 800f2fe:	bf04      	itt	eq
 800f300:	1949      	addeq	r1, r1, r5
 800f302:	6021      	streq	r1, [r4, #0]
 800f304:	6054      	str	r4, [r2, #4]
 800f306:	e7ca      	b.n	800f29e <_free_r+0x26>
 800f308:	b003      	add	sp, #12
 800f30a:	bd30      	pop	{r4, r5, pc}
 800f30c:	20008a1c 	.word	0x20008a1c

0800f310 <malloc>:
 800f310:	4b02      	ldr	r3, [pc, #8]	; (800f31c <malloc+0xc>)
 800f312:	4601      	mov	r1, r0
 800f314:	6818      	ldr	r0, [r3, #0]
 800f316:	f000 b823 	b.w	800f360 <_malloc_r>
 800f31a:	bf00      	nop
 800f31c:	20000084 	.word	0x20000084

0800f320 <sbrk_aligned>:
 800f320:	b570      	push	{r4, r5, r6, lr}
 800f322:	4e0e      	ldr	r6, [pc, #56]	; (800f35c <sbrk_aligned+0x3c>)
 800f324:	460c      	mov	r4, r1
 800f326:	6831      	ldr	r1, [r6, #0]
 800f328:	4605      	mov	r5, r0
 800f32a:	b911      	cbnz	r1, 800f332 <sbrk_aligned+0x12>
 800f32c:	f000 fe26 	bl	800ff7c <_sbrk_r>
 800f330:	6030      	str	r0, [r6, #0]
 800f332:	4621      	mov	r1, r4
 800f334:	4628      	mov	r0, r5
 800f336:	f000 fe21 	bl	800ff7c <_sbrk_r>
 800f33a:	1c43      	adds	r3, r0, #1
 800f33c:	d00a      	beq.n	800f354 <sbrk_aligned+0x34>
 800f33e:	1cc4      	adds	r4, r0, #3
 800f340:	f024 0403 	bic.w	r4, r4, #3
 800f344:	42a0      	cmp	r0, r4
 800f346:	d007      	beq.n	800f358 <sbrk_aligned+0x38>
 800f348:	1a21      	subs	r1, r4, r0
 800f34a:	4628      	mov	r0, r5
 800f34c:	f000 fe16 	bl	800ff7c <_sbrk_r>
 800f350:	3001      	adds	r0, #1
 800f352:	d101      	bne.n	800f358 <sbrk_aligned+0x38>
 800f354:	f04f 34ff 	mov.w	r4, #4294967295
 800f358:	4620      	mov	r0, r4
 800f35a:	bd70      	pop	{r4, r5, r6, pc}
 800f35c:	20008a20 	.word	0x20008a20

0800f360 <_malloc_r>:
 800f360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f364:	1ccd      	adds	r5, r1, #3
 800f366:	f025 0503 	bic.w	r5, r5, #3
 800f36a:	3508      	adds	r5, #8
 800f36c:	2d0c      	cmp	r5, #12
 800f36e:	bf38      	it	cc
 800f370:	250c      	movcc	r5, #12
 800f372:	2d00      	cmp	r5, #0
 800f374:	4607      	mov	r7, r0
 800f376:	db01      	blt.n	800f37c <_malloc_r+0x1c>
 800f378:	42a9      	cmp	r1, r5
 800f37a:	d905      	bls.n	800f388 <_malloc_r+0x28>
 800f37c:	230c      	movs	r3, #12
 800f37e:	603b      	str	r3, [r7, #0]
 800f380:	2600      	movs	r6, #0
 800f382:	4630      	mov	r0, r6
 800f384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f388:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f45c <_malloc_r+0xfc>
 800f38c:	f000 f868 	bl	800f460 <__malloc_lock>
 800f390:	f8d8 3000 	ldr.w	r3, [r8]
 800f394:	461c      	mov	r4, r3
 800f396:	bb5c      	cbnz	r4, 800f3f0 <_malloc_r+0x90>
 800f398:	4629      	mov	r1, r5
 800f39a:	4638      	mov	r0, r7
 800f39c:	f7ff ffc0 	bl	800f320 <sbrk_aligned>
 800f3a0:	1c43      	adds	r3, r0, #1
 800f3a2:	4604      	mov	r4, r0
 800f3a4:	d155      	bne.n	800f452 <_malloc_r+0xf2>
 800f3a6:	f8d8 4000 	ldr.w	r4, [r8]
 800f3aa:	4626      	mov	r6, r4
 800f3ac:	2e00      	cmp	r6, #0
 800f3ae:	d145      	bne.n	800f43c <_malloc_r+0xdc>
 800f3b0:	2c00      	cmp	r4, #0
 800f3b2:	d048      	beq.n	800f446 <_malloc_r+0xe6>
 800f3b4:	6823      	ldr	r3, [r4, #0]
 800f3b6:	4631      	mov	r1, r6
 800f3b8:	4638      	mov	r0, r7
 800f3ba:	eb04 0903 	add.w	r9, r4, r3
 800f3be:	f000 fddd 	bl	800ff7c <_sbrk_r>
 800f3c2:	4581      	cmp	r9, r0
 800f3c4:	d13f      	bne.n	800f446 <_malloc_r+0xe6>
 800f3c6:	6821      	ldr	r1, [r4, #0]
 800f3c8:	1a6d      	subs	r5, r5, r1
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	4638      	mov	r0, r7
 800f3ce:	f7ff ffa7 	bl	800f320 <sbrk_aligned>
 800f3d2:	3001      	adds	r0, #1
 800f3d4:	d037      	beq.n	800f446 <_malloc_r+0xe6>
 800f3d6:	6823      	ldr	r3, [r4, #0]
 800f3d8:	442b      	add	r3, r5
 800f3da:	6023      	str	r3, [r4, #0]
 800f3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d038      	beq.n	800f456 <_malloc_r+0xf6>
 800f3e4:	685a      	ldr	r2, [r3, #4]
 800f3e6:	42a2      	cmp	r2, r4
 800f3e8:	d12b      	bne.n	800f442 <_malloc_r+0xe2>
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	605a      	str	r2, [r3, #4]
 800f3ee:	e00f      	b.n	800f410 <_malloc_r+0xb0>
 800f3f0:	6822      	ldr	r2, [r4, #0]
 800f3f2:	1b52      	subs	r2, r2, r5
 800f3f4:	d41f      	bmi.n	800f436 <_malloc_r+0xd6>
 800f3f6:	2a0b      	cmp	r2, #11
 800f3f8:	d917      	bls.n	800f42a <_malloc_r+0xca>
 800f3fa:	1961      	adds	r1, r4, r5
 800f3fc:	42a3      	cmp	r3, r4
 800f3fe:	6025      	str	r5, [r4, #0]
 800f400:	bf18      	it	ne
 800f402:	6059      	strne	r1, [r3, #4]
 800f404:	6863      	ldr	r3, [r4, #4]
 800f406:	bf08      	it	eq
 800f408:	f8c8 1000 	streq.w	r1, [r8]
 800f40c:	5162      	str	r2, [r4, r5]
 800f40e:	604b      	str	r3, [r1, #4]
 800f410:	4638      	mov	r0, r7
 800f412:	f104 060b 	add.w	r6, r4, #11
 800f416:	f000 f829 	bl	800f46c <__malloc_unlock>
 800f41a:	f026 0607 	bic.w	r6, r6, #7
 800f41e:	1d23      	adds	r3, r4, #4
 800f420:	1af2      	subs	r2, r6, r3
 800f422:	d0ae      	beq.n	800f382 <_malloc_r+0x22>
 800f424:	1b9b      	subs	r3, r3, r6
 800f426:	50a3      	str	r3, [r4, r2]
 800f428:	e7ab      	b.n	800f382 <_malloc_r+0x22>
 800f42a:	42a3      	cmp	r3, r4
 800f42c:	6862      	ldr	r2, [r4, #4]
 800f42e:	d1dd      	bne.n	800f3ec <_malloc_r+0x8c>
 800f430:	f8c8 2000 	str.w	r2, [r8]
 800f434:	e7ec      	b.n	800f410 <_malloc_r+0xb0>
 800f436:	4623      	mov	r3, r4
 800f438:	6864      	ldr	r4, [r4, #4]
 800f43a:	e7ac      	b.n	800f396 <_malloc_r+0x36>
 800f43c:	4634      	mov	r4, r6
 800f43e:	6876      	ldr	r6, [r6, #4]
 800f440:	e7b4      	b.n	800f3ac <_malloc_r+0x4c>
 800f442:	4613      	mov	r3, r2
 800f444:	e7cc      	b.n	800f3e0 <_malloc_r+0x80>
 800f446:	230c      	movs	r3, #12
 800f448:	603b      	str	r3, [r7, #0]
 800f44a:	4638      	mov	r0, r7
 800f44c:	f000 f80e 	bl	800f46c <__malloc_unlock>
 800f450:	e797      	b.n	800f382 <_malloc_r+0x22>
 800f452:	6025      	str	r5, [r4, #0]
 800f454:	e7dc      	b.n	800f410 <_malloc_r+0xb0>
 800f456:	605b      	str	r3, [r3, #4]
 800f458:	deff      	udf	#255	; 0xff
 800f45a:	bf00      	nop
 800f45c:	20008a1c 	.word	0x20008a1c

0800f460 <__malloc_lock>:
 800f460:	4801      	ldr	r0, [pc, #4]	; (800f468 <__malloc_lock+0x8>)
 800f462:	f7ff beda 	b.w	800f21a <__retarget_lock_acquire_recursive>
 800f466:	bf00      	nop
 800f468:	20008a18 	.word	0x20008a18

0800f46c <__malloc_unlock>:
 800f46c:	4801      	ldr	r0, [pc, #4]	; (800f474 <__malloc_unlock+0x8>)
 800f46e:	f7ff bed5 	b.w	800f21c <__retarget_lock_release_recursive>
 800f472:	bf00      	nop
 800f474:	20008a18 	.word	0x20008a18

0800f478 <__ssputs_r>:
 800f478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f47c:	688e      	ldr	r6, [r1, #8]
 800f47e:	461f      	mov	r7, r3
 800f480:	42be      	cmp	r6, r7
 800f482:	680b      	ldr	r3, [r1, #0]
 800f484:	4682      	mov	sl, r0
 800f486:	460c      	mov	r4, r1
 800f488:	4690      	mov	r8, r2
 800f48a:	d82c      	bhi.n	800f4e6 <__ssputs_r+0x6e>
 800f48c:	898a      	ldrh	r2, [r1, #12]
 800f48e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f492:	d026      	beq.n	800f4e2 <__ssputs_r+0x6a>
 800f494:	6965      	ldr	r5, [r4, #20]
 800f496:	6909      	ldr	r1, [r1, #16]
 800f498:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f49c:	eba3 0901 	sub.w	r9, r3, r1
 800f4a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4a4:	1c7b      	adds	r3, r7, #1
 800f4a6:	444b      	add	r3, r9
 800f4a8:	106d      	asrs	r5, r5, #1
 800f4aa:	429d      	cmp	r5, r3
 800f4ac:	bf38      	it	cc
 800f4ae:	461d      	movcc	r5, r3
 800f4b0:	0553      	lsls	r3, r2, #21
 800f4b2:	d527      	bpl.n	800f504 <__ssputs_r+0x8c>
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	f7ff ff53 	bl	800f360 <_malloc_r>
 800f4ba:	4606      	mov	r6, r0
 800f4bc:	b360      	cbz	r0, 800f518 <__ssputs_r+0xa0>
 800f4be:	6921      	ldr	r1, [r4, #16]
 800f4c0:	464a      	mov	r2, r9
 800f4c2:	f7ff feac 	bl	800f21e <memcpy>
 800f4c6:	89a3      	ldrh	r3, [r4, #12]
 800f4c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4d0:	81a3      	strh	r3, [r4, #12]
 800f4d2:	6126      	str	r6, [r4, #16]
 800f4d4:	6165      	str	r5, [r4, #20]
 800f4d6:	444e      	add	r6, r9
 800f4d8:	eba5 0509 	sub.w	r5, r5, r9
 800f4dc:	6026      	str	r6, [r4, #0]
 800f4de:	60a5      	str	r5, [r4, #8]
 800f4e0:	463e      	mov	r6, r7
 800f4e2:	42be      	cmp	r6, r7
 800f4e4:	d900      	bls.n	800f4e8 <__ssputs_r+0x70>
 800f4e6:	463e      	mov	r6, r7
 800f4e8:	6820      	ldr	r0, [r4, #0]
 800f4ea:	4632      	mov	r2, r6
 800f4ec:	4641      	mov	r1, r8
 800f4ee:	f7ff fe06 	bl	800f0fe <memmove>
 800f4f2:	68a3      	ldr	r3, [r4, #8]
 800f4f4:	1b9b      	subs	r3, r3, r6
 800f4f6:	60a3      	str	r3, [r4, #8]
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	4433      	add	r3, r6
 800f4fc:	6023      	str	r3, [r4, #0]
 800f4fe:	2000      	movs	r0, #0
 800f500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f504:	462a      	mov	r2, r5
 800f506:	f000 fd50 	bl	800ffaa <_realloc_r>
 800f50a:	4606      	mov	r6, r0
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d1e0      	bne.n	800f4d2 <__ssputs_r+0x5a>
 800f510:	6921      	ldr	r1, [r4, #16]
 800f512:	4650      	mov	r0, sl
 800f514:	f7ff feb0 	bl	800f278 <_free_r>
 800f518:	230c      	movs	r3, #12
 800f51a:	f8ca 3000 	str.w	r3, [sl]
 800f51e:	89a3      	ldrh	r3, [r4, #12]
 800f520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f524:	81a3      	strh	r3, [r4, #12]
 800f526:	f04f 30ff 	mov.w	r0, #4294967295
 800f52a:	e7e9      	b.n	800f500 <__ssputs_r+0x88>

0800f52c <_svfiprintf_r>:
 800f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f530:	4698      	mov	r8, r3
 800f532:	898b      	ldrh	r3, [r1, #12]
 800f534:	061b      	lsls	r3, r3, #24
 800f536:	b09d      	sub	sp, #116	; 0x74
 800f538:	4607      	mov	r7, r0
 800f53a:	460d      	mov	r5, r1
 800f53c:	4614      	mov	r4, r2
 800f53e:	d50e      	bpl.n	800f55e <_svfiprintf_r+0x32>
 800f540:	690b      	ldr	r3, [r1, #16]
 800f542:	b963      	cbnz	r3, 800f55e <_svfiprintf_r+0x32>
 800f544:	2140      	movs	r1, #64	; 0x40
 800f546:	f7ff ff0b 	bl	800f360 <_malloc_r>
 800f54a:	6028      	str	r0, [r5, #0]
 800f54c:	6128      	str	r0, [r5, #16]
 800f54e:	b920      	cbnz	r0, 800f55a <_svfiprintf_r+0x2e>
 800f550:	230c      	movs	r3, #12
 800f552:	603b      	str	r3, [r7, #0]
 800f554:	f04f 30ff 	mov.w	r0, #4294967295
 800f558:	e0d0      	b.n	800f6fc <_svfiprintf_r+0x1d0>
 800f55a:	2340      	movs	r3, #64	; 0x40
 800f55c:	616b      	str	r3, [r5, #20]
 800f55e:	2300      	movs	r3, #0
 800f560:	9309      	str	r3, [sp, #36]	; 0x24
 800f562:	2320      	movs	r3, #32
 800f564:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f568:	f8cd 800c 	str.w	r8, [sp, #12]
 800f56c:	2330      	movs	r3, #48	; 0x30
 800f56e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f714 <_svfiprintf_r+0x1e8>
 800f572:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f576:	f04f 0901 	mov.w	r9, #1
 800f57a:	4623      	mov	r3, r4
 800f57c:	469a      	mov	sl, r3
 800f57e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f582:	b10a      	cbz	r2, 800f588 <_svfiprintf_r+0x5c>
 800f584:	2a25      	cmp	r2, #37	; 0x25
 800f586:	d1f9      	bne.n	800f57c <_svfiprintf_r+0x50>
 800f588:	ebba 0b04 	subs.w	fp, sl, r4
 800f58c:	d00b      	beq.n	800f5a6 <_svfiprintf_r+0x7a>
 800f58e:	465b      	mov	r3, fp
 800f590:	4622      	mov	r2, r4
 800f592:	4629      	mov	r1, r5
 800f594:	4638      	mov	r0, r7
 800f596:	f7ff ff6f 	bl	800f478 <__ssputs_r>
 800f59a:	3001      	adds	r0, #1
 800f59c:	f000 80a9 	beq.w	800f6f2 <_svfiprintf_r+0x1c6>
 800f5a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5a2:	445a      	add	r2, fp
 800f5a4:	9209      	str	r2, [sp, #36]	; 0x24
 800f5a6:	f89a 3000 	ldrb.w	r3, [sl]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	f000 80a1 	beq.w	800f6f2 <_svfiprintf_r+0x1c6>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5ba:	f10a 0a01 	add.w	sl, sl, #1
 800f5be:	9304      	str	r3, [sp, #16]
 800f5c0:	9307      	str	r3, [sp, #28]
 800f5c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5c6:	931a      	str	r3, [sp, #104]	; 0x68
 800f5c8:	4654      	mov	r4, sl
 800f5ca:	2205      	movs	r2, #5
 800f5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5d0:	4850      	ldr	r0, [pc, #320]	; (800f714 <_svfiprintf_r+0x1e8>)
 800f5d2:	f7f0 fe0d 	bl	80001f0 <memchr>
 800f5d6:	9a04      	ldr	r2, [sp, #16]
 800f5d8:	b9d8      	cbnz	r0, 800f612 <_svfiprintf_r+0xe6>
 800f5da:	06d0      	lsls	r0, r2, #27
 800f5dc:	bf44      	itt	mi
 800f5de:	2320      	movmi	r3, #32
 800f5e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5e4:	0711      	lsls	r1, r2, #28
 800f5e6:	bf44      	itt	mi
 800f5e8:	232b      	movmi	r3, #43	; 0x2b
 800f5ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5ee:	f89a 3000 	ldrb.w	r3, [sl]
 800f5f2:	2b2a      	cmp	r3, #42	; 0x2a
 800f5f4:	d015      	beq.n	800f622 <_svfiprintf_r+0xf6>
 800f5f6:	9a07      	ldr	r2, [sp, #28]
 800f5f8:	4654      	mov	r4, sl
 800f5fa:	2000      	movs	r0, #0
 800f5fc:	f04f 0c0a 	mov.w	ip, #10
 800f600:	4621      	mov	r1, r4
 800f602:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f606:	3b30      	subs	r3, #48	; 0x30
 800f608:	2b09      	cmp	r3, #9
 800f60a:	d94d      	bls.n	800f6a8 <_svfiprintf_r+0x17c>
 800f60c:	b1b0      	cbz	r0, 800f63c <_svfiprintf_r+0x110>
 800f60e:	9207      	str	r2, [sp, #28]
 800f610:	e014      	b.n	800f63c <_svfiprintf_r+0x110>
 800f612:	eba0 0308 	sub.w	r3, r0, r8
 800f616:	fa09 f303 	lsl.w	r3, r9, r3
 800f61a:	4313      	orrs	r3, r2
 800f61c:	9304      	str	r3, [sp, #16]
 800f61e:	46a2      	mov	sl, r4
 800f620:	e7d2      	b.n	800f5c8 <_svfiprintf_r+0x9c>
 800f622:	9b03      	ldr	r3, [sp, #12]
 800f624:	1d19      	adds	r1, r3, #4
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	9103      	str	r1, [sp, #12]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	bfbb      	ittet	lt
 800f62e:	425b      	neglt	r3, r3
 800f630:	f042 0202 	orrlt.w	r2, r2, #2
 800f634:	9307      	strge	r3, [sp, #28]
 800f636:	9307      	strlt	r3, [sp, #28]
 800f638:	bfb8      	it	lt
 800f63a:	9204      	strlt	r2, [sp, #16]
 800f63c:	7823      	ldrb	r3, [r4, #0]
 800f63e:	2b2e      	cmp	r3, #46	; 0x2e
 800f640:	d10c      	bne.n	800f65c <_svfiprintf_r+0x130>
 800f642:	7863      	ldrb	r3, [r4, #1]
 800f644:	2b2a      	cmp	r3, #42	; 0x2a
 800f646:	d134      	bne.n	800f6b2 <_svfiprintf_r+0x186>
 800f648:	9b03      	ldr	r3, [sp, #12]
 800f64a:	1d1a      	adds	r2, r3, #4
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	9203      	str	r2, [sp, #12]
 800f650:	2b00      	cmp	r3, #0
 800f652:	bfb8      	it	lt
 800f654:	f04f 33ff 	movlt.w	r3, #4294967295
 800f658:	3402      	adds	r4, #2
 800f65a:	9305      	str	r3, [sp, #20]
 800f65c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800f724 <_svfiprintf_r+0x1f8>
 800f660:	7821      	ldrb	r1, [r4, #0]
 800f662:	2203      	movs	r2, #3
 800f664:	4650      	mov	r0, sl
 800f666:	f7f0 fdc3 	bl	80001f0 <memchr>
 800f66a:	b138      	cbz	r0, 800f67c <_svfiprintf_r+0x150>
 800f66c:	9b04      	ldr	r3, [sp, #16]
 800f66e:	eba0 000a 	sub.w	r0, r0, sl
 800f672:	2240      	movs	r2, #64	; 0x40
 800f674:	4082      	lsls	r2, r0
 800f676:	4313      	orrs	r3, r2
 800f678:	3401      	adds	r4, #1
 800f67a:	9304      	str	r3, [sp, #16]
 800f67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f680:	4825      	ldr	r0, [pc, #148]	; (800f718 <_svfiprintf_r+0x1ec>)
 800f682:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f686:	2206      	movs	r2, #6
 800f688:	f7f0 fdb2 	bl	80001f0 <memchr>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	d038      	beq.n	800f702 <_svfiprintf_r+0x1d6>
 800f690:	4b22      	ldr	r3, [pc, #136]	; (800f71c <_svfiprintf_r+0x1f0>)
 800f692:	bb1b      	cbnz	r3, 800f6dc <_svfiprintf_r+0x1b0>
 800f694:	9b03      	ldr	r3, [sp, #12]
 800f696:	3307      	adds	r3, #7
 800f698:	f023 0307 	bic.w	r3, r3, #7
 800f69c:	3308      	adds	r3, #8
 800f69e:	9303      	str	r3, [sp, #12]
 800f6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6a2:	4433      	add	r3, r6
 800f6a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f6a6:	e768      	b.n	800f57a <_svfiprintf_r+0x4e>
 800f6a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6ac:	460c      	mov	r4, r1
 800f6ae:	2001      	movs	r0, #1
 800f6b0:	e7a6      	b.n	800f600 <_svfiprintf_r+0xd4>
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	3401      	adds	r4, #1
 800f6b6:	9305      	str	r3, [sp, #20]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	f04f 0c0a 	mov.w	ip, #10
 800f6be:	4620      	mov	r0, r4
 800f6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6c4:	3a30      	subs	r2, #48	; 0x30
 800f6c6:	2a09      	cmp	r2, #9
 800f6c8:	d903      	bls.n	800f6d2 <_svfiprintf_r+0x1a6>
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d0c6      	beq.n	800f65c <_svfiprintf_r+0x130>
 800f6ce:	9105      	str	r1, [sp, #20]
 800f6d0:	e7c4      	b.n	800f65c <_svfiprintf_r+0x130>
 800f6d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6d6:	4604      	mov	r4, r0
 800f6d8:	2301      	movs	r3, #1
 800f6da:	e7f0      	b.n	800f6be <_svfiprintf_r+0x192>
 800f6dc:	ab03      	add	r3, sp, #12
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	462a      	mov	r2, r5
 800f6e2:	4b0f      	ldr	r3, [pc, #60]	; (800f720 <_svfiprintf_r+0x1f4>)
 800f6e4:	a904      	add	r1, sp, #16
 800f6e6:	4638      	mov	r0, r7
 800f6e8:	f3af 8000 	nop.w
 800f6ec:	1c42      	adds	r2, r0, #1
 800f6ee:	4606      	mov	r6, r0
 800f6f0:	d1d6      	bne.n	800f6a0 <_svfiprintf_r+0x174>
 800f6f2:	89ab      	ldrh	r3, [r5, #12]
 800f6f4:	065b      	lsls	r3, r3, #25
 800f6f6:	f53f af2d 	bmi.w	800f554 <_svfiprintf_r+0x28>
 800f6fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6fc:	b01d      	add	sp, #116	; 0x74
 800f6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f702:	ab03      	add	r3, sp, #12
 800f704:	9300      	str	r3, [sp, #0]
 800f706:	462a      	mov	r2, r5
 800f708:	4b05      	ldr	r3, [pc, #20]	; (800f720 <_svfiprintf_r+0x1f4>)
 800f70a:	a904      	add	r1, sp, #16
 800f70c:	4638      	mov	r0, r7
 800f70e:	f000 f9bd 	bl	800fa8c <_printf_i>
 800f712:	e7eb      	b.n	800f6ec <_svfiprintf_r+0x1c0>
 800f714:	08012d6d 	.word	0x08012d6d
 800f718:	08012d77 	.word	0x08012d77
 800f71c:	00000000 	.word	0x00000000
 800f720:	0800f479 	.word	0x0800f479
 800f724:	08012d73 	.word	0x08012d73

0800f728 <__sfputc_r>:
 800f728:	6893      	ldr	r3, [r2, #8]
 800f72a:	3b01      	subs	r3, #1
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	b410      	push	{r4}
 800f730:	6093      	str	r3, [r2, #8]
 800f732:	da08      	bge.n	800f746 <__sfputc_r+0x1e>
 800f734:	6994      	ldr	r4, [r2, #24]
 800f736:	42a3      	cmp	r3, r4
 800f738:	db01      	blt.n	800f73e <__sfputc_r+0x16>
 800f73a:	290a      	cmp	r1, #10
 800f73c:	d103      	bne.n	800f746 <__sfputc_r+0x1e>
 800f73e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f742:	f000 bb85 	b.w	800fe50 <__swbuf_r>
 800f746:	6813      	ldr	r3, [r2, #0]
 800f748:	1c58      	adds	r0, r3, #1
 800f74a:	6010      	str	r0, [r2, #0]
 800f74c:	7019      	strb	r1, [r3, #0]
 800f74e:	4608      	mov	r0, r1
 800f750:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <__sfputs_r>:
 800f756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f758:	4606      	mov	r6, r0
 800f75a:	460f      	mov	r7, r1
 800f75c:	4614      	mov	r4, r2
 800f75e:	18d5      	adds	r5, r2, r3
 800f760:	42ac      	cmp	r4, r5
 800f762:	d101      	bne.n	800f768 <__sfputs_r+0x12>
 800f764:	2000      	movs	r0, #0
 800f766:	e007      	b.n	800f778 <__sfputs_r+0x22>
 800f768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f76c:	463a      	mov	r2, r7
 800f76e:	4630      	mov	r0, r6
 800f770:	f7ff ffda 	bl	800f728 <__sfputc_r>
 800f774:	1c43      	adds	r3, r0, #1
 800f776:	d1f3      	bne.n	800f760 <__sfputs_r+0xa>
 800f778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f77c <_vfiprintf_r>:
 800f77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f780:	460d      	mov	r5, r1
 800f782:	b09d      	sub	sp, #116	; 0x74
 800f784:	4614      	mov	r4, r2
 800f786:	4698      	mov	r8, r3
 800f788:	4606      	mov	r6, r0
 800f78a:	b118      	cbz	r0, 800f794 <_vfiprintf_r+0x18>
 800f78c:	6a03      	ldr	r3, [r0, #32]
 800f78e:	b90b      	cbnz	r3, 800f794 <_vfiprintf_r+0x18>
 800f790:	f7ff fbfa 	bl	800ef88 <__sinit>
 800f794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f796:	07d9      	lsls	r1, r3, #31
 800f798:	d405      	bmi.n	800f7a6 <_vfiprintf_r+0x2a>
 800f79a:	89ab      	ldrh	r3, [r5, #12]
 800f79c:	059a      	lsls	r2, r3, #22
 800f79e:	d402      	bmi.n	800f7a6 <_vfiprintf_r+0x2a>
 800f7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7a2:	f7ff fd3a 	bl	800f21a <__retarget_lock_acquire_recursive>
 800f7a6:	89ab      	ldrh	r3, [r5, #12]
 800f7a8:	071b      	lsls	r3, r3, #28
 800f7aa:	d501      	bpl.n	800f7b0 <_vfiprintf_r+0x34>
 800f7ac:	692b      	ldr	r3, [r5, #16]
 800f7ae:	b99b      	cbnz	r3, 800f7d8 <_vfiprintf_r+0x5c>
 800f7b0:	4629      	mov	r1, r5
 800f7b2:	4630      	mov	r0, r6
 800f7b4:	f000 fb8a 	bl	800fecc <__swsetup_r>
 800f7b8:	b170      	cbz	r0, 800f7d8 <_vfiprintf_r+0x5c>
 800f7ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7bc:	07dc      	lsls	r4, r3, #31
 800f7be:	d504      	bpl.n	800f7ca <_vfiprintf_r+0x4e>
 800f7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c4:	b01d      	add	sp, #116	; 0x74
 800f7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ca:	89ab      	ldrh	r3, [r5, #12]
 800f7cc:	0598      	lsls	r0, r3, #22
 800f7ce:	d4f7      	bmi.n	800f7c0 <_vfiprintf_r+0x44>
 800f7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7d2:	f7ff fd23 	bl	800f21c <__retarget_lock_release_recursive>
 800f7d6:	e7f3      	b.n	800f7c0 <_vfiprintf_r+0x44>
 800f7d8:	2300      	movs	r3, #0
 800f7da:	9309      	str	r3, [sp, #36]	; 0x24
 800f7dc:	2320      	movs	r3, #32
 800f7de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7e6:	2330      	movs	r3, #48	; 0x30
 800f7e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f99c <_vfiprintf_r+0x220>
 800f7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7f0:	f04f 0901 	mov.w	r9, #1
 800f7f4:	4623      	mov	r3, r4
 800f7f6:	469a      	mov	sl, r3
 800f7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7fc:	b10a      	cbz	r2, 800f802 <_vfiprintf_r+0x86>
 800f7fe:	2a25      	cmp	r2, #37	; 0x25
 800f800:	d1f9      	bne.n	800f7f6 <_vfiprintf_r+0x7a>
 800f802:	ebba 0b04 	subs.w	fp, sl, r4
 800f806:	d00b      	beq.n	800f820 <_vfiprintf_r+0xa4>
 800f808:	465b      	mov	r3, fp
 800f80a:	4622      	mov	r2, r4
 800f80c:	4629      	mov	r1, r5
 800f80e:	4630      	mov	r0, r6
 800f810:	f7ff ffa1 	bl	800f756 <__sfputs_r>
 800f814:	3001      	adds	r0, #1
 800f816:	f000 80a9 	beq.w	800f96c <_vfiprintf_r+0x1f0>
 800f81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f81c:	445a      	add	r2, fp
 800f81e:	9209      	str	r2, [sp, #36]	; 0x24
 800f820:	f89a 3000 	ldrb.w	r3, [sl]
 800f824:	2b00      	cmp	r3, #0
 800f826:	f000 80a1 	beq.w	800f96c <_vfiprintf_r+0x1f0>
 800f82a:	2300      	movs	r3, #0
 800f82c:	f04f 32ff 	mov.w	r2, #4294967295
 800f830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f834:	f10a 0a01 	add.w	sl, sl, #1
 800f838:	9304      	str	r3, [sp, #16]
 800f83a:	9307      	str	r3, [sp, #28]
 800f83c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f840:	931a      	str	r3, [sp, #104]	; 0x68
 800f842:	4654      	mov	r4, sl
 800f844:	2205      	movs	r2, #5
 800f846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f84a:	4854      	ldr	r0, [pc, #336]	; (800f99c <_vfiprintf_r+0x220>)
 800f84c:	f7f0 fcd0 	bl	80001f0 <memchr>
 800f850:	9a04      	ldr	r2, [sp, #16]
 800f852:	b9d8      	cbnz	r0, 800f88c <_vfiprintf_r+0x110>
 800f854:	06d1      	lsls	r1, r2, #27
 800f856:	bf44      	itt	mi
 800f858:	2320      	movmi	r3, #32
 800f85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f85e:	0713      	lsls	r3, r2, #28
 800f860:	bf44      	itt	mi
 800f862:	232b      	movmi	r3, #43	; 0x2b
 800f864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f868:	f89a 3000 	ldrb.w	r3, [sl]
 800f86c:	2b2a      	cmp	r3, #42	; 0x2a
 800f86e:	d015      	beq.n	800f89c <_vfiprintf_r+0x120>
 800f870:	9a07      	ldr	r2, [sp, #28]
 800f872:	4654      	mov	r4, sl
 800f874:	2000      	movs	r0, #0
 800f876:	f04f 0c0a 	mov.w	ip, #10
 800f87a:	4621      	mov	r1, r4
 800f87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f880:	3b30      	subs	r3, #48	; 0x30
 800f882:	2b09      	cmp	r3, #9
 800f884:	d94d      	bls.n	800f922 <_vfiprintf_r+0x1a6>
 800f886:	b1b0      	cbz	r0, 800f8b6 <_vfiprintf_r+0x13a>
 800f888:	9207      	str	r2, [sp, #28]
 800f88a:	e014      	b.n	800f8b6 <_vfiprintf_r+0x13a>
 800f88c:	eba0 0308 	sub.w	r3, r0, r8
 800f890:	fa09 f303 	lsl.w	r3, r9, r3
 800f894:	4313      	orrs	r3, r2
 800f896:	9304      	str	r3, [sp, #16]
 800f898:	46a2      	mov	sl, r4
 800f89a:	e7d2      	b.n	800f842 <_vfiprintf_r+0xc6>
 800f89c:	9b03      	ldr	r3, [sp, #12]
 800f89e:	1d19      	adds	r1, r3, #4
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	9103      	str	r1, [sp, #12]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	bfbb      	ittet	lt
 800f8a8:	425b      	neglt	r3, r3
 800f8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800f8ae:	9307      	strge	r3, [sp, #28]
 800f8b0:	9307      	strlt	r3, [sp, #28]
 800f8b2:	bfb8      	it	lt
 800f8b4:	9204      	strlt	r2, [sp, #16]
 800f8b6:	7823      	ldrb	r3, [r4, #0]
 800f8b8:	2b2e      	cmp	r3, #46	; 0x2e
 800f8ba:	d10c      	bne.n	800f8d6 <_vfiprintf_r+0x15a>
 800f8bc:	7863      	ldrb	r3, [r4, #1]
 800f8be:	2b2a      	cmp	r3, #42	; 0x2a
 800f8c0:	d134      	bne.n	800f92c <_vfiprintf_r+0x1b0>
 800f8c2:	9b03      	ldr	r3, [sp, #12]
 800f8c4:	1d1a      	adds	r2, r3, #4
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	9203      	str	r2, [sp, #12]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	bfb8      	it	lt
 800f8ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8d2:	3402      	adds	r4, #2
 800f8d4:	9305      	str	r3, [sp, #20]
 800f8d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f9ac <_vfiprintf_r+0x230>
 800f8da:	7821      	ldrb	r1, [r4, #0]
 800f8dc:	2203      	movs	r2, #3
 800f8de:	4650      	mov	r0, sl
 800f8e0:	f7f0 fc86 	bl	80001f0 <memchr>
 800f8e4:	b138      	cbz	r0, 800f8f6 <_vfiprintf_r+0x17a>
 800f8e6:	9b04      	ldr	r3, [sp, #16]
 800f8e8:	eba0 000a 	sub.w	r0, r0, sl
 800f8ec:	2240      	movs	r2, #64	; 0x40
 800f8ee:	4082      	lsls	r2, r0
 800f8f0:	4313      	orrs	r3, r2
 800f8f2:	3401      	adds	r4, #1
 800f8f4:	9304      	str	r3, [sp, #16]
 800f8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8fa:	4829      	ldr	r0, [pc, #164]	; (800f9a0 <_vfiprintf_r+0x224>)
 800f8fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f900:	2206      	movs	r2, #6
 800f902:	f7f0 fc75 	bl	80001f0 <memchr>
 800f906:	2800      	cmp	r0, #0
 800f908:	d03f      	beq.n	800f98a <_vfiprintf_r+0x20e>
 800f90a:	4b26      	ldr	r3, [pc, #152]	; (800f9a4 <_vfiprintf_r+0x228>)
 800f90c:	bb1b      	cbnz	r3, 800f956 <_vfiprintf_r+0x1da>
 800f90e:	9b03      	ldr	r3, [sp, #12]
 800f910:	3307      	adds	r3, #7
 800f912:	f023 0307 	bic.w	r3, r3, #7
 800f916:	3308      	adds	r3, #8
 800f918:	9303      	str	r3, [sp, #12]
 800f91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f91c:	443b      	add	r3, r7
 800f91e:	9309      	str	r3, [sp, #36]	; 0x24
 800f920:	e768      	b.n	800f7f4 <_vfiprintf_r+0x78>
 800f922:	fb0c 3202 	mla	r2, ip, r2, r3
 800f926:	460c      	mov	r4, r1
 800f928:	2001      	movs	r0, #1
 800f92a:	e7a6      	b.n	800f87a <_vfiprintf_r+0xfe>
 800f92c:	2300      	movs	r3, #0
 800f92e:	3401      	adds	r4, #1
 800f930:	9305      	str	r3, [sp, #20]
 800f932:	4619      	mov	r1, r3
 800f934:	f04f 0c0a 	mov.w	ip, #10
 800f938:	4620      	mov	r0, r4
 800f93a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f93e:	3a30      	subs	r2, #48	; 0x30
 800f940:	2a09      	cmp	r2, #9
 800f942:	d903      	bls.n	800f94c <_vfiprintf_r+0x1d0>
 800f944:	2b00      	cmp	r3, #0
 800f946:	d0c6      	beq.n	800f8d6 <_vfiprintf_r+0x15a>
 800f948:	9105      	str	r1, [sp, #20]
 800f94a:	e7c4      	b.n	800f8d6 <_vfiprintf_r+0x15a>
 800f94c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f950:	4604      	mov	r4, r0
 800f952:	2301      	movs	r3, #1
 800f954:	e7f0      	b.n	800f938 <_vfiprintf_r+0x1bc>
 800f956:	ab03      	add	r3, sp, #12
 800f958:	9300      	str	r3, [sp, #0]
 800f95a:	462a      	mov	r2, r5
 800f95c:	4b12      	ldr	r3, [pc, #72]	; (800f9a8 <_vfiprintf_r+0x22c>)
 800f95e:	a904      	add	r1, sp, #16
 800f960:	4630      	mov	r0, r6
 800f962:	f3af 8000 	nop.w
 800f966:	4607      	mov	r7, r0
 800f968:	1c78      	adds	r0, r7, #1
 800f96a:	d1d6      	bne.n	800f91a <_vfiprintf_r+0x19e>
 800f96c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f96e:	07d9      	lsls	r1, r3, #31
 800f970:	d405      	bmi.n	800f97e <_vfiprintf_r+0x202>
 800f972:	89ab      	ldrh	r3, [r5, #12]
 800f974:	059a      	lsls	r2, r3, #22
 800f976:	d402      	bmi.n	800f97e <_vfiprintf_r+0x202>
 800f978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f97a:	f7ff fc4f 	bl	800f21c <__retarget_lock_release_recursive>
 800f97e:	89ab      	ldrh	r3, [r5, #12]
 800f980:	065b      	lsls	r3, r3, #25
 800f982:	f53f af1d 	bmi.w	800f7c0 <_vfiprintf_r+0x44>
 800f986:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f988:	e71c      	b.n	800f7c4 <_vfiprintf_r+0x48>
 800f98a:	ab03      	add	r3, sp, #12
 800f98c:	9300      	str	r3, [sp, #0]
 800f98e:	462a      	mov	r2, r5
 800f990:	4b05      	ldr	r3, [pc, #20]	; (800f9a8 <_vfiprintf_r+0x22c>)
 800f992:	a904      	add	r1, sp, #16
 800f994:	4630      	mov	r0, r6
 800f996:	f000 f879 	bl	800fa8c <_printf_i>
 800f99a:	e7e4      	b.n	800f966 <_vfiprintf_r+0x1ea>
 800f99c:	08012d6d 	.word	0x08012d6d
 800f9a0:	08012d77 	.word	0x08012d77
 800f9a4:	00000000 	.word	0x00000000
 800f9a8:	0800f757 	.word	0x0800f757
 800f9ac:	08012d73 	.word	0x08012d73

0800f9b0 <_printf_common>:
 800f9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9b4:	4616      	mov	r6, r2
 800f9b6:	4699      	mov	r9, r3
 800f9b8:	688a      	ldr	r2, [r1, #8]
 800f9ba:	690b      	ldr	r3, [r1, #16]
 800f9bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9c0:	4293      	cmp	r3, r2
 800f9c2:	bfb8      	it	lt
 800f9c4:	4613      	movlt	r3, r2
 800f9c6:	6033      	str	r3, [r6, #0]
 800f9c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9cc:	4607      	mov	r7, r0
 800f9ce:	460c      	mov	r4, r1
 800f9d0:	b10a      	cbz	r2, 800f9d6 <_printf_common+0x26>
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	6033      	str	r3, [r6, #0]
 800f9d6:	6823      	ldr	r3, [r4, #0]
 800f9d8:	0699      	lsls	r1, r3, #26
 800f9da:	bf42      	ittt	mi
 800f9dc:	6833      	ldrmi	r3, [r6, #0]
 800f9de:	3302      	addmi	r3, #2
 800f9e0:	6033      	strmi	r3, [r6, #0]
 800f9e2:	6825      	ldr	r5, [r4, #0]
 800f9e4:	f015 0506 	ands.w	r5, r5, #6
 800f9e8:	d106      	bne.n	800f9f8 <_printf_common+0x48>
 800f9ea:	f104 0a19 	add.w	sl, r4, #25
 800f9ee:	68e3      	ldr	r3, [r4, #12]
 800f9f0:	6832      	ldr	r2, [r6, #0]
 800f9f2:	1a9b      	subs	r3, r3, r2
 800f9f4:	42ab      	cmp	r3, r5
 800f9f6:	dc26      	bgt.n	800fa46 <_printf_common+0x96>
 800f9f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9fc:	1e13      	subs	r3, r2, #0
 800f9fe:	6822      	ldr	r2, [r4, #0]
 800fa00:	bf18      	it	ne
 800fa02:	2301      	movne	r3, #1
 800fa04:	0692      	lsls	r2, r2, #26
 800fa06:	d42b      	bmi.n	800fa60 <_printf_common+0xb0>
 800fa08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa0c:	4649      	mov	r1, r9
 800fa0e:	4638      	mov	r0, r7
 800fa10:	47c0      	blx	r8
 800fa12:	3001      	adds	r0, #1
 800fa14:	d01e      	beq.n	800fa54 <_printf_common+0xa4>
 800fa16:	6823      	ldr	r3, [r4, #0]
 800fa18:	6922      	ldr	r2, [r4, #16]
 800fa1a:	f003 0306 	and.w	r3, r3, #6
 800fa1e:	2b04      	cmp	r3, #4
 800fa20:	bf02      	ittt	eq
 800fa22:	68e5      	ldreq	r5, [r4, #12]
 800fa24:	6833      	ldreq	r3, [r6, #0]
 800fa26:	1aed      	subeq	r5, r5, r3
 800fa28:	68a3      	ldr	r3, [r4, #8]
 800fa2a:	bf0c      	ite	eq
 800fa2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa30:	2500      	movne	r5, #0
 800fa32:	4293      	cmp	r3, r2
 800fa34:	bfc4      	itt	gt
 800fa36:	1a9b      	subgt	r3, r3, r2
 800fa38:	18ed      	addgt	r5, r5, r3
 800fa3a:	2600      	movs	r6, #0
 800fa3c:	341a      	adds	r4, #26
 800fa3e:	42b5      	cmp	r5, r6
 800fa40:	d11a      	bne.n	800fa78 <_printf_common+0xc8>
 800fa42:	2000      	movs	r0, #0
 800fa44:	e008      	b.n	800fa58 <_printf_common+0xa8>
 800fa46:	2301      	movs	r3, #1
 800fa48:	4652      	mov	r2, sl
 800fa4a:	4649      	mov	r1, r9
 800fa4c:	4638      	mov	r0, r7
 800fa4e:	47c0      	blx	r8
 800fa50:	3001      	adds	r0, #1
 800fa52:	d103      	bne.n	800fa5c <_printf_common+0xac>
 800fa54:	f04f 30ff 	mov.w	r0, #4294967295
 800fa58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa5c:	3501      	adds	r5, #1
 800fa5e:	e7c6      	b.n	800f9ee <_printf_common+0x3e>
 800fa60:	18e1      	adds	r1, r4, r3
 800fa62:	1c5a      	adds	r2, r3, #1
 800fa64:	2030      	movs	r0, #48	; 0x30
 800fa66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa6a:	4422      	add	r2, r4
 800fa6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa74:	3302      	adds	r3, #2
 800fa76:	e7c7      	b.n	800fa08 <_printf_common+0x58>
 800fa78:	2301      	movs	r3, #1
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	4649      	mov	r1, r9
 800fa7e:	4638      	mov	r0, r7
 800fa80:	47c0      	blx	r8
 800fa82:	3001      	adds	r0, #1
 800fa84:	d0e6      	beq.n	800fa54 <_printf_common+0xa4>
 800fa86:	3601      	adds	r6, #1
 800fa88:	e7d9      	b.n	800fa3e <_printf_common+0x8e>
	...

0800fa8c <_printf_i>:
 800fa8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa90:	7e0f      	ldrb	r7, [r1, #24]
 800fa92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa94:	2f78      	cmp	r7, #120	; 0x78
 800fa96:	4691      	mov	r9, r2
 800fa98:	4680      	mov	r8, r0
 800fa9a:	460c      	mov	r4, r1
 800fa9c:	469a      	mov	sl, r3
 800fa9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800faa2:	d807      	bhi.n	800fab4 <_printf_i+0x28>
 800faa4:	2f62      	cmp	r7, #98	; 0x62
 800faa6:	d80a      	bhi.n	800fabe <_printf_i+0x32>
 800faa8:	2f00      	cmp	r7, #0
 800faaa:	f000 80d4 	beq.w	800fc56 <_printf_i+0x1ca>
 800faae:	2f58      	cmp	r7, #88	; 0x58
 800fab0:	f000 80c0 	beq.w	800fc34 <_printf_i+0x1a8>
 800fab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fabc:	e03a      	b.n	800fb34 <_printf_i+0xa8>
 800fabe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fac2:	2b15      	cmp	r3, #21
 800fac4:	d8f6      	bhi.n	800fab4 <_printf_i+0x28>
 800fac6:	a101      	add	r1, pc, #4	; (adr r1, 800facc <_printf_i+0x40>)
 800fac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800facc:	0800fb25 	.word	0x0800fb25
 800fad0:	0800fb39 	.word	0x0800fb39
 800fad4:	0800fab5 	.word	0x0800fab5
 800fad8:	0800fab5 	.word	0x0800fab5
 800fadc:	0800fab5 	.word	0x0800fab5
 800fae0:	0800fab5 	.word	0x0800fab5
 800fae4:	0800fb39 	.word	0x0800fb39
 800fae8:	0800fab5 	.word	0x0800fab5
 800faec:	0800fab5 	.word	0x0800fab5
 800faf0:	0800fab5 	.word	0x0800fab5
 800faf4:	0800fab5 	.word	0x0800fab5
 800faf8:	0800fc3d 	.word	0x0800fc3d
 800fafc:	0800fb65 	.word	0x0800fb65
 800fb00:	0800fbf7 	.word	0x0800fbf7
 800fb04:	0800fab5 	.word	0x0800fab5
 800fb08:	0800fab5 	.word	0x0800fab5
 800fb0c:	0800fc5f 	.word	0x0800fc5f
 800fb10:	0800fab5 	.word	0x0800fab5
 800fb14:	0800fb65 	.word	0x0800fb65
 800fb18:	0800fab5 	.word	0x0800fab5
 800fb1c:	0800fab5 	.word	0x0800fab5
 800fb20:	0800fbff 	.word	0x0800fbff
 800fb24:	682b      	ldr	r3, [r5, #0]
 800fb26:	1d1a      	adds	r2, r3, #4
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	602a      	str	r2, [r5, #0]
 800fb2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb34:	2301      	movs	r3, #1
 800fb36:	e09f      	b.n	800fc78 <_printf_i+0x1ec>
 800fb38:	6820      	ldr	r0, [r4, #0]
 800fb3a:	682b      	ldr	r3, [r5, #0]
 800fb3c:	0607      	lsls	r7, r0, #24
 800fb3e:	f103 0104 	add.w	r1, r3, #4
 800fb42:	6029      	str	r1, [r5, #0]
 800fb44:	d501      	bpl.n	800fb4a <_printf_i+0xbe>
 800fb46:	681e      	ldr	r6, [r3, #0]
 800fb48:	e003      	b.n	800fb52 <_printf_i+0xc6>
 800fb4a:	0646      	lsls	r6, r0, #25
 800fb4c:	d5fb      	bpl.n	800fb46 <_printf_i+0xba>
 800fb4e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fb52:	2e00      	cmp	r6, #0
 800fb54:	da03      	bge.n	800fb5e <_printf_i+0xd2>
 800fb56:	232d      	movs	r3, #45	; 0x2d
 800fb58:	4276      	negs	r6, r6
 800fb5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb5e:	485a      	ldr	r0, [pc, #360]	; (800fcc8 <_printf_i+0x23c>)
 800fb60:	230a      	movs	r3, #10
 800fb62:	e012      	b.n	800fb8a <_printf_i+0xfe>
 800fb64:	682b      	ldr	r3, [r5, #0]
 800fb66:	6820      	ldr	r0, [r4, #0]
 800fb68:	1d19      	adds	r1, r3, #4
 800fb6a:	6029      	str	r1, [r5, #0]
 800fb6c:	0605      	lsls	r5, r0, #24
 800fb6e:	d501      	bpl.n	800fb74 <_printf_i+0xe8>
 800fb70:	681e      	ldr	r6, [r3, #0]
 800fb72:	e002      	b.n	800fb7a <_printf_i+0xee>
 800fb74:	0641      	lsls	r1, r0, #25
 800fb76:	d5fb      	bpl.n	800fb70 <_printf_i+0xe4>
 800fb78:	881e      	ldrh	r6, [r3, #0]
 800fb7a:	4853      	ldr	r0, [pc, #332]	; (800fcc8 <_printf_i+0x23c>)
 800fb7c:	2f6f      	cmp	r7, #111	; 0x6f
 800fb7e:	bf0c      	ite	eq
 800fb80:	2308      	moveq	r3, #8
 800fb82:	230a      	movne	r3, #10
 800fb84:	2100      	movs	r1, #0
 800fb86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb8a:	6865      	ldr	r5, [r4, #4]
 800fb8c:	60a5      	str	r5, [r4, #8]
 800fb8e:	2d00      	cmp	r5, #0
 800fb90:	bfa2      	ittt	ge
 800fb92:	6821      	ldrge	r1, [r4, #0]
 800fb94:	f021 0104 	bicge.w	r1, r1, #4
 800fb98:	6021      	strge	r1, [r4, #0]
 800fb9a:	b90e      	cbnz	r6, 800fba0 <_printf_i+0x114>
 800fb9c:	2d00      	cmp	r5, #0
 800fb9e:	d04b      	beq.n	800fc38 <_printf_i+0x1ac>
 800fba0:	4615      	mov	r5, r2
 800fba2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fba6:	fb03 6711 	mls	r7, r3, r1, r6
 800fbaa:	5dc7      	ldrb	r7, [r0, r7]
 800fbac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbb0:	4637      	mov	r7, r6
 800fbb2:	42bb      	cmp	r3, r7
 800fbb4:	460e      	mov	r6, r1
 800fbb6:	d9f4      	bls.n	800fba2 <_printf_i+0x116>
 800fbb8:	2b08      	cmp	r3, #8
 800fbba:	d10b      	bne.n	800fbd4 <_printf_i+0x148>
 800fbbc:	6823      	ldr	r3, [r4, #0]
 800fbbe:	07de      	lsls	r6, r3, #31
 800fbc0:	d508      	bpl.n	800fbd4 <_printf_i+0x148>
 800fbc2:	6923      	ldr	r3, [r4, #16]
 800fbc4:	6861      	ldr	r1, [r4, #4]
 800fbc6:	4299      	cmp	r1, r3
 800fbc8:	bfde      	ittt	le
 800fbca:	2330      	movle	r3, #48	; 0x30
 800fbcc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbd0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fbd4:	1b52      	subs	r2, r2, r5
 800fbd6:	6122      	str	r2, [r4, #16]
 800fbd8:	f8cd a000 	str.w	sl, [sp]
 800fbdc:	464b      	mov	r3, r9
 800fbde:	aa03      	add	r2, sp, #12
 800fbe0:	4621      	mov	r1, r4
 800fbe2:	4640      	mov	r0, r8
 800fbe4:	f7ff fee4 	bl	800f9b0 <_printf_common>
 800fbe8:	3001      	adds	r0, #1
 800fbea:	d14a      	bne.n	800fc82 <_printf_i+0x1f6>
 800fbec:	f04f 30ff 	mov.w	r0, #4294967295
 800fbf0:	b004      	add	sp, #16
 800fbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	f043 0320 	orr.w	r3, r3, #32
 800fbfc:	6023      	str	r3, [r4, #0]
 800fbfe:	4833      	ldr	r0, [pc, #204]	; (800fccc <_printf_i+0x240>)
 800fc00:	2778      	movs	r7, #120	; 0x78
 800fc02:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fc06:	6823      	ldr	r3, [r4, #0]
 800fc08:	6829      	ldr	r1, [r5, #0]
 800fc0a:	061f      	lsls	r7, r3, #24
 800fc0c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc10:	d402      	bmi.n	800fc18 <_printf_i+0x18c>
 800fc12:	065f      	lsls	r7, r3, #25
 800fc14:	bf48      	it	mi
 800fc16:	b2b6      	uxthmi	r6, r6
 800fc18:	07df      	lsls	r7, r3, #31
 800fc1a:	bf48      	it	mi
 800fc1c:	f043 0320 	orrmi.w	r3, r3, #32
 800fc20:	6029      	str	r1, [r5, #0]
 800fc22:	bf48      	it	mi
 800fc24:	6023      	strmi	r3, [r4, #0]
 800fc26:	b91e      	cbnz	r6, 800fc30 <_printf_i+0x1a4>
 800fc28:	6823      	ldr	r3, [r4, #0]
 800fc2a:	f023 0320 	bic.w	r3, r3, #32
 800fc2e:	6023      	str	r3, [r4, #0]
 800fc30:	2310      	movs	r3, #16
 800fc32:	e7a7      	b.n	800fb84 <_printf_i+0xf8>
 800fc34:	4824      	ldr	r0, [pc, #144]	; (800fcc8 <_printf_i+0x23c>)
 800fc36:	e7e4      	b.n	800fc02 <_printf_i+0x176>
 800fc38:	4615      	mov	r5, r2
 800fc3a:	e7bd      	b.n	800fbb8 <_printf_i+0x12c>
 800fc3c:	682b      	ldr	r3, [r5, #0]
 800fc3e:	6826      	ldr	r6, [r4, #0]
 800fc40:	6961      	ldr	r1, [r4, #20]
 800fc42:	1d18      	adds	r0, r3, #4
 800fc44:	6028      	str	r0, [r5, #0]
 800fc46:	0635      	lsls	r5, r6, #24
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	d501      	bpl.n	800fc50 <_printf_i+0x1c4>
 800fc4c:	6019      	str	r1, [r3, #0]
 800fc4e:	e002      	b.n	800fc56 <_printf_i+0x1ca>
 800fc50:	0670      	lsls	r0, r6, #25
 800fc52:	d5fb      	bpl.n	800fc4c <_printf_i+0x1c0>
 800fc54:	8019      	strh	r1, [r3, #0]
 800fc56:	2300      	movs	r3, #0
 800fc58:	6123      	str	r3, [r4, #16]
 800fc5a:	4615      	mov	r5, r2
 800fc5c:	e7bc      	b.n	800fbd8 <_printf_i+0x14c>
 800fc5e:	682b      	ldr	r3, [r5, #0]
 800fc60:	1d1a      	adds	r2, r3, #4
 800fc62:	602a      	str	r2, [r5, #0]
 800fc64:	681d      	ldr	r5, [r3, #0]
 800fc66:	6862      	ldr	r2, [r4, #4]
 800fc68:	2100      	movs	r1, #0
 800fc6a:	4628      	mov	r0, r5
 800fc6c:	f7f0 fac0 	bl	80001f0 <memchr>
 800fc70:	b108      	cbz	r0, 800fc76 <_printf_i+0x1ea>
 800fc72:	1b40      	subs	r0, r0, r5
 800fc74:	6060      	str	r0, [r4, #4]
 800fc76:	6863      	ldr	r3, [r4, #4]
 800fc78:	6123      	str	r3, [r4, #16]
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc80:	e7aa      	b.n	800fbd8 <_printf_i+0x14c>
 800fc82:	6923      	ldr	r3, [r4, #16]
 800fc84:	462a      	mov	r2, r5
 800fc86:	4649      	mov	r1, r9
 800fc88:	4640      	mov	r0, r8
 800fc8a:	47d0      	blx	sl
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	d0ad      	beq.n	800fbec <_printf_i+0x160>
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	079b      	lsls	r3, r3, #30
 800fc94:	d413      	bmi.n	800fcbe <_printf_i+0x232>
 800fc96:	68e0      	ldr	r0, [r4, #12]
 800fc98:	9b03      	ldr	r3, [sp, #12]
 800fc9a:	4298      	cmp	r0, r3
 800fc9c:	bfb8      	it	lt
 800fc9e:	4618      	movlt	r0, r3
 800fca0:	e7a6      	b.n	800fbf0 <_printf_i+0x164>
 800fca2:	2301      	movs	r3, #1
 800fca4:	4632      	mov	r2, r6
 800fca6:	4649      	mov	r1, r9
 800fca8:	4640      	mov	r0, r8
 800fcaa:	47d0      	blx	sl
 800fcac:	3001      	adds	r0, #1
 800fcae:	d09d      	beq.n	800fbec <_printf_i+0x160>
 800fcb0:	3501      	adds	r5, #1
 800fcb2:	68e3      	ldr	r3, [r4, #12]
 800fcb4:	9903      	ldr	r1, [sp, #12]
 800fcb6:	1a5b      	subs	r3, r3, r1
 800fcb8:	42ab      	cmp	r3, r5
 800fcba:	dcf2      	bgt.n	800fca2 <_printf_i+0x216>
 800fcbc:	e7eb      	b.n	800fc96 <_printf_i+0x20a>
 800fcbe:	2500      	movs	r5, #0
 800fcc0:	f104 0619 	add.w	r6, r4, #25
 800fcc4:	e7f5      	b.n	800fcb2 <_printf_i+0x226>
 800fcc6:	bf00      	nop
 800fcc8:	08012d7e 	.word	0x08012d7e
 800fccc:	08012d8f 	.word	0x08012d8f

0800fcd0 <__sflush_r>:
 800fcd0:	898a      	ldrh	r2, [r1, #12]
 800fcd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcd6:	4605      	mov	r5, r0
 800fcd8:	0710      	lsls	r0, r2, #28
 800fcda:	460c      	mov	r4, r1
 800fcdc:	d458      	bmi.n	800fd90 <__sflush_r+0xc0>
 800fcde:	684b      	ldr	r3, [r1, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	dc05      	bgt.n	800fcf0 <__sflush_r+0x20>
 800fce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	dc02      	bgt.n	800fcf0 <__sflush_r+0x20>
 800fcea:	2000      	movs	r0, #0
 800fcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcf2:	2e00      	cmp	r6, #0
 800fcf4:	d0f9      	beq.n	800fcea <__sflush_r+0x1a>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fcfc:	682f      	ldr	r7, [r5, #0]
 800fcfe:	6a21      	ldr	r1, [r4, #32]
 800fd00:	602b      	str	r3, [r5, #0]
 800fd02:	d032      	beq.n	800fd6a <__sflush_r+0x9a>
 800fd04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fd06:	89a3      	ldrh	r3, [r4, #12]
 800fd08:	075a      	lsls	r2, r3, #29
 800fd0a:	d505      	bpl.n	800fd18 <__sflush_r+0x48>
 800fd0c:	6863      	ldr	r3, [r4, #4]
 800fd0e:	1ac0      	subs	r0, r0, r3
 800fd10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fd12:	b10b      	cbz	r3, 800fd18 <__sflush_r+0x48>
 800fd14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fd16:	1ac0      	subs	r0, r0, r3
 800fd18:	2300      	movs	r3, #0
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fd1e:	6a21      	ldr	r1, [r4, #32]
 800fd20:	4628      	mov	r0, r5
 800fd22:	47b0      	blx	r6
 800fd24:	1c43      	adds	r3, r0, #1
 800fd26:	89a3      	ldrh	r3, [r4, #12]
 800fd28:	d106      	bne.n	800fd38 <__sflush_r+0x68>
 800fd2a:	6829      	ldr	r1, [r5, #0]
 800fd2c:	291d      	cmp	r1, #29
 800fd2e:	d82b      	bhi.n	800fd88 <__sflush_r+0xb8>
 800fd30:	4a29      	ldr	r2, [pc, #164]	; (800fdd8 <__sflush_r+0x108>)
 800fd32:	410a      	asrs	r2, r1
 800fd34:	07d6      	lsls	r6, r2, #31
 800fd36:	d427      	bmi.n	800fd88 <__sflush_r+0xb8>
 800fd38:	2200      	movs	r2, #0
 800fd3a:	6062      	str	r2, [r4, #4]
 800fd3c:	04d9      	lsls	r1, r3, #19
 800fd3e:	6922      	ldr	r2, [r4, #16]
 800fd40:	6022      	str	r2, [r4, #0]
 800fd42:	d504      	bpl.n	800fd4e <__sflush_r+0x7e>
 800fd44:	1c42      	adds	r2, r0, #1
 800fd46:	d101      	bne.n	800fd4c <__sflush_r+0x7c>
 800fd48:	682b      	ldr	r3, [r5, #0]
 800fd4a:	b903      	cbnz	r3, 800fd4e <__sflush_r+0x7e>
 800fd4c:	6560      	str	r0, [r4, #84]	; 0x54
 800fd4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd50:	602f      	str	r7, [r5, #0]
 800fd52:	2900      	cmp	r1, #0
 800fd54:	d0c9      	beq.n	800fcea <__sflush_r+0x1a>
 800fd56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd5a:	4299      	cmp	r1, r3
 800fd5c:	d002      	beq.n	800fd64 <__sflush_r+0x94>
 800fd5e:	4628      	mov	r0, r5
 800fd60:	f7ff fa8a 	bl	800f278 <_free_r>
 800fd64:	2000      	movs	r0, #0
 800fd66:	6360      	str	r0, [r4, #52]	; 0x34
 800fd68:	e7c0      	b.n	800fcec <__sflush_r+0x1c>
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	47b0      	blx	r6
 800fd70:	1c41      	adds	r1, r0, #1
 800fd72:	d1c8      	bne.n	800fd06 <__sflush_r+0x36>
 800fd74:	682b      	ldr	r3, [r5, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d0c5      	beq.n	800fd06 <__sflush_r+0x36>
 800fd7a:	2b1d      	cmp	r3, #29
 800fd7c:	d001      	beq.n	800fd82 <__sflush_r+0xb2>
 800fd7e:	2b16      	cmp	r3, #22
 800fd80:	d101      	bne.n	800fd86 <__sflush_r+0xb6>
 800fd82:	602f      	str	r7, [r5, #0]
 800fd84:	e7b1      	b.n	800fcea <__sflush_r+0x1a>
 800fd86:	89a3      	ldrh	r3, [r4, #12]
 800fd88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd8c:	81a3      	strh	r3, [r4, #12]
 800fd8e:	e7ad      	b.n	800fcec <__sflush_r+0x1c>
 800fd90:	690f      	ldr	r7, [r1, #16]
 800fd92:	2f00      	cmp	r7, #0
 800fd94:	d0a9      	beq.n	800fcea <__sflush_r+0x1a>
 800fd96:	0793      	lsls	r3, r2, #30
 800fd98:	680e      	ldr	r6, [r1, #0]
 800fd9a:	bf08      	it	eq
 800fd9c:	694b      	ldreq	r3, [r1, #20]
 800fd9e:	600f      	str	r7, [r1, #0]
 800fda0:	bf18      	it	ne
 800fda2:	2300      	movne	r3, #0
 800fda4:	eba6 0807 	sub.w	r8, r6, r7
 800fda8:	608b      	str	r3, [r1, #8]
 800fdaa:	f1b8 0f00 	cmp.w	r8, #0
 800fdae:	dd9c      	ble.n	800fcea <__sflush_r+0x1a>
 800fdb0:	6a21      	ldr	r1, [r4, #32]
 800fdb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fdb4:	4643      	mov	r3, r8
 800fdb6:	463a      	mov	r2, r7
 800fdb8:	4628      	mov	r0, r5
 800fdba:	47b0      	blx	r6
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	dc06      	bgt.n	800fdce <__sflush_r+0xfe>
 800fdc0:	89a3      	ldrh	r3, [r4, #12]
 800fdc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdc6:	81a3      	strh	r3, [r4, #12]
 800fdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdcc:	e78e      	b.n	800fcec <__sflush_r+0x1c>
 800fdce:	4407      	add	r7, r0
 800fdd0:	eba8 0800 	sub.w	r8, r8, r0
 800fdd4:	e7e9      	b.n	800fdaa <__sflush_r+0xda>
 800fdd6:	bf00      	nop
 800fdd8:	dfbffffe 	.word	0xdfbffffe

0800fddc <_fflush_r>:
 800fddc:	b538      	push	{r3, r4, r5, lr}
 800fdde:	690b      	ldr	r3, [r1, #16]
 800fde0:	4605      	mov	r5, r0
 800fde2:	460c      	mov	r4, r1
 800fde4:	b913      	cbnz	r3, 800fdec <_fflush_r+0x10>
 800fde6:	2500      	movs	r5, #0
 800fde8:	4628      	mov	r0, r5
 800fdea:	bd38      	pop	{r3, r4, r5, pc}
 800fdec:	b118      	cbz	r0, 800fdf6 <_fflush_r+0x1a>
 800fdee:	6a03      	ldr	r3, [r0, #32]
 800fdf0:	b90b      	cbnz	r3, 800fdf6 <_fflush_r+0x1a>
 800fdf2:	f7ff f8c9 	bl	800ef88 <__sinit>
 800fdf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d0f3      	beq.n	800fde6 <_fflush_r+0xa>
 800fdfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fe00:	07d0      	lsls	r0, r2, #31
 800fe02:	d404      	bmi.n	800fe0e <_fflush_r+0x32>
 800fe04:	0599      	lsls	r1, r3, #22
 800fe06:	d402      	bmi.n	800fe0e <_fflush_r+0x32>
 800fe08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe0a:	f7ff fa06 	bl	800f21a <__retarget_lock_acquire_recursive>
 800fe0e:	4628      	mov	r0, r5
 800fe10:	4621      	mov	r1, r4
 800fe12:	f7ff ff5d 	bl	800fcd0 <__sflush_r>
 800fe16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fe18:	07da      	lsls	r2, r3, #31
 800fe1a:	4605      	mov	r5, r0
 800fe1c:	d4e4      	bmi.n	800fde8 <_fflush_r+0xc>
 800fe1e:	89a3      	ldrh	r3, [r4, #12]
 800fe20:	059b      	lsls	r3, r3, #22
 800fe22:	d4e1      	bmi.n	800fde8 <_fflush_r+0xc>
 800fe24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fe26:	f7ff f9f9 	bl	800f21c <__retarget_lock_release_recursive>
 800fe2a:	e7dd      	b.n	800fde8 <_fflush_r+0xc>

0800fe2c <fiprintf>:
 800fe2c:	b40e      	push	{r1, r2, r3}
 800fe2e:	b503      	push	{r0, r1, lr}
 800fe30:	4601      	mov	r1, r0
 800fe32:	ab03      	add	r3, sp, #12
 800fe34:	4805      	ldr	r0, [pc, #20]	; (800fe4c <fiprintf+0x20>)
 800fe36:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe3a:	6800      	ldr	r0, [r0, #0]
 800fe3c:	9301      	str	r3, [sp, #4]
 800fe3e:	f7ff fc9d 	bl	800f77c <_vfiprintf_r>
 800fe42:	b002      	add	sp, #8
 800fe44:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe48:	b003      	add	sp, #12
 800fe4a:	4770      	bx	lr
 800fe4c:	20000084 	.word	0x20000084

0800fe50 <__swbuf_r>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	460e      	mov	r6, r1
 800fe54:	4614      	mov	r4, r2
 800fe56:	4605      	mov	r5, r0
 800fe58:	b118      	cbz	r0, 800fe62 <__swbuf_r+0x12>
 800fe5a:	6a03      	ldr	r3, [r0, #32]
 800fe5c:	b90b      	cbnz	r3, 800fe62 <__swbuf_r+0x12>
 800fe5e:	f7ff f893 	bl	800ef88 <__sinit>
 800fe62:	69a3      	ldr	r3, [r4, #24]
 800fe64:	60a3      	str	r3, [r4, #8]
 800fe66:	89a3      	ldrh	r3, [r4, #12]
 800fe68:	071a      	lsls	r2, r3, #28
 800fe6a:	d525      	bpl.n	800feb8 <__swbuf_r+0x68>
 800fe6c:	6923      	ldr	r3, [r4, #16]
 800fe6e:	b31b      	cbz	r3, 800feb8 <__swbuf_r+0x68>
 800fe70:	6823      	ldr	r3, [r4, #0]
 800fe72:	6922      	ldr	r2, [r4, #16]
 800fe74:	1a98      	subs	r0, r3, r2
 800fe76:	6963      	ldr	r3, [r4, #20]
 800fe78:	b2f6      	uxtb	r6, r6
 800fe7a:	4283      	cmp	r3, r0
 800fe7c:	4637      	mov	r7, r6
 800fe7e:	dc04      	bgt.n	800fe8a <__swbuf_r+0x3a>
 800fe80:	4621      	mov	r1, r4
 800fe82:	4628      	mov	r0, r5
 800fe84:	f7ff ffaa 	bl	800fddc <_fflush_r>
 800fe88:	b9e0      	cbnz	r0, 800fec4 <__swbuf_r+0x74>
 800fe8a:	68a3      	ldr	r3, [r4, #8]
 800fe8c:	3b01      	subs	r3, #1
 800fe8e:	60a3      	str	r3, [r4, #8]
 800fe90:	6823      	ldr	r3, [r4, #0]
 800fe92:	1c5a      	adds	r2, r3, #1
 800fe94:	6022      	str	r2, [r4, #0]
 800fe96:	701e      	strb	r6, [r3, #0]
 800fe98:	6962      	ldr	r2, [r4, #20]
 800fe9a:	1c43      	adds	r3, r0, #1
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d004      	beq.n	800feaa <__swbuf_r+0x5a>
 800fea0:	89a3      	ldrh	r3, [r4, #12]
 800fea2:	07db      	lsls	r3, r3, #31
 800fea4:	d506      	bpl.n	800feb4 <__swbuf_r+0x64>
 800fea6:	2e0a      	cmp	r6, #10
 800fea8:	d104      	bne.n	800feb4 <__swbuf_r+0x64>
 800feaa:	4621      	mov	r1, r4
 800feac:	4628      	mov	r0, r5
 800feae:	f7ff ff95 	bl	800fddc <_fflush_r>
 800feb2:	b938      	cbnz	r0, 800fec4 <__swbuf_r+0x74>
 800feb4:	4638      	mov	r0, r7
 800feb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feb8:	4621      	mov	r1, r4
 800feba:	4628      	mov	r0, r5
 800febc:	f000 f806 	bl	800fecc <__swsetup_r>
 800fec0:	2800      	cmp	r0, #0
 800fec2:	d0d5      	beq.n	800fe70 <__swbuf_r+0x20>
 800fec4:	f04f 37ff 	mov.w	r7, #4294967295
 800fec8:	e7f4      	b.n	800feb4 <__swbuf_r+0x64>
	...

0800fecc <__swsetup_r>:
 800fecc:	b538      	push	{r3, r4, r5, lr}
 800fece:	4b2a      	ldr	r3, [pc, #168]	; (800ff78 <__swsetup_r+0xac>)
 800fed0:	4605      	mov	r5, r0
 800fed2:	6818      	ldr	r0, [r3, #0]
 800fed4:	460c      	mov	r4, r1
 800fed6:	b118      	cbz	r0, 800fee0 <__swsetup_r+0x14>
 800fed8:	6a03      	ldr	r3, [r0, #32]
 800feda:	b90b      	cbnz	r3, 800fee0 <__swsetup_r+0x14>
 800fedc:	f7ff f854 	bl	800ef88 <__sinit>
 800fee0:	89a3      	ldrh	r3, [r4, #12]
 800fee2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fee6:	0718      	lsls	r0, r3, #28
 800fee8:	d422      	bmi.n	800ff30 <__swsetup_r+0x64>
 800feea:	06d9      	lsls	r1, r3, #27
 800feec:	d407      	bmi.n	800fefe <__swsetup_r+0x32>
 800feee:	2309      	movs	r3, #9
 800fef0:	602b      	str	r3, [r5, #0]
 800fef2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fef6:	81a3      	strh	r3, [r4, #12]
 800fef8:	f04f 30ff 	mov.w	r0, #4294967295
 800fefc:	e034      	b.n	800ff68 <__swsetup_r+0x9c>
 800fefe:	0758      	lsls	r0, r3, #29
 800ff00:	d512      	bpl.n	800ff28 <__swsetup_r+0x5c>
 800ff02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff04:	b141      	cbz	r1, 800ff18 <__swsetup_r+0x4c>
 800ff06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ff0a:	4299      	cmp	r1, r3
 800ff0c:	d002      	beq.n	800ff14 <__swsetup_r+0x48>
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f7ff f9b2 	bl	800f278 <_free_r>
 800ff14:	2300      	movs	r3, #0
 800ff16:	6363      	str	r3, [r4, #52]	; 0x34
 800ff18:	89a3      	ldrh	r3, [r4, #12]
 800ff1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ff1e:	81a3      	strh	r3, [r4, #12]
 800ff20:	2300      	movs	r3, #0
 800ff22:	6063      	str	r3, [r4, #4]
 800ff24:	6923      	ldr	r3, [r4, #16]
 800ff26:	6023      	str	r3, [r4, #0]
 800ff28:	89a3      	ldrh	r3, [r4, #12]
 800ff2a:	f043 0308 	orr.w	r3, r3, #8
 800ff2e:	81a3      	strh	r3, [r4, #12]
 800ff30:	6923      	ldr	r3, [r4, #16]
 800ff32:	b94b      	cbnz	r3, 800ff48 <__swsetup_r+0x7c>
 800ff34:	89a3      	ldrh	r3, [r4, #12]
 800ff36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff3e:	d003      	beq.n	800ff48 <__swsetup_r+0x7c>
 800ff40:	4621      	mov	r1, r4
 800ff42:	4628      	mov	r0, r5
 800ff44:	f000 f886 	bl	8010054 <__smakebuf_r>
 800ff48:	89a0      	ldrh	r0, [r4, #12]
 800ff4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff4e:	f010 0301 	ands.w	r3, r0, #1
 800ff52:	d00a      	beq.n	800ff6a <__swsetup_r+0x9e>
 800ff54:	2300      	movs	r3, #0
 800ff56:	60a3      	str	r3, [r4, #8]
 800ff58:	6963      	ldr	r3, [r4, #20]
 800ff5a:	425b      	negs	r3, r3
 800ff5c:	61a3      	str	r3, [r4, #24]
 800ff5e:	6923      	ldr	r3, [r4, #16]
 800ff60:	b943      	cbnz	r3, 800ff74 <__swsetup_r+0xa8>
 800ff62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff66:	d1c4      	bne.n	800fef2 <__swsetup_r+0x26>
 800ff68:	bd38      	pop	{r3, r4, r5, pc}
 800ff6a:	0781      	lsls	r1, r0, #30
 800ff6c:	bf58      	it	pl
 800ff6e:	6963      	ldrpl	r3, [r4, #20]
 800ff70:	60a3      	str	r3, [r4, #8]
 800ff72:	e7f4      	b.n	800ff5e <__swsetup_r+0x92>
 800ff74:	2000      	movs	r0, #0
 800ff76:	e7f7      	b.n	800ff68 <__swsetup_r+0x9c>
 800ff78:	20000084 	.word	0x20000084

0800ff7c <_sbrk_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4d06      	ldr	r5, [pc, #24]	; (800ff98 <_sbrk_r+0x1c>)
 800ff80:	2300      	movs	r3, #0
 800ff82:	4604      	mov	r4, r0
 800ff84:	4608      	mov	r0, r1
 800ff86:	602b      	str	r3, [r5, #0]
 800ff88:	f7f0 fe3e 	bl	8000c08 <_sbrk>
 800ff8c:	1c43      	adds	r3, r0, #1
 800ff8e:	d102      	bne.n	800ff96 <_sbrk_r+0x1a>
 800ff90:	682b      	ldr	r3, [r5, #0]
 800ff92:	b103      	cbz	r3, 800ff96 <_sbrk_r+0x1a>
 800ff94:	6023      	str	r3, [r4, #0]
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
 800ff98:	20008a14 	.word	0x20008a14

0800ff9c <abort>:
 800ff9c:	b508      	push	{r3, lr}
 800ff9e:	2006      	movs	r0, #6
 800ffa0:	f000 f8bc 	bl	801011c <raise>
 800ffa4:	2001      	movs	r0, #1
 800ffa6:	f7f0 fdb7 	bl	8000b18 <_exit>

0800ffaa <_realloc_r>:
 800ffaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffae:	4680      	mov	r8, r0
 800ffb0:	4614      	mov	r4, r2
 800ffb2:	460e      	mov	r6, r1
 800ffb4:	b921      	cbnz	r1, 800ffc0 <_realloc_r+0x16>
 800ffb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffba:	4611      	mov	r1, r2
 800ffbc:	f7ff b9d0 	b.w	800f360 <_malloc_r>
 800ffc0:	b92a      	cbnz	r2, 800ffce <_realloc_r+0x24>
 800ffc2:	f7ff f959 	bl	800f278 <_free_r>
 800ffc6:	4625      	mov	r5, r4
 800ffc8:	4628      	mov	r0, r5
 800ffca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffce:	f000 f8e3 	bl	8010198 <_malloc_usable_size_r>
 800ffd2:	4284      	cmp	r4, r0
 800ffd4:	4607      	mov	r7, r0
 800ffd6:	d802      	bhi.n	800ffde <_realloc_r+0x34>
 800ffd8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ffdc:	d812      	bhi.n	8010004 <_realloc_r+0x5a>
 800ffde:	4621      	mov	r1, r4
 800ffe0:	4640      	mov	r0, r8
 800ffe2:	f7ff f9bd 	bl	800f360 <_malloc_r>
 800ffe6:	4605      	mov	r5, r0
 800ffe8:	2800      	cmp	r0, #0
 800ffea:	d0ed      	beq.n	800ffc8 <_realloc_r+0x1e>
 800ffec:	42bc      	cmp	r4, r7
 800ffee:	4622      	mov	r2, r4
 800fff0:	4631      	mov	r1, r6
 800fff2:	bf28      	it	cs
 800fff4:	463a      	movcs	r2, r7
 800fff6:	f7ff f912 	bl	800f21e <memcpy>
 800fffa:	4631      	mov	r1, r6
 800fffc:	4640      	mov	r0, r8
 800fffe:	f7ff f93b 	bl	800f278 <_free_r>
 8010002:	e7e1      	b.n	800ffc8 <_realloc_r+0x1e>
 8010004:	4635      	mov	r5, r6
 8010006:	e7df      	b.n	800ffc8 <_realloc_r+0x1e>

08010008 <__swhatbuf_r>:
 8010008:	b570      	push	{r4, r5, r6, lr}
 801000a:	460c      	mov	r4, r1
 801000c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010010:	2900      	cmp	r1, #0
 8010012:	b096      	sub	sp, #88	; 0x58
 8010014:	4615      	mov	r5, r2
 8010016:	461e      	mov	r6, r3
 8010018:	da0d      	bge.n	8010036 <__swhatbuf_r+0x2e>
 801001a:	89a3      	ldrh	r3, [r4, #12]
 801001c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010020:	f04f 0100 	mov.w	r1, #0
 8010024:	bf0c      	ite	eq
 8010026:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801002a:	2340      	movne	r3, #64	; 0x40
 801002c:	2000      	movs	r0, #0
 801002e:	6031      	str	r1, [r6, #0]
 8010030:	602b      	str	r3, [r5, #0]
 8010032:	b016      	add	sp, #88	; 0x58
 8010034:	bd70      	pop	{r4, r5, r6, pc}
 8010036:	466a      	mov	r2, sp
 8010038:	f000 f878 	bl	801012c <_fstat_r>
 801003c:	2800      	cmp	r0, #0
 801003e:	dbec      	blt.n	801001a <__swhatbuf_r+0x12>
 8010040:	9901      	ldr	r1, [sp, #4]
 8010042:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010046:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801004a:	4259      	negs	r1, r3
 801004c:	4159      	adcs	r1, r3
 801004e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010052:	e7eb      	b.n	801002c <__swhatbuf_r+0x24>

08010054 <__smakebuf_r>:
 8010054:	898b      	ldrh	r3, [r1, #12]
 8010056:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010058:	079d      	lsls	r5, r3, #30
 801005a:	4606      	mov	r6, r0
 801005c:	460c      	mov	r4, r1
 801005e:	d507      	bpl.n	8010070 <__smakebuf_r+0x1c>
 8010060:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010064:	6023      	str	r3, [r4, #0]
 8010066:	6123      	str	r3, [r4, #16]
 8010068:	2301      	movs	r3, #1
 801006a:	6163      	str	r3, [r4, #20]
 801006c:	b002      	add	sp, #8
 801006e:	bd70      	pop	{r4, r5, r6, pc}
 8010070:	ab01      	add	r3, sp, #4
 8010072:	466a      	mov	r2, sp
 8010074:	f7ff ffc8 	bl	8010008 <__swhatbuf_r>
 8010078:	9900      	ldr	r1, [sp, #0]
 801007a:	4605      	mov	r5, r0
 801007c:	4630      	mov	r0, r6
 801007e:	f7ff f96f 	bl	800f360 <_malloc_r>
 8010082:	b948      	cbnz	r0, 8010098 <__smakebuf_r+0x44>
 8010084:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010088:	059a      	lsls	r2, r3, #22
 801008a:	d4ef      	bmi.n	801006c <__smakebuf_r+0x18>
 801008c:	f023 0303 	bic.w	r3, r3, #3
 8010090:	f043 0302 	orr.w	r3, r3, #2
 8010094:	81a3      	strh	r3, [r4, #12]
 8010096:	e7e3      	b.n	8010060 <__smakebuf_r+0xc>
 8010098:	89a3      	ldrh	r3, [r4, #12]
 801009a:	6020      	str	r0, [r4, #0]
 801009c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100a0:	81a3      	strh	r3, [r4, #12]
 80100a2:	9b00      	ldr	r3, [sp, #0]
 80100a4:	6163      	str	r3, [r4, #20]
 80100a6:	9b01      	ldr	r3, [sp, #4]
 80100a8:	6120      	str	r0, [r4, #16]
 80100aa:	b15b      	cbz	r3, 80100c4 <__smakebuf_r+0x70>
 80100ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80100b0:	4630      	mov	r0, r6
 80100b2:	f000 f84d 	bl	8010150 <_isatty_r>
 80100b6:	b128      	cbz	r0, 80100c4 <__smakebuf_r+0x70>
 80100b8:	89a3      	ldrh	r3, [r4, #12]
 80100ba:	f023 0303 	bic.w	r3, r3, #3
 80100be:	f043 0301 	orr.w	r3, r3, #1
 80100c2:	81a3      	strh	r3, [r4, #12]
 80100c4:	89a3      	ldrh	r3, [r4, #12]
 80100c6:	431d      	orrs	r5, r3
 80100c8:	81a5      	strh	r5, [r4, #12]
 80100ca:	e7cf      	b.n	801006c <__smakebuf_r+0x18>

080100cc <_raise_r>:
 80100cc:	291f      	cmp	r1, #31
 80100ce:	b538      	push	{r3, r4, r5, lr}
 80100d0:	4604      	mov	r4, r0
 80100d2:	460d      	mov	r5, r1
 80100d4:	d904      	bls.n	80100e0 <_raise_r+0x14>
 80100d6:	2316      	movs	r3, #22
 80100d8:	6003      	str	r3, [r0, #0]
 80100da:	f04f 30ff 	mov.w	r0, #4294967295
 80100de:	bd38      	pop	{r3, r4, r5, pc}
 80100e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80100e2:	b112      	cbz	r2, 80100ea <_raise_r+0x1e>
 80100e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80100e8:	b94b      	cbnz	r3, 80100fe <_raise_r+0x32>
 80100ea:	4620      	mov	r0, r4
 80100ec:	f000 f852 	bl	8010194 <_getpid_r>
 80100f0:	462a      	mov	r2, r5
 80100f2:	4601      	mov	r1, r0
 80100f4:	4620      	mov	r0, r4
 80100f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100fa:	f000 b839 	b.w	8010170 <_kill_r>
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d00a      	beq.n	8010118 <_raise_r+0x4c>
 8010102:	1c59      	adds	r1, r3, #1
 8010104:	d103      	bne.n	801010e <_raise_r+0x42>
 8010106:	2316      	movs	r3, #22
 8010108:	6003      	str	r3, [r0, #0]
 801010a:	2001      	movs	r0, #1
 801010c:	e7e7      	b.n	80100de <_raise_r+0x12>
 801010e:	2400      	movs	r4, #0
 8010110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010114:	4628      	mov	r0, r5
 8010116:	4798      	blx	r3
 8010118:	2000      	movs	r0, #0
 801011a:	e7e0      	b.n	80100de <_raise_r+0x12>

0801011c <raise>:
 801011c:	4b02      	ldr	r3, [pc, #8]	; (8010128 <raise+0xc>)
 801011e:	4601      	mov	r1, r0
 8010120:	6818      	ldr	r0, [r3, #0]
 8010122:	f7ff bfd3 	b.w	80100cc <_raise_r>
 8010126:	bf00      	nop
 8010128:	20000084 	.word	0x20000084

0801012c <_fstat_r>:
 801012c:	b538      	push	{r3, r4, r5, lr}
 801012e:	4d07      	ldr	r5, [pc, #28]	; (801014c <_fstat_r+0x20>)
 8010130:	2300      	movs	r3, #0
 8010132:	4604      	mov	r4, r0
 8010134:	4608      	mov	r0, r1
 8010136:	4611      	mov	r1, r2
 8010138:	602b      	str	r3, [r5, #0]
 801013a:	f7f0 fd3c 	bl	8000bb6 <_fstat>
 801013e:	1c43      	adds	r3, r0, #1
 8010140:	d102      	bne.n	8010148 <_fstat_r+0x1c>
 8010142:	682b      	ldr	r3, [r5, #0]
 8010144:	b103      	cbz	r3, 8010148 <_fstat_r+0x1c>
 8010146:	6023      	str	r3, [r4, #0]
 8010148:	bd38      	pop	{r3, r4, r5, pc}
 801014a:	bf00      	nop
 801014c:	20008a14 	.word	0x20008a14

08010150 <_isatty_r>:
 8010150:	b538      	push	{r3, r4, r5, lr}
 8010152:	4d06      	ldr	r5, [pc, #24]	; (801016c <_isatty_r+0x1c>)
 8010154:	2300      	movs	r3, #0
 8010156:	4604      	mov	r4, r0
 8010158:	4608      	mov	r0, r1
 801015a:	602b      	str	r3, [r5, #0]
 801015c:	f7f0 fd3b 	bl	8000bd6 <_isatty>
 8010160:	1c43      	adds	r3, r0, #1
 8010162:	d102      	bne.n	801016a <_isatty_r+0x1a>
 8010164:	682b      	ldr	r3, [r5, #0]
 8010166:	b103      	cbz	r3, 801016a <_isatty_r+0x1a>
 8010168:	6023      	str	r3, [r4, #0]
 801016a:	bd38      	pop	{r3, r4, r5, pc}
 801016c:	20008a14 	.word	0x20008a14

08010170 <_kill_r>:
 8010170:	b538      	push	{r3, r4, r5, lr}
 8010172:	4d07      	ldr	r5, [pc, #28]	; (8010190 <_kill_r+0x20>)
 8010174:	2300      	movs	r3, #0
 8010176:	4604      	mov	r4, r0
 8010178:	4608      	mov	r0, r1
 801017a:	4611      	mov	r1, r2
 801017c:	602b      	str	r3, [r5, #0]
 801017e:	f7f0 fcb9 	bl	8000af4 <_kill>
 8010182:	1c43      	adds	r3, r0, #1
 8010184:	d102      	bne.n	801018c <_kill_r+0x1c>
 8010186:	682b      	ldr	r3, [r5, #0]
 8010188:	b103      	cbz	r3, 801018c <_kill_r+0x1c>
 801018a:	6023      	str	r3, [r4, #0]
 801018c:	bd38      	pop	{r3, r4, r5, pc}
 801018e:	bf00      	nop
 8010190:	20008a14 	.word	0x20008a14

08010194 <_getpid_r>:
 8010194:	f7f0 bca6 	b.w	8000ae4 <_getpid>

08010198 <_malloc_usable_size_r>:
 8010198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801019c:	1f18      	subs	r0, r3, #4
 801019e:	2b00      	cmp	r3, #0
 80101a0:	bfbc      	itt	lt
 80101a2:	580b      	ldrlt	r3, [r1, r0]
 80101a4:	18c0      	addlt	r0, r0, r3
 80101a6:	4770      	bx	lr

080101a8 <_init>:
 80101a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101aa:	bf00      	nop
 80101ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ae:	bc08      	pop	{r3}
 80101b0:	469e      	mov	lr, r3
 80101b2:	4770      	bx	lr

080101b4 <_fini>:
 80101b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101b6:	bf00      	nop
 80101b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ba:	bc08      	pop	{r3}
 80101bc:	469e      	mov	lr, r3
 80101be:	4770      	bx	lr
