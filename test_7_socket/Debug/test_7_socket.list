
test_7_socket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1d8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  0800f388  0800f388  0001f388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f4c  08011f4c  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08011f4c  08011f4c  00021f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f54  08011f54  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f54  08011f54  00021f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f58  08011f58  00021f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08011f5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          0000898c  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008a14  20008a14  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001dd83  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000528a  00000000  00000000  0004de7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001680  00000000  00000000  00053108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011f4  00000000  00000000  00054788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fcfd  00000000  00000000  0005597c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002679f  00000000  00000000  00085679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed6aa  00000000  00000000  000abe18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006510  00000000  00000000  001994c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0019f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f370 	.word	0x0800f370

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800f370 	.word	0x0800f370

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fd0c 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f810 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8d0 	bl	800073c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800059c:	f000 f876 	bl	800068c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a0:	f000 f89e 	bl	80006e0 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005a4:	f003 fcb0 	bl	8003f08 <MX_LWIP_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	// ethernetif_input(&gnetif);
		// sys_check_timeouts();
  	MX_LWIP_Process();
 80005a8:	f003 fdee 	bl	8004188 <MX_LWIP_Process>
  	ethernetif_notify_conn_changed(&gnetif);
 80005ac:	4801      	ldr	r0, [pc, #4]	; (80005b4 <main+0x28>)
 80005ae:	f000 f973 	bl	8000898 <ethernetif_notify_conn_changed>
  	MX_LWIP_Process();
 80005b2:	e7f9      	b.n	80005a8 <main+0x1c>
 80005b4:	200005dc 	.word	0x200005dc

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00e f825 	bl	800e616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xd0>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000618:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800062c:	23a8      	movs	r3, #168	; 0xa8
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000634:	2307      	movs	r3, #7
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fa07 	bl	8002a50 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 f950 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2105      	movs	r1, #5
 800066a:	4618      	mov	r0, r3
 800066c:	f002 fc68 	bl	8002f40 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000676:	f000 f939 	bl	80008ec <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART3_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART3_UART_Init+0x4c>)
 80006c4:	f002 fe5c 	bl	8003380 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f90d 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200000a4 	.word	0x200000a4
 80006dc:	40004800 	.word	0x40004800

080006e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000700:	2202      	movs	r2, #2
 8000702:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000706:	2201      	movs	r2, #1
 8000708:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000718:	2201      	movs	r2, #1
 800071a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000724:	f002 f885 	bl	8002832 <HAL_PCD_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 f8dd 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000ec 	.word	0x200000ec

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4b4c      	ldr	r3, [pc, #304]	; (8000888 <MX_GPIO_Init+0x14c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a4b      	ldr	r2, [pc, #300]	; (8000888 <MX_GPIO_Init+0x14c>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b49      	ldr	r3, [pc, #292]	; (8000888 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b45      	ldr	r3, [pc, #276]	; (8000888 <MX_GPIO_Init+0x14c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a44      	ldr	r2, [pc, #272]	; (8000888 <MX_GPIO_Init+0x14c>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b42      	ldr	r3, [pc, #264]	; (8000888 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b3e      	ldr	r3, [pc, #248]	; (8000888 <MX_GPIO_Init+0x14c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a3d      	ldr	r2, [pc, #244]	; (8000888 <MX_GPIO_Init+0x14c>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b3b      	ldr	r3, [pc, #236]	; (8000888 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b37      	ldr	r3, [pc, #220]	; (8000888 <MX_GPIO_Init+0x14c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a36      	ldr	r2, [pc, #216]	; (8000888 <MX_GPIO_Init+0x14c>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b34      	ldr	r3, [pc, #208]	; (8000888 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b30      	ldr	r3, [pc, #192]	; (8000888 <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2f      	ldr	r2, [pc, #188]	; (8000888 <MX_GPIO_Init+0x14c>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a28      	ldr	r2, [pc, #160]	; (8000888 <MX_GPIO_Init+0x14c>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000800:	4822      	ldr	r0, [pc, #136]	; (800088c <MX_GPIO_Init+0x150>)
 8000802:	f001 fffd 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4821      	ldr	r0, [pc, #132]	; (8000890 <MX_GPIO_Init+0x154>)
 800080c:	f001 fff8 	bl	8002800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	481b      	ldr	r0, [pc, #108]	; (8000894 <MX_GPIO_Init+0x158>)
 8000828:	f001 fe3e 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800082c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_GPIO_Init+0x150>)
 8000846:	f001 fe2f 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800084a:	2340      	movs	r3, #64	; 0x40
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <MX_GPIO_Init+0x154>)
 8000862:	f001 fe21 	bl	80024a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_GPIO_Init+0x154>)
 800087a:	f001 fe15 	bl	80024a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	3730      	adds	r7, #48	; 0x30
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800
 800088c:	40020400 	.word	0x40020400
 8000890:	40021800 	.word	0x40021800
 8000894:	40020800 	.word	0x40020800

08000898 <ethernetif_notify_conn_changed>:

/* USER CODE BEGIN 4 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	/* NOTE : This is function could be implemented in user file
	 when the callback is needed,
	 */
	if (netif_is_link_up(netif))
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80008a6:	089b      	lsrs	r3, r3, #2
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d00b      	beq.n	80008ca <ethernetif_notify_conn_changed+0x32>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	2101      	movs	r1, #1
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <ethernetif_notify_conn_changed+0x50>)
 80008b8:	f001 ffa2 	bl	8002800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c2:	4809      	ldr	r0, [pc, #36]	; (80008e8 <ethernetif_notify_conn_changed+0x50>)
 80008c4:	f001 ff9c 	bl	8002800 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	}
}
 80008c8:	e00a      	b.n	80008e0 <ethernetif_notify_conn_changed+0x48>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2101      	movs	r1, #1
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <ethernetif_notify_conn_changed+0x50>)
 80008d0:	f001 ff96 	bl	8002800 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <ethernetif_notify_conn_changed+0x50>)
 80008dc:	f001 ff90 	bl	8002800 <HAL_GPIO_WritePin>
}
 80008e0:	bf00      	nop
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40020400 	.word	0x40020400

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	; (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <HAL_UART_MspInit+0x84>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d12c      	bne.n	80009c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
 800096e:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000978:	6413      	str	r3, [r2, #64]	; 0x40
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_UART_MspInit+0x88>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000982:	613b      	str	r3, [r7, #16]
 8000984:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_UART_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009b4:	2307      	movs	r3, #7
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_UART_MspInit+0x8c>)
 80009c0:	f001 fd72 	bl	80024a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40004800 	.word	0x40004800
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020c00 	.word	0x40020c00

080009d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009f8:	d13f      	bne.n	8000a7a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <HAL_PCD_MspInit+0xac>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a20      	ldr	r2, [pc, #128]	; (8000a84 <HAL_PCD_MspInit+0xac>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <HAL_PCD_MspInit+0xac>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a16:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a28:	230a      	movs	r3, #10
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4815      	ldr	r0, [pc, #84]	; (8000a88 <HAL_PCD_MspInit+0xb0>)
 8000a34:	f001 fd38 	bl	80024a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480e      	ldr	r0, [pc, #56]	; (8000a88 <HAL_PCD_MspInit+0xb0>)
 8000a4e:	f001 fd2b 	bl	80024a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_PCD_MspInit+0xac>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <HAL_PCD_MspInit+0xac>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	6353      	str	r3, [r2, #52]	; 0x34
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_PCD_MspInit+0xac>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_PCD_MspInit+0xac>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_PCD_MspInit+0xac>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	3728      	adds	r7, #40	; 0x28
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020000 	.word	0x40020000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 faba 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return 1;
 8000ae4:	2301      	movs	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <_kill>:

int _kill(int pid, int sig)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <_kill+0x20>)
 8000afc:	2216      	movs	r2, #22
 8000afe:	601a      	str	r2, [r3, #0]
  return -1;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	20008a04 	.word	0x20008a04

08000b14 <_exit>:

void _exit (int status)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff ffe5 	bl	8000af0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b26:	e7fe      	b.n	8000b26 <_exit+0x12>

08000b28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e00a      	b.n	8000b50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b3a:	f3af 8000 	nop.w
 8000b3e:	4601      	mov	r1, r0
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf0      	blt.n	8000b3a <_read+0x12>
  }

  return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e009      	b.n	8000b88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf1      	blt.n	8000b74 <_write+0x12>
  }
  return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_close>:

int _close(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_isatty>:

int _isatty(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d205      	bcs.n	8000c40 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <_sbrk+0x6c>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	20030000 	.word	0x20030000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	200005d0 	.word	0x200005d0
 8000c6c:	20008a18 	.word	0x20008a18
 8000c70:	20008a04 	.word	0x20008a04

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c9c:	f7ff ffea 	bl	8000c74 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	; (8000cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	; (8000ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f00d fcf5 	bl	800e6b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fc5f 	bl	800058c <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cd0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000cdc:	08011f5c 	.word	0x08011f5c
  ldr r2, =_sbss
 8000ce0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000ce4:	20008a14 	.word	0x20008a14

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>

08000cea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000cea:	b480      	push	{r7}
 8000cec:	b083      	sub	sp, #12
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d00b      	beq.n	8000d12 <LAN8742_RegisterBusIO+0x28>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d007      	beq.n	8000d12 <LAN8742_RegisterBusIO+0x28>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <LAN8742_RegisterBusIO+0x28>
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d102      	bne.n	8000d18 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e014      	b.n	8000d42 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691a      	ldr	r2, [r3, #16]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d17c      	bne.n	8000e68 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2220      	movs	r2, #32
 8000d80:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	e01c      	b.n	8000dc2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	f107 0208 	add.w	r2, r7, #8
 8000d90:	2112      	movs	r1, #18
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	4798      	blx	r3
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	da03      	bge.n	8000da4 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000d9c:	f06f 0304 	mvn.w	r3, #4
 8000da0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000da2:	e00b      	b.n	8000dbc <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	f003 031f 	and.w	r3, r3, #31
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d105      	bne.n	8000dbc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
         break;
 8000dba:	e005      	b.n	8000dc8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	2b1f      	cmp	r3, #31
 8000dc6:	d9df      	bls.n	8000d88 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b1f      	cmp	r3, #31
 8000dce:	d902      	bls.n	8000dd6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000dd0:	f06f 0302 	mvn.w	r3, #2
 8000dd4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d145      	bne.n	8000e68 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	691b      	ldr	r3, [r3, #16]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	6810      	ldr	r0, [r2, #0]
 8000de4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000de8:	2100      	movs	r1, #0
 8000dea:	4798      	blx	r3
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db37      	blt.n	8000e62 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	6810      	ldr	r0, [r2, #0]
 8000dfa:	f107 0208 	add.w	r2, r7, #8
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4798      	blx	r3
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db28      	blt.n	8000e5a <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4798      	blx	r3
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e12:	e01c      	b.n	8000e4e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4798      	blx	r3
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e26:	d80e      	bhi.n	8000e46 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	6810      	ldr	r0, [r2, #0]
 8000e30:	f107 0208 	add.w	r2, r7, #8
 8000e34:	2100      	movs	r1, #0
 8000e36:	4798      	blx	r3
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	da07      	bge.n	8000e4e <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000e3e:	f06f 0304 	mvn.w	r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
                 break;
 8000e44:	e010      	b.n	8000e68 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e46:	f06f 0301 	mvn.w	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
               break;
 8000e4c:	e00c      	b.n	8000e68 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1dd      	bne.n	8000e14 <LAN8742_Init+0xc6>
 8000e58:	e006      	b.n	8000e68 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000e5a:	f06f 0304 	mvn.w	r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	e002      	b.n	8000e68 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e62:	f06f 0303 	mvn.w	r3, #3
 8000e66:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d112      	bne.n	8000e94 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4798      	blx	r3
 8000e74:	4603      	mov	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e78:	bf00      	nop
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4798      	blx	r3
 8000e80:	4603      	mov	r3, r0
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e8c:	d9f5      	bls.n	8000e7a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000e94:	693b      	ldr	r3, [r7, #16]
 }
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	6810      	ldr	r0, [r2, #0]
 8000eb2:	f107 020c 	add.w	r2, r7, #12
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4798      	blx	r3
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da02      	bge.n	8000ec6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000ec0:	f06f 0304 	mvn.w	r3, #4
 8000ec4:	e06e      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6810      	ldr	r0, [r2, #0]
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	4798      	blx	r3
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da02      	bge.n	8000ee2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000edc:	f06f 0304 	mvn.w	r3, #4
 8000ee0:	e060      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e059      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	6810      	ldr	r0, [r2, #0]
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	2100      	movs	r1, #0
 8000efe:	4798      	blx	r3
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da02      	bge.n	8000f0c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f06:	f06f 0304 	mvn.w	r3, #4
 8000f0a:	e04b      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d11b      	bne.n	8000f4e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <LAN8742_GetLinkState+0x90>
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e03a      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e033      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f46:	2304      	movs	r3, #4
 8000f48:	e02c      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	e02a      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6810      	ldr	r0, [r2, #0]
 8000f56:	f107 020c 	add.w	r2, r7, #12
 8000f5a:	211f      	movs	r1, #31
 8000f5c:	4798      	blx	r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	da02      	bge.n	8000f6a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000f64:	f06f 0304 	mvn.w	r3, #4
 8000f68:	e01c      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f74:	2306      	movs	r3, #6
 8000f76:	e015      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 031c 	and.w	r3, r3, #28
 8000f7e:	2b18      	cmp	r3, #24
 8000f80:	d101      	bne.n	8000f86 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f82:	2302      	movs	r3, #2
 8000f84:	e00e      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f003 031c 	and.w	r3, r3, #28
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d101      	bne.n	8000f94 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e007      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 031c 	and.w	r3, r3, #28
 8000f9a:	2b14      	cmp	r3, #20
 8000f9c:	d101      	bne.n	8000fa2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e000      	b.n	8000fa4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fa2:	2305      	movs	r3, #5
    }
  }
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f931 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fc8a 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f93b 	bl	800128a <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 f911 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	200005d4 	.word	0x200005d4

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200005d4 	.word	0x200005d4

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	bf00      	nop
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff47 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff5c 	bl	8001120 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff8e 	bl	8001190 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffb0 	bl	80011f8 <SysTick_Config>
 8001298:	4603      	mov	r3, r0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d101      	bne.n	80012b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e06c      	b.n	8001390 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d106      	bne.n	80012ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2223      	movs	r2, #35	; 0x23
 80012c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f003 f91d 	bl	8004508 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_ETH_Init+0xf4>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a30      	ldr	r2, [pc, #192]	; (8001398 <HAL_ETH_Init+0xf4>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <HAL_ETH_Init+0xf4>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012ea:	4b2c      	ldr	r3, [pc, #176]	; (800139c <HAL_ETH_Init+0xf8>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a2b      	ldr	r2, [pc, #172]	; (800139c <HAL_ETH_Init+0xf8>)
 80012f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_ETH_Init+0xf8>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	4927      	ldr	r1, [pc, #156]	; (800139c <HAL_ETH_Init+0xf8>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_ETH_Init+0xf8>)
 8001306:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800131e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001320:	f7ff feaa 	bl	8001078 <HAL_GetTick>
 8001324:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001326:	e011      	b.n	800134c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001328:	f7ff fea6 	bl	8001078 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001336:	d909      	bls.n	800134c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	22e0      	movs	r2, #224	; 0xe0
 8001344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e021      	b.n	8001390 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1e4      	bne.n	8001328 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 fdfc 	bl	8001f5c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fea3 	bl	80020b0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fef9 	bl	8002162 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	461a      	mov	r2, r3
 8001376:	2100      	movs	r1, #0
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fe61 	bl	8002040 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2210      	movs	r2, #16
 800138a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800

080013a0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d150      	bne.n	8001454 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2223      	movs	r2, #35	; 0x23
 80013b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2204      	movs	r2, #4
 80013be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f9fd 	bl	80017c0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f042 0208 	orr.w	r2, r2, #8
 80013d4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff fe56 	bl	8001090 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0204 	orr.w	r2, r2, #4
 80013fa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fe43 	bl	8001090 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 fc42 	bl	8001c9c <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6812      	ldr	r2, [r2, #0]
 8001426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800142a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800142e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001446:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2223      	movs	r2, #35	; 0x23
 800144c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e000      	b.n	8001456 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
  }
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800146c:	2b23      	cmp	r3, #35	; 0x23
 800146e:	d14a      	bne.n	8001506 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2223      	movs	r2, #35	; 0x23
 8001474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800148a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800148e:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	f023 0302 	bic.w	r3, r3, #2
 80014a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014a6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0204 	bic.w	r2, r2, #4
 80014b6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff fde5 	bl	8001090 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fbe4 	bl	8001c9c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0208 	bic.w	r2, r2, #8
 80014e2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff fdcf 	bl	8001090 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2210      	movs	r2, #16
 80014fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
  }
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001528:	f043 0201 	orr.w	r2, r3, #1
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e07c      	b.n	8001630 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800153c:	2b23      	cmp	r3, #35	; 0x23
 800153e:	d176      	bne.n	800162e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001540:	2200      	movs	r2, #0
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fe79 	bl	800223c <ETH_Prepare_Tx_Descriptors>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	f043 0202 	orr.w	r2, r3, #2
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e065      	b.n	8001630 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001564:	f3bf 8f4f 	dsb	sy
}
 8001568:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3206      	adds	r2, #6
 8001572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001576:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	629a      	str	r2, [r3, #40]	; 0x28
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	2b03      	cmp	r3, #3
 8001588:	d904      	bls.n	8001594 <HAL_ETH_Transmit+0x84>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	1f1a      	subs	r2, r3, #4
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3106      	adds	r1, #6
 80015a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80015aa:	f7ff fd65 	bl	8001078 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015b0:	e037      	b.n	8001622 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d011      	beq.n	80015e8 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	f043 0208 	orr.w	r2, r3, #8
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e023      	b.n	8001630 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ee:	d018      	beq.n	8001622 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015f0:	f7ff fd42 	bl	8001078 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d302      	bcc.n	8001606 <HAL_ETH_Transmit+0xf6>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10d      	bne.n	8001622 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800160c:	f043 0204 	orr.w	r2, r3, #4
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800161c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e006      	b.n	8001630 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	dbc3      	blt.n	80015b2 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
  }
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001656:	f043 0201 	orr.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0a8      	b.n	80017b6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800166a:	2b23      	cmp	r3, #35	; 0x23
 800166c:	d001      	beq.n	8001672 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0a1      	b.n	80017b6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	3212      	adds	r2, #18
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001688:	f1c3 0304 	rsb	r3, r3, #4
 800168c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800168e:	e06a      	b.n	8001766 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	69da      	ldr	r2, [r3, #28]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	699a      	ldr	r2, [r3, #24]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <HAL_ETH_ReadData+0x88>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d040      	beq.n	8001742 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00c      	beq.n	8001704 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	0c1b      	lsrs	r3, r3, #16
 80016f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016f4:	3b04      	subs	r3, #4
 80016f6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800171c:	461a      	mov	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	b29b      	uxth	r3, r3
 8001722:	f003 f8c1 	bl	80048a8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	441a      	add	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	2200      	movs	r2, #0
 8001740:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3301      	adds	r3, #1
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d902      	bls.n	8001754 <HAL_ETH_ReadData+0x11c>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b04      	subs	r3, #4
 8001752:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	3212      	adds	r2, #18
 800175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800176a:	2b00      	cmp	r3, #0
 800176c:	db06      	blt.n	800177c <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	429a      	cmp	r2, r3
 8001774:	d202      	bcs.n	800177c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d089      	beq.n	8001690 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	441a      	add	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f815 	bl	80017c0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80017cc:	2301      	movs	r3, #1
 80017ce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017d4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	3212      	adds	r2, #18
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017e6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017e8:	e03d      	b.n	8001866 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d112      	bne.n	8001818 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4618      	mov	r0, r3
 80017f8:	f003 f826 	bl	8004848 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	74fb      	strb	r3, [r7, #19]
 8001806:	e007      	b.n	8001818 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	461a      	mov	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	461a      	mov	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001818:	7cfb      	ldrb	r3, [r7, #19]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d023      	beq.n	8001866 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	2b00      	cmp	r3, #0
 8001824:	d103      	bne.n	800182e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	4a24      	ldr	r2, [pc, #144]	; (80018bc <ETH_UpdateDescriptor+0xfc>)
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	e003      	b.n	8001836 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001834:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3301      	adds	r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d902      	bls.n	8001854 <ETH_UpdateDescriptor+0x94>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b04      	subs	r3, #4
 8001852:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	3212      	adds	r2, #18
 800185a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	3b01      	subs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <ETH_UpdateDescriptor+0xb2>
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1bb      	bne.n	80017ea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	429a      	cmp	r2, r3
 800187a:	d01a      	beq.n	80018b2 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	3301      	adds	r3, #1
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001886:	f3bf 8f5f 	dmb	sy
}
 800188a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6919      	ldr	r1, [r3, #16]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	18ca      	adds	r2, r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69fa      	ldr	r2, [r7, #28]
 80018aa:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	80004600 	.word	0x80004600

080018c0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 031c 	and.w	r3, r3, #28
 80018dc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	02db      	lsls	r3, r3, #11
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f023 0302 	bic.w	r3, r3, #2
 80018fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001910:	f7ff fbb2 	bl	8001078 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001916:	e00d      	b.n	8001934 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001918:	f7ff fbae 	bl	8001078 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d301      	bcc.n	800192c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e010      	b.n	800194e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1ec      	bne.n	8001918 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	b29b      	uxth	r3, r3
 8001946:	461a      	mov	r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f003 031c 	and.w	r3, r3, #28
 8001972:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	02db      	lsls	r3, r3, #11
 8001978:	b29b      	uxth	r3, r3
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	019b      	lsls	r3, r3, #6
 8001984:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b0:	f7ff fb62 	bl	8001078 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019b6:	e00d      	b.n	80019d4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80019b8:	f7ff fb5e 	bl	8001078 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c6:	d301      	bcc.n	80019cc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e009      	b.n	80019e0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ec      	bne.n	80019b8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0d9      	b.n	8001bb0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf14      	ite	ne
 8001a50:	2301      	movne	r3, #1
 8001a52:	2300      	moveq	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	bf0c      	ite	eq
 8001a6a:	2301      	moveq	r3, #1
 8001a6c:	2300      	movne	r3, #0
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	bf0c      	ite	eq
 8001aba:	2301      	moveq	r3, #1
 8001abc:	2300      	movne	r3, #0
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bf14      	ite	ne
 8001aee:	2301      	movne	r3, #1
 8001af0:	2300      	moveq	r3, #0
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	461a      	mov	r2, r3
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	bf14      	ite	ne
 8001b16:	2301      	movne	r3, #1
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bf14      	ite	ne
 8001b30:	2301      	movne	r3, #1
 8001b32:	2300      	moveq	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf0c      	ite	eq
 8001b4c:	2301      	moveq	r3, #1
 8001b4e:	2300      	movne	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	0c1b      	lsrs	r3, r3, #16
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf14      	ite	ne
 8001b84:	2301      	movne	r3, #1
 8001b86:	2300      	moveq	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf14      	ite	ne
 8001ba0:	2301      	movne	r3, #1
 8001ba2:	2300      	moveq	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e00b      	b.n	8001be8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bd6:	2b10      	cmp	r3, #16
 8001bd8:	d105      	bne.n	8001be6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f883 	bl	8001ce8 <ETH_SetMACConfig>

    return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
  }
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f023 031c 	bic.w	r3, r3, #28
 8001c06:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c08:	f001 fb86 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8001c0c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d908      	bls.n	8001c28 <HAL_ETH_SetMDIOClockRange+0x38>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	4a1c      	ldr	r2, [pc, #112]	; (8001c8c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d804      	bhi.n	8001c28 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	e027      	b.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d908      	bls.n	8001c42 <HAL_ETH_SetMDIOClockRange+0x52>
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d204      	bcs.n	8001c42 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f043 030c 	orr.w	r3, r3, #12
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e01a      	b.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d303      	bcc.n	8001c52 <HAL_ETH_SetMDIOClockRange+0x62>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	4a11      	ldr	r2, [pc, #68]	; (8001c94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d911      	bls.n	8001c76 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d908      	bls.n	8001c6c <HAL_ETH_SetMDIOClockRange+0x7c>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d804      	bhi.n	8001c6c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e005      	b.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	e000      	b.n	8001c78 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c76:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	01312cff 	.word	0x01312cff
 8001c8c:	02160ebf 	.word	0x02160ebf
 8001c90:	03938700 	.word	0x03938700
 8001c94:	05f5e0ff 	.word	0x05f5e0ff
 8001c98:	08f0d17f 	.word	0x08f0d17f

08001c9c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cbe:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f7ff f9df 	bl	8001090 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cdc:	6193      	str	r3, [r2, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <ETH_SetMACConfig+0x15c>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	7c1b      	ldrb	r3, [r3, #16]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d102      	bne.n	8001d10 <ETH_SetMACConfig+0x28>
 8001d0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d0e:	e000      	b.n	8001d12 <ETH_SetMACConfig+0x2a>
 8001d10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	7c5b      	ldrb	r3, [r3, #17]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <ETH_SetMACConfig+0x38>
 8001d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d1e:	e000      	b.n	8001d22 <ETH_SetMACConfig+0x3a>
 8001d20:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d22:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	7fdb      	ldrb	r3, [r3, #31]
 8001d2e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d30:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	7f92      	ldrb	r2, [r2, #30]
 8001d3c:	2a00      	cmp	r2, #0
 8001d3e:	d102      	bne.n	8001d46 <ETH_SetMACConfig+0x5e>
 8001d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d44:	e000      	b.n	8001d48 <ETH_SetMACConfig+0x60>
 8001d46:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d48:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	7f1b      	ldrb	r3, [r3, #28]
 8001d4e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d50:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d56:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	791b      	ldrb	r3, [r3, #4]
 8001d5c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	d102      	bne.n	8001d70 <ETH_SetMACConfig+0x88>
 8001d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6e:	e000      	b.n	8001d72 <ETH_SetMACConfig+0x8a>
 8001d70:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d72:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	7bdb      	ldrb	r3, [r3, #15]
 8001d78:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d7a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d88:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f7ff f974 	bl	8001090 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001dce:	2a00      	cmp	r2, #0
 8001dd0:	d101      	bne.n	8001dd6 <ETH_SetMACConfig+0xee>
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	e000      	b.n	8001dd8 <ETH_SetMACConfig+0xf0>
 8001dd6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dd8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001dde:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001de6:	2a01      	cmp	r2, #1
 8001de8:	d101      	bne.n	8001dee <ETH_SetMACConfig+0x106>
 8001dea:	2208      	movs	r2, #8
 8001dec:	e000      	b.n	8001df0 <ETH_SetMACConfig+0x108>
 8001dee:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001df0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001df8:	2a01      	cmp	r2, #1
 8001dfa:	d101      	bne.n	8001e00 <ETH_SetMACConfig+0x118>
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	e000      	b.n	8001e02 <ETH_SetMACConfig+0x11a>
 8001e00:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e0a:	2a01      	cmp	r2, #1
 8001e0c:	d101      	bne.n	8001e12 <ETH_SetMACConfig+0x12a>
 8001e0e:	2202      	movs	r2, #2
 8001e10:	e000      	b.n	8001e14 <ETH_SetMACConfig+0x12c>
 8001e12:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e14:	4313      	orrs	r3, r2
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff f92f 	bl	8001090 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	619a      	str	r2, [r3, #24]
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	ff20810f 	.word	0xff20810f

08001e48 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <ETH_SetDMAConfig+0x110>)
 8001e62:	4013      	ands	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	7b1b      	ldrb	r3, [r3, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d102      	bne.n	8001e74 <ETH_SetDMAConfig+0x2c>
 8001e6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e72:	e000      	b.n	8001e76 <ETH_SetDMAConfig+0x2e>
 8001e74:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	7b5b      	ldrb	r3, [r3, #13]
 8001e7a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e7c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	7f52      	ldrb	r2, [r2, #29]
 8001e82:	2a00      	cmp	r2, #0
 8001e84:	d102      	bne.n	8001e8c <ETH_SetDMAConfig+0x44>
 8001e86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e8a:	e000      	b.n	8001e8e <ETH_SetDMAConfig+0x46>
 8001e8c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	7b9b      	ldrb	r3, [r3, #14]
 8001e94:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e96:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e9c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	7f1b      	ldrb	r3, [r3, #28]
 8001ea2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ea4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	7f9b      	ldrb	r3, [r3, #30]
 8001eaa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001eac:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001eb2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eba:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f7ff f8d6 	bl	8001090 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	791b      	ldrb	r3, [r3, #4]
 8001ef6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001efc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f02:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f08:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f10:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f12:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f1a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f20:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f2e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f7ff f8a7 	bl	8001090 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	f8de3f23 	.word	0xf8de3f23

08001f5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0a6      	sub	sp, #152	; 0x98
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001fbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fc2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fe86 	bl	8001ce8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002008:	2301      	movs	r3, #1
 800200a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002010:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002016:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800201c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002024:	2300      	movs	r3, #0
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	4619      	mov	r1, r3
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ff08 	bl	8001e48 <ETH_SetDMAConfig>
}
 8002038:	bf00      	nop
 800203a:	3798      	adds	r7, #152	; 0x98
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3305      	adds	r3, #5
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	021b      	lsls	r3, r3, #8
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	3204      	adds	r2, #4
 8002058:	7812      	ldrb	r2, [r2, #0]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <ETH_MACAddressConfig+0x68>)
 8002062:	4413      	add	r3, r2
 8002064:	461a      	mov	r2, r3
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3303      	adds	r3, #3
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	061a      	lsls	r2, r3, #24
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3302      	adds	r3, #2
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	4313      	orrs	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	7812      	ldrb	r2, [r2, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <ETH_MACAddressConfig+0x6c>)
 8002092:	4413      	add	r3, r2
 8002094:	461a      	mov	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	6013      	str	r3, [r2, #0]
}
 800209a:	bf00      	nop
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40028040 	.word	0x40028040
 80020ac:	40028044 	.word	0x40028044

080020b0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	e03e      	b.n	800213c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68d9      	ldr	r1, [r3, #12]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2200      	movs	r2, #0
 80020da:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80020e8:	68b9      	ldr	r1, [r7, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	3206      	adds	r2, #6
 80020f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d80c      	bhi.n	8002120 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68d9      	ldr	r1, [r3, #12]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	e004      	b.n	800212a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	461a      	mov	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3301      	adds	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d9bd      	bls.n	80020be <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68da      	ldr	r2, [r3, #12]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002154:	611a      	str	r2, [r3, #16]
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002162:	b480      	push	{r7}
 8002164:	b085      	sub	sp, #20
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	e046      	b.n	80021fe <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6919      	ldr	r1, [r3, #16]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2200      	movs	r2, #0
 800218c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2200      	movs	r2, #0
 800219e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021ac:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80021b4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021c2:	68b9      	ldr	r1, [r7, #8]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	3212      	adds	r2, #18
 80021ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d80c      	bhi.n	80021ee <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6919      	ldr	r1, [r3, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	461a      	mov	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60da      	str	r2, [r3, #12]
 80021ec:	e004      	b.n	80021f8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d9b5      	bls.n	8002170 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222e:	60da      	str	r2, [r3, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800223c:	b480      	push	{r7}
 800223e:	b08d      	sub	sp, #52	; 0x34
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3318      	adds	r3, #24
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002266:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800227a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800227e:	d007      	beq.n	8002290 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	3304      	adds	r3, #4
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002290:	2302      	movs	r3, #2
 8002292:	e103      	b.n	800249c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	3301      	adds	r3, #1
 8002298:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80022a4:	6a3b      	ldr	r3, [r7, #32]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80022ac:	f023 031f 	bic.w	r3, r3, #31
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	6852      	ldr	r2, [r2, #4]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80022c6:	6a3b      	ldr	r3, [r7, #32]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800231a:	f3bf 8f5f 	dmb	sy
}
 800231e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800232c:	e084      	b.n	8002438 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e005      	b.n	800235a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235c:	3301      	adds	r3, #1
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	2b03      	cmp	r3, #3
 8002364:	d902      	bls.n	800236c <ETH_Prepare_Tx_Descriptors+0x130>
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	3b04      	subs	r3, #4
 800236a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002374:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002376:	6a3b      	ldr	r3, [r7, #32]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800238a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800238e:	d007      	beq.n	80023a0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	3304      	adds	r3, #4
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d029      	beq.n	80023f4 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023b2:	e019      	b.n	80023e8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80023b4:	f3bf 8f5f 	dmb	sy
}
 80023b8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80023c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c8:	3301      	adds	r3, #1
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	d902      	bls.n	80023d8 <ETH_Prepare_Tx_Descriptors+0x19c>
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	3b04      	subs	r3, #4
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80023e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e4:	3301      	adds	r3, #1
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d3e1      	bcc.n	80023b4 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80023f0:	2302      	movs	r3, #2
 80023f2:	e053      	b.n	800249c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	3301      	adds	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002412:	f023 031f 	bic.w	r3, r3, #31
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	6852      	ldr	r2, [r2, #4]
 800241a:	431a      	orrs	r2, r3
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	3301      	adds	r3, #1
 8002424:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002426:	f3bf 8f5f 	dmb	sy
}
 800242a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f47f af76 	bne.w	800232e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e005      	b.n	8002462 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002472:	6979      	ldr	r1, [r7, #20]
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	3304      	adds	r3, #4
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002482:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002484:	b672      	cpsid	i
}
 8002486:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	4413      	add	r3, r2
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002496:	b662      	cpsie	i
}
 8002498:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3734      	adds	r7, #52	; 0x34
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	e177      	b.n	80027b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024c4:	2201      	movs	r2, #1
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	429a      	cmp	r2, r3
 80024de:	f040 8166 	bne.w	80027ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d005      	beq.n	80024fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d130      	bne.n	800255c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	2203      	movs	r2, #3
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002530:	2201      	movs	r2, #1
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0201 	and.w	r2, r3, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b03      	cmp	r3, #3
 8002566:	d017      	beq.n	8002598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2203      	movs	r2, #3
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d123      	bne.n	80025ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	08da      	lsrs	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3208      	adds	r2, #8
 80025ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	220f      	movs	r2, #15
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	08da      	lsrs	r2, r3, #3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3208      	adds	r2, #8
 80025e6:	69b9      	ldr	r1, [r7, #24]
 80025e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f003 0203 	and.w	r2, r3, #3
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80c0 	beq.w	80027ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_GPIO_Init+0x324>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_GPIO_Init+0x324>)
 8002638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800263c:	6453      	str	r3, [r2, #68]	; 0x44
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_GPIO_Init+0x324>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <HAL_GPIO_Init+0x328>)
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	089b      	lsrs	r3, r3, #2
 8002650:	3302      	adds	r3, #2
 8002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	220f      	movs	r2, #15
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a58      	ldr	r2, [pc, #352]	; (80027d4 <HAL_GPIO_Init+0x32c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d037      	beq.n	80026e6 <HAL_GPIO_Init+0x23e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_GPIO_Init+0x330>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d031      	beq.n	80026e2 <HAL_GPIO_Init+0x23a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a56      	ldr	r2, [pc, #344]	; (80027dc <HAL_GPIO_Init+0x334>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d02b      	beq.n	80026de <HAL_GPIO_Init+0x236>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a55      	ldr	r2, [pc, #340]	; (80027e0 <HAL_GPIO_Init+0x338>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d025      	beq.n	80026da <HAL_GPIO_Init+0x232>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <HAL_GPIO_Init+0x33c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d01f      	beq.n	80026d6 <HAL_GPIO_Init+0x22e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a53      	ldr	r2, [pc, #332]	; (80027e8 <HAL_GPIO_Init+0x340>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d019      	beq.n	80026d2 <HAL_GPIO_Init+0x22a>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a52      	ldr	r2, [pc, #328]	; (80027ec <HAL_GPIO_Init+0x344>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d013      	beq.n	80026ce <HAL_GPIO_Init+0x226>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a51      	ldr	r2, [pc, #324]	; (80027f0 <HAL_GPIO_Init+0x348>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d00d      	beq.n	80026ca <HAL_GPIO_Init+0x222>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a50      	ldr	r2, [pc, #320]	; (80027f4 <HAL_GPIO_Init+0x34c>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d007      	beq.n	80026c6 <HAL_GPIO_Init+0x21e>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a4f      	ldr	r2, [pc, #316]	; (80027f8 <HAL_GPIO_Init+0x350>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d101      	bne.n	80026c2 <HAL_GPIO_Init+0x21a>
 80026be:	2309      	movs	r3, #9
 80026c0:	e012      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026c2:	230a      	movs	r3, #10
 80026c4:	e010      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026c6:	2308      	movs	r3, #8
 80026c8:	e00e      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026ca:	2307      	movs	r3, #7
 80026cc:	e00c      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026ce:	2306      	movs	r3, #6
 80026d0:	e00a      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026d2:	2305      	movs	r3, #5
 80026d4:	e008      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026d6:	2304      	movs	r3, #4
 80026d8:	e006      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026da:	2303      	movs	r3, #3
 80026dc:	e004      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026de:	2302      	movs	r3, #2
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_GPIO_Init+0x240>
 80026e6:	2300      	movs	r3, #0
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f002 0203 	and.w	r2, r2, #3
 80026ee:	0092      	lsls	r2, r2, #2
 80026f0:	4093      	lsls	r3, r2
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f8:	4935      	ldr	r1, [pc, #212]	; (80027d0 <HAL_GPIO_Init+0x328>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	089b      	lsrs	r3, r3, #2
 80026fe:	3302      	adds	r3, #2
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002706:	4b3d      	ldr	r3, [pc, #244]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800272a:	4a34      	ldr	r2, [pc, #208]	; (80027fc <HAL_GPIO_Init+0x354>)
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002730:	4b32      	ldr	r3, [pc, #200]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	43db      	mvns	r3, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4013      	ands	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002754:	4a29      	ldr	r2, [pc, #164]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_GPIO_Init+0x354>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	43db      	mvns	r3, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4013      	ands	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277e:	4a1f      	ldr	r2, [pc, #124]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_GPIO_Init+0x354>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a8:	4a14      	ldr	r2, [pc, #80]	; (80027fc <HAL_GPIO_Init+0x354>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b0f      	cmp	r3, #15
 80027b8:	f67f ae84 	bls.w	80024c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40013800 	.word	0x40013800
 80027d4:	40020000 	.word	0x40020000
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40020800 	.word	0x40020800
 80027e0:	40020c00 	.word	0x40020c00
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40021400 	.word	0x40021400
 80027ec:	40021800 	.word	0x40021800
 80027f0:	40021c00 	.word	0x40021c00
 80027f4:	40022000 	.word	0x40022000
 80027f8:	40022400 	.word	0x40022400
 80027fc:	40013c00 	.word	0x40013c00

08002800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
 800280c:	4613      	mov	r3, r2
 800280e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002810:	787b      	ldrb	r3, [r7, #1]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800281c:	e003      	b.n	8002826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800281e:	887b      	ldrh	r3, [r7, #2]
 8002820:	041a      	lsls	r2, r3, #16
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	619a      	str	r2, [r3, #24]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af02      	add	r7, sp, #8
 8002838:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e101      	b.n	8002a48 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7fe f8ba 	bl	80009d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2203      	movs	r2, #3
 8002868:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002872:	d102      	bne.n	800287a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f8a6 	bl	80039d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7c1a      	ldrb	r2, [r3, #16]
 800288c:	f88d 2000 	strb.w	r2, [sp]
 8002890:	3304      	adds	r3, #4
 8002892:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002894:	f001 f838 	bl	8003908 <USB_CoreInit>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0ce      	b.n	8002a48 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f001 f89e 	bl	80039f2 <USB_SetCurrentMode>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0bf      	b.n	8002a48 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
 80028cc:	e04a      	b.n	8002964 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3315      	adds	r3, #21
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028e2:	7bfa      	ldrb	r2, [r7, #15]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	3314      	adds	r3, #20
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028f6:	7bfa      	ldrb	r2, [r7, #15]
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	b298      	uxth	r0, r3
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	332e      	adds	r3, #46	; 0x2e
 800290a:	4602      	mov	r2, r0
 800290c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3318      	adds	r3, #24
 800291e:	2200      	movs	r2, #0
 8002920:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	4413      	add	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	440b      	add	r3, r1
 8002930:	331c      	adds	r3, #28
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002936:	7bfa      	ldrb	r2, [r7, #15]
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	3320      	adds	r3, #32
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800294a:	7bfa      	ldrb	r2, [r7, #15]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4413      	add	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	3324      	adds	r3, #36	; 0x24
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	3301      	adds	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	791b      	ldrb	r3, [r3, #4]
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	429a      	cmp	r2, r3
 800296c:	d3af      	bcc.n	80028ce <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e044      	b.n	80029fe <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002974:	7bfa      	ldrb	r2, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800298a:	7bfa      	ldrb	r2, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4413      	add	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029a0:	7bfa      	ldrb	r2, [r7, #15]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4413      	add	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	440b      	add	r3, r1
 80029c4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	3301      	adds	r3, #1
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	791b      	ldrb	r3, [r3, #4]
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3b5      	bcc.n	8002974 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	7c1a      	ldrb	r2, [r3, #16]
 8002a10:	f88d 2000 	strb.w	r2, [sp]
 8002a14:	3304      	adds	r3, #4
 8002a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a18:	f001 f838 	bl	8003a8c <USB_DevInit>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00c      	b.n	8002a48 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 fa00 	bl	8003e46 <USB_DevDisconnect>

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e267      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b7e      	ldr	r3, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e242      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x74>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6f      	ldr	r2, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6c      	ldr	r2, [pc, #432]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a68      	ldr	r2, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fab6 	bl	8001078 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fab2 	bl	8001078 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e207      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe faa2 	bl	8001078 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fa9e 	bl	8001078 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1f3      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c7      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fa57 	bl	8001078 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe fa53 	bl	8001078 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a8      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe fa36 	bl	8001078 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fa32 	bl	8001078 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e187      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fa16 	bl	8001078 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe fa12 	bl	8001078 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e167      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe f9ff 	bl	8001078 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe f9fb 	bl	8001078 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e150      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a7c      	ldr	r2, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b74      	ldr	r3, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe f9bb 	bl	8001078 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe f9b7 	bl	8001078 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e10c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x30c>
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d5c:	4b58      	ldr	r3, [pc, #352]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a54      	ldr	r2, [pc, #336]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe f97c 	bl	8001078 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe f978 	bl	8001078 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0cb      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fe f966 	bl	8001078 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe f962 	bl	8001078 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0b5      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a1 	beq.w	8002f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d05c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d141      	bne.n	8002e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe f936 	bl	8001078 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe f932 	bl	8001078 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e087      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	491b      	ldr	r1, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe f90b 	bl	8001078 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe f907 	bl	8001078 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e05c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x416>
 8002e84:	e054      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f8f4 	bl	8001078 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe f8f0 	bl	8001078 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e045      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e038      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4ec>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d121      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11a      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cc      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d90c      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e067      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4934      	ldr	r1, [pc, #208]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe f822 	bl	8001078 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe f81e 	bl	8001078 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d20c      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd ff82 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	08011d68 	.word	0x08011d68
 8003104:	20000000 	.word	0x20000000
 8003108:	20000004 	.word	0x20000004

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b094      	sub	sp, #80	; 0x50
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	647b      	str	r3, [r7, #68]	; 0x44
 8003118:	2300      	movs	r3, #0
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800311c:	2300      	movs	r3, #0
 800311e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003124:	4b79      	ldr	r3, [pc, #484]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d00d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x40>
 8003130:	2b08      	cmp	r3, #8
 8003132:	f200 80e1 	bhi.w	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x3a>
 800313e:	e0db      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b73      	ldr	r3, [pc, #460]	; (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003144:	e0db      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003146:	4b73      	ldr	r3, [pc, #460]	; (8003314 <HAL_RCC_GetSysClockFreq+0x208>)
 8003148:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314a:	e0d8      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4b6f      	ldr	r3, [pc, #444]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d063      	beq.n	800322a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2200      	movs	r2, #0
 800316a:	63bb      	str	r3, [r7, #56]	; 0x38
 800316c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
 800317a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	f04f 0000 	mov.w	r0, #0
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	0159      	lsls	r1, r3, #5
 800318c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003190:	0150      	lsls	r0, r2, #5
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4621      	mov	r1, r4
 8003198:	1a51      	subs	r1, r2, r1
 800319a:	6139      	str	r1, [r7, #16]
 800319c:	4629      	mov	r1, r5
 800319e:	eb63 0301 	sbc.w	r3, r3, r1
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031b0:	4659      	mov	r1, fp
 80031b2:	018b      	lsls	r3, r1, #6
 80031b4:	4651      	mov	r1, sl
 80031b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031ba:	4651      	mov	r1, sl
 80031bc:	018a      	lsls	r2, r1, #6
 80031be:	4651      	mov	r1, sl
 80031c0:	ebb2 0801 	subs.w	r8, r2, r1
 80031c4:	4659      	mov	r1, fp
 80031c6:	eb63 0901 	sbc.w	r9, r3, r1
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031de:	4690      	mov	r8, r2
 80031e0:	4699      	mov	r9, r3
 80031e2:	4623      	mov	r3, r4
 80031e4:	eb18 0303 	adds.w	r3, r8, r3
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	462b      	mov	r3, r5
 80031ec:	eb49 0303 	adc.w	r3, r9, r3
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031fe:	4629      	mov	r1, r5
 8003200:	024b      	lsls	r3, r1, #9
 8003202:	4621      	mov	r1, r4
 8003204:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003208:	4621      	mov	r1, r4
 800320a:	024a      	lsls	r2, r1, #9
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003212:	2200      	movs	r2, #0
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
 8003216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800321c:	f7fd f838 	bl	8000290 <__aeabi_uldivmod>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4613      	mov	r3, r2
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	e058      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800322a:	4b38      	ldr	r3, [pc, #224]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	099b      	lsrs	r3, r3, #6
 8003230:	2200      	movs	r2, #0
 8003232:	4618      	mov	r0, r3
 8003234:	4611      	mov	r1, r2
 8003236:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800323a:	623b      	str	r3, [r7, #32]
 800323c:	2300      	movs	r3, #0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
 8003240:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003244:	4642      	mov	r2, r8
 8003246:	464b      	mov	r3, r9
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	0159      	lsls	r1, r3, #5
 8003252:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003256:	0150      	lsls	r0, r2, #5
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4641      	mov	r1, r8
 800325e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003262:	4649      	mov	r1, r9
 8003264:	eb63 0b01 	sbc.w	fp, r3, r1
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003274:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003278:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800327c:	ebb2 040a 	subs.w	r4, r2, sl
 8003280:	eb63 050b 	sbc.w	r5, r3, fp
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	00eb      	lsls	r3, r5, #3
 800328e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003292:	00e2      	lsls	r2, r4, #3
 8003294:	4614      	mov	r4, r2
 8003296:	461d      	mov	r5, r3
 8003298:	4643      	mov	r3, r8
 800329a:	18e3      	adds	r3, r4, r3
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	464b      	mov	r3, r9
 80032a0:	eb45 0303 	adc.w	r3, r5, r3
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b2:	4629      	mov	r1, r5
 80032b4:	028b      	lsls	r3, r1, #10
 80032b6:	4621      	mov	r1, r4
 80032b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032bc:	4621      	mov	r1, r4
 80032be:	028a      	lsls	r2, r1, #10
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	2200      	movs	r2, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	61fa      	str	r2, [r7, #28]
 80032cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d0:	f7fc ffde 	bl	8000290 <__aeabi_uldivmod>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4613      	mov	r3, r2
 80032da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032dc:	4b0b      	ldr	r3, [pc, #44]	; (800330c <HAL_RCC_GetSysClockFreq+0x200>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	3301      	adds	r3, #1
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80032ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032f6:	e002      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCC_GetSysClockFreq+0x204>)
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003300:	4618      	mov	r0, r3
 8003302:	3750      	adds	r7, #80	; 0x50
 8003304:	46bd      	mov	sp, r7
 8003306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	00f42400 	.word	0x00f42400
 8003314:	007a1200 	.word	0x007a1200

08003318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_RCC_GetHCLKFreq+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000000 	.word	0x20000000

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003334:	f7ff fff0 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003338:	4602      	mov	r2, r0
 800333a:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0a9b      	lsrs	r3, r3, #10
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	4903      	ldr	r1, [pc, #12]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800334c:	4618      	mov	r0, r3
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40023800 	.word	0x40023800
 8003354:	08011d78 	.word	0x08011d78

08003358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800335c:	f7ff ffdc 	bl	8003318 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0b5b      	lsrs	r3, r3, #13
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	; (800337c <HAL_RCC_GetPCLK2Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	08011d78 	.word	0x08011d78

08003380 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e042      	b.n	8003418 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fd face 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f82b 	bl	8003420 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695a      	ldr	r2, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003424:	b0c0      	sub	sp, #256	; 0x100
 8003426:	af00      	add	r7, sp, #0
 8003428:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	68d9      	ldr	r1, [r3, #12]
 800343e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	ea40 0301 	orr.w	r3, r0, r1
 8003448:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	431a      	orrs	r2, r3
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	431a      	orrs	r2, r3
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003478:	f021 010c 	bic.w	r1, r1, #12
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003486:	430b      	orrs	r3, r1
 8003488:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800348a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800349a:	6999      	ldr	r1, [r3, #24]
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	ea40 0301 	orr.w	r3, r0, r1
 80034a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b8f      	ldr	r3, [pc, #572]	; (80036ec <UART_SetConfig+0x2cc>)
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d005      	beq.n	80034c0 <UART_SetConfig+0xa0>
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4b8d      	ldr	r3, [pc, #564]	; (80036f0 <UART_SetConfig+0x2d0>)
 80034bc:	429a      	cmp	r2, r3
 80034be:	d104      	bne.n	80034ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c0:	f7ff ff4a 	bl	8003358 <HAL_RCC_GetPCLK2Freq>
 80034c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034c8:	e003      	b.n	80034d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034ca:	f7ff ff31 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 80034ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034dc:	f040 810c 	bne.w	80036f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034f2:	4622      	mov	r2, r4
 80034f4:	462b      	mov	r3, r5
 80034f6:	1891      	adds	r1, r2, r2
 80034f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80034fa:	415b      	adcs	r3, r3
 80034fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003502:	4621      	mov	r1, r4
 8003504:	eb12 0801 	adds.w	r8, r2, r1
 8003508:	4629      	mov	r1, r5
 800350a:	eb43 0901 	adc.w	r9, r3, r1
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800351a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800351e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003522:	4690      	mov	r8, r2
 8003524:	4699      	mov	r9, r3
 8003526:	4623      	mov	r3, r4
 8003528:	eb18 0303 	adds.w	r3, r8, r3
 800352c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003530:	462b      	mov	r3, r5
 8003532:	eb49 0303 	adc.w	r3, r9, r3
 8003536:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800353a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003546:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800354a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800354e:	460b      	mov	r3, r1
 8003550:	18db      	adds	r3, r3, r3
 8003552:	653b      	str	r3, [r7, #80]	; 0x50
 8003554:	4613      	mov	r3, r2
 8003556:	eb42 0303 	adc.w	r3, r2, r3
 800355a:	657b      	str	r3, [r7, #84]	; 0x54
 800355c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003560:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003564:	f7fc fe94 	bl	8000290 <__aeabi_uldivmod>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4b61      	ldr	r3, [pc, #388]	; (80036f4 <UART_SetConfig+0x2d4>)
 800356e:	fba3 2302 	umull	r2, r3, r3, r2
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	011c      	lsls	r4, r3, #4
 8003576:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800357a:	2200      	movs	r2, #0
 800357c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003580:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003584:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003588:	4642      	mov	r2, r8
 800358a:	464b      	mov	r3, r9
 800358c:	1891      	adds	r1, r2, r2
 800358e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003590:	415b      	adcs	r3, r3
 8003592:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003594:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003598:	4641      	mov	r1, r8
 800359a:	eb12 0a01 	adds.w	sl, r2, r1
 800359e:	4649      	mov	r1, r9
 80035a0:	eb43 0b01 	adc.w	fp, r3, r1
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035b8:	4692      	mov	sl, r2
 80035ba:	469b      	mov	fp, r3
 80035bc:	4643      	mov	r3, r8
 80035be:	eb1a 0303 	adds.w	r3, sl, r3
 80035c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c6:	464b      	mov	r3, r9
 80035c8:	eb4b 0303 	adc.w	r3, fp, r3
 80035cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035e4:	460b      	mov	r3, r1
 80035e6:	18db      	adds	r3, r3, r3
 80035e8:	643b      	str	r3, [r7, #64]	; 0x40
 80035ea:	4613      	mov	r3, r2
 80035ec:	eb42 0303 	adc.w	r3, r2, r3
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
 80035f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035fa:	f7fc fe49 	bl	8000290 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4611      	mov	r1, r2
 8003604:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <UART_SetConfig+0x2d4>)
 8003606:	fba3 2301 	umull	r2, r3, r3, r1
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	2264      	movs	r2, #100	; 0x64
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	1acb      	subs	r3, r1, r3
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800361a:	4b36      	ldr	r3, [pc, #216]	; (80036f4 <UART_SetConfig+0x2d4>)
 800361c:	fba3 2302 	umull	r2, r3, r3, r2
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003628:	441c      	add	r4, r3
 800362a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800362e:	2200      	movs	r2, #0
 8003630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003634:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003638:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800363c:	4642      	mov	r2, r8
 800363e:	464b      	mov	r3, r9
 8003640:	1891      	adds	r1, r2, r2
 8003642:	63b9      	str	r1, [r7, #56]	; 0x38
 8003644:	415b      	adcs	r3, r3
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800364c:	4641      	mov	r1, r8
 800364e:	1851      	adds	r1, r2, r1
 8003650:	6339      	str	r1, [r7, #48]	; 0x30
 8003652:	4649      	mov	r1, r9
 8003654:	414b      	adcs	r3, r1
 8003656:	637b      	str	r3, [r7, #52]	; 0x34
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003664:	4659      	mov	r1, fp
 8003666:	00cb      	lsls	r3, r1, #3
 8003668:	4651      	mov	r1, sl
 800366a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366e:	4651      	mov	r1, sl
 8003670:	00ca      	lsls	r2, r1, #3
 8003672:	4610      	mov	r0, r2
 8003674:	4619      	mov	r1, r3
 8003676:	4603      	mov	r3, r0
 8003678:	4642      	mov	r2, r8
 800367a:	189b      	adds	r3, r3, r2
 800367c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003680:	464b      	mov	r3, r9
 8003682:	460a      	mov	r2, r1
 8003684:	eb42 0303 	adc.w	r3, r2, r3
 8003688:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003698:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800369c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036a0:	460b      	mov	r3, r1
 80036a2:	18db      	adds	r3, r3, r3
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a6:	4613      	mov	r3, r2
 80036a8:	eb42 0303 	adc.w	r3, r2, r3
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036b6:	f7fc fdeb 	bl	8000290 <__aeabi_uldivmod>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <UART_SetConfig+0x2d4>)
 80036c0:	fba3 1302 	umull	r1, r3, r3, r2
 80036c4:	095b      	lsrs	r3, r3, #5
 80036c6:	2164      	movs	r1, #100	; 0x64
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	3332      	adds	r3, #50	; 0x32
 80036d2:	4a08      	ldr	r2, [pc, #32]	; (80036f4 <UART_SetConfig+0x2d4>)
 80036d4:	fba2 2303 	umull	r2, r3, r2, r3
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	f003 0207 	and.w	r2, r3, #7
 80036de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4422      	add	r2, r4
 80036e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036e8:	e106      	b.n	80038f8 <UART_SetConfig+0x4d8>
 80036ea:	bf00      	nop
 80036ec:	40011000 	.word	0x40011000
 80036f0:	40011400 	.word	0x40011400
 80036f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036fc:	2200      	movs	r2, #0
 80036fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003702:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003706:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800370a:	4642      	mov	r2, r8
 800370c:	464b      	mov	r3, r9
 800370e:	1891      	adds	r1, r2, r2
 8003710:	6239      	str	r1, [r7, #32]
 8003712:	415b      	adcs	r3, r3
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
 8003716:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800371a:	4641      	mov	r1, r8
 800371c:	1854      	adds	r4, r2, r1
 800371e:	4649      	mov	r1, r9
 8003720:	eb43 0501 	adc.w	r5, r3, r1
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	00eb      	lsls	r3, r5, #3
 800372e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003732:	00e2      	lsls	r2, r4, #3
 8003734:	4614      	mov	r4, r2
 8003736:	461d      	mov	r5, r3
 8003738:	4643      	mov	r3, r8
 800373a:	18e3      	adds	r3, r4, r3
 800373c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003740:	464b      	mov	r3, r9
 8003742:	eb45 0303 	adc.w	r3, r5, r3
 8003746:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800374a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003756:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003766:	4629      	mov	r1, r5
 8003768:	008b      	lsls	r3, r1, #2
 800376a:	4621      	mov	r1, r4
 800376c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003770:	4621      	mov	r1, r4
 8003772:	008a      	lsls	r2, r1, #2
 8003774:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003778:	f7fc fd8a 	bl	8000290 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4b60      	ldr	r3, [pc, #384]	; (8003904 <UART_SetConfig+0x4e4>)
 8003782:	fba3 2302 	umull	r2, r3, r3, r2
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	011c      	lsls	r4, r3, #4
 800378a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378e:	2200      	movs	r2, #0
 8003790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003794:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003798:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800379c:	4642      	mov	r2, r8
 800379e:	464b      	mov	r3, r9
 80037a0:	1891      	adds	r1, r2, r2
 80037a2:	61b9      	str	r1, [r7, #24]
 80037a4:	415b      	adcs	r3, r3
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037ac:	4641      	mov	r1, r8
 80037ae:	1851      	adds	r1, r2, r1
 80037b0:	6139      	str	r1, [r7, #16]
 80037b2:	4649      	mov	r1, r9
 80037b4:	414b      	adcs	r3, r1
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c4:	4659      	mov	r1, fp
 80037c6:	00cb      	lsls	r3, r1, #3
 80037c8:	4651      	mov	r1, sl
 80037ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ce:	4651      	mov	r1, sl
 80037d0:	00ca      	lsls	r2, r1, #3
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	4603      	mov	r3, r0
 80037d8:	4642      	mov	r2, r8
 80037da:	189b      	adds	r3, r3, r2
 80037dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037e0:	464b      	mov	r3, r9
 80037e2:	460a      	mov	r2, r1
 80037e4:	eb42 0303 	adc.w	r3, r2, r3
 80037e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80037f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003804:	4649      	mov	r1, r9
 8003806:	008b      	lsls	r3, r1, #2
 8003808:	4641      	mov	r1, r8
 800380a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800380e:	4641      	mov	r1, r8
 8003810:	008a      	lsls	r2, r1, #2
 8003812:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003816:	f7fc fd3b 	bl	8000290 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4611      	mov	r1, r2
 8003820:	4b38      	ldr	r3, [pc, #224]	; (8003904 <UART_SetConfig+0x4e4>)
 8003822:	fba3 2301 	umull	r2, r3, r3, r1
 8003826:	095b      	lsrs	r3, r3, #5
 8003828:	2264      	movs	r2, #100	; 0x64
 800382a:	fb02 f303 	mul.w	r3, r2, r3
 800382e:	1acb      	subs	r3, r1, r3
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	3332      	adds	r3, #50	; 0x32
 8003834:	4a33      	ldr	r2, [pc, #204]	; (8003904 <UART_SetConfig+0x4e4>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003840:	441c      	add	r4, r3
 8003842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003846:	2200      	movs	r2, #0
 8003848:	673b      	str	r3, [r7, #112]	; 0x70
 800384a:	677a      	str	r2, [r7, #116]	; 0x74
 800384c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003850:	4642      	mov	r2, r8
 8003852:	464b      	mov	r3, r9
 8003854:	1891      	adds	r1, r2, r2
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	415b      	adcs	r3, r3
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003860:	4641      	mov	r1, r8
 8003862:	1851      	adds	r1, r2, r1
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	4649      	mov	r1, r9
 8003868:	414b      	adcs	r3, r1
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003878:	4659      	mov	r1, fp
 800387a:	00cb      	lsls	r3, r1, #3
 800387c:	4651      	mov	r1, sl
 800387e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003882:	4651      	mov	r1, sl
 8003884:	00ca      	lsls	r2, r1, #3
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	4603      	mov	r3, r0
 800388c:	4642      	mov	r2, r8
 800388e:	189b      	adds	r3, r3, r2
 8003890:	66bb      	str	r3, [r7, #104]	; 0x68
 8003892:	464b      	mov	r3, r9
 8003894:	460a      	mov	r2, r1
 8003896:	eb42 0303 	adc.w	r3, r2, r3
 800389a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	663b      	str	r3, [r7, #96]	; 0x60
 80038a6:	667a      	str	r2, [r7, #100]	; 0x64
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038b4:	4649      	mov	r1, r9
 80038b6:	008b      	lsls	r3, r1, #2
 80038b8:	4641      	mov	r1, r8
 80038ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038be:	4641      	mov	r1, r8
 80038c0:	008a      	lsls	r2, r1, #2
 80038c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038c6:	f7fc fce3 	bl	8000290 <__aeabi_uldivmod>
 80038ca:	4602      	mov	r2, r0
 80038cc:	460b      	mov	r3, r1
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <UART_SetConfig+0x4e4>)
 80038d0:	fba3 1302 	umull	r1, r3, r3, r2
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	2164      	movs	r1, #100	; 0x64
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	3332      	adds	r3, #50	; 0x32
 80038e2:	4a08      	ldr	r2, [pc, #32]	; (8003904 <UART_SetConfig+0x4e4>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	f003 020f 	and.w	r2, r3, #15
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4422      	add	r2, r4
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	bf00      	nop
 80038fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038fe:	46bd      	mov	sp, r7
 8003900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003904:	51eb851f 	.word	0x51eb851f

08003908 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003908:	b084      	sub	sp, #16
 800390a:	b580      	push	{r7, lr}
 800390c:	b084      	sub	sp, #16
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	f107 001c 	add.w	r0, r7, #28
 8003916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800391a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800391e:	2b01      	cmp	r3, #1
 8003920:	d123      	bne.n	800396a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800394a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800394e:	2b01      	cmp	r3, #1
 8003950:	d105      	bne.n	800395e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 faa0 	bl	8003ea4 <USB_CoreReset>
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]
 8003968:	e01b      	b.n	80039a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fa94 	bl	8003ea4 <USB_CoreReset>
 800397c:	4603      	mov	r3, r0
 800397e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003980:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
 8003994:	e005      	b.n	80039a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039a2:	7fbb      	ldrb	r3, [r7, #30]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d10b      	bne.n	80039c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f043 0206 	orr.w	r2, r3, #6
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039cc:	b004      	add	sp, #16
 80039ce:	4770      	bx	lr

080039d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f023 0201 	bic.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
 80039fa:	460b      	mov	r3, r1
 80039fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a0e:	78fb      	ldrb	r3, [r7, #3]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d115      	bne.n	8003a40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a20:	200a      	movs	r0, #10
 8003a22:	f7fd fb35 	bl	8001090 <HAL_Delay>
      ms += 10U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	330a      	adds	r3, #10
 8003a2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fa2b 	bl	8003e88 <USB_GetMode>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d01e      	beq.n	8003a76 <USB_SetCurrentMode+0x84>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2bc7      	cmp	r3, #199	; 0xc7
 8003a3c:	d9f0      	bls.n	8003a20 <USB_SetCurrentMode+0x2e>
 8003a3e:	e01a      	b.n	8003a76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d115      	bne.n	8003a72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a52:	200a      	movs	r0, #10
 8003a54:	f7fd fb1c 	bl	8001090 <HAL_Delay>
      ms += 10U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	330a      	adds	r3, #10
 8003a5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa12 	bl	8003e88 <USB_GetMode>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <USB_SetCurrentMode+0x84>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2bc7      	cmp	r3, #199	; 0xc7
 8003a6e:	d9f0      	bls.n	8003a52 <USB_SetCurrentMode+0x60>
 8003a70:	e001      	b.n	8003a76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e005      	b.n	8003a82 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2bc8      	cmp	r3, #200	; 0xc8
 8003a7a:	d101      	bne.n	8003a80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	e009      	b.n	8003ac0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3340      	adds	r3, #64	; 0x40
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	3301      	adds	r3, #1
 8003abe:	613b      	str	r3, [r7, #16]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b0e      	cmp	r3, #14
 8003ac4:	d9f2      	bls.n	8003aac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ac6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d11c      	bne.n	8003b08 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003adc:	f043 0302 	orr.w	r3, r3, #2
 8003ae0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
 8003b06:	e00b      	b.n	8003b20 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b26:	461a      	mov	r2, r3
 8003b28:	2300      	movs	r3, #0
 8003b2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d10d      	bne.n	8003b50 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d104      	bne.n	8003b46 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f968 	bl	8003e14 <USB_SetDevSpeed>
 8003b44:	e008      	b.n	8003b58 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b46:	2101      	movs	r1, #1
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f963 	bl	8003e14 <USB_SetDevSpeed>
 8003b4e:	e003      	b.n	8003b58 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b50:	2103      	movs	r1, #3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f95e 	bl	8003e14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b58:	2110      	movs	r1, #16
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f8fa 	bl	8003d54 <USB_FlushTxFifo>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f924 	bl	8003db8 <USB_FlushRxFifo>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b80:	461a      	mov	r2, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e043      	b.n	8003c2c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bba:	d118      	bne.n	8003bee <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e013      	b.n	8003c00 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	461a      	mov	r2, r3
 8003be6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e008      	b.n	8003c00 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	2300      	movs	r3, #0
 8003c10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
 8003c2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c30:	461a      	mov	r2, r3
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d3b5      	bcc.n	8003ba4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e043      	b.n	8003cc6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c54:	d118      	bne.n	8003c88 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e013      	b.n	8003c9a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e008      	b.n	8003c9a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c94:	461a      	mov	r2, r3
 8003c96:	2300      	movs	r3, #0
 8003c98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2300      	movs	r3, #0
 8003caa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cca:	461a      	mov	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d3b5      	bcc.n	8003c3e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cf2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d105      	bne.n	8003d08 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f043 0210 	orr.w	r2, r3, #16
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699a      	ldr	r2, [r3, #24]
 8003d0c:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <USB_DevInit+0x2c4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f043 0208 	orr.w	r2, r3, #8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d38:	f043 0304 	orr.w	r3, r3, #4
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d4c:	b004      	add	sp, #16
 8003d4e:	4770      	bx	lr
 8003d50:	803c3800 	.word	0x803c3800

08003d54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	3301      	adds	r3, #1
 8003d66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003d6e:	d901      	bls.n	8003d74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e01b      	b.n	8003dac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	daf2      	bge.n	8003d62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	019b      	lsls	r3, r3, #6
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003d98:	d901      	bls.n	8003d9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e006      	b.n	8003dac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f003 0320 	and.w	r3, r3, #32
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d0f0      	beq.n	8003d8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003dd0:	d901      	bls.n	8003dd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e018      	b.n	8003e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	daf2      	bge.n	8003dc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2210      	movs	r2, #16
 8003de6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3301      	adds	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003df4:	d901      	bls.n	8003dfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e006      	b.n	8003e08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d0f0      	beq.n	8003de8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b085      	sub	sp, #20
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e60:	f023 0303 	bic.w	r3, r3, #3
 8003e64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0301 	and.w	r3, r3, #1
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ebc:	d901      	bls.n	8003ec2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e01b      	b.n	8003efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	daf2      	bge.n	8003eb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3301      	adds	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ee6:	d901      	bls.n	8003eec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e006      	b.n	8003efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d0f0      	beq.n	8003eda <USB_CoreReset+0x36>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003f0e:	4b87      	ldr	r3, [pc, #540]	; (800412c <MX_LWIP_Init+0x224>)
 8003f10:	22c0      	movs	r2, #192	; 0xc0
 8003f12:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003f14:	4b85      	ldr	r3, [pc, #532]	; (800412c <MX_LWIP_Init+0x224>)
 8003f16:	22a8      	movs	r2, #168	; 0xa8
 8003f18:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003f1a:	4b84      	ldr	r3, [pc, #528]	; (800412c <MX_LWIP_Init+0x224>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 194;
 8003f20:	4b82      	ldr	r3, [pc, #520]	; (800412c <MX_LWIP_Init+0x224>)
 8003f22:	22c2      	movs	r2, #194	; 0xc2
 8003f24:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003f26:	4b82      	ldr	r3, [pc, #520]	; (8004130 <MX_LWIP_Init+0x228>)
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003f2c:	4b80      	ldr	r3, [pc, #512]	; (8004130 <MX_LWIP_Init+0x228>)
 8003f2e:	22ff      	movs	r2, #255	; 0xff
 8003f30:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003f32:	4b7f      	ldr	r3, [pc, #508]	; (8004130 <MX_LWIP_Init+0x228>)
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003f38:	4b7d      	ldr	r3, [pc, #500]	; (8004130 <MX_LWIP_Init+0x228>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003f3e:	4b7d      	ldr	r3, [pc, #500]	; (8004134 <MX_LWIP_Init+0x22c>)
 8003f40:	22c0      	movs	r2, #192	; 0xc0
 8003f42:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003f44:	4b7b      	ldr	r3, [pc, #492]	; (8004134 <MX_LWIP_Init+0x22c>)
 8003f46:	22a8      	movs	r2, #168	; 0xa8
 8003f48:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003f4a:	4b7a      	ldr	r3, [pc, #488]	; (8004134 <MX_LWIP_Init+0x22c>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003f50:	4b78      	ldr	r3, [pc, #480]	; (8004134 <MX_LWIP_Init+0x22c>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003f56:	f000 fd15 	bl	8004984 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003f5a:	4b74      	ldr	r3, [pc, #464]	; (800412c <MX_LWIP_Init+0x224>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	061a      	lsls	r2, r3, #24
 8003f60:	4b72      	ldr	r3, [pc, #456]	; (800412c <MX_LWIP_Init+0x224>)
 8003f62:	785b      	ldrb	r3, [r3, #1]
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	4b70      	ldr	r3, [pc, #448]	; (800412c <MX_LWIP_Init+0x224>)
 8003f6a:	789b      	ldrb	r3, [r3, #2]
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	4a6e      	ldr	r2, [pc, #440]	; (800412c <MX_LWIP_Init+0x224>)
 8003f72:	78d2      	ldrb	r2, [r2, #3]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	061a      	lsls	r2, r3, #24
 8003f78:	4b6c      	ldr	r3, [pc, #432]	; (800412c <MX_LWIP_Init+0x224>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	0619      	lsls	r1, r3, #24
 8003f7e:	4b6b      	ldr	r3, [pc, #428]	; (800412c <MX_LWIP_Init+0x224>)
 8003f80:	785b      	ldrb	r3, [r3, #1]
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	4319      	orrs	r1, r3
 8003f86:	4b69      	ldr	r3, [pc, #420]	; (800412c <MX_LWIP_Init+0x224>)
 8003f88:	789b      	ldrb	r3, [r3, #2]
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	4967      	ldr	r1, [pc, #412]	; (800412c <MX_LWIP_Init+0x224>)
 8003f90:	78c9      	ldrb	r1, [r1, #3]
 8003f92:	430b      	orrs	r3, r1
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	4b63      	ldr	r3, [pc, #396]	; (800412c <MX_LWIP_Init+0x224>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	0619      	lsls	r1, r3, #24
 8003fa2:	4b62      	ldr	r3, [pc, #392]	; (800412c <MX_LWIP_Init+0x224>)
 8003fa4:	785b      	ldrb	r3, [r3, #1]
 8003fa6:	041b      	lsls	r3, r3, #16
 8003fa8:	4319      	orrs	r1, r3
 8003faa:	4b60      	ldr	r3, [pc, #384]	; (800412c <MX_LWIP_Init+0x224>)
 8003fac:	789b      	ldrb	r3, [r3, #2]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	495e      	ldr	r1, [pc, #376]	; (800412c <MX_LWIP_Init+0x224>)
 8003fb4:	78c9      	ldrb	r1, [r1, #3]
 8003fb6:	430b      	orrs	r3, r1
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	4b5a      	ldr	r3, [pc, #360]	; (800412c <MX_LWIP_Init+0x224>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	0619      	lsls	r1, r3, #24
 8003fc6:	4b59      	ldr	r3, [pc, #356]	; (800412c <MX_LWIP_Init+0x224>)
 8003fc8:	785b      	ldrb	r3, [r3, #1]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	4319      	orrs	r1, r3
 8003fce:	4b57      	ldr	r3, [pc, #348]	; (800412c <MX_LWIP_Init+0x224>)
 8003fd0:	789b      	ldrb	r3, [r3, #2]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	4955      	ldr	r1, [pc, #340]	; (800412c <MX_LWIP_Init+0x224>)
 8003fd8:	78c9      	ldrb	r1, [r1, #3]
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	0e1b      	lsrs	r3, r3, #24
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	4a55      	ldr	r2, [pc, #340]	; (8004138 <MX_LWIP_Init+0x230>)
 8003fe2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003fe4:	4b52      	ldr	r3, [pc, #328]	; (8004130 <MX_LWIP_Init+0x228>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	061a      	lsls	r2, r3, #24
 8003fea:	4b51      	ldr	r3, [pc, #324]	; (8004130 <MX_LWIP_Init+0x228>)
 8003fec:	785b      	ldrb	r3, [r3, #1]
 8003fee:	041b      	lsls	r3, r3, #16
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	4b4f      	ldr	r3, [pc, #316]	; (8004130 <MX_LWIP_Init+0x228>)
 8003ff4:	789b      	ldrb	r3, [r3, #2]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	4a4d      	ldr	r2, [pc, #308]	; (8004130 <MX_LWIP_Init+0x228>)
 8003ffc:	78d2      	ldrb	r2, [r2, #3]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	061a      	lsls	r2, r3, #24
 8004002:	4b4b      	ldr	r3, [pc, #300]	; (8004130 <MX_LWIP_Init+0x228>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	0619      	lsls	r1, r3, #24
 8004008:	4b49      	ldr	r3, [pc, #292]	; (8004130 <MX_LWIP_Init+0x228>)
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	4319      	orrs	r1, r3
 8004010:	4b47      	ldr	r3, [pc, #284]	; (8004130 <MX_LWIP_Init+0x228>)
 8004012:	789b      	ldrb	r3, [r3, #2]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	430b      	orrs	r3, r1
 8004018:	4945      	ldr	r1, [pc, #276]	; (8004130 <MX_LWIP_Init+0x228>)
 800401a:	78c9      	ldrb	r1, [r1, #3]
 800401c:	430b      	orrs	r3, r1
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004024:	431a      	orrs	r2, r3
 8004026:	4b42      	ldr	r3, [pc, #264]	; (8004130 <MX_LWIP_Init+0x228>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	0619      	lsls	r1, r3, #24
 800402c:	4b40      	ldr	r3, [pc, #256]	; (8004130 <MX_LWIP_Init+0x228>)
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	4319      	orrs	r1, r3
 8004034:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <MX_LWIP_Init+0x228>)
 8004036:	789b      	ldrb	r3, [r3, #2]
 8004038:	021b      	lsls	r3, r3, #8
 800403a:	430b      	orrs	r3, r1
 800403c:	493c      	ldr	r1, [pc, #240]	; (8004130 <MX_LWIP_Init+0x228>)
 800403e:	78c9      	ldrb	r1, [r1, #3]
 8004040:	430b      	orrs	r3, r1
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004048:	431a      	orrs	r2, r3
 800404a:	4b39      	ldr	r3, [pc, #228]	; (8004130 <MX_LWIP_Init+0x228>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	0619      	lsls	r1, r3, #24
 8004050:	4b37      	ldr	r3, [pc, #220]	; (8004130 <MX_LWIP_Init+0x228>)
 8004052:	785b      	ldrb	r3, [r3, #1]
 8004054:	041b      	lsls	r3, r3, #16
 8004056:	4319      	orrs	r1, r3
 8004058:	4b35      	ldr	r3, [pc, #212]	; (8004130 <MX_LWIP_Init+0x228>)
 800405a:	789b      	ldrb	r3, [r3, #2]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	430b      	orrs	r3, r1
 8004060:	4933      	ldr	r1, [pc, #204]	; (8004130 <MX_LWIP_Init+0x228>)
 8004062:	78c9      	ldrb	r1, [r1, #3]
 8004064:	430b      	orrs	r3, r1
 8004066:	0e1b      	lsrs	r3, r3, #24
 8004068:	4313      	orrs	r3, r2
 800406a:	4a34      	ldr	r2, [pc, #208]	; (800413c <MX_LWIP_Init+0x234>)
 800406c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <MX_LWIP_Init+0x22c>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	061a      	lsls	r2, r3, #24
 8004074:	4b2f      	ldr	r3, [pc, #188]	; (8004134 <MX_LWIP_Init+0x22c>)
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	041b      	lsls	r3, r3, #16
 800407a:	431a      	orrs	r2, r3
 800407c:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <MX_LWIP_Init+0x22c>)
 800407e:	789b      	ldrb	r3, [r3, #2]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	4313      	orrs	r3, r2
 8004084:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <MX_LWIP_Init+0x22c>)
 8004086:	78d2      	ldrb	r2, [r2, #3]
 8004088:	4313      	orrs	r3, r2
 800408a:	061a      	lsls	r2, r3, #24
 800408c:	4b29      	ldr	r3, [pc, #164]	; (8004134 <MX_LWIP_Init+0x22c>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	0619      	lsls	r1, r3, #24
 8004092:	4b28      	ldr	r3, [pc, #160]	; (8004134 <MX_LWIP_Init+0x22c>)
 8004094:	785b      	ldrb	r3, [r3, #1]
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	4319      	orrs	r1, r3
 800409a:	4b26      	ldr	r3, [pc, #152]	; (8004134 <MX_LWIP_Init+0x22c>)
 800409c:	789b      	ldrb	r3, [r3, #2]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	430b      	orrs	r3, r1
 80040a2:	4924      	ldr	r1, [pc, #144]	; (8004134 <MX_LWIP_Init+0x22c>)
 80040a4:	78c9      	ldrb	r1, [r1, #3]
 80040a6:	430b      	orrs	r3, r1
 80040a8:	021b      	lsls	r3, r3, #8
 80040aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040ae:	431a      	orrs	r2, r3
 80040b0:	4b20      	ldr	r3, [pc, #128]	; (8004134 <MX_LWIP_Init+0x22c>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	0619      	lsls	r1, r3, #24
 80040b6:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <MX_LWIP_Init+0x22c>)
 80040b8:	785b      	ldrb	r3, [r3, #1]
 80040ba:	041b      	lsls	r3, r3, #16
 80040bc:	4319      	orrs	r1, r3
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <MX_LWIP_Init+0x22c>)
 80040c0:	789b      	ldrb	r3, [r3, #2]
 80040c2:	021b      	lsls	r3, r3, #8
 80040c4:	430b      	orrs	r3, r1
 80040c6:	491b      	ldr	r1, [pc, #108]	; (8004134 <MX_LWIP_Init+0x22c>)
 80040c8:	78c9      	ldrb	r1, [r1, #3]
 80040ca:	430b      	orrs	r3, r1
 80040cc:	0a1b      	lsrs	r3, r3, #8
 80040ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040d2:	431a      	orrs	r2, r3
 80040d4:	4b17      	ldr	r3, [pc, #92]	; (8004134 <MX_LWIP_Init+0x22c>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	0619      	lsls	r1, r3, #24
 80040da:	4b16      	ldr	r3, [pc, #88]	; (8004134 <MX_LWIP_Init+0x22c>)
 80040dc:	785b      	ldrb	r3, [r3, #1]
 80040de:	041b      	lsls	r3, r3, #16
 80040e0:	4319      	orrs	r1, r3
 80040e2:	4b14      	ldr	r3, [pc, #80]	; (8004134 <MX_LWIP_Init+0x22c>)
 80040e4:	789b      	ldrb	r3, [r3, #2]
 80040e6:	021b      	lsls	r3, r3, #8
 80040e8:	430b      	orrs	r3, r1
 80040ea:	4912      	ldr	r1, [pc, #72]	; (8004134 <MX_LWIP_Init+0x22c>)
 80040ec:	78c9      	ldrb	r1, [r1, #3]
 80040ee:	430b      	orrs	r3, r1
 80040f0:	0e1b      	lsrs	r3, r3, #24
 80040f2:	4313      	orrs	r3, r2
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <MX_LWIP_Init+0x238>)
 80040f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80040f8:	4b12      	ldr	r3, [pc, #72]	; (8004144 <MX_LWIP_Init+0x23c>)
 80040fa:	9302      	str	r3, [sp, #8]
 80040fc:	4b12      	ldr	r3, [pc, #72]	; (8004148 <MX_LWIP_Init+0x240>)
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	2300      	movs	r3, #0
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	4b0e      	ldr	r3, [pc, #56]	; (8004140 <MX_LWIP_Init+0x238>)
 8004106:	4a0d      	ldr	r2, [pc, #52]	; (800413c <MX_LWIP_Init+0x234>)
 8004108:	490b      	ldr	r1, [pc, #44]	; (8004138 <MX_LWIP_Init+0x230>)
 800410a:	4810      	ldr	r0, [pc, #64]	; (800414c <MX_LWIP_Init+0x244>)
 800410c:	f001 f926 	bl	800535c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004110:	480e      	ldr	r0, [pc, #56]	; (800414c <MX_LWIP_Init+0x244>)
 8004112:	f001 fad5 	bl	80056c0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8004116:	480d      	ldr	r0, [pc, #52]	; (800414c <MX_LWIP_Init+0x244>)
 8004118:	f001 fae2 	bl	80056e0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800411c:	490c      	ldr	r1, [pc, #48]	; (8004150 <MX_LWIP_Init+0x248>)
 800411e:	480b      	ldr	r0, [pc, #44]	; (800414c <MX_LWIP_Init+0x244>)
 8004120:	f001 fbe0 	bl	80058e4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	2000061c 	.word	0x2000061c
 8004130:	20000620 	.word	0x20000620
 8004134:	20000624 	.word	0x20000624
 8004138:	20000610 	.word	0x20000610
 800413c:	20000614 	.word	0x20000614
 8004140:	20000618 	.word	0x20000618
 8004144:	0800e1a1 	.word	0x0800e1a1
 8004148:	08004469 	.word	0x08004469
 800414c:	200005dc 	.word	0x200005dc
 8004150:	080041ad 	.word	0x080041ad

08004154 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800415c:	f7fc ff8c 	bl	8001078 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <Ethernet_Link_Periodic_Handle+0x30>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b63      	cmp	r3, #99	; 0x63
 800416a:	d907      	bls.n	800417c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800416c:	f7fc ff84 	bl	8001078 <HAL_GetTick>
 8004170:	4603      	mov	r3, r0
 8004172:	4a04      	ldr	r2, [pc, #16]	; (8004184 <Ethernet_Link_Periodic_Handle+0x30>)
 8004174:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fada 	bl	8004730 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200005d8 	.word	0x200005d8

08004188 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800418c:	4806      	ldr	r0, [pc, #24]	; (80041a8 <MX_LWIP_Process+0x20>)
 800418e:	f000 f94b 	bl	8004428 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004192:	f007 fc19 	bl	800b9c8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004196:	4804      	ldr	r0, [pc, #16]	; (80041a8 <MX_LWIP_Process+0x20>)
 8004198:	f7ff ffdc 	bl	8004154 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
ethernet_link_status_updated(&gnetif);
 800419c:	4802      	ldr	r0, [pc, #8]	; (80041a8 <MX_LWIP_Process+0x20>)
 800419e:	f000 f805 	bl	80041ac <ethernet_link_status_updated>
/* USER CODE END 4_3 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	200005dc 	.word	0x200005dc

080041ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80041cc:	4b40      	ldr	r3, [pc, #256]	; (80042d0 <low_level_init+0x110>)
 80041ce:	4a41      	ldr	r2, [pc, #260]	; (80042d4 <low_level_init+0x114>)
 80041d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80041d2:	2300      	movs	r3, #0
 80041d4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80041da:	23e1      	movs	r3, #225	; 0xe1
 80041dc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80041de:	2300      	movs	r3, #0
 80041e0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80041e2:	2300      	movs	r3, #0
 80041e4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80041e6:	2300      	movs	r3, #0
 80041e8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80041ea:	4a39      	ldr	r2, [pc, #228]	; (80042d0 <low_level_init+0x110>)
 80041ec:	f107 0308 	add.w	r3, r7, #8
 80041f0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80041f2:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <low_level_init+0x110>)
 80041f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80041f8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80041fa:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <low_level_init+0x110>)
 80041fc:	4a36      	ldr	r2, [pc, #216]	; (80042d8 <low_level_init+0x118>)
 80041fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004200:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <low_level_init+0x110>)
 8004202:	4a36      	ldr	r2, [pc, #216]	; (80042dc <low_level_init+0x11c>)
 8004204:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004206:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <low_level_init+0x110>)
 8004208:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800420c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800420e:	4830      	ldr	r0, [pc, #192]	; (80042d0 <low_level_init+0x110>)
 8004210:	f7fd f848 	bl	80012a4 <HAL_ETH_Init>
 8004214:	4603      	mov	r3, r0
 8004216:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004218:	2238      	movs	r2, #56	; 0x38
 800421a:	2100      	movs	r1, #0
 800421c:	4830      	ldr	r0, [pc, #192]	; (80042e0 <low_level_init+0x120>)
 800421e:	f00a f9fa 	bl	800e616 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004222:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <low_level_init+0x120>)
 8004224:	2221      	movs	r2, #33	; 0x21
 8004226:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004228:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <low_level_init+0x120>)
 800422a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800422e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <low_level_init+0x120>)
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004236:	482b      	ldr	r0, [pc, #172]	; (80042e4 <low_level_init+0x124>)
 8004238:	f000 ff58 	bl	80050ec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2206      	movs	r2, #6
 8004240:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004244:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <low_level_init+0x110>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004250:	4b1f      	ldr	r3, [pc, #124]	; (80042d0 <low_level_init+0x110>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	785a      	ldrb	r2, [r3, #1]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800425c:	4b1c      	ldr	r3, [pc, #112]	; (80042d0 <low_level_init+0x110>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	789a      	ldrb	r2, [r3, #2]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004268:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <low_level_init+0x110>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	78da      	ldrb	r2, [r3, #3]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <low_level_init+0x110>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	791a      	ldrb	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <low_level_init+0x110>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	795a      	ldrb	r2, [r3, #5]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004292:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800429a:	f043 030a 	orr.w	r3, r3, #10
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80042a6:	4910      	ldr	r1, [pc, #64]	; (80042e8 <low_level_init+0x128>)
 80042a8:	4810      	ldr	r0, [pc, #64]	; (80042ec <low_level_init+0x12c>)
 80042aa:	f7fc fd1e 	bl	8000cea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80042ae:	480f      	ldr	r0, [pc, #60]	; (80042ec <low_level_init+0x12c>)
 80042b0:	f7fc fd4d 	bl	8000d4e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d103      	bne.n	80042c2 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fa38 	bl	8004730 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80042c0:	e001      	b.n	80042c6 <low_level_init+0x106>
    Error_Handler();
 80042c2:	f7fc fb13 	bl	80008ec <Error_Handler>
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200050f4 	.word	0x200050f4
 80042d4:	40028000 	.word	0x40028000
 80042d8:	20005054 	.word	0x20005054
 80042dc:	20004fb4 	.word	0x20004fb4
 80042e0:	200051a4 	.word	0x200051a4
 80042e4:	08011d80 	.word	0x08011d80
 80042e8:	2000000c 	.word	0x2000000c
 80042ec:	200051dc 	.word	0x200051dc

080042f0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b092      	sub	sp, #72	; 0x48
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004308:	f107 030c 	add.w	r3, r7, #12
 800430c:	2230      	movs	r2, #48	; 0x30
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f00a f980 	bl	800e616 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004316:	f107 030c 	add.w	r3, r7, #12
 800431a:	2230      	movs	r2, #48	; 0x30
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f00a f979 	bl	800e616 <memset>

  for(q = p; q != NULL; q = q->next)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	643b      	str	r3, [r7, #64]	; 0x40
 8004328:	e045      	b.n	80043b6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800432a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432c:	2b03      	cmp	r3, #3
 800432e:	d902      	bls.n	8004336 <low_level_output+0x46>
      return ERR_IF;
 8004330:	f06f 030b 	mvn.w	r3, #11
 8004334:	e055      	b.n	80043e2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004338:	6859      	ldr	r1, [r3, #4]
 800433a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800433c:	4613      	mov	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	3348      	adds	r3, #72	; 0x48
 8004346:	443b      	add	r3, r7
 8004348:	3b3c      	subs	r3, #60	; 0x3c
 800434a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800434c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434e:	895b      	ldrh	r3, [r3, #10]
 8004350:	4619      	mov	r1, r3
 8004352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004354:	4613      	mov	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	3348      	adds	r3, #72	; 0x48
 800435e:	443b      	add	r3, r7
 8004360:	3b38      	subs	r3, #56	; 0x38
 8004362:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004366:	2b00      	cmp	r3, #0
 8004368:	d011      	beq.n	800438e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800436a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	f107 000c 	add.w	r0, r7, #12
 8004372:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004374:	460b      	mov	r3, r1
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	440b      	add	r3, r1
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	18c1      	adds	r1, r0, r3
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	3348      	adds	r3, #72	; 0x48
 8004388:	443b      	add	r3, r7
 800438a:	3b34      	subs	r3, #52	; 0x34
 800438c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800438e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d109      	bne.n	80043aa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	3348      	adds	r3, #72	; 0x48
 80043a2:	443b      	add	r3, r7
 80043a4:	3b34      	subs	r3, #52	; 0x34
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80043aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ac:	3301      	adds	r3, #1
 80043ae:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80043b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	643b      	str	r3, [r7, #64]	; 0x40
 80043b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1b6      	bne.n	800432a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	891b      	ldrh	r3, [r3, #8]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <low_level_output+0xfc>)
 80043c4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <low_level_output+0xfc>)
 80043c8:	f107 030c 	add.w	r3, r7, #12
 80043cc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80043ce:	4a07      	ldr	r2, [pc, #28]	; (80043ec <low_level_output+0xfc>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80043d4:	2214      	movs	r2, #20
 80043d6:	4905      	ldr	r1, [pc, #20]	; (80043ec <low_level_output+0xfc>)
 80043d8:	4805      	ldr	r0, [pc, #20]	; (80043f0 <low_level_output+0x100>)
 80043da:	f7fd f899 	bl	8001510 <HAL_ETH_Transmit>

  return errval;
 80043de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3748      	adds	r7, #72	; 0x48
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	200051a4 	.word	0x200051a4
 80043f0:	200050f4 	.word	0x200050f4

080043f4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <low_level_input+0x2c>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004408:	f107 030c 	add.w	r3, r7, #12
 800440c:	4619      	mov	r1, r3
 800440e:	4805      	ldr	r0, [pc, #20]	; (8004424 <low_level_input+0x30>)
 8004410:	f7fd f912 	bl	8001638 <HAL_ETH_ReadData>
  }

  return p;
 8004414:	68fb      	ldr	r3, [r7, #12]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20004fb0 	.word	0x20004fb0
 8004424:	200050f4 	.word	0x200050f4

08004428 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff ffdd 	bl	80043f4 <low_level_input>
 800443a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00a      	beq.n	8004458 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	4798      	blx	r3
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f001 fdc6 	bl	8005fe4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1ea      	bne.n	8004434 <ethernetif_input+0xc>
}
 800445e:	bf00      	nop
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <ethernetif_init+0x1c>
 8004476:	4b0e      	ldr	r3, [pc, #56]	; (80044b0 <ethernetif_init+0x48>)
 8004478:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800447c:	490d      	ldr	r1, [pc, #52]	; (80044b4 <ethernetif_init+0x4c>)
 800447e:	480e      	ldr	r0, [pc, #56]	; (80044b8 <ethernetif_init+0x50>)
 8004480:	f00a f864 	bl	800e54c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2273      	movs	r2, #115	; 0x73
 8004488:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2274      	movs	r2, #116	; 0x74
 8004490:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <ethernetif_init+0x54>)
 8004498:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <ethernetif_init+0x58>)
 800449e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fe8d 	bl	80041c0 <low_level_init>

  return ERR_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	0800f388 	.word	0x0800f388
 80044b4:	0800f3a4 	.word	0x0800f3a4
 80044b8:	0800f3b4 	.word	0x0800f3b4
 80044bc:	0800c659 	.word	0x0800c659
 80044c0:	080042f1 	.word	0x080042f1

080044c4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80044d0:	68f9      	ldr	r1, [r7, #12]
 80044d2:	4807      	ldr	r0, [pc, #28]	; (80044f0 <pbuf_free_custom+0x2c>)
 80044d4:	f000 feec 	bl	80052b0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <pbuf_free_custom+0x30>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d102      	bne.n	80044e6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <pbuf_free_custom+0x30>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
  }
}
 80044e6:	bf00      	nop
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	08011d80 	.word	0x08011d80
 80044f4:	20004fb0 	.word	0x20004fb0

080044f8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044fc:	f7fc fdbc 	bl	8001078 <HAL_GetTick>
 8004500:	4603      	mov	r3, r0
}
 8004502:	4618      	mov	r0, r3
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b08e      	sub	sp, #56	; 0x38
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	605a      	str	r2, [r3, #4]
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	60da      	str	r2, [r3, #12]
 800451e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a55      	ldr	r2, [pc, #340]	; (800467c <HAL_ETH_MspInit+0x174>)
 8004526:	4293      	cmp	r3, r2
 8004528:	f040 80a4 	bne.w	8004674 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800452c:	2300      	movs	r3, #0
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	4b53      	ldr	r3, [pc, #332]	; (8004680 <HAL_ETH_MspInit+0x178>)
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	4a52      	ldr	r2, [pc, #328]	; (8004680 <HAL_ETH_MspInit+0x178>)
 8004536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800453a:	6313      	str	r3, [r2, #48]	; 0x30
 800453c:	4b50      	ldr	r3, [pc, #320]	; (8004680 <HAL_ETH_MspInit+0x178>)
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004544:	623b      	str	r3, [r7, #32]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	4b4c      	ldr	r3, [pc, #304]	; (8004680 <HAL_ETH_MspInit+0x178>)
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	4a4b      	ldr	r2, [pc, #300]	; (8004680 <HAL_ETH_MspInit+0x178>)
 8004552:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004556:	6313      	str	r3, [r2, #48]	; 0x30
 8004558:	4b49      	ldr	r3, [pc, #292]	; (8004680 <HAL_ETH_MspInit+0x178>)
 800455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	4b45      	ldr	r3, [pc, #276]	; (8004680 <HAL_ETH_MspInit+0x178>)
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	4a44      	ldr	r2, [pc, #272]	; (8004680 <HAL_ETH_MspInit+0x178>)
 800456e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004572:	6313      	str	r3, [r2, #48]	; 0x30
 8004574:	4b42      	ldr	r3, [pc, #264]	; (8004680 <HAL_ETH_MspInit+0x178>)
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	4b3e      	ldr	r3, [pc, #248]	; (8004680 <HAL_ETH_MspInit+0x178>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	4a3d      	ldr	r2, [pc, #244]	; (8004680 <HAL_ETH_MspInit+0x178>)
 800458a:	f043 0304 	orr.w	r3, r3, #4
 800458e:	6313      	str	r3, [r2, #48]	; 0x30
 8004590:	4b3b      	ldr	r3, [pc, #236]	; (8004680 <HAL_ETH_MspInit+0x178>)
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_ETH_MspInit+0x178>)
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	4a36      	ldr	r2, [pc, #216]	; (8004680 <HAL_ETH_MspInit+0x178>)
 80045a6:	f043 0301 	orr.w	r3, r3, #1
 80045aa:	6313      	str	r3, [r2, #48]	; 0x30
 80045ac:	4b34      	ldr	r3, [pc, #208]	; (8004680 <HAL_ETH_MspInit+0x178>)
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	4b30      	ldr	r3, [pc, #192]	; (8004680 <HAL_ETH_MspInit+0x178>)
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	4a2f      	ldr	r2, [pc, #188]	; (8004680 <HAL_ETH_MspInit+0x178>)
 80045c2:	f043 0302 	orr.w	r3, r3, #2
 80045c6:	6313      	str	r3, [r2, #48]	; 0x30
 80045c8:	4b2d      	ldr	r3, [pc, #180]	; (8004680 <HAL_ETH_MspInit+0x178>)
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80045d4:	2300      	movs	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	4b29      	ldr	r3, [pc, #164]	; (8004680 <HAL_ETH_MspInit+0x178>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	4a28      	ldr	r2, [pc, #160]	; (8004680 <HAL_ETH_MspInit+0x178>)
 80045de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045e2:	6313      	str	r3, [r2, #48]	; 0x30
 80045e4:	4b26      	ldr	r3, [pc, #152]	; (8004680 <HAL_ETH_MspInit+0x178>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80045f0:	2332      	movs	r3, #50	; 0x32
 80045f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f4:	2302      	movs	r3, #2
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045fc:	2303      	movs	r3, #3
 80045fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004600:	230b      	movs	r3, #11
 8004602:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004608:	4619      	mov	r1, r3
 800460a:	481e      	ldr	r0, [pc, #120]	; (8004684 <HAL_ETH_MspInit+0x17c>)
 800460c:	f7fd ff4c 	bl	80024a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004610:	2386      	movs	r3, #134	; 0x86
 8004612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004614:	2302      	movs	r3, #2
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004618:	2300      	movs	r3, #0
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800461c:	2303      	movs	r3, #3
 800461e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004620:	230b      	movs	r3, #11
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004628:	4619      	mov	r1, r3
 800462a:	4817      	ldr	r0, [pc, #92]	; (8004688 <HAL_ETH_MspInit+0x180>)
 800462c:	f7fd ff3c 	bl	80024a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004636:	2302      	movs	r3, #2
 8004638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463a:	2300      	movs	r3, #0
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800463e:	2303      	movs	r3, #3
 8004640:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004642:	230b      	movs	r3, #11
 8004644:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800464a:	4619      	mov	r1, r3
 800464c:	480f      	ldr	r0, [pc, #60]	; (800468c <HAL_ETH_MspInit+0x184>)
 800464e:	f7fd ff2b 	bl	80024a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004652:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004658:	2302      	movs	r3, #2
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004660:	2303      	movs	r3, #3
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004664:	230b      	movs	r3, #11
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800466c:	4619      	mov	r1, r3
 800466e:	4808      	ldr	r0, [pc, #32]	; (8004690 <HAL_ETH_MspInit+0x188>)
 8004670:	f7fd ff1a 	bl	80024a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004674:	bf00      	nop
 8004676:	3738      	adds	r7, #56	; 0x38
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40028000 	.word	0x40028000
 8004680:	40023800 	.word	0x40023800
 8004684:	40020800 	.word	0x40020800
 8004688:	40020000 	.word	0x40020000
 800468c:	40020400 	.word	0x40020400
 8004690:	40021800 	.word	0x40021800

08004694 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004698:	4802      	ldr	r0, [pc, #8]	; (80046a4 <ETH_PHY_IO_Init+0x10>)
 800469a:	f7fd faa9 	bl	8001bf0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	200050f4 	.word	0x200050f4

080046a8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  return 0;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	68f9      	ldr	r1, [r7, #12]
 80046ca:	4807      	ldr	r0, [pc, #28]	; (80046e8 <ETH_PHY_IO_ReadReg+0x30>)
 80046cc:	f7fd f8f8 	bl	80018c0 <HAL_ETH_ReadPHYRegister>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80046d6:	f04f 33ff 	mov.w	r3, #4294967295
 80046da:	e000      	b.n	80046de <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200050f4 	.word	0x200050f4

080046ec <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	68f9      	ldr	r1, [r7, #12]
 80046fe:	4807      	ldr	r0, [pc, #28]	; (800471c <ETH_PHY_IO_WriteReg+0x30>)
 8004700:	f7fd f929 	bl	8001956 <HAL_ETH_WritePHYRegister>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295
 800470e:	e000      	b.n	8004712 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	200050f4 	.word	0x200050f4

08004720 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004724:	f7fc fca8 	bl	8001078 <HAL_GetTick>
 8004728:	4603      	mov	r3, r0
}
 800472a:	4618      	mov	r0, r3
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b0a0      	sub	sp, #128	; 0x80
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004738:	f107 030c 	add.w	r3, r7, #12
 800473c:	2264      	movs	r2, #100	; 0x64
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f009 ff68 	bl	800e616 <memset>
  int32_t PHYLinkState = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800474e:	2300      	movs	r3, #0
 8004750:	67bb      	str	r3, [r7, #120]	; 0x78
 8004752:	2300      	movs	r3, #0
 8004754:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004756:	483a      	ldr	r0, [pc, #232]	; (8004840 <ethernet_link_check_state+0x110>)
 8004758:	f7fc fba1 	bl	8000e9e <LAN8742_GetLinkState>
 800475c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004764:	089b      	lsrs	r3, r3, #2
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00c      	beq.n	800478a <ethernet_link_check_state+0x5a>
 8004770:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004772:	2b01      	cmp	r3, #1
 8004774:	dc09      	bgt.n	800478a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004776:	4833      	ldr	r0, [pc, #204]	; (8004844 <ethernet_link_check_state+0x114>)
 8004778:	f7fc fe71 	bl	800145e <HAL_ETH_Stop>
    netif_set_down(netif);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f001 f81b 	bl	80057b8 <netif_set_down>
    netif_set_link_down(netif);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f001 f87e 	bl	8005884 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004788:	e055      	b.n	8004836 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004790:	f003 0304 	and.w	r3, r3, #4
 8004794:	2b00      	cmp	r3, #0
 8004796:	d14e      	bne.n	8004836 <ethernet_link_check_state+0x106>
 8004798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800479a:	2b01      	cmp	r3, #1
 800479c:	dd4b      	ble.n	8004836 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800479e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047a0:	3b02      	subs	r3, #2
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d82a      	bhi.n	80047fc <ethernet_link_check_state+0xcc>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <ethernet_link_check_state+0x7c>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047cf 	.word	0x080047cf
 80047b4:	080047df 	.word	0x080047df
 80047b8:	080047ef 	.word	0x080047ef
      duplex = ETH_FULLDUPLEX_MODE;
 80047bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80047c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80047c8:	2301      	movs	r3, #1
 80047ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80047cc:	e017      	b.n	80047fe <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80047d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80047d8:	2301      	movs	r3, #1
 80047da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80047dc:	e00f      	b.n	80047fe <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80047de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047e2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80047e4:	2300      	movs	r3, #0
 80047e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80047e8:	2301      	movs	r3, #1
 80047ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80047ec:	e007      	b.n	80047fe <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80047f2:	2300      	movs	r3, #0
 80047f4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80047f6:	2301      	movs	r3, #1
 80047f8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80047fa:	e000      	b.n	80047fe <ethernet_link_check_state+0xce>
      break;
 80047fc:	bf00      	nop
    if(linkchanged)
 80047fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d018      	beq.n	8004836 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004804:	f107 030c 	add.w	r3, r7, #12
 8004808:	4619      	mov	r1, r3
 800480a:	480e      	ldr	r0, [pc, #56]	; (8004844 <ethernet_link_check_state+0x114>)
 800480c:	f7fd f8ec 	bl	80019e8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004816:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	4619      	mov	r1, r3
 800481e:	4809      	ldr	r0, [pc, #36]	; (8004844 <ethernet_link_check_state+0x114>)
 8004820:	f7fd f9cc 	bl	8001bbc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004824:	4807      	ldr	r0, [pc, #28]	; (8004844 <ethernet_link_check_state+0x114>)
 8004826:	f7fc fdbb 	bl	80013a0 <HAL_ETH_Start>
      netif_set_up(netif);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 ff58 	bl	80056e0 <netif_set_up>
      netif_set_link_up(netif);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fff3 	bl	800581c <netif_set_link_up>
}
 8004836:	bf00      	nop
 8004838:	3780      	adds	r7, #128	; 0x80
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	200051dc 	.word	0x200051dc
 8004844:	200050f4 	.word	0x200050f4

08004848 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af02      	add	r7, sp, #8
 800484e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004850:	4812      	ldr	r0, [pc, #72]	; (800489c <HAL_ETH_RxAllocateCallback+0x54>)
 8004852:	f000 fcbf 	bl	80051d4 <memp_malloc_pool>
 8004856:	60f8      	str	r0, [r7, #12]
  if (p)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d014      	beq.n	8004888 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f103 0220 	add.w	r2, r3, #32
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4a0d      	ldr	r2, [pc, #52]	; (80048a0 <HAL_ETH_RxAllocateCallback+0x58>)
 800486c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004876:	9201      	str	r2, [sp, #4]
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2241      	movs	r2, #65	; 0x41
 800487e:	2100      	movs	r1, #0
 8004880:	2000      	movs	r0, #0
 8004882:	f001 f9f5 	bl	8005c70 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004886:	e005      	b.n	8004894 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	08011d80 	.word	0x08011d80
 80048a0:	080044c5 	.word	0x080044c5
 80048a4:	20004fb0 	.word	0x20004fb0

080048a8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3b20      	subs	r3, #32
 80048c6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	2200      	movs	r2, #0
 80048d2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	887a      	ldrh	r2, [r7, #2]
 80048d8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e003      	b.n	80048f2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69fa      	ldr	r2, [r7, #28]
 80048f0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	e009      	b.n	8004914 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	891a      	ldrh	r2, [r3, #8]
 8004904:	887b      	ldrh	r3, [r7, #2]
 8004906:	4413      	add	r3, r2
 8004908:	b29a      	uxth	r2, r3
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f2      	bne.n	8004900 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800491a:	bf00      	nop
 800491c:	bf00      	nop
 800491e:	3724      	adds	r7, #36	; 0x24
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	021b      	lsls	r3, r3, #8
 8004936:	b21a      	sxth	r2, r3
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	0a1b      	lsrs	r3, r3, #8
 800493c:	b29b      	uxth	r3, r3
 800493e:	b21b      	sxth	r3, r3
 8004940:	4313      	orrs	r3, r2
 8004942:	b21b      	sxth	r3, r3
 8004944:	b29b      	uxth	r3, r3
}
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	061a      	lsls	r2, r3, #24
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0a1b      	lsrs	r3, r3, #8
 800496c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004970:	431a      	orrs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0e1b      	lsrs	r3, r3, #24
 8004976:	4313      	orrs	r3, r2
}
 8004978:	4618      	mov	r0, r3
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800498e:	f000 f8d5 	bl	8004b3c <mem_init>
  memp_init();
 8004992:	f000 fbdb 	bl	800514c <memp_init>
  pbuf_init();
  netif_init();
 8004996:	f000 fcd9 	bl	800534c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800499a:	f007 f857 	bl	800ba4c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800499e:	f001 fdaf 	bl	8006500 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80049a2:	f006 ffc9 	bl	800b938 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80049a6:	bf00      	nop
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <ptr_to_mem+0x20>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	4413      	add	r3, r2
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20005868 	.word	0x20005868

080049d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <mem_to_ptr+0x20>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	b29b      	uxth	r3, r3
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20005868 	.word	0x20005868

080049f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80049f8:	b590      	push	{r4, r7, lr}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004a00:	4b45      	ldr	r3, [pc, #276]	; (8004b18 <plug_holes+0x120>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d206      	bcs.n	8004a18 <plug_holes+0x20>
 8004a0a:	4b44      	ldr	r3, [pc, #272]	; (8004b1c <plug_holes+0x124>)
 8004a0c:	f240 12df 	movw	r2, #479	; 0x1df
 8004a10:	4943      	ldr	r1, [pc, #268]	; (8004b20 <plug_holes+0x128>)
 8004a12:	4844      	ldr	r0, [pc, #272]	; (8004b24 <plug_holes+0x12c>)
 8004a14:	f009 fd9a 	bl	800e54c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004a18:	4b43      	ldr	r3, [pc, #268]	; (8004b28 <plug_holes+0x130>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d306      	bcc.n	8004a30 <plug_holes+0x38>
 8004a22:	4b3e      	ldr	r3, [pc, #248]	; (8004b1c <plug_holes+0x124>)
 8004a24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004a28:	4940      	ldr	r1, [pc, #256]	; (8004b2c <plug_holes+0x134>)
 8004a2a:	483e      	ldr	r0, [pc, #248]	; (8004b24 <plug_holes+0x12c>)
 8004a2c:	f009 fd8e 	bl	800e54c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	791b      	ldrb	r3, [r3, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d006      	beq.n	8004a46 <plug_holes+0x4e>
 8004a38:	4b38      	ldr	r3, [pc, #224]	; (8004b1c <plug_holes+0x124>)
 8004a3a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004a3e:	493c      	ldr	r1, [pc, #240]	; (8004b30 <plug_holes+0x138>)
 8004a40:	4838      	ldr	r0, [pc, #224]	; (8004b24 <plug_holes+0x12c>)
 8004a42:	f009 fd83 	bl	800e54c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004a4e:	d906      	bls.n	8004a5e <plug_holes+0x66>
 8004a50:	4b32      	ldr	r3, [pc, #200]	; (8004b1c <plug_holes+0x124>)
 8004a52:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004a56:	4937      	ldr	r1, [pc, #220]	; (8004b34 <plug_holes+0x13c>)
 8004a58:	4832      	ldr	r0, [pc, #200]	; (8004b24 <plug_holes+0x12c>)
 8004a5a:	f009 fd77 	bl	800e54c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7ff ffa4 	bl	80049b0 <ptr_to_mem>
 8004a68:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d024      	beq.n	8004abc <plug_holes+0xc4>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	791b      	ldrb	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d120      	bne.n	8004abc <plug_holes+0xc4>
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <plug_holes+0x130>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d01b      	beq.n	8004abc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004a84:	4b2c      	ldr	r3, [pc, #176]	; (8004b38 <plug_holes+0x140>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d102      	bne.n	8004a94 <plug_holes+0x9c>
      lfree = mem;
 8004a8e:	4a2a      	ldr	r2, [pc, #168]	; (8004b38 <plug_holes+0x140>)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	881a      	ldrh	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004aa4:	d00a      	beq.n	8004abc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff ff80 	bl	80049b0 <ptr_to_mem>
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff ff8e 	bl	80049d4 <mem_to_ptr>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	885b      	ldrh	r3, [r3, #2]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff ff75 	bl	80049b0 <ptr_to_mem>
 8004ac6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d01f      	beq.n	8004b10 <plug_holes+0x118>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	791b      	ldrb	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d11b      	bne.n	8004b10 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004ad8:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <plug_holes+0x140>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d102      	bne.n	8004ae8 <plug_holes+0xf0>
      lfree = pmem;
 8004ae2:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <plug_holes+0x140>)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	881a      	ldrh	r2, [r3, #0]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	881b      	ldrh	r3, [r3, #0]
 8004af4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004af8:	d00a      	beq.n	8004b10 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff ff56 	bl	80049b0 <ptr_to_mem>
 8004b04:	4604      	mov	r4, r0
 8004b06:	68b8      	ldr	r0, [r7, #8]
 8004b08:	f7ff ff64 	bl	80049d4 <mem_to_ptr>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd90      	pop	{r4, r7, pc}
 8004b18:	20005868 	.word	0x20005868
 8004b1c:	0800f3dc 	.word	0x0800f3dc
 8004b20:	0800f40c 	.word	0x0800f40c
 8004b24:	0800f424 	.word	0x0800f424
 8004b28:	2000586c 	.word	0x2000586c
 8004b2c:	0800f44c 	.word	0x0800f44c
 8004b30:	0800f468 	.word	0x0800f468
 8004b34:	0800f484 	.word	0x0800f484
 8004b38:	20005870 	.word	0x20005870

08004b3c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004b42:	4b18      	ldr	r3, [pc, #96]	; (8004ba4 <mem_init+0x68>)
 8004b44:	3303      	adds	r3, #3
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <mem_init+0x6c>)
 8004b4e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004b50:	4b15      	ldr	r3, [pc, #84]	; (8004ba8 <mem_init+0x6c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b5c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004b6a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004b6e:	f7ff ff1f 	bl	80049b0 <ptr_to_mem>
 8004b72:	4603      	mov	r3, r0
 8004b74:	4a0d      	ldr	r2, [pc, #52]	; (8004bac <mem_init+0x70>)
 8004b76:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <mem_init+0x70>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <mem_init+0x70>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b88:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <mem_init+0x70>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004b92:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <mem_init+0x6c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a05      	ldr	r2, [pc, #20]	; (8004bb0 <mem_init+0x74>)
 8004b9a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20005214 	.word	0x20005214
 8004ba8:	20005868 	.word	0x20005868
 8004bac:	2000586c 	.word	0x2000586c
 8004bb0:	20005870 	.word	0x20005870

08004bb4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff ff09 	bl	80049d4 <mem_to_ptr>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff fef0 	bl	80049b0 <ptr_to_mem>
 8004bd0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	885b      	ldrh	r3, [r3, #2]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff feea 	bl	80049b0 <ptr_to_mem>
 8004bdc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004be6:	d818      	bhi.n	8004c1a <mem_link_valid+0x66>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	885b      	ldrh	r3, [r3, #2]
 8004bec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004bf0:	d813      	bhi.n	8004c1a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004bf6:	8afa      	ldrh	r2, [r7, #22]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d004      	beq.n	8004c06 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	8afa      	ldrh	r2, [r7, #22]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d109      	bne.n	8004c1a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <mem_link_valid+0x74>)
 8004c08:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d006      	beq.n	8004c1e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	885b      	ldrh	r3, [r3, #2]
 8004c14:	8afa      	ldrh	r2, [r7, #22]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d001      	beq.n	8004c1e <mem_link_valid+0x6a>
    return 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	e000      	b.n	8004c20 <mem_link_valid+0x6c>
  }
  return 1;
 8004c1e:	2301      	movs	r3, #1
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3718      	adds	r7, #24
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	2000586c 	.word	0x2000586c

08004c2c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d04c      	beq.n	8004cd4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d007      	beq.n	8004c54 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004c44:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <mem_free+0xb0>)
 8004c46:	f240 2273 	movw	r2, #627	; 0x273
 8004c4a:	4925      	ldr	r1, [pc, #148]	; (8004ce0 <mem_free+0xb4>)
 8004c4c:	4825      	ldr	r0, [pc, #148]	; (8004ce4 <mem_free+0xb8>)
 8004c4e:	f009 fc7d 	bl	800e54c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c52:	e040      	b.n	8004cd6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3b08      	subs	r3, #8
 8004c58:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004c5a:	4b23      	ldr	r3, [pc, #140]	; (8004ce8 <mem_free+0xbc>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d306      	bcc.n	8004c72 <mem_free+0x46>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f103 020c 	add.w	r2, r3, #12
 8004c6a:	4b20      	ldr	r3, [pc, #128]	; (8004cec <mem_free+0xc0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d907      	bls.n	8004c82 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004c72:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <mem_free+0xb0>)
 8004c74:	f240 227f 	movw	r2, #639	; 0x27f
 8004c78:	491d      	ldr	r1, [pc, #116]	; (8004cf0 <mem_free+0xc4>)
 8004c7a:	481a      	ldr	r0, [pc, #104]	; (8004ce4 <mem_free+0xb8>)
 8004c7c:	f009 fc66 	bl	800e54c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c80:	e029      	b.n	8004cd6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	791b      	ldrb	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d107      	bne.n	8004c9a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <mem_free+0xb0>)
 8004c8c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004c90:	4918      	ldr	r1, [pc, #96]	; (8004cf4 <mem_free+0xc8>)
 8004c92:	4814      	ldr	r0, [pc, #80]	; (8004ce4 <mem_free+0xb8>)
 8004c94:	f009 fc5a 	bl	800e54c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004c98:	e01d      	b.n	8004cd6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f7ff ff8a 	bl	8004bb4 <mem_link_valid>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d107      	bne.n	8004cb6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	; (8004cdc <mem_free+0xb0>)
 8004ca8:	f240 2295 	movw	r2, #661	; 0x295
 8004cac:	4912      	ldr	r1, [pc, #72]	; (8004cf8 <mem_free+0xcc>)
 8004cae:	480d      	ldr	r0, [pc, #52]	; (8004ce4 <mem_free+0xb8>)
 8004cb0:	f009 fc4c 	bl	800e54c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004cb4:	e00f      	b.n	8004cd6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <mem_free+0xd0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d202      	bcs.n	8004ccc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004cc6:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <mem_free+0xd0>)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7ff fe93 	bl	80049f8 <plug_holes>
 8004cd2:	e000      	b.n	8004cd6 <mem_free+0xaa>
    return;
 8004cd4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	0800f3dc 	.word	0x0800f3dc
 8004ce0:	0800f4b0 	.word	0x0800f4b0
 8004ce4:	0800f424 	.word	0x0800f424
 8004ce8:	20005868 	.word	0x20005868
 8004cec:	2000586c 	.word	0x2000586c
 8004cf0:	0800f4d4 	.word	0x0800f4d4
 8004cf4:	0800f4f0 	.word	0x0800f4f0
 8004cf8:	0800f518 	.word	0x0800f518
 8004cfc:	20005870 	.word	0x20005870

08004d00 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004d0c:	887b      	ldrh	r3, [r7, #2]
 8004d0e:	3303      	adds	r3, #3
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f023 0303 	bic.w	r3, r3, #3
 8004d16:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004d18:	8bfb      	ldrh	r3, [r7, #30]
 8004d1a:	2b0b      	cmp	r3, #11
 8004d1c:	d801      	bhi.n	8004d22 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004d1e:	230c      	movs	r3, #12
 8004d20:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004d22:	8bfb      	ldrh	r3, [r7, #30]
 8004d24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004d28:	d803      	bhi.n	8004d32 <mem_trim+0x32>
 8004d2a:	8bfa      	ldrh	r2, [r7, #30]
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d201      	bcs.n	8004d36 <mem_trim+0x36>
    return NULL;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e0cc      	b.n	8004ed0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004d36:	4b68      	ldr	r3, [pc, #416]	; (8004ed8 <mem_trim+0x1d8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d304      	bcc.n	8004d4a <mem_trim+0x4a>
 8004d40:	4b66      	ldr	r3, [pc, #408]	; (8004edc <mem_trim+0x1dc>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d306      	bcc.n	8004d58 <mem_trim+0x58>
 8004d4a:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <mem_trim+0x1e0>)
 8004d4c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004d50:	4964      	ldr	r1, [pc, #400]	; (8004ee4 <mem_trim+0x1e4>)
 8004d52:	4865      	ldr	r0, [pc, #404]	; (8004ee8 <mem_trim+0x1e8>)
 8004d54:	f009 fbfa 	bl	800e54c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004d58:	4b5f      	ldr	r3, [pc, #380]	; (8004ed8 <mem_trim+0x1d8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d304      	bcc.n	8004d6c <mem_trim+0x6c>
 8004d62:	4b5e      	ldr	r3, [pc, #376]	; (8004edc <mem_trim+0x1dc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d301      	bcc.n	8004d70 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	e0af      	b.n	8004ed0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3b08      	subs	r3, #8
 8004d74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004d76:	69b8      	ldr	r0, [r7, #24]
 8004d78:	f7ff fe2c 	bl	80049d4 <mem_to_ptr>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	881a      	ldrh	r2, [r3, #0]
 8004d84:	8afb      	ldrh	r3, [r7, #22]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b08      	subs	r3, #8
 8004d8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004d8e:	8bfa      	ldrh	r2, [r7, #30]
 8004d90:	8abb      	ldrh	r3, [r7, #20]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d906      	bls.n	8004da4 <mem_trim+0xa4>
 8004d96:	4b52      	ldr	r3, [pc, #328]	; (8004ee0 <mem_trim+0x1e0>)
 8004d98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004d9c:	4953      	ldr	r1, [pc, #332]	; (8004eec <mem_trim+0x1ec>)
 8004d9e:	4852      	ldr	r0, [pc, #328]	; (8004ee8 <mem_trim+0x1e8>)
 8004da0:	f009 fbd4 	bl	800e54c <iprintf>
  if (newsize > size) {
 8004da4:	8bfa      	ldrh	r2, [r7, #30]
 8004da6:	8abb      	ldrh	r3, [r7, #20]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d901      	bls.n	8004db0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004dac:	2300      	movs	r3, #0
 8004dae:	e08f      	b.n	8004ed0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004db0:	8bfa      	ldrh	r2, [r7, #30]
 8004db2:	8abb      	ldrh	r3, [r7, #20]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d101      	bne.n	8004dbc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	e089      	b.n	8004ed0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fdf5 	bl	80049b0 <ptr_to_mem>
 8004dc6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	791b      	ldrb	r3, [r3, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d13f      	bne.n	8004e50 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004dd8:	d106      	bne.n	8004de8 <mem_trim+0xe8>
 8004dda:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <mem_trim+0x1e0>)
 8004ddc:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004de0:	4943      	ldr	r1, [pc, #268]	; (8004ef0 <mem_trim+0x1f0>)
 8004de2:	4841      	ldr	r0, [pc, #260]	; (8004ee8 <mem_trim+0x1e8>)
 8004de4:	f009 fbb2 	bl	800e54c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004dee:	8afa      	ldrh	r2, [r7, #22]
 8004df0:	8bfb      	ldrh	r3, [r7, #30]
 8004df2:	4413      	add	r3, r2
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3308      	adds	r3, #8
 8004df8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004dfa:	4b3e      	ldr	r3, [pc, #248]	; (8004ef4 <mem_trim+0x1f4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d106      	bne.n	8004e12 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004e04:	89fb      	ldrh	r3, [r7, #14]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fdd2 	bl	80049b0 <ptr_to_mem>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4a39      	ldr	r2, [pc, #228]	; (8004ef4 <mem_trim+0x1f4>)
 8004e10:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004e12:	89fb      	ldrh	r3, [r7, #14]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fdcb 	bl	80049b0 <ptr_to_mem>
 8004e1a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	89ba      	ldrh	r2, [r7, #12]
 8004e26:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	8afa      	ldrh	r2, [r7, #22]
 8004e2c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	89fa      	ldrh	r2, [r7, #14]
 8004e32:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e3c:	d047      	beq.n	8004ece <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	881b      	ldrh	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff fdb4 	bl	80049b0 <ptr_to_mem>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	89fb      	ldrh	r3, [r7, #14]
 8004e4c:	8053      	strh	r3, [r2, #2]
 8004e4e:	e03e      	b.n	8004ece <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004e50:	8bfb      	ldrh	r3, [r7, #30]
 8004e52:	f103 0214 	add.w	r2, r3, #20
 8004e56:	8abb      	ldrh	r3, [r7, #20]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d838      	bhi.n	8004ece <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e5c:	8afa      	ldrh	r2, [r7, #22]
 8004e5e:	8bfb      	ldrh	r3, [r7, #30]
 8004e60:	4413      	add	r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	3308      	adds	r3, #8
 8004e66:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e70:	d106      	bne.n	8004e80 <mem_trim+0x180>
 8004e72:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <mem_trim+0x1e0>)
 8004e74:	f240 3216 	movw	r2, #790	; 0x316
 8004e78:	491d      	ldr	r1, [pc, #116]	; (8004ef0 <mem_trim+0x1f0>)
 8004e7a:	481b      	ldr	r0, [pc, #108]	; (8004ee8 <mem_trim+0x1e8>)
 8004e7c:	f009 fb66 	bl	800e54c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004e80:	89fb      	ldrh	r3, [r7, #14]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fd94 	bl	80049b0 <ptr_to_mem>
 8004e88:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004e8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ef4 <mem_trim+0x1f4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d202      	bcs.n	8004e9a <mem_trim+0x19a>
      lfree = mem2;
 8004e94:	4a17      	ldr	r2, [pc, #92]	; (8004ef4 <mem_trim+0x1f4>)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	881a      	ldrh	r2, [r3, #0]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	8afa      	ldrh	r2, [r7, #22]
 8004eac:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	89fa      	ldrh	r2, [r7, #14]
 8004eb2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ebc:	d007      	beq.n	8004ece <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff fd74 	bl	80049b0 <ptr_to_mem>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	89fb      	ldrh	r3, [r7, #14]
 8004ecc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004ece:	687b      	ldr	r3, [r7, #4]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20005868 	.word	0x20005868
 8004edc:	2000586c 	.word	0x2000586c
 8004ee0:	0800f3dc 	.word	0x0800f3dc
 8004ee4:	0800f54c 	.word	0x0800f54c
 8004ee8:	0800f424 	.word	0x0800f424
 8004eec:	0800f564 	.word	0x0800f564
 8004ef0:	0800f584 	.word	0x0800f584
 8004ef4:	20005870 	.word	0x20005870

08004ef8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b088      	sub	sp, #32
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004f02:	88fb      	ldrh	r3, [r7, #6]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <mem_malloc+0x14>
    return NULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e0d9      	b.n	80050c0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004f0c:	88fb      	ldrh	r3, [r7, #6]
 8004f0e:	3303      	adds	r3, #3
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004f18:	8bbb      	ldrh	r3, [r7, #28]
 8004f1a:	2b0b      	cmp	r3, #11
 8004f1c:	d801      	bhi.n	8004f22 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004f1e:	230c      	movs	r3, #12
 8004f20:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004f22:	8bbb      	ldrh	r3, [r7, #28]
 8004f24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f28:	d803      	bhi.n	8004f32 <mem_malloc+0x3a>
 8004f2a:	8bba      	ldrh	r2, [r7, #28]
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d201      	bcs.n	8004f36 <mem_malloc+0x3e>
    return NULL;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e0c4      	b.n	80050c0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004f36:	4b64      	ldr	r3, [pc, #400]	; (80050c8 <mem_malloc+0x1d0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fd4a 	bl	80049d4 <mem_to_ptr>
 8004f40:	4603      	mov	r3, r0
 8004f42:	83fb      	strh	r3, [r7, #30]
 8004f44:	e0b4      	b.n	80050b0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004f46:	8bfb      	ldrh	r3, [r7, #30]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff fd31 	bl	80049b0 <ptr_to_mem>
 8004f4e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	791b      	ldrb	r3, [r3, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f040 80a4 	bne.w	80050a2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	881b      	ldrh	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	8bfb      	ldrh	r3, [r7, #30]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f1a3 0208 	sub.w	r2, r3, #8
 8004f68:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	f0c0 8099 	bcc.w	80050a2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	8bfb      	ldrh	r3, [r7, #30]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f1a3 0208 	sub.w	r2, r3, #8
 8004f7e:	8bbb      	ldrh	r3, [r7, #28]
 8004f80:	3314      	adds	r3, #20
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d333      	bcc.n	8004fee <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004f86:	8bfa      	ldrh	r2, [r7, #30]
 8004f88:	8bbb      	ldrh	r3, [r7, #28]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3308      	adds	r3, #8
 8004f90:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004f92:	8a7b      	ldrh	r3, [r7, #18]
 8004f94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f98:	d106      	bne.n	8004fa8 <mem_malloc+0xb0>
 8004f9a:	4b4c      	ldr	r3, [pc, #304]	; (80050cc <mem_malloc+0x1d4>)
 8004f9c:	f240 3287 	movw	r2, #903	; 0x387
 8004fa0:	494b      	ldr	r1, [pc, #300]	; (80050d0 <mem_malloc+0x1d8>)
 8004fa2:	484c      	ldr	r0, [pc, #304]	; (80050d4 <mem_malloc+0x1dc>)
 8004fa4:	f009 fad2 	bl	800e54c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004fa8:	8a7b      	ldrh	r3, [r7, #18]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fd00 	bl	80049b0 <ptr_to_mem>
 8004fb0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	881a      	ldrh	r2, [r3, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8bfa      	ldrh	r2, [r7, #30]
 8004fc4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	8a7a      	ldrh	r2, [r7, #18]
 8004fca:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fda:	d00b      	beq.n	8004ff4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7ff fce5 	bl	80049b0 <ptr_to_mem>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	8a7b      	ldrh	r3, [r7, #18]
 8004fea:	8053      	strh	r3, [r2, #2]
 8004fec:	e002      	b.n	8004ff4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004ff4:	4b34      	ldr	r3, [pc, #208]	; (80050c8 <mem_malloc+0x1d0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d127      	bne.n	800504e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004ffe:	4b32      	ldr	r3, [pc, #200]	; (80050c8 <mem_malloc+0x1d0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005004:	e005      	b.n	8005012 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fcd0 	bl	80049b0 <ptr_to_mem>
 8005010:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	791b      	ldrb	r3, [r3, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <mem_malloc+0x12c>
 800501a:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <mem_malloc+0x1e0>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	429a      	cmp	r2, r3
 8005022:	d1f0      	bne.n	8005006 <mem_malloc+0x10e>
          }
          lfree = cur;
 8005024:	4a28      	ldr	r2, [pc, #160]	; (80050c8 <mem_malloc+0x1d0>)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800502a:	4b27      	ldr	r3, [pc, #156]	; (80050c8 <mem_malloc+0x1d0>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b2a      	ldr	r3, [pc, #168]	; (80050d8 <mem_malloc+0x1e0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d00b      	beq.n	800504e <mem_malloc+0x156>
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <mem_malloc+0x1d0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	791b      	ldrb	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d006      	beq.n	800504e <mem_malloc+0x156>
 8005040:	4b22      	ldr	r3, [pc, #136]	; (80050cc <mem_malloc+0x1d4>)
 8005042:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005046:	4925      	ldr	r1, [pc, #148]	; (80050dc <mem_malloc+0x1e4>)
 8005048:	4822      	ldr	r0, [pc, #136]	; (80050d4 <mem_malloc+0x1dc>)
 800504a:	f009 fa7f 	bl	800e54c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800504e:	8bba      	ldrh	r2, [r7, #28]
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	4413      	add	r3, r2
 8005054:	3308      	adds	r3, #8
 8005056:	4a20      	ldr	r2, [pc, #128]	; (80050d8 <mem_malloc+0x1e0>)
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	4293      	cmp	r3, r2
 800505c:	d906      	bls.n	800506c <mem_malloc+0x174>
 800505e:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <mem_malloc+0x1d4>)
 8005060:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005064:	491e      	ldr	r1, [pc, #120]	; (80050e0 <mem_malloc+0x1e8>)
 8005066:	481b      	ldr	r0, [pc, #108]	; (80050d4 <mem_malloc+0x1dc>)
 8005068:	f009 fa70 	bl	800e54c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d006      	beq.n	8005084 <mem_malloc+0x18c>
 8005076:	4b15      	ldr	r3, [pc, #84]	; (80050cc <mem_malloc+0x1d4>)
 8005078:	f240 32bb 	movw	r2, #955	; 0x3bb
 800507c:	4919      	ldr	r1, [pc, #100]	; (80050e4 <mem_malloc+0x1ec>)
 800507e:	4815      	ldr	r0, [pc, #84]	; (80050d4 <mem_malloc+0x1dc>)
 8005080:	f009 fa64 	bl	800e54c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d006      	beq.n	800509c <mem_malloc+0x1a4>
 800508e:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <mem_malloc+0x1d4>)
 8005090:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005094:	4914      	ldr	r1, [pc, #80]	; (80050e8 <mem_malloc+0x1f0>)
 8005096:	480f      	ldr	r0, [pc, #60]	; (80050d4 <mem_malloc+0x1dc>)
 8005098:	f009 fa58 	bl	800e54c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3308      	adds	r3, #8
 80050a0:	e00e      	b.n	80050c0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80050a2:	8bfb      	ldrh	r3, [r7, #30]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fc83 	bl	80049b0 <ptr_to_mem>
 80050aa:	4603      	mov	r3, r0
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80050b0:	8bfa      	ldrh	r2, [r7, #30]
 80050b2:	8bbb      	ldrh	r3, [r7, #28]
 80050b4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80050b8:	429a      	cmp	r2, r3
 80050ba:	f4ff af44 	bcc.w	8004f46 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20005870 	.word	0x20005870
 80050cc:	0800f3dc 	.word	0x0800f3dc
 80050d0:	0800f584 	.word	0x0800f584
 80050d4:	0800f424 	.word	0x0800f424
 80050d8:	2000586c 	.word	0x2000586c
 80050dc:	0800f598 	.word	0x0800f598
 80050e0:	0800f5b4 	.word	0x0800f5b4
 80050e4:	0800f5e4 	.word	0x0800f5e4
 80050e8:	0800f614 	.word	0x0800f614

080050ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	3303      	adds	r3, #3
 8005102:	f023 0303 	bic.w	r3, r3, #3
 8005106:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005108:	2300      	movs	r3, #0
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e011      	b.n	8005132 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	461a      	mov	r2, r3
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4413      	add	r3, r2
 800512a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	3301      	adds	r3, #1
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	885b      	ldrh	r3, [r3, #2]
 8005136:	461a      	mov	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4293      	cmp	r3, r2
 800513c:	dbe7      	blt.n	800510e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005152:	2300      	movs	r3, #0
 8005154:	80fb      	strh	r3, [r7, #6]
 8005156:	e009      	b.n	800516c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	4a08      	ldr	r2, [pc, #32]	; (800517c <memp_init+0x30>)
 800515c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff ffc3 	bl	80050ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	3301      	adds	r3, #1
 800516a:	80fb      	strh	r3, [r7, #6]
 800516c:	88fb      	ldrh	r3, [r7, #6]
 800516e:	2b08      	cmp	r3, #8
 8005170:	d9f2      	bls.n	8005158 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005172:	bf00      	nop
 8005174:	bf00      	nop
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	08011df8 	.word	0x08011df8

08005180 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d012      	beq.n	80051bc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <do_memp_malloc_pool+0x38>
 80051aa:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <do_memp_malloc_pool+0x48>)
 80051ac:	f44f 728c 	mov.w	r2, #280	; 0x118
 80051b0:	4906      	ldr	r1, [pc, #24]	; (80051cc <do_memp_malloc_pool+0x4c>)
 80051b2:	4807      	ldr	r0, [pc, #28]	; (80051d0 <do_memp_malloc_pool+0x50>)
 80051b4:	f009 f9ca 	bl	800e54c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	e000      	b.n	80051be <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	0800f638 	.word	0x0800f638
 80051cc:	0800f668 	.word	0x0800f668
 80051d0:	0800f68c 	.word	0x0800f68c

080051d4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <memp_malloc_pool+0x1c>
 80051e2:	4b0a      	ldr	r3, [pc, #40]	; (800520c <memp_malloc_pool+0x38>)
 80051e4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80051e8:	4909      	ldr	r1, [pc, #36]	; (8005210 <memp_malloc_pool+0x3c>)
 80051ea:	480a      	ldr	r0, [pc, #40]	; (8005214 <memp_malloc_pool+0x40>)
 80051ec:	f009 f9ae 	bl	800e54c <iprintf>
  if (desc == NULL) {
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <memp_malloc_pool+0x26>
    return NULL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e003      	b.n	8005202 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff ffc0 	bl	8005180 <do_memp_malloc_pool>
 8005200:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	0800f638 	.word	0x0800f638
 8005210:	0800f6b4 	.word	0x0800f6b4
 8005214:	0800f68c 	.word	0x0800f68c

08005218 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d908      	bls.n	800523a <memp_malloc+0x22>
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <memp_malloc+0x3c>)
 800522a:	f240 1257 	movw	r2, #343	; 0x157
 800522e:	490a      	ldr	r1, [pc, #40]	; (8005258 <memp_malloc+0x40>)
 8005230:	480a      	ldr	r0, [pc, #40]	; (800525c <memp_malloc+0x44>)
 8005232:	f009 f98b 	bl	800e54c <iprintf>
 8005236:	2300      	movs	r3, #0
 8005238:	e008      	b.n	800524c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	4a08      	ldr	r2, [pc, #32]	; (8005260 <memp_malloc+0x48>)
 800523e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff ff9c 	bl	8005180 <do_memp_malloc_pool>
 8005248:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800524a:	68fb      	ldr	r3, [r7, #12]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	0800f638 	.word	0x0800f638
 8005258:	0800f6c8 	.word	0x0800f6c8
 800525c:	0800f68c 	.word	0x0800f68c
 8005260:	08011df8 	.word	0x08011df8

08005264 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d006      	beq.n	8005286 <do_memp_free_pool+0x22>
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <do_memp_free_pool+0x40>)
 800527a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800527e:	490a      	ldr	r1, [pc, #40]	; (80052a8 <do_memp_free_pool+0x44>)
 8005280:	480a      	ldr	r0, [pc, #40]	; (80052ac <do_memp_free_pool+0x48>)
 8005282:	f009 f963 	bl	800e54c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800529c:	bf00      	nop
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	0800f638 	.word	0x0800f638
 80052a8:	0800f6e8 	.word	0x0800f6e8
 80052ac:	0800f68c 	.word	0x0800f68c

080052b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d106      	bne.n	80052ce <memp_free_pool+0x1e>
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <memp_free_pool+0x3c>)
 80052c2:	f240 1295 	movw	r2, #405	; 0x195
 80052c6:	490a      	ldr	r1, [pc, #40]	; (80052f0 <memp_free_pool+0x40>)
 80052c8:	480a      	ldr	r0, [pc, #40]	; (80052f4 <memp_free_pool+0x44>)
 80052ca:	f009 f93f 	bl	800e54c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <memp_free_pool+0x34>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d004      	beq.n	80052e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff ffc1 	bl	8005264 <do_memp_free_pool>
 80052e2:	e000      	b.n	80052e6 <memp_free_pool+0x36>
    return;
 80052e4:	bf00      	nop
}
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	0800f638 	.word	0x0800f638
 80052f0:	0800f6b4 	.word	0x0800f6b4
 80052f4:	0800f68c 	.word	0x0800f68c

080052f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	6039      	str	r1, [r7, #0]
 8005302:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	2b08      	cmp	r3, #8
 8005308:	d907      	bls.n	800531a <memp_free+0x22>
 800530a:	4b0c      	ldr	r3, [pc, #48]	; (800533c <memp_free+0x44>)
 800530c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005310:	490b      	ldr	r1, [pc, #44]	; (8005340 <memp_free+0x48>)
 8005312:	480c      	ldr	r0, [pc, #48]	; (8005344 <memp_free+0x4c>)
 8005314:	f009 f91a 	bl	800e54c <iprintf>
 8005318:	e00c      	b.n	8005334 <memp_free+0x3c>

  if (mem == NULL) {
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d008      	beq.n	8005332 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	4a09      	ldr	r2, [pc, #36]	; (8005348 <memp_free+0x50>)
 8005324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff ff9a 	bl	8005264 <do_memp_free_pool>
 8005330:	e000      	b.n	8005334 <memp_free+0x3c>
    return;
 8005332:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	0800f638 	.word	0x0800f638
 8005340:	0800f708 	.word	0x0800f708
 8005344:	0800f68c 	.word	0x0800f68c
 8005348:	08011df8 	.word	0x08011df8

0800534c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005350:	bf00      	nop
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <netif_add+0x26>
 8005370:	4b57      	ldr	r3, [pc, #348]	; (80054d0 <netif_add+0x174>)
 8005372:	f240 1227 	movw	r2, #295	; 0x127
 8005376:	4957      	ldr	r1, [pc, #348]	; (80054d4 <netif_add+0x178>)
 8005378:	4857      	ldr	r0, [pc, #348]	; (80054d8 <netif_add+0x17c>)
 800537a:	f009 f8e7 	bl	800e54c <iprintf>
 800537e:	2300      	movs	r3, #0
 8005380:	e0a2      	b.n	80054c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <netif_add+0x3e>
 8005388:	4b51      	ldr	r3, [pc, #324]	; (80054d0 <netif_add+0x174>)
 800538a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800538e:	4953      	ldr	r1, [pc, #332]	; (80054dc <netif_add+0x180>)
 8005390:	4851      	ldr	r0, [pc, #324]	; (80054d8 <netif_add+0x17c>)
 8005392:	f009 f8db 	bl	800e54c <iprintf>
 8005396:	2300      	movs	r3, #0
 8005398:	e096      	b.n	80054c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80053a0:	4b4f      	ldr	r3, [pc, #316]	; (80054e0 <netif_add+0x184>)
 80053a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80053aa:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <netif_add+0x184>)
 80053ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80053b4:	4b4a      	ldr	r3, [pc, #296]	; (80054e0 <netif_add+0x184>)
 80053b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	4a45      	ldr	r2, [pc, #276]	; (80054e4 <netif_add+0x188>)
 80053ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a3a      	ldr	r2, [r7, #32]
 80053e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80053ea:	4b3f      	ldr	r3, [pc, #252]	; (80054e8 <netif_add+0x18c>)
 80053ec:	781a      	ldrb	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f913 	bl	800562c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	4798      	blx	r3
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <netif_add+0xba>
    return NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	e058      	b.n	80054c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800541c:	2bff      	cmp	r3, #255	; 0xff
 800541e:	d103      	bne.n	8005428 <netif_add+0xcc>
        netif->num = 0;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800542c:	4b2f      	ldr	r3, [pc, #188]	; (80054ec <netif_add+0x190>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	617b      	str	r3, [r7, #20]
 8005432:	e02b      	b.n	800548c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	429a      	cmp	r2, r3
 800543a:	d106      	bne.n	800544a <netif_add+0xee>
 800543c:	4b24      	ldr	r3, [pc, #144]	; (80054d0 <netif_add+0x174>)
 800543e:	f240 128b 	movw	r2, #395	; 0x18b
 8005442:	492b      	ldr	r1, [pc, #172]	; (80054f0 <netif_add+0x194>)
 8005444:	4824      	ldr	r0, [pc, #144]	; (80054d8 <netif_add+0x17c>)
 8005446:	f009 f881 	bl	800e54c <iprintf>
        num_netifs++;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	3301      	adds	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2bff      	cmp	r3, #255	; 0xff
 8005454:	dd06      	ble.n	8005464 <netif_add+0x108>
 8005456:	4b1e      	ldr	r3, [pc, #120]	; (80054d0 <netif_add+0x174>)
 8005458:	f240 128d 	movw	r2, #397	; 0x18d
 800545c:	4925      	ldr	r1, [pc, #148]	; (80054f4 <netif_add+0x198>)
 800545e:	481e      	ldr	r0, [pc, #120]	; (80054d8 <netif_add+0x17c>)
 8005460:	f009 f874 	bl	800e54c <iprintf>
        if (netif2->num == netif->num) {
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005470:	429a      	cmp	r2, r3
 8005472:	d108      	bne.n	8005486 <netif_add+0x12a>
          netif->num++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800547a:	3301      	adds	r3, #1
 800547c:	b2da      	uxtb	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005484:	e005      	b.n	8005492 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1d0      	bne.n	8005434 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1be      	bne.n	8005416 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800549e:	2bfe      	cmp	r3, #254	; 0xfe
 80054a0:	d103      	bne.n	80054aa <netif_add+0x14e>
    netif_num = 0;
 80054a2:	4b11      	ldr	r3, [pc, #68]	; (80054e8 <netif_add+0x18c>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e006      	b.n	80054b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054b0:	3301      	adds	r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <netif_add+0x18c>)
 80054b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80054b8:	4b0c      	ldr	r3, [pc, #48]	; (80054ec <netif_add+0x190>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80054c0:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <netif_add+0x190>)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	0800f724 	.word	0x0800f724
 80054d4:	0800f7b8 	.word	0x0800f7b8
 80054d8:	0800f774 	.word	0x0800f774
 80054dc:	0800f7d4 	.word	0x0800f7d4
 80054e0:	08011e5c 	.word	0x08011e5c
 80054e4:	08005907 	.word	0x08005907
 80054e8:	20008768 	.word	0x20008768
 80054ec:	20008760 	.word	0x20008760
 80054f0:	0800f7f8 	.word	0x0800f7f8
 80054f4:	0800f80c 	.word	0x0800f80c

080054f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f002 fb43 	bl	8007b90 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800550a:	6839      	ldr	r1, [r7, #0]
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f006 fc27 	bl	800bd60 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <netif_do_set_ipaddr+0x20>
 800552e:	4b1d      	ldr	r3, [pc, #116]	; (80055a4 <netif_do_set_ipaddr+0x88>)
 8005530:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005534:	491c      	ldr	r1, [pc, #112]	; (80055a8 <netif_do_set_ipaddr+0x8c>)
 8005536:	481d      	ldr	r0, [pc, #116]	; (80055ac <netif_do_set_ipaddr+0x90>)
 8005538:	f009 f808 	bl	800e54c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <netif_do_set_ipaddr+0x34>
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <netif_do_set_ipaddr+0x88>)
 8005544:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005548:	4917      	ldr	r1, [pc, #92]	; (80055a8 <netif_do_set_ipaddr+0x8c>)
 800554a:	4818      	ldr	r0, [pc, #96]	; (80055ac <netif_do_set_ipaddr+0x90>)
 800554c:	f008 fffe 	bl	800e54c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	3304      	adds	r3, #4
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d01c      	beq.n	8005598 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3304      	adds	r3, #4
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800556e:	f107 0314 	add.w	r3, r7, #20
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ffbf 	bl	80054f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <netif_do_set_ipaddr+0x6a>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	e000      	b.n	8005588 <netif_do_set_ipaddr+0x6c>
 8005586:	2300      	movs	r3, #0
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800558c:	2101      	movs	r1, #1
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f8d2 	bl	8005738 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005594:	2301      	movs	r3, #1
 8005596:	e000      	b.n	800559a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	0800f724 	.word	0x0800f724
 80055a8:	0800f83c 	.word	0x0800f83c
 80055ac:	0800f774 	.word	0x0800f774

080055b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	3308      	adds	r3, #8
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d00a      	beq.n	80055e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <netif_do_set_netmask+0x26>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	e000      	b.n	80055d8 <netif_do_set_netmask+0x28>
 80055d6:	2300      	movs	r3, #0
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b085      	sub	sp, #20
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	330c      	adds	r3, #12
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d00a      	beq.n	800561e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <netif_do_set_gw+0x26>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	e000      	b.n	8005616 <netif_do_set_gw+0x28>
 8005614:	2300      	movs	r3, #0
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800561a:	2301      	movs	r3, #1
 800561c:	e000      	b.n	8005620 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005648:	4b1c      	ldr	r3, [pc, #112]	; (80056bc <netif_set_addr+0x90>)
 800564a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005652:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <netif_set_addr+0x90>)
 8005654:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800565c:	4b17      	ldr	r3, [pc, #92]	; (80056bc <netif_set_addr+0x90>)
 800565e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <netif_set_addr+0x42>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <netif_set_addr+0x46>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <netif_set_addr+0x48>
 8005672:	2300      	movs	r3, #0
 8005674:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d006      	beq.n	800568a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800567c:	f107 0310 	add.w	r3, r7, #16
 8005680:	461a      	mov	r2, r3
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff ff49 	bl	800551c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7ff ff8e 	bl	80055b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff ffa8 	bl	80055ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d106      	bne.n	80056b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80056a4:	f107 0310 	add.w	r3, r7, #16
 80056a8:	461a      	mov	r2, r3
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff ff35 	bl	800551c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80056b2:	bf00      	nop
 80056b4:	3720      	adds	r7, #32
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	08011e5c 	.word	0x08011e5c

080056c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80056c8:	4a04      	ldr	r2, [pc, #16]	; (80056dc <netif_set_default+0x1c>)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	20008764 	.word	0x20008764

080056e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d107      	bne.n	80056fe <netif_set_up+0x1e>
 80056ee:	4b0f      	ldr	r3, [pc, #60]	; (800572c <netif_set_up+0x4c>)
 80056f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80056f4:	490e      	ldr	r1, [pc, #56]	; (8005730 <netif_set_up+0x50>)
 80056f6:	480f      	ldr	r0, [pc, #60]	; (8005734 <netif_set_up+0x54>)
 80056f8:	f008 ff28 	bl	800e54c <iprintf>
 80056fc:	e013      	b.n	8005726 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10c      	bne.n	8005726 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005712:	f043 0301 	orr.w	r3, r3, #1
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800571e:	2103      	movs	r1, #3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f809 	bl	8005738 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	0800f724 	.word	0x0800f724
 8005730:	0800f8ac 	.word	0x0800f8ac
 8005734:	0800f774 	.word	0x0800f774

08005738 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <netif_issue_reports+0x20>
 800574a:	4b18      	ldr	r3, [pc, #96]	; (80057ac <netif_issue_reports+0x74>)
 800574c:	f240 326d 	movw	r2, #877	; 0x36d
 8005750:	4917      	ldr	r1, [pc, #92]	; (80057b0 <netif_issue_reports+0x78>)
 8005752:	4818      	ldr	r0, [pc, #96]	; (80057b4 <netif_issue_reports+0x7c>)
 8005754:	f008 fefa 	bl	800e54c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01e      	beq.n	80057a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800576c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005770:	2b00      	cmp	r3, #0
 8005772:	d017      	beq.n	80057a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d013      	beq.n	80057a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3304      	adds	r3, #4
 8005782:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800578e:	f003 0308 	and.w	r3, r3, #8
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f007 fa49 	bl	800cc34 <etharp_request>
 80057a2:	e000      	b.n	80057a6 <netif_issue_reports+0x6e>
    return;
 80057a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	0800f724 	.word	0x0800f724
 80057b0:	0800f8c8 	.word	0x0800f8c8
 80057b4:	0800f774 	.word	0x0800f774

080057b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d107      	bne.n	80057d6 <netif_set_down+0x1e>
 80057c6:	4b12      	ldr	r3, [pc, #72]	; (8005810 <netif_set_down+0x58>)
 80057c8:	f240 329b 	movw	r2, #923	; 0x39b
 80057cc:	4911      	ldr	r1, [pc, #68]	; (8005814 <netif_set_down+0x5c>)
 80057ce:	4812      	ldr	r0, [pc, #72]	; (8005818 <netif_set_down+0x60>)
 80057d0:	f008 febc 	bl	800e54c <iprintf>
 80057d4:	e019      	b.n	800580a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d012      	beq.n	800580a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057ea:	f023 0301 	bic.w	r3, r3, #1
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057fc:	f003 0308 	and.w	r3, r3, #8
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f006 fdd3 	bl	800c3b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	0800f724 	.word	0x0800f724
 8005814:	0800f8ec 	.word	0x0800f8ec
 8005818:	0800f774 	.word	0x0800f774

0800581c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d107      	bne.n	800583a <netif_set_link_up+0x1e>
 800582a:	4b13      	ldr	r3, [pc, #76]	; (8005878 <netif_set_link_up+0x5c>)
 800582c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005830:	4912      	ldr	r1, [pc, #72]	; (800587c <netif_set_link_up+0x60>)
 8005832:	4813      	ldr	r0, [pc, #76]	; (8005880 <netif_set_link_up+0x64>)
 8005834:	f008 fe8a 	bl	800e54c <iprintf>
 8005838:	e01b      	b.n	8005872 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d114      	bne.n	8005872 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800584e:	f043 0304 	orr.w	r3, r3, #4
 8005852:	b2da      	uxtb	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800585a:	2103      	movs	r1, #3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f7ff ff6b 	bl	8005738 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <netif_set_link_up+0x56>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	0800f724 	.word	0x0800f724
 800587c:	0800f90c 	.word	0x0800f90c
 8005880:	0800f774 	.word	0x0800f774

08005884 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d107      	bne.n	80058a2 <netif_set_link_down+0x1e>
 8005892:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <netif_set_link_down+0x54>)
 8005894:	f240 4206 	movw	r2, #1030	; 0x406
 8005898:	4910      	ldr	r1, [pc, #64]	; (80058dc <netif_set_link_down+0x58>)
 800589a:	4811      	ldr	r0, [pc, #68]	; (80058e0 <netif_set_link_down+0x5c>)
 800589c:	f008 fe56 	bl	800e54c <iprintf>
 80058a0:	e017      	b.n	80058d2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d010      	beq.n	80058d2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058b6:	f023 0304 	bic.w	r3, r3, #4
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <netif_set_link_down+0x4e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80058d2:	3708      	adds	r7, #8
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	0800f724 	.word	0x0800f724
 80058dc:	0800f930 	.word	0x0800f930
 80058e0:	0800f774 	.word	0x0800f774

080058e4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	61da      	str	r2, [r3, #28]
  }
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005906:	b480      	push	{r7}
 8005908:	b085      	sub	sp, #20
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005912:	f06f 030b 	mvn.w	r3, #11
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d013      	beq.n	800595c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <netif_get_by_index+0x48>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	e00c      	b.n	8005956 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005942:	3301      	adds	r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	79fa      	ldrb	r2, [r7, #7]
 8005948:	429a      	cmp	r2, r3
 800594a:	d101      	bne.n	8005950 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	e006      	b.n	800595e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1ef      	bne.n	800593c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	20008760 	.word	0x20008760

08005970 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005976:	4b0c      	ldr	r3, [pc, #48]	; (80059a8 <pbuf_free_ooseq+0x38>)
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800597c:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <pbuf_free_ooseq+0x3c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	607b      	str	r3, [r7, #4]
 8005982:	e00a      	b.n	800599a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f002 f93d 	bl	8007c0c <tcp_free_ooseq>
      return;
 8005992:	e005      	b.n	80059a0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	607b      	str	r3, [r7, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f1      	bne.n	8005984 <pbuf_free_ooseq+0x14>
    }
  }
}
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20008769 	.word	0x20008769
 80059ac:	20008778 	.word	0x20008778

080059b0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80059b4:	4b03      	ldr	r3, [pc, #12]	; (80059c4 <pbuf_pool_is_empty+0x14>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80059ba:	bf00      	nop
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	20008769 	.word	0x20008769

080059c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	460b      	mov	r3, r1
 80059d8:	80fb      	strh	r3, [r7, #6]
 80059da:	4613      	mov	r3, r2
 80059dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	88fa      	ldrh	r2, [r7, #6]
 80059ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88ba      	ldrh	r2, [r7, #4]
 80059f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80059f6:	8b3b      	ldrh	r3, [r7, #24]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	7f3a      	ldrb	r2, [r7, #28]
 8005a02:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	73da      	strb	r2, [r3, #15]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08c      	sub	sp, #48	; 0x30
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	4603      	mov	r3, r0
 8005a24:	71fb      	strb	r3, [r7, #7]
 8005a26:	460b      	mov	r3, r1
 8005a28:	80bb      	strh	r3, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005a2e:	79fb      	ldrb	r3, [r7, #7]
 8005a30:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005a32:	887b      	ldrh	r3, [r7, #2]
 8005a34:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a38:	d07f      	beq.n	8005b3a <pbuf_alloc+0x11e>
 8005a3a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005a3e:	f300 80c8 	bgt.w	8005bd2 <pbuf_alloc+0x1b6>
 8005a42:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a46:	d010      	beq.n	8005a6a <pbuf_alloc+0x4e>
 8005a48:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005a4c:	f300 80c1 	bgt.w	8005bd2 <pbuf_alloc+0x1b6>
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d002      	beq.n	8005a5a <pbuf_alloc+0x3e>
 8005a54:	2b41      	cmp	r3, #65	; 0x41
 8005a56:	f040 80bc 	bne.w	8005bd2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005a5a:	887a      	ldrh	r2, [r7, #2]
 8005a5c:	88bb      	ldrh	r3, [r7, #4]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	2000      	movs	r0, #0
 8005a62:	f000 f8d1 	bl	8005c08 <pbuf_alloc_reference>
 8005a66:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005a68:	e0bd      	b.n	8005be6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005a72:	88bb      	ldrh	r3, [r7, #4]
 8005a74:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005a76:	2008      	movs	r0, #8
 8005a78:	f7ff fbce 	bl	8005218 <memp_malloc>
 8005a7c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d109      	bne.n	8005a98 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005a84:	f7ff ff94 	bl	80059b0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a90:	f000 faa8 	bl	8005fe4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e0a7      	b.n	8005be8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005a9a:	3303      	adds	r3, #3
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	8b7a      	ldrh	r2, [r7, #26]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bf28      	it	cs
 8005ab0:	4613      	movcs	r3, r2
 8005ab2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	3303      	adds	r3, #3
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	89f9      	ldrh	r1, [r7, #14]
 8005ac6:	8b7a      	ldrh	r2, [r7, #26]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	887b      	ldrh	r3, [r7, #2]
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	6938      	ldr	r0, [r7, #16]
 8005ad6:	f7ff ff77 	bl	80059c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d006      	beq.n	8005af4 <pbuf_alloc+0xd8>
 8005ae6:	4b42      	ldr	r3, [pc, #264]	; (8005bf0 <pbuf_alloc+0x1d4>)
 8005ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aec:	4941      	ldr	r1, [pc, #260]	; (8005bf4 <pbuf_alloc+0x1d8>)
 8005aee:	4842      	ldr	r0, [pc, #264]	; (8005bf8 <pbuf_alloc+0x1dc>)
 8005af0:	f008 fd2c 	bl	800e54c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005af4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005af6:	3303      	adds	r3, #3
 8005af8:	f023 0303 	bic.w	r3, r3, #3
 8005afc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005b00:	d106      	bne.n	8005b10 <pbuf_alloc+0xf4>
 8005b02:	4b3b      	ldr	r3, [pc, #236]	; (8005bf0 <pbuf_alloc+0x1d4>)
 8005b04:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005b08:	493c      	ldr	r1, [pc, #240]	; (8005bfc <pbuf_alloc+0x1e0>)
 8005b0a:	483b      	ldr	r0, [pc, #236]	; (8005bf8 <pbuf_alloc+0x1dc>)
 8005b0c:	f008 fd1e 	bl	800e54c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1a:	e002      	b.n	8005b22 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005b26:	8b7a      	ldrh	r2, [r7, #26]
 8005b28:	89fb      	ldrh	r3, [r7, #14]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005b32:	8b7b      	ldrh	r3, [r7, #26]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d19e      	bne.n	8005a76 <pbuf_alloc+0x5a>
      break;
 8005b38:	e055      	b.n	8005be6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005b3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b3c:	3303      	adds	r3, #3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f023 0303 	bic.w	r3, r3, #3
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	88bb      	ldrh	r3, [r7, #4]
 8005b48:	3303      	adds	r3, #3
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f023 0303 	bic.w	r3, r3, #3
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005b56:	8b3b      	ldrh	r3, [r7, #24]
 8005b58:	3310      	adds	r3, #16
 8005b5a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b5c:	8b3a      	ldrh	r2, [r7, #24]
 8005b5e:	88bb      	ldrh	r3, [r7, #4]
 8005b60:	3303      	adds	r3, #3
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d306      	bcc.n	8005b78 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005b6a:	8afa      	ldrh	r2, [r7, #22]
 8005b6c:	88bb      	ldrh	r3, [r7, #4]
 8005b6e:	3303      	adds	r3, #3
 8005b70:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d201      	bcs.n	8005b7c <pbuf_alloc+0x160>
        return NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e035      	b.n	8005be8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005b7c:	8afb      	ldrh	r3, [r7, #22]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff f9ba 	bl	8004ef8 <mem_malloc>
 8005b84:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <pbuf_alloc+0x174>
        return NULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	e02b      	b.n	8005be8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005b90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b92:	3310      	adds	r3, #16
 8005b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b96:	4413      	add	r3, r2
 8005b98:	3303      	adds	r3, #3
 8005b9a:	f023 0303 	bic.w	r3, r3, #3
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	88b9      	ldrh	r1, [r7, #4]
 8005ba2:	88ba      	ldrh	r2, [r7, #4]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	887b      	ldrh	r3, [r7, #2]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	460b      	mov	r3, r1
 8005bae:	4601      	mov	r1, r0
 8005bb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb2:	f7ff ff09 	bl	80059c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d010      	beq.n	8005be4 <pbuf_alloc+0x1c8>
 8005bc2:	4b0b      	ldr	r3, [pc, #44]	; (8005bf0 <pbuf_alloc+0x1d4>)
 8005bc4:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005bc8:	490d      	ldr	r1, [pc, #52]	; (8005c00 <pbuf_alloc+0x1e4>)
 8005bca:	480b      	ldr	r0, [pc, #44]	; (8005bf8 <pbuf_alloc+0x1dc>)
 8005bcc:	f008 fcbe 	bl	800e54c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005bd0:	e008      	b.n	8005be4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005bd2:	4b07      	ldr	r3, [pc, #28]	; (8005bf0 <pbuf_alloc+0x1d4>)
 8005bd4:	f240 1227 	movw	r2, #295	; 0x127
 8005bd8:	490a      	ldr	r1, [pc, #40]	; (8005c04 <pbuf_alloc+0x1e8>)
 8005bda:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <pbuf_alloc+0x1dc>)
 8005bdc:	f008 fcb6 	bl	800e54c <iprintf>
      return NULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	e001      	b.n	8005be8 <pbuf_alloc+0x1cc>
      break;
 8005be4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3728      	adds	r7, #40	; 0x28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	0800f954 	.word	0x0800f954
 8005bf4:	0800f984 	.word	0x0800f984
 8005bf8:	0800f9b4 	.word	0x0800f9b4
 8005bfc:	0800f9dc 	.word	0x0800f9dc
 8005c00:	0800fa10 	.word	0x0800fa10
 8005c04:	0800fa3c 	.word	0x0800fa3c

08005c08 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af02      	add	r7, sp, #8
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
 8005c14:	4613      	mov	r3, r2
 8005c16:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005c18:	883b      	ldrh	r3, [r7, #0]
 8005c1a:	2b41      	cmp	r3, #65	; 0x41
 8005c1c:	d009      	beq.n	8005c32 <pbuf_alloc_reference+0x2a>
 8005c1e:	883b      	ldrh	r3, [r7, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d006      	beq.n	8005c32 <pbuf_alloc_reference+0x2a>
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <pbuf_alloc_reference+0x5c>)
 8005c26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005c2a:	490f      	ldr	r1, [pc, #60]	; (8005c68 <pbuf_alloc_reference+0x60>)
 8005c2c:	480f      	ldr	r0, [pc, #60]	; (8005c6c <pbuf_alloc_reference+0x64>)
 8005c2e:	f008 fc8d 	bl	800e54c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005c32:	2007      	movs	r0, #7
 8005c34:	f7ff faf0 	bl	8005218 <memp_malloc>
 8005c38:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e00b      	b.n	8005c5c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005c44:	8879      	ldrh	r1, [r7, #2]
 8005c46:	887a      	ldrh	r2, [r7, #2]
 8005c48:	2300      	movs	r3, #0
 8005c4a:	9301      	str	r3, [sp, #4]
 8005c4c:	883b      	ldrh	r3, [r7, #0]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	460b      	mov	r3, r1
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f7ff feb7 	bl	80059c8 <pbuf_init_alloced_pbuf>
  return p;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	0800f954 	.word	0x0800f954
 8005c68:	0800fa58 	.word	0x0800fa58
 8005c6c:	0800f9b4 	.word	0x0800f9b4

08005c70 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	607b      	str	r3, [r7, #4]
 8005c78:	4603      	mov	r3, r0
 8005c7a:	73fb      	strb	r3, [r7, #15]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	81bb      	strh	r3, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005c88:	8a7b      	ldrh	r3, [r7, #18]
 8005c8a:	3303      	adds	r3, #3
 8005c8c:	f023 0203 	bic.w	r2, r3, #3
 8005c90:	89bb      	ldrh	r3, [r7, #12]
 8005c92:	441a      	add	r2, r3
 8005c94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d901      	bls.n	8005c9e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e018      	b.n	8005cd0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005ca4:	8a7b      	ldrh	r3, [r7, #18]
 8005ca6:	3303      	adds	r3, #3
 8005ca8:	f023 0303 	bic.w	r3, r3, #3
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	4413      	add	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	e001      	b.n	8005cb8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	89b9      	ldrh	r1, [r7, #12]
 8005cbc:	89ba      	ldrh	r2, [r7, #12]
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	897b      	ldrh	r3, [r7, #10]
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	6979      	ldr	r1, [r7, #20]
 8005cca:	f7ff fe7d 	bl	80059c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005cce:	687b      	ldr	r3, [r7, #4]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d106      	bne.n	8005cf8 <pbuf_realloc+0x20>
 8005cea:	4b3a      	ldr	r3, [pc, #232]	; (8005dd4 <pbuf_realloc+0xfc>)
 8005cec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005cf0:	4939      	ldr	r1, [pc, #228]	; (8005dd8 <pbuf_realloc+0x100>)
 8005cf2:	483a      	ldr	r0, [pc, #232]	; (8005ddc <pbuf_realloc+0x104>)
 8005cf4:	f008 fc2a 	bl	800e54c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	891b      	ldrh	r3, [r3, #8]
 8005cfc:	887a      	ldrh	r2, [r7, #2]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d263      	bcs.n	8005dca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	891a      	ldrh	r2, [r3, #8]
 8005d06:	887b      	ldrh	r3, [r7, #2]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005d0c:	887b      	ldrh	r3, [r7, #2]
 8005d0e:	817b      	strh	r3, [r7, #10]
  q = p;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005d14:	e018      	b.n	8005d48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	895b      	ldrh	r3, [r3, #10]
 8005d1a:	897a      	ldrh	r2, [r7, #10]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	891a      	ldrh	r2, [r3, #8]
 8005d24:	893b      	ldrh	r3, [r7, #8]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <pbuf_realloc+0x70>
 8005d3a:	4b26      	ldr	r3, [pc, #152]	; (8005dd4 <pbuf_realloc+0xfc>)
 8005d3c:	f240 12af 	movw	r2, #431	; 0x1af
 8005d40:	4927      	ldr	r1, [pc, #156]	; (8005de0 <pbuf_realloc+0x108>)
 8005d42:	4826      	ldr	r0, [pc, #152]	; (8005ddc <pbuf_realloc+0x104>)
 8005d44:	f008 fc02 	bl	800e54c <iprintf>
  while (rem_len > q->len) {
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	895b      	ldrh	r3, [r3, #10]
 8005d4c:	897a      	ldrh	r2, [r7, #10]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d8e1      	bhi.n	8005d16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	7b1b      	ldrb	r3, [r3, #12]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d121      	bne.n	8005da2 <pbuf_realloc+0xca>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	895b      	ldrh	r3, [r3, #10]
 8005d62:	897a      	ldrh	r2, [r7, #10]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d01c      	beq.n	8005da2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	7b5b      	ldrb	r3, [r3, #13]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d116      	bne.n	8005da2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	897b      	ldrh	r3, [r7, #10]
 8005d80:	4413      	add	r3, r2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	4619      	mov	r1, r3
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7fe ffba 	bl	8004d00 <mem_trim>
 8005d8c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <pbuf_realloc+0xca>
 8005d94:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <pbuf_realloc+0xfc>)
 8005d96:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005d9a:	4912      	ldr	r1, [pc, #72]	; (8005de4 <pbuf_realloc+0x10c>)
 8005d9c:	480f      	ldr	r0, [pc, #60]	; (8005ddc <pbuf_realloc+0x104>)
 8005d9e:	f008 fbd5 	bl	800e54c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	897a      	ldrh	r2, [r7, #10]
 8005da6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	895a      	ldrh	r2, [r3, #10]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 f911 	bl	8005fe4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e000      	b.n	8005dcc <pbuf_realloc+0xf4>
    return;
 8005dca:	bf00      	nop

}
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	0800f954 	.word	0x0800f954
 8005dd8:	0800fa6c 	.word	0x0800fa6c
 8005ddc:	0800f9b4 	.word	0x0800f9b4
 8005de0:	0800fa84 	.word	0x0800fa84
 8005de4:	0800fa9c 	.word	0x0800fa9c

08005de8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <pbuf_add_header_impl+0x22>
 8005dfc:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <pbuf_add_header_impl+0xc4>)
 8005dfe:	f240 12df 	movw	r2, #479	; 0x1df
 8005e02:	492b      	ldr	r1, [pc, #172]	; (8005eb0 <pbuf_add_header_impl+0xc8>)
 8005e04:	482b      	ldr	r0, [pc, #172]	; (8005eb4 <pbuf_add_header_impl+0xcc>)
 8005e06:	f008 fba1 	bl	800e54c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <pbuf_add_header_impl+0x30>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e16:	d301      	bcc.n	8005e1c <pbuf_add_header_impl+0x34>
    return 1;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e043      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <pbuf_add_header_impl+0x3e>
    return 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	e03e      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	891a      	ldrh	r2, [r3, #8]
 8005e2e:	8a7b      	ldrh	r3, [r7, #18]
 8005e30:	4413      	add	r3, r2
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	8a7a      	ldrh	r2, [r7, #18]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d901      	bls.n	8005e3e <pbuf_add_header_impl+0x56>
    return 1;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e032      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	7b1b      	ldrb	r3, [r3, #12]
 8005e42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005e44:	8a3b      	ldrh	r3, [r7, #16]
 8005e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	425b      	negs	r3, r3
 8005e56:	4413      	add	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	3310      	adds	r3, #16
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d20d      	bcs.n	8005e80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e01d      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d006      	beq.n	8005e7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	425b      	negs	r3, r3
 8005e76:	4413      	add	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	e001      	b.n	8005e80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e011      	b.n	8005ea4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	895a      	ldrh	r2, [r3, #10]
 8005e8a:	8a7b      	ldrh	r3, [r7, #18]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	891a      	ldrh	r2, [r3, #8]
 8005e98:	8a7b      	ldrh	r3, [r7, #18]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	811a      	strh	r2, [r3, #8]


  return 0;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3718      	adds	r7, #24
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	0800f954 	.word	0x0800f954
 8005eb0:	0800fab8 	.word	0x0800fab8
 8005eb4:	0800f9b4 	.word	0x0800f9b4

08005eb8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff ff8e 	bl	8005de8 <pbuf_add_header_impl>
 8005ecc:	4603      	mov	r3, r0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <pbuf_remove_header+0x1e>
 8005ee8:	4b20      	ldr	r3, [pc, #128]	; (8005f6c <pbuf_remove_header+0x94>)
 8005eea:	f240 224b 	movw	r2, #587	; 0x24b
 8005eee:	4920      	ldr	r1, [pc, #128]	; (8005f70 <pbuf_remove_header+0x98>)
 8005ef0:	4820      	ldr	r0, [pc, #128]	; (8005f74 <pbuf_remove_header+0x9c>)
 8005ef2:	f008 fb2b 	bl	800e54c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <pbuf_remove_header+0x2c>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f02:	d301      	bcc.n	8005f08 <pbuf_remove_header+0x30>
    return 1;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e02c      	b.n	8005f62 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <pbuf_remove_header+0x3a>
    return 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	e027      	b.n	8005f62 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	895b      	ldrh	r3, [r3, #10]
 8005f1a:	89fa      	ldrh	r2, [r7, #14]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d908      	bls.n	8005f32 <pbuf_remove_header+0x5a>
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <pbuf_remove_header+0x94>)
 8005f22:	f240 2255 	movw	r2, #597	; 0x255
 8005f26:	4914      	ldr	r1, [pc, #80]	; (8005f78 <pbuf_remove_header+0xa0>)
 8005f28:	4812      	ldr	r0, [pc, #72]	; (8005f74 <pbuf_remove_header+0x9c>)
 8005f2a:	f008 fb0f 	bl	800e54c <iprintf>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e017      	b.n	8005f62 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	441a      	add	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	895a      	ldrh	r2, [r3, #10]
 8005f48:	89fb      	ldrh	r3, [r7, #14]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	891a      	ldrh	r2, [r3, #8]
 8005f56:	89fb      	ldrh	r3, [r7, #14]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	0800f954 	.word	0x0800f954
 8005f70:	0800fab8 	.word	0x0800fab8
 8005f74:	0800f9b4 	.word	0x0800f9b4
 8005f78:	0800fac4 	.word	0x0800fac4

08005f7c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	807b      	strh	r3, [r7, #2]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005f8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da08      	bge.n	8005fa6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005f94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005f98:	425b      	negs	r3, r3
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff ff9b 	bl	8005ed8 <pbuf_remove_header>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	e007      	b.n	8005fb6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005fa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005faa:	787a      	ldrb	r2, [r7, #1]
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7ff ff1a 	bl	8005de8 <pbuf_add_header_impl>
 8005fb4:	4603      	mov	r3, r0
  }
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005fca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff ffd2 	bl	8005f7c <pbuf_header_impl>
 8005fd8:	4603      	mov	r3, r0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d106      	bne.n	8006006 <pbuf_free+0x22>
 8005ff8:	4b38      	ldr	r3, [pc, #224]	; (80060dc <pbuf_free+0xf8>)
 8005ffa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005ffe:	4938      	ldr	r1, [pc, #224]	; (80060e0 <pbuf_free+0xfc>)
 8006000:	4838      	ldr	r0, [pc, #224]	; (80060e4 <pbuf_free+0x100>)
 8006002:	f008 faa3 	bl	800e54c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006006:	2300      	movs	r3, #0
 8006008:	e063      	b.n	80060d2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800600e:	e05c      	b.n	80060ca <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	7b9b      	ldrb	r3, [r3, #14]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <pbuf_free+0x42>
 8006018:	4b30      	ldr	r3, [pc, #192]	; (80060dc <pbuf_free+0xf8>)
 800601a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800601e:	4932      	ldr	r1, [pc, #200]	; (80060e8 <pbuf_free+0x104>)
 8006020:	4830      	ldr	r0, [pc, #192]	; (80060e4 <pbuf_free+0x100>)
 8006022:	f008 fa93 	bl	800e54c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	7b9b      	ldrb	r3, [r3, #14]
 800602a:	3b01      	subs	r3, #1
 800602c:	b2da      	uxtb	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	739a      	strb	r2, [r3, #14]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	7b9b      	ldrb	r3, [r3, #14]
 8006036:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006038:	7dbb      	ldrb	r3, [r7, #22]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d143      	bne.n	80060c6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	7b1b      	ldrb	r3, [r3, #12]
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	7b5b      	ldrb	r3, [r3, #13]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d011      	beq.n	800607e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <pbuf_free+0x90>
 8006066:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <pbuf_free+0xf8>)
 8006068:	f240 22ff 	movw	r2, #767	; 0x2ff
 800606c:	491f      	ldr	r1, [pc, #124]	; (80060ec <pbuf_free+0x108>)
 800606e:	481d      	ldr	r0, [pc, #116]	; (80060e4 <pbuf_free+0x100>)
 8006070:	f008 fa6c 	bl	800e54c <iprintf>
        pc->custom_free_function(p);
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
 800607c:	e01d      	b.n	80060ba <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d104      	bne.n	800608e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	2008      	movs	r0, #8
 8006088:	f7ff f936 	bl	80052f8 <memp_free>
 800608c:	e015      	b.n	80060ba <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d104      	bne.n	800609e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	2007      	movs	r0, #7
 8006098:	f7ff f92e 	bl	80052f8 <memp_free>
 800609c:	e00d      	b.n	80060ba <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d103      	bne.n	80060ac <pbuf_free+0xc8>
          mem_free(p);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fe fdc1 	bl	8004c2c <mem_free>
 80060aa:	e006      	b.n	80060ba <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80060ac:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <pbuf_free+0xf8>)
 80060ae:	f240 320f 	movw	r2, #783	; 0x30f
 80060b2:	490f      	ldr	r1, [pc, #60]	; (80060f0 <pbuf_free+0x10c>)
 80060b4:	480b      	ldr	r0, [pc, #44]	; (80060e4 <pbuf_free+0x100>)
 80060b6:	f008 fa49 	bl	800e54c <iprintf>
        }
      }
      count++;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	3301      	adds	r3, #1
 80060be:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	e001      	b.n	80060ca <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d19f      	bne.n	8006010 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	0800f954 	.word	0x0800f954
 80060e0:	0800fab8 	.word	0x0800fab8
 80060e4:	0800f9b4 	.word	0x0800f9b4
 80060e8:	0800fae4 	.word	0x0800fae4
 80060ec:	0800fafc 	.word	0x0800fafc
 80060f0:	0800fb20 	.word	0x0800fb20

080060f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80060fc:	2300      	movs	r3, #0
 80060fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006100:	e005      	b.n	800610e <pbuf_clen+0x1a>
    ++len;
 8006102:	89fb      	ldrh	r3, [r7, #14]
 8006104:	3301      	adds	r3, #1
 8006106:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1f6      	bne.n	8006102 <pbuf_clen+0xe>
  }
  return len;
 8006114:	89fb      	ldrh	r3, [r7, #14]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
	...

08006124 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d010      	beq.n	8006154 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7b9b      	ldrb	r3, [r3, #14]
 8006136:	3301      	adds	r3, #1
 8006138:	b2da      	uxtb	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7b9b      	ldrb	r3, [r3, #14]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d106      	bne.n	8006154 <pbuf_ref+0x30>
 8006146:	4b05      	ldr	r3, [pc, #20]	; (800615c <pbuf_ref+0x38>)
 8006148:	f240 3242 	movw	r2, #834	; 0x342
 800614c:	4904      	ldr	r1, [pc, #16]	; (8006160 <pbuf_ref+0x3c>)
 800614e:	4805      	ldr	r0, [pc, #20]	; (8006164 <pbuf_ref+0x40>)
 8006150:	f008 f9fc 	bl	800e54c <iprintf>
  }
}
 8006154:	bf00      	nop
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	0800f954 	.word	0x0800f954
 8006160:	0800fb34 	.word	0x0800fb34
 8006164:	0800f9b4 	.word	0x0800f9b4

08006168 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <pbuf_cat+0x16>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d107      	bne.n	800618e <pbuf_cat+0x26>
 800617e:	4b20      	ldr	r3, [pc, #128]	; (8006200 <pbuf_cat+0x98>)
 8006180:	f240 3259 	movw	r2, #857	; 0x359
 8006184:	491f      	ldr	r1, [pc, #124]	; (8006204 <pbuf_cat+0x9c>)
 8006186:	4820      	ldr	r0, [pc, #128]	; (8006208 <pbuf_cat+0xa0>)
 8006188:	f008 f9e0 	bl	800e54c <iprintf>
 800618c:	e034      	b.n	80061f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e00a      	b.n	80061aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	891a      	ldrh	r2, [r3, #8]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	891b      	ldrh	r3, [r3, #8]
 800619c:	4413      	add	r3, r2
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60fb      	str	r3, [r7, #12]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	891a      	ldrh	r2, [r3, #8]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	895b      	ldrh	r3, [r3, #10]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d006      	beq.n	80061cc <pbuf_cat+0x64>
 80061be:	4b10      	ldr	r3, [pc, #64]	; (8006200 <pbuf_cat+0x98>)
 80061c0:	f240 3262 	movw	r2, #866	; 0x362
 80061c4:	4911      	ldr	r1, [pc, #68]	; (800620c <pbuf_cat+0xa4>)
 80061c6:	4810      	ldr	r0, [pc, #64]	; (8006208 <pbuf_cat+0xa0>)
 80061c8:	f008 f9c0 	bl	800e54c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d006      	beq.n	80061e2 <pbuf_cat+0x7a>
 80061d4:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <pbuf_cat+0x98>)
 80061d6:	f240 3263 	movw	r2, #867	; 0x363
 80061da:	490d      	ldr	r1, [pc, #52]	; (8006210 <pbuf_cat+0xa8>)
 80061dc:	480a      	ldr	r0, [pc, #40]	; (8006208 <pbuf_cat+0xa0>)
 80061de:	f008 f9b5 	bl	800e54c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	891a      	ldrh	r2, [r3, #8]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	891b      	ldrh	r3, [r3, #8]
 80061ea:	4413      	add	r3, r2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	0800f954 	.word	0x0800f954
 8006204:	0800fb48 	.word	0x0800fb48
 8006208:	0800f9b4 	.word	0x0800f9b4
 800620c:	0800fb80 	.word	0x0800fb80
 8006210:	0800fbb0 	.word	0x0800fbb0

08006214 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
 8006222:	2300      	movs	r3, #0
 8006224:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <pbuf_copy+0x2a>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <pbuf_copy+0x2a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	891a      	ldrh	r2, [r3, #8]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	891b      	ldrh	r3, [r3, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	d209      	bcs.n	8006252 <pbuf_copy+0x3e>
 800623e:	4b57      	ldr	r3, [pc, #348]	; (800639c <pbuf_copy+0x188>)
 8006240:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006244:	4956      	ldr	r1, [pc, #344]	; (80063a0 <pbuf_copy+0x18c>)
 8006246:	4857      	ldr	r0, [pc, #348]	; (80063a4 <pbuf_copy+0x190>)
 8006248:	f008 f980 	bl	800e54c <iprintf>
 800624c:	f06f 030f 	mvn.w	r3, #15
 8006250:	e09f      	b.n	8006392 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	895b      	ldrh	r3, [r3, #10]
 8006256:	461a      	mov	r2, r3
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	895b      	ldrh	r3, [r3, #10]
 8006260:	4619      	mov	r1, r3
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1acb      	subs	r3, r1, r3
 8006266:	429a      	cmp	r2, r3
 8006268:	d306      	bcc.n	8006278 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	895b      	ldrh	r3, [r3, #10]
 800626e:	461a      	mov	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	e005      	b.n	8006284 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	895b      	ldrh	r3, [r3, #10]
 800627c:	461a      	mov	r2, r3
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	18d0      	adds	r0, r2, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	4413      	add	r3, r2
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4619      	mov	r1, r3
 8006298:	f008 fa33 	bl	800e702 <memcpy>
    offset_to += len;
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4413      	add	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	895b      	ldrh	r3, [r3, #10]
 80062b0:	461a      	mov	r2, r3
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d906      	bls.n	80062c6 <pbuf_copy+0xb2>
 80062b8:	4b38      	ldr	r3, [pc, #224]	; (800639c <pbuf_copy+0x188>)
 80062ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 80062be:	493a      	ldr	r1, [pc, #232]	; (80063a8 <pbuf_copy+0x194>)
 80062c0:	4838      	ldr	r0, [pc, #224]	; (80063a4 <pbuf_copy+0x190>)
 80062c2:	f008 f943 	bl	800e54c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	895b      	ldrh	r3, [r3, #10]
 80062ca:	461a      	mov	r2, r3
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d906      	bls.n	80062e0 <pbuf_copy+0xcc>
 80062d2:	4b32      	ldr	r3, [pc, #200]	; (800639c <pbuf_copy+0x188>)
 80062d4:	f240 32da 	movw	r2, #986	; 0x3da
 80062d8:	4934      	ldr	r1, [pc, #208]	; (80063ac <pbuf_copy+0x198>)
 80062da:	4832      	ldr	r0, [pc, #200]	; (80063a4 <pbuf_copy+0x190>)
 80062dc:	f008 f936 	bl	800e54c <iprintf>
    if (offset_from >= p_from->len) {
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	895b      	ldrh	r3, [r3, #10]
 80062e4:	461a      	mov	r2, r3
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d304      	bcc.n	80062f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	895b      	ldrh	r3, [r3, #10]
 80062fa:	461a      	mov	r2, r3
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	4293      	cmp	r3, r2
 8006300:	d114      	bne.n	800632c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10c      	bne.n	800632c <pbuf_copy+0x118>
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d009      	beq.n	800632c <pbuf_copy+0x118>
 8006318:	4b20      	ldr	r3, [pc, #128]	; (800639c <pbuf_copy+0x188>)
 800631a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800631e:	4924      	ldr	r1, [pc, #144]	; (80063b0 <pbuf_copy+0x19c>)
 8006320:	4820      	ldr	r0, [pc, #128]	; (80063a4 <pbuf_copy+0x190>)
 8006322:	f008 f913 	bl	800e54c <iprintf>
 8006326:	f06f 030f 	mvn.w	r3, #15
 800632a:	e032      	b.n	8006392 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d013      	beq.n	800635a <pbuf_copy+0x146>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	895a      	ldrh	r2, [r3, #10]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	891b      	ldrh	r3, [r3, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d10d      	bne.n	800635a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <pbuf_copy+0x146>
 8006346:	4b15      	ldr	r3, [pc, #84]	; (800639c <pbuf_copy+0x188>)
 8006348:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800634c:	4919      	ldr	r1, [pc, #100]	; (80063b4 <pbuf_copy+0x1a0>)
 800634e:	4815      	ldr	r0, [pc, #84]	; (80063a4 <pbuf_copy+0x190>)
 8006350:	f008 f8fc 	bl	800e54c <iprintf>
 8006354:	f06f 0305 	mvn.w	r3, #5
 8006358:	e01b      	b.n	8006392 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d013      	beq.n	8006388 <pbuf_copy+0x174>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	895a      	ldrh	r2, [r3, #10]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	891b      	ldrh	r3, [r3, #8]
 8006368:	429a      	cmp	r2, r3
 800636a:	d10d      	bne.n	8006388 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <pbuf_copy+0x174>
 8006374:	4b09      	ldr	r3, [pc, #36]	; (800639c <pbuf_copy+0x188>)
 8006376:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800637a:	490e      	ldr	r1, [pc, #56]	; (80063b4 <pbuf_copy+0x1a0>)
 800637c:	4809      	ldr	r0, [pc, #36]	; (80063a4 <pbuf_copy+0x190>)
 800637e:	f008 f8e5 	bl	800e54c <iprintf>
 8006382:	f06f 0305 	mvn.w	r3, #5
 8006386:	e004      	b.n	8006392 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	f47f af61 	bne.w	8006252 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	0800f954 	.word	0x0800f954
 80063a0:	0800fbfc 	.word	0x0800fbfc
 80063a4:	0800f9b4 	.word	0x0800f9b4
 80063a8:	0800fc2c 	.word	0x0800fc2c
 80063ac:	0800fc44 	.word	0x0800fc44
 80063b0:	0800fc60 	.word	0x0800fc60
 80063b4:	0800fc70 	.word	0x0800fc70

080063b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	4611      	mov	r1, r2
 80063c4:	461a      	mov	r2, r3
 80063c6:	460b      	mov	r3, r1
 80063c8:	80fb      	strh	r3, [r7, #6]
 80063ca:	4613      	mov	r3, r2
 80063cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d108      	bne.n	80063ee <pbuf_copy_partial+0x36>
 80063dc:	4b2b      	ldr	r3, [pc, #172]	; (800648c <pbuf_copy_partial+0xd4>)
 80063de:	f240 420a 	movw	r2, #1034	; 0x40a
 80063e2:	492b      	ldr	r1, [pc, #172]	; (8006490 <pbuf_copy_partial+0xd8>)
 80063e4:	482b      	ldr	r0, [pc, #172]	; (8006494 <pbuf_copy_partial+0xdc>)
 80063e6:	f008 f8b1 	bl	800e54c <iprintf>
 80063ea:	2300      	movs	r3, #0
 80063ec:	e04a      	b.n	8006484 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d108      	bne.n	8006406 <pbuf_copy_partial+0x4e>
 80063f4:	4b25      	ldr	r3, [pc, #148]	; (800648c <pbuf_copy_partial+0xd4>)
 80063f6:	f240 420b 	movw	r2, #1035	; 0x40b
 80063fa:	4927      	ldr	r1, [pc, #156]	; (8006498 <pbuf_copy_partial+0xe0>)
 80063fc:	4825      	ldr	r0, [pc, #148]	; (8006494 <pbuf_copy_partial+0xdc>)
 80063fe:	f008 f8a5 	bl	800e54c <iprintf>
 8006402:	2300      	movs	r3, #0
 8006404:	e03e      	b.n	8006484 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	e034      	b.n	8006476 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800640c:	88bb      	ldrh	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d00a      	beq.n	8006428 <pbuf_copy_partial+0x70>
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	895b      	ldrh	r3, [r3, #10]
 8006416:	88ba      	ldrh	r2, [r7, #4]
 8006418:	429a      	cmp	r2, r3
 800641a:	d305      	bcc.n	8006428 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	895b      	ldrh	r3, [r3, #10]
 8006420:	88ba      	ldrh	r2, [r7, #4]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	80bb      	strh	r3, [r7, #4]
 8006426:	e023      	b.n	8006470 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	895a      	ldrh	r2, [r3, #10]
 800642c:	88bb      	ldrh	r3, [r7, #4]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006432:	8b3a      	ldrh	r2, [r7, #24]
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	429a      	cmp	r2, r3
 8006438:	d901      	bls.n	800643e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800643a:	88fb      	ldrh	r3, [r7, #6]
 800643c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800643e:	8b7b      	ldrh	r3, [r7, #26]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	18d0      	adds	r0, r2, r3
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	88bb      	ldrh	r3, [r7, #4]
 800644a:	4413      	add	r3, r2
 800644c:	8b3a      	ldrh	r2, [r7, #24]
 800644e:	4619      	mov	r1, r3
 8006450:	f008 f957 	bl	800e702 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006454:	8afa      	ldrh	r2, [r7, #22]
 8006456:	8b3b      	ldrh	r3, [r7, #24]
 8006458:	4413      	add	r3, r2
 800645a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800645c:	8b7a      	ldrh	r2, [r7, #26]
 800645e:	8b3b      	ldrh	r3, [r7, #24]
 8006460:	4413      	add	r3, r2
 8006462:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006464:	88fa      	ldrh	r2, [r7, #6]
 8006466:	8b3b      	ldrh	r3, [r7, #24]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <pbuf_copy_partial+0xca>
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1c4      	bne.n	800640c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006482:	8afb      	ldrh	r3, [r7, #22]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3720      	adds	r7, #32
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	0800f954 	.word	0x0800f954
 8006490:	0800fc9c 	.word	0x0800fc9c
 8006494:	0800f9b4 	.word	0x0800f9b4
 8006498:	0800fcbc 	.word	0x0800fcbc

0800649c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	603a      	str	r2, [r7, #0]
 80064a6:	71fb      	strb	r3, [r7, #7]
 80064a8:	460b      	mov	r3, r1
 80064aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	8919      	ldrh	r1, [r3, #8]
 80064b0:	88ba      	ldrh	r2, [r7, #4]
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fab1 	bl	8005a1c <pbuf_alloc>
 80064ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <pbuf_clone+0x2a>
    return NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e011      	b.n	80064ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80064c6:	6839      	ldr	r1, [r7, #0]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff fea3 	bl	8006214 <pbuf_copy>
 80064ce:	4603      	mov	r3, r0
 80064d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80064d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d006      	beq.n	80064e8 <pbuf_clone+0x4c>
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <pbuf_clone+0x58>)
 80064dc:	f240 5224 	movw	r2, #1316	; 0x524
 80064e0:	4905      	ldr	r1, [pc, #20]	; (80064f8 <pbuf_clone+0x5c>)
 80064e2:	4806      	ldr	r0, [pc, #24]	; (80064fc <pbuf_clone+0x60>)
 80064e4:	f008 f832 	bl	800e54c <iprintf>
  return q;
 80064e8:	68fb      	ldr	r3, [r7, #12]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	0800f954 	.word	0x0800f954
 80064f8:	0800fdc8 	.word	0x0800fdc8
 80064fc:	0800f9b4 	.word	0x0800f9b4

08006500 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006504:	f007 ff22 	bl	800e34c <rand>
 8006508:	4603      	mov	r3, r0
 800650a:	b29b      	uxth	r3, r3
 800650c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006510:	b29b      	uxth	r3, r3
 8006512:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006516:	b29a      	uxth	r2, r3
 8006518:	4b01      	ldr	r3, [pc, #4]	; (8006520 <tcp_init+0x20>)
 800651a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800651c:	bf00      	nop
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000020 	.word	0x20000020

08006524 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	7d1b      	ldrb	r3, [r3, #20]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d105      	bne.n	8006540 <tcp_free+0x1c>
 8006534:	4b06      	ldr	r3, [pc, #24]	; (8006550 <tcp_free+0x2c>)
 8006536:	22d4      	movs	r2, #212	; 0xd4
 8006538:	4906      	ldr	r1, [pc, #24]	; (8006554 <tcp_free+0x30>)
 800653a:	4807      	ldr	r0, [pc, #28]	; (8006558 <tcp_free+0x34>)
 800653c:	f008 f806 	bl	800e54c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	2001      	movs	r0, #1
 8006544:	f7fe fed8 	bl	80052f8 <memp_free>
}
 8006548:	bf00      	nop
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	0800fe54 	.word	0x0800fe54
 8006554:	0800fe84 	.word	0x0800fe84
 8006558:	0800fe98 	.word	0x0800fe98

0800655c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	7d1b      	ldrb	r3, [r3, #20]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d105      	bne.n	8006578 <tcp_free_listen+0x1c>
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <tcp_free_listen+0x2c>)
 800656e:	22df      	movs	r2, #223	; 0xdf
 8006570:	4906      	ldr	r1, [pc, #24]	; (800658c <tcp_free_listen+0x30>)
 8006572:	4807      	ldr	r0, [pc, #28]	; (8006590 <tcp_free_listen+0x34>)
 8006574:	f007 ffea 	bl	800e54c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	2002      	movs	r0, #2
 800657c:	f7fe febc 	bl	80052f8 <memp_free>
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	0800fe54 	.word	0x0800fe54
 800658c:	0800fec0 	.word	0x0800fec0
 8006590:	0800fe98 	.word	0x0800fe98

08006594 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006598:	f000 fea2 	bl	80072e0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800659c:	4b07      	ldr	r3, [pc, #28]	; (80065bc <tcp_tmr+0x28>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <tcp_tmr+0x28>)
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	4b04      	ldr	r3, [pc, #16]	; (80065bc <tcp_tmr+0x28>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80065b4:	f000 fb54 	bl	8006c60 <tcp_slowtmr>
  }
}
 80065b8:	bf00      	nop
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	20008781 	.word	0x20008781

080065c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d105      	bne.n	80065dc <tcp_remove_listener+0x1c>
 80065d0:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <tcp_remove_listener+0x48>)
 80065d2:	22ff      	movs	r2, #255	; 0xff
 80065d4:	490d      	ldr	r1, [pc, #52]	; (800660c <tcp_remove_listener+0x4c>)
 80065d6:	480e      	ldr	r0, [pc, #56]	; (8006610 <tcp_remove_listener+0x50>)
 80065d8:	f007 ffb8 	bl	800e54c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	e00a      	b.n	80065f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d102      	bne.n	80065f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f1      	bne.n	80065e2 <tcp_remove_listener+0x22>
    }
  }
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	0800fe54 	.word	0x0800fe54
 800660c:	0800fedc 	.word	0x0800fedc
 8006610:	0800fe98 	.word	0x0800fe98

08006614 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <tcp_listen_closed+0x1c>
 8006622:	4b14      	ldr	r3, [pc, #80]	; (8006674 <tcp_listen_closed+0x60>)
 8006624:	f240 1211 	movw	r2, #273	; 0x111
 8006628:	4913      	ldr	r1, [pc, #76]	; (8006678 <tcp_listen_closed+0x64>)
 800662a:	4814      	ldr	r0, [pc, #80]	; (800667c <tcp_listen_closed+0x68>)
 800662c:	f007 ff8e 	bl	800e54c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	7d1b      	ldrb	r3, [r3, #20]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d006      	beq.n	8006646 <tcp_listen_closed+0x32>
 8006638:	4b0e      	ldr	r3, [pc, #56]	; (8006674 <tcp_listen_closed+0x60>)
 800663a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800663e:	4910      	ldr	r1, [pc, #64]	; (8006680 <tcp_listen_closed+0x6c>)
 8006640:	480e      	ldr	r0, [pc, #56]	; (800667c <tcp_listen_closed+0x68>)
 8006642:	f007 ff83 	bl	800e54c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006646:	2301      	movs	r3, #1
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	e00b      	b.n	8006664 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800664c:	4a0d      	ldr	r2, [pc, #52]	; (8006684 <tcp_listen_closed+0x70>)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff ffb1 	bl	80065c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3301      	adds	r3, #1
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2b03      	cmp	r3, #3
 8006668:	d9f0      	bls.n	800664c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}
 8006674:	0800fe54 	.word	0x0800fe54
 8006678:	0800ff04 	.word	0x0800ff04
 800667c:	0800fe98 	.word	0x0800fe98
 8006680:	0800ff10 	.word	0x0800ff10
 8006684:	08011e34 	.word	0x08011e34

08006688 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006688:	b5b0      	push	{r4, r5, r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af04      	add	r7, sp, #16
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <tcp_close_shutdown+0x20>
 800669a:	4b63      	ldr	r3, [pc, #396]	; (8006828 <tcp_close_shutdown+0x1a0>)
 800669c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80066a0:	4962      	ldr	r1, [pc, #392]	; (800682c <tcp_close_shutdown+0x1a4>)
 80066a2:	4863      	ldr	r0, [pc, #396]	; (8006830 <tcp_close_shutdown+0x1a8>)
 80066a4:	f007 ff52 	bl	800e54c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80066a8:	78fb      	ldrb	r3, [r7, #3]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d066      	beq.n	800677c <tcp_close_shutdown+0xf4>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	7d1b      	ldrb	r3, [r3, #20]
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d003      	beq.n	80066be <tcp_close_shutdown+0x36>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	7d1b      	ldrb	r3, [r3, #20]
 80066ba:	2b07      	cmp	r3, #7
 80066bc:	d15e      	bne.n	800677c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d104      	bne.n	80066d0 <tcp_close_shutdown+0x48>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80066ce:	d055      	beq.n	800677c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	8b5b      	ldrh	r3, [r3, #26]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d106      	bne.n	80066ea <tcp_close_shutdown+0x62>
 80066dc:	4b52      	ldr	r3, [pc, #328]	; (8006828 <tcp_close_shutdown+0x1a0>)
 80066de:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80066e2:	4954      	ldr	r1, [pc, #336]	; (8006834 <tcp_close_shutdown+0x1ac>)
 80066e4:	4852      	ldr	r0, [pc, #328]	; (8006830 <tcp_close_shutdown+0x1a8>)
 80066e6:	f007 ff31 	bl	800e54c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80066f2:	687d      	ldr	r5, [r7, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3304      	adds	r3, #4
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	8ad2      	ldrh	r2, [r2, #22]
 80066fc:	6879      	ldr	r1, [r7, #4]
 80066fe:	8b09      	ldrh	r1, [r1, #24]
 8006700:	9102      	str	r1, [sp, #8]
 8006702:	9201      	str	r2, [sp, #4]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	462b      	mov	r3, r5
 8006708:	4622      	mov	r2, r4
 800670a:	4601      	mov	r1, r0
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f004 fe91 	bl	800b434 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f001 f8c6 	bl	80078a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006718:	4b47      	ldr	r3, [pc, #284]	; (8006838 <tcp_close_shutdown+0x1b0>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	d105      	bne.n	800672e <tcp_close_shutdown+0xa6>
 8006722:	4b45      	ldr	r3, [pc, #276]	; (8006838 <tcp_close_shutdown+0x1b0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4a43      	ldr	r2, [pc, #268]	; (8006838 <tcp_close_shutdown+0x1b0>)
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	e013      	b.n	8006756 <tcp_close_shutdown+0xce>
 800672e:	4b42      	ldr	r3, [pc, #264]	; (8006838 <tcp_close_shutdown+0x1b0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]
 8006734:	e00c      	b.n	8006750 <tcp_close_shutdown+0xc8>
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	429a      	cmp	r2, r3
 800673e:	d104      	bne.n	800674a <tcp_close_shutdown+0xc2>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	60da      	str	r2, [r3, #12]
 8006748:	e005      	b.n	8006756 <tcp_close_shutdown+0xce>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1ef      	bne.n	8006736 <tcp_close_shutdown+0xae>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	60da      	str	r2, [r3, #12]
 800675c:	4b37      	ldr	r3, [pc, #220]	; (800683c <tcp_close_shutdown+0x1b4>)
 800675e:	2201      	movs	r2, #1
 8006760:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006762:	4b37      	ldr	r3, [pc, #220]	; (8006840 <tcp_close_shutdown+0x1b8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d102      	bne.n	8006772 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800676c:	f003 fd5e 	bl	800a22c <tcp_trigger_input_pcb_close>
 8006770:	e002      	b.n	8006778 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fed6 	bl	8006524 <tcp_free>
      }
      return ERR_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	e050      	b.n	800681e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	7d1b      	ldrb	r3, [r3, #20]
 8006780:	2b02      	cmp	r3, #2
 8006782:	d03b      	beq.n	80067fc <tcp_close_shutdown+0x174>
 8006784:	2b02      	cmp	r3, #2
 8006786:	dc44      	bgt.n	8006812 <tcp_close_shutdown+0x18a>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <tcp_close_shutdown+0x10a>
 800678c:	2b01      	cmp	r3, #1
 800678e:	d02a      	beq.n	80067e6 <tcp_close_shutdown+0x15e>
 8006790:	e03f      	b.n	8006812 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	8adb      	ldrh	r3, [r3, #22]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d021      	beq.n	80067de <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800679a:	4b2a      	ldr	r3, [pc, #168]	; (8006844 <tcp_close_shutdown+0x1bc>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d105      	bne.n	80067b0 <tcp_close_shutdown+0x128>
 80067a4:	4b27      	ldr	r3, [pc, #156]	; (8006844 <tcp_close_shutdown+0x1bc>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	4a26      	ldr	r2, [pc, #152]	; (8006844 <tcp_close_shutdown+0x1bc>)
 80067ac:	6013      	str	r3, [r2, #0]
 80067ae:	e013      	b.n	80067d8 <tcp_close_shutdown+0x150>
 80067b0:	4b24      	ldr	r3, [pc, #144]	; (8006844 <tcp_close_shutdown+0x1bc>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	60bb      	str	r3, [r7, #8]
 80067b6:	e00c      	b.n	80067d2 <tcp_close_shutdown+0x14a>
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d104      	bne.n	80067cc <tcp_close_shutdown+0x144>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	e005      	b.n	80067d8 <tcp_close_shutdown+0x150>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	60bb      	str	r3, [r7, #8]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ef      	bne.n	80067b8 <tcp_close_shutdown+0x130>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff fea0 	bl	8006524 <tcp_free>
      break;
 80067e4:	e01a      	b.n	800681c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff ff14 	bl	8006614 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	4816      	ldr	r0, [pc, #88]	; (8006848 <tcp_close_shutdown+0x1c0>)
 80067f0:	f001 f8a8 	bl	8007944 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff feb1 	bl	800655c <tcp_free_listen>
      break;
 80067fa:	e00f      	b.n	800681c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	480e      	ldr	r0, [pc, #56]	; (8006838 <tcp_close_shutdown+0x1b0>)
 8006800:	f001 f8a0 	bl	8007944 <tcp_pcb_remove>
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <tcp_close_shutdown+0x1b4>)
 8006806:	2201      	movs	r2, #1
 8006808:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff fe8a 	bl	8006524 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006810:	e004      	b.n	800681c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f81a 	bl	800684c <tcp_close_shutdown_fin>
 8006818:	4603      	mov	r3, r0
 800681a:	e000      	b.n	800681e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bdb0      	pop	{r4, r5, r7, pc}
 8006826:	bf00      	nop
 8006828:	0800fe54 	.word	0x0800fe54
 800682c:	0800ff28 	.word	0x0800ff28
 8006830:	0800fe98 	.word	0x0800fe98
 8006834:	0800ff48 	.word	0x0800ff48
 8006838:	20008778 	.word	0x20008778
 800683c:	20008780 	.word	0x20008780
 8006840:	200087b8 	.word	0x200087b8
 8006844:	20008770 	.word	0x20008770
 8006848:	20008774 	.word	0x20008774

0800684c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <tcp_close_shutdown_fin+0x1c>
 800685a:	4b2e      	ldr	r3, [pc, #184]	; (8006914 <tcp_close_shutdown_fin+0xc8>)
 800685c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006860:	492d      	ldr	r1, [pc, #180]	; (8006918 <tcp_close_shutdown_fin+0xcc>)
 8006862:	482e      	ldr	r0, [pc, #184]	; (800691c <tcp_close_shutdown_fin+0xd0>)
 8006864:	f007 fe72 	bl	800e54c <iprintf>

  switch (pcb->state) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	7d1b      	ldrb	r3, [r3, #20]
 800686c:	2b07      	cmp	r3, #7
 800686e:	d020      	beq.n	80068b2 <tcp_close_shutdown_fin+0x66>
 8006870:	2b07      	cmp	r3, #7
 8006872:	dc2b      	bgt.n	80068cc <tcp_close_shutdown_fin+0x80>
 8006874:	2b03      	cmp	r3, #3
 8006876:	d002      	beq.n	800687e <tcp_close_shutdown_fin+0x32>
 8006878:	2b04      	cmp	r3, #4
 800687a:	d00d      	beq.n	8006898 <tcp_close_shutdown_fin+0x4c>
 800687c:	e026      	b.n	80068cc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f003 fee6 	bl	800a650 <tcp_send_fin>
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d11f      	bne.n	80068d0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2205      	movs	r2, #5
 8006894:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006896:	e01b      	b.n	80068d0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f003 fed9 	bl	800a650 <tcp_send_fin>
 800689e:	4603      	mov	r3, r0
 80068a0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80068a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d114      	bne.n	80068d4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2205      	movs	r2, #5
 80068ae:	751a      	strb	r2, [r3, #20]
      }
      break;
 80068b0:	e010      	b.n	80068d4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f003 fecc 	bl	800a650 <tcp_send_fin>
 80068b8:	4603      	mov	r3, r0
 80068ba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80068bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2209      	movs	r2, #9
 80068c8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80068ca:	e005      	b.n	80068d8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e01c      	b.n	800690a <tcp_close_shutdown_fin+0xbe>
      break;
 80068d0:	bf00      	nop
 80068d2:	e002      	b.n	80068da <tcp_close_shutdown_fin+0x8e>
      break;
 80068d4:	bf00      	nop
 80068d6:	e000      	b.n	80068da <tcp_close_shutdown_fin+0x8e>
      break;
 80068d8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80068da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d103      	bne.n	80068ea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f003 fff2 	bl	800a8cc <tcp_output>
 80068e8:	e00d      	b.n	8006906 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80068ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f2:	d108      	bne.n	8006906 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	8b5b      	ldrh	r3, [r3, #26]
 80068f8:	f043 0308 	orr.w	r3, r3, #8
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	e001      	b.n	800690a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006906:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	0800fe54 	.word	0x0800fe54
 8006918:	0800ff04 	.word	0x0800ff04
 800691c:	0800fe98 	.word	0x0800fe98

08006920 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <tcp_close+0x22>
 800692e:	4b0f      	ldr	r3, [pc, #60]	; (800696c <tcp_close+0x4c>)
 8006930:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006934:	490e      	ldr	r1, [pc, #56]	; (8006970 <tcp_close+0x50>)
 8006936:	480f      	ldr	r0, [pc, #60]	; (8006974 <tcp_close+0x54>)
 8006938:	f007 fe08 	bl	800e54c <iprintf>
 800693c:	f06f 030f 	mvn.w	r3, #15
 8006940:	e00f      	b.n	8006962 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	7d1b      	ldrb	r3, [r3, #20]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d006      	beq.n	8006958 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	8b5b      	ldrh	r3, [r3, #26]
 800694e:	f043 0310 	orr.w	r3, r3, #16
 8006952:	b29a      	uxth	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006958:	2101      	movs	r1, #1
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fe94 	bl	8006688 <tcp_close_shutdown>
 8006960:	4603      	mov	r3, r0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	0800fe54 	.word	0x0800fe54
 8006970:	0800ff64 	.word	0x0800ff64
 8006974:	0800fe98 	.word	0x0800fe98

08006978 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08e      	sub	sp, #56	; 0x38
 800697c:	af04      	add	r7, sp, #16
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d107      	bne.n	8006998 <tcp_abandon+0x20>
 8006988:	4b52      	ldr	r3, [pc, #328]	; (8006ad4 <tcp_abandon+0x15c>)
 800698a:	f240 223d 	movw	r2, #573	; 0x23d
 800698e:	4952      	ldr	r1, [pc, #328]	; (8006ad8 <tcp_abandon+0x160>)
 8006990:	4852      	ldr	r0, [pc, #328]	; (8006adc <tcp_abandon+0x164>)
 8006992:	f007 fddb 	bl	800e54c <iprintf>
 8006996:	e099      	b.n	8006acc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	7d1b      	ldrb	r3, [r3, #20]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d106      	bne.n	80069ae <tcp_abandon+0x36>
 80069a0:	4b4c      	ldr	r3, [pc, #304]	; (8006ad4 <tcp_abandon+0x15c>)
 80069a2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80069a6:	494e      	ldr	r1, [pc, #312]	; (8006ae0 <tcp_abandon+0x168>)
 80069a8:	484c      	ldr	r0, [pc, #304]	; (8006adc <tcp_abandon+0x164>)
 80069aa:	f007 fdcf 	bl	800e54c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	7d1b      	ldrb	r3, [r3, #20]
 80069b2:	2b0a      	cmp	r3, #10
 80069b4:	d107      	bne.n	80069c6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	484a      	ldr	r0, [pc, #296]	; (8006ae4 <tcp_abandon+0x16c>)
 80069ba:	f000 ffc3 	bl	8007944 <tcp_pcb_remove>
    tcp_free(pcb);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff fdb0 	bl	8006524 <tcp_free>
 80069c4:	e082      	b.n	8006acc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	7d1b      	ldrb	r3, [r3, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d126      	bne.n	8006a3e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8adb      	ldrh	r3, [r3, #22]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d02e      	beq.n	8006a56 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80069f8:	4b3b      	ldr	r3, [pc, #236]	; (8006ae8 <tcp_abandon+0x170>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d105      	bne.n	8006a0e <tcp_abandon+0x96>
 8006a02:	4b39      	ldr	r3, [pc, #228]	; (8006ae8 <tcp_abandon+0x170>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	4a37      	ldr	r2, [pc, #220]	; (8006ae8 <tcp_abandon+0x170>)
 8006a0a:	6013      	str	r3, [r2, #0]
 8006a0c:	e013      	b.n	8006a36 <tcp_abandon+0xbe>
 8006a0e:	4b36      	ldr	r3, [pc, #216]	; (8006ae8 <tcp_abandon+0x170>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	61fb      	str	r3, [r7, #28]
 8006a14:	e00c      	b.n	8006a30 <tcp_abandon+0xb8>
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d104      	bne.n	8006a2a <tcp_abandon+0xb2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	60da      	str	r2, [r3, #12]
 8006a28:	e005      	b.n	8006a36 <tcp_abandon+0xbe>
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	61fb      	str	r3, [r7, #28]
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1ef      	bne.n	8006a16 <tcp_abandon+0x9e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	60da      	str	r2, [r3, #12]
 8006a3c:	e00b      	b.n	8006a56 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8adb      	ldrh	r3, [r3, #22]
 8006a46:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	4828      	ldr	r0, [pc, #160]	; (8006aec <tcp_abandon+0x174>)
 8006a4c:	f000 ff7a 	bl	8007944 <tcp_pcb_remove>
 8006a50:	4b27      	ldr	r3, [pc, #156]	; (8006af0 <tcp_abandon+0x178>)
 8006a52:	2201      	movs	r2, #1
 8006a54:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d004      	beq.n	8006a68 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fd1c 	bl	80074a0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d004      	beq.n	8006a7a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fd13 	bl	80074a0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fd0a 	bl	80074a0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00e      	beq.n	8006ab0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006a92:	6879      	ldr	r1, [r7, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3304      	adds	r3, #4
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	8b12      	ldrh	r2, [r2, #24]
 8006a9c:	9202      	str	r2, [sp, #8]
 8006a9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006aa0:	9201      	str	r2, [sp, #4]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	69b9      	ldr	r1, [r7, #24]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f004 fcc2 	bl	800b434 <tcp_rst>
    }
    last_state = pcb->state;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	7d1b      	ldrb	r3, [r3, #20]
 8006ab4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fd34 	bl	8006524 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d004      	beq.n	8006acc <tcp_abandon+0x154>
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	f06f 010c 	mvn.w	r1, #12
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	4798      	blx	r3
  }
}
 8006acc:	3728      	adds	r7, #40	; 0x28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	0800fe54 	.word	0x0800fe54
 8006ad8:	0800ff98 	.word	0x0800ff98
 8006adc:	0800fe98 	.word	0x0800fe98
 8006ae0:	0800ffb4 	.word	0x0800ffb4
 8006ae4:	2000877c 	.word	0x2000877c
 8006ae8:	20008770 	.word	0x20008770
 8006aec:	20008778 	.word	0x20008778
 8006af0:	20008780 	.word	0x20008780

08006af4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006afc:	2101      	movs	r1, #1
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7ff ff3a 	bl	8006978 <tcp_abandon>
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <tcp_update_rcv_ann_wnd+0x1c>
 8006b1a:	4b25      	ldr	r3, [pc, #148]	; (8006bb0 <tcp_update_rcv_ann_wnd+0xa4>)
 8006b1c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006b20:	4924      	ldr	r1, [pc, #144]	; (8006bb4 <tcp_update_rcv_ann_wnd+0xa8>)
 8006b22:	4825      	ldr	r0, [pc, #148]	; (8006bb8 <tcp_update_rcv_ann_wnd+0xac>)
 8006b24:	f007 fd12 	bl	800e54c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006b30:	4413      	add	r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006b3c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006b40:	bf28      	it	cs
 8006b42:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006b46:	b292      	uxth	r2, r2
 8006b48:	4413      	add	r3, r2
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	db08      	blt.n	8006b64 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	e020      	b.n	8006ba6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	dd03      	ble.n	8006b7a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b78:	e014      	b.n	8006ba4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8c:	d306      	bcc.n	8006b9c <tcp_update_rcv_ann_wnd+0x90>
 8006b8e:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <tcp_update_rcv_ann_wnd+0xa4>)
 8006b90:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006b94:	4909      	ldr	r1, [pc, #36]	; (8006bbc <tcp_update_rcv_ann_wnd+0xb0>)
 8006b96:	4808      	ldr	r0, [pc, #32]	; (8006bb8 <tcp_update_rcv_ann_wnd+0xac>)
 8006b98:	f007 fcd8 	bl	800e54c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006ba4:	2300      	movs	r3, #0
  }
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	0800fe54 	.word	0x0800fe54
 8006bb4:	080100b0 	.word	0x080100b0
 8006bb8:	0800fe98 	.word	0x0800fe98
 8006bbc:	080100d4 	.word	0x080100d4

08006bc0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d107      	bne.n	8006be2 <tcp_recved+0x22>
 8006bd2:	4b1f      	ldr	r3, [pc, #124]	; (8006c50 <tcp_recved+0x90>)
 8006bd4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006bd8:	491e      	ldr	r1, [pc, #120]	; (8006c54 <tcp_recved+0x94>)
 8006bda:	481f      	ldr	r0, [pc, #124]	; (8006c58 <tcp_recved+0x98>)
 8006bdc:	f007 fcb6 	bl	800e54c <iprintf>
 8006be0:	e032      	b.n	8006c48 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	7d1b      	ldrb	r3, [r3, #20]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d106      	bne.n	8006bf8 <tcp_recved+0x38>
 8006bea:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <tcp_recved+0x90>)
 8006bec:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006bf0:	491a      	ldr	r1, [pc, #104]	; (8006c5c <tcp_recved+0x9c>)
 8006bf2:	4819      	ldr	r0, [pc, #100]	; (8006c58 <tcp_recved+0x98>)
 8006bf4:	f007 fcaa 	bl	800e54c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006bfc:	887b      	ldrh	r3, [r7, #2]
 8006bfe:	4413      	add	r3, r2
 8006c00:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006c02:	89fb      	ldrh	r3, [r7, #14]
 8006c04:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006c08:	d804      	bhi.n	8006c14 <tcp_recved+0x54>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0e:	89fa      	ldrh	r2, [r7, #14]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d204      	bcs.n	8006c1e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006c1a:	851a      	strh	r2, [r3, #40]	; 0x28
 8006c1c:	e002      	b.n	8006c24 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	89fa      	ldrh	r2, [r7, #14]
 8006c22:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff ff71 	bl	8006b0c <tcp_update_rcv_ann_wnd>
 8006c2a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006c32:	d309      	bcc.n	8006c48 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	8b5b      	ldrh	r3, [r3, #26]
 8006c38:	f043 0302 	orr.w	r3, r3, #2
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f003 fe42 	bl	800a8cc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	0800fe54 	.word	0x0800fe54
 8006c54:	080100f0 	.word	0x080100f0
 8006c58:	0800fe98 	.word	0x0800fe98
 8006c5c:	08010108 	.word	0x08010108

08006c60 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006c60:	b5b0      	push	{r4, r5, r7, lr}
 8006c62:	b090      	sub	sp, #64	; 0x40
 8006c64:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006c6c:	4b94      	ldr	r3, [pc, #592]	; (8006ec0 <tcp_slowtmr+0x260>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3301      	adds	r3, #1
 8006c72:	4a93      	ldr	r2, [pc, #588]	; (8006ec0 <tcp_slowtmr+0x260>)
 8006c74:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006c76:	4b93      	ldr	r3, [pc, #588]	; (8006ec4 <tcp_slowtmr+0x264>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	4b91      	ldr	r3, [pc, #580]	; (8006ec4 <tcp_slowtmr+0x264>)
 8006c80:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006c86:	4b90      	ldr	r3, [pc, #576]	; (8006ec8 <tcp_slowtmr+0x268>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006c8c:	e29f      	b.n	80071ce <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	7d1b      	ldrb	r3, [r3, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <tcp_slowtmr+0x44>
 8006c96:	4b8d      	ldr	r3, [pc, #564]	; (8006ecc <tcp_slowtmr+0x26c>)
 8006c98:	f240 42be 	movw	r2, #1214	; 0x4be
 8006c9c:	498c      	ldr	r1, [pc, #560]	; (8006ed0 <tcp_slowtmr+0x270>)
 8006c9e:	488d      	ldr	r0, [pc, #564]	; (8006ed4 <tcp_slowtmr+0x274>)
 8006ca0:	f007 fc54 	bl	800e54c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	7d1b      	ldrb	r3, [r3, #20]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d106      	bne.n	8006cba <tcp_slowtmr+0x5a>
 8006cac:	4b87      	ldr	r3, [pc, #540]	; (8006ecc <tcp_slowtmr+0x26c>)
 8006cae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006cb2:	4989      	ldr	r1, [pc, #548]	; (8006ed8 <tcp_slowtmr+0x278>)
 8006cb4:	4887      	ldr	r0, [pc, #540]	; (8006ed4 <tcp_slowtmr+0x274>)
 8006cb6:	f007 fc49 	bl	800e54c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbc:	7d1b      	ldrb	r3, [r3, #20]
 8006cbe:	2b0a      	cmp	r3, #10
 8006cc0:	d106      	bne.n	8006cd0 <tcp_slowtmr+0x70>
 8006cc2:	4b82      	ldr	r3, [pc, #520]	; (8006ecc <tcp_slowtmr+0x26c>)
 8006cc4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006cc8:	4984      	ldr	r1, [pc, #528]	; (8006edc <tcp_slowtmr+0x27c>)
 8006cca:	4882      	ldr	r0, [pc, #520]	; (8006ed4 <tcp_slowtmr+0x274>)
 8006ccc:	f007 fc3e 	bl	800e54c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	7f9a      	ldrb	r2, [r3, #30]
 8006cd4:	4b7b      	ldr	r3, [pc, #492]	; (8006ec4 <tcp_slowtmr+0x264>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d105      	bne.n	8006ce8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006ce6:	e272      	b.n	80071ce <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006ce8:	4b76      	ldr	r3, [pc, #472]	; (8006ec4 <tcp_slowtmr+0x264>)
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	7d1b      	ldrb	r3, [r3, #20]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d10a      	bne.n	8006d1a <tcp_slowtmr+0xba>
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	d905      	bls.n	8006d1a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d12:	3301      	adds	r3, #1
 8006d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d18:	e11e      	b.n	8006f58 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d20:	2b0b      	cmp	r3, #11
 8006d22:	d905      	bls.n	8006d30 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d28:	3301      	adds	r3, #1
 8006d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d2e:	e113      	b.n	8006f58 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d075      	beq.n	8006e26 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d006      	beq.n	8006d50 <tcp_slowtmr+0xf0>
 8006d42:	4b62      	ldr	r3, [pc, #392]	; (8006ecc <tcp_slowtmr+0x26c>)
 8006d44:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006d48:	4965      	ldr	r1, [pc, #404]	; (8006ee0 <tcp_slowtmr+0x280>)
 8006d4a:	4862      	ldr	r0, [pc, #392]	; (8006ed4 <tcp_slowtmr+0x274>)
 8006d4c:	f007 fbfe 	bl	800e54c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <tcp_slowtmr+0x106>
 8006d58:	4b5c      	ldr	r3, [pc, #368]	; (8006ecc <tcp_slowtmr+0x26c>)
 8006d5a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006d5e:	4961      	ldr	r1, [pc, #388]	; (8006ee4 <tcp_slowtmr+0x284>)
 8006d60:	485c      	ldr	r0, [pc, #368]	; (8006ed4 <tcp_slowtmr+0x274>)
 8006d62:	f007 fbf3 	bl	800e54c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006d6c:	2b0b      	cmp	r3, #11
 8006d6e:	d905      	bls.n	8006d7c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d74:	3301      	adds	r3, #1
 8006d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d7a:	e0ed      	b.n	8006f58 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006d82:	3b01      	subs	r3, #1
 8006d84:	4a58      	ldr	r2, [pc, #352]	; (8006ee8 <tcp_slowtmr+0x288>)
 8006d86:	5cd3      	ldrb	r3, [r2, r3]
 8006d88:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d90:	7c7a      	ldrb	r2, [r7, #17]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d907      	bls.n	8006da6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006dac:	7c7a      	ldrb	r2, [r7, #17]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	f200 80d2 	bhi.w	8006f58 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006db4:	2301      	movs	r3, #1
 8006db6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d108      	bne.n	8006dd4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dc4:	f004 fc2a 	bl	800b61c <tcp_zero_window_probe>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d014      	beq.n	8006df8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006dce:	2300      	movs	r3, #0
 8006dd0:	623b      	str	r3, [r7, #32]
 8006dd2:	e011      	b.n	8006df8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006dda:	4619      	mov	r1, r3
 8006ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dde:	f003 faef 	bl	800a3c0 <tcp_split_unsent_seg>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d107      	bne.n	8006df8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006de8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dea:	f003 fd6f 	bl	800a8cc <tcp_output>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f000 80ac 	beq.w	8006f58 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e0e:	2b06      	cmp	r3, #6
 8006e10:	f200 80a2 	bhi.w	8006f58 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006e24:	e098      	b.n	8006f58 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	db0f      	blt.n	8006e50 <tcp_slowtmr+0x1f0>
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e36:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d008      	beq.n	8006e50 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3301      	adds	r3, #1
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	b21a      	sxth	r2, r3
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	db7b      	blt.n	8006f58 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e62:	f004 f827 	bl	800aeb4 <tcp_rexmit_rto_prepare>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d007      	beq.n	8006e7c <tcp_slowtmr+0x21c>
 8006e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d171      	bne.n	8006f58 <tcp_slowtmr+0x2f8>
 8006e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d06d      	beq.n	8006f58 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	7d1b      	ldrb	r3, [r3, #20]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d03a      	beq.n	8006efa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e8a:	2b0c      	cmp	r3, #12
 8006e8c:	bf28      	it	cs
 8006e8e:	230c      	movcs	r3, #12
 8006e90:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006e98:	10db      	asrs	r3, r3, #3
 8006e9a:	b21b      	sxth	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006ea4:	4413      	add	r3, r2
 8006ea6:	7efa      	ldrb	r2, [r7, #27]
 8006ea8:	4910      	ldr	r1, [pc, #64]	; (8006eec <tcp_slowtmr+0x28c>)
 8006eaa:	5c8a      	ldrb	r2, [r1, r2]
 8006eac:	4093      	lsls	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	dc1a      	bgt.n	8006ef0 <tcp_slowtmr+0x290>
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	b21a      	sxth	r2, r3
 8006ebe:	e019      	b.n	8006ef4 <tcp_slowtmr+0x294>
 8006ec0:	2000876c 	.word	0x2000876c
 8006ec4:	20008782 	.word	0x20008782
 8006ec8:	20008778 	.word	0x20008778
 8006ecc:	0800fe54 	.word	0x0800fe54
 8006ed0:	08010198 	.word	0x08010198
 8006ed4:	0800fe98 	.word	0x0800fe98
 8006ed8:	080101c4 	.word	0x080101c4
 8006edc:	080101f0 	.word	0x080101f0
 8006ee0:	08010220 	.word	0x08010220
 8006ee4:	08010254 	.word	0x08010254
 8006ee8:	08011e2c 	.word	0x08011e2c
 8006eec:	08011e1c 	.word	0x08011e1c
 8006ef0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	2200      	movs	r2, #0
 8006efe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	bf28      	it	cs
 8006f10:	4613      	movcs	r3, r2
 8006f12:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006f14:	8a7b      	ldrh	r3, [r7, #18]
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d206      	bcs.n	8006f40 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f54:	f004 f81e 	bl	800af94 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	7d1b      	ldrb	r3, [r3, #20]
 8006f5c:	2b06      	cmp	r3, #6
 8006f5e:	d111      	bne.n	8006f84 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f62:	8b5b      	ldrh	r3, [r3, #26]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006f6c:	4b9d      	ldr	r3, [pc, #628]	; (80071e4 <tcp_slowtmr+0x584>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	6a1b      	ldr	r3, [r3, #32]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b28      	cmp	r3, #40	; 0x28
 8006f78:	d904      	bls.n	8006f84 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006f7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f7e:	3301      	adds	r3, #1
 8006f80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	7a5b      	ldrb	r3, [r3, #9]
 8006f88:	f003 0308 	and.w	r3, r3, #8
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d04c      	beq.n	800702a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d003      	beq.n	8006fa0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006f9c:	2b07      	cmp	r3, #7
 8006f9e:	d144      	bne.n	800702a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fa0:	4b90      	ldr	r3, [pc, #576]	; (80071e4 <tcp_slowtmr+0x584>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fb0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006fb4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006fb8:	498b      	ldr	r1, [pc, #556]	; (80071e8 <tcp_slowtmr+0x588>)
 8006fba:	fba1 1303 	umull	r1, r3, r1, r3
 8006fbe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d90a      	bls.n	8006fda <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fc8:	3301      	adds	r3, #1
 8006fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006fce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006fd8:	e027      	b.n	800702a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006fda:	4b82      	ldr	r3, [pc, #520]	; (80071e4 <tcp_slowtmr+0x584>)
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	4b7e      	ldr	r3, [pc, #504]	; (80071ec <tcp_slowtmr+0x58c>)
 8006ff4:	fb00 f303 	mul.w	r3, r0, r3
 8006ff8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006ffa:	497b      	ldr	r1, [pc, #492]	; (80071e8 <tcp_slowtmr+0x588>)
 8006ffc:	fba1 1303 	umull	r1, r3, r1, r3
 8007000:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007002:	429a      	cmp	r2, r3
 8007004:	d911      	bls.n	800702a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007008:	f004 fac8 	bl	800b59c <tcp_keepalive>
 800700c:	4603      	mov	r3, r0
 800700e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007012:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007016:	2b00      	cmp	r3, #0
 8007018:	d107      	bne.n	800702a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007020:	3301      	adds	r3, #1
 8007022:	b2da      	uxtb	r2, r3
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702e:	2b00      	cmp	r3, #0
 8007030:	d011      	beq.n	8007056 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007032:	4b6c      	ldr	r3, [pc, #432]	; (80071e4 <tcp_slowtmr+0x584>)
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	1ad2      	subs	r2, r2, r3
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007042:	4619      	mov	r1, r3
 8007044:	460b      	mov	r3, r1
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	440b      	add	r3, r1
 800704a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800704c:	429a      	cmp	r2, r3
 800704e:	d302      	bcc.n	8007056 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007052:	f000 fddb 	bl	8007c0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	7d1b      	ldrb	r3, [r3, #20]
 800705a:	2b03      	cmp	r3, #3
 800705c:	d10b      	bne.n	8007076 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800705e:	4b61      	ldr	r3, [pc, #388]	; (80071e4 <tcp_slowtmr+0x584>)
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b28      	cmp	r3, #40	; 0x28
 800706a:	d904      	bls.n	8007076 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800706c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007070:	3301      	adds	r3, #1
 8007072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	7d1b      	ldrb	r3, [r3, #20]
 800707a:	2b09      	cmp	r3, #9
 800707c:	d10b      	bne.n	8007096 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800707e:	4b59      	ldr	r3, [pc, #356]	; (80071e4 <tcp_slowtmr+0x584>)
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2bf0      	cmp	r3, #240	; 0xf0
 800708a:	d904      	bls.n	8007096 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800708c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007090:	3301      	adds	r3, #1
 8007092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800709a:	2b00      	cmp	r3, #0
 800709c:	d060      	beq.n	8007160 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80070a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070a8:	f000 fbfc 	bl	80078a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80070ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d010      	beq.n	80070d4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80070b2:	4b4f      	ldr	r3, [pc, #316]	; (80071f0 <tcp_slowtmr+0x590>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d106      	bne.n	80070ca <tcp_slowtmr+0x46a>
 80070bc:	4b4d      	ldr	r3, [pc, #308]	; (80071f4 <tcp_slowtmr+0x594>)
 80070be:	f240 526d 	movw	r2, #1389	; 0x56d
 80070c2:	494d      	ldr	r1, [pc, #308]	; (80071f8 <tcp_slowtmr+0x598>)
 80070c4:	484d      	ldr	r0, [pc, #308]	; (80071fc <tcp_slowtmr+0x59c>)
 80070c6:	f007 fa41 	bl	800e54c <iprintf>
        prev->next = pcb->next;
 80070ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	e00f      	b.n	80070f4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80070d4:	4b46      	ldr	r3, [pc, #280]	; (80071f0 <tcp_slowtmr+0x590>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070da:	429a      	cmp	r2, r3
 80070dc:	d006      	beq.n	80070ec <tcp_slowtmr+0x48c>
 80070de:	4b45      	ldr	r3, [pc, #276]	; (80071f4 <tcp_slowtmr+0x594>)
 80070e0:	f240 5271 	movw	r2, #1393	; 0x571
 80070e4:	4946      	ldr	r1, [pc, #280]	; (8007200 <tcp_slowtmr+0x5a0>)
 80070e6:	4845      	ldr	r0, [pc, #276]	; (80071fc <tcp_slowtmr+0x59c>)
 80070e8:	f007 fa30 	bl	800e54c <iprintf>
        tcp_active_pcbs = pcb->next;
 80070ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	4a3f      	ldr	r2, [pc, #252]	; (80071f0 <tcp_slowtmr+0x590>)
 80070f2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80070f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d013      	beq.n	8007124 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80070fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007104:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	3304      	adds	r3, #4
 800710a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800710c:	8ad2      	ldrh	r2, [r2, #22]
 800710e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007110:	8b09      	ldrh	r1, [r1, #24]
 8007112:	9102      	str	r1, [sp, #8]
 8007114:	9201      	str	r2, [sp, #4]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	462b      	mov	r3, r5
 800711a:	4622      	mov	r2, r4
 800711c:	4601      	mov	r1, r0
 800711e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007120:	f004 f988 	bl	800b434 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	7d1b      	ldrb	r3, [r3, #20]
 800712e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800713a:	6838      	ldr	r0, [r7, #0]
 800713c:	f7ff f9f2 	bl	8006524 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007140:	4b30      	ldr	r3, [pc, #192]	; (8007204 <tcp_slowtmr+0x5a4>)
 8007142:	2200      	movs	r2, #0
 8007144:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <tcp_slowtmr+0x4f6>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f06f 010c 	mvn.w	r1, #12
 8007152:	68b8      	ldr	r0, [r7, #8]
 8007154:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007156:	4b2b      	ldr	r3, [pc, #172]	; (8007204 <tcp_slowtmr+0x5a4>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d037      	beq.n	80071ce <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800715e:	e590      	b.n	8006c82 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716c:	7f1b      	ldrb	r3, [r3, #28]
 800716e:	3301      	adds	r3, #1
 8007170:	b2da      	uxtb	r2, r3
 8007172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007174:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	7f1a      	ldrb	r2, [r3, #28]
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	7f5b      	ldrb	r3, [r3, #29]
 800717e:	429a      	cmp	r2, r3
 8007180:	d325      	bcc.n	80071ce <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007188:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <tcp_slowtmr+0x5a4>)
 800718a:	2200      	movs	r2, #0
 800718c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00b      	beq.n	80071b0 <tcp_slowtmr+0x550>
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800719e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071a0:	6912      	ldr	r2, [r2, #16]
 80071a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80071ae:	e002      	b.n	80071b6 <tcp_slowtmr+0x556>
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80071b6:	4b13      	ldr	r3, [pc, #76]	; (8007204 <tcp_slowtmr+0x5a4>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d000      	beq.n	80071c0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80071be:	e560      	b.n	8006c82 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80071c0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80071c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ca:	f003 fb7f 	bl	800a8cc <tcp_output>
  while (pcb != NULL) {
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f47f ad5c 	bne.w	8006c8e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80071da:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <tcp_slowtmr+0x5a8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80071e0:	e067      	b.n	80072b2 <tcp_slowtmr+0x652>
 80071e2:	bf00      	nop
 80071e4:	2000876c 	.word	0x2000876c
 80071e8:	10624dd3 	.word	0x10624dd3
 80071ec:	000124f8 	.word	0x000124f8
 80071f0:	20008778 	.word	0x20008778
 80071f4:	0800fe54 	.word	0x0800fe54
 80071f8:	0801028c 	.word	0x0801028c
 80071fc:	0800fe98 	.word	0x0800fe98
 8007200:	080102b8 	.word	0x080102b8
 8007204:	20008780 	.word	0x20008780
 8007208:	2000877c 	.word	0x2000877c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	7d1b      	ldrb	r3, [r3, #20]
 8007210:	2b0a      	cmp	r3, #10
 8007212:	d006      	beq.n	8007222 <tcp_slowtmr+0x5c2>
 8007214:	4b2b      	ldr	r3, [pc, #172]	; (80072c4 <tcp_slowtmr+0x664>)
 8007216:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800721a:	492b      	ldr	r1, [pc, #172]	; (80072c8 <tcp_slowtmr+0x668>)
 800721c:	482b      	ldr	r0, [pc, #172]	; (80072cc <tcp_slowtmr+0x66c>)
 800721e:	f007 f995 	bl	800e54c <iprintf>
    pcb_remove = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007228:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <tcp_slowtmr+0x670>)
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	6a1b      	ldr	r3, [r3, #32]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2bf0      	cmp	r3, #240	; 0xf0
 8007234:	d904      	bls.n	8007240 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800723a:	3301      	adds	r3, #1
 800723c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007244:	2b00      	cmp	r3, #0
 8007246:	d02f      	beq.n	80072a8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800724a:	f000 fb2b 	bl	80078a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	2b00      	cmp	r3, #0
 8007252:	d010      	beq.n	8007276 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007254:	4b1f      	ldr	r3, [pc, #124]	; (80072d4 <tcp_slowtmr+0x674>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800725a:	429a      	cmp	r2, r3
 800725c:	d106      	bne.n	800726c <tcp_slowtmr+0x60c>
 800725e:	4b19      	ldr	r3, [pc, #100]	; (80072c4 <tcp_slowtmr+0x664>)
 8007260:	f240 52af 	movw	r2, #1455	; 0x5af
 8007264:	491c      	ldr	r1, [pc, #112]	; (80072d8 <tcp_slowtmr+0x678>)
 8007266:	4819      	ldr	r0, [pc, #100]	; (80072cc <tcp_slowtmr+0x66c>)
 8007268:	f007 f970 	bl	800e54c <iprintf>
        prev->next = pcb->next;
 800726c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726e:	68da      	ldr	r2, [r3, #12]
 8007270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007272:	60da      	str	r2, [r3, #12]
 8007274:	e00f      	b.n	8007296 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007276:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <tcp_slowtmr+0x674>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800727c:	429a      	cmp	r2, r3
 800727e:	d006      	beq.n	800728e <tcp_slowtmr+0x62e>
 8007280:	4b10      	ldr	r3, [pc, #64]	; (80072c4 <tcp_slowtmr+0x664>)
 8007282:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007286:	4915      	ldr	r1, [pc, #84]	; (80072dc <tcp_slowtmr+0x67c>)
 8007288:	4810      	ldr	r0, [pc, #64]	; (80072cc <tcp_slowtmr+0x66c>)
 800728a:	f007 f95f 	bl	800e54c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800728e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <tcp_slowtmr+0x674>)
 8007294:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007298:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800729a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80072a0:	69f8      	ldr	r0, [r7, #28]
 80072a2:	f7ff f93f 	bl	8006524 <tcp_free>
 80072a6:	e004      	b.n	80072b2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1a9      	bne.n	800720c <tcp_slowtmr+0x5ac>
    }
  }
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	3730      	adds	r7, #48	; 0x30
 80072be:	46bd      	mov	sp, r7
 80072c0:	bdb0      	pop	{r4, r5, r7, pc}
 80072c2:	bf00      	nop
 80072c4:	0800fe54 	.word	0x0800fe54
 80072c8:	080102e4 	.word	0x080102e4
 80072cc:	0800fe98 	.word	0x0800fe98
 80072d0:	2000876c 	.word	0x2000876c
 80072d4:	2000877c 	.word	0x2000877c
 80072d8:	08010314 	.word	0x08010314
 80072dc:	0801033c 	.word	0x0801033c

080072e0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80072e6:	4b2d      	ldr	r3, [pc, #180]	; (800739c <tcp_fasttmr+0xbc>)
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	3301      	adds	r3, #1
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	4b2b      	ldr	r3, [pc, #172]	; (800739c <tcp_fasttmr+0xbc>)
 80072f0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80072f2:	4b2b      	ldr	r3, [pc, #172]	; (80073a0 <tcp_fasttmr+0xc0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80072f8:	e048      	b.n	800738c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	7f9a      	ldrb	r2, [r3, #30]
 80072fe:	4b27      	ldr	r3, [pc, #156]	; (800739c <tcp_fasttmr+0xbc>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	429a      	cmp	r2, r3
 8007304:	d03f      	beq.n	8007386 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007306:	4b25      	ldr	r3, [pc, #148]	; (800739c <tcp_fasttmr+0xbc>)
 8007308:	781a      	ldrb	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	8b5b      	ldrh	r3, [r3, #26]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d010      	beq.n	800733c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	8b5b      	ldrh	r3, [r3, #26]
 800731e:	f043 0302 	orr.w	r3, r3, #2
 8007322:	b29a      	uxth	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f003 facf 	bl	800a8cc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	8b5b      	ldrh	r3, [r3, #26]
 8007332:	f023 0303 	bic.w	r3, r3, #3
 8007336:	b29a      	uxth	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	8b5b      	ldrh	r3, [r3, #26]
 8007340:	f003 0308 	and.w	r3, r3, #8
 8007344:	2b00      	cmp	r3, #0
 8007346:	d009      	beq.n	800735c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	8b5b      	ldrh	r3, [r3, #26]
 800734c:	f023 0308 	bic.w	r3, r3, #8
 8007350:	b29a      	uxth	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff fa78 	bl	800684c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00a      	beq.n	8007380 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800736a:	4b0e      	ldr	r3, [pc, #56]	; (80073a4 <tcp_fasttmr+0xc4>)
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f819 	bl	80073a8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007376:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <tcp_fasttmr+0xc4>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d000      	beq.n	8007380 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800737e:	e7b8      	b.n	80072f2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	607b      	str	r3, [r7, #4]
 8007384:	e002      	b.n	800738c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1b3      	bne.n	80072fa <tcp_fasttmr+0x1a>
    }
  }
}
 8007392:	bf00      	nop
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20008782 	.word	0x20008782
 80073a0:	20008778 	.word	0x20008778
 80073a4:	20008780 	.word	0x20008780

080073a8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80073a8:	b590      	push	{r4, r7, lr}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d109      	bne.n	80073ca <tcp_process_refused_data+0x22>
 80073b6:	4b37      	ldr	r3, [pc, #220]	; (8007494 <tcp_process_refused_data+0xec>)
 80073b8:	f240 6209 	movw	r2, #1545	; 0x609
 80073bc:	4936      	ldr	r1, [pc, #216]	; (8007498 <tcp_process_refused_data+0xf0>)
 80073be:	4837      	ldr	r0, [pc, #220]	; (800749c <tcp_process_refused_data+0xf4>)
 80073c0:	f007 f8c4 	bl	800e54c <iprintf>
 80073c4:	f06f 030f 	mvn.w	r3, #15
 80073c8:	e060      	b.n	800748c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ce:	7b5b      	ldrb	r3, [r3, #13]
 80073d0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073d6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <tcp_process_refused_data+0x58>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6918      	ldr	r0, [r3, #16]
 80073f2:	2300      	movs	r3, #0
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	47a0      	blx	r4
 80073fa:	4603      	mov	r3, r0
 80073fc:	73fb      	strb	r3, [r7, #15]
 80073fe:	e007      	b.n	8007410 <tcp_process_refused_data+0x68>
 8007400:	2300      	movs	r3, #0
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	2000      	movs	r0, #0
 8007408:	f000 f8a4 	bl	8007554 <tcp_recv_null>
 800740c:	4603      	mov	r3, r0
 800740e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d12a      	bne.n	800746e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	f003 0320 	and.w	r3, r3, #32
 800741e:	2b00      	cmp	r3, #0
 8007420:	d033      	beq.n	800748a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007426:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800742a:	d005      	beq.n	8007438 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007430:	3301      	adds	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <tcp_process_refused_data+0xb2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6918      	ldr	r0, [r3, #16]
 800744c:	2300      	movs	r3, #0
 800744e:	2200      	movs	r2, #0
 8007450:	6879      	ldr	r1, [r7, #4]
 8007452:	47a0      	blx	r4
 8007454:	4603      	mov	r3, r0
 8007456:	73fb      	strb	r3, [r7, #15]
 8007458:	e001      	b.n	800745e <tcp_process_refused_data+0xb6>
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800745e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007462:	f113 0f0d 	cmn.w	r3, #13
 8007466:	d110      	bne.n	800748a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007468:	f06f 030c 	mvn.w	r3, #12
 800746c:	e00e      	b.n	800748c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800746e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007472:	f113 0f0d 	cmn.w	r3, #13
 8007476:	d102      	bne.n	800747e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007478:	f06f 030c 	mvn.w	r3, #12
 800747c:	e006      	b.n	800748c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007484:	f06f 0304 	mvn.w	r3, #4
 8007488:	e000      	b.n	800748c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	bd90      	pop	{r4, r7, pc}
 8007494:	0800fe54 	.word	0x0800fe54
 8007498:	08010364 	.word	0x08010364
 800749c:	0800fe98 	.word	0x0800fe98

080074a0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80074a8:	e007      	b.n	80074ba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f80a 	bl	80074ca <tcp_seg_free>
    seg = next;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1f4      	bne.n	80074aa <tcp_segs_free+0xa>
  }
}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00c      	beq.n	80074f2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe fd7d 	bl	8005fe4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	2003      	movs	r0, #3
 80074ee:	f7fd ff03 	bl	80052f8 <memp_free>
  }
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d106      	bne.n	8007518 <tcp_seg_copy+0x1c>
 800750a:	4b0f      	ldr	r3, [pc, #60]	; (8007548 <tcp_seg_copy+0x4c>)
 800750c:	f240 6282 	movw	r2, #1666	; 0x682
 8007510:	490e      	ldr	r1, [pc, #56]	; (800754c <tcp_seg_copy+0x50>)
 8007512:	480f      	ldr	r0, [pc, #60]	; (8007550 <tcp_seg_copy+0x54>)
 8007514:	f007 f81a 	bl	800e54c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007518:	2003      	movs	r0, #3
 800751a:	f7fd fe7d 	bl	8005218 <memp_malloc>
 800751e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <tcp_seg_copy+0x2e>
    return NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	e00a      	b.n	8007540 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800752a:	2210      	movs	r2, #16
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f007 f8e7 	bl	800e702 <memcpy>
  pbuf_ref(cseg->p);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	4618      	mov	r0, r3
 800753a:	f7fe fdf3 	bl	8006124 <pbuf_ref>
  return cseg;
 800753e:	68fb      	ldr	r3, [r7, #12]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3710      	adds	r7, #16
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	0800fe54 	.word	0x0800fe54
 800754c:	080103a8 	.word	0x080103a8
 8007550:	0800fe98 	.word	0x0800fe98

08007554 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d109      	bne.n	800757c <tcp_recv_null+0x28>
 8007568:	4b12      	ldr	r3, [pc, #72]	; (80075b4 <tcp_recv_null+0x60>)
 800756a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800756e:	4912      	ldr	r1, [pc, #72]	; (80075b8 <tcp_recv_null+0x64>)
 8007570:	4812      	ldr	r0, [pc, #72]	; (80075bc <tcp_recv_null+0x68>)
 8007572:	f006 ffeb 	bl	800e54c <iprintf>
 8007576:	f06f 030f 	mvn.w	r3, #15
 800757a:	e016      	b.n	80075aa <tcp_recv_null+0x56>

  if (p != NULL) {
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	891b      	ldrh	r3, [r3, #8]
 8007586:	4619      	mov	r1, r3
 8007588:	68b8      	ldr	r0, [r7, #8]
 800758a:	f7ff fb19 	bl	8006bc0 <tcp_recved>
    pbuf_free(p);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7fe fd28 	bl	8005fe4 <pbuf_free>
 8007594:	e008      	b.n	80075a8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007596:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d104      	bne.n	80075a8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800759e:	68b8      	ldr	r0, [r7, #8]
 80075a0:	f7ff f9be 	bl	8006920 <tcp_close>
 80075a4:	4603      	mov	r3, r0
 80075a6:	e000      	b.n	80075aa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	0800fe54 	.word	0x0800fe54
 80075b8:	080103c4 	.word	0x080103c4
 80075bc:	0800fe98 	.word	0x0800fe98

080075c0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	4603      	mov	r3, r0
 80075c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80075ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	db01      	blt.n	80075d6 <tcp_kill_prio+0x16>
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	e000      	b.n	80075d8 <tcp_kill_prio+0x18>
 80075d6:	237f      	movs	r3, #127	; 0x7f
 80075d8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80075da:	7afb      	ldrb	r3, [r7, #11]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d034      	beq.n	800764a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80075ee:	4b19      	ldr	r3, [pc, #100]	; (8007654 <tcp_kill_prio+0x94>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e01f      	b.n	8007636 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	7d5b      	ldrb	r3, [r3, #21]
 80075fa:	7afa      	ldrb	r2, [r7, #11]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d80c      	bhi.n	800761a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007604:	7afa      	ldrb	r2, [r7, #11]
 8007606:	429a      	cmp	r2, r3
 8007608:	d112      	bne.n	8007630 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800760a:	4b13      	ldr	r3, [pc, #76]	; (8007658 <tcp_kill_prio+0x98>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	6a1b      	ldr	r3, [r3, #32]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	429a      	cmp	r2, r3
 8007618:	d80a      	bhi.n	8007630 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800761a:	4b0f      	ldr	r3, [pc, #60]	; (8007658 <tcp_kill_prio+0x98>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	7d5b      	ldrb	r3, [r3, #21]
 800762e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1dc      	bne.n	80075f6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d004      	beq.n	800764c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007642:	6938      	ldr	r0, [r7, #16]
 8007644:	f7ff fa56 	bl	8006af4 <tcp_abort>
 8007648:	e000      	b.n	800764c <tcp_kill_prio+0x8c>
    return;
 800764a:	bf00      	nop
  }
}
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20008778 	.word	0x20008778
 8007658:	2000876c 	.word	0x2000876c

0800765c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	4603      	mov	r3, r0
 8007664:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	2b08      	cmp	r3, #8
 800766a:	d009      	beq.n	8007680 <tcp_kill_state+0x24>
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	2b09      	cmp	r3, #9
 8007670:	d006      	beq.n	8007680 <tcp_kill_state+0x24>
 8007672:	4b1a      	ldr	r3, [pc, #104]	; (80076dc <tcp_kill_state+0x80>)
 8007674:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007678:	4919      	ldr	r1, [pc, #100]	; (80076e0 <tcp_kill_state+0x84>)
 800767a:	481a      	ldr	r0, [pc, #104]	; (80076e4 <tcp_kill_state+0x88>)
 800767c:	f006 ff66 	bl	800e54c <iprintf>

  inactivity = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007684:	2300      	movs	r3, #0
 8007686:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007688:	4b17      	ldr	r3, [pc, #92]	; (80076e8 <tcp_kill_state+0x8c>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	e017      	b.n	80076c0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	7d1b      	ldrb	r3, [r3, #20]
 8007694:	79fa      	ldrb	r2, [r7, #7]
 8007696:	429a      	cmp	r2, r3
 8007698:	d10f      	bne.n	80076ba <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800769a:	4b14      	ldr	r3, [pc, #80]	; (80076ec <tcp_kill_state+0x90>)
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d807      	bhi.n	80076ba <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80076aa:	4b10      	ldr	r3, [pc, #64]	; (80076ec <tcp_kill_state+0x90>)
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	617b      	str	r3, [r7, #20]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e4      	bne.n	8007690 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d003      	beq.n	80076d4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80076cc:	2100      	movs	r1, #0
 80076ce:	6938      	ldr	r0, [r7, #16]
 80076d0:	f7ff f952 	bl	8006978 <tcp_abandon>
  }
}
 80076d4:	bf00      	nop
 80076d6:	3718      	adds	r7, #24
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	0800fe54 	.word	0x0800fe54
 80076e0:	080103e0 	.word	0x080103e0
 80076e4:	0800fe98 	.word	0x0800fe98
 80076e8:	20008778 	.word	0x20008778
 80076ec:	2000876c 	.word	0x2000876c

080076f0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80076fe:	4b12      	ldr	r3, [pc, #72]	; (8007748 <tcp_kill_timewait+0x58>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	e012      	b.n	800772c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007706:	4b11      	ldr	r3, [pc, #68]	; (800774c <tcp_kill_timewait+0x5c>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	429a      	cmp	r2, r3
 8007714:	d807      	bhi.n	8007726 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007716:	4b0d      	ldr	r3, [pc, #52]	; (800774c <tcp_kill_timewait+0x5c>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e9      	bne.n	8007706 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d002      	beq.n	800773e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007738:	68b8      	ldr	r0, [r7, #8]
 800773a:	f7ff f9db 	bl	8006af4 <tcp_abort>
  }
}
 800773e:	bf00      	nop
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
 8007746:	bf00      	nop
 8007748:	2000877c 	.word	0x2000877c
 800774c:	2000876c 	.word	0x2000876c

08007750 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007756:	4b10      	ldr	r3, [pc, #64]	; (8007798 <tcp_handle_closepend+0x48>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800775c:	e014      	b.n	8007788 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	8b5b      	ldrh	r3, [r3, #26]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d009      	beq.n	8007784 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	8b5b      	ldrh	r3, [r3, #26]
 8007774:	f023 0308 	bic.w	r3, r3, #8
 8007778:	b29a      	uxth	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff f864 	bl	800684c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e7      	bne.n	800775e <tcp_handle_closepend+0xe>
  }
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20008778 	.word	0x20008778

0800779c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077a6:	2001      	movs	r0, #1
 80077a8:	f7fd fd36 	bl	8005218 <memp_malloc>
 80077ac:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d126      	bne.n	8007802 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80077b4:	f7ff ffcc 	bl	8007750 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80077b8:	f7ff ff9a 	bl	80076f0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077bc:	2001      	movs	r0, #1
 80077be:	f7fd fd2b 	bl	8005218 <memp_malloc>
 80077c2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d11b      	bne.n	8007802 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80077ca:	2009      	movs	r0, #9
 80077cc:	f7ff ff46 	bl	800765c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077d0:	2001      	movs	r0, #1
 80077d2:	f7fd fd21 	bl	8005218 <memp_malloc>
 80077d6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d111      	bne.n	8007802 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80077de:	2008      	movs	r0, #8
 80077e0:	f7ff ff3c 	bl	800765c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077e4:	2001      	movs	r0, #1
 80077e6:	f7fd fd17 	bl	8005218 <memp_malloc>
 80077ea:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d107      	bne.n	8007802 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7ff fee3 	bl	80075c0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80077fa:	2001      	movs	r0, #1
 80077fc:	f7fd fd0c 	bl	8005218 <memp_malloc>
 8007800:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d03f      	beq.n	8007888 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007808:	229c      	movs	r2, #156	; 0x9c
 800780a:	2100      	movs	r1, #0
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f006 ff02 	bl	800e616 <memset>
    pcb->prio = prio;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	79fa      	ldrb	r2, [r7, #7]
 8007816:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800781e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007828:	855a      	strh	r2, [r3, #42]	; 0x2a
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	22ff      	movs	r2, #255	; 0xff
 8007836:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800783e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2206      	movs	r2, #6
 8007844:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2206      	movs	r2, #6
 800784c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007854:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800785e:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <tcp_alloc+0xf8>)
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <tcp_alloc+0xfc>)
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007874:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	4a08      	ldr	r2, [pc, #32]	; (800789c <tcp_alloc+0x100>)
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4a07      	ldr	r2, [pc, #28]	; (80078a0 <tcp_alloc+0x104>)
 8007884:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007888:	68fb      	ldr	r3, [r7, #12]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	2000876c 	.word	0x2000876c
 8007898:	20008782 	.word	0x20008782
 800789c:	08007555 	.word	0x08007555
 80078a0:	006ddd00 	.word	0x006ddd00

080078a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d107      	bne.n	80078c2 <tcp_pcb_purge+0x1e>
 80078b2:	4b21      	ldr	r3, [pc, #132]	; (8007938 <tcp_pcb_purge+0x94>)
 80078b4:	f640 0251 	movw	r2, #2129	; 0x851
 80078b8:	4920      	ldr	r1, [pc, #128]	; (800793c <tcp_pcb_purge+0x98>)
 80078ba:	4821      	ldr	r0, [pc, #132]	; (8007940 <tcp_pcb_purge+0x9c>)
 80078bc:	f006 fe46 	bl	800e54c <iprintf>
 80078c0:	e037      	b.n	8007932 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	7d1b      	ldrb	r3, [r3, #20]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d033      	beq.n	8007932 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80078ce:	2b0a      	cmp	r3, #10
 80078d0:	d02f      	beq.n	8007932 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d02b      	beq.n	8007932 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fb7c 	bl	8005fe4 <pbuf_free>
      pcb->refused_data = NULL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f986 	bl	8007c0c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007906:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff fdc7 	bl	80074a0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff fdc2 	bl	80074a0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	66da      	str	r2, [r3, #108]	; 0x6c
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	0800fe54 	.word	0x0800fe54
 800793c:	080104a0 	.word	0x080104a0
 8007940:	0800fe98 	.word	0x0800fe98

08007944 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d106      	bne.n	8007962 <tcp_pcb_remove+0x1e>
 8007954:	4b3e      	ldr	r3, [pc, #248]	; (8007a50 <tcp_pcb_remove+0x10c>)
 8007956:	f640 0283 	movw	r2, #2179	; 0x883
 800795a:	493e      	ldr	r1, [pc, #248]	; (8007a54 <tcp_pcb_remove+0x110>)
 800795c:	483e      	ldr	r0, [pc, #248]	; (8007a58 <tcp_pcb_remove+0x114>)
 800795e:	f006 fdf5 	bl	800e54c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d106      	bne.n	8007976 <tcp_pcb_remove+0x32>
 8007968:	4b39      	ldr	r3, [pc, #228]	; (8007a50 <tcp_pcb_remove+0x10c>)
 800796a:	f640 0284 	movw	r2, #2180	; 0x884
 800796e:	493b      	ldr	r1, [pc, #236]	; (8007a5c <tcp_pcb_remove+0x118>)
 8007970:	4839      	ldr	r0, [pc, #228]	; (8007a58 <tcp_pcb_remove+0x114>)
 8007972:	f006 fdeb 	bl	800e54c <iprintf>

  TCP_RMV(pcblist, pcb);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	683a      	ldr	r2, [r7, #0]
 800797c:	429a      	cmp	r2, r3
 800797e:	d105      	bne.n	800798c <tcp_pcb_remove+0x48>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68da      	ldr	r2, [r3, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
 800798a:	e013      	b.n	80079b4 <tcp_pcb_remove+0x70>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	e00c      	b.n	80079ae <tcp_pcb_remove+0x6a>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d104      	bne.n	80079a8 <tcp_pcb_remove+0x64>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68da      	ldr	r2, [r3, #12]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	60da      	str	r2, [r3, #12]
 80079a6:	e005      	b.n	80079b4 <tcp_pcb_remove+0x70>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1ef      	bne.n	8007994 <tcp_pcb_remove+0x50>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2200      	movs	r2, #0
 80079b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80079ba:	6838      	ldr	r0, [r7, #0]
 80079bc:	f7ff ff72 	bl	80078a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	7d1b      	ldrb	r3, [r3, #20]
 80079c4:	2b0a      	cmp	r3, #10
 80079c6:	d013      	beq.n	80079f0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d00f      	beq.n	80079f0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	8b5b      	ldrh	r3, [r3, #26]
 80079d4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d009      	beq.n	80079f0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	8b5b      	ldrh	r3, [r3, #26]
 80079e0:	f043 0302 	orr.w	r3, r3, #2
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80079ea:	6838      	ldr	r0, [r7, #0]
 80079ec:	f002 ff6e 	bl	800a8cc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	7d1b      	ldrb	r3, [r3, #20]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d020      	beq.n	8007a3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d006      	beq.n	8007a0e <tcp_pcb_remove+0xca>
 8007a00:	4b13      	ldr	r3, [pc, #76]	; (8007a50 <tcp_pcb_remove+0x10c>)
 8007a02:	f640 0293 	movw	r2, #2195	; 0x893
 8007a06:	4916      	ldr	r1, [pc, #88]	; (8007a60 <tcp_pcb_remove+0x11c>)
 8007a08:	4813      	ldr	r0, [pc, #76]	; (8007a58 <tcp_pcb_remove+0x114>)
 8007a0a:	f006 fd9f 	bl	800e54c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d006      	beq.n	8007a24 <tcp_pcb_remove+0xe0>
 8007a16:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <tcp_pcb_remove+0x10c>)
 8007a18:	f640 0294 	movw	r2, #2196	; 0x894
 8007a1c:	4911      	ldr	r1, [pc, #68]	; (8007a64 <tcp_pcb_remove+0x120>)
 8007a1e:	480e      	ldr	r0, [pc, #56]	; (8007a58 <tcp_pcb_remove+0x114>)
 8007a20:	f006 fd94 	bl	800e54c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d006      	beq.n	8007a3a <tcp_pcb_remove+0xf6>
 8007a2c:	4b08      	ldr	r3, [pc, #32]	; (8007a50 <tcp_pcb_remove+0x10c>)
 8007a2e:	f640 0296 	movw	r2, #2198	; 0x896
 8007a32:	490d      	ldr	r1, [pc, #52]	; (8007a68 <tcp_pcb_remove+0x124>)
 8007a34:	4808      	ldr	r0, [pc, #32]	; (8007a58 <tcp_pcb_remove+0x114>)
 8007a36:	f006 fd89 	bl	800e54c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2200      	movs	r2, #0
 8007a44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	0800fe54 	.word	0x0800fe54
 8007a54:	080104bc 	.word	0x080104bc
 8007a58:	0800fe98 	.word	0x0800fe98
 8007a5c:	080104d8 	.word	0x080104d8
 8007a60:	080104f8 	.word	0x080104f8
 8007a64:	08010510 	.word	0x08010510
 8007a68:	0801052c 	.word	0x0801052c

08007a6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d106      	bne.n	8007a88 <tcp_next_iss+0x1c>
 8007a7a:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <tcp_next_iss+0x38>)
 8007a7c:	f640 02af 	movw	r2, #2223	; 0x8af
 8007a80:	4909      	ldr	r1, [pc, #36]	; (8007aa8 <tcp_next_iss+0x3c>)
 8007a82:	480a      	ldr	r0, [pc, #40]	; (8007aac <tcp_next_iss+0x40>)
 8007a84:	f006 fd62 	bl	800e54c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007a88:	4b09      	ldr	r3, [pc, #36]	; (8007ab0 <tcp_next_iss+0x44>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4b09      	ldr	r3, [pc, #36]	; (8007ab4 <tcp_next_iss+0x48>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4413      	add	r3, r2
 8007a92:	4a07      	ldr	r2, [pc, #28]	; (8007ab0 <tcp_next_iss+0x44>)
 8007a94:	6013      	str	r3, [r2, #0]
  return iss;
 8007a96:	4b06      	ldr	r3, [pc, #24]	; (8007ab0 <tcp_next_iss+0x44>)
 8007a98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	0800fe54 	.word	0x0800fe54
 8007aa8:	08010544 	.word	0x08010544
 8007aac:	0800fe98 	.word	0x0800fe98
 8007ab0:	20000024 	.word	0x20000024
 8007ab4:	2000876c 	.word	0x2000876c

08007ab8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <tcp_eff_send_mss_netif+0x22>
 8007acc:	4b14      	ldr	r3, [pc, #80]	; (8007b20 <tcp_eff_send_mss_netif+0x68>)
 8007ace:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007ad2:	4914      	ldr	r1, [pc, #80]	; (8007b24 <tcp_eff_send_mss_netif+0x6c>)
 8007ad4:	4814      	ldr	r0, [pc, #80]	; (8007b28 <tcp_eff_send_mss_netif+0x70>)
 8007ad6:	f006 fd39 	bl	800e54c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007ae0:	89fb      	ldrh	r3, [r7, #14]
 8007ae2:	e019      	b.n	8007b18 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ae8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007aea:	8afb      	ldrh	r3, [r7, #22]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d012      	beq.n	8007b16 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007af0:	2328      	movs	r3, #40	; 0x28
 8007af2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007af4:	8afa      	ldrh	r2, [r7, #22]
 8007af6:	8abb      	ldrh	r3, [r7, #20]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d904      	bls.n	8007b06 <tcp_eff_send_mss_netif+0x4e>
 8007afc:	8afa      	ldrh	r2, [r7, #22]
 8007afe:	8abb      	ldrh	r3, [r7, #20]
 8007b00:	1ad3      	subs	r3, r2, r3
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	e000      	b.n	8007b08 <tcp_eff_send_mss_netif+0x50>
 8007b06:	2300      	movs	r3, #0
 8007b08:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007b0a:	8a7a      	ldrh	r2, [r7, #18]
 8007b0c:	89fb      	ldrh	r3, [r7, #14]
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	bf28      	it	cs
 8007b12:	4613      	movcs	r3, r2
 8007b14:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007b16:	89fb      	ldrh	r3, [r7, #14]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	0800fe54 	.word	0x0800fe54
 8007b24:	08010560 	.word	0x08010560
 8007b28:	0800fe98 	.word	0x0800fe98

08007b2c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d119      	bne.n	8007b74 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007b40:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007b42:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007b46:	4910      	ldr	r1, [pc, #64]	; (8007b88 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007b48:	4810      	ldr	r0, [pc, #64]	; (8007b8c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007b4a:	f006 fcff 	bl	800e54c <iprintf>

  while (pcb != NULL) {
 8007b4e:	e011      	b.n	8007b74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d108      	bne.n	8007b6e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f7fe ffc6 	bl	8006af4 <tcp_abort>
      pcb = next;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e002      	b.n	8007b74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1ea      	bne.n	8007b50 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007b7a:	bf00      	nop
 8007b7c:	bf00      	nop
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	0800fe54 	.word	0x0800fe54
 8007b88:	08010588 	.word	0x08010588
 8007b8c:	0800fe98 	.word	0x0800fe98

08007b90 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d02a      	beq.n	8007bf6 <tcp_netif_ip_addr_changed+0x66>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d026      	beq.n	8007bf6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007ba8:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <tcp_netif_ip_addr_changed+0x70>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4619      	mov	r1, r3
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff ffbc 	bl	8007b2c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007bb4:	4b13      	ldr	r3, [pc, #76]	; (8007c04 <tcp_netif_ip_addr_changed+0x74>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f7ff ffb6 	bl	8007b2c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d017      	beq.n	8007bf6 <tcp_netif_ip_addr_changed+0x66>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d013      	beq.n	8007bf6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bce:	4b0e      	ldr	r3, [pc, #56]	; (8007c08 <tcp_netif_ip_addr_changed+0x78>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60fb      	str	r3, [r7, #12]
 8007bd4:	e00c      	b.n	8007bf0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d103      	bne.n	8007bea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1ef      	bne.n	8007bd6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007bf6:	bf00      	nop
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20008778 	.word	0x20008778
 8007c04:	20008770 	.word	0x20008770
 8007c08:	20008774 	.word	0x20008774

08007c0c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d007      	beq.n	8007c2c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff fc3d 	bl	80074a0 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007c34:	b590      	push	{r4, r7, lr}
 8007c36:	b08d      	sub	sp, #52	; 0x34
 8007c38:	af04      	add	r7, sp, #16
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d105      	bne.n	8007c50 <tcp_input+0x1c>
 8007c44:	4b9b      	ldr	r3, [pc, #620]	; (8007eb4 <tcp_input+0x280>)
 8007c46:	2283      	movs	r2, #131	; 0x83
 8007c48:	499b      	ldr	r1, [pc, #620]	; (8007eb8 <tcp_input+0x284>)
 8007c4a:	489c      	ldr	r0, [pc, #624]	; (8007ebc <tcp_input+0x288>)
 8007c4c:	f006 fc7e 	bl	800e54c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4a9a      	ldr	r2, [pc, #616]	; (8007ec0 <tcp_input+0x28c>)
 8007c56:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	895b      	ldrh	r3, [r3, #10]
 8007c5c:	2b13      	cmp	r3, #19
 8007c5e:	f240 83d1 	bls.w	8008404 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c62:	4b98      	ldr	r3, [pc, #608]	; (8007ec4 <tcp_input+0x290>)
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	4a97      	ldr	r2, [pc, #604]	; (8007ec4 <tcp_input+0x290>)
 8007c68:	6812      	ldr	r2, [r2, #0]
 8007c6a:	4611      	mov	r1, r2
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f005 fc17 	bl	800d4a0 <ip4_addr_isbroadcast_u32>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f040 83c7 	bne.w	8008408 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007c7a:	4b92      	ldr	r3, [pc, #584]	; (8007ec4 <tcp_input+0x290>)
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007c82:	2be0      	cmp	r3, #224	; 0xe0
 8007c84:	f000 83c0 	beq.w	8008408 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007c88:	4b8d      	ldr	r3, [pc, #564]	; (8007ec0 <tcp_input+0x28c>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	899b      	ldrh	r3, [r3, #12]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fc fe49 	bl	8004928 <lwip_htons>
 8007c96:	4603      	mov	r3, r0
 8007c98:	0b1b      	lsrs	r3, r3, #12
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007ca2:	7cbb      	ldrb	r3, [r7, #18]
 8007ca4:	2b13      	cmp	r3, #19
 8007ca6:	f240 83b1 	bls.w	800840c <tcp_input+0x7d8>
 8007caa:	7cbb      	ldrb	r3, [r7, #18]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	891b      	ldrh	r3, [r3, #8]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	f200 83aa 	bhi.w	800840c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007cb8:	7cbb      	ldrb	r3, [r7, #18]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3b14      	subs	r3, #20
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	4b81      	ldr	r3, [pc, #516]	; (8007ec8 <tcp_input+0x294>)
 8007cc2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007cc4:	4b81      	ldr	r3, [pc, #516]	; (8007ecc <tcp_input+0x298>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	895a      	ldrh	r2, [r3, #10]
 8007cce:	7cbb      	ldrb	r3, [r7, #18]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d309      	bcc.n	8007cea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007cd6:	4b7c      	ldr	r3, [pc, #496]	; (8007ec8 <tcp_input+0x294>)
 8007cd8:	881a      	ldrh	r2, [r3, #0]
 8007cda:	4b7d      	ldr	r3, [pc, #500]	; (8007ed0 <tcp_input+0x29c>)
 8007cdc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007cde:	7cbb      	ldrb	r3, [r7, #18]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fe f8f8 	bl	8005ed8 <pbuf_remove_header>
 8007ce8:	e04e      	b.n	8007d88 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d105      	bne.n	8007cfe <tcp_input+0xca>
 8007cf2:	4b70      	ldr	r3, [pc, #448]	; (8007eb4 <tcp_input+0x280>)
 8007cf4:	22c2      	movs	r2, #194	; 0xc2
 8007cf6:	4977      	ldr	r1, [pc, #476]	; (8007ed4 <tcp_input+0x2a0>)
 8007cf8:	4870      	ldr	r0, [pc, #448]	; (8007ebc <tcp_input+0x288>)
 8007cfa:	f006 fc27 	bl	800e54c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007cfe:	2114      	movs	r1, #20
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f7fe f8e9 	bl	8005ed8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	895a      	ldrh	r2, [r3, #10]
 8007d0a:	4b71      	ldr	r3, [pc, #452]	; (8007ed0 <tcp_input+0x29c>)
 8007d0c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007d0e:	4b6e      	ldr	r3, [pc, #440]	; (8007ec8 <tcp_input+0x294>)
 8007d10:	881a      	ldrh	r2, [r3, #0]
 8007d12:	4b6f      	ldr	r3, [pc, #444]	; (8007ed0 <tcp_input+0x29c>)
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007d1a:	4b6d      	ldr	r3, [pc, #436]	; (8007ed0 <tcp_input+0x29c>)
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f7fe f8d9 	bl	8005ed8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	895b      	ldrh	r3, [r3, #10]
 8007d2c:	8a3a      	ldrh	r2, [r7, #16]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	f200 836e 	bhi.w	8008410 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	4a64      	ldr	r2, [pc, #400]	; (8007ecc <tcp_input+0x298>)
 8007d3c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	8a3a      	ldrh	r2, [r7, #16]
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe f8c6 	bl	8005ed8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	891a      	ldrh	r2, [r3, #8]
 8007d50:	8a3b      	ldrh	r3, [r7, #16]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	895b      	ldrh	r3, [r3, #10]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d005      	beq.n	8007d6e <tcp_input+0x13a>
 8007d62:	4b54      	ldr	r3, [pc, #336]	; (8007eb4 <tcp_input+0x280>)
 8007d64:	22df      	movs	r2, #223	; 0xdf
 8007d66:	495c      	ldr	r1, [pc, #368]	; (8007ed8 <tcp_input+0x2a4>)
 8007d68:	4854      	ldr	r0, [pc, #336]	; (8007ebc <tcp_input+0x288>)
 8007d6a:	f006 fbef 	bl	800e54c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	891a      	ldrh	r2, [r3, #8]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	891b      	ldrh	r3, [r3, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d005      	beq.n	8007d88 <tcp_input+0x154>
 8007d7c:	4b4d      	ldr	r3, [pc, #308]	; (8007eb4 <tcp_input+0x280>)
 8007d7e:	22e0      	movs	r2, #224	; 0xe0
 8007d80:	4956      	ldr	r1, [pc, #344]	; (8007edc <tcp_input+0x2a8>)
 8007d82:	484e      	ldr	r0, [pc, #312]	; (8007ebc <tcp_input+0x288>)
 8007d84:	f006 fbe2 	bl	800e54c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007d88:	4b4d      	ldr	r3, [pc, #308]	; (8007ec0 <tcp_input+0x28c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	4a4b      	ldr	r2, [pc, #300]	; (8007ec0 <tcp_input+0x28c>)
 8007d92:	6814      	ldr	r4, [r2, #0]
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fc fdc7 	bl	8004928 <lwip_htons>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007d9e:	4b48      	ldr	r3, [pc, #288]	; (8007ec0 <tcp_input+0x28c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	885b      	ldrh	r3, [r3, #2]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	4a46      	ldr	r2, [pc, #280]	; (8007ec0 <tcp_input+0x28c>)
 8007da8:	6814      	ldr	r4, [r2, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fc fdbc 	bl	8004928 <lwip_htons>
 8007db0:	4603      	mov	r3, r0
 8007db2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007db4:	4b42      	ldr	r3, [pc, #264]	; (8007ec0 <tcp_input+0x28c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	4a41      	ldr	r2, [pc, #260]	; (8007ec0 <tcp_input+0x28c>)
 8007dbc:	6814      	ldr	r4, [r2, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fc fdc7 	bl	8004952 <lwip_htonl>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	6063      	str	r3, [r4, #4]
 8007dc8:	6863      	ldr	r3, [r4, #4]
 8007dca:	4a45      	ldr	r2, [pc, #276]	; (8007ee0 <tcp_input+0x2ac>)
 8007dcc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007dce:	4b3c      	ldr	r3, [pc, #240]	; (8007ec0 <tcp_input+0x28c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	4a3a      	ldr	r2, [pc, #232]	; (8007ec0 <tcp_input+0x28c>)
 8007dd6:	6814      	ldr	r4, [r2, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f7fc fdba 	bl	8004952 <lwip_htonl>
 8007dde:	4603      	mov	r3, r0
 8007de0:	60a3      	str	r3, [r4, #8]
 8007de2:	68a3      	ldr	r3, [r4, #8]
 8007de4:	4a3f      	ldr	r2, [pc, #252]	; (8007ee4 <tcp_input+0x2b0>)
 8007de6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007de8:	4b35      	ldr	r3, [pc, #212]	; (8007ec0 <tcp_input+0x28c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	89db      	ldrh	r3, [r3, #14]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	4a33      	ldr	r2, [pc, #204]	; (8007ec0 <tcp_input+0x28c>)
 8007df2:	6814      	ldr	r4, [r2, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fc fd97 	bl	8004928 <lwip_htons>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007dfe:	4b30      	ldr	r3, [pc, #192]	; (8007ec0 <tcp_input+0x28c>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	899b      	ldrh	r3, [r3, #12]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fc fd8e 	bl	8004928 <lwip_htons>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	4b34      	ldr	r3, [pc, #208]	; (8007ee8 <tcp_input+0x2b4>)
 8007e18:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	891a      	ldrh	r2, [r3, #8]
 8007e1e:	4b33      	ldr	r3, [pc, #204]	; (8007eec <tcp_input+0x2b8>)
 8007e20:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007e22:	4b31      	ldr	r3, [pc, #196]	; (8007ee8 <tcp_input+0x2b4>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	f003 0303 	and.w	r3, r3, #3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00c      	beq.n	8007e48 <tcp_input+0x214>
    tcplen++;
 8007e2e:	4b2f      	ldr	r3, [pc, #188]	; (8007eec <tcp_input+0x2b8>)
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	3301      	adds	r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	4b2d      	ldr	r3, [pc, #180]	; (8007eec <tcp_input+0x2b8>)
 8007e38:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	891a      	ldrh	r2, [r3, #8]
 8007e3e:	4b2b      	ldr	r3, [pc, #172]	; (8007eec <tcp_input+0x2b8>)
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	f200 82e6 	bhi.w	8008414 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e4c:	4b28      	ldr	r3, [pc, #160]	; (8007ef0 <tcp_input+0x2bc>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	e09d      	b.n	8007f90 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	7d1b      	ldrb	r3, [r3, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d105      	bne.n	8007e68 <tcp_input+0x234>
 8007e5c:	4b15      	ldr	r3, [pc, #84]	; (8007eb4 <tcp_input+0x280>)
 8007e5e:	22fb      	movs	r2, #251	; 0xfb
 8007e60:	4924      	ldr	r1, [pc, #144]	; (8007ef4 <tcp_input+0x2c0>)
 8007e62:	4816      	ldr	r0, [pc, #88]	; (8007ebc <tcp_input+0x288>)
 8007e64:	f006 fb72 	bl	800e54c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	7d1b      	ldrb	r3, [r3, #20]
 8007e6c:	2b0a      	cmp	r3, #10
 8007e6e:	d105      	bne.n	8007e7c <tcp_input+0x248>
 8007e70:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <tcp_input+0x280>)
 8007e72:	22fc      	movs	r2, #252	; 0xfc
 8007e74:	4920      	ldr	r1, [pc, #128]	; (8007ef8 <tcp_input+0x2c4>)
 8007e76:	4811      	ldr	r0, [pc, #68]	; (8007ebc <tcp_input+0x288>)
 8007e78:	f006 fb68 	bl	800e54c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	7d1b      	ldrb	r3, [r3, #20]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d105      	bne.n	8007e90 <tcp_input+0x25c>
 8007e84:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <tcp_input+0x280>)
 8007e86:	22fd      	movs	r2, #253	; 0xfd
 8007e88:	491c      	ldr	r1, [pc, #112]	; (8007efc <tcp_input+0x2c8>)
 8007e8a:	480c      	ldr	r0, [pc, #48]	; (8007ebc <tcp_input+0x288>)
 8007e8c:	f006 fb5e 	bl	800e54c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	7a1b      	ldrb	r3, [r3, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d033      	beq.n	8007f00 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	7a1a      	ldrb	r2, [r3, #8]
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <tcp_input+0x290>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d029      	beq.n	8007f00 <tcp_input+0x2cc>
      prev = pcb;
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	61bb      	str	r3, [r7, #24]
      continue;
 8007eb0:	e06b      	b.n	8007f8a <tcp_input+0x356>
 8007eb2:	bf00      	nop
 8007eb4:	080105bc 	.word	0x080105bc
 8007eb8:	080105f0 	.word	0x080105f0
 8007ebc:	08010608 	.word	0x08010608
 8007ec0:	20008794 	.word	0x20008794
 8007ec4:	200051fc 	.word	0x200051fc
 8007ec8:	20008798 	.word	0x20008798
 8007ecc:	2000879c 	.word	0x2000879c
 8007ed0:	2000879a 	.word	0x2000879a
 8007ed4:	08010630 	.word	0x08010630
 8007ed8:	08010640 	.word	0x08010640
 8007edc:	0801064c 	.word	0x0801064c
 8007ee0:	200087a4 	.word	0x200087a4
 8007ee4:	200087a8 	.word	0x200087a8
 8007ee8:	200087b0 	.word	0x200087b0
 8007eec:	200087ae 	.word	0x200087ae
 8007ef0:	20008778 	.word	0x20008778
 8007ef4:	0801066c 	.word	0x0801066c
 8007ef8:	08010694 	.word	0x08010694
 8007efc:	080106c0 	.word	0x080106c0
    }

    if (pcb->remote_port == tcphdr->src &&
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	8b1a      	ldrh	r2, [r3, #24]
 8007f04:	4b72      	ldr	r3, [pc, #456]	; (80080d0 <tcp_input+0x49c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	881b      	ldrh	r3, [r3, #0]
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d13a      	bne.n	8007f86 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	8ada      	ldrh	r2, [r3, #22]
 8007f14:	4b6e      	ldr	r3, [pc, #440]	; (80080d0 <tcp_input+0x49c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	885b      	ldrh	r3, [r3, #2]
 8007f1a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d132      	bne.n	8007f86 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	4b6b      	ldr	r3, [pc, #428]	; (80080d4 <tcp_input+0x4a0>)
 8007f26:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d12c      	bne.n	8007f86 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	4b68      	ldr	r3, [pc, #416]	; (80080d4 <tcp_input+0x4a0>)
 8007f32:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d126      	bne.n	8007f86 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d106      	bne.n	8007f50 <tcp_input+0x31c>
 8007f42:	4b65      	ldr	r3, [pc, #404]	; (80080d8 <tcp_input+0x4a4>)
 8007f44:	f240 120d 	movw	r2, #269	; 0x10d
 8007f48:	4964      	ldr	r1, [pc, #400]	; (80080dc <tcp_input+0x4a8>)
 8007f4a:	4865      	ldr	r0, [pc, #404]	; (80080e0 <tcp_input+0x4ac>)
 8007f4c:	f006 fafe 	bl	800e54c <iprintf>
      if (prev != NULL) {
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <tcp_input+0x338>
        prev->next = pcb->next;
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007f5e:	4b61      	ldr	r3, [pc, #388]	; (80080e4 <tcp_input+0x4b0>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007f66:	4a5f      	ldr	r2, [pc, #380]	; (80080e4 <tcp_input+0x4b0>)
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d111      	bne.n	8007f9a <tcp_input+0x366>
 8007f76:	4b58      	ldr	r3, [pc, #352]	; (80080d8 <tcp_input+0x4a4>)
 8007f78:	f240 1215 	movw	r2, #277	; 0x115
 8007f7c:	495a      	ldr	r1, [pc, #360]	; (80080e8 <tcp_input+0x4b4>)
 8007f7e:	4858      	ldr	r0, [pc, #352]	; (80080e0 <tcp_input+0x4ac>)
 8007f80:	f006 fae4 	bl	800e54c <iprintf>
      break;
 8007f84:	e009      	b.n	8007f9a <tcp_input+0x366>
    }
    prev = pcb;
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	61fb      	str	r3, [r7, #28]
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f47f af5e 	bne.w	8007e54 <tcp_input+0x220>
 8007f98:	e000      	b.n	8007f9c <tcp_input+0x368>
      break;
 8007f9a:	bf00      	nop
  }

  if (pcb == NULL) {
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f040 80aa 	bne.w	80080f8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007fa4:	4b51      	ldr	r3, [pc, #324]	; (80080ec <tcp_input+0x4b8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	61fb      	str	r3, [r7, #28]
 8007faa:	e03f      	b.n	800802c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	7d1b      	ldrb	r3, [r3, #20]
 8007fb0:	2b0a      	cmp	r3, #10
 8007fb2:	d006      	beq.n	8007fc2 <tcp_input+0x38e>
 8007fb4:	4b48      	ldr	r3, [pc, #288]	; (80080d8 <tcp_input+0x4a4>)
 8007fb6:	f240 121f 	movw	r2, #287	; 0x11f
 8007fba:	494d      	ldr	r1, [pc, #308]	; (80080f0 <tcp_input+0x4bc>)
 8007fbc:	4848      	ldr	r0, [pc, #288]	; (80080e0 <tcp_input+0x4ac>)
 8007fbe:	f006 fac5 	bl	800e54c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	7a1b      	ldrb	r3, [r3, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	7a1a      	ldrb	r2, [r3, #8]
 8007fce:	4b41      	ldr	r3, [pc, #260]	; (80080d4 <tcp_input+0x4a0>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d122      	bne.n	8008024 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	8b1a      	ldrh	r2, [r3, #24]
 8007fe2:	4b3b      	ldr	r3, [pc, #236]	; (80080d0 <tcp_input+0x49c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d11b      	bne.n	8008026 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	8ada      	ldrh	r2, [r3, #22]
 8007ff2:	4b37      	ldr	r3, [pc, #220]	; (80080d0 <tcp_input+0x49c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	885b      	ldrh	r3, [r3, #2]
 8007ff8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d113      	bne.n	8008026 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	4b34      	ldr	r3, [pc, #208]	; (80080d4 <tcp_input+0x4a0>)
 8008004:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008006:	429a      	cmp	r2, r3
 8008008:	d10d      	bne.n	8008026 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	4b31      	ldr	r3, [pc, #196]	; (80080d4 <tcp_input+0x4a0>)
 8008010:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008012:	429a      	cmp	r2, r3
 8008014:	d107      	bne.n	8008026 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008016:	69f8      	ldr	r0, [r7, #28]
 8008018:	f000 fb56 	bl	80086c8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7fd ffe1 	bl	8005fe4 <pbuf_free>
        return;
 8008022:	e1fd      	b.n	8008420 <tcp_input+0x7ec>
        continue;
 8008024:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1bc      	bne.n	8007fac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008036:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <tcp_input+0x4c0>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	e02a      	b.n	8008094 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	7a1b      	ldrb	r3, [r3, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00c      	beq.n	8008060 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	7a1a      	ldrb	r2, [r3, #8]
 800804a:	4b22      	ldr	r3, [pc, #136]	; (80080d4 <tcp_input+0x4a0>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008052:	3301      	adds	r3, #1
 8008054:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008056:	429a      	cmp	r2, r3
 8008058:	d002      	beq.n	8008060 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	61bb      	str	r3, [r7, #24]
        continue;
 800805e:	e016      	b.n	800808e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	8ada      	ldrh	r2, [r3, #22]
 8008064:	4b1a      	ldr	r3, [pc, #104]	; (80080d0 <tcp_input+0x49c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	885b      	ldrh	r3, [r3, #2]
 800806a:	b29b      	uxth	r3, r3
 800806c:	429a      	cmp	r2, r3
 800806e:	d10c      	bne.n	800808a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	4b17      	ldr	r3, [pc, #92]	; (80080d4 <tcp_input+0x4a0>)
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	429a      	cmp	r2, r3
 800807a:	d00f      	beq.n	800809c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00d      	beq.n	800809e <tcp_input+0x46a>
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d009      	beq.n	800809e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1d1      	bne.n	800803e <tcp_input+0x40a>
 800809a:	e000      	b.n	800809e <tcp_input+0x46a>
            break;
 800809c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d029      	beq.n	80080f8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00a      	beq.n	80080c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	68da      	ldr	r2, [r3, #12]
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80080b2:	4b10      	ldr	r3, [pc, #64]	; (80080f4 <tcp_input+0x4c0>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80080ba:	4a0e      	ldr	r2, [pc, #56]	; (80080f4 <tcp_input+0x4c0>)
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80080c0:	6978      	ldr	r0, [r7, #20]
 80080c2:	f000 fa03 	bl	80084cc <tcp_listen_input>
      }
      pbuf_free(p);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fd ff8c 	bl	8005fe4 <pbuf_free>
      return;
 80080cc:	e1a8      	b.n	8008420 <tcp_input+0x7ec>
 80080ce:	bf00      	nop
 80080d0:	20008794 	.word	0x20008794
 80080d4:	200051fc 	.word	0x200051fc
 80080d8:	080105bc 	.word	0x080105bc
 80080dc:	080106e8 	.word	0x080106e8
 80080e0:	08010608 	.word	0x08010608
 80080e4:	20008778 	.word	0x20008778
 80080e8:	08010714 	.word	0x08010714
 80080ec:	2000877c 	.word	0x2000877c
 80080f0:	08010740 	.word	0x08010740
 80080f4:	20008774 	.word	0x20008774
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 8158 	beq.w	80083b0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008100:	4b95      	ldr	r3, [pc, #596]	; (8008358 <tcp_input+0x724>)
 8008102:	2200      	movs	r2, #0
 8008104:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	891a      	ldrh	r2, [r3, #8]
 800810a:	4b93      	ldr	r3, [pc, #588]	; (8008358 <tcp_input+0x724>)
 800810c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800810e:	4a92      	ldr	r2, [pc, #584]	; (8008358 <tcp_input+0x724>)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008114:	4b91      	ldr	r3, [pc, #580]	; (800835c <tcp_input+0x728>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a8f      	ldr	r2, [pc, #572]	; (8008358 <tcp_input+0x724>)
 800811a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800811c:	4b90      	ldr	r3, [pc, #576]	; (8008360 <tcp_input+0x72c>)
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008122:	4b90      	ldr	r3, [pc, #576]	; (8008364 <tcp_input+0x730>)
 8008124:	2200      	movs	r2, #0
 8008126:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008128:	4b8f      	ldr	r3, [pc, #572]	; (8008368 <tcp_input+0x734>)
 800812a:	2200      	movs	r2, #0
 800812c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800812e:	4b8f      	ldr	r3, [pc, #572]	; (800836c <tcp_input+0x738>)
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d006      	beq.n	8008148 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	7b5b      	ldrb	r3, [r3, #13]
 800813e:	f043 0301 	orr.w	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800814c:	2b00      	cmp	r3, #0
 800814e:	d017      	beq.n	8008180 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008150:	69f8      	ldr	r0, [r7, #28]
 8008152:	f7ff f929 	bl	80073a8 <tcp_process_refused_data>
 8008156:	4603      	mov	r3, r0
 8008158:	f113 0f0d 	cmn.w	r3, #13
 800815c:	d007      	beq.n	800816e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00c      	beq.n	8008180 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008166:	4b82      	ldr	r3, [pc, #520]	; (8008370 <tcp_input+0x73c>)
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008172:	2b00      	cmp	r3, #0
 8008174:	f040 80e3 	bne.w	800833e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008178:	69f8      	ldr	r0, [r7, #28]
 800817a:	f003 f9ad 	bl	800b4d8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800817e:	e0de      	b.n	800833e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008180:	4a7c      	ldr	r2, [pc, #496]	; (8008374 <tcp_input+0x740>)
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008186:	69f8      	ldr	r0, [r7, #28]
 8008188:	f000 fb18 	bl	80087bc <tcp_process>
 800818c:	4603      	mov	r3, r0
 800818e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008190:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008194:	f113 0f0d 	cmn.w	r3, #13
 8008198:	f000 80d3 	beq.w	8008342 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800819c:	4b71      	ldr	r3, [pc, #452]	; (8008364 <tcp_input+0x730>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d015      	beq.n	80081d4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d008      	beq.n	80081c4 <tcp_input+0x590>
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	6912      	ldr	r2, [r2, #16]
 80081bc:	f06f 010d 	mvn.w	r1, #13
 80081c0:	4610      	mov	r0, r2
 80081c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	486c      	ldr	r0, [pc, #432]	; (8008378 <tcp_input+0x744>)
 80081c8:	f7ff fbbc 	bl	8007944 <tcp_pcb_remove>
        tcp_free(pcb);
 80081cc:	69f8      	ldr	r0, [r7, #28]
 80081ce:	f7fe f9a9 	bl	8006524 <tcp_free>
 80081d2:	e0da      	b.n	800838a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80081d8:	4b63      	ldr	r3, [pc, #396]	; (8008368 <tcp_input+0x734>)
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01d      	beq.n	800821c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80081e0:	4b61      	ldr	r3, [pc, #388]	; (8008368 <tcp_input+0x734>)
 80081e2:	881b      	ldrh	r3, [r3, #0]
 80081e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00a      	beq.n	8008206 <tcp_input+0x5d2>
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081f6:	69fa      	ldr	r2, [r7, #28]
 80081f8:	6910      	ldr	r0, [r2, #16]
 80081fa:	89fa      	ldrh	r2, [r7, #14]
 80081fc:	69f9      	ldr	r1, [r7, #28]
 80081fe:	4798      	blx	r3
 8008200:	4603      	mov	r3, r0
 8008202:	74fb      	strb	r3, [r7, #19]
 8008204:	e001      	b.n	800820a <tcp_input+0x5d6>
 8008206:	2300      	movs	r3, #0
 8008208:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800820a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800820e:	f113 0f0d 	cmn.w	r3, #13
 8008212:	f000 8098 	beq.w	8008346 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008216:	4b54      	ldr	r3, [pc, #336]	; (8008368 <tcp_input+0x734>)
 8008218:	2200      	movs	r2, #0
 800821a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800821c:	69f8      	ldr	r0, [r7, #28]
 800821e:	f000 f915 	bl	800844c <tcp_input_delayed_close>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	f040 8090 	bne.w	800834a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800822a:	4b4d      	ldr	r3, [pc, #308]	; (8008360 <tcp_input+0x72c>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d041      	beq.n	80082b6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008236:	2b00      	cmp	r3, #0
 8008238:	d006      	beq.n	8008248 <tcp_input+0x614>
 800823a:	4b50      	ldr	r3, [pc, #320]	; (800837c <tcp_input+0x748>)
 800823c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008240:	494f      	ldr	r1, [pc, #316]	; (8008380 <tcp_input+0x74c>)
 8008242:	4850      	ldr	r0, [pc, #320]	; (8008384 <tcp_input+0x750>)
 8008244:	f006 f982 	bl	800e54c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	8b5b      	ldrh	r3, [r3, #26]
 800824c:	f003 0310 	and.w	r3, r3, #16
 8008250:	2b00      	cmp	r3, #0
 8008252:	d008      	beq.n	8008266 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008254:	4b42      	ldr	r3, [pc, #264]	; (8008360 <tcp_input+0x72c>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f7fd fec3 	bl	8005fe4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800825e:	69f8      	ldr	r0, [r7, #28]
 8008260:	f7fe fc48 	bl	8006af4 <tcp_abort>
            goto aborted;
 8008264:	e091      	b.n	800838a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00c      	beq.n	800828a <tcp_input+0x656>
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	6918      	ldr	r0, [r3, #16]
 800827a:	4b39      	ldr	r3, [pc, #228]	; (8008360 <tcp_input+0x72c>)
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	2300      	movs	r3, #0
 8008280:	69f9      	ldr	r1, [r7, #28]
 8008282:	47a0      	blx	r4
 8008284:	4603      	mov	r3, r0
 8008286:	74fb      	strb	r3, [r7, #19]
 8008288:	e008      	b.n	800829c <tcp_input+0x668>
 800828a:	4b35      	ldr	r3, [pc, #212]	; (8008360 <tcp_input+0x72c>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	2300      	movs	r3, #0
 8008290:	69f9      	ldr	r1, [r7, #28]
 8008292:	2000      	movs	r0, #0
 8008294:	f7ff f95e 	bl	8007554 <tcp_recv_null>
 8008298:	4603      	mov	r3, r0
 800829a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800829c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082a0:	f113 0f0d 	cmn.w	r3, #13
 80082a4:	d053      	beq.n	800834e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80082a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80082ae:	4b2c      	ldr	r3, [pc, #176]	; (8008360 <tcp_input+0x72c>)
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80082b6:	4b2b      	ldr	r3, [pc, #172]	; (8008364 <tcp_input+0x730>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d030      	beq.n	8008324 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d009      	beq.n	80082de <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082ce:	7b5a      	ldrb	r2, [r3, #13]
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082d4:	f042 0220 	orr.w	r2, r2, #32
 80082d8:	b2d2      	uxtb	r2, r2
 80082da:	735a      	strb	r2, [r3, #13]
 80082dc:	e022      	b.n	8008324 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80082e6:	d005      	beq.n	80082f4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082ec:	3301      	adds	r3, #1
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00b      	beq.n	8008316 <tcp_input+0x6e2>
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	6918      	ldr	r0, [r3, #16]
 8008308:	2300      	movs	r3, #0
 800830a:	2200      	movs	r2, #0
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	47a0      	blx	r4
 8008310:	4603      	mov	r3, r0
 8008312:	74fb      	strb	r3, [r7, #19]
 8008314:	e001      	b.n	800831a <tcp_input+0x6e6>
 8008316:	2300      	movs	r3, #0
 8008318:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800831a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800831e:	f113 0f0d 	cmn.w	r3, #13
 8008322:	d016      	beq.n	8008352 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008324:	4b13      	ldr	r3, [pc, #76]	; (8008374 <tcp_input+0x740>)
 8008326:	2200      	movs	r2, #0
 8008328:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800832a:	69f8      	ldr	r0, [r7, #28]
 800832c:	f000 f88e 	bl	800844c <tcp_input_delayed_close>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d128      	bne.n	8008388 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008336:	69f8      	ldr	r0, [r7, #28]
 8008338:	f002 fac8 	bl	800a8cc <tcp_output>
 800833c:	e025      	b.n	800838a <tcp_input+0x756>
        goto aborted;
 800833e:	bf00      	nop
 8008340:	e023      	b.n	800838a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008342:	bf00      	nop
 8008344:	e021      	b.n	800838a <tcp_input+0x756>
              goto aborted;
 8008346:	bf00      	nop
 8008348:	e01f      	b.n	800838a <tcp_input+0x756>
          goto aborted;
 800834a:	bf00      	nop
 800834c:	e01d      	b.n	800838a <tcp_input+0x756>
            goto aborted;
 800834e:	bf00      	nop
 8008350:	e01b      	b.n	800838a <tcp_input+0x756>
              goto aborted;
 8008352:	bf00      	nop
 8008354:	e019      	b.n	800838a <tcp_input+0x756>
 8008356:	bf00      	nop
 8008358:	20008784 	.word	0x20008784
 800835c:	20008794 	.word	0x20008794
 8008360:	200087b4 	.word	0x200087b4
 8008364:	200087b1 	.word	0x200087b1
 8008368:	200087ac 	.word	0x200087ac
 800836c:	200087b0 	.word	0x200087b0
 8008370:	200087ae 	.word	0x200087ae
 8008374:	200087b8 	.word	0x200087b8
 8008378:	20008778 	.word	0x20008778
 800837c:	080105bc 	.word	0x080105bc
 8008380:	08010770 	.word	0x08010770
 8008384:	08010608 	.word	0x08010608
          goto aborted;
 8008388:	bf00      	nop
    tcp_input_pcb = NULL;
 800838a:	4b27      	ldr	r3, [pc, #156]	; (8008428 <tcp_input+0x7f4>)
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008390:	4b26      	ldr	r3, [pc, #152]	; (800842c <tcp_input+0x7f8>)
 8008392:	2200      	movs	r2, #0
 8008394:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008396:	4b26      	ldr	r3, [pc, #152]	; (8008430 <tcp_input+0x7fc>)
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d03f      	beq.n	800841e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800839e:	4b24      	ldr	r3, [pc, #144]	; (8008430 <tcp_input+0x7fc>)
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fd fe1e 	bl	8005fe4 <pbuf_free>
      inseg.p = NULL;
 80083a8:	4b21      	ldr	r3, [pc, #132]	; (8008430 <tcp_input+0x7fc>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80083ae:	e036      	b.n	800841e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80083b0:	4b20      	ldr	r3, [pc, #128]	; (8008434 <tcp_input+0x800>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	899b      	ldrh	r3, [r3, #12]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7fc fab5 	bl	8004928 <lwip_htons>
 80083be:	4603      	mov	r3, r0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	f003 0304 	and.w	r3, r3, #4
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d118      	bne.n	80083fc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083ca:	4b1b      	ldr	r3, [pc, #108]	; (8008438 <tcp_input+0x804>)
 80083cc:	6819      	ldr	r1, [r3, #0]
 80083ce:	4b1b      	ldr	r3, [pc, #108]	; (800843c <tcp_input+0x808>)
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	4b1a      	ldr	r3, [pc, #104]	; (8008440 <tcp_input+0x80c>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083da:	4b16      	ldr	r3, [pc, #88]	; (8008434 <tcp_input+0x800>)
 80083dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083de:	885b      	ldrh	r3, [r3, #2]
 80083e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083e2:	4a14      	ldr	r2, [pc, #80]	; (8008434 <tcp_input+0x800>)
 80083e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083e6:	8812      	ldrh	r2, [r2, #0]
 80083e8:	b292      	uxth	r2, r2
 80083ea:	9202      	str	r2, [sp, #8]
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	4b15      	ldr	r3, [pc, #84]	; (8008444 <tcp_input+0x810>)
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	4b15      	ldr	r3, [pc, #84]	; (8008448 <tcp_input+0x814>)
 80083f4:	4602      	mov	r2, r0
 80083f6:	2000      	movs	r0, #0
 80083f8:	f003 f81c 	bl	800b434 <tcp_rst>
    pbuf_free(p);
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7fd fdf1 	bl	8005fe4 <pbuf_free>
  return;
 8008402:	e00c      	b.n	800841e <tcp_input+0x7ea>
    goto dropped;
 8008404:	bf00      	nop
 8008406:	e006      	b.n	8008416 <tcp_input+0x7e2>
    goto dropped;
 8008408:	bf00      	nop
 800840a:	e004      	b.n	8008416 <tcp_input+0x7e2>
    goto dropped;
 800840c:	bf00      	nop
 800840e:	e002      	b.n	8008416 <tcp_input+0x7e2>
      goto dropped;
 8008410:	bf00      	nop
 8008412:	e000      	b.n	8008416 <tcp_input+0x7e2>
      goto dropped;
 8008414:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7fd fde4 	bl	8005fe4 <pbuf_free>
 800841c:	e000      	b.n	8008420 <tcp_input+0x7ec>
  return;
 800841e:	bf00      	nop
}
 8008420:	3724      	adds	r7, #36	; 0x24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd90      	pop	{r4, r7, pc}
 8008426:	bf00      	nop
 8008428:	200087b8 	.word	0x200087b8
 800842c:	200087b4 	.word	0x200087b4
 8008430:	20008784 	.word	0x20008784
 8008434:	20008794 	.word	0x20008794
 8008438:	200087a8 	.word	0x200087a8
 800843c:	200087ae 	.word	0x200087ae
 8008440:	200087a4 	.word	0x200087a4
 8008444:	2000520c 	.word	0x2000520c
 8008448:	20005210 	.word	0x20005210

0800844c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <tcp_input_delayed_close+0x1c>
 800845a:	4b17      	ldr	r3, [pc, #92]	; (80084b8 <tcp_input_delayed_close+0x6c>)
 800845c:	f240 225a 	movw	r2, #602	; 0x25a
 8008460:	4916      	ldr	r1, [pc, #88]	; (80084bc <tcp_input_delayed_close+0x70>)
 8008462:	4817      	ldr	r0, [pc, #92]	; (80084c0 <tcp_input_delayed_close+0x74>)
 8008464:	f006 f872 	bl	800e54c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008468:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <tcp_input_delayed_close+0x78>)
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	f003 0310 	and.w	r3, r3, #16
 8008470:	2b00      	cmp	r3, #0
 8008472:	d01c      	beq.n	80084ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	8b5b      	ldrh	r3, [r3, #26]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10d      	bne.n	800849c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008486:	2b00      	cmp	r3, #0
 8008488:	d008      	beq.n	800849c <tcp_input_delayed_close+0x50>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6912      	ldr	r2, [r2, #16]
 8008494:	f06f 010e 	mvn.w	r1, #14
 8008498:	4610      	mov	r0, r2
 800849a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	480a      	ldr	r0, [pc, #40]	; (80084c8 <tcp_input_delayed_close+0x7c>)
 80084a0:	f7ff fa50 	bl	8007944 <tcp_pcb_remove>
    tcp_free(pcb);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7fe f83d 	bl	8006524 <tcp_free>
    return 1;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	080105bc 	.word	0x080105bc
 80084bc:	0801078c 	.word	0x0801078c
 80084c0:	08010608 	.word	0x08010608
 80084c4:	200087b1 	.word	0x200087b1
 80084c8:	20008778 	.word	0x20008778

080084cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80084cc:	b590      	push	{r4, r7, lr}
 80084ce:	b08b      	sub	sp, #44	; 0x2c
 80084d0:	af04      	add	r7, sp, #16
 80084d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80084d4:	4b6f      	ldr	r3, [pc, #444]	; (8008694 <tcp_listen_input+0x1c8>)
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	f003 0304 	and.w	r3, r3, #4
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 80d2 	bne.w	8008686 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d106      	bne.n	80084f6 <tcp_listen_input+0x2a>
 80084e8:	4b6b      	ldr	r3, [pc, #428]	; (8008698 <tcp_listen_input+0x1cc>)
 80084ea:	f240 2281 	movw	r2, #641	; 0x281
 80084ee:	496b      	ldr	r1, [pc, #428]	; (800869c <tcp_listen_input+0x1d0>)
 80084f0:	486b      	ldr	r0, [pc, #428]	; (80086a0 <tcp_listen_input+0x1d4>)
 80084f2:	f006 f82b 	bl	800e54c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80084f6:	4b67      	ldr	r3, [pc, #412]	; (8008694 <tcp_listen_input+0x1c8>)
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	f003 0310 	and.w	r3, r3, #16
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d019      	beq.n	8008536 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008502:	4b68      	ldr	r3, [pc, #416]	; (80086a4 <tcp_listen_input+0x1d8>)
 8008504:	6819      	ldr	r1, [r3, #0]
 8008506:	4b68      	ldr	r3, [pc, #416]	; (80086a8 <tcp_listen_input+0x1dc>)
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	4b67      	ldr	r3, [pc, #412]	; (80086ac <tcp_listen_input+0x1e0>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008512:	4b67      	ldr	r3, [pc, #412]	; (80086b0 <tcp_listen_input+0x1e4>)
 8008514:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008516:	885b      	ldrh	r3, [r3, #2]
 8008518:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800851a:	4a65      	ldr	r2, [pc, #404]	; (80086b0 <tcp_listen_input+0x1e4>)
 800851c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800851e:	8812      	ldrh	r2, [r2, #0]
 8008520:	b292      	uxth	r2, r2
 8008522:	9202      	str	r2, [sp, #8]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	4b63      	ldr	r3, [pc, #396]	; (80086b4 <tcp_listen_input+0x1e8>)
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	4b63      	ldr	r3, [pc, #396]	; (80086b8 <tcp_listen_input+0x1ec>)
 800852c:	4602      	mov	r2, r0
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f002 ff80 	bl	800b434 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008534:	e0a9      	b.n	800868a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008536:	4b57      	ldr	r3, [pc, #348]	; (8008694 <tcp_listen_input+0x1c8>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80a3 	beq.w	800868a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7d5b      	ldrb	r3, [r3, #21]
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff f927 	bl	800779c <tcp_alloc>
 800854e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d111      	bne.n	800857a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <tcp_listen_input+0xa8>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6910      	ldr	r0, [r2, #16]
 8008566:	f04f 32ff 	mov.w	r2, #4294967295
 800856a:	2100      	movs	r1, #0
 800856c:	4798      	blx	r3
 800856e:	4603      	mov	r3, r0
 8008570:	73bb      	strb	r3, [r7, #14]
      return;
 8008572:	e08b      	b.n	800868c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008574:	23f0      	movs	r3, #240	; 0xf0
 8008576:	73bb      	strb	r3, [r7, #14]
      return;
 8008578:	e088      	b.n	800868c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800857a:	4b50      	ldr	r3, [pc, #320]	; (80086bc <tcp_listen_input+0x1f0>)
 800857c:	695a      	ldr	r2, [r3, #20]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008582:	4b4e      	ldr	r3, [pc, #312]	; (80086bc <tcp_listen_input+0x1f0>)
 8008584:	691a      	ldr	r2, [r3, #16]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	8ada      	ldrh	r2, [r3, #22]
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008592:	4b47      	ldr	r3, [pc, #284]	; (80086b0 <tcp_listen_input+0x1e4>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29a      	uxth	r2, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	2203      	movs	r2, #3
 80085a2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80085a4:	4b41      	ldr	r3, [pc, #260]	; (80086ac <tcp_listen_input+0x1e0>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80085b6:	6978      	ldr	r0, [r7, #20]
 80085b8:	f7ff fa58 	bl	8007a6c <tcp_next_iss>
 80085bc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80085d6:	4b35      	ldr	r3, [pc, #212]	; (80086ac <tcp_listen_input+0x1e0>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	1e5a      	subs	r2, r3, #1
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	691a      	ldr	r2, [r3, #16]
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	7a5b      	ldrb	r3, [r3, #9]
 80085f2:	f003 030c 	and.w	r3, r3, #12
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	7a1a      	ldrb	r2, [r3, #8]
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008604:	4b2e      	ldr	r3, [pc, #184]	; (80086c0 <tcp_listen_input+0x1f4>)
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	60da      	str	r2, [r3, #12]
 800860c:	4a2c      	ldr	r2, [pc, #176]	; (80086c0 <tcp_listen_input+0x1f4>)
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	f003 f8d1 	bl	800b7b8 <tcp_timer_needed>
 8008616:	4b2b      	ldr	r3, [pc, #172]	; (80086c4 <tcp_listen_input+0x1f8>)
 8008618:	2201      	movs	r2, #1
 800861a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800861c:	6978      	ldr	r0, [r7, #20]
 800861e:	f001 fd8f 	bl	800a140 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008622:	4b23      	ldr	r3, [pc, #140]	; (80086b0 <tcp_listen_input+0x1e4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	89db      	ldrh	r3, [r3, #14]
 8008628:	b29a      	uxth	r2, r3
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	3304      	adds	r3, #4
 8008644:	4618      	mov	r0, r3
 8008646:	f004 fc95 	bl	800cf74 <ip4_route>
 800864a:	4601      	mov	r1, r0
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	3304      	adds	r3, #4
 8008650:	461a      	mov	r2, r3
 8008652:	4620      	mov	r0, r4
 8008654:	f7ff fa30 	bl	8007ab8 <tcp_eff_send_mss_netif>
 8008658:	4603      	mov	r3, r0
 800865a:	461a      	mov	r2, r3
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008660:	2112      	movs	r1, #18
 8008662:	6978      	ldr	r0, [r7, #20]
 8008664:	f002 f844 	bl	800a6f0 <tcp_enqueue_flags>
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800866c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d004      	beq.n	800867e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008674:	2100      	movs	r1, #0
 8008676:	6978      	ldr	r0, [r7, #20]
 8008678:	f7fe f97e 	bl	8006978 <tcp_abandon>
      return;
 800867c:	e006      	b.n	800868c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800867e:	6978      	ldr	r0, [r7, #20]
 8008680:	f002 f924 	bl	800a8cc <tcp_output>
  return;
 8008684:	e001      	b.n	800868a <tcp_listen_input+0x1be>
    return;
 8008686:	bf00      	nop
 8008688:	e000      	b.n	800868c <tcp_listen_input+0x1c0>
  return;
 800868a:	bf00      	nop
}
 800868c:	371c      	adds	r7, #28
 800868e:	46bd      	mov	sp, r7
 8008690:	bd90      	pop	{r4, r7, pc}
 8008692:	bf00      	nop
 8008694:	200087b0 	.word	0x200087b0
 8008698:	080105bc 	.word	0x080105bc
 800869c:	080107b4 	.word	0x080107b4
 80086a0:	08010608 	.word	0x08010608
 80086a4:	200087a8 	.word	0x200087a8
 80086a8:	200087ae 	.word	0x200087ae
 80086ac:	200087a4 	.word	0x200087a4
 80086b0:	20008794 	.word	0x20008794
 80086b4:	2000520c 	.word	0x2000520c
 80086b8:	20005210 	.word	0x20005210
 80086bc:	200051fc 	.word	0x200051fc
 80086c0:	20008778 	.word	0x20008778
 80086c4:	20008780 	.word	0x20008780

080086c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af04      	add	r7, sp, #16
 80086ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80086d0:	4b2f      	ldr	r3, [pc, #188]	; (8008790 <tcp_timewait_input+0xc8>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d153      	bne.n	8008784 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d106      	bne.n	80086f0 <tcp_timewait_input+0x28>
 80086e2:	4b2c      	ldr	r3, [pc, #176]	; (8008794 <tcp_timewait_input+0xcc>)
 80086e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80086e8:	492b      	ldr	r1, [pc, #172]	; (8008798 <tcp_timewait_input+0xd0>)
 80086ea:	482c      	ldr	r0, [pc, #176]	; (800879c <tcp_timewait_input+0xd4>)
 80086ec:	f005 ff2e 	bl	800e54c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80086f0:	4b27      	ldr	r3, [pc, #156]	; (8008790 <tcp_timewait_input+0xc8>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d02a      	beq.n	8008752 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80086fc:	4b28      	ldr	r3, [pc, #160]	; (80087a0 <tcp_timewait_input+0xd8>)
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	db2d      	blt.n	8008766 <tcp_timewait_input+0x9e>
 800870a:	4b25      	ldr	r3, [pc, #148]	; (80087a0 <tcp_timewait_input+0xd8>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008716:	440b      	add	r3, r1
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b00      	cmp	r3, #0
 800871c:	dc23      	bgt.n	8008766 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800871e:	4b21      	ldr	r3, [pc, #132]	; (80087a4 <tcp_timewait_input+0xdc>)
 8008720:	6819      	ldr	r1, [r3, #0]
 8008722:	4b21      	ldr	r3, [pc, #132]	; (80087a8 <tcp_timewait_input+0xe0>)
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	4b1d      	ldr	r3, [pc, #116]	; (80087a0 <tcp_timewait_input+0xd8>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800872e:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <tcp_timewait_input+0xe4>)
 8008730:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008732:	885b      	ldrh	r3, [r3, #2]
 8008734:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008736:	4a1d      	ldr	r2, [pc, #116]	; (80087ac <tcp_timewait_input+0xe4>)
 8008738:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800873a:	8812      	ldrh	r2, [r2, #0]
 800873c:	b292      	uxth	r2, r2
 800873e:	9202      	str	r2, [sp, #8]
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	4b1b      	ldr	r3, [pc, #108]	; (80087b0 <tcp_timewait_input+0xe8>)
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	4b1b      	ldr	r3, [pc, #108]	; (80087b4 <tcp_timewait_input+0xec>)
 8008748:	4602      	mov	r2, r0
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f002 fe72 	bl	800b434 <tcp_rst>
      return;
 8008750:	e01b      	b.n	800878a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <tcp_timewait_input+0xc8>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800875e:	4b16      	ldr	r3, [pc, #88]	; (80087b8 <tcp_timewait_input+0xf0>)
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <tcp_timewait_input+0xe0>)
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00c      	beq.n	8008788 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8b5b      	ldrh	r3, [r3, #26]
 8008772:	f043 0302 	orr.w	r3, r3, #2
 8008776:	b29a      	uxth	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f002 f8a5 	bl	800a8cc <tcp_output>
  }
  return;
 8008782:	e001      	b.n	8008788 <tcp_timewait_input+0xc0>
    return;
 8008784:	bf00      	nop
 8008786:	e000      	b.n	800878a <tcp_timewait_input+0xc2>
  return;
 8008788:	bf00      	nop
}
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	200087b0 	.word	0x200087b0
 8008794:	080105bc 	.word	0x080105bc
 8008798:	080107d4 	.word	0x080107d4
 800879c:	08010608 	.word	0x08010608
 80087a0:	200087a4 	.word	0x200087a4
 80087a4:	200087a8 	.word	0x200087a8
 80087a8:	200087ae 	.word	0x200087ae
 80087ac:	20008794 	.word	0x20008794
 80087b0:	2000520c 	.word	0x2000520c
 80087b4:	20005210 	.word	0x20005210
 80087b8:	2000876c 	.word	0x2000876c

080087bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80087bc:	b590      	push	{r4, r7, lr}
 80087be:	b08d      	sub	sp, #52	; 0x34
 80087c0:	af04      	add	r7, sp, #16
 80087c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80087c4:	2300      	movs	r3, #0
 80087c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d106      	bne.n	80087e0 <tcp_process+0x24>
 80087d2:	4b9d      	ldr	r3, [pc, #628]	; (8008a48 <tcp_process+0x28c>)
 80087d4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80087d8:	499c      	ldr	r1, [pc, #624]	; (8008a4c <tcp_process+0x290>)
 80087da:	489d      	ldr	r0, [pc, #628]	; (8008a50 <tcp_process+0x294>)
 80087dc:	f005 feb6 	bl	800e54c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80087e0:	4b9c      	ldr	r3, [pc, #624]	; (8008a54 <tcp_process+0x298>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d04e      	beq.n	800888a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	7d1b      	ldrb	r3, [r3, #20]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d108      	bne.n	8008806 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087f8:	4b97      	ldr	r3, [pc, #604]	; (8008a58 <tcp_process+0x29c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d123      	bne.n	8008848 <tcp_process+0x8c>
        acceptable = 1;
 8008800:	2301      	movs	r3, #1
 8008802:	76fb      	strb	r3, [r7, #27]
 8008804:	e020      	b.n	8008848 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800880a:	4b94      	ldr	r3, [pc, #592]	; (8008a5c <tcp_process+0x2a0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	429a      	cmp	r2, r3
 8008810:	d102      	bne.n	8008818 <tcp_process+0x5c>
        acceptable = 1;
 8008812:	2301      	movs	r3, #1
 8008814:	76fb      	strb	r3, [r7, #27]
 8008816:	e017      	b.n	8008848 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008818:	4b90      	ldr	r3, [pc, #576]	; (8008a5c <tcp_process+0x2a0>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	db10      	blt.n	8008848 <tcp_process+0x8c>
 8008826:	4b8d      	ldr	r3, [pc, #564]	; (8008a5c <tcp_process+0x2a0>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008832:	440b      	add	r3, r1
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	dc06      	bgt.n	8008848 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	8b5b      	ldrh	r3, [r3, #26]
 800883e:	f043 0302 	orr.w	r3, r3, #2
 8008842:	b29a      	uxth	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008848:	7efb      	ldrb	r3, [r7, #27]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d01b      	beq.n	8008886 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7d1b      	ldrb	r3, [r3, #20]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <tcp_process+0xa8>
 8008856:	4b7c      	ldr	r3, [pc, #496]	; (8008a48 <tcp_process+0x28c>)
 8008858:	f44f 724e 	mov.w	r2, #824	; 0x338
 800885c:	4980      	ldr	r1, [pc, #512]	; (8008a60 <tcp_process+0x2a4>)
 800885e:	487c      	ldr	r0, [pc, #496]	; (8008a50 <tcp_process+0x294>)
 8008860:	f005 fe74 	bl	800e54c <iprintf>
      recv_flags |= TF_RESET;
 8008864:	4b7f      	ldr	r3, [pc, #508]	; (8008a64 <tcp_process+0x2a8>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	f043 0308 	orr.w	r3, r3, #8
 800886c:	b2da      	uxtb	r2, r3
 800886e:	4b7d      	ldr	r3, [pc, #500]	; (8008a64 <tcp_process+0x2a8>)
 8008870:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	8b5b      	ldrh	r3, [r3, #26]
 8008876:	f023 0301 	bic.w	r3, r3, #1
 800887a:	b29a      	uxth	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008880:	f06f 030d 	mvn.w	r3, #13
 8008884:	e37a      	b.n	8008f7c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	e378      	b.n	8008f7c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800888a:	4b72      	ldr	r3, [pc, #456]	; (8008a54 <tcp_process+0x298>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d010      	beq.n	80088b8 <tcp_process+0xfc>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	7d1b      	ldrb	r3, [r3, #20]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d00c      	beq.n	80088b8 <tcp_process+0xfc>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	7d1b      	ldrb	r3, [r3, #20]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d008      	beq.n	80088b8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	8b5b      	ldrh	r3, [r3, #26]
 80088aa:	f043 0302 	orr.w	r3, r3, #2
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	e361      	b.n	8008f7c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	8b5b      	ldrh	r3, [r3, #26]
 80088bc:	f003 0310 	and.w	r3, r3, #16
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d103      	bne.n	80088cc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80088c4:	4b68      	ldr	r3, [pc, #416]	; (8008a68 <tcp_process+0x2ac>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 fc2f 	bl	800a140 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	7d1b      	ldrb	r3, [r3, #20]
 80088e6:	3b02      	subs	r3, #2
 80088e8:	2b07      	cmp	r3, #7
 80088ea:	f200 8337 	bhi.w	8008f5c <tcp_process+0x7a0>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <tcp_process+0x138>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008915 	.word	0x08008915
 80088f8:	08008b45 	.word	0x08008b45
 80088fc:	08008cbd 	.word	0x08008cbd
 8008900:	08008ce7 	.word	0x08008ce7
 8008904:	08008e0b 	.word	0x08008e0b
 8008908:	08008cbd 	.word	0x08008cbd
 800890c:	08008e97 	.word	0x08008e97
 8008910:	08008f27 	.word	0x08008f27
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008914:	4b4f      	ldr	r3, [pc, #316]	; (8008a54 <tcp_process+0x298>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f003 0310 	and.w	r3, r3, #16
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 80e4 	beq.w	8008aea <tcp_process+0x32e>
 8008922:	4b4c      	ldr	r3, [pc, #304]	; (8008a54 <tcp_process+0x298>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	f003 0302 	and.w	r3, r3, #2
 800892a:	2b00      	cmp	r3, #0
 800892c:	f000 80dd 	beq.w	8008aea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	4b48      	ldr	r3, [pc, #288]	; (8008a58 <tcp_process+0x29c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	429a      	cmp	r2, r3
 800893c:	f040 80d5 	bne.w	8008aea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008940:	4b46      	ldr	r3, [pc, #280]	; (8008a5c <tcp_process+0x2a0>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	1c5a      	adds	r2, r3, #1
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008952:	4b41      	ldr	r3, [pc, #260]	; (8008a58 <tcp_process+0x29c>)
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800895a:	4b44      	ldr	r3, [pc, #272]	; (8008a6c <tcp_process+0x2b0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	89db      	ldrh	r3, [r3, #14]
 8008960:	b29a      	uxth	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008974:	4b39      	ldr	r3, [pc, #228]	; (8008a5c <tcp_process+0x2a0>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	1e5a      	subs	r2, r3, #1
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2204      	movs	r2, #4
 8008982:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	3304      	adds	r3, #4
 800898c:	4618      	mov	r0, r3
 800898e:	f004 faf1 	bl	800cf74 <ip4_route>
 8008992:	4601      	mov	r1, r0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	3304      	adds	r3, #4
 8008998:	461a      	mov	r2, r3
 800899a:	4620      	mov	r0, r4
 800899c:	f7ff f88c 	bl	8007ab8 <tcp_eff_send_mss_netif>
 80089a0:	4603      	mov	r3, r0
 80089a2:	461a      	mov	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089ac:	009a      	lsls	r2, r3, #2
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089b2:	005b      	lsls	r3, r3, #1
 80089b4:	f241 111c 	movw	r1, #4380	; 0x111c
 80089b8:	428b      	cmp	r3, r1
 80089ba:	bf38      	it	cc
 80089bc:	460b      	movcc	r3, r1
 80089be:	429a      	cmp	r2, r3
 80089c0:	d204      	bcs.n	80089cc <tcp_process+0x210>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	e00d      	b.n	80089e8 <tcp_process+0x22c>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d904      	bls.n	80089e4 <tcp_process+0x228>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	e001      	b.n	80089e8 <tcp_process+0x22c>
 80089e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d106      	bne.n	8008a06 <tcp_process+0x24a>
 80089f8:	4b13      	ldr	r3, [pc, #76]	; (8008a48 <tcp_process+0x28c>)
 80089fa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80089fe:	491c      	ldr	r1, [pc, #112]	; (8008a70 <tcp_process+0x2b4>)
 8008a00:	4813      	ldr	r0, [pc, #76]	; (8008a50 <tcp_process+0x294>)
 8008a02:	f005 fda3 	bl	800e54c <iprintf>
        --pcb->snd_queuelen;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d12a      	bne.n	8008a78 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a26:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <tcp_process+0x280>
 8008a2e:	4b06      	ldr	r3, [pc, #24]	; (8008a48 <tcp_process+0x28c>)
 8008a30:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008a34:	490f      	ldr	r1, [pc, #60]	; (8008a74 <tcp_process+0x2b8>)
 8008a36:	4806      	ldr	r0, [pc, #24]	; (8008a50 <tcp_process+0x294>)
 8008a38:	f005 fd88 	bl	800e54c <iprintf>
          pcb->unsent = rseg->next;
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	66da      	str	r2, [r3, #108]	; 0x6c
 8008a44:	e01c      	b.n	8008a80 <tcp_process+0x2c4>
 8008a46:	bf00      	nop
 8008a48:	080105bc 	.word	0x080105bc
 8008a4c:	080107f4 	.word	0x080107f4
 8008a50:	08010608 	.word	0x08010608
 8008a54:	200087b0 	.word	0x200087b0
 8008a58:	200087a8 	.word	0x200087a8
 8008a5c:	200087a4 	.word	0x200087a4
 8008a60:	08010810 	.word	0x08010810
 8008a64:	200087b1 	.word	0x200087b1
 8008a68:	2000876c 	.word	0x2000876c
 8008a6c:	20008794 	.word	0x20008794
 8008a70:	08010830 	.word	0x08010830
 8008a74:	08010848 	.word	0x08010848
        } else {
          pcb->unacked = rseg->next;
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008a80:	69f8      	ldr	r0, [r7, #28]
 8008a82:	f7fe fd22 	bl	80074ca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d104      	bne.n	8008a98 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a94:	861a      	strh	r2, [r3, #48]	; 0x30
 8008a96:	e006      	b.n	8008aa6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <tcp_process+0x30a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	6910      	ldr	r0, [r2, #16]
 8008aba:	2200      	movs	r2, #0
 8008abc:	6879      	ldr	r1, [r7, #4]
 8008abe:	4798      	blx	r3
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	76bb      	strb	r3, [r7, #26]
 8008ac4:	e001      	b.n	8008aca <tcp_process+0x30e>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008aca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008ace:	f113 0f0d 	cmn.w	r3, #13
 8008ad2:	d102      	bne.n	8008ada <tcp_process+0x31e>
          return ERR_ABRT;
 8008ad4:	f06f 030c 	mvn.w	r3, #12
 8008ad8:	e250      	b.n	8008f7c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	8b5b      	ldrh	r3, [r3, #26]
 8008ade:	f043 0302 	orr.w	r3, r3, #2
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008ae8:	e23a      	b.n	8008f60 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008aea:	4b98      	ldr	r3, [pc, #608]	; (8008d4c <tcp_process+0x590>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	f003 0310 	and.w	r3, r3, #16
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f000 8234 	beq.w	8008f60 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008af8:	4b95      	ldr	r3, [pc, #596]	; (8008d50 <tcp_process+0x594>)
 8008afa:	6819      	ldr	r1, [r3, #0]
 8008afc:	4b95      	ldr	r3, [pc, #596]	; (8008d54 <tcp_process+0x598>)
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	461a      	mov	r2, r3
 8008b02:	4b95      	ldr	r3, [pc, #596]	; (8008d58 <tcp_process+0x59c>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b08:	4b94      	ldr	r3, [pc, #592]	; (8008d5c <tcp_process+0x5a0>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b0c:	885b      	ldrh	r3, [r3, #2]
 8008b0e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b10:	4a92      	ldr	r2, [pc, #584]	; (8008d5c <tcp_process+0x5a0>)
 8008b12:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b14:	8812      	ldrh	r2, [r2, #0]
 8008b16:	b292      	uxth	r2, r2
 8008b18:	9202      	str	r2, [sp, #8]
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	4b90      	ldr	r3, [pc, #576]	; (8008d60 <tcp_process+0x5a4>)
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	4b90      	ldr	r3, [pc, #576]	; (8008d64 <tcp_process+0x5a8>)
 8008b22:	4602      	mov	r2, r0
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f002 fc85 	bl	800b434 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008b30:	2b05      	cmp	r3, #5
 8008b32:	f200 8215 	bhi.w	8008f60 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f002 fa51 	bl	800afe4 <tcp_rexmit_rto>
      break;
 8008b42:	e20d      	b.n	8008f60 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008b44:	4b81      	ldr	r3, [pc, #516]	; (8008d4c <tcp_process+0x590>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 80a1 	beq.w	8008c94 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008b52:	4b7f      	ldr	r3, [pc, #508]	; (8008d50 <tcp_process+0x594>)
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	db7e      	blt.n	8008c60 <tcp_process+0x4a4>
 8008b62:	4b7b      	ldr	r3, [pc, #492]	; (8008d50 <tcp_process+0x594>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dc77      	bgt.n	8008c60 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2204      	movs	r2, #4
 8008b74:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d102      	bne.n	8008b84 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008b7e:	23fa      	movs	r3, #250	; 0xfa
 8008b80:	76bb      	strb	r3, [r7, #26]
 8008b82:	e01d      	b.n	8008bc0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <tcp_process+0x3e0>
 8008b8e:	4b76      	ldr	r3, [pc, #472]	; (8008d68 <tcp_process+0x5ac>)
 8008b90:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008b94:	4975      	ldr	r1, [pc, #468]	; (8008d6c <tcp_process+0x5b0>)
 8008b96:	4876      	ldr	r0, [pc, #472]	; (8008d70 <tcp_process+0x5b4>)
 8008b98:	f005 fcd8 	bl	800e54c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <tcp_process+0x400>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6910      	ldr	r0, [r2, #16]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	4798      	blx	r3
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	76bb      	strb	r3, [r7, #26]
 8008bba:	e001      	b.n	8008bc0 <tcp_process+0x404>
 8008bbc:	23f0      	movs	r3, #240	; 0xf0
 8008bbe:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008bc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00a      	beq.n	8008bde <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008bc8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008bcc:	f113 0f0d 	cmn.w	r3, #13
 8008bd0:	d002      	beq.n	8008bd8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7fd ff8e 	bl	8006af4 <tcp_abort>
            }
            return ERR_ABRT;
 8008bd8:	f06f 030c 	mvn.w	r3, #12
 8008bdc:	e1ce      	b.n	8008f7c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fae0 	bl	80091a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008be4:	4b63      	ldr	r3, [pc, #396]	; (8008d74 <tcp_process+0x5b8>)
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <tcp_process+0x43c>
            recv_acked--;
 8008bec:	4b61      	ldr	r3, [pc, #388]	; (8008d74 <tcp_process+0x5b8>)
 8008bee:	881b      	ldrh	r3, [r3, #0]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	4b5f      	ldr	r3, [pc, #380]	; (8008d74 <tcp_process+0x5b8>)
 8008bf6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008bfc:	009a      	lsls	r2, r3, #2
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	f241 111c 	movw	r1, #4380	; 0x111c
 8008c08:	428b      	cmp	r3, r1
 8008c0a:	bf38      	it	cc
 8008c0c:	460b      	movcc	r3, r1
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d204      	bcs.n	8008c1c <tcp_process+0x460>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	e00d      	b.n	8008c38 <tcp_process+0x47c>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c20:	005b      	lsls	r3, r3, #1
 8008c22:	f241 121c 	movw	r2, #4380	; 0x111c
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d904      	bls.n	8008c34 <tcp_process+0x478>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	e001      	b.n	8008c38 <tcp_process+0x47c>
 8008c34:	f241 131c 	movw	r3, #4380	; 0x111c
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008c3e:	4b4e      	ldr	r3, [pc, #312]	; (8008d78 <tcp_process+0x5bc>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d037      	beq.n	8008cba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	8b5b      	ldrh	r3, [r3, #26]
 8008c4e:	f043 0302 	orr.w	r3, r3, #2
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2207      	movs	r2, #7
 8008c5c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008c5e:	e02c      	b.n	8008cba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c60:	4b3b      	ldr	r3, [pc, #236]	; (8008d50 <tcp_process+0x594>)
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	4b3b      	ldr	r3, [pc, #236]	; (8008d54 <tcp_process+0x598>)
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4b3b      	ldr	r3, [pc, #236]	; (8008d58 <tcp_process+0x59c>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c70:	4b3a      	ldr	r3, [pc, #232]	; (8008d5c <tcp_process+0x5a0>)
 8008c72:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c74:	885b      	ldrh	r3, [r3, #2]
 8008c76:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c78:	4a38      	ldr	r2, [pc, #224]	; (8008d5c <tcp_process+0x5a0>)
 8008c7a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c7c:	8812      	ldrh	r2, [r2, #0]
 8008c7e:	b292      	uxth	r2, r2
 8008c80:	9202      	str	r2, [sp, #8]
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	4b36      	ldr	r3, [pc, #216]	; (8008d60 <tcp_process+0x5a4>)
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	4b36      	ldr	r3, [pc, #216]	; (8008d64 <tcp_process+0x5a8>)
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f002 fbd1 	bl	800b434 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008c92:	e167      	b.n	8008f64 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008c94:	4b2d      	ldr	r3, [pc, #180]	; (8008d4c <tcp_process+0x590>)
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 8161 	beq.w	8008f64 <tcp_process+0x7a8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	1e5a      	subs	r2, r3, #1
 8008ca8:	4b2b      	ldr	r3, [pc, #172]	; (8008d58 <tcp_process+0x59c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	f040 8159 	bne.w	8008f64 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f002 f9b8 	bl	800b028 <tcp_rexmit>
      break;
 8008cb8:	e154      	b.n	8008f64 <tcp_process+0x7a8>
 8008cba:	e153      	b.n	8008f64 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fa71 	bl	80091a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008cc2:	4b2d      	ldr	r3, [pc, #180]	; (8008d78 <tcp_process+0x5bc>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	f003 0320 	and.w	r3, r3, #32
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 814c 	beq.w	8008f68 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	8b5b      	ldrh	r3, [r3, #26]
 8008cd4:	f043 0302 	orr.w	r3, r3, #2
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2207      	movs	r2, #7
 8008ce2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008ce4:	e140      	b.n	8008f68 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa5c 	bl	80091a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008cec:	4b22      	ldr	r3, [pc, #136]	; (8008d78 <tcp_process+0x5bc>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	f003 0320 	and.w	r3, r3, #32
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d071      	beq.n	8008ddc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008cf8:	4b14      	ldr	r3, [pc, #80]	; (8008d4c <tcp_process+0x590>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d060      	beq.n	8008dc6 <tcp_process+0x60a>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d08:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <tcp_process+0x594>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d15a      	bne.n	8008dc6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d156      	bne.n	8008dc6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	8b5b      	ldrh	r3, [r3, #26]
 8008d1c:	f043 0302 	orr.w	r3, r3, #2
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7fe fdbc 	bl	80078a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008d2c:	4b13      	ldr	r3, [pc, #76]	; (8008d7c <tcp_process+0x5c0>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d105      	bne.n	8008d42 <tcp_process+0x586>
 8008d36:	4b11      	ldr	r3, [pc, #68]	; (8008d7c <tcp_process+0x5c0>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	4a0f      	ldr	r2, [pc, #60]	; (8008d7c <tcp_process+0x5c0>)
 8008d3e:	6013      	str	r3, [r2, #0]
 8008d40:	e02e      	b.n	8008da0 <tcp_process+0x5e4>
 8008d42:	4b0e      	ldr	r3, [pc, #56]	; (8008d7c <tcp_process+0x5c0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	617b      	str	r3, [r7, #20]
 8008d48:	e027      	b.n	8008d9a <tcp_process+0x5de>
 8008d4a:	bf00      	nop
 8008d4c:	200087b0 	.word	0x200087b0
 8008d50:	200087a8 	.word	0x200087a8
 8008d54:	200087ae 	.word	0x200087ae
 8008d58:	200087a4 	.word	0x200087a4
 8008d5c:	20008794 	.word	0x20008794
 8008d60:	2000520c 	.word	0x2000520c
 8008d64:	20005210 	.word	0x20005210
 8008d68:	080105bc 	.word	0x080105bc
 8008d6c:	0801085c 	.word	0x0801085c
 8008d70:	08010608 	.word	0x08010608
 8008d74:	200087ac 	.word	0x200087ac
 8008d78:	200087b1 	.word	0x200087b1
 8008d7c:	20008778 	.word	0x20008778
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d104      	bne.n	8008d94 <tcp_process+0x5d8>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	60da      	str	r2, [r3, #12]
 8008d92:	e005      	b.n	8008da0 <tcp_process+0x5e4>
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	617b      	str	r3, [r7, #20]
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1ef      	bne.n	8008d80 <tcp_process+0x5c4>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	60da      	str	r2, [r3, #12]
 8008da6:	4b77      	ldr	r3, [pc, #476]	; (8008f84 <tcp_process+0x7c8>)
 8008da8:	2201      	movs	r2, #1
 8008daa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	220a      	movs	r2, #10
 8008db0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008db2:	4b75      	ldr	r3, [pc, #468]	; (8008f88 <tcp_process+0x7cc>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60da      	str	r2, [r3, #12]
 8008dba:	4a73      	ldr	r2, [pc, #460]	; (8008f88 <tcp_process+0x7cc>)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	f002 fcfa 	bl	800b7b8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008dc4:	e0d2      	b.n	8008f6c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	8b5b      	ldrh	r3, [r3, #26]
 8008dca:	f043 0302 	orr.w	r3, r3, #2
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2208      	movs	r2, #8
 8008dd8:	751a      	strb	r2, [r3, #20]
      break;
 8008dda:	e0c7      	b.n	8008f6c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ddc:	4b6b      	ldr	r3, [pc, #428]	; (8008f8c <tcp_process+0x7d0>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	f003 0310 	and.w	r3, r3, #16
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 80c1 	beq.w	8008f6c <tcp_process+0x7b0>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008dee:	4b68      	ldr	r3, [pc, #416]	; (8008f90 <tcp_process+0x7d4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	f040 80ba 	bne.w	8008f6c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f040 80b5 	bne.w	8008f6c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2206      	movs	r2, #6
 8008e06:	751a      	strb	r2, [r3, #20]
      break;
 8008e08:	e0b0      	b.n	8008f6c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f9ca 	bl	80091a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008e10:	4b60      	ldr	r3, [pc, #384]	; (8008f94 <tcp_process+0x7d8>)
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	f003 0320 	and.w	r3, r3, #32
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f000 80a9 	beq.w	8008f70 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	8b5b      	ldrh	r3, [r3, #26]
 8008e22:	f043 0302 	orr.w	r3, r3, #2
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7fe fd39 	bl	80078a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008e32:	4b59      	ldr	r3, [pc, #356]	; (8008f98 <tcp_process+0x7dc>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d105      	bne.n	8008e48 <tcp_process+0x68c>
 8008e3c:	4b56      	ldr	r3, [pc, #344]	; (8008f98 <tcp_process+0x7dc>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	4a55      	ldr	r2, [pc, #340]	; (8008f98 <tcp_process+0x7dc>)
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	e013      	b.n	8008e70 <tcp_process+0x6b4>
 8008e48:	4b53      	ldr	r3, [pc, #332]	; (8008f98 <tcp_process+0x7dc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	613b      	str	r3, [r7, #16]
 8008e4e:	e00c      	b.n	8008e6a <tcp_process+0x6ae>
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d104      	bne.n	8008e64 <tcp_process+0x6a8>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	60da      	str	r2, [r3, #12]
 8008e62:	e005      	b.n	8008e70 <tcp_process+0x6b4>
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	613b      	str	r3, [r7, #16]
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1ef      	bne.n	8008e50 <tcp_process+0x694>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	60da      	str	r2, [r3, #12]
 8008e76:	4b43      	ldr	r3, [pc, #268]	; (8008f84 <tcp_process+0x7c8>)
 8008e78:	2201      	movs	r2, #1
 8008e7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	220a      	movs	r2, #10
 8008e80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008e82:	4b41      	ldr	r3, [pc, #260]	; (8008f88 <tcp_process+0x7cc>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60da      	str	r2, [r3, #12]
 8008e8a:	4a3f      	ldr	r2, [pc, #252]	; (8008f88 <tcp_process+0x7cc>)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6013      	str	r3, [r2, #0]
 8008e90:	f002 fc92 	bl	800b7b8 <tcp_timer_needed>
      }
      break;
 8008e94:	e06c      	b.n	8008f70 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f984 	bl	80091a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008e9c:	4b3b      	ldr	r3, [pc, #236]	; (8008f8c <tcp_process+0x7d0>)
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	f003 0310 	and.w	r3, r3, #16
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d065      	beq.n	8008f74 <tcp_process+0x7b8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008eac:	4b38      	ldr	r3, [pc, #224]	; (8008f90 <tcp_process+0x7d4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d15f      	bne.n	8008f74 <tcp_process+0x7b8>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d15b      	bne.n	8008f74 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7fe fcf1 	bl	80078a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008ec2:	4b35      	ldr	r3, [pc, #212]	; (8008f98 <tcp_process+0x7dc>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d105      	bne.n	8008ed8 <tcp_process+0x71c>
 8008ecc:	4b32      	ldr	r3, [pc, #200]	; (8008f98 <tcp_process+0x7dc>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	4a31      	ldr	r2, [pc, #196]	; (8008f98 <tcp_process+0x7dc>)
 8008ed4:	6013      	str	r3, [r2, #0]
 8008ed6:	e013      	b.n	8008f00 <tcp_process+0x744>
 8008ed8:	4b2f      	ldr	r3, [pc, #188]	; (8008f98 <tcp_process+0x7dc>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	60fb      	str	r3, [r7, #12]
 8008ede:	e00c      	b.n	8008efa <tcp_process+0x73e>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d104      	bne.n	8008ef4 <tcp_process+0x738>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	60da      	str	r2, [r3, #12]
 8008ef2:	e005      	b.n	8008f00 <tcp_process+0x744>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1ef      	bne.n	8008ee0 <tcp_process+0x724>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	60da      	str	r2, [r3, #12]
 8008f06:	4b1f      	ldr	r3, [pc, #124]	; (8008f84 <tcp_process+0x7c8>)
 8008f08:	2201      	movs	r2, #1
 8008f0a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	220a      	movs	r2, #10
 8008f10:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008f12:	4b1d      	ldr	r3, [pc, #116]	; (8008f88 <tcp_process+0x7cc>)
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60da      	str	r2, [r3, #12]
 8008f1a:	4a1b      	ldr	r2, [pc, #108]	; (8008f88 <tcp_process+0x7cc>)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	f002 fc4a 	bl	800b7b8 <tcp_timer_needed>
      }
      break;
 8008f24:	e026      	b.n	8008f74 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f93c 	bl	80091a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008f2c:	4b17      	ldr	r3, [pc, #92]	; (8008f8c <tcp_process+0x7d0>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	f003 0310 	and.w	r3, r3, #16
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d01f      	beq.n	8008f78 <tcp_process+0x7bc>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f3c:	4b14      	ldr	r3, [pc, #80]	; (8008f90 <tcp_process+0x7d4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d119      	bne.n	8008f78 <tcp_process+0x7bc>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d115      	bne.n	8008f78 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008f4c:	4b11      	ldr	r3, [pc, #68]	; (8008f94 <tcp_process+0x7d8>)
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	f043 0310 	orr.w	r3, r3, #16
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	4b0f      	ldr	r3, [pc, #60]	; (8008f94 <tcp_process+0x7d8>)
 8008f58:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008f5a:	e00d      	b.n	8008f78 <tcp_process+0x7bc>
    default:
      break;
 8008f5c:	bf00      	nop
 8008f5e:	e00c      	b.n	8008f7a <tcp_process+0x7be>
      break;
 8008f60:	bf00      	nop
 8008f62:	e00a      	b.n	8008f7a <tcp_process+0x7be>
      break;
 8008f64:	bf00      	nop
 8008f66:	e008      	b.n	8008f7a <tcp_process+0x7be>
      break;
 8008f68:	bf00      	nop
 8008f6a:	e006      	b.n	8008f7a <tcp_process+0x7be>
      break;
 8008f6c:	bf00      	nop
 8008f6e:	e004      	b.n	8008f7a <tcp_process+0x7be>
      break;
 8008f70:	bf00      	nop
 8008f72:	e002      	b.n	8008f7a <tcp_process+0x7be>
      break;
 8008f74:	bf00      	nop
 8008f76:	e000      	b.n	8008f7a <tcp_process+0x7be>
      break;
 8008f78:	bf00      	nop
  }
  return ERR_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3724      	adds	r7, #36	; 0x24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd90      	pop	{r4, r7, pc}
 8008f84:	20008780 	.word	0x20008780
 8008f88:	2000877c 	.word	0x2000877c
 8008f8c:	200087b0 	.word	0x200087b0
 8008f90:	200087a8 	.word	0x200087a8
 8008f94:	200087b1 	.word	0x200087b1
 8008f98:	20008778 	.word	0x20008778

08008f9c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008f9c:	b590      	push	{r4, r7, lr}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <tcp_oos_insert_segment+0x1e>
 8008fac:	4b3b      	ldr	r3, [pc, #236]	; (800909c <tcp_oos_insert_segment+0x100>)
 8008fae:	f240 421f 	movw	r2, #1055	; 0x41f
 8008fb2:	493b      	ldr	r1, [pc, #236]	; (80090a0 <tcp_oos_insert_segment+0x104>)
 8008fb4:	483b      	ldr	r0, [pc, #236]	; (80090a4 <tcp_oos_insert_segment+0x108>)
 8008fb6:	f005 fac9 	bl	800e54c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	899b      	ldrh	r3, [r3, #12]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fb fcb0 	bl	8004928 <lwip_htons>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d028      	beq.n	8009026 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008fd4:	6838      	ldr	r0, [r7, #0]
 8008fd6:	f7fe fa63 	bl	80074a0 <tcp_segs_free>
    next = NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	603b      	str	r3, [r7, #0]
 8008fde:	e056      	b.n	800908e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	899b      	ldrh	r3, [r3, #12]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7fb fc9d 	bl	8004928 <lwip_htons>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00d      	beq.n	8009016 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	899b      	ldrh	r3, [r3, #12]
 8009000:	b29c      	uxth	r4, r3
 8009002:	2001      	movs	r0, #1
 8009004:	f7fb fc90 	bl	8004928 <lwip_htons>
 8009008:	4603      	mov	r3, r0
 800900a:	461a      	mov	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	4322      	orrs	r2, r4
 8009012:	b292      	uxth	r2, r2
 8009014:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f7fe fa52 	bl	80074ca <tcp_seg_free>
    while (next &&
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00e      	beq.n	800904a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	891b      	ldrh	r3, [r3, #8]
 8009030:	461a      	mov	r2, r3
 8009032:	4b1d      	ldr	r3, [pc, #116]	; (80090a8 <tcp_oos_insert_segment+0x10c>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	441a      	add	r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	8909      	ldrh	r1, [r1, #8]
 8009042:	440b      	add	r3, r1
 8009044:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009046:	2b00      	cmp	r3, #0
 8009048:	daca      	bge.n	8008fe0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d01e      	beq.n	800908e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	891b      	ldrh	r3, [r3, #8]
 8009054:	461a      	mov	r2, r3
 8009056:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <tcp_oos_insert_segment+0x10c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	441a      	add	r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009064:	2b00      	cmp	r3, #0
 8009066:	dd12      	ble.n	800908e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	b29a      	uxth	r2, r3
 8009070:	4b0d      	ldr	r3, [pc, #52]	; (80090a8 <tcp_oos_insert_segment+0x10c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	b29b      	uxth	r3, r3
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	b29a      	uxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	891b      	ldrh	r3, [r3, #8]
 8009086:	4619      	mov	r1, r3
 8009088:	4610      	mov	r0, r2
 800908a:	f7fc fe25 	bl	8005cd8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	601a      	str	r2, [r3, #0]
}
 8009094:	bf00      	nop
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	bd90      	pop	{r4, r7, pc}
 800909c:	080105bc 	.word	0x080105bc
 80090a0:	0801087c 	.word	0x0801087c
 80090a4:	08010608 	.word	0x08010608
 80090a8:	200087a4 	.word	0x200087a4

080090ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80090ac:	b5b0      	push	{r4, r5, r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
 80090b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80090ba:	e03e      	b.n	800913a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7fd f812 	bl	80060f4 <pbuf_clen>
 80090d0:	4603      	mov	r3, r0
 80090d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80090da:	8a7a      	ldrh	r2, [r7, #18]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d906      	bls.n	80090ee <tcp_free_acked_segments+0x42>
 80090e0:	4b2a      	ldr	r3, [pc, #168]	; (800918c <tcp_free_acked_segments+0xe0>)
 80090e2:	f240 4257 	movw	r2, #1111	; 0x457
 80090e6:	492a      	ldr	r1, [pc, #168]	; (8009190 <tcp_free_acked_segments+0xe4>)
 80090e8:	482a      	ldr	r0, [pc, #168]	; (8009194 <tcp_free_acked_segments+0xe8>)
 80090ea:	f005 fa2f 	bl	800e54c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80090f4:	8a7b      	ldrh	r3, [r7, #18]
 80090f6:	1ad3      	subs	r3, r2, r3
 80090f8:	b29a      	uxth	r2, r3
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	891a      	ldrh	r2, [r3, #8]
 8009104:	4b24      	ldr	r3, [pc, #144]	; (8009198 <tcp_free_acked_segments+0xec>)
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	4413      	add	r3, r2
 800910a:	b29a      	uxth	r2, r3
 800910c:	4b22      	ldr	r3, [pc, #136]	; (8009198 <tcp_free_acked_segments+0xec>)
 800910e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009110:	6978      	ldr	r0, [r7, #20]
 8009112:	f7fe f9da 	bl	80074ca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00c      	beq.n	800913a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <tcp_free_acked_segments+0x8e>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d106      	bne.n	800913a <tcp_free_acked_segments+0x8e>
 800912c:	4b17      	ldr	r3, [pc, #92]	; (800918c <tcp_free_acked_segments+0xe0>)
 800912e:	f240 4261 	movw	r2, #1121	; 0x461
 8009132:	491a      	ldr	r1, [pc, #104]	; (800919c <tcp_free_acked_segments+0xf0>)
 8009134:	4817      	ldr	r0, [pc, #92]	; (8009194 <tcp_free_acked_segments+0xe8>)
 8009136:	f005 fa09 	bl	800e54c <iprintf>
  while (seg_list != NULL &&
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d020      	beq.n	8009182 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	4618      	mov	r0, r3
 8009148:	f7fb fc03 	bl	8004952 <lwip_htonl>
 800914c:	4604      	mov	r4, r0
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	891b      	ldrh	r3, [r3, #8]
 8009152:	461d      	mov	r5, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	899b      	ldrh	r3, [r3, #12]
 800915a:	b29b      	uxth	r3, r3
 800915c:	4618      	mov	r0, r3
 800915e:	f7fb fbe3 	bl	8004928 <lwip_htons>
 8009162:	4603      	mov	r3, r0
 8009164:	b2db      	uxtb	r3, r3
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <tcp_free_acked_segments+0xc6>
 800916e:	2301      	movs	r3, #1
 8009170:	e000      	b.n	8009174 <tcp_free_acked_segments+0xc8>
 8009172:	2300      	movs	r3, #0
 8009174:	442b      	add	r3, r5
 8009176:	18e2      	adds	r2, r4, r3
 8009178:	4b09      	ldr	r3, [pc, #36]	; (80091a0 <tcp_free_acked_segments+0xf4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800917e:	2b00      	cmp	r3, #0
 8009180:	dd9c      	ble.n	80090bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009182:	68bb      	ldr	r3, [r7, #8]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bdb0      	pop	{r4, r5, r7, pc}
 800918c:	080105bc 	.word	0x080105bc
 8009190:	080108a4 	.word	0x080108a4
 8009194:	08010608 	.word	0x08010608
 8009198:	200087ac 	.word	0x200087ac
 800919c:	080108cc 	.word	0x080108cc
 80091a0:	200087a8 	.word	0x200087a8

080091a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80091a4:	b5b0      	push	{r4, r5, r7, lr}
 80091a6:	b094      	sub	sp, #80	; 0x50
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d106      	bne.n	80091c4 <tcp_receive+0x20>
 80091b6:	4b91      	ldr	r3, [pc, #580]	; (80093fc <tcp_receive+0x258>)
 80091b8:	f240 427b 	movw	r2, #1147	; 0x47b
 80091bc:	4990      	ldr	r1, [pc, #576]	; (8009400 <tcp_receive+0x25c>)
 80091be:	4891      	ldr	r0, [pc, #580]	; (8009404 <tcp_receive+0x260>)
 80091c0:	f005 f9c4 	bl	800e54c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	7d1b      	ldrb	r3, [r3, #20]
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d806      	bhi.n	80091da <tcp_receive+0x36>
 80091cc:	4b8b      	ldr	r3, [pc, #556]	; (80093fc <tcp_receive+0x258>)
 80091ce:	f240 427c 	movw	r2, #1148	; 0x47c
 80091d2:	498d      	ldr	r1, [pc, #564]	; (8009408 <tcp_receive+0x264>)
 80091d4:	488b      	ldr	r0, [pc, #556]	; (8009404 <tcp_receive+0x260>)
 80091d6:	f005 f9b9 	bl	800e54c <iprintf>

  if (flags & TCP_ACK) {
 80091da:	4b8c      	ldr	r3, [pc, #560]	; (800940c <tcp_receive+0x268>)
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	f003 0310 	and.w	r3, r3, #16
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	f000 8264 	beq.w	80096b0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091ee:	461a      	mov	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f4:	4413      	add	r3, r2
 80091f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091fc:	4b84      	ldr	r3, [pc, #528]	; (8009410 <tcp_receive+0x26c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	db1b      	blt.n	800923e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800920a:	4b81      	ldr	r3, [pc, #516]	; (8009410 <tcp_receive+0x26c>)
 800920c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800920e:	429a      	cmp	r2, r3
 8009210:	d106      	bne.n	8009220 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009216:	4b7f      	ldr	r3, [pc, #508]	; (8009414 <tcp_receive+0x270>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	2b00      	cmp	r3, #0
 800921e:	db0e      	blt.n	800923e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009224:	4b7b      	ldr	r3, [pc, #492]	; (8009414 <tcp_receive+0x270>)
 8009226:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009228:	429a      	cmp	r2, r3
 800922a:	d125      	bne.n	8009278 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800922c:	4b7a      	ldr	r3, [pc, #488]	; (8009418 <tcp_receive+0x274>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	89db      	ldrh	r3, [r3, #14]
 8009232:	b29a      	uxth	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800923a:	429a      	cmp	r2, r3
 800923c:	d91c      	bls.n	8009278 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800923e:	4b76      	ldr	r3, [pc, #472]	; (8009418 <tcp_receive+0x274>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	89db      	ldrh	r3, [r3, #14]
 8009244:	b29a      	uxth	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009258:	429a      	cmp	r2, r3
 800925a:	d205      	bcs.n	8009268 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009268:	4b69      	ldr	r3, [pc, #420]	; (8009410 <tcp_receive+0x26c>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009270:	4b68      	ldr	r3, [pc, #416]	; (8009414 <tcp_receive+0x270>)
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009278:	4b66      	ldr	r3, [pc, #408]	; (8009414 <tcp_receive+0x270>)
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	2b00      	cmp	r3, #0
 8009284:	dc58      	bgt.n	8009338 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009286:	4b65      	ldr	r3, [pc, #404]	; (800941c <tcp_receive+0x278>)
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d14b      	bne.n	8009326 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009298:	4413      	add	r3, r2
 800929a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929c:	429a      	cmp	r2, r3
 800929e:	d142      	bne.n	8009326 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	db3d      	blt.n	8009326 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092ae:	4b59      	ldr	r3, [pc, #356]	; (8009414 <tcp_receive+0x270>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d137      	bne.n	8009326 <tcp_receive+0x182>
              found_dupack = 1;
 80092b6:	2301      	movs	r3, #1
 80092b8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092c0:	2bff      	cmp	r3, #255	; 0xff
 80092c2:	d007      	beq.n	80092d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092ca:	3301      	adds	r3, #1
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d91b      	bls.n	8009316 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80092e8:	4413      	add	r3, r2
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d30a      	bcc.n	800930c <tcp_receive+0x168>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009300:	4413      	add	r3, r2
 8009302:	b29a      	uxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800930a:	e004      	b.n	8009316 <tcp_receive+0x172>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009312:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800931c:	2b02      	cmp	r3, #2
 800931e:	d902      	bls.n	8009326 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 feed 	bl	800b100 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009328:	2b00      	cmp	r3, #0
 800932a:	f040 8161 	bne.w	80095f0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009336:	e15b      	b.n	80095f0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009338:	4b36      	ldr	r3, [pc, #216]	; (8009414 <tcp_receive+0x270>)
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	2b00      	cmp	r3, #0
 8009346:	f2c0 814e 	blt.w	80095e6 <tcp_receive+0x442>
 800934a:	4b32      	ldr	r3, [pc, #200]	; (8009414 <tcp_receive+0x270>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	2b00      	cmp	r3, #0
 8009356:	f300 8146 	bgt.w	80095e6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	8b5b      	ldrh	r3, [r3, #26]
 800935e:	f003 0304 	and.w	r3, r3, #4
 8009362:	2b00      	cmp	r3, #0
 8009364:	d010      	beq.n	8009388 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	8b5b      	ldrh	r3, [r3, #26]
 800936a:	f023 0304 	bic.w	r3, r3, #4
 800936e:	b29a      	uxth	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009396:	10db      	asrs	r3, r3, #3
 8009398:	b21b      	sxth	r3, r3
 800939a:	b29a      	uxth	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	4413      	add	r3, r2
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	b21a      	sxth	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80093b0:	4b18      	ldr	r3, [pc, #96]	; (8009414 <tcp_receive+0x270>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80093c8:	4b12      	ldr	r3, [pc, #72]	; (8009414 <tcp_receive+0x270>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	7d1b      	ldrb	r3, [r3, #20]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	f240 8097 	bls.w	8009508 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d245      	bcs.n	8009476 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	8b5b      	ldrh	r3, [r3, #26]
 80093ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d014      	beq.n	8009420 <tcp_receive+0x27c>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e013      	b.n	8009422 <tcp_receive+0x27e>
 80093fa:	bf00      	nop
 80093fc:	080105bc 	.word	0x080105bc
 8009400:	080108ec 	.word	0x080108ec
 8009404:	08010608 	.word	0x08010608
 8009408:	08010908 	.word	0x08010908
 800940c:	200087b0 	.word	0x200087b0
 8009410:	200087a4 	.word	0x200087a4
 8009414:	200087a8 	.word	0x200087a8
 8009418:	20008794 	.word	0x20008794
 800941c:	200087ae 	.word	0x200087ae
 8009420:	2302      	movs	r3, #2
 8009422:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009426:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800942a:	b29a      	uxth	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009430:	fb12 f303 	smulbb	r3, r2, r3
 8009434:	b29b      	uxth	r3, r3
 8009436:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009438:	4293      	cmp	r3, r2
 800943a:	bf28      	it	cs
 800943c:	4613      	movcs	r3, r2
 800943e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009448:	4413      	add	r3, r2
 800944a:	b29a      	uxth	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009452:	429a      	cmp	r2, r3
 8009454:	d309      	bcc.n	800946a <tcp_receive+0x2c6>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800945c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800945e:	4413      	add	r3, r2
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009468:	e04e      	b.n	8009508 <tcp_receive+0x364>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009470:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009474:	e048      	b.n	8009508 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800947c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800947e:	4413      	add	r3, r2
 8009480:	b29a      	uxth	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009488:	429a      	cmp	r2, r3
 800948a:	d309      	bcc.n	80094a0 <tcp_receive+0x2fc>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009494:	4413      	add	r3, r2
 8009496:	b29a      	uxth	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800949e:	e004      	b.n	80094aa <tcp_receive+0x306>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d326      	bcc.n	8009508 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094da:	4413      	add	r3, r2
 80094dc:	b29a      	uxth	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d30a      	bcc.n	80094fe <tcp_receive+0x35a>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094f2:	4413      	add	r3, r2
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80094fc:	e004      	b.n	8009508 <tcp_receive+0x364>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009504:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009510:	4a98      	ldr	r2, [pc, #608]	; (8009774 <tcp_receive+0x5d0>)
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff fdca 	bl	80090ac <tcp_free_acked_segments>
 8009518:	4602      	mov	r2, r0
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009526:	4a94      	ldr	r2, [pc, #592]	; (8009778 <tcp_receive+0x5d4>)
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f7ff fdbf 	bl	80090ac <tcp_free_acked_segments>
 800952e:	4602      	mov	r2, r0
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009538:	2b00      	cmp	r3, #0
 800953a:	d104      	bne.n	8009546 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009542:	861a      	strh	r2, [r3, #48]	; 0x30
 8009544:	e002      	b.n	800954c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009556:	2b00      	cmp	r3, #0
 8009558:	d103      	bne.n	8009562 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009568:	4b84      	ldr	r3, [pc, #528]	; (800977c <tcp_receive+0x5d8>)
 800956a:	881b      	ldrh	r3, [r3, #0]
 800956c:	4413      	add	r3, r2
 800956e:	b29a      	uxth	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	8b5b      	ldrh	r3, [r3, #26]
 800957a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800957e:	2b00      	cmp	r3, #0
 8009580:	d035      	beq.n	80095ee <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009586:	2b00      	cmp	r3, #0
 8009588:	d118      	bne.n	80095bc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00c      	beq.n	80095ac <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fb f9d7 	bl	8004952 <lwip_htonl>
 80095a4:	4603      	mov	r3, r0
 80095a6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	dc20      	bgt.n	80095ee <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	8b5b      	ldrh	r3, [r3, #26]
 80095b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095ba:	e018      	b.n	80095ee <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fb f9c2 	bl	8004952 <lwip_htonl>
 80095ce:	4603      	mov	r3, r0
 80095d0:	1ae3      	subs	r3, r4, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	dc0b      	bgt.n	80095ee <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	8b5b      	ldrh	r3, [r3, #26]
 80095da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095de:	b29a      	uxth	r2, r3
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095e4:	e003      	b.n	80095ee <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f001 ff76 	bl	800b4d8 <tcp_send_empty_ack>
 80095ec:	e000      	b.n	80095f0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80095ee:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d05b      	beq.n	80096b0 <tcp_receive+0x50c>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fc:	4b60      	ldr	r3, [pc, #384]	; (8009780 <tcp_receive+0x5dc>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	2b00      	cmp	r3, #0
 8009604:	da54      	bge.n	80096b0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009606:	4b5f      	ldr	r3, [pc, #380]	; (8009784 <tcp_receive+0x5e0>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	b29a      	uxth	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	b29b      	uxth	r3, r3
 8009612:	1ad3      	subs	r3, r2, r3
 8009614:	b29b      	uxth	r3, r3
 8009616:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800961a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009624:	10db      	asrs	r3, r3, #3
 8009626:	b21b      	sxth	r3, r3
 8009628:	b29b      	uxth	r3, r3
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	b29b      	uxth	r3, r3
 800962e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009638:	b29a      	uxth	r2, r3
 800963a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800963e:	4413      	add	r3, r2
 8009640:	b29b      	uxth	r3, r3
 8009642:	b21a      	sxth	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009648:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800964c:	2b00      	cmp	r3, #0
 800964e:	da05      	bge.n	800965c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009650:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009654:	425b      	negs	r3, r3
 8009656:	b29b      	uxth	r3, r3
 8009658:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800965c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009666:	109b      	asrs	r3, r3, #2
 8009668:	b21b      	sxth	r3, r3
 800966a:	b29b      	uxth	r3, r3
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	b29b      	uxth	r3, r3
 8009670:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800967a:	b29a      	uxth	r2, r3
 800967c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009680:	4413      	add	r3, r2
 8009682:	b29b      	uxth	r3, r3
 8009684:	b21a      	sxth	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009690:	10db      	asrs	r3, r3, #3
 8009692:	b21b      	sxth	r3, r3
 8009694:	b29a      	uxth	r2, r3
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800969c:	b29b      	uxth	r3, r3
 800969e:	4413      	add	r3, r2
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	b21a      	sxth	r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80096b0:	4b35      	ldr	r3, [pc, #212]	; (8009788 <tcp_receive+0x5e4>)
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 84e2 	beq.w	800a07e <tcp_receive+0xeda>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7d1b      	ldrb	r3, [r3, #20]
 80096be:	2b06      	cmp	r3, #6
 80096c0:	f200 84dd 	bhi.w	800a07e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096c8:	4b30      	ldr	r3, [pc, #192]	; (800978c <tcp_receive+0x5e8>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	1ad3      	subs	r3, r2, r3
 80096ce:	3b01      	subs	r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f2c0 808f 	blt.w	80097f4 <tcp_receive+0x650>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096da:	4b2b      	ldr	r3, [pc, #172]	; (8009788 <tcp_receive+0x5e4>)
 80096dc:	881b      	ldrh	r3, [r3, #0]
 80096de:	4619      	mov	r1, r3
 80096e0:	4b2a      	ldr	r3, [pc, #168]	; (800978c <tcp_receive+0x5e8>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	440b      	add	r3, r1
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	3301      	adds	r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f300 8082 	bgt.w	80097f4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80096f0:	4b27      	ldr	r3, [pc, #156]	; (8009790 <tcp_receive+0x5ec>)
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096fa:	4b24      	ldr	r3, [pc, #144]	; (800978c <tcp_receive+0x5e8>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009702:	4b23      	ldr	r3, [pc, #140]	; (8009790 <tcp_receive+0x5ec>)
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d106      	bne.n	8009718 <tcp_receive+0x574>
 800970a:	4b22      	ldr	r3, [pc, #136]	; (8009794 <tcp_receive+0x5f0>)
 800970c:	f240 5294 	movw	r2, #1428	; 0x594
 8009710:	4921      	ldr	r1, [pc, #132]	; (8009798 <tcp_receive+0x5f4>)
 8009712:	4822      	ldr	r0, [pc, #136]	; (800979c <tcp_receive+0x5f8>)
 8009714:	f004 ff1a 	bl	800e54c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800971e:	4293      	cmp	r3, r2
 8009720:	d906      	bls.n	8009730 <tcp_receive+0x58c>
 8009722:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <tcp_receive+0x5f0>)
 8009724:	f240 5295 	movw	r2, #1429	; 0x595
 8009728:	491d      	ldr	r1, [pc, #116]	; (80097a0 <tcp_receive+0x5fc>)
 800972a:	481c      	ldr	r0, [pc, #112]	; (800979c <tcp_receive+0x5f8>)
 800972c:	f004 ff0e 	bl	800e54c <iprintf>
      off = (u16_t)off32;
 8009730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009732:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <tcp_receive+0x5ec>)
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	891b      	ldrh	r3, [r3, #8]
 800973c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009740:	429a      	cmp	r2, r3
 8009742:	d906      	bls.n	8009752 <tcp_receive+0x5ae>
 8009744:	4b13      	ldr	r3, [pc, #76]	; (8009794 <tcp_receive+0x5f0>)
 8009746:	f240 5297 	movw	r2, #1431	; 0x597
 800974a:	4916      	ldr	r1, [pc, #88]	; (80097a4 <tcp_receive+0x600>)
 800974c:	4813      	ldr	r0, [pc, #76]	; (800979c <tcp_receive+0x5f8>)
 800974e:	f004 fefd 	bl	800e54c <iprintf>
      inseg.len -= off;
 8009752:	4b0f      	ldr	r3, [pc, #60]	; (8009790 <tcp_receive+0x5ec>)
 8009754:	891a      	ldrh	r2, [r3, #8]
 8009756:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	b29a      	uxth	r2, r3
 800975e:	4b0c      	ldr	r3, [pc, #48]	; (8009790 <tcp_receive+0x5ec>)
 8009760:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009762:	4b0b      	ldr	r3, [pc, #44]	; (8009790 <tcp_receive+0x5ec>)
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	891a      	ldrh	r2, [r3, #8]
 8009768:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009770:	e02a      	b.n	80097c8 <tcp_receive+0x624>
 8009772:	bf00      	nop
 8009774:	08010924 	.word	0x08010924
 8009778:	0801092c 	.word	0x0801092c
 800977c:	200087ac 	.word	0x200087ac
 8009780:	200087a8 	.word	0x200087a8
 8009784:	2000876c 	.word	0x2000876c
 8009788:	200087ae 	.word	0x200087ae
 800978c:	200087a4 	.word	0x200087a4
 8009790:	20008784 	.word	0x20008784
 8009794:	080105bc 	.word	0x080105bc
 8009798:	08010934 	.word	0x08010934
 800979c:	08010608 	.word	0x08010608
 80097a0:	08010944 	.word	0x08010944
 80097a4:	08010954 	.word	0x08010954
        off -= p->len;
 80097a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097aa:	895b      	ldrh	r3, [r3, #10]
 80097ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80097b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80097ba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80097bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097be:	2200      	movs	r2, #0
 80097c0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80097c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80097c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097ca:	895b      	ldrh	r3, [r3, #10]
 80097cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d8e9      	bhi.n	80097a8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80097d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80097d8:	4619      	mov	r1, r3
 80097da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80097dc:	f7fc fb7c 	bl	8005ed8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	4a91      	ldr	r2, [pc, #580]	; (8009a2c <tcp_receive+0x888>)
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	4b91      	ldr	r3, [pc, #580]	; (8009a30 <tcp_receive+0x88c>)
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	4a8f      	ldr	r2, [pc, #572]	; (8009a2c <tcp_receive+0x888>)
 80097ee:	6812      	ldr	r2, [r2, #0]
 80097f0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80097f2:	e00d      	b.n	8009810 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80097f4:	4b8d      	ldr	r3, [pc, #564]	; (8009a2c <tcp_receive+0x888>)
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	1ad3      	subs	r3, r2, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da06      	bge.n	8009810 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	8b5b      	ldrh	r3, [r3, #26]
 8009806:	f043 0302 	orr.w	r3, r3, #2
 800980a:	b29a      	uxth	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009810:	4b86      	ldr	r3, [pc, #536]	; (8009a2c <tcp_receive+0x888>)
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	f2c0 842a 	blt.w	800a074 <tcp_receive+0xed0>
 8009820:	4b82      	ldr	r3, [pc, #520]	; (8009a2c <tcp_receive+0x888>)
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	6879      	ldr	r1, [r7, #4]
 800982a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800982c:	440b      	add	r3, r1
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	3301      	adds	r3, #1
 8009832:	2b00      	cmp	r3, #0
 8009834:	f300 841e 	bgt.w	800a074 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800983c:	4b7b      	ldr	r3, [pc, #492]	; (8009a2c <tcp_receive+0x888>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	429a      	cmp	r2, r3
 8009842:	f040 829a 	bne.w	8009d7a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009846:	4b7a      	ldr	r3, [pc, #488]	; (8009a30 <tcp_receive+0x88c>)
 8009848:	891c      	ldrh	r4, [r3, #8]
 800984a:	4b79      	ldr	r3, [pc, #484]	; (8009a30 <tcp_receive+0x88c>)
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	899b      	ldrh	r3, [r3, #12]
 8009850:	b29b      	uxth	r3, r3
 8009852:	4618      	mov	r0, r3
 8009854:	f7fb f868 	bl	8004928 <lwip_htons>
 8009858:	4603      	mov	r3, r0
 800985a:	b2db      	uxtb	r3, r3
 800985c:	f003 0303 	and.w	r3, r3, #3
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <tcp_receive+0x6c4>
 8009864:	2301      	movs	r3, #1
 8009866:	e000      	b.n	800986a <tcp_receive+0x6c6>
 8009868:	2300      	movs	r3, #0
 800986a:	4423      	add	r3, r4
 800986c:	b29a      	uxth	r2, r3
 800986e:	4b71      	ldr	r3, [pc, #452]	; (8009a34 <tcp_receive+0x890>)
 8009870:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009876:	4b6f      	ldr	r3, [pc, #444]	; (8009a34 <tcp_receive+0x890>)
 8009878:	881b      	ldrh	r3, [r3, #0]
 800987a:	429a      	cmp	r2, r3
 800987c:	d275      	bcs.n	800996a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800987e:	4b6c      	ldr	r3, [pc, #432]	; (8009a30 <tcp_receive+0x88c>)
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	899b      	ldrh	r3, [r3, #12]
 8009884:	b29b      	uxth	r3, r3
 8009886:	4618      	mov	r0, r3
 8009888:	f7fb f84e 	bl	8004928 <lwip_htons>
 800988c:	4603      	mov	r3, r0
 800988e:	b2db      	uxtb	r3, r3
 8009890:	f003 0301 	and.w	r3, r3, #1
 8009894:	2b00      	cmp	r3, #0
 8009896:	d01f      	beq.n	80098d8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009898:	4b65      	ldr	r3, [pc, #404]	; (8009a30 <tcp_receive+0x88c>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	899b      	ldrh	r3, [r3, #12]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	b21b      	sxth	r3, r3
 80098a2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80098a6:	b21c      	sxth	r4, r3
 80098a8:	4b61      	ldr	r3, [pc, #388]	; (8009a30 <tcp_receive+0x88c>)
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	899b      	ldrh	r3, [r3, #12]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fb f839 	bl	8004928 <lwip_htons>
 80098b6:	4603      	mov	r3, r0
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fb f830 	bl	8004928 <lwip_htons>
 80098c8:	4603      	mov	r3, r0
 80098ca:	b21b      	sxth	r3, r3
 80098cc:	4323      	orrs	r3, r4
 80098ce:	b21a      	sxth	r2, r3
 80098d0:	4b57      	ldr	r3, [pc, #348]	; (8009a30 <tcp_receive+0x88c>)
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	b292      	uxth	r2, r2
 80098d6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80098dc:	4b54      	ldr	r3, [pc, #336]	; (8009a30 <tcp_receive+0x88c>)
 80098de:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80098e0:	4b53      	ldr	r3, [pc, #332]	; (8009a30 <tcp_receive+0x88c>)
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	899b      	ldrh	r3, [r3, #12]
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fb f81d 	bl	8004928 <lwip_htons>
 80098ee:	4603      	mov	r3, r0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d005      	beq.n	8009906 <tcp_receive+0x762>
            inseg.len -= 1;
 80098fa:	4b4d      	ldr	r3, [pc, #308]	; (8009a30 <tcp_receive+0x88c>)
 80098fc:	891b      	ldrh	r3, [r3, #8]
 80098fe:	3b01      	subs	r3, #1
 8009900:	b29a      	uxth	r2, r3
 8009902:	4b4b      	ldr	r3, [pc, #300]	; (8009a30 <tcp_receive+0x88c>)
 8009904:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8009906:	4b4a      	ldr	r3, [pc, #296]	; (8009a30 <tcp_receive+0x88c>)
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4a49      	ldr	r2, [pc, #292]	; (8009a30 <tcp_receive+0x88c>)
 800990c:	8912      	ldrh	r2, [r2, #8]
 800990e:	4611      	mov	r1, r2
 8009910:	4618      	mov	r0, r3
 8009912:	f7fc f9e1 	bl	8005cd8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009916:	4b46      	ldr	r3, [pc, #280]	; (8009a30 <tcp_receive+0x88c>)
 8009918:	891c      	ldrh	r4, [r3, #8]
 800991a:	4b45      	ldr	r3, [pc, #276]	; (8009a30 <tcp_receive+0x88c>)
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	899b      	ldrh	r3, [r3, #12]
 8009920:	b29b      	uxth	r3, r3
 8009922:	4618      	mov	r0, r3
 8009924:	f7fb f800 	bl	8004928 <lwip_htons>
 8009928:	4603      	mov	r3, r0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	f003 0303 	and.w	r3, r3, #3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <tcp_receive+0x794>
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <tcp_receive+0x796>
 8009938:	2300      	movs	r3, #0
 800993a:	4423      	add	r3, r4
 800993c:	b29a      	uxth	r2, r3
 800993e:	4b3d      	ldr	r3, [pc, #244]	; (8009a34 <tcp_receive+0x890>)
 8009940:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009942:	4b3c      	ldr	r3, [pc, #240]	; (8009a34 <tcp_receive+0x890>)
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	4b38      	ldr	r3, [pc, #224]	; (8009a2c <tcp_receive+0x888>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	441a      	add	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009952:	6879      	ldr	r1, [r7, #4]
 8009954:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009956:	440b      	add	r3, r1
 8009958:	429a      	cmp	r2, r3
 800995a:	d006      	beq.n	800996a <tcp_receive+0x7c6>
 800995c:	4b36      	ldr	r3, [pc, #216]	; (8009a38 <tcp_receive+0x894>)
 800995e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009962:	4936      	ldr	r1, [pc, #216]	; (8009a3c <tcp_receive+0x898>)
 8009964:	4836      	ldr	r0, [pc, #216]	; (8009a40 <tcp_receive+0x89c>)
 8009966:	f004 fdf1 	bl	800e54c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 80e7 	beq.w	8009b42 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009974:	4b2e      	ldr	r3, [pc, #184]	; (8009a30 <tcp_receive+0x88c>)
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	899b      	ldrh	r3, [r3, #12]
 800997a:	b29b      	uxth	r3, r3
 800997c:	4618      	mov	r0, r3
 800997e:	f7fa ffd3 	bl	8004928 <lwip_htons>
 8009982:	4603      	mov	r3, r0
 8009984:	b2db      	uxtb	r3, r3
 8009986:	f003 0301 	and.w	r3, r3, #1
 800998a:	2b00      	cmp	r3, #0
 800998c:	d010      	beq.n	80099b0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800998e:	e00a      	b.n	80099a6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009994:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f7fd fd92 	bl	80074ca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1f0      	bne.n	8009990 <tcp_receive+0x7ec>
 80099ae:	e0c8      	b.n	8009b42 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099b4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80099b6:	e052      	b.n	8009a5e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80099b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	899b      	ldrh	r3, [r3, #12]
 80099be:	b29b      	uxth	r3, r3
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fa ffb1 	bl	8004928 <lwip_htons>
 80099c6:	4603      	mov	r3, r0
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	f003 0301 	and.w	r3, r3, #1
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d03d      	beq.n	8009a4e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80099d2:	4b17      	ldr	r3, [pc, #92]	; (8009a30 <tcp_receive+0x88c>)
 80099d4:	68db      	ldr	r3, [r3, #12]
 80099d6:	899b      	ldrh	r3, [r3, #12]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	4618      	mov	r0, r3
 80099dc:	f7fa ffa4 	bl	8004928 <lwip_htons>
 80099e0:	4603      	mov	r3, r0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d130      	bne.n	8009a4e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80099ec:	4b10      	ldr	r3, [pc, #64]	; (8009a30 <tcp_receive+0x88c>)
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	899b      	ldrh	r3, [r3, #12]
 80099f2:	b29c      	uxth	r4, r3
 80099f4:	2001      	movs	r0, #1
 80099f6:	f7fa ff97 	bl	8004928 <lwip_htons>
 80099fa:	4603      	mov	r3, r0
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <tcp_receive+0x88c>)
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	4322      	orrs	r2, r4
 8009a04:	b292      	uxth	r2, r2
 8009a06:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009a08:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <tcp_receive+0x88c>)
 8009a0a:	891c      	ldrh	r4, [r3, #8]
 8009a0c:	4b08      	ldr	r3, [pc, #32]	; (8009a30 <tcp_receive+0x88c>)
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	899b      	ldrh	r3, [r3, #12]
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fa ff87 	bl	8004928 <lwip_htons>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00e      	beq.n	8009a44 <tcp_receive+0x8a0>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e00d      	b.n	8009a46 <tcp_receive+0x8a2>
 8009a2a:	bf00      	nop
 8009a2c:	200087a4 	.word	0x200087a4
 8009a30:	20008784 	.word	0x20008784
 8009a34:	200087ae 	.word	0x200087ae
 8009a38:	080105bc 	.word	0x080105bc
 8009a3c:	08010964 	.word	0x08010964
 8009a40:	08010608 	.word	0x08010608
 8009a44:	2300      	movs	r3, #0
 8009a46:	4423      	add	r3, r4
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	4b98      	ldr	r3, [pc, #608]	; (8009cac <tcp_receive+0xb08>)
 8009a4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a50:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009a58:	6938      	ldr	r0, [r7, #16]
 8009a5a:	f7fd fd36 	bl	80074ca <tcp_seg_free>
            while (next &&
 8009a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00e      	beq.n	8009a82 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009a64:	4b91      	ldr	r3, [pc, #580]	; (8009cac <tcp_receive+0xb08>)
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	4b91      	ldr	r3, [pc, #580]	; (8009cb0 <tcp_receive+0xb0c>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	441a      	add	r2, r3
 8009a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a78:	8909      	ldrh	r1, [r1, #8]
 8009a7a:	440b      	add	r3, r1
 8009a7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da9a      	bge.n	80099b8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d059      	beq.n	8009b3c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009a88:	4b88      	ldr	r3, [pc, #544]	; (8009cac <tcp_receive+0xb08>)
 8009a8a:	881b      	ldrh	r3, [r3, #0]
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	4b88      	ldr	r3, [pc, #544]	; (8009cb0 <tcp_receive+0xb0c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	441a      	add	r2, r3
 8009a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dd4d      	ble.n	8009b3c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	4b81      	ldr	r3, [pc, #516]	; (8009cb0 <tcp_receive+0xb0c>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	4b80      	ldr	r3, [pc, #512]	; (8009cb4 <tcp_receive+0xb10>)
 8009ab4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009ab6:	4b7f      	ldr	r3, [pc, #508]	; (8009cb4 <tcp_receive+0xb10>)
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	899b      	ldrh	r3, [r3, #12]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fa ff32 	bl	8004928 <lwip_htons>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	f003 0302 	and.w	r3, r3, #2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d005      	beq.n	8009adc <tcp_receive+0x938>
                inseg.len -= 1;
 8009ad0:	4b78      	ldr	r3, [pc, #480]	; (8009cb4 <tcp_receive+0xb10>)
 8009ad2:	891b      	ldrh	r3, [r3, #8]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	4b76      	ldr	r3, [pc, #472]	; (8009cb4 <tcp_receive+0xb10>)
 8009ada:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009adc:	4b75      	ldr	r3, [pc, #468]	; (8009cb4 <tcp_receive+0xb10>)
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	4a74      	ldr	r2, [pc, #464]	; (8009cb4 <tcp_receive+0xb10>)
 8009ae2:	8912      	ldrh	r2, [r2, #8]
 8009ae4:	4611      	mov	r1, r2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fc f8f6 	bl	8005cd8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009aec:	4b71      	ldr	r3, [pc, #452]	; (8009cb4 <tcp_receive+0xb10>)
 8009aee:	891c      	ldrh	r4, [r3, #8]
 8009af0:	4b70      	ldr	r3, [pc, #448]	; (8009cb4 <tcp_receive+0xb10>)
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	899b      	ldrh	r3, [r3, #12]
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fa ff15 	bl	8004928 <lwip_htons>
 8009afe:	4603      	mov	r3, r0
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	f003 0303 	and.w	r3, r3, #3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <tcp_receive+0x96a>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e000      	b.n	8009b10 <tcp_receive+0x96c>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	4423      	add	r3, r4
 8009b12:	b29a      	uxth	r2, r3
 8009b14:	4b65      	ldr	r3, [pc, #404]	; (8009cac <tcp_receive+0xb08>)
 8009b16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009b18:	4b64      	ldr	r3, [pc, #400]	; (8009cac <tcp_receive+0xb08>)
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	4b64      	ldr	r3, [pc, #400]	; (8009cb0 <tcp_receive+0xb0c>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	441a      	add	r2, r3
 8009b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d006      	beq.n	8009b3c <tcp_receive+0x998>
 8009b2e:	4b62      	ldr	r3, [pc, #392]	; (8009cb8 <tcp_receive+0xb14>)
 8009b30:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009b34:	4961      	ldr	r1, [pc, #388]	; (8009cbc <tcp_receive+0xb18>)
 8009b36:	4862      	ldr	r0, [pc, #392]	; (8009cc0 <tcp_receive+0xb1c>)
 8009b38:	f004 fd08 	bl	800e54c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b40:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009b42:	4b5a      	ldr	r3, [pc, #360]	; (8009cac <tcp_receive+0xb08>)
 8009b44:	881b      	ldrh	r3, [r3, #0]
 8009b46:	461a      	mov	r2, r3
 8009b48:	4b59      	ldr	r3, [pc, #356]	; (8009cb0 <tcp_receive+0xb0c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	441a      	add	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b56:	4b55      	ldr	r3, [pc, #340]	; (8009cac <tcp_receive+0xb08>)
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d206      	bcs.n	8009b6c <tcp_receive+0x9c8>
 8009b5e:	4b56      	ldr	r3, [pc, #344]	; (8009cb8 <tcp_receive+0xb14>)
 8009b60:	f240 6207 	movw	r2, #1543	; 0x607
 8009b64:	4957      	ldr	r1, [pc, #348]	; (8009cc4 <tcp_receive+0xb20>)
 8009b66:	4856      	ldr	r0, [pc, #344]	; (8009cc0 <tcp_receive+0xb1c>)
 8009b68:	f004 fcf0 	bl	800e54c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009b70:	4b4e      	ldr	r3, [pc, #312]	; (8009cac <tcp_receive+0xb08>)
 8009b72:	881b      	ldrh	r3, [r3, #0]
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7fc ffc5 	bl	8006b0c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009b82:	4b4c      	ldr	r3, [pc, #304]	; (8009cb4 <tcp_receive+0xb10>)
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	891b      	ldrh	r3, [r3, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d006      	beq.n	8009b9a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009b8c:	4b49      	ldr	r3, [pc, #292]	; (8009cb4 <tcp_receive+0xb10>)
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	4a4d      	ldr	r2, [pc, #308]	; (8009cc8 <tcp_receive+0xb24>)
 8009b92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009b94:	4b47      	ldr	r3, [pc, #284]	; (8009cb4 <tcp_receive+0xb10>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009b9a:	4b46      	ldr	r3, [pc, #280]	; (8009cb4 <tcp_receive+0xb10>)
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	899b      	ldrh	r3, [r3, #12]
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fa fec0 	bl	8004928 <lwip_htons>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 80b8 	beq.w	8009d26 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009bb6:	4b45      	ldr	r3, [pc, #276]	; (8009ccc <tcp_receive+0xb28>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	f043 0320 	orr.w	r3, r3, #32
 8009bbe:	b2da      	uxtb	r2, r3
 8009bc0:	4b42      	ldr	r3, [pc, #264]	; (8009ccc <tcp_receive+0xb28>)
 8009bc2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009bc4:	e0af      	b.n	8009d26 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	4a36      	ldr	r2, [pc, #216]	; (8009cb0 <tcp_receive+0xb0c>)
 8009bd6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	891b      	ldrh	r3, [r3, #8]
 8009bdc:	461c      	mov	r4, r3
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	899b      	ldrh	r3, [r3, #12]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fa fe9e 	bl	8004928 <lwip_htons>
 8009bec:	4603      	mov	r3, r0
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	f003 0303 	and.w	r3, r3, #3
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <tcp_receive+0xa58>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e000      	b.n	8009bfe <tcp_receive+0xa5a>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	191a      	adds	r2, r3, r4
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	441a      	add	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c0e:	461c      	mov	r4, r3
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	891b      	ldrh	r3, [r3, #8]
 8009c14:	461d      	mov	r5, r3
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	899b      	ldrh	r3, [r3, #12]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fa fe82 	bl	8004928 <lwip_htons>
 8009c24:	4603      	mov	r3, r0
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	f003 0303 	and.w	r3, r3, #3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <tcp_receive+0xa90>
 8009c30:	2301      	movs	r3, #1
 8009c32:	e000      	b.n	8009c36 <tcp_receive+0xa92>
 8009c34:	2300      	movs	r3, #0
 8009c36:	442b      	add	r3, r5
 8009c38:	429c      	cmp	r4, r3
 8009c3a:	d206      	bcs.n	8009c4a <tcp_receive+0xaa6>
 8009c3c:	4b1e      	ldr	r3, [pc, #120]	; (8009cb8 <tcp_receive+0xb14>)
 8009c3e:	f240 622b 	movw	r2, #1579	; 0x62b
 8009c42:	4923      	ldr	r1, [pc, #140]	; (8009cd0 <tcp_receive+0xb2c>)
 8009c44:	481e      	ldr	r0, [pc, #120]	; (8009cc0 <tcp_receive+0xb1c>)
 8009c46:	f004 fc81 	bl	800e54c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	891b      	ldrh	r3, [r3, #8]
 8009c4e:	461c      	mov	r4, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	899b      	ldrh	r3, [r3, #12]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fa fe65 	bl	8004928 <lwip_htons>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <tcp_receive+0xaca>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <tcp_receive+0xacc>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	1919      	adds	r1, r3, r4
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c76:	b28b      	uxth	r3, r1
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	b29a      	uxth	r2, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7fc ff43 	bl	8006b0c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	891b      	ldrh	r3, [r3, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d028      	beq.n	8009ce2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009c90:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <tcp_receive+0xb24>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d01d      	beq.n	8009cd4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009c98:	4b0b      	ldr	r3, [pc, #44]	; (8009cc8 <tcp_receive+0xb24>)
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	4610      	mov	r0, r2
 8009ca4:	f7fc fa60 	bl	8006168 <pbuf_cat>
 8009ca8:	e018      	b.n	8009cdc <tcp_receive+0xb38>
 8009caa:	bf00      	nop
 8009cac:	200087ae 	.word	0x200087ae
 8009cb0:	200087a4 	.word	0x200087a4
 8009cb4:	20008784 	.word	0x20008784
 8009cb8:	080105bc 	.word	0x080105bc
 8009cbc:	0801099c 	.word	0x0801099c
 8009cc0:	08010608 	.word	0x08010608
 8009cc4:	080109d8 	.word	0x080109d8
 8009cc8:	200087b4 	.word	0x200087b4
 8009ccc:	200087b1 	.word	0x200087b1
 8009cd0:	080109f8 	.word	0x080109f8
            } else {
              recv_data = cseg->p;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	4a70      	ldr	r2, [pc, #448]	; (8009e9c <tcp_receive+0xcf8>)
 8009cda:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	899b      	ldrh	r3, [r3, #12]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fa fe1c 	bl	8004928 <lwip_htons>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00d      	beq.n	8009d18 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009cfc:	4b68      	ldr	r3, [pc, #416]	; (8009ea0 <tcp_receive+0xcfc>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	f043 0320 	orr.w	r3, r3, #32
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	4b66      	ldr	r3, [pc, #408]	; (8009ea0 <tcp_receive+0xcfc>)
 8009d08:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	7d1b      	ldrb	r3, [r3, #20]
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d102      	bne.n	8009d18 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2207      	movs	r2, #7
 8009d16:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009d20:	68b8      	ldr	r0, [r7, #8]
 8009d22:	f7fd fbd2 	bl	80074ca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d008      	beq.n	8009d40 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	f43f af43 	beq.w	8009bc6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	8b5b      	ldrh	r3, [r3, #26]
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00e      	beq.n	8009d6a <tcp_receive+0xbc6>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	8b5b      	ldrh	r3, [r3, #26]
 8009d50:	f023 0301 	bic.w	r3, r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	835a      	strh	r2, [r3, #26]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	8b5b      	ldrh	r3, [r3, #26]
 8009d5e:	f043 0302 	orr.w	r3, r3, #2
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d68:	e188      	b.n	800a07c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	8b5b      	ldrh	r3, [r3, #26]
 8009d6e:	f043 0301 	orr.w	r3, r3, #1
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009d78:	e180      	b.n	800a07c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d106      	bne.n	8009d90 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009d82:	4848      	ldr	r0, [pc, #288]	; (8009ea4 <tcp_receive+0xd00>)
 8009d84:	f7fd fbba 	bl	80074fc <tcp_seg_copy>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	675a      	str	r2, [r3, #116]	; 0x74
 8009d8e:	e16d      	b.n	800a06c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009d90:	2300      	movs	r3, #0
 8009d92:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d9a:	e157      	b.n	800a04c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	4b41      	ldr	r3, [pc, #260]	; (8009ea8 <tcp_receive+0xd04>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d11d      	bne.n	8009de6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009daa:	4b3e      	ldr	r3, [pc, #248]	; (8009ea4 <tcp_receive+0xd00>)
 8009dac:	891a      	ldrh	r2, [r3, #8]
 8009dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db0:	891b      	ldrh	r3, [r3, #8]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	f240 814f 	bls.w	800a056 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009db8:	483a      	ldr	r0, [pc, #232]	; (8009ea4 <tcp_receive+0xd00>)
 8009dba:	f7fd fb9f 	bl	80074fc <tcp_seg_copy>
 8009dbe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f000 8149 	beq.w	800a05a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d003      	beq.n	8009dd6 <tcp_receive+0xc32>
                    prev->next = cseg;
 8009dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	e002      	b.n	8009ddc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009ddc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dde:	6978      	ldr	r0, [r7, #20]
 8009de0:	f7ff f8dc 	bl	8008f9c <tcp_oos_insert_segment>
                }
                break;
 8009de4:	e139      	b.n	800a05a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d117      	bne.n	8009e1c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009dec:	4b2e      	ldr	r3, [pc, #184]	; (8009ea8 <tcp_receive+0xd04>)
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	da57      	bge.n	8009eac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009dfc:	4829      	ldr	r0, [pc, #164]	; (8009ea4 <tcp_receive+0xd00>)
 8009dfe:	f7fd fb7d 	bl	80074fc <tcp_seg_copy>
 8009e02:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f000 8129 	beq.w	800a05e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	69ba      	ldr	r2, [r7, #24]
 8009e10:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e14:	69b8      	ldr	r0, [r7, #24]
 8009e16:	f7ff f8c1 	bl	8008f9c <tcp_oos_insert_segment>
                  }
                  break;
 8009e1a:	e120      	b.n	800a05e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009e1c:	4b22      	ldr	r3, [pc, #136]	; (8009ea8 <tcp_receive+0xd04>)
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	db3e      	blt.n	8009eac <tcp_receive+0xd08>
 8009e2e:	4b1e      	ldr	r3, [pc, #120]	; (8009ea8 <tcp_receive+0xd04>)
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	1ad3      	subs	r3, r2, r3
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dc35      	bgt.n	8009eac <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e40:	4818      	ldr	r0, [pc, #96]	; (8009ea4 <tcp_receive+0xd00>)
 8009e42:	f7fd fb5b 	bl	80074fc <tcp_seg_copy>
 8009e46:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	f000 8109 	beq.w	800a062 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e58:	8912      	ldrh	r2, [r2, #8]
 8009e5a:	441a      	add	r2, r3
 8009e5c:	4b12      	ldr	r3, [pc, #72]	; (8009ea8 <tcp_receive+0xd04>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	dd12      	ble.n	8009e8c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009e66:	4b10      	ldr	r3, [pc, #64]	; (8009ea8 <tcp_receive+0xd04>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e82:	891b      	ldrh	r3, [r3, #8]
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	f7fb ff26 	bl	8005cd8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e8e:	69fa      	ldr	r2, [r7, #28]
 8009e90:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009e92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e94:	69f8      	ldr	r0, [r7, #28]
 8009e96:	f7ff f881 	bl	8008f9c <tcp_oos_insert_segment>
                  }
                  break;
 8009e9a:	e0e2      	b.n	800a062 <tcp_receive+0xebe>
 8009e9c:	200087b4 	.word	0x200087b4
 8009ea0:	200087b1 	.word	0x200087b1
 8009ea4:	20008784 	.word	0x20008784
 8009ea8:	200087a4 	.word	0x200087a4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f040 80c6 	bne.w	800a046 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009eba:	4b80      	ldr	r3, [pc, #512]	; (800a0bc <tcp_receive+0xf18>)
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f340 80bd 	ble.w	800a046 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	899b      	ldrh	r3, [r3, #12]
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7fa fd27 	bl	8004928 <lwip_htons>
 8009eda:	4603      	mov	r3, r0
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	f040 80bf 	bne.w	800a066 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009ee8:	4875      	ldr	r0, [pc, #468]	; (800a0c0 <tcp_receive+0xf1c>)
 8009eea:	f7fd fb07 	bl	80074fc <tcp_seg_copy>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 80b6 	beq.w	800a06a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f06:	8912      	ldrh	r2, [r2, #8]
 8009f08:	441a      	add	r2, r3
 8009f0a:	4b6c      	ldr	r3, [pc, #432]	; (800a0bc <tcp_receive+0xf18>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	dd12      	ble.n	8009f3a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009f14:	4b69      	ldr	r3, [pc, #420]	; (800a0bc <tcp_receive+0xf18>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	b29a      	uxth	r2, r3
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	891b      	ldrh	r3, [r3, #8]
 8009f32:	4619      	mov	r1, r3
 8009f34:	4610      	mov	r0, r2
 8009f36:	f7fb fecf 	bl	8005cd8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009f3a:	4b62      	ldr	r3, [pc, #392]	; (800a0c4 <tcp_receive+0xf20>)
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	4b5e      	ldr	r3, [pc, #376]	; (800a0bc <tcp_receive+0xf18>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	441a      	add	r2, r3
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	6879      	ldr	r1, [r7, #4]
 8009f4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f4e:	440b      	add	r3, r1
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f340 8089 	ble.w	800a06a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	899b      	ldrh	r3, [r3, #12]
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fa fce0 	bl	8004928 <lwip_htons>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d022      	beq.n	8009fba <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	899b      	ldrh	r3, [r3, #12]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	b21b      	sxth	r3, r3
 8009f80:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f84:	b21c      	sxth	r4, r3
 8009f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	899b      	ldrh	r3, [r3, #12]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fa fcc9 	bl	8004928 <lwip_htons>
 8009f96:	4603      	mov	r3, r0
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7fa fcc0 	bl	8004928 <lwip_htons>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	b21b      	sxth	r3, r3
 8009fac:	4323      	orrs	r3, r4
 8009fae:	b21a      	sxth	r2, r3
 8009fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	b292      	uxth	r2, r2
 8009fb8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fc4:	4413      	add	r3, r2
 8009fc6:	b299      	uxth	r1, r3
 8009fc8:	4b3c      	ldr	r3, [pc, #240]	; (800a0bc <tcp_receive+0xf18>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	1a8a      	subs	r2, r1, r2
 8009fd4:	b292      	uxth	r2, r2
 8009fd6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	891b      	ldrh	r3, [r3, #8]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	f7fb fe76 	bl	8005cd8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	891c      	ldrh	r4, [r3, #8]
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	899b      	ldrh	r3, [r3, #12]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7fa fc93 	bl	8004928 <lwip_htons>
 800a002:	4603      	mov	r3, r0
 800a004:	b2db      	uxtb	r3, r3
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <tcp_receive+0xe6e>
 800a00e:	2301      	movs	r3, #1
 800a010:	e000      	b.n	800a014 <tcp_receive+0xe70>
 800a012:	2300      	movs	r3, #0
 800a014:	4423      	add	r3, r4
 800a016:	b29a      	uxth	r2, r3
 800a018:	4b2a      	ldr	r3, [pc, #168]	; (800a0c4 <tcp_receive+0xf20>)
 800a01a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a01c:	4b29      	ldr	r3, [pc, #164]	; (800a0c4 <tcp_receive+0xf20>)
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	4b26      	ldr	r3, [pc, #152]	; (800a0bc <tcp_receive+0xf18>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	441a      	add	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02c:	6879      	ldr	r1, [r7, #4]
 800a02e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a030:	440b      	add	r3, r1
 800a032:	429a      	cmp	r2, r3
 800a034:	d019      	beq.n	800a06a <tcp_receive+0xec6>
 800a036:	4b24      	ldr	r3, [pc, #144]	; (800a0c8 <tcp_receive+0xf24>)
 800a038:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a03c:	4923      	ldr	r1, [pc, #140]	; (800a0cc <tcp_receive+0xf28>)
 800a03e:	4824      	ldr	r0, [pc, #144]	; (800a0d0 <tcp_receive+0xf2c>)
 800a040:	f004 fa84 	bl	800e54c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a044:	e011      	b.n	800a06a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04e:	2b00      	cmp	r3, #0
 800a050:	f47f aea4 	bne.w	8009d9c <tcp_receive+0xbf8>
 800a054:	e00a      	b.n	800a06c <tcp_receive+0xec8>
                break;
 800a056:	bf00      	nop
 800a058:	e008      	b.n	800a06c <tcp_receive+0xec8>
                break;
 800a05a:	bf00      	nop
 800a05c:	e006      	b.n	800a06c <tcp_receive+0xec8>
                  break;
 800a05e:	bf00      	nop
 800a060:	e004      	b.n	800a06c <tcp_receive+0xec8>
                  break;
 800a062:	bf00      	nop
 800a064:	e002      	b.n	800a06c <tcp_receive+0xec8>
                  break;
 800a066:	bf00      	nop
 800a068:	e000      	b.n	800a06c <tcp_receive+0xec8>
                break;
 800a06a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f001 fa33 	bl	800b4d8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a072:	e003      	b.n	800a07c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f001 fa2f 	bl	800b4d8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a07a:	e01a      	b.n	800a0b2 <tcp_receive+0xf0e>
 800a07c:	e019      	b.n	800a0b2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a07e:	4b0f      	ldr	r3, [pc, #60]	; (800a0bc <tcp_receive+0xf18>)
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b00      	cmp	r3, #0
 800a08a:	db0a      	blt.n	800a0a2 <tcp_receive+0xefe>
 800a08c:	4b0b      	ldr	r3, [pc, #44]	; (800a0bc <tcp_receive+0xf18>)
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a098:	440b      	add	r3, r1
 800a09a:	1ad3      	subs	r3, r2, r3
 800a09c:	3301      	adds	r3, #1
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	dd07      	ble.n	800a0b2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	8b5b      	ldrh	r3, [r3, #26]
 800a0a6:	f043 0302 	orr.w	r3, r3, #2
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a0b0:	e7ff      	b.n	800a0b2 <tcp_receive+0xf0e>
 800a0b2:	bf00      	nop
 800a0b4:	3750      	adds	r7, #80	; 0x50
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200087a4 	.word	0x200087a4
 800a0c0:	20008784 	.word	0x20008784
 800a0c4:	200087ae 	.word	0x200087ae
 800a0c8:	080105bc 	.word	0x080105bc
 800a0cc:	08010964 	.word	0x08010964
 800a0d0:	08010608 	.word	0x08010608

0800a0d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a0da:	4b15      	ldr	r3, [pc, #84]	; (800a130 <tcp_get_next_optbyte+0x5c>)
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	1c5a      	adds	r2, r3, #1
 800a0e0:	b291      	uxth	r1, r2
 800a0e2:	4a13      	ldr	r2, [pc, #76]	; (800a130 <tcp_get_next_optbyte+0x5c>)
 800a0e4:	8011      	strh	r1, [r2, #0]
 800a0e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a0e8:	4b12      	ldr	r3, [pc, #72]	; (800a134 <tcp_get_next_optbyte+0x60>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d004      	beq.n	800a0fa <tcp_get_next_optbyte+0x26>
 800a0f0:	4b11      	ldr	r3, [pc, #68]	; (800a138 <tcp_get_next_optbyte+0x64>)
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	88fa      	ldrh	r2, [r7, #6]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d208      	bcs.n	800a10c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a0fa:	4b10      	ldr	r3, [pc, #64]	; (800a13c <tcp_get_next_optbyte+0x68>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3314      	adds	r3, #20
 800a100:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a102:	88fb      	ldrh	r3, [r7, #6]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	4413      	add	r3, r2
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	e00b      	b.n	800a124 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a10c:	88fb      	ldrh	r3, [r7, #6]
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	4b09      	ldr	r3, [pc, #36]	; (800a138 <tcp_get_next_optbyte+0x64>)
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a11a:	4b06      	ldr	r3, [pc, #24]	; (800a134 <tcp_get_next_optbyte+0x60>)
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	797b      	ldrb	r3, [r7, #5]
 800a120:	4413      	add	r3, r2
 800a122:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr
 800a130:	200087a0 	.word	0x200087a0
 800a134:	2000879c 	.word	0x2000879c
 800a138:	2000879a 	.word	0x2000879a
 800a13c:	20008794 	.word	0x20008794

0800a140 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d106      	bne.n	800a15c <tcp_parseopt+0x1c>
 800a14e:	4b32      	ldr	r3, [pc, #200]	; (800a218 <tcp_parseopt+0xd8>)
 800a150:	f240 727d 	movw	r2, #1917	; 0x77d
 800a154:	4931      	ldr	r1, [pc, #196]	; (800a21c <tcp_parseopt+0xdc>)
 800a156:	4832      	ldr	r0, [pc, #200]	; (800a220 <tcp_parseopt+0xe0>)
 800a158:	f004 f9f8 	bl	800e54c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a15c:	4b31      	ldr	r3, [pc, #196]	; (800a224 <tcp_parseopt+0xe4>)
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d055      	beq.n	800a210 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a164:	4b30      	ldr	r3, [pc, #192]	; (800a228 <tcp_parseopt+0xe8>)
 800a166:	2200      	movs	r2, #0
 800a168:	801a      	strh	r2, [r3, #0]
 800a16a:	e045      	b.n	800a1f8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a16c:	f7ff ffb2 	bl	800a0d4 <tcp_get_next_optbyte>
 800a170:	4603      	mov	r3, r0
 800a172:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a174:	7bfb      	ldrb	r3, [r7, #15]
 800a176:	2b02      	cmp	r3, #2
 800a178:	d006      	beq.n	800a188 <tcp_parseopt+0x48>
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	dc2b      	bgt.n	800a1d6 <tcp_parseopt+0x96>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d041      	beq.n	800a206 <tcp_parseopt+0xc6>
 800a182:	2b01      	cmp	r3, #1
 800a184:	d127      	bne.n	800a1d6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a186:	e037      	b.n	800a1f8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a188:	f7ff ffa4 	bl	800a0d4 <tcp_get_next_optbyte>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b04      	cmp	r3, #4
 800a190:	d13b      	bne.n	800a20a <tcp_parseopt+0xca>
 800a192:	4b25      	ldr	r3, [pc, #148]	; (800a228 <tcp_parseopt+0xe8>)
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	3301      	adds	r3, #1
 800a198:	4a22      	ldr	r2, [pc, #136]	; (800a224 <tcp_parseopt+0xe4>)
 800a19a:	8812      	ldrh	r2, [r2, #0]
 800a19c:	4293      	cmp	r3, r2
 800a19e:	da34      	bge.n	800a20a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a1a0:	f7ff ff98 	bl	800a0d4 <tcp_get_next_optbyte>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a1ac:	f7ff ff92 	bl	800a0d4 <tcp_get_next_optbyte>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	89bb      	ldrh	r3, [r7, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a1ba:	89bb      	ldrh	r3, [r7, #12]
 800a1bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a1c0:	d804      	bhi.n	800a1cc <tcp_parseopt+0x8c>
 800a1c2:	89bb      	ldrh	r3, [r7, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <tcp_parseopt+0x8c>
 800a1c8:	89ba      	ldrh	r2, [r7, #12]
 800a1ca:	e001      	b.n	800a1d0 <tcp_parseopt+0x90>
 800a1cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a1d4:	e010      	b.n	800a1f8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a1d6:	f7ff ff7d 	bl	800a0d4 <tcp_get_next_optbyte>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a1de:	7afb      	ldrb	r3, [r7, #11]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d914      	bls.n	800a20e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a1e4:	7afb      	ldrb	r3, [r7, #11]
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <tcp_parseopt+0xe8>)
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	3b02      	subs	r3, #2
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	4b0c      	ldr	r3, [pc, #48]	; (800a228 <tcp_parseopt+0xe8>)
 800a1f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a1f8:	4b0b      	ldr	r3, [pc, #44]	; (800a228 <tcp_parseopt+0xe8>)
 800a1fa:	881a      	ldrh	r2, [r3, #0]
 800a1fc:	4b09      	ldr	r3, [pc, #36]	; (800a224 <tcp_parseopt+0xe4>)
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	429a      	cmp	r2, r3
 800a202:	d3b3      	bcc.n	800a16c <tcp_parseopt+0x2c>
 800a204:	e004      	b.n	800a210 <tcp_parseopt+0xd0>
          return;
 800a206:	bf00      	nop
 800a208:	e002      	b.n	800a210 <tcp_parseopt+0xd0>
            return;
 800a20a:	bf00      	nop
 800a20c:	e000      	b.n	800a210 <tcp_parseopt+0xd0>
            return;
 800a20e:	bf00      	nop
      }
    }
  }
}
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	080105bc 	.word	0x080105bc
 800a21c:	08010a20 	.word	0x08010a20
 800a220:	08010608 	.word	0x08010608
 800a224:	20008798 	.word	0x20008798
 800a228:	200087a0 	.word	0x200087a0

0800a22c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a230:	4b05      	ldr	r3, [pc, #20]	; (800a248 <tcp_trigger_input_pcb_close+0x1c>)
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	f043 0310 	orr.w	r3, r3, #16
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	4b03      	ldr	r3, [pc, #12]	; (800a248 <tcp_trigger_input_pcb_close+0x1c>)
 800a23c:	701a      	strb	r2, [r3, #0]
}
 800a23e:	bf00      	nop
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	200087b1 	.word	0x200087b1

0800a24c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00a      	beq.n	800a274 <tcp_route+0x28>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	7a1b      	ldrb	r3, [r3, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d006      	beq.n	800a274 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	7a1b      	ldrb	r3, [r3, #8]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7fb fb5a 	bl	8005924 <netif_get_by_index>
 800a270:	4603      	mov	r3, r0
 800a272:	e003      	b.n	800a27c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f002 fe7d 	bl	800cf74 <ip4_route>
 800a27a:	4603      	mov	r3, r0
  }
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a284:	b590      	push	{r4, r7, lr}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	4613      	mov	r3, r2
 800a292:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d105      	bne.n	800a2a6 <tcp_create_segment+0x22>
 800a29a:	4b44      	ldr	r3, [pc, #272]	; (800a3ac <tcp_create_segment+0x128>)
 800a29c:	22a3      	movs	r2, #163	; 0xa3
 800a29e:	4944      	ldr	r1, [pc, #272]	; (800a3b0 <tcp_create_segment+0x12c>)
 800a2a0:	4844      	ldr	r0, [pc, #272]	; (800a3b4 <tcp_create_segment+0x130>)
 800a2a2:	f004 f953 	bl	800e54c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d105      	bne.n	800a2b8 <tcp_create_segment+0x34>
 800a2ac:	4b3f      	ldr	r3, [pc, #252]	; (800a3ac <tcp_create_segment+0x128>)
 800a2ae:	22a4      	movs	r2, #164	; 0xa4
 800a2b0:	4941      	ldr	r1, [pc, #260]	; (800a3b8 <tcp_create_segment+0x134>)
 800a2b2:	4840      	ldr	r0, [pc, #256]	; (800a3b4 <tcp_create_segment+0x130>)
 800a2b4:	f004 f94a 	bl	800e54c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a2b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	f003 0304 	and.w	r3, r3, #4
 800a2c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a2c6:	2003      	movs	r0, #3
 800a2c8:	f7fa ffa6 	bl	8005218 <memp_malloc>
 800a2cc:	6138      	str	r0, [r7, #16]
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d104      	bne.n	800a2de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a2d4:	68b8      	ldr	r0, [r7, #8]
 800a2d6:	f7fb fe85 	bl	8005fe4 <pbuf_free>
    return NULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e061      	b.n	800a3a2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a2e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	68ba      	ldr	r2, [r7, #8]
 800a2f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	891a      	ldrh	r2, [r3, #8]
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d205      	bcs.n	800a30a <tcp_create_segment+0x86>
 800a2fe:	4b2b      	ldr	r3, [pc, #172]	; (800a3ac <tcp_create_segment+0x128>)
 800a300:	22b0      	movs	r2, #176	; 0xb0
 800a302:	492e      	ldr	r1, [pc, #184]	; (800a3bc <tcp_create_segment+0x138>)
 800a304:	482b      	ldr	r0, [pc, #172]	; (800a3b4 <tcp_create_segment+0x130>)
 800a306:	f004 f921 	bl	800e54c <iprintf>
  seg->len = p->tot_len - optlen;
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	891a      	ldrh	r2, [r3, #8]
 800a30e:	7dfb      	ldrb	r3, [r7, #23]
 800a310:	b29b      	uxth	r3, r3
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	b29a      	uxth	r2, r3
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a31a:	2114      	movs	r1, #20
 800a31c:	68b8      	ldr	r0, [r7, #8]
 800a31e:	f7fb fdcb 	bl	8005eb8 <pbuf_add_header>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a328:	6938      	ldr	r0, [r7, #16]
 800a32a:	f7fd f8ce 	bl	80074ca <tcp_seg_free>
    return NULL;
 800a32e:	2300      	movs	r3, #0
 800a330:	e037      	b.n	800a3a2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	685a      	ldr	r2, [r3, #4]
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8ada      	ldrh	r2, [r3, #22]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	68dc      	ldr	r4, [r3, #12]
 800a344:	4610      	mov	r0, r2
 800a346:	f7fa faef 	bl	8004928 <lwip_htons>
 800a34a:	4603      	mov	r3, r0
 800a34c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8b1a      	ldrh	r2, [r3, #24]
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	68dc      	ldr	r4, [r3, #12]
 800a356:	4610      	mov	r0, r2
 800a358:	f7fa fae6 	bl	8004928 <lwip_htons>
 800a35c:	4603      	mov	r3, r0
 800a35e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	68dc      	ldr	r4, [r3, #12]
 800a364:	6838      	ldr	r0, [r7, #0]
 800a366:	f7fa faf4 	bl	8004952 <lwip_htonl>
 800a36a:	4603      	mov	r3, r0
 800a36c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a36e:	7dfb      	ldrb	r3, [r7, #23]
 800a370:	089b      	lsrs	r3, r3, #2
 800a372:	b2db      	uxtb	r3, r3
 800a374:	b29b      	uxth	r3, r3
 800a376:	3305      	adds	r3, #5
 800a378:	b29b      	uxth	r3, r3
 800a37a:	031b      	lsls	r3, r3, #12
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	79fb      	ldrb	r3, [r7, #7]
 800a380:	b29b      	uxth	r3, r3
 800a382:	4313      	orrs	r3, r2
 800a384:	b29a      	uxth	r2, r3
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	68dc      	ldr	r4, [r3, #12]
 800a38a:	4610      	mov	r0, r2
 800a38c:	f7fa facc 	bl	8004928 <lwip_htons>
 800a390:	4603      	mov	r3, r0
 800a392:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	749a      	strb	r2, [r3, #18]
 800a39c:	2200      	movs	r2, #0
 800a39e:	74da      	strb	r2, [r3, #19]
  return seg;
 800a3a0:	693b      	ldr	r3, [r7, #16]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	371c      	adds	r7, #28
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd90      	pop	{r4, r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	08010a3c 	.word	0x08010a3c
 800a3b0:	08010a70 	.word	0x08010a70
 800a3b4:	08010a90 	.word	0x08010a90
 800a3b8:	08010ab8 	.word	0x08010ab8
 800a3bc:	08010adc 	.word	0x08010adc

0800a3c0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a3c0:	b590      	push	{r4, r7, lr}
 800a3c2:	b08b      	sub	sp, #44	; 0x2c
 800a3c4:	af02      	add	r7, sp, #8
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	61fb      	str	r3, [r7, #28]
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d106      	bne.n	800a3ec <tcp_split_unsent_seg+0x2c>
 800a3de:	4b95      	ldr	r3, [pc, #596]	; (800a634 <tcp_split_unsent_seg+0x274>)
 800a3e0:	f240 324b 	movw	r2, #843	; 0x34b
 800a3e4:	4994      	ldr	r1, [pc, #592]	; (800a638 <tcp_split_unsent_seg+0x278>)
 800a3e6:	4895      	ldr	r0, [pc, #596]	; (800a63c <tcp_split_unsent_seg+0x27c>)
 800a3e8:	f004 f8b0 	bl	800e54c <iprintf>

  useg = pcb->unsent;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3f0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d102      	bne.n	800a3fe <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3fc:	e116      	b.n	800a62c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a3fe:	887b      	ldrh	r3, [r7, #2]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d109      	bne.n	800a418 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a404:	4b8b      	ldr	r3, [pc, #556]	; (800a634 <tcp_split_unsent_seg+0x274>)
 800a406:	f240 3253 	movw	r2, #851	; 0x353
 800a40a:	498d      	ldr	r1, [pc, #564]	; (800a640 <tcp_split_unsent_seg+0x280>)
 800a40c:	488b      	ldr	r0, [pc, #556]	; (800a63c <tcp_split_unsent_seg+0x27c>)
 800a40e:	f004 f89d 	bl	800e54c <iprintf>
    return ERR_VAL;
 800a412:	f06f 0305 	mvn.w	r3, #5
 800a416:	e109      	b.n	800a62c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	891b      	ldrh	r3, [r3, #8]
 800a41c:	887a      	ldrh	r2, [r7, #2]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d301      	bcc.n	800a426 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	e102      	b.n	800a62c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a42a:	887a      	ldrh	r2, [r7, #2]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d906      	bls.n	800a43e <tcp_split_unsent_seg+0x7e>
 800a430:	4b80      	ldr	r3, [pc, #512]	; (800a634 <tcp_split_unsent_seg+0x274>)
 800a432:	f240 325b 	movw	r2, #859	; 0x35b
 800a436:	4983      	ldr	r1, [pc, #524]	; (800a644 <tcp_split_unsent_seg+0x284>)
 800a438:	4880      	ldr	r0, [pc, #512]	; (800a63c <tcp_split_unsent_seg+0x27c>)
 800a43a:	f004 f887 	bl	800e54c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	891b      	ldrh	r3, [r3, #8]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <tcp_split_unsent_seg+0x94>
 800a446:	4b7b      	ldr	r3, [pc, #492]	; (800a634 <tcp_split_unsent_seg+0x274>)
 800a448:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a44c:	497e      	ldr	r1, [pc, #504]	; (800a648 <tcp_split_unsent_seg+0x288>)
 800a44e:	487b      	ldr	r0, [pc, #492]	; (800a63c <tcp_split_unsent_seg+0x27c>)
 800a450:	f004 f87c 	bl	800e54c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	7a9b      	ldrb	r3, [r3, #10]
 800a458:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	f003 0304 	and.w	r3, r3, #4
 800a464:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	891a      	ldrh	r2, [r3, #8]
 800a46a:	887b      	ldrh	r3, [r7, #2]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a470:	7bbb      	ldrb	r3, [r7, #14]
 800a472:	b29a      	uxth	r2, r3
 800a474:	89bb      	ldrh	r3, [r7, #12]
 800a476:	4413      	add	r3, r2
 800a478:	b29b      	uxth	r3, r3
 800a47a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a47e:	4619      	mov	r1, r3
 800a480:	2036      	movs	r0, #54	; 0x36
 800a482:	f7fb facb 	bl	8005a1c <pbuf_alloc>
 800a486:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 80b7 	beq.w	800a5fe <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	891a      	ldrh	r2, [r3, #8]
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	891b      	ldrh	r3, [r3, #8]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	887b      	ldrh	r3, [r7, #2]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	6858      	ldr	r0, [r3, #4]
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
 800a4ae:	18d1      	adds	r1, r2, r3
 800a4b0:	897b      	ldrh	r3, [r7, #10]
 800a4b2:	89ba      	ldrh	r2, [r7, #12]
 800a4b4:	f7fb ff80 	bl	80063b8 <pbuf_copy_partial>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	89bb      	ldrh	r3, [r7, #12]
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	f040 809f 	bne.w	800a602 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	899b      	ldrh	r3, [r3, #12]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fa fa2b 	bl	8004928 <lwip_htons>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4da:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a4dc:	2300      	movs	r3, #0
 800a4de:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a4e0:	7efb      	ldrb	r3, [r7, #27]
 800a4e2:	f003 0308 	and.w	r3, r3, #8
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d007      	beq.n	800a4fa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a4ea:	7efb      	ldrb	r3, [r7, #27]
 800a4ec:	f023 0308 	bic.w	r3, r3, #8
 800a4f0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a4f2:	7ebb      	ldrb	r3, [r7, #26]
 800a4f4:	f043 0308 	orr.w	r3, r3, #8
 800a4f8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a4fa:	7efb      	ldrb	r3, [r7, #27]
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	d007      	beq.n	800a514 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a504:	7efb      	ldrb	r3, [r7, #27]
 800a506:	f023 0301 	bic.w	r3, r3, #1
 800a50a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a50c:	7ebb      	ldrb	r3, [r7, #26]
 800a50e:	f043 0301 	orr.w	r3, r3, #1
 800a512:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fa fa19 	bl	8004952 <lwip_htonl>
 800a520:	4602      	mov	r2, r0
 800a522:	887b      	ldrh	r3, [r7, #2]
 800a524:	18d1      	adds	r1, r2, r3
 800a526:	7eba      	ldrb	r2, [r7, #26]
 800a528:	7bfb      	ldrb	r3, [r7, #15]
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	460b      	mov	r3, r1
 800a52e:	6939      	ldr	r1, [r7, #16]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7ff fea7 	bl	800a284 <tcp_create_segment>
 800a536:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d063      	beq.n	800a606 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	4618      	mov	r0, r3
 800a544:	f7fb fdd6 	bl	80060f4 <pbuf_clen>
 800a548:	4603      	mov	r3, r0
 800a54a:	461a      	mov	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a552:	1a9b      	subs	r3, r3, r2
 800a554:	b29a      	uxth	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	6858      	ldr	r0, [r3, #4]
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	891a      	ldrh	r2, [r3, #8]
 800a566:	89bb      	ldrh	r3, [r7, #12]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	4619      	mov	r1, r3
 800a56e:	f7fb fbb3 	bl	8005cd8 <pbuf_realloc>
  useg->len -= remainder;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	891a      	ldrh	r2, [r3, #8]
 800a576:	89bb      	ldrh	r3, [r7, #12]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	899b      	ldrh	r3, [r3, #12]
 800a586:	b29c      	uxth	r4, r3
 800a588:	7efb      	ldrb	r3, [r7, #27]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fa f9cb 	bl	8004928 <lwip_htons>
 800a592:	4603      	mov	r3, r0
 800a594:	461a      	mov	r2, r3
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	68db      	ldr	r3, [r3, #12]
 800a59a:	4322      	orrs	r2, r4
 800a59c:	b292      	uxth	r2, r2
 800a59e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7fb fda5 	bl	80060f4 <pbuf_clen>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5b4:	4413      	add	r3, r2
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fb fd96 	bl	80060f4 <pbuf_clen>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5d2:	4413      	add	r3, r2
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	69fa      	ldr	r2, [r7, #28]
 800a5e8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d103      	bne.n	800a5fa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e016      	b.n	800a62c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a5fe:	bf00      	nop
 800a600:	e002      	b.n	800a608 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a602:	bf00      	nop
 800a604:	e000      	b.n	800a608 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a606:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d006      	beq.n	800a61c <tcp_split_unsent_seg+0x25c>
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <tcp_split_unsent_seg+0x274>)
 800a610:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a614:	490d      	ldr	r1, [pc, #52]	; (800a64c <tcp_split_unsent_seg+0x28c>)
 800a616:	4809      	ldr	r0, [pc, #36]	; (800a63c <tcp_split_unsent_seg+0x27c>)
 800a618:	f003 ff98 	bl	800e54c <iprintf>
  if (p != NULL) {
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a622:	6938      	ldr	r0, [r7, #16]
 800a624:	f7fb fcde 	bl	8005fe4 <pbuf_free>
  }

  return ERR_MEM;
 800a628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3724      	adds	r7, #36	; 0x24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd90      	pop	{r4, r7, pc}
 800a634:	08010a3c 	.word	0x08010a3c
 800a638:	08010dd0 	.word	0x08010dd0
 800a63c:	08010a90 	.word	0x08010a90
 800a640:	08010df4 	.word	0x08010df4
 800a644:	08010e18 	.word	0x08010e18
 800a648:	08010e28 	.word	0x08010e28
 800a64c:	08010e38 	.word	0x08010e38

0800a650 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a650:	b590      	push	{r4, r7, lr}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d106      	bne.n	800a66c <tcp_send_fin+0x1c>
 800a65e:	4b21      	ldr	r3, [pc, #132]	; (800a6e4 <tcp_send_fin+0x94>)
 800a660:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a664:	4920      	ldr	r1, [pc, #128]	; (800a6e8 <tcp_send_fin+0x98>)
 800a666:	4821      	ldr	r0, [pc, #132]	; (800a6ec <tcp_send_fin+0x9c>)
 800a668:	f003 ff70 	bl	800e54c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a670:	2b00      	cmp	r3, #0
 800a672:	d02e      	beq.n	800a6d2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a678:	60fb      	str	r3, [r7, #12]
 800a67a:	e002      	b.n	800a682 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1f8      	bne.n	800a67c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	899b      	ldrh	r3, [r3, #12]
 800a690:	b29b      	uxth	r3, r3
 800a692:	4618      	mov	r0, r3
 800a694:	f7fa f948 	bl	8004928 <lwip_htons>
 800a698:	4603      	mov	r3, r0
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d116      	bne.n	800a6d2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	899b      	ldrh	r3, [r3, #12]
 800a6aa:	b29c      	uxth	r4, r3
 800a6ac:	2001      	movs	r0, #1
 800a6ae:	f7fa f93b 	bl	8004928 <lwip_htons>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	4322      	orrs	r2, r4
 800a6bc:	b292      	uxth	r2, r2
 800a6be:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	8b5b      	ldrh	r3, [r3, #26]
 800a6c4:	f043 0320 	orr.w	r3, r3, #32
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e004      	b.n	800a6dc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f80b 	bl	800a6f0 <tcp_enqueue_flags>
 800a6da:	4603      	mov	r3, r0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3714      	adds	r7, #20
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd90      	pop	{r4, r7, pc}
 800a6e4:	08010a3c 	.word	0x08010a3c
 800a6e8:	08010e44 	.word	0x08010e44
 800a6ec:	08010a90 	.word	0x08010a90

0800a6f0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	; 0x28
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a704:	78fb      	ldrb	r3, [r7, #3]
 800a706:	f003 0303 	and.w	r3, r3, #3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d106      	bne.n	800a71c <tcp_enqueue_flags+0x2c>
 800a70e:	4b67      	ldr	r3, [pc, #412]	; (800a8ac <tcp_enqueue_flags+0x1bc>)
 800a710:	f240 4211 	movw	r2, #1041	; 0x411
 800a714:	4966      	ldr	r1, [pc, #408]	; (800a8b0 <tcp_enqueue_flags+0x1c0>)
 800a716:	4867      	ldr	r0, [pc, #412]	; (800a8b4 <tcp_enqueue_flags+0x1c4>)
 800a718:	f003 ff18 	bl	800e54c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d106      	bne.n	800a730 <tcp_enqueue_flags+0x40>
 800a722:	4b62      	ldr	r3, [pc, #392]	; (800a8ac <tcp_enqueue_flags+0x1bc>)
 800a724:	f240 4213 	movw	r2, #1043	; 0x413
 800a728:	4963      	ldr	r1, [pc, #396]	; (800a8b8 <tcp_enqueue_flags+0x1c8>)
 800a72a:	4862      	ldr	r0, [pc, #392]	; (800a8b4 <tcp_enqueue_flags+0x1c4>)
 800a72c:	f003 ff0e 	bl	800e54c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a730:	78fb      	ldrb	r3, [r7, #3]
 800a732:	f003 0302 	and.w	r3, r3, #2
 800a736:	2b00      	cmp	r3, #0
 800a738:	d001      	beq.n	800a73e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a73a:	2301      	movs	r3, #1
 800a73c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a73e:	7ffb      	ldrb	r3, [r7, #31]
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0304 	and.w	r3, r3, #4
 800a748:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a752:	4619      	mov	r1, r3
 800a754:	2036      	movs	r0, #54	; 0x36
 800a756:	f7fb f961 	bl	8005a1c <pbuf_alloc>
 800a75a:	6138      	str	r0, [r7, #16]
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d109      	bne.n	800a776 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	8b5b      	ldrh	r3, [r3, #26]
 800a766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a76a:	b29a      	uxth	r2, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a770:	f04f 33ff 	mov.w	r3, #4294967295
 800a774:	e095      	b.n	800a8a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	895a      	ldrh	r2, [r3, #10]
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	429a      	cmp	r2, r3
 800a780:	d206      	bcs.n	800a790 <tcp_enqueue_flags+0xa0>
 800a782:	4b4a      	ldr	r3, [pc, #296]	; (800a8ac <tcp_enqueue_flags+0x1bc>)
 800a784:	f240 4239 	movw	r2, #1081	; 0x439
 800a788:	494c      	ldr	r1, [pc, #304]	; (800a8bc <tcp_enqueue_flags+0x1cc>)
 800a78a:	484a      	ldr	r0, [pc, #296]	; (800a8b4 <tcp_enqueue_flags+0x1c4>)
 800a78c:	f003 fede 	bl	800e54c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a794:	78fa      	ldrb	r2, [r7, #3]
 800a796:	7ffb      	ldrb	r3, [r7, #31]
 800a798:	9300      	str	r3, [sp, #0]
 800a79a:	460b      	mov	r3, r1
 800a79c:	6939      	ldr	r1, [r7, #16]
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff fd70 	bl	800a284 <tcp_create_segment>
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d109      	bne.n	800a7c0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	8b5b      	ldrh	r3, [r3, #26]
 800a7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a7be:	e070      	b.n	800a8a2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f003 0303 	and.w	r3, r3, #3
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d006      	beq.n	800a7da <tcp_enqueue_flags+0xea>
 800a7cc:	4b37      	ldr	r3, [pc, #220]	; (800a8ac <tcp_enqueue_flags+0x1bc>)
 800a7ce:	f240 4242 	movw	r2, #1090	; 0x442
 800a7d2:	493b      	ldr	r1, [pc, #236]	; (800a8c0 <tcp_enqueue_flags+0x1d0>)
 800a7d4:	4837      	ldr	r0, [pc, #220]	; (800a8b4 <tcp_enqueue_flags+0x1c4>)
 800a7d6:	f003 feb9 	bl	800e54c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	891b      	ldrh	r3, [r3, #8]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d006      	beq.n	800a7f0 <tcp_enqueue_flags+0x100>
 800a7e2:	4b32      	ldr	r3, [pc, #200]	; (800a8ac <tcp_enqueue_flags+0x1bc>)
 800a7e4:	f240 4243 	movw	r2, #1091	; 0x443
 800a7e8:	4936      	ldr	r1, [pc, #216]	; (800a8c4 <tcp_enqueue_flags+0x1d4>)
 800a7ea:	4832      	ldr	r0, [pc, #200]	; (800a8b4 <tcp_enqueue_flags+0x1c4>)
 800a7ec:	f003 feae 	bl	800e54c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d103      	bne.n	800a800 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	66da      	str	r2, [r3, #108]	; 0x6c
 800a7fe:	e00d      	b.n	800a81c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a804:	61bb      	str	r3, [r7, #24]
 800a806:	e002      	b.n	800a80e <tcp_enqueue_flags+0x11e>
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	61bb      	str	r3, [r7, #24]
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1f8      	bne.n	800a808 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a824:	78fb      	ldrb	r3, [r7, #3]
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d104      	bne.n	800a838 <tcp_enqueue_flags+0x148>
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	f003 0301 	and.w	r3, r3, #1
 800a834:	2b00      	cmp	r3, #0
 800a836:	d004      	beq.n	800a842 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a842:	78fb      	ldrb	r3, [r7, #3]
 800a844:	f003 0301 	and.w	r3, r3, #1
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d006      	beq.n	800a85a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	8b5b      	ldrh	r3, [r3, #26]
 800a850:	f043 0320 	orr.w	r3, r3, #32
 800a854:	b29a      	uxth	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fb fc48 	bl	80060f4 <pbuf_clen>
 800a864:	4603      	mov	r3, r0
 800a866:	461a      	mov	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a86e:	4413      	add	r3, r2
 800a870:	b29a      	uxth	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00e      	beq.n	800a8a0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10a      	bne.n	800a8a0 <tcp_enqueue_flags+0x1b0>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d106      	bne.n	800a8a0 <tcp_enqueue_flags+0x1b0>
 800a892:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <tcp_enqueue_flags+0x1bc>)
 800a894:	f240 4265 	movw	r2, #1125	; 0x465
 800a898:	490b      	ldr	r1, [pc, #44]	; (800a8c8 <tcp_enqueue_flags+0x1d8>)
 800a89a:	4806      	ldr	r0, [pc, #24]	; (800a8b4 <tcp_enqueue_flags+0x1c4>)
 800a89c:	f003 fe56 	bl	800e54c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3720      	adds	r7, #32
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	08010a3c 	.word	0x08010a3c
 800a8b0:	08010e60 	.word	0x08010e60
 800a8b4:	08010a90 	.word	0x08010a90
 800a8b8:	08010eb8 	.word	0x08010eb8
 800a8bc:	08010ed8 	.word	0x08010ed8
 800a8c0:	08010f14 	.word	0x08010f14
 800a8c4:	08010f2c 	.word	0x08010f2c
 800a8c8:	08010f58 	.word	0x08010f58

0800a8cc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a8cc:	b5b0      	push	{r4, r5, r7, lr}
 800a8ce:	b08a      	sub	sp, #40	; 0x28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d106      	bne.n	800a8e8 <tcp_output+0x1c>
 800a8da:	4b8a      	ldr	r3, [pc, #552]	; (800ab04 <tcp_output+0x238>)
 800a8dc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a8e0:	4989      	ldr	r1, [pc, #548]	; (800ab08 <tcp_output+0x23c>)
 800a8e2:	488a      	ldr	r0, [pc, #552]	; (800ab0c <tcp_output+0x240>)
 800a8e4:	f003 fe32 	bl	800e54c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	7d1b      	ldrb	r3, [r3, #20]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d106      	bne.n	800a8fe <tcp_output+0x32>
 800a8f0:	4b84      	ldr	r3, [pc, #528]	; (800ab04 <tcp_output+0x238>)
 800a8f2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a8f6:	4986      	ldr	r1, [pc, #536]	; (800ab10 <tcp_output+0x244>)
 800a8f8:	4884      	ldr	r0, [pc, #528]	; (800ab0c <tcp_output+0x240>)
 800a8fa:	f003 fe27 	bl	800e54c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a8fe:	4b85      	ldr	r3, [pc, #532]	; (800ab14 <tcp_output+0x248>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	429a      	cmp	r2, r3
 800a906:	d101      	bne.n	800a90c <tcp_output+0x40>
    return ERR_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	e1ce      	b.n	800acaa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a918:	4293      	cmp	r3, r2
 800a91a:	bf28      	it	cs
 800a91c:	4613      	movcs	r3, r2
 800a91e:	b29b      	uxth	r3, r3
 800a920:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a926:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10b      	bne.n	800a946 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	8b5b      	ldrh	r3, [r3, #26]
 800a932:	f003 0302 	and.w	r3, r3, #2
 800a936:	2b00      	cmp	r3, #0
 800a938:	f000 81aa 	beq.w	800ac90 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fdcb 	bl	800b4d8 <tcp_send_empty_ack>
 800a942:	4603      	mov	r3, r0
 800a944:	e1b1      	b.n	800acaa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3304      	adds	r3, #4
 800a94c:	461a      	mov	r2, r3
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff fc7c 	bl	800a24c <tcp_route>
 800a954:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d102      	bne.n	800a962 <tcp_output+0x96>
    return ERR_RTE;
 800a95c:	f06f 0303 	mvn.w	r3, #3
 800a960:	e1a3      	b.n	800acaa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d003      	beq.n	800a970 <tcp_output+0xa4>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d111      	bne.n	800a994 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <tcp_output+0xb0>
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	3304      	adds	r3, #4
 800a97a:	e000      	b.n	800a97e <tcp_output+0xb2>
 800a97c:	2300      	movs	r3, #0
 800a97e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a980:	693b      	ldr	r3, [r7, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d102      	bne.n	800a98c <tcp_output+0xc0>
      return ERR_RTE;
 800a986:	f06f 0303 	mvn.w	r3, #3
 800a98a:	e18e      	b.n	800acaa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f7f9 ffd9 	bl	8004952 <lwip_htonl>
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9aa:	8912      	ldrh	r2, [r2, #8]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	69ba      	ldr	r2, [r7, #24]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d227      	bcs.n	800aa04 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d114      	bne.n	800a9ec <tcp_output+0x120>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d110      	bne.n	800a9ec <tcp_output+0x120>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d10b      	bne.n	800a9ec <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	8b5b      	ldrh	r3, [r3, #26]
 800a9f0:	f003 0302 	and.w	r3, r3, #2
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 814d 	beq.w	800ac94 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 fd6c 	bl	800b4d8 <tcp_send_empty_ack>
 800aa00:	4603      	mov	r3, r0
 800aa02:	e152      	b.n	800acaa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa10:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800aa12:	6a3b      	ldr	r3, [r7, #32]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 811c 	beq.w	800ac52 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800aa1a:	e002      	b.n	800aa22 <tcp_output+0x156>
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	623b      	str	r3, [r7, #32]
 800aa22:	6a3b      	ldr	r3, [r7, #32]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1f8      	bne.n	800aa1c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800aa2a:	e112      	b.n	800ac52 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	899b      	ldrh	r3, [r3, #12]
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7f9 ff77 	bl	8004928 <lwip_htons>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	f003 0304 	and.w	r3, r3, #4
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d006      	beq.n	800aa54 <tcp_output+0x188>
 800aa46:	4b2f      	ldr	r3, [pc, #188]	; (800ab04 <tcp_output+0x238>)
 800aa48:	f240 5236 	movw	r2, #1334	; 0x536
 800aa4c:	4932      	ldr	r1, [pc, #200]	; (800ab18 <tcp_output+0x24c>)
 800aa4e:	482f      	ldr	r0, [pc, #188]	; (800ab0c <tcp_output+0x240>)
 800aa50:	f003 fd7c 	bl	800e54c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01f      	beq.n	800aa9c <tcp_output+0x1d0>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	8b5b      	ldrh	r3, [r3, #26]
 800aa60:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d119      	bne.n	800aa9c <tcp_output+0x1d0>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d00b      	beq.n	800aa88 <tcp_output+0x1bc>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d110      	bne.n	800aa9c <tcp_output+0x1d0>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa7e:	891a      	ldrh	r2, [r3, #8]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d209      	bcs.n	800aa9c <tcp_output+0x1d0>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d004      	beq.n	800aa9c <tcp_output+0x1d0>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aa98:	2b08      	cmp	r3, #8
 800aa9a:	d901      	bls.n	800aaa0 <tcp_output+0x1d4>
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e000      	b.n	800aaa2 <tcp_output+0x1d6>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	8b5b      	ldrh	r3, [r3, #26]
 800aaaa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f000 80e4 	beq.w	800ac7c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	7d1b      	ldrb	r3, [r3, #20]
 800aab8:	2b02      	cmp	r3, #2
 800aaba:	d00d      	beq.n	800aad8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	899b      	ldrh	r3, [r3, #12]
 800aac2:	b29c      	uxth	r4, r3
 800aac4:	2010      	movs	r0, #16
 800aac6:	f7f9 ff2f 	bl	8004928 <lwip_htons>
 800aaca:	4603      	mov	r3, r0
 800aacc:	461a      	mov	r2, r3
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	4322      	orrs	r2, r4
 800aad4:	b292      	uxth	r2, r2
 800aad6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800aad8:	697a      	ldr	r2, [r7, #20]
 800aada:	6879      	ldr	r1, [r7, #4]
 800aadc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aade:	f000 f909 	bl	800acf4 <tcp_output_segment>
 800aae2:	4603      	mov	r3, r0
 800aae4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800aae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d016      	beq.n	800ab1c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8b5b      	ldrh	r3, [r3, #26]
 800aaf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	835a      	strh	r2, [r3, #26]
      return err;
 800aafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab00:	e0d3      	b.n	800acaa <tcp_output+0x3de>
 800ab02:	bf00      	nop
 800ab04:	08010a3c 	.word	0x08010a3c
 800ab08:	08010f80 	.word	0x08010f80
 800ab0c:	08010a90 	.word	0x08010a90
 800ab10:	08010f98 	.word	0x08010f98
 800ab14:	200087b8 	.word	0x200087b8
 800ab18:	08010fc0 	.word	0x08010fc0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800ab1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	7d1b      	ldrb	r3, [r3, #20]
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d006      	beq.n	800ab3a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	8b5b      	ldrh	r3, [r3, #26]
 800ab30:	f023 0303 	bic.w	r3, r3, #3
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7f9 ff06 	bl	8004952 <lwip_htonl>
 800ab46:	4604      	mov	r4, r0
 800ab48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4a:	891b      	ldrh	r3, [r3, #8]
 800ab4c:	461d      	mov	r5, r3
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	68db      	ldr	r3, [r3, #12]
 800ab52:	899b      	ldrh	r3, [r3, #12]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7f9 fee6 	bl	8004928 <lwip_htons>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f003 0303 	and.w	r3, r3, #3
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <tcp_output+0x2a0>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e000      	b.n	800ab6e <tcp_output+0x2a2>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	442b      	add	r3, r5
 800ab70:	4423      	add	r3, r4
 800ab72:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	da02      	bge.n	800ab86 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ab86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab88:	891b      	ldrh	r3, [r3, #8]
 800ab8a:	461c      	mov	r4, r3
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	899b      	ldrh	r3, [r3, #12]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7f9 fec7 	bl	8004928 <lwip_htons>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	f003 0303 	and.w	r3, r3, #3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <tcp_output+0x2de>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e000      	b.n	800abac <tcp_output+0x2e0>
 800abaa:	2300      	movs	r3, #0
 800abac:	4423      	add	r3, r4
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d049      	beq.n	800ac46 <tcp_output+0x37a>
      seg->next = NULL;
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	2200      	movs	r2, #0
 800abb6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d105      	bne.n	800abcc <tcp_output+0x300>
        pcb->unacked = seg;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abc4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800abc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc8:	623b      	str	r3, [r7, #32]
 800abca:	e03f      	b.n	800ac4c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7f9 febd 	bl	8004952 <lwip_htonl>
 800abd8:	4604      	mov	r4, r0
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7f9 feb6 	bl	8004952 <lwip_htonl>
 800abe6:	4603      	mov	r3, r0
 800abe8:	1ae3      	subs	r3, r4, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	da24      	bge.n	800ac38 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3370      	adds	r3, #112	; 0x70
 800abf2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800abf4:	e002      	b.n	800abfc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d011      	beq.n	800ac28 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f7f9 fea0 	bl	8004952 <lwip_htonl>
 800ac12:	4604      	mov	r4, r0
 800ac14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7f9 fe99 	bl	8004952 <lwip_htonl>
 800ac20:	4603      	mov	r3, r0
 800ac22:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dbe6      	blt.n	800abf6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	e009      	b.n	800ac4c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ac38:	6a3b      	ldr	r3, [r7, #32]
 800ac3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac3c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	623b      	str	r3, [r7, #32]
 800ac44:	e002      	b.n	800ac4c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ac46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac48:	f7fc fc3f 	bl	80074ca <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac50:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ac52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d012      	beq.n	800ac7e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ac58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f9 fe77 	bl	8004952 <lwip_htonl>
 800ac64:	4602      	mov	r2, r0
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac6e:	8912      	ldrh	r2, [r2, #8]
 800ac70:	4413      	add	r3, r2
  while (seg != NULL &&
 800ac72:	69ba      	ldr	r2, [r7, #24]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	f4bf aed9 	bcs.w	800aa2c <tcp_output+0x160>
 800ac7a:	e000      	b.n	800ac7e <tcp_output+0x3b2>
      break;
 800ac7c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d108      	bne.n	800ac98 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ac8e:	e004      	b.n	800ac9a <tcp_output+0x3ce>
    goto output_done;
 800ac90:	bf00      	nop
 800ac92:	e002      	b.n	800ac9a <tcp_output+0x3ce>
    goto output_done;
 800ac94:	bf00      	nop
 800ac96:	e000      	b.n	800ac9a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ac98:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	8b5b      	ldrh	r3, [r3, #26]
 800ac9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3728      	adds	r7, #40	; 0x28
 800acae:	46bd      	mov	sp, r7
 800acb0:	bdb0      	pop	{r4, r5, r7, pc}
 800acb2:	bf00      	nop

0800acb4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <tcp_output_segment_busy+0x1c>
 800acc2:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <tcp_output_segment_busy+0x34>)
 800acc4:	f240 529a 	movw	r2, #1434	; 0x59a
 800acc8:	4908      	ldr	r1, [pc, #32]	; (800acec <tcp_output_segment_busy+0x38>)
 800acca:	4809      	ldr	r0, [pc, #36]	; (800acf0 <tcp_output_segment_busy+0x3c>)
 800accc:	f003 fc3e 	bl	800e54c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	7b9b      	ldrb	r3, [r3, #14]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d001      	beq.n	800acde <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800acda:	2301      	movs	r3, #1
 800acdc:	e000      	b.n	800ace0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	08010a3c 	.word	0x08010a3c
 800acec:	08010fd8 	.word	0x08010fd8
 800acf0:	08010a90 	.word	0x08010a90

0800acf4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800acf4:	b5b0      	push	{r4, r5, r7, lr}
 800acf6:	b08c      	sub	sp, #48	; 0x30
 800acf8:	af04      	add	r7, sp, #16
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <tcp_output_segment+0x20>
 800ad06:	4b64      	ldr	r3, [pc, #400]	; (800ae98 <tcp_output_segment+0x1a4>)
 800ad08:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800ad0c:	4963      	ldr	r1, [pc, #396]	; (800ae9c <tcp_output_segment+0x1a8>)
 800ad0e:	4864      	ldr	r0, [pc, #400]	; (800aea0 <tcp_output_segment+0x1ac>)
 800ad10:	f003 fc1c 	bl	800e54c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <tcp_output_segment+0x34>
 800ad1a:	4b5f      	ldr	r3, [pc, #380]	; (800ae98 <tcp_output_segment+0x1a4>)
 800ad1c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800ad20:	4960      	ldr	r1, [pc, #384]	; (800aea4 <tcp_output_segment+0x1b0>)
 800ad22:	485f      	ldr	r0, [pc, #380]	; (800aea0 <tcp_output_segment+0x1ac>)
 800ad24:	f003 fc12 	bl	800e54c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d106      	bne.n	800ad3c <tcp_output_segment+0x48>
 800ad2e:	4b5a      	ldr	r3, [pc, #360]	; (800ae98 <tcp_output_segment+0x1a4>)
 800ad30:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800ad34:	495c      	ldr	r1, [pc, #368]	; (800aea8 <tcp_output_segment+0x1b4>)
 800ad36:	485a      	ldr	r0, [pc, #360]	; (800aea0 <tcp_output_segment+0x1ac>)
 800ad38:	f003 fc08 	bl	800e54c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff ffb9 	bl	800acb4 <tcp_output_segment_busy>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	e0a1      	b.n	800ae90 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	68dc      	ldr	r4, [r3, #12]
 800ad54:	4610      	mov	r0, r2
 800ad56:	f7f9 fdfc 	bl	8004952 <lwip_htonl>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	68dc      	ldr	r4, [r3, #12]
 800ad66:	4610      	mov	r0, r2
 800ad68:	f7f9 fdde 	bl	8004928 <lwip_htons>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad74:	68ba      	ldr	r2, [r7, #8]
 800ad76:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ad78:	441a      	add	r2, r3
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	3314      	adds	r3, #20
 800ad84:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	7a9b      	ldrb	r3, [r3, #10]
 800ad8a:	f003 0301 	and.w	r3, r3, #1
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d015      	beq.n	800adbe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	3304      	adds	r3, #4
 800ad96:	461a      	mov	r2, r3
 800ad98:	6879      	ldr	r1, [r7, #4]
 800ad9a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ad9e:	f7fc fe8b 	bl	8007ab8 <tcp_eff_send_mss_netif>
 800ada2:	4603      	mov	r3, r0
 800ada4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ada6:	8b7b      	ldrh	r3, [r7, #26]
 800ada8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800adac:	4618      	mov	r0, r3
 800adae:	f7f9 fdd0 	bl	8004952 <lwip_htonl>
 800adb2:	4602      	mov	r2, r0
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	601a      	str	r2, [r3, #0]
    opts += 1;
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	3304      	adds	r3, #4
 800adbc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	da02      	bge.n	800adce <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	2200      	movs	r2, #0
 800adcc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10c      	bne.n	800adf0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800add6:	4b35      	ldr	r3, [pc, #212]	; (800aeac <tcp_output_segment+0x1b8>)
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7f9 fdb4 	bl	8004952 <lwip_htonl>
 800adea:	4602      	mov	r2, r0
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	68da      	ldr	r2, [r3, #12]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	8959      	ldrh	r1, [r3, #10]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	8b3a      	ldrh	r2, [r7, #24]
 800ae0a:	1a8a      	subs	r2, r1, r2
 800ae0c:	b292      	uxth	r2, r2
 800ae0e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	8919      	ldrh	r1, [r3, #8]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	8b3a      	ldrh	r2, [r7, #24]
 800ae1c:	1a8a      	subs	r2, r1, r2
 800ae1e:	b292      	uxth	r2, r2
 800ae20:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	68d2      	ldr	r2, [r2, #12]
 800ae2a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	741a      	strb	r2, [r3, #16]
 800ae34:	2200      	movs	r2, #0
 800ae36:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	68da      	ldr	r2, [r3, #12]
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	7a9b      	ldrb	r3, [r3, #10]
 800ae40:	f003 0301 	and.w	r3, r3, #1
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <tcp_output_segment+0x158>
 800ae48:	2318      	movs	r3, #24
 800ae4a:	e000      	b.n	800ae4e <tcp_output_segment+0x15a>
 800ae4c:	2314      	movs	r3, #20
 800ae4e:	4413      	add	r3, r2
 800ae50:	69fa      	ldr	r2, [r7, #28]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d006      	beq.n	800ae64 <tcp_output_segment+0x170>
 800ae56:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <tcp_output_segment+0x1a4>)
 800ae58:	f240 621c 	movw	r2, #1564	; 0x61c
 800ae5c:	4914      	ldr	r1, [pc, #80]	; (800aeb0 <tcp_output_segment+0x1bc>)
 800ae5e:	4810      	ldr	r0, [pc, #64]	; (800aea0 <tcp_output_segment+0x1ac>)
 800ae60:	f003 fb74 	bl	800e54c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6858      	ldr	r0, [r3, #4]
 800ae68:	68b9      	ldr	r1, [r7, #8]
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	1d1c      	adds	r4, r3, #4
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	7add      	ldrb	r5, [r3, #11]
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	7a9b      	ldrb	r3, [r3, #10]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	9202      	str	r2, [sp, #8]
 800ae7a:	2206      	movs	r2, #6
 800ae7c:	9201      	str	r2, [sp, #4]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	462b      	mov	r3, r5
 800ae82:	4622      	mov	r2, r4
 800ae84:	f002 fa34 	bl	800d2f0 <ip4_output_if>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ae8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bdb0      	pop	{r4, r5, r7, pc}
 800ae98:	08010a3c 	.word	0x08010a3c
 800ae9c:	08011000 	.word	0x08011000
 800aea0:	08010a90 	.word	0x08010a90
 800aea4:	08011020 	.word	0x08011020
 800aea8:	08011040 	.word	0x08011040
 800aeac:	2000876c 	.word	0x2000876c
 800aeb0:	08011064 	.word	0x08011064

0800aeb4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800aeb4:	b5b0      	push	{r4, r5, r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d106      	bne.n	800aed0 <tcp_rexmit_rto_prepare+0x1c>
 800aec2:	4b31      	ldr	r3, [pc, #196]	; (800af88 <tcp_rexmit_rto_prepare+0xd4>)
 800aec4:	f240 6263 	movw	r2, #1635	; 0x663
 800aec8:	4930      	ldr	r1, [pc, #192]	; (800af8c <tcp_rexmit_rto_prepare+0xd8>)
 800aeca:	4831      	ldr	r0, [pc, #196]	; (800af90 <tcp_rexmit_rto_prepare+0xdc>)
 800aecc:	f003 fb3e 	bl	800e54c <iprintf>

  if (pcb->unacked == NULL) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d102      	bne.n	800aede <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800aed8:	f06f 0305 	mvn.w	r3, #5
 800aedc:	e050      	b.n	800af80 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	e00b      	b.n	800aefe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f7ff fee4 	bl	800acb4 <tcp_output_segment_busy>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d002      	beq.n	800aef8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800aef2:	f06f 0305 	mvn.w	r3, #5
 800aef6:	e043      	b.n	800af80 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	60fb      	str	r3, [r7, #12]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1ef      	bne.n	800aee6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f7ff fed4 	bl	800acb4 <tcp_output_segment_busy>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d002      	beq.n	800af18 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800af12:	f06f 0305 	mvn.w	r3, #5
 800af16:	e033      	b.n	800af80 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	8b5b      	ldrh	r3, [r3, #26]
 800af32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800af36:	b29a      	uxth	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	4618      	mov	r0, r3
 800af44:	f7f9 fd05 	bl	8004952 <lwip_htonl>
 800af48:	4604      	mov	r4, r0
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	891b      	ldrh	r3, [r3, #8]
 800af4e:	461d      	mov	r5, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	899b      	ldrh	r3, [r3, #12]
 800af56:	b29b      	uxth	r3, r3
 800af58:	4618      	mov	r0, r3
 800af5a:	f7f9 fce5 	bl	8004928 <lwip_htons>
 800af5e:	4603      	mov	r3, r0
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f003 0303 	and.w	r3, r3, #3
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <tcp_rexmit_rto_prepare+0xba>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e000      	b.n	800af70 <tcp_rexmit_rto_prepare+0xbc>
 800af6e:	2300      	movs	r3, #0
 800af70:	442b      	add	r3, r5
 800af72:	18e2      	adds	r2, r4, r3
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bdb0      	pop	{r4, r5, r7, pc}
 800af88:	08010a3c 	.word	0x08010a3c
 800af8c:	08011078 	.word	0x08011078
 800af90:	08010a90 	.word	0x08010a90

0800af94 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d106      	bne.n	800afb0 <tcp_rexmit_rto_commit+0x1c>
 800afa2:	4b0d      	ldr	r3, [pc, #52]	; (800afd8 <tcp_rexmit_rto_commit+0x44>)
 800afa4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800afa8:	490c      	ldr	r1, [pc, #48]	; (800afdc <tcp_rexmit_rto_commit+0x48>)
 800afaa:	480d      	ldr	r0, [pc, #52]	; (800afe0 <tcp_rexmit_rto_commit+0x4c>)
 800afac:	f003 face 	bl	800e54c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afb6:	2bff      	cmp	r3, #255	; 0xff
 800afb8:	d007      	beq.n	800afca <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afc0:	3301      	adds	r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7ff fc7e 	bl	800a8cc <tcp_output>
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	08010a3c 	.word	0x08010a3c
 800afdc:	0801109c 	.word	0x0801109c
 800afe0:	08010a90 	.word	0x08010a90

0800afe4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <tcp_rexmit_rto+0x1c>
 800aff2:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <tcp_rexmit_rto+0x38>)
 800aff4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800aff8:	4909      	ldr	r1, [pc, #36]	; (800b020 <tcp_rexmit_rto+0x3c>)
 800affa:	480a      	ldr	r0, [pc, #40]	; (800b024 <tcp_rexmit_rto+0x40>)
 800affc:	f003 faa6 	bl	800e54c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f7ff ff57 	bl	800aeb4 <tcp_rexmit_rto_prepare>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d102      	bne.n	800b012 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff ffc1 	bl	800af94 <tcp_rexmit_rto_commit>
  }
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	08010a3c 	.word	0x08010a3c
 800b020:	080110c0 	.word	0x080110c0
 800b024:	08010a90 	.word	0x08010a90

0800b028 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b028:	b590      	push	{r4, r7, lr}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d106      	bne.n	800b044 <tcp_rexmit+0x1c>
 800b036:	4b2f      	ldr	r3, [pc, #188]	; (800b0f4 <tcp_rexmit+0xcc>)
 800b038:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b03c:	492e      	ldr	r1, [pc, #184]	; (800b0f8 <tcp_rexmit+0xd0>)
 800b03e:	482f      	ldr	r0, [pc, #188]	; (800b0fc <tcp_rexmit+0xd4>)
 800b040:	f003 fa84 	bl	800e54c <iprintf>

  if (pcb->unacked == NULL) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d102      	bne.n	800b052 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b04c:	f06f 0305 	mvn.w	r3, #5
 800b050:	e04c      	b.n	800b0ec <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b056:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b058:	68b8      	ldr	r0, [r7, #8]
 800b05a:	f7ff fe2b 	bl	800acb4 <tcp_output_segment_busy>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d002      	beq.n	800b06a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b064:	f06f 0305 	mvn.w	r3, #5
 800b068:	e040      	b.n	800b0ec <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	336c      	adds	r3, #108	; 0x6c
 800b076:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b078:	e002      	b.n	800b080 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d011      	beq.n	800b0ac <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	4618      	mov	r0, r3
 800b092:	f7f9 fc5e 	bl	8004952 <lwip_htonl>
 800b096:	4604      	mov	r4, r0
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7f9 fc57 	bl	8004952 <lwip_htonl>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dbe6      	blt.n	800b07a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d103      	bne.n	800b0ca <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0d0:	2bff      	cmp	r3, #255	; 0xff
 800b0d2:	d007      	beq.n	800b0e4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0da:	3301      	adds	r3, #1
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b0ea:	2300      	movs	r3, #0
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3714      	adds	r7, #20
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd90      	pop	{r4, r7, pc}
 800b0f4:	08010a3c 	.word	0x08010a3c
 800b0f8:	080110dc 	.word	0x080110dc
 800b0fc:	08010a90 	.word	0x08010a90

0800b100 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d106      	bne.n	800b11c <tcp_rexmit_fast+0x1c>
 800b10e:	4b2a      	ldr	r3, [pc, #168]	; (800b1b8 <tcp_rexmit_fast+0xb8>)
 800b110:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b114:	4929      	ldr	r1, [pc, #164]	; (800b1bc <tcp_rexmit_fast+0xbc>)
 800b116:	482a      	ldr	r0, [pc, #168]	; (800b1c0 <tcp_rexmit_fast+0xc0>)
 800b118:	f003 fa18 	bl	800e54c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b120:	2b00      	cmp	r3, #0
 800b122:	d044      	beq.n	800b1ae <tcp_rexmit_fast+0xae>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	8b5b      	ldrh	r3, [r3, #26]
 800b128:	f003 0304 	and.w	r3, r3, #4
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d13e      	bne.n	800b1ae <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7ff ff79 	bl	800b028 <tcp_rexmit>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d138      	bne.n	800b1ae <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b148:	4293      	cmp	r3, r2
 800b14a:	bf28      	it	cs
 800b14c:	4613      	movcs	r3, r2
 800b14e:	b29b      	uxth	r3, r3
 800b150:	0fda      	lsrs	r2, r3, #31
 800b152:	4413      	add	r3, r2
 800b154:	105b      	asrs	r3, r3, #1
 800b156:	b29a      	uxth	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b164:	461a      	mov	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b16a:	005b      	lsls	r3, r3, #1
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d206      	bcs.n	800b17e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b174:	005b      	lsls	r3, r3, #1
 800b176:	b29a      	uxth	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b188:	4619      	mov	r1, r3
 800b18a:	0049      	lsls	r1, r1, #1
 800b18c:	440b      	add	r3, r1
 800b18e:	b29b      	uxth	r3, r3
 800b190:	4413      	add	r3, r2
 800b192:	b29a      	uxth	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	8b5b      	ldrh	r3, [r3, #26]
 800b19e:	f043 0304 	orr.w	r3, r3, #4
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b1ae:	bf00      	nop
 800b1b0:	3708      	adds	r7, #8
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	08010a3c 	.word	0x08010a3c
 800b1bc:	080110f4 	.word	0x080110f4
 800b1c0:	08010a90 	.word	0x08010a90

0800b1c4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	607b      	str	r3, [r7, #4]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	817b      	strh	r3, [r7, #10]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b1d6:	897a      	ldrh	r2, [r7, #10]
 800b1d8:	893b      	ldrh	r3, [r7, #8]
 800b1da:	4413      	add	r3, r2
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	3314      	adds	r3, #20
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	2022      	movs	r0, #34	; 0x22
 800b1ea:	f7fa fc17 	bl	8005a1c <pbuf_alloc>
 800b1ee:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d04d      	beq.n	800b292 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b1f6:	897b      	ldrh	r3, [r7, #10]
 800b1f8:	3313      	adds	r3, #19
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	8952      	ldrh	r2, [r2, #10]
 800b1fe:	4293      	cmp	r3, r2
 800b200:	db06      	blt.n	800b210 <tcp_output_alloc_header_common+0x4c>
 800b202:	4b26      	ldr	r3, [pc, #152]	; (800b29c <tcp_output_alloc_header_common+0xd8>)
 800b204:	f240 7223 	movw	r2, #1827	; 0x723
 800b208:	4925      	ldr	r1, [pc, #148]	; (800b2a0 <tcp_output_alloc_header_common+0xdc>)
 800b20a:	4826      	ldr	r0, [pc, #152]	; (800b2a4 <tcp_output_alloc_header_common+0xe0>)
 800b20c:	f003 f99e 	bl	800e54c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b216:	8c3b      	ldrh	r3, [r7, #32]
 800b218:	4618      	mov	r0, r3
 800b21a:	f7f9 fb85 	bl	8004928 <lwip_htons>
 800b21e:	4603      	mov	r3, r0
 800b220:	461a      	mov	r2, r3
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b226:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b228:	4618      	mov	r0, r3
 800b22a:	f7f9 fb7d 	bl	8004928 <lwip_htons>
 800b22e:	4603      	mov	r3, r0
 800b230:	461a      	mov	r2, r3
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f7f9 fb88 	bl	8004952 <lwip_htonl>
 800b242:	4602      	mov	r2, r0
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b248:	897b      	ldrh	r3, [r7, #10]
 800b24a:	089b      	lsrs	r3, r3, #2
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	3305      	adds	r3, #5
 800b250:	b29b      	uxth	r3, r3
 800b252:	031b      	lsls	r3, r3, #12
 800b254:	b29a      	uxth	r2, r3
 800b256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	4313      	orrs	r3, r2
 800b25e:	b29b      	uxth	r3, r3
 800b260:	4618      	mov	r0, r3
 800b262:	f7f9 fb61 	bl	8004928 <lwip_htons>
 800b266:	4603      	mov	r3, r0
 800b268:	461a      	mov	r2, r3
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b26e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b270:	4618      	mov	r0, r3
 800b272:	f7f9 fb59 	bl	8004928 <lwip_htons>
 800b276:	4603      	mov	r3, r0
 800b278:	461a      	mov	r2, r3
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	2200      	movs	r2, #0
 800b282:	741a      	strb	r2, [r3, #16]
 800b284:	2200      	movs	r2, #0
 800b286:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2200      	movs	r2, #0
 800b28c:	749a      	strb	r2, [r3, #18]
 800b28e:	2200      	movs	r2, #0
 800b290:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b292:	697b      	ldr	r3, [r7, #20]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	08010a3c 	.word	0x08010a3c
 800b2a0:	08011114 	.word	0x08011114
 800b2a4:	08010a90 	.word	0x08010a90

0800b2a8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b2a8:	b5b0      	push	{r4, r5, r7, lr}
 800b2aa:	b08a      	sub	sp, #40	; 0x28
 800b2ac:	af04      	add	r7, sp, #16
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	607b      	str	r3, [r7, #4]
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	817b      	strh	r3, [r7, #10]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d106      	bne.n	800b2ce <tcp_output_alloc_header+0x26>
 800b2c0:	4b15      	ldr	r3, [pc, #84]	; (800b318 <tcp_output_alloc_header+0x70>)
 800b2c2:	f240 7242 	movw	r2, #1858	; 0x742
 800b2c6:	4915      	ldr	r1, [pc, #84]	; (800b31c <tcp_output_alloc_header+0x74>)
 800b2c8:	4815      	ldr	r0, [pc, #84]	; (800b320 <tcp_output_alloc_header+0x78>)
 800b2ca:	f003 f93f 	bl	800e54c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	8adb      	ldrh	r3, [r3, #22]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	8b12      	ldrh	r2, [r2, #24]
 800b2da:	68f9      	ldr	r1, [r7, #12]
 800b2dc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b2de:	893d      	ldrh	r5, [r7, #8]
 800b2e0:	897c      	ldrh	r4, [r7, #10]
 800b2e2:	9103      	str	r1, [sp, #12]
 800b2e4:	2110      	movs	r1, #16
 800b2e6:	9102      	str	r1, [sp, #8]
 800b2e8:	9201      	str	r2, [sp, #4]
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	462a      	mov	r2, r5
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	f7ff ff67 	bl	800b1c4 <tcp_output_alloc_header_common>
 800b2f6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d006      	beq.n	800b30c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b306:	441a      	add	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b30c:	697b      	ldr	r3, [r7, #20]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3718      	adds	r7, #24
 800b312:	46bd      	mov	sp, r7
 800b314:	bdb0      	pop	{r4, r5, r7, pc}
 800b316:	bf00      	nop
 800b318:	08010a3c 	.word	0x08010a3c
 800b31c:	08011144 	.word	0x08011144
 800b320:	08010a90 	.word	0x08010a90

0800b324 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b088      	sub	sp, #32
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	4611      	mov	r1, r2
 800b330:	461a      	mov	r2, r3
 800b332:	460b      	mov	r3, r1
 800b334:	71fb      	strb	r3, [r7, #7]
 800b336:	4613      	mov	r3, r2
 800b338:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d106      	bne.n	800b352 <tcp_output_fill_options+0x2e>
 800b344:	4b12      	ldr	r3, [pc, #72]	; (800b390 <tcp_output_fill_options+0x6c>)
 800b346:	f240 7256 	movw	r2, #1878	; 0x756
 800b34a:	4912      	ldr	r1, [pc, #72]	; (800b394 <tcp_output_fill_options+0x70>)
 800b34c:	4812      	ldr	r0, [pc, #72]	; (800b398 <tcp_output_fill_options+0x74>)
 800b34e:	f003 f8fd 	bl	800e54c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	3314      	adds	r3, #20
 800b35c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b35e:	8bfb      	ldrh	r3, [r7, #30]
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	461a      	mov	r2, r3
 800b364:	79fb      	ldrb	r3, [r7, #7]
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	f003 0304 	and.w	r3, r3, #4
 800b36c:	4413      	add	r3, r2
 800b36e:	3314      	adds	r3, #20
 800b370:	69ba      	ldr	r2, [r7, #24]
 800b372:	4413      	add	r3, r2
 800b374:	697a      	ldr	r2, [r7, #20]
 800b376:	429a      	cmp	r2, r3
 800b378:	d006      	beq.n	800b388 <tcp_output_fill_options+0x64>
 800b37a:	4b05      	ldr	r3, [pc, #20]	; (800b390 <tcp_output_fill_options+0x6c>)
 800b37c:	f240 7275 	movw	r2, #1909	; 0x775
 800b380:	4906      	ldr	r1, [pc, #24]	; (800b39c <tcp_output_fill_options+0x78>)
 800b382:	4805      	ldr	r0, [pc, #20]	; (800b398 <tcp_output_fill_options+0x74>)
 800b384:	f003 f8e2 	bl	800e54c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b388:	bf00      	nop
 800b38a:	3720      	adds	r7, #32
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	08010a3c 	.word	0x08010a3c
 800b394:	0801116c 	.word	0x0801116c
 800b398:	08010a90 	.word	0x08010a90
 800b39c:	08011064 	.word	0x08011064

0800b3a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08a      	sub	sp, #40	; 0x28
 800b3a4:	af04      	add	r7, sp, #16
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d106      	bne.n	800b3c2 <tcp_output_control_segment+0x22>
 800b3b4:	4b1c      	ldr	r3, [pc, #112]	; (800b428 <tcp_output_control_segment+0x88>)
 800b3b6:	f240 7287 	movw	r2, #1927	; 0x787
 800b3ba:	491c      	ldr	r1, [pc, #112]	; (800b42c <tcp_output_control_segment+0x8c>)
 800b3bc:	481c      	ldr	r0, [pc, #112]	; (800b430 <tcp_output_control_segment+0x90>)
 800b3be:	f003 f8c5 	bl	800e54c <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	6879      	ldr	r1, [r7, #4]
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f7fe ff40 	bl	800a24c <tcp_route>
 800b3cc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d102      	bne.n	800b3da <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b3d4:	23fc      	movs	r3, #252	; 0xfc
 800b3d6:	75fb      	strb	r3, [r7, #23]
 800b3d8:	e01c      	b.n	800b414 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d006      	beq.n	800b3ee <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	7adb      	ldrb	r3, [r3, #11]
 800b3e4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	7a9b      	ldrb	r3, [r3, #10]
 800b3ea:	757b      	strb	r3, [r7, #21]
 800b3ec:	e003      	b.n	800b3f6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b3ee:	23ff      	movs	r3, #255	; 0xff
 800b3f0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b3f6:	7dba      	ldrb	r2, [r7, #22]
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	9302      	str	r3, [sp, #8]
 800b3fc:	2306      	movs	r3, #6
 800b3fe:	9301      	str	r3, [sp, #4]
 800b400:	7d7b      	ldrb	r3, [r7, #21]
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	4613      	mov	r3, r2
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	6879      	ldr	r1, [r7, #4]
 800b40a:	68b8      	ldr	r0, [r7, #8]
 800b40c:	f001 ff70 	bl	800d2f0 <ip4_output_if>
 800b410:	4603      	mov	r3, r0
 800b412:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b414:	68b8      	ldr	r0, [r7, #8]
 800b416:	f7fa fde5 	bl	8005fe4 <pbuf_free>
  return err;
 800b41a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	08010a3c 	.word	0x08010a3c
 800b42c:	08011194 	.word	0x08011194
 800b430:	08010a90 	.word	0x08010a90

0800b434 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b434:	b590      	push	{r4, r7, lr}
 800b436:	b08b      	sub	sp, #44	; 0x2c
 800b438:	af04      	add	r7, sp, #16
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d106      	bne.n	800b456 <tcp_rst+0x22>
 800b448:	4b1f      	ldr	r3, [pc, #124]	; (800b4c8 <tcp_rst+0x94>)
 800b44a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b44e:	491f      	ldr	r1, [pc, #124]	; (800b4cc <tcp_rst+0x98>)
 800b450:	481f      	ldr	r0, [pc, #124]	; (800b4d0 <tcp_rst+0x9c>)
 800b452:	f003 f87b 	bl	800e54c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <tcp_rst+0x36>
 800b45c:	4b1a      	ldr	r3, [pc, #104]	; (800b4c8 <tcp_rst+0x94>)
 800b45e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b462:	491c      	ldr	r1, [pc, #112]	; (800b4d4 <tcp_rst+0xa0>)
 800b464:	481a      	ldr	r0, [pc, #104]	; (800b4d0 <tcp_rst+0x9c>)
 800b466:	f003 f871 	bl	800e54c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b46a:	2300      	movs	r3, #0
 800b46c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b46e:	f246 0308 	movw	r3, #24584	; 0x6008
 800b472:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b474:	7dfb      	ldrb	r3, [r7, #23]
 800b476:	b29c      	uxth	r4, r3
 800b478:	68b8      	ldr	r0, [r7, #8]
 800b47a:	f7f9 fa6a 	bl	8004952 <lwip_htonl>
 800b47e:	4602      	mov	r2, r0
 800b480:	8abb      	ldrh	r3, [r7, #20]
 800b482:	9303      	str	r3, [sp, #12]
 800b484:	2314      	movs	r3, #20
 800b486:	9302      	str	r3, [sp, #8]
 800b488:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b48a:	9301      	str	r3, [sp, #4]
 800b48c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	4613      	mov	r3, r2
 800b492:	2200      	movs	r2, #0
 800b494:	4621      	mov	r1, r4
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fe94 	bl	800b1c4 <tcp_output_alloc_header_common>
 800b49c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b49e:	693b      	ldr	r3, [r7, #16]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00c      	beq.n	800b4be <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	6939      	ldr	r1, [r7, #16]
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7ff ff3a 	bl	800b324 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	6939      	ldr	r1, [r7, #16]
 800b4b6:	68f8      	ldr	r0, [r7, #12]
 800b4b8:	f7ff ff72 	bl	800b3a0 <tcp_output_control_segment>
 800b4bc:	e000      	b.n	800b4c0 <tcp_rst+0x8c>
    return;
 800b4be:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b4c0:	371c      	adds	r7, #28
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd90      	pop	{r4, r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	08010a3c 	.word	0x08010a3c
 800b4cc:	080111c0 	.word	0x080111c0
 800b4d0:	08010a90 	.word	0x08010a90
 800b4d4:	080111dc 	.word	0x080111dc

0800b4d8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b4d8:	b590      	push	{r4, r7, lr}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <tcp_send_empty_ack+0x24>
 800b4ee:	4b28      	ldr	r3, [pc, #160]	; (800b590 <tcp_send_empty_ack+0xb8>)
 800b4f0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b4f4:	4927      	ldr	r1, [pc, #156]	; (800b594 <tcp_send_empty_ack+0xbc>)
 800b4f6:	4828      	ldr	r0, [pc, #160]	; (800b598 <tcp_send_empty_ack+0xc0>)
 800b4f8:	f003 f828 	bl	800e54c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
 800b4fe:	009b      	lsls	r3, r3, #2
 800b500:	b2db      	uxtb	r3, r3
 800b502:	f003 0304 	and.w	r3, r3, #4
 800b506:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b508:	7d7b      	ldrb	r3, [r7, #21]
 800b50a:	b29c      	uxth	r4, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b510:	4618      	mov	r0, r3
 800b512:	f7f9 fa1e 	bl	8004952 <lwip_htonl>
 800b516:	4603      	mov	r3, r0
 800b518:	2200      	movs	r2, #0
 800b51a:	4621      	mov	r1, r4
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff fec3 	bl	800b2a8 <tcp_output_alloc_header>
 800b522:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d109      	bne.n	800b53e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	8b5b      	ldrh	r3, [r3, #26]
 800b52e:	f043 0303 	orr.w	r3, r3, #3
 800b532:	b29a      	uxth	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b538:	f06f 0301 	mvn.w	r3, #1
 800b53c:	e023      	b.n	800b586 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b53e:	7dbb      	ldrb	r3, [r7, #22]
 800b540:	7dfa      	ldrb	r2, [r7, #23]
 800b542:	6939      	ldr	r1, [r7, #16]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff feed 	bl	800b324 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3304      	adds	r3, #4
 800b550:	6939      	ldr	r1, [r7, #16]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff ff24 	bl	800b3a0 <tcp_output_control_segment>
 800b558:	4603      	mov	r3, r0
 800b55a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b55c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d007      	beq.n	800b574 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	8b5b      	ldrh	r3, [r3, #26]
 800b568:	f043 0303 	orr.w	r3, r3, #3
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	835a      	strh	r2, [r3, #26]
 800b572:	e006      	b.n	800b582 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	8b5b      	ldrh	r3, [r3, #26]
 800b578:	f023 0303 	bic.w	r3, r3, #3
 800b57c:	b29a      	uxth	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b586:	4618      	mov	r0, r3
 800b588:	371c      	adds	r7, #28
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd90      	pop	{r4, r7, pc}
 800b58e:	bf00      	nop
 800b590:	08010a3c 	.word	0x08010a3c
 800b594:	080111f8 	.word	0x080111f8
 800b598:	08010a90 	.word	0x08010a90

0800b59c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b59c:	b590      	push	{r4, r7, lr}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d106      	bne.n	800b5bc <tcp_keepalive+0x20>
 800b5ae:	4b18      	ldr	r3, [pc, #96]	; (800b610 <tcp_keepalive+0x74>)
 800b5b0:	f640 0224 	movw	r2, #2084	; 0x824
 800b5b4:	4917      	ldr	r1, [pc, #92]	; (800b614 <tcp_keepalive+0x78>)
 800b5b6:	4818      	ldr	r0, [pc, #96]	; (800b618 <tcp_keepalive+0x7c>)
 800b5b8:	f002 ffc8 	bl	800e54c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b5bc:	7dfb      	ldrb	r3, [r7, #23]
 800b5be:	b29c      	uxth	r4, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7f9 f9c3 	bl	8004952 <lwip_htonl>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7ff fe68 	bl	800b2a8 <tcp_output_alloc_header>
 800b5d8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d102      	bne.n	800b5e6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b5e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5e4:	e010      	b.n	800b608 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	6939      	ldr	r1, [r7, #16]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff fe99 	bl	800b324 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	6939      	ldr	r1, [r7, #16]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff fed0 	bl	800b3a0 <tcp_output_control_segment>
 800b600:	4603      	mov	r3, r0
 800b602:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	371c      	adds	r7, #28
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd90      	pop	{r4, r7, pc}
 800b610:	08010a3c 	.word	0x08010a3c
 800b614:	08011218 	.word	0x08011218
 800b618:	08010a90 	.word	0x08010a90

0800b61c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b08b      	sub	sp, #44	; 0x2c
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b624:	2300      	movs	r3, #0
 800b626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d106      	bne.n	800b63e <tcp_zero_window_probe+0x22>
 800b630:	4b4c      	ldr	r3, [pc, #304]	; (800b764 <tcp_zero_window_probe+0x148>)
 800b632:	f640 024f 	movw	r2, #2127	; 0x84f
 800b636:	494c      	ldr	r1, [pc, #304]	; (800b768 <tcp_zero_window_probe+0x14c>)
 800b638:	484c      	ldr	r0, [pc, #304]	; (800b76c <tcp_zero_window_probe+0x150>)
 800b63a:	f002 ff87 	bl	800e54c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b642:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b644:	6a3b      	ldr	r3, [r7, #32]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d101      	bne.n	800b64e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	e086      	b.n	800b75c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b654:	2bff      	cmp	r3, #255	; 0xff
 800b656:	d007      	beq.n	800b668 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b65e:	3301      	adds	r3, #1
 800b660:	b2da      	uxtb	r2, r3
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b668:	6a3b      	ldr	r3, [r7, #32]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	899b      	ldrh	r3, [r3, #12]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	4618      	mov	r0, r3
 800b672:	f7f9 f959 	bl	8004928 <lwip_htons>
 800b676:	4603      	mov	r3, r0
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	f003 0301 	and.w	r3, r3, #1
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d005      	beq.n	800b68e <tcp_zero_window_probe+0x72>
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	891b      	ldrh	r3, [r3, #8]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d101      	bne.n	800b68e <tcp_zero_window_probe+0x72>
 800b68a:	2301      	movs	r3, #1
 800b68c:	e000      	b.n	800b690 <tcp_zero_window_probe+0x74>
 800b68e:	2300      	movs	r3, #0
 800b690:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b692:	7ffb      	ldrb	r3, [r7, #31]
 800b694:	2b00      	cmp	r3, #0
 800b696:	bf0c      	ite	eq
 800b698:	2301      	moveq	r3, #1
 800b69a:	2300      	movne	r3, #0
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6a4:	b299      	uxth	r1, r3
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	8bba      	ldrh	r2, [r7, #28]
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f7ff fdfa 	bl	800b2a8 <tcp_output_alloc_header>
 800b6b4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d102      	bne.n	800b6c2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b6c0:	e04c      	b.n	800b75c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b6c8:	7ffb      	ldrb	r3, [r7, #31]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d011      	beq.n	800b6f2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	899b      	ldrh	r3, [r3, #12]
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	b21b      	sxth	r3, r3
 800b6d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b6da:	b21c      	sxth	r4, r3
 800b6dc:	2011      	movs	r0, #17
 800b6de:	f7f9 f923 	bl	8004928 <lwip_htons>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	b21b      	sxth	r3, r3
 800b6e6:	4323      	orrs	r3, r4
 800b6e8:	b21b      	sxth	r3, r3
 800b6ea:	b29a      	uxth	r2, r3
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	819a      	strh	r2, [r3, #12]
 800b6f0:	e010      	b.n	800b714 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	3314      	adds	r3, #20
 800b6f8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	6858      	ldr	r0, [r3, #4]
 800b6fe:	6a3b      	ldr	r3, [r7, #32]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	891a      	ldrh	r2, [r3, #8]
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	891b      	ldrh	r3, [r3, #8]
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	2201      	movs	r2, #1
 800b70e:	6939      	ldr	r1, [r7, #16]
 800b710:	f7fa fe52 	bl	80063b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	68db      	ldr	r3, [r3, #12]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7f9 f919 	bl	8004952 <lwip_htonl>
 800b720:	4603      	mov	r3, r0
 800b722:	3301      	adds	r3, #1
 800b724:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	da02      	bge.n	800b738 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b73c:	2200      	movs	r2, #0
 800b73e:	69b9      	ldr	r1, [r7, #24]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7ff fdef 	bl	800b324 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	3304      	adds	r3, #4
 800b74c:	69b9      	ldr	r1, [r7, #24]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f7ff fe26 	bl	800b3a0 <tcp_output_control_segment>
 800b754:	4603      	mov	r3, r0
 800b756:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b758:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	372c      	adds	r7, #44	; 0x2c
 800b760:	46bd      	mov	sp, r7
 800b762:	bd90      	pop	{r4, r7, pc}
 800b764:	08010a3c 	.word	0x08010a3c
 800b768:	08011234 	.word	0x08011234
 800b76c:	08010a90 	.word	0x08010a90

0800b770 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b082      	sub	sp, #8
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b778:	f7fa ff0c 	bl	8006594 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b77c:	4b0a      	ldr	r3, [pc, #40]	; (800b7a8 <tcpip_tcp_timer+0x38>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d103      	bne.n	800b78c <tcpip_tcp_timer+0x1c>
 800b784:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <tcpip_tcp_timer+0x3c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d005      	beq.n	800b798 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b78c:	2200      	movs	r2, #0
 800b78e:	4908      	ldr	r1, [pc, #32]	; (800b7b0 <tcpip_tcp_timer+0x40>)
 800b790:	20fa      	movs	r0, #250	; 0xfa
 800b792:	f000 f8f3 	bl	800b97c <sys_timeout>
 800b796:	e003      	b.n	800b7a0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b798:	4b06      	ldr	r3, [pc, #24]	; (800b7b4 <tcpip_tcp_timer+0x44>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	601a      	str	r2, [r3, #0]
  }
}
 800b79e:	bf00      	nop
 800b7a0:	bf00      	nop
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20008778 	.word	0x20008778
 800b7ac:	2000877c 	.word	0x2000877c
 800b7b0:	0800b771 	.word	0x0800b771
 800b7b4:	200087c4 	.word	0x200087c4

0800b7b8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b7bc:	4b0a      	ldr	r3, [pc, #40]	; (800b7e8 <tcp_timer_needed+0x30>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d10f      	bne.n	800b7e4 <tcp_timer_needed+0x2c>
 800b7c4:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <tcp_timer_needed+0x34>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d103      	bne.n	800b7d4 <tcp_timer_needed+0x1c>
 800b7cc:	4b08      	ldr	r3, [pc, #32]	; (800b7f0 <tcp_timer_needed+0x38>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d007      	beq.n	800b7e4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b7d4:	4b04      	ldr	r3, [pc, #16]	; (800b7e8 <tcp_timer_needed+0x30>)
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b7da:	2200      	movs	r2, #0
 800b7dc:	4905      	ldr	r1, [pc, #20]	; (800b7f4 <tcp_timer_needed+0x3c>)
 800b7de:	20fa      	movs	r0, #250	; 0xfa
 800b7e0:	f000 f8cc 	bl	800b97c <sys_timeout>
  }
}
 800b7e4:	bf00      	nop
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	200087c4 	.word	0x200087c4
 800b7ec:	20008778 	.word	0x20008778
 800b7f0:	2000877c 	.word	0x2000877c
 800b7f4:	0800b771 	.word	0x0800b771

0800b7f8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b804:	2006      	movs	r0, #6
 800b806:	f7f9 fd07 	bl	8005218 <memp_malloc>
 800b80a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d109      	bne.n	800b826 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d151      	bne.n	800b8bc <sys_timeout_abs+0xc4>
 800b818:	4b2a      	ldr	r3, [pc, #168]	; (800b8c4 <sys_timeout_abs+0xcc>)
 800b81a:	22be      	movs	r2, #190	; 0xbe
 800b81c:	492a      	ldr	r1, [pc, #168]	; (800b8c8 <sys_timeout_abs+0xd0>)
 800b81e:	482b      	ldr	r0, [pc, #172]	; (800b8cc <sys_timeout_abs+0xd4>)
 800b820:	f002 fe94 	bl	800e54c <iprintf>
    return;
 800b824:	e04a      	b.n	800b8bc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b83e:	4b24      	ldr	r3, [pc, #144]	; (800b8d0 <sys_timeout_abs+0xd8>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d103      	bne.n	800b84e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b846:	4a22      	ldr	r2, [pc, #136]	; (800b8d0 <sys_timeout_abs+0xd8>)
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	6013      	str	r3, [r2, #0]
    return;
 800b84c:	e037      	b.n	800b8be <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	4b1f      	ldr	r3, [pc, #124]	; (800b8d0 <sys_timeout_abs+0xd8>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	0fdb      	lsrs	r3, r3, #31
 800b85c:	f003 0301 	and.w	r3, r3, #1
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b00      	cmp	r3, #0
 800b864:	d007      	beq.n	800b876 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b866:	4b1a      	ldr	r3, [pc, #104]	; (800b8d0 <sys_timeout_abs+0xd8>)
 800b868:	681a      	ldr	r2, [r3, #0]
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b86e:	4a18      	ldr	r2, [pc, #96]	; (800b8d0 <sys_timeout_abs+0xd8>)
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	e023      	b.n	800b8be <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b876:	4b16      	ldr	r3, [pc, #88]	; (800b8d0 <sys_timeout_abs+0xd8>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e01a      	b.n	800b8b4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00b      	beq.n	800b89e <sys_timeout_abs+0xa6>
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	0fdb      	lsrs	r3, r3, #31
 800b894:	f003 0301 	and.w	r3, r3, #1
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	601a      	str	r2, [r3, #0]
        break;
 800b8ac:	e007      	b.n	800b8be <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1e1      	bne.n	800b87e <sys_timeout_abs+0x86>
 800b8ba:	e000      	b.n	800b8be <sys_timeout_abs+0xc6>
    return;
 800b8bc:	bf00      	nop
      }
    }
  }
}
 800b8be:	3718      	adds	r7, #24
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	08011258 	.word	0x08011258
 800b8c8:	0801128c 	.word	0x0801128c
 800b8cc:	080112cc 	.word	0x080112cc
 800b8d0:	200087bc 	.word	0x200087bc

0800b8d4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	4798      	blx	r3

  now = sys_now();
 800b8e6:	f7f8 fe07 	bl	80044f8 <sys_now>
 800b8ea:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	4b0f      	ldr	r3, [pc, #60]	; (800b930 <lwip_cyclic_timer+0x5c>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	1ad3      	subs	r3, r2, r3
 800b8fe:	0fdb      	lsrs	r3, r3, #31
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b00      	cmp	r3, #0
 800b908:	d009      	beq.n	800b91e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	4413      	add	r3, r2
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	4907      	ldr	r1, [pc, #28]	; (800b934 <lwip_cyclic_timer+0x60>)
 800b916:	4618      	mov	r0, r3
 800b918:	f7ff ff6e 	bl	800b7f8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b91c:	e004      	b.n	800b928 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	4904      	ldr	r1, [pc, #16]	; (800b934 <lwip_cyclic_timer+0x60>)
 800b922:	68f8      	ldr	r0, [r7, #12]
 800b924:	f7ff ff68 	bl	800b7f8 <sys_timeout_abs>
}
 800b928:	bf00      	nop
 800b92a:	3718      	adds	r7, #24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	200087c0 	.word	0x200087c0
 800b934:	0800b8d5 	.word	0x0800b8d5

0800b938 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b93e:	2301      	movs	r3, #1
 800b940:	607b      	str	r3, [r7, #4]
 800b942:	e00e      	b.n	800b962 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b944:	4a0b      	ldr	r2, [pc, #44]	; (800b974 <sys_timeouts_init+0x3c>)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	00db      	lsls	r3, r3, #3
 800b950:	4a08      	ldr	r2, [pc, #32]	; (800b974 <sys_timeouts_init+0x3c>)
 800b952:	4413      	add	r3, r2
 800b954:	461a      	mov	r2, r3
 800b956:	4908      	ldr	r1, [pc, #32]	; (800b978 <sys_timeouts_init+0x40>)
 800b958:	f000 f810 	bl	800b97c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	3301      	adds	r3, #1
 800b960:	607b      	str	r3, [r7, #4]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b02      	cmp	r3, #2
 800b966:	d9ed      	bls.n	800b944 <sys_timeouts_init+0xc>
  }
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	3708      	adds	r7, #8
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	08011e44 	.word	0x08011e44
 800b978:	0800b8d5 	.word	0x0800b8d5

0800b97c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b98e:	d306      	bcc.n	800b99e <sys_timeout+0x22>
 800b990:	4b0a      	ldr	r3, [pc, #40]	; (800b9bc <sys_timeout+0x40>)
 800b992:	f240 1229 	movw	r2, #297	; 0x129
 800b996:	490a      	ldr	r1, [pc, #40]	; (800b9c0 <sys_timeout+0x44>)
 800b998:	480a      	ldr	r0, [pc, #40]	; (800b9c4 <sys_timeout+0x48>)
 800b99a:	f002 fdd7 	bl	800e54c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b99e:	f7f8 fdab 	bl	80044f8 <sys_now>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	68b9      	ldr	r1, [r7, #8]
 800b9ae:	6978      	ldr	r0, [r7, #20]
 800b9b0:	f7ff ff22 	bl	800b7f8 <sys_timeout_abs>
#endif
}
 800b9b4:	bf00      	nop
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	08011258 	.word	0x08011258
 800b9c0:	080112f4 	.word	0x080112f4
 800b9c4:	080112cc 	.word	0x080112cc

0800b9c8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b9ce:	f7f8 fd93 	bl	80044f8 <sys_now>
 800b9d2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b9d4:	4b1a      	ldr	r3, [pc, #104]	; (800ba40 <sys_check_timeouts+0x78>)
 800b9d6:	781b      	ldrb	r3, [r3, #0]
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <sys_check_timeouts+0x1a>
 800b9de:	f7f9 ffc7 	bl	8005970 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b9e2:	4b18      	ldr	r3, [pc, #96]	; (800ba44 <sys_check_timeouts+0x7c>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d022      	beq.n	800ba34 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	0fdb      	lsrs	r3, r3, #31
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d11a      	bne.n	800ba38 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a0f      	ldr	r2, [pc, #60]	; (800ba44 <sys_check_timeouts+0x7c>)
 800ba08:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	4a0b      	ldr	r2, [pc, #44]	; (800ba48 <sys_check_timeouts+0x80>)
 800ba1c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ba1e:	68b9      	ldr	r1, [r7, #8]
 800ba20:	2006      	movs	r0, #6
 800ba22:	f7f9 fc69 	bl	80052f8 <memp_free>
    if (handler != NULL) {
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d0d3      	beq.n	800b9d4 <sys_check_timeouts+0xc>
      handler(arg);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6838      	ldr	r0, [r7, #0]
 800ba30:	4798      	blx	r3
  do {
 800ba32:	e7cf      	b.n	800b9d4 <sys_check_timeouts+0xc>
      return;
 800ba34:	bf00      	nop
 800ba36:	e000      	b.n	800ba3a <sys_check_timeouts+0x72>
      return;
 800ba38:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}
 800ba40:	20008769 	.word	0x20008769
 800ba44:	200087bc 	.word	0x200087bc
 800ba48:	200087c0 	.word	0x200087c0

0800ba4c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ba50:	f002 fc7c 	bl	800e34c <rand>
 800ba54:	4603      	mov	r3, r0
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	4b01      	ldr	r3, [pc, #4]	; (800ba6c <udp_init+0x20>)
 800ba66:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ba68:	bf00      	nop
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	20000028 	.word	0x20000028

0800ba70 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d105      	bne.n	800ba90 <udp_input_local_match+0x20>
 800ba84:	4b27      	ldr	r3, [pc, #156]	; (800bb24 <udp_input_local_match+0xb4>)
 800ba86:	2287      	movs	r2, #135	; 0x87
 800ba88:	4927      	ldr	r1, [pc, #156]	; (800bb28 <udp_input_local_match+0xb8>)
 800ba8a:	4828      	ldr	r0, [pc, #160]	; (800bb2c <udp_input_local_match+0xbc>)
 800ba8c:	f002 fd5e 	bl	800e54c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d105      	bne.n	800baa2 <udp_input_local_match+0x32>
 800ba96:	4b23      	ldr	r3, [pc, #140]	; (800bb24 <udp_input_local_match+0xb4>)
 800ba98:	2288      	movs	r2, #136	; 0x88
 800ba9a:	4925      	ldr	r1, [pc, #148]	; (800bb30 <udp_input_local_match+0xc0>)
 800ba9c:	4823      	ldr	r0, [pc, #140]	; (800bb2c <udp_input_local_match+0xbc>)
 800ba9e:	f002 fd55 	bl	800e54c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	7a1b      	ldrb	r3, [r3, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00b      	beq.n	800bac2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	7a1a      	ldrb	r2, [r3, #8]
 800baae:	4b21      	ldr	r3, [pc, #132]	; (800bb34 <udp_input_local_match+0xc4>)
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bab6:	3301      	adds	r3, #1
 800bab8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800baba:	429a      	cmp	r2, r3
 800babc:	d001      	beq.n	800bac2 <udp_input_local_match+0x52>
    return 0;
 800babe:	2300      	movs	r3, #0
 800bac0:	e02b      	b.n	800bb1a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bac2:	79fb      	ldrb	r3, [r7, #7]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d018      	beq.n	800bafa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d013      	beq.n	800baf6 <udp_input_local_match+0x86>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00f      	beq.n	800baf6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bad6:	4b17      	ldr	r3, [pc, #92]	; (800bb34 <udp_input_local_match+0xc4>)
 800bad8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bada:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bade:	d00a      	beq.n	800baf6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	4b13      	ldr	r3, [pc, #76]	; (800bb34 <udp_input_local_match+0xc4>)
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	405a      	eors	r2, r3
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	3308      	adds	r3, #8
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d110      	bne.n	800bb18 <udp_input_local_match+0xa8>
          return 1;
 800baf6:	2301      	movs	r3, #1
 800baf8:	e00f      	b.n	800bb1a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d009      	beq.n	800bb14 <udp_input_local_match+0xa4>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d005      	beq.n	800bb14 <udp_input_local_match+0xa4>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	4b09      	ldr	r3, [pc, #36]	; (800bb34 <udp_input_local_match+0xc4>)
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	429a      	cmp	r2, r3
 800bb12:	d101      	bne.n	800bb18 <udp_input_local_match+0xa8>
        return 1;
 800bb14:	2301      	movs	r3, #1
 800bb16:	e000      	b.n	800bb1a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	08011340 	.word	0x08011340
 800bb28:	08011370 	.word	0x08011370
 800bb2c:	08011394 	.word	0x08011394
 800bb30:	080113bc 	.word	0x080113bc
 800bb34:	200051fc 	.word	0x200051fc

0800bb38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bb38:	b590      	push	{r4, r7, lr}
 800bb3a:	b08d      	sub	sp, #52	; 0x34
 800bb3c:	af02      	add	r7, sp, #8
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d105      	bne.n	800bb58 <udp_input+0x20>
 800bb4c:	4b7c      	ldr	r3, [pc, #496]	; (800bd40 <udp_input+0x208>)
 800bb4e:	22cf      	movs	r2, #207	; 0xcf
 800bb50:	497c      	ldr	r1, [pc, #496]	; (800bd44 <udp_input+0x20c>)
 800bb52:	487d      	ldr	r0, [pc, #500]	; (800bd48 <udp_input+0x210>)
 800bb54:	f002 fcfa 	bl	800e54c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d105      	bne.n	800bb6a <udp_input+0x32>
 800bb5e:	4b78      	ldr	r3, [pc, #480]	; (800bd40 <udp_input+0x208>)
 800bb60:	22d0      	movs	r2, #208	; 0xd0
 800bb62:	497a      	ldr	r1, [pc, #488]	; (800bd4c <udp_input+0x214>)
 800bb64:	4878      	ldr	r0, [pc, #480]	; (800bd48 <udp_input+0x210>)
 800bb66:	f002 fcf1 	bl	800e54c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	895b      	ldrh	r3, [r3, #10]
 800bb6e:	2b07      	cmp	r3, #7
 800bb70:	d803      	bhi.n	800bb7a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fa fa36 	bl	8005fe4 <pbuf_free>
    goto end;
 800bb78:	e0de      	b.n	800bd38 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bb80:	4b73      	ldr	r3, [pc, #460]	; (800bd50 <udp_input+0x218>)
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	4a72      	ldr	r2, [pc, #456]	; (800bd50 <udp_input+0x218>)
 800bb86:	6812      	ldr	r2, [r2, #0]
 800bb88:	4611      	mov	r1, r2
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f001 fc88 	bl	800d4a0 <ip4_addr_isbroadcast_u32>
 800bb90:	4603      	mov	r3, r0
 800bb92:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	881b      	ldrh	r3, [r3, #0]
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f8 fec4 	bl	8004928 <lwip_htons>
 800bba0:	4603      	mov	r3, r0
 800bba2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	885b      	ldrh	r3, [r3, #2]
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7f8 febc 	bl	8004928 <lwip_htons>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbc0:	4b64      	ldr	r3, [pc, #400]	; (800bd54 <udp_input+0x21c>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	627b      	str	r3, [r7, #36]	; 0x24
 800bbc6:	e054      	b.n	800bc72 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbca:	8a5b      	ldrh	r3, [r3, #18]
 800bbcc:	89fa      	ldrh	r2, [r7, #14]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d14a      	bne.n	800bc68 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bbd2:	7cfb      	ldrb	r3, [r7, #19]
 800bbd4:	461a      	mov	r2, r3
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbda:	f7ff ff49 	bl	800ba70 <udp_input_local_match>
 800bbde:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d041      	beq.n	800bc68 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	7c1b      	ldrb	r3, [r3, #16]
 800bbe8:	f003 0304 	and.w	r3, r3, #4
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d11d      	bne.n	800bc2c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d102      	bne.n	800bbfc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	61fb      	str	r3, [r7, #28]
 800bbfa:	e017      	b.n	800bc2c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bbfc:	7cfb      	ldrb	r3, [r7, #19]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d014      	beq.n	800bc2c <udp_input+0xf4>
 800bc02:	4b53      	ldr	r3, [pc, #332]	; (800bd50 <udp_input+0x218>)
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0a:	d10f      	bne.n	800bc2c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	3304      	adds	r3, #4
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d008      	beq.n	800bc2c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	3304      	adds	r3, #4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d101      	bne.n	800bc2c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2e:	8a9b      	ldrh	r3, [r3, #20]
 800bc30:	8a3a      	ldrh	r2, [r7, #16]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d118      	bne.n	800bc68 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d005      	beq.n	800bc4a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	4b43      	ldr	r3, [pc, #268]	; (800bd50 <udp_input+0x218>)
 800bc44:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d10e      	bne.n	800bc68 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bc4a:	6a3b      	ldr	r3, [r7, #32]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d014      	beq.n	800bc7a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bc58:	4b3e      	ldr	r3, [pc, #248]	; (800bd54 <udp_input+0x21c>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bc60:	4a3c      	ldr	r2, [pc, #240]	; (800bd54 <udp_input+0x21c>)
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bc66:	e008      	b.n	800bc7a <udp_input+0x142>
      }
    }

    prev = pcb;
 800bc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	627b      	str	r3, [r7, #36]	; 0x24
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1a7      	bne.n	800bbc8 <udp_input+0x90>
 800bc78:	e000      	b.n	800bc7c <udp_input+0x144>
        break;
 800bc7a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <udp_input+0x14e>
    pcb = uncon_pcb;
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <udp_input+0x15a>
    for_us = 1;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	76fb      	strb	r3, [r7, #27]
 800bc90:	e00a      	b.n	800bca8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	3304      	adds	r3, #4
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	4b2d      	ldr	r3, [pc, #180]	; (800bd50 <udp_input+0x218>)
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	bf0c      	ite	eq
 800bca0:	2301      	moveq	r3, #1
 800bca2:	2300      	movne	r3, #0
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bca8:	7efb      	ldrb	r3, [r7, #27]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d041      	beq.n	800bd32 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bcae:	2108      	movs	r1, #8
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7fa f911 	bl	8005ed8 <pbuf_remove_header>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00a      	beq.n	800bcd2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bcbc:	4b20      	ldr	r3, [pc, #128]	; (800bd40 <udp_input+0x208>)
 800bcbe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bcc2:	4925      	ldr	r1, [pc, #148]	; (800bd58 <udp_input+0x220>)
 800bcc4:	4820      	ldr	r0, [pc, #128]	; (800bd48 <udp_input+0x210>)
 800bcc6:	f002 fc41 	bl	800e54c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f7fa f98a 	bl	8005fe4 <pbuf_free>
      goto end;
 800bcd0:	e032      	b.n	800bd38 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d012      	beq.n	800bcfe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcda:	699b      	ldr	r3, [r3, #24]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00a      	beq.n	800bcf6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	699c      	ldr	r4, [r3, #24]
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce6:	69d8      	ldr	r0, [r3, #28]
 800bce8:	8a3b      	ldrh	r3, [r7, #16]
 800bcea:	9300      	str	r3, [sp, #0]
 800bcec:	4b1b      	ldr	r3, [pc, #108]	; (800bd5c <udp_input+0x224>)
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcf2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800bcf4:	e021      	b.n	800bd3a <udp_input+0x202>
        pbuf_free(p);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7fa f974 	bl	8005fe4 <pbuf_free>
        goto end;
 800bcfc:	e01c      	b.n	800bd38 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800bcfe:	7cfb      	ldrb	r3, [r7, #19]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d112      	bne.n	800bd2a <udp_input+0x1f2>
 800bd04:	4b12      	ldr	r3, [pc, #72]	; (800bd50 <udp_input+0x218>)
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd0c:	2be0      	cmp	r3, #224	; 0xe0
 800bd0e:	d00c      	beq.n	800bd2a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bd10:	4b0f      	ldr	r3, [pc, #60]	; (800bd50 <udp_input+0x218>)
 800bd12:	899b      	ldrh	r3, [r3, #12]
 800bd14:	3308      	adds	r3, #8
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	b21b      	sxth	r3, r3
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7fa f94e 	bl	8005fbe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bd22:	2103      	movs	r1, #3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f001 f89b 	bl	800ce60 <icmp_dest_unreach>
      pbuf_free(p);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7fa f95a 	bl	8005fe4 <pbuf_free>
  return;
 800bd30:	e003      	b.n	800bd3a <udp_input+0x202>
    pbuf_free(p);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7fa f956 	bl	8005fe4 <pbuf_free>
  return;
 800bd38:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bd3a:	372c      	adds	r7, #44	; 0x2c
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd90      	pop	{r4, r7, pc}
 800bd40:	08011340 	.word	0x08011340
 800bd44:	080113e4 	.word	0x080113e4
 800bd48:	08011394 	.word	0x08011394
 800bd4c:	080113fc 	.word	0x080113fc
 800bd50:	200051fc 	.word	0x200051fc
 800bd54:	200087c8 	.word	0x200087c8
 800bd58:	08011418 	.word	0x08011418
 800bd5c:	2000520c 	.word	0x2000520c

0800bd60 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d01e      	beq.n	800bdae <udp_netif_ip_addr_changed+0x4e>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d01a      	beq.n	800bdae <udp_netif_ip_addr_changed+0x4e>
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d017      	beq.n	800bdae <udp_netif_ip_addr_changed+0x4e>
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d013      	beq.n	800bdae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bd86:	4b0d      	ldr	r3, [pc, #52]	; (800bdbc <udp_netif_ip_addr_changed+0x5c>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]
 800bd8c:	e00c      	b.n	800bda8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681a      	ldr	r2, [r3, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d103      	bne.n	800bda2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	68db      	ldr	r3, [r3, #12]
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d1ef      	bne.n	800bd8e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bdae:	bf00      	nop
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr
 800bdba:	bf00      	nop
 800bdbc:	200087c8 	.word	0x200087c8

0800bdc0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b082      	sub	sp, #8
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bdc8:	4915      	ldr	r1, [pc, #84]	; (800be20 <etharp_free_entry+0x60>)
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	4613      	mov	r3, r2
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	4413      	add	r3, r2
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	440b      	add	r3, r1
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d013      	beq.n	800be04 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bddc:	4910      	ldr	r1, [pc, #64]	; (800be20 <etharp_free_entry+0x60>)
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	4613      	mov	r3, r2
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	4413      	add	r3, r2
 800bde6:	00db      	lsls	r3, r3, #3
 800bde8:	440b      	add	r3, r1
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fa f8f9 	bl	8005fe4 <pbuf_free>
    arp_table[i].q = NULL;
 800bdf2:	490b      	ldr	r1, [pc, #44]	; (800be20 <etharp_free_entry+0x60>)
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	005b      	lsls	r3, r3, #1
 800bdfa:	4413      	add	r3, r2
 800bdfc:	00db      	lsls	r3, r3, #3
 800bdfe:	440b      	add	r3, r1
 800be00:	2200      	movs	r2, #0
 800be02:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800be04:	4906      	ldr	r1, [pc, #24]	; (800be20 <etharp_free_entry+0x60>)
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	4613      	mov	r3, r2
 800be0a:	005b      	lsls	r3, r3, #1
 800be0c:	4413      	add	r3, r2
 800be0e:	00db      	lsls	r3, r3, #3
 800be10:	440b      	add	r3, r1
 800be12:	3314      	adds	r3, #20
 800be14:	2200      	movs	r2, #0
 800be16:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800be18:	bf00      	nop
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	200087cc 	.word	0x200087cc

0800be24 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be2a:	2300      	movs	r3, #0
 800be2c:	607b      	str	r3, [r7, #4]
 800be2e:	e096      	b.n	800bf5e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800be30:	494f      	ldr	r1, [pc, #316]	; (800bf70 <etharp_tmr+0x14c>)
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	4613      	mov	r3, r2
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	4413      	add	r3, r2
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	440b      	add	r3, r1
 800be3e:	3314      	adds	r3, #20
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 8086 	beq.w	800bf58 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800be4c:	4948      	ldr	r1, [pc, #288]	; (800bf70 <etharp_tmr+0x14c>)
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	4613      	mov	r3, r2
 800be52:	005b      	lsls	r3, r3, #1
 800be54:	4413      	add	r3, r2
 800be56:	00db      	lsls	r3, r3, #3
 800be58:	440b      	add	r3, r1
 800be5a:	3312      	adds	r3, #18
 800be5c:	881b      	ldrh	r3, [r3, #0]
 800be5e:	3301      	adds	r3, #1
 800be60:	b298      	uxth	r0, r3
 800be62:	4943      	ldr	r1, [pc, #268]	; (800bf70 <etharp_tmr+0x14c>)
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	4613      	mov	r3, r2
 800be68:	005b      	lsls	r3, r3, #1
 800be6a:	4413      	add	r3, r2
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	440b      	add	r3, r1
 800be70:	3312      	adds	r3, #18
 800be72:	4602      	mov	r2, r0
 800be74:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800be76:	493e      	ldr	r1, [pc, #248]	; (800bf70 <etharp_tmr+0x14c>)
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	4413      	add	r3, r2
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	440b      	add	r3, r1
 800be84:	3312      	adds	r3, #18
 800be86:	881b      	ldrh	r3, [r3, #0]
 800be88:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800be8c:	d215      	bcs.n	800beba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800be8e:	4938      	ldr	r1, [pc, #224]	; (800bf70 <etharp_tmr+0x14c>)
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	4613      	mov	r3, r2
 800be94:	005b      	lsls	r3, r3, #1
 800be96:	4413      	add	r3, r2
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	440b      	add	r3, r1
 800be9c:	3314      	adds	r3, #20
 800be9e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d10e      	bne.n	800bec2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bea4:	4932      	ldr	r1, [pc, #200]	; (800bf70 <etharp_tmr+0x14c>)
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	4613      	mov	r3, r2
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	4413      	add	r3, r2
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	440b      	add	r3, r1
 800beb2:	3312      	adds	r3, #18
 800beb4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800beb6:	2b04      	cmp	r3, #4
 800beb8:	d903      	bls.n	800bec2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff ff80 	bl	800bdc0 <etharp_free_entry>
 800bec0:	e04a      	b.n	800bf58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bec2:	492b      	ldr	r1, [pc, #172]	; (800bf70 <etharp_tmr+0x14c>)
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	4613      	mov	r3, r2
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	4413      	add	r3, r2
 800becc:	00db      	lsls	r3, r3, #3
 800bece:	440b      	add	r3, r1
 800bed0:	3314      	adds	r3, #20
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d10a      	bne.n	800beee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bed8:	4925      	ldr	r1, [pc, #148]	; (800bf70 <etharp_tmr+0x14c>)
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	4613      	mov	r3, r2
 800bede:	005b      	lsls	r3, r3, #1
 800bee0:	4413      	add	r3, r2
 800bee2:	00db      	lsls	r3, r3, #3
 800bee4:	440b      	add	r3, r1
 800bee6:	3314      	adds	r3, #20
 800bee8:	2204      	movs	r2, #4
 800beea:	701a      	strb	r2, [r3, #0]
 800beec:	e034      	b.n	800bf58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800beee:	4920      	ldr	r1, [pc, #128]	; (800bf70 <etharp_tmr+0x14c>)
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	4613      	mov	r3, r2
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	4413      	add	r3, r2
 800bef8:	00db      	lsls	r3, r3, #3
 800befa:	440b      	add	r3, r1
 800befc:	3314      	adds	r3, #20
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d10a      	bne.n	800bf1a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bf04:	491a      	ldr	r1, [pc, #104]	; (800bf70 <etharp_tmr+0x14c>)
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	005b      	lsls	r3, r3, #1
 800bf0c:	4413      	add	r3, r2
 800bf0e:	00db      	lsls	r3, r3, #3
 800bf10:	440b      	add	r3, r1
 800bf12:	3314      	adds	r3, #20
 800bf14:	2202      	movs	r2, #2
 800bf16:	701a      	strb	r2, [r3, #0]
 800bf18:	e01e      	b.n	800bf58 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bf1a:	4915      	ldr	r1, [pc, #84]	; (800bf70 <etharp_tmr+0x14c>)
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	4613      	mov	r3, r2
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	4413      	add	r3, r2
 800bf24:	00db      	lsls	r3, r3, #3
 800bf26:	440b      	add	r3, r1
 800bf28:	3314      	adds	r3, #20
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d113      	bne.n	800bf58 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bf30:	490f      	ldr	r1, [pc, #60]	; (800bf70 <etharp_tmr+0x14c>)
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	4613      	mov	r3, r2
 800bf36:	005b      	lsls	r3, r3, #1
 800bf38:	4413      	add	r3, r2
 800bf3a:	00db      	lsls	r3, r3, #3
 800bf3c:	440b      	add	r3, r1
 800bf3e:	3308      	adds	r3, #8
 800bf40:	6818      	ldr	r0, [r3, #0]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	4613      	mov	r3, r2
 800bf46:	005b      	lsls	r3, r3, #1
 800bf48:	4413      	add	r3, r2
 800bf4a:	00db      	lsls	r3, r3, #3
 800bf4c:	4a08      	ldr	r2, [pc, #32]	; (800bf70 <etharp_tmr+0x14c>)
 800bf4e:	4413      	add	r3, r2
 800bf50:	3304      	adds	r3, #4
 800bf52:	4619      	mov	r1, r3
 800bf54:	f000 fe6e 	bl	800cc34 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	607b      	str	r3, [r7, #4]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b09      	cmp	r3, #9
 800bf62:	f77f af65 	ble.w	800be30 <etharp_tmr+0xc>
      }
    }
  }
}
 800bf66:	bf00      	nop
 800bf68:	bf00      	nop
 800bf6a:	3708      	adds	r7, #8
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}
 800bf70:	200087cc 	.word	0x200087cc

0800bf74 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b08a      	sub	sp, #40	; 0x28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bf82:	230a      	movs	r3, #10
 800bf84:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bf86:	230a      	movs	r3, #10
 800bf88:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bf8a:	230a      	movs	r3, #10
 800bf8c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bf92:	230a      	movs	r3, #10
 800bf94:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	83bb      	strh	r3, [r7, #28]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	837b      	strh	r3, [r7, #26]
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	843b      	strh	r3, [r7, #32]
 800bfa6:	e0ae      	b.n	800c106 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bfa8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfac:	49a6      	ldr	r1, [pc, #664]	; (800c248 <etharp_find_entry+0x2d4>)
 800bfae:	4613      	mov	r3, r2
 800bfb0:	005b      	lsls	r3, r3, #1
 800bfb2:	4413      	add	r3, r2
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	440b      	add	r3, r1
 800bfb8:	3314      	adds	r3, #20
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bfbe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800bfc2:	2b0a      	cmp	r3, #10
 800bfc4:	d105      	bne.n	800bfd2 <etharp_find_entry+0x5e>
 800bfc6:	7dfb      	ldrb	r3, [r7, #23]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d102      	bne.n	800bfd2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bfcc:	8c3b      	ldrh	r3, [r7, #32]
 800bfce:	847b      	strh	r3, [r7, #34]	; 0x22
 800bfd0:	e095      	b.n	800c0fe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bfd2:	7dfb      	ldrb	r3, [r7, #23]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f000 8092 	beq.w	800c0fe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bfda:	7dfb      	ldrb	r3, [r7, #23]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d009      	beq.n	800bff4 <etharp_find_entry+0x80>
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d806      	bhi.n	800bff4 <etharp_find_entry+0x80>
 800bfe6:	4b99      	ldr	r3, [pc, #612]	; (800c24c <etharp_find_entry+0x2d8>)
 800bfe8:	f240 1223 	movw	r2, #291	; 0x123
 800bfec:	4998      	ldr	r1, [pc, #608]	; (800c250 <etharp_find_entry+0x2dc>)
 800bfee:	4899      	ldr	r0, [pc, #612]	; (800c254 <etharp_find_entry+0x2e0>)
 800bff0:	f002 faac 	bl	800e54c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d020      	beq.n	800c03c <etharp_find_entry+0xc8>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6819      	ldr	r1, [r3, #0]
 800bffe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c002:	4891      	ldr	r0, [pc, #580]	; (800c248 <etharp_find_entry+0x2d4>)
 800c004:	4613      	mov	r3, r2
 800c006:	005b      	lsls	r3, r3, #1
 800c008:	4413      	add	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	4403      	add	r3, r0
 800c00e:	3304      	adds	r3, #4
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	4299      	cmp	r1, r3
 800c014:	d112      	bne.n	800c03c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00c      	beq.n	800c036 <etharp_find_entry+0xc2>
 800c01c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c020:	4989      	ldr	r1, [pc, #548]	; (800c248 <etharp_find_entry+0x2d4>)
 800c022:	4613      	mov	r3, r2
 800c024:	005b      	lsls	r3, r3, #1
 800c026:	4413      	add	r3, r2
 800c028:	00db      	lsls	r3, r3, #3
 800c02a:	440b      	add	r3, r1
 800c02c:	3308      	adds	r3, #8
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	429a      	cmp	r2, r3
 800c034:	d102      	bne.n	800c03c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c036:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c03a:	e100      	b.n	800c23e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c03c:	7dfb      	ldrb	r3, [r7, #23]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d140      	bne.n	800c0c4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c042:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c046:	4980      	ldr	r1, [pc, #512]	; (800c248 <etharp_find_entry+0x2d4>)
 800c048:	4613      	mov	r3, r2
 800c04a:	005b      	lsls	r3, r3, #1
 800c04c:	4413      	add	r3, r2
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	440b      	add	r3, r1
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d01a      	beq.n	800c08e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c058:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c05c:	497a      	ldr	r1, [pc, #488]	; (800c248 <etharp_find_entry+0x2d4>)
 800c05e:	4613      	mov	r3, r2
 800c060:	005b      	lsls	r3, r3, #1
 800c062:	4413      	add	r3, r2
 800c064:	00db      	lsls	r3, r3, #3
 800c066:	440b      	add	r3, r1
 800c068:	3312      	adds	r3, #18
 800c06a:	881b      	ldrh	r3, [r3, #0]
 800c06c:	8bba      	ldrh	r2, [r7, #28]
 800c06e:	429a      	cmp	r2, r3
 800c070:	d845      	bhi.n	800c0fe <etharp_find_entry+0x18a>
            old_queue = i;
 800c072:	8c3b      	ldrh	r3, [r7, #32]
 800c074:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c076:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c07a:	4973      	ldr	r1, [pc, #460]	; (800c248 <etharp_find_entry+0x2d4>)
 800c07c:	4613      	mov	r3, r2
 800c07e:	005b      	lsls	r3, r3, #1
 800c080:	4413      	add	r3, r2
 800c082:	00db      	lsls	r3, r3, #3
 800c084:	440b      	add	r3, r1
 800c086:	3312      	adds	r3, #18
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	83bb      	strh	r3, [r7, #28]
 800c08c:	e037      	b.n	800c0fe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c08e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c092:	496d      	ldr	r1, [pc, #436]	; (800c248 <etharp_find_entry+0x2d4>)
 800c094:	4613      	mov	r3, r2
 800c096:	005b      	lsls	r3, r3, #1
 800c098:	4413      	add	r3, r2
 800c09a:	00db      	lsls	r3, r3, #3
 800c09c:	440b      	add	r3, r1
 800c09e:	3312      	adds	r3, #18
 800c0a0:	881b      	ldrh	r3, [r3, #0]
 800c0a2:	8b7a      	ldrh	r2, [r7, #26]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d82a      	bhi.n	800c0fe <etharp_find_entry+0x18a>
            old_pending = i;
 800c0a8:	8c3b      	ldrh	r3, [r7, #32]
 800c0aa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c0ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0b0:	4965      	ldr	r1, [pc, #404]	; (800c248 <etharp_find_entry+0x2d4>)
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	4413      	add	r3, r2
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	440b      	add	r3, r1
 800c0bc:	3312      	adds	r3, #18
 800c0be:	881b      	ldrh	r3, [r3, #0]
 800c0c0:	837b      	strh	r3, [r7, #26]
 800c0c2:	e01c      	b.n	800c0fe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c0c4:	7dfb      	ldrb	r3, [r7, #23]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d919      	bls.n	800c0fe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c0ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0ce:	495e      	ldr	r1, [pc, #376]	; (800c248 <etharp_find_entry+0x2d4>)
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	005b      	lsls	r3, r3, #1
 800c0d4:	4413      	add	r3, r2
 800c0d6:	00db      	lsls	r3, r3, #3
 800c0d8:	440b      	add	r3, r1
 800c0da:	3312      	adds	r3, #18
 800c0dc:	881b      	ldrh	r3, [r3, #0]
 800c0de:	8b3a      	ldrh	r2, [r7, #24]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d80c      	bhi.n	800c0fe <etharp_find_entry+0x18a>
            old_stable = i;
 800c0e4:	8c3b      	ldrh	r3, [r7, #32]
 800c0e6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c0e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c0ec:	4956      	ldr	r1, [pc, #344]	; (800c248 <etharp_find_entry+0x2d4>)
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	005b      	lsls	r3, r3, #1
 800c0f2:	4413      	add	r3, r2
 800c0f4:	00db      	lsls	r3, r3, #3
 800c0f6:	440b      	add	r3, r1
 800c0f8:	3312      	adds	r3, #18
 800c0fa:	881b      	ldrh	r3, [r3, #0]
 800c0fc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c0fe:	8c3b      	ldrh	r3, [r7, #32]
 800c100:	3301      	adds	r3, #1
 800c102:	b29b      	uxth	r3, r3
 800c104:	843b      	strh	r3, [r7, #32]
 800c106:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c10a:	2b09      	cmp	r3, #9
 800c10c:	f77f af4c 	ble.w	800bfa8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c110:	7afb      	ldrb	r3, [r7, #11]
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d108      	bne.n	800c12c <etharp_find_entry+0x1b8>
 800c11a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c11e:	2b0a      	cmp	r3, #10
 800c120:	d107      	bne.n	800c132 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c122:	7afb      	ldrb	r3, [r7, #11]
 800c124:	f003 0301 	and.w	r3, r3, #1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d102      	bne.n	800c132 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c12c:	f04f 33ff 	mov.w	r3, #4294967295
 800c130:	e085      	b.n	800c23e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c132:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c136:	2b09      	cmp	r3, #9
 800c138:	dc02      	bgt.n	800c140 <etharp_find_entry+0x1cc>
    i = empty;
 800c13a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c13c:	843b      	strh	r3, [r7, #32]
 800c13e:	e039      	b.n	800c1b4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c140:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c144:	2b09      	cmp	r3, #9
 800c146:	dc14      	bgt.n	800c172 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c14a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c14c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c150:	493d      	ldr	r1, [pc, #244]	; (800c248 <etharp_find_entry+0x2d4>)
 800c152:	4613      	mov	r3, r2
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	4413      	add	r3, r2
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	440b      	add	r3, r1
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d018      	beq.n	800c194 <etharp_find_entry+0x220>
 800c162:	4b3a      	ldr	r3, [pc, #232]	; (800c24c <etharp_find_entry+0x2d8>)
 800c164:	f240 126d 	movw	r2, #365	; 0x16d
 800c168:	493b      	ldr	r1, [pc, #236]	; (800c258 <etharp_find_entry+0x2e4>)
 800c16a:	483a      	ldr	r0, [pc, #232]	; (800c254 <etharp_find_entry+0x2e0>)
 800c16c:	f002 f9ee 	bl	800e54c <iprintf>
 800c170:	e010      	b.n	800c194 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c172:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c176:	2b09      	cmp	r3, #9
 800c178:	dc02      	bgt.n	800c180 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c17a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c17c:	843b      	strh	r3, [r7, #32]
 800c17e:	e009      	b.n	800c194 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c180:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c184:	2b09      	cmp	r3, #9
 800c186:	dc02      	bgt.n	800c18e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c188:	8bfb      	ldrh	r3, [r7, #30]
 800c18a:	843b      	strh	r3, [r7, #32]
 800c18c:	e002      	b.n	800c194 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c18e:	f04f 33ff 	mov.w	r3, #4294967295
 800c192:	e054      	b.n	800c23e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c194:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c198:	2b09      	cmp	r3, #9
 800c19a:	dd06      	ble.n	800c1aa <etharp_find_entry+0x236>
 800c19c:	4b2b      	ldr	r3, [pc, #172]	; (800c24c <etharp_find_entry+0x2d8>)
 800c19e:	f240 127f 	movw	r2, #383	; 0x17f
 800c1a2:	492e      	ldr	r1, [pc, #184]	; (800c25c <etharp_find_entry+0x2e8>)
 800c1a4:	482b      	ldr	r0, [pc, #172]	; (800c254 <etharp_find_entry+0x2e0>)
 800c1a6:	f002 f9d1 	bl	800e54c <iprintf>
    etharp_free_entry(i);
 800c1aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff fe06 	bl	800bdc0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c1b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c1b8:	2b09      	cmp	r3, #9
 800c1ba:	dd06      	ble.n	800c1ca <etharp_find_entry+0x256>
 800c1bc:	4b23      	ldr	r3, [pc, #140]	; (800c24c <etharp_find_entry+0x2d8>)
 800c1be:	f240 1283 	movw	r2, #387	; 0x183
 800c1c2:	4926      	ldr	r1, [pc, #152]	; (800c25c <etharp_find_entry+0x2e8>)
 800c1c4:	4823      	ldr	r0, [pc, #140]	; (800c254 <etharp_find_entry+0x2e0>)
 800c1c6:	f002 f9c1 	bl	800e54c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c1ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1ce:	491e      	ldr	r1, [pc, #120]	; (800c248 <etharp_find_entry+0x2d4>)
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	4413      	add	r3, r2
 800c1d6:	00db      	lsls	r3, r3, #3
 800c1d8:	440b      	add	r3, r1
 800c1da:	3314      	adds	r3, #20
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d006      	beq.n	800c1f0 <etharp_find_entry+0x27c>
 800c1e2:	4b1a      	ldr	r3, [pc, #104]	; (800c24c <etharp_find_entry+0x2d8>)
 800c1e4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c1e8:	491d      	ldr	r1, [pc, #116]	; (800c260 <etharp_find_entry+0x2ec>)
 800c1ea:	481a      	ldr	r0, [pc, #104]	; (800c254 <etharp_find_entry+0x2e0>)
 800c1ec:	f002 f9ae 	bl	800e54c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00b      	beq.n	800c20e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c1f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6819      	ldr	r1, [r3, #0]
 800c1fe:	4812      	ldr	r0, [pc, #72]	; (800c248 <etharp_find_entry+0x2d4>)
 800c200:	4613      	mov	r3, r2
 800c202:	005b      	lsls	r3, r3, #1
 800c204:	4413      	add	r3, r2
 800c206:	00db      	lsls	r3, r3, #3
 800c208:	4403      	add	r3, r0
 800c20a:	3304      	adds	r3, #4
 800c20c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c20e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c212:	490d      	ldr	r1, [pc, #52]	; (800c248 <etharp_find_entry+0x2d4>)
 800c214:	4613      	mov	r3, r2
 800c216:	005b      	lsls	r3, r3, #1
 800c218:	4413      	add	r3, r2
 800c21a:	00db      	lsls	r3, r3, #3
 800c21c:	440b      	add	r3, r1
 800c21e:	3312      	adds	r3, #18
 800c220:	2200      	movs	r2, #0
 800c222:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c224:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c228:	4907      	ldr	r1, [pc, #28]	; (800c248 <etharp_find_entry+0x2d4>)
 800c22a:	4613      	mov	r3, r2
 800c22c:	005b      	lsls	r3, r3, #1
 800c22e:	4413      	add	r3, r2
 800c230:	00db      	lsls	r3, r3, #3
 800c232:	440b      	add	r3, r1
 800c234:	3308      	adds	r3, #8
 800c236:	687a      	ldr	r2, [r7, #4]
 800c238:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c23a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3728      	adds	r7, #40	; 0x28
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	200087cc 	.word	0x200087cc
 800c24c:	080116a4 	.word	0x080116a4
 800c250:	080116dc 	.word	0x080116dc
 800c254:	0801171c 	.word	0x0801171c
 800c258:	08011744 	.word	0x08011744
 800c25c:	0801175c 	.word	0x0801175c
 800c260:	08011770 	.word	0x08011770

0800c264 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af02      	add	r7, sp, #8
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	607a      	str	r2, [r7, #4]
 800c270:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c278:	2b06      	cmp	r3, #6
 800c27a:	d006      	beq.n	800c28a <etharp_update_arp_entry+0x26>
 800c27c:	4b48      	ldr	r3, [pc, #288]	; (800c3a0 <etharp_update_arp_entry+0x13c>)
 800c27e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c282:	4948      	ldr	r1, [pc, #288]	; (800c3a4 <etharp_update_arp_entry+0x140>)
 800c284:	4848      	ldr	r0, [pc, #288]	; (800c3a8 <etharp_update_arp_entry+0x144>)
 800c286:	f002 f961 	bl	800e54c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d012      	beq.n	800c2b6 <etharp_update_arp_entry+0x52>
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00e      	beq.n	800c2b6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	68f9      	ldr	r1, [r7, #12]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f001 f8fe 	bl	800d4a0 <ip4_addr_isbroadcast_u32>
 800c2a4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d105      	bne.n	800c2b6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c2b2:	2be0      	cmp	r3, #224	; 0xe0
 800c2b4:	d102      	bne.n	800c2bc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c2b6:	f06f 030f 	mvn.w	r3, #15
 800c2ba:	e06c      	b.n	800c396 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	68b8      	ldr	r0, [r7, #8]
 800c2c4:	f7ff fe56 	bl	800bf74 <etharp_find_entry>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c2cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	da02      	bge.n	800c2da <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c2d4:	8afb      	ldrh	r3, [r7, #22]
 800c2d6:	b25b      	sxtb	r3, r3
 800c2d8:	e05d      	b.n	800c396 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c2da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2de:	4933      	ldr	r1, [pc, #204]	; (800c3ac <etharp_update_arp_entry+0x148>)
 800c2e0:	4613      	mov	r3, r2
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	4413      	add	r3, r2
 800c2e6:	00db      	lsls	r3, r3, #3
 800c2e8:	440b      	add	r3, r1
 800c2ea:	3314      	adds	r3, #20
 800c2ec:	2202      	movs	r2, #2
 800c2ee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c2f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c2f4:	492d      	ldr	r1, [pc, #180]	; (800c3ac <etharp_update_arp_entry+0x148>)
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	4413      	add	r3, r2
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	440b      	add	r3, r1
 800c300:	3308      	adds	r3, #8
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c306:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c30a:	4613      	mov	r3, r2
 800c30c:	005b      	lsls	r3, r3, #1
 800c30e:	4413      	add	r3, r2
 800c310:	00db      	lsls	r3, r3, #3
 800c312:	3308      	adds	r3, #8
 800c314:	4a25      	ldr	r2, [pc, #148]	; (800c3ac <etharp_update_arp_entry+0x148>)
 800c316:	4413      	add	r3, r2
 800c318:	3304      	adds	r3, #4
 800c31a:	2206      	movs	r2, #6
 800c31c:	6879      	ldr	r1, [r7, #4]
 800c31e:	4618      	mov	r0, r3
 800c320:	f002 f9ef 	bl	800e702 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c324:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c328:	4920      	ldr	r1, [pc, #128]	; (800c3ac <etharp_update_arp_entry+0x148>)
 800c32a:	4613      	mov	r3, r2
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	4413      	add	r3, r2
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	440b      	add	r3, r1
 800c334:	3312      	adds	r3, #18
 800c336:	2200      	movs	r2, #0
 800c338:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c33a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c33e:	491b      	ldr	r1, [pc, #108]	; (800c3ac <etharp_update_arp_entry+0x148>)
 800c340:	4613      	mov	r3, r2
 800c342:	005b      	lsls	r3, r3, #1
 800c344:	4413      	add	r3, r2
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	440b      	add	r3, r1
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d021      	beq.n	800c394 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c350:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c354:	4915      	ldr	r1, [pc, #84]	; (800c3ac <etharp_update_arp_entry+0x148>)
 800c356:	4613      	mov	r3, r2
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	4413      	add	r3, r2
 800c35c:	00db      	lsls	r3, r3, #3
 800c35e:	440b      	add	r3, r1
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c364:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c368:	4910      	ldr	r1, [pc, #64]	; (800c3ac <etharp_update_arp_entry+0x148>)
 800c36a:	4613      	mov	r3, r2
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	4413      	add	r3, r2
 800c370:	00db      	lsls	r3, r3, #3
 800c372:	440b      	add	r3, r1
 800c374:	2200      	movs	r2, #0
 800c376:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c37e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6939      	ldr	r1, [r7, #16]
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f001 ff97 	bl	800e2bc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c38e:	6938      	ldr	r0, [r7, #16]
 800c390:	f7f9 fe28 	bl	8005fe4 <pbuf_free>
  }
  return ERR_OK;
 800c394:	2300      	movs	r3, #0
}
 800c396:	4618      	mov	r0, r3
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	080116a4 	.word	0x080116a4
 800c3a4:	0801179c 	.word	0x0801179c
 800c3a8:	0801171c 	.word	0x0801171c
 800c3ac:	200087cc 	.word	0x200087cc

0800c3b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	60fb      	str	r3, [r7, #12]
 800c3bc:	e01e      	b.n	800c3fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c3be:	4913      	ldr	r1, [pc, #76]	; (800c40c <etharp_cleanup_netif+0x5c>)
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	4613      	mov	r3, r2
 800c3c4:	005b      	lsls	r3, r3, #1
 800c3c6:	4413      	add	r3, r2
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	440b      	add	r3, r1
 800c3cc:	3314      	adds	r3, #20
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c3d2:	7afb      	ldrb	r3, [r7, #11]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00e      	beq.n	800c3f6 <etharp_cleanup_netif+0x46>
 800c3d8:	490c      	ldr	r1, [pc, #48]	; (800c40c <etharp_cleanup_netif+0x5c>)
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	4613      	mov	r3, r2
 800c3de:	005b      	lsls	r3, r3, #1
 800c3e0:	4413      	add	r3, r2
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	440b      	add	r3, r1
 800c3e6:	3308      	adds	r3, #8
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d102      	bne.n	800c3f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f7ff fce5 	bl	800bdc0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	60fb      	str	r3, [r7, #12]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b09      	cmp	r3, #9
 800c400:	dddd      	ble.n	800c3be <etharp_cleanup_netif+0xe>
    }
  }
}
 800c402:	bf00      	nop
 800c404:	bf00      	nop
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	200087cc 	.word	0x200087cc

0800c410 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c410:	b5b0      	push	{r4, r5, r7, lr}
 800c412:	b08a      	sub	sp, #40	; 0x28
 800c414:	af04      	add	r7, sp, #16
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d107      	bne.n	800c430 <etharp_input+0x20>
 800c420:	4b3d      	ldr	r3, [pc, #244]	; (800c518 <etharp_input+0x108>)
 800c422:	f240 228a 	movw	r2, #650	; 0x28a
 800c426:	493d      	ldr	r1, [pc, #244]	; (800c51c <etharp_input+0x10c>)
 800c428:	483d      	ldr	r0, [pc, #244]	; (800c520 <etharp_input+0x110>)
 800c42a:	f002 f88f 	bl	800e54c <iprintf>
 800c42e:	e06f      	b.n	800c510 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	685b      	ldr	r3, [r3, #4]
 800c434:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	881b      	ldrh	r3, [r3, #0]
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c440:	d10c      	bne.n	800c45c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c446:	2b06      	cmp	r3, #6
 800c448:	d108      	bne.n	800c45c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c44e:	2b04      	cmp	r3, #4
 800c450:	d104      	bne.n	800c45c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	885b      	ldrh	r3, [r3, #2]
 800c456:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c458:	2b08      	cmp	r3, #8
 800c45a:	d003      	beq.n	800c464 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7f9 fdc1 	bl	8005fe4 <pbuf_free>
    return;
 800c462:	e055      	b.n	800c510 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	330e      	adds	r3, #14
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	3318      	adds	r3, #24
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	3304      	adds	r3, #4
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d102      	bne.n	800c484 <etharp_input+0x74>
    for_us = 0;
 800c47e:	2300      	movs	r3, #0
 800c480:	75fb      	strb	r3, [r7, #23]
 800c482:	e009      	b.n	800c498 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c484:	68ba      	ldr	r2, [r7, #8]
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	3304      	adds	r3, #4
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	bf0c      	ite	eq
 800c490:	2301      	moveq	r3, #1
 800c492:	2300      	movne	r3, #0
 800c494:	b2db      	uxtb	r3, r3
 800c496:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	f103 0208 	add.w	r2, r3, #8
 800c49e:	7dfb      	ldrb	r3, [r7, #23]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d001      	beq.n	800c4a8 <etharp_input+0x98>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e000      	b.n	800c4aa <etharp_input+0x9a>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	f107 010c 	add.w	r1, r7, #12
 800c4ae:	6838      	ldr	r0, [r7, #0]
 800c4b0:	f7ff fed8 	bl	800c264 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c4b4:	693b      	ldr	r3, [r7, #16]
 800c4b6:	88db      	ldrh	r3, [r3, #6]
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4be:	d003      	beq.n	800c4c8 <etharp_input+0xb8>
 800c4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4c4:	d01e      	beq.n	800c504 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c4c6:	e020      	b.n	800c50a <etharp_input+0xfa>
      if (for_us) {
 800c4c8:	7dfb      	ldrb	r3, [r7, #23]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d01c      	beq.n	800c508 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c4e8:	2102      	movs	r1, #2
 800c4ea:	9103      	str	r1, [sp, #12]
 800c4ec:	f107 010c 	add.w	r1, r7, #12
 800c4f0:	9102      	str	r1, [sp, #8]
 800c4f2:	9201      	str	r2, [sp, #4]
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	462b      	mov	r3, r5
 800c4f8:	4622      	mov	r2, r4
 800c4fa:	4601      	mov	r1, r0
 800c4fc:	6838      	ldr	r0, [r7, #0]
 800c4fe:	f000 faeb 	bl	800cad8 <etharp_raw>
      break;
 800c502:	e001      	b.n	800c508 <etharp_input+0xf8>
      break;
 800c504:	bf00      	nop
 800c506:	e000      	b.n	800c50a <etharp_input+0xfa>
      break;
 800c508:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7f9 fd6a 	bl	8005fe4 <pbuf_free>
}
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bdb0      	pop	{r4, r5, r7, pc}
 800c516:	bf00      	nop
 800c518:	080116a4 	.word	0x080116a4
 800c51c:	080117f4 	.word	0x080117f4
 800c520:	0801171c 	.word	0x0801171c

0800c524 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af02      	add	r7, sp, #8
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	4613      	mov	r3, r2
 800c530:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c532:	79fa      	ldrb	r2, [r7, #7]
 800c534:	4944      	ldr	r1, [pc, #272]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c536:	4613      	mov	r3, r2
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	4413      	add	r3, r2
 800c53c:	00db      	lsls	r3, r3, #3
 800c53e:	440b      	add	r3, r1
 800c540:	3314      	adds	r3, #20
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b01      	cmp	r3, #1
 800c546:	d806      	bhi.n	800c556 <etharp_output_to_arp_index+0x32>
 800c548:	4b40      	ldr	r3, [pc, #256]	; (800c64c <etharp_output_to_arp_index+0x128>)
 800c54a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c54e:	4940      	ldr	r1, [pc, #256]	; (800c650 <etharp_output_to_arp_index+0x12c>)
 800c550:	4840      	ldr	r0, [pc, #256]	; (800c654 <etharp_output_to_arp_index+0x130>)
 800c552:	f001 fffb 	bl	800e54c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c556:	79fa      	ldrb	r2, [r7, #7]
 800c558:	493b      	ldr	r1, [pc, #236]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c55a:	4613      	mov	r3, r2
 800c55c:	005b      	lsls	r3, r3, #1
 800c55e:	4413      	add	r3, r2
 800c560:	00db      	lsls	r3, r3, #3
 800c562:	440b      	add	r3, r1
 800c564:	3314      	adds	r3, #20
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	2b02      	cmp	r3, #2
 800c56a:	d153      	bne.n	800c614 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c56c:	79fa      	ldrb	r2, [r7, #7]
 800c56e:	4936      	ldr	r1, [pc, #216]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c570:	4613      	mov	r3, r2
 800c572:	005b      	lsls	r3, r3, #1
 800c574:	4413      	add	r3, r2
 800c576:	00db      	lsls	r3, r3, #3
 800c578:	440b      	add	r3, r1
 800c57a:	3312      	adds	r3, #18
 800c57c:	881b      	ldrh	r3, [r3, #0]
 800c57e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c582:	d919      	bls.n	800c5b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c584:	79fa      	ldrb	r2, [r7, #7]
 800c586:	4613      	mov	r3, r2
 800c588:	005b      	lsls	r3, r3, #1
 800c58a:	4413      	add	r3, r2
 800c58c:	00db      	lsls	r3, r3, #3
 800c58e:	4a2e      	ldr	r2, [pc, #184]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c590:	4413      	add	r3, r2
 800c592:	3304      	adds	r3, #4
 800c594:	4619      	mov	r1, r3
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f000 fb4c 	bl	800cc34 <etharp_request>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d138      	bne.n	800c614 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c5a2:	79fa      	ldrb	r2, [r7, #7]
 800c5a4:	4928      	ldr	r1, [pc, #160]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	005b      	lsls	r3, r3, #1
 800c5aa:	4413      	add	r3, r2
 800c5ac:	00db      	lsls	r3, r3, #3
 800c5ae:	440b      	add	r3, r1
 800c5b0:	3314      	adds	r3, #20
 800c5b2:	2203      	movs	r2, #3
 800c5b4:	701a      	strb	r2, [r3, #0]
 800c5b6:	e02d      	b.n	800c614 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c5b8:	79fa      	ldrb	r2, [r7, #7]
 800c5ba:	4923      	ldr	r1, [pc, #140]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c5bc:	4613      	mov	r3, r2
 800c5be:	005b      	lsls	r3, r3, #1
 800c5c0:	4413      	add	r3, r2
 800c5c2:	00db      	lsls	r3, r3, #3
 800c5c4:	440b      	add	r3, r1
 800c5c6:	3312      	adds	r3, #18
 800c5c8:	881b      	ldrh	r3, [r3, #0]
 800c5ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c5ce:	d321      	bcc.n	800c614 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c5d0:	79fa      	ldrb	r2, [r7, #7]
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	005b      	lsls	r3, r3, #1
 800c5d6:	4413      	add	r3, r2
 800c5d8:	00db      	lsls	r3, r3, #3
 800c5da:	4a1b      	ldr	r2, [pc, #108]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c5dc:	4413      	add	r3, r2
 800c5de:	1d19      	adds	r1, r3, #4
 800c5e0:	79fa      	ldrb	r2, [r7, #7]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	4413      	add	r3, r2
 800c5e8:	00db      	lsls	r3, r3, #3
 800c5ea:	3308      	adds	r3, #8
 800c5ec:	4a16      	ldr	r2, [pc, #88]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c5ee:	4413      	add	r3, r2
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f000 fafb 	bl	800cbf0 <etharp_request_dst>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d109      	bne.n	800c614 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c600:	79fa      	ldrb	r2, [r7, #7]
 800c602:	4911      	ldr	r1, [pc, #68]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c604:	4613      	mov	r3, r2
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	4413      	add	r3, r2
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	440b      	add	r3, r1
 800c60e:	3314      	adds	r3, #20
 800c610:	2203      	movs	r2, #3
 800c612:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800c61a:	79fa      	ldrb	r2, [r7, #7]
 800c61c:	4613      	mov	r3, r2
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	4413      	add	r3, r2
 800c622:	00db      	lsls	r3, r3, #3
 800c624:	3308      	adds	r3, #8
 800c626:	4a08      	ldr	r2, [pc, #32]	; (800c648 <etharp_output_to_arp_index+0x124>)
 800c628:	4413      	add	r3, r2
 800c62a:	3304      	adds	r3, #4
 800c62c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c630:	9200      	str	r2, [sp, #0]
 800c632:	460a      	mov	r2, r1
 800c634:	68b9      	ldr	r1, [r7, #8]
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f001 fe40 	bl	800e2bc <ethernet_output>
 800c63c:	4603      	mov	r3, r0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	200087cc 	.word	0x200087cc
 800c64c:	080116a4 	.word	0x080116a4
 800c650:	08011814 	.word	0x08011814
 800c654:	0801171c 	.word	0x0801171c

0800c658 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b08a      	sub	sp, #40	; 0x28
 800c65c:	af02      	add	r7, sp, #8
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d106      	bne.n	800c67c <etharp_output+0x24>
 800c66e:	4b73      	ldr	r3, [pc, #460]	; (800c83c <etharp_output+0x1e4>)
 800c670:	f240 321e 	movw	r2, #798	; 0x31e
 800c674:	4972      	ldr	r1, [pc, #456]	; (800c840 <etharp_output+0x1e8>)
 800c676:	4873      	ldr	r0, [pc, #460]	; (800c844 <etharp_output+0x1ec>)
 800c678:	f001 ff68 	bl	800e54c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d106      	bne.n	800c690 <etharp_output+0x38>
 800c682:	4b6e      	ldr	r3, [pc, #440]	; (800c83c <etharp_output+0x1e4>)
 800c684:	f240 321f 	movw	r2, #799	; 0x31f
 800c688:	496f      	ldr	r1, [pc, #444]	; (800c848 <etharp_output+0x1f0>)
 800c68a:	486e      	ldr	r0, [pc, #440]	; (800c844 <etharp_output+0x1ec>)
 800c68c:	f001 ff5e 	bl	800e54c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d106      	bne.n	800c6a4 <etharp_output+0x4c>
 800c696:	4b69      	ldr	r3, [pc, #420]	; (800c83c <etharp_output+0x1e4>)
 800c698:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c69c:	496b      	ldr	r1, [pc, #428]	; (800c84c <etharp_output+0x1f4>)
 800c69e:	4869      	ldr	r0, [pc, #420]	; (800c844 <etharp_output+0x1ec>)
 800c6a0:	f001 ff54 	bl	800e54c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	68f9      	ldr	r1, [r7, #12]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f000 fef8 	bl	800d4a0 <ip4_addr_isbroadcast_u32>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d002      	beq.n	800c6bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c6b6:	4b66      	ldr	r3, [pc, #408]	; (800c850 <etharp_output+0x1f8>)
 800c6b8:	61fb      	str	r3, [r7, #28]
 800c6ba:	e0af      	b.n	800c81c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6c4:	2be0      	cmp	r3, #224	; 0xe0
 800c6c6:	d118      	bne.n	800c6fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c6d0:	235e      	movs	r3, #94	; 0x5e
 800c6d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	3302      	adds	r3, #2
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3303      	adds	r3, #3
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c6f2:	f107 0310 	add.w	r3, r7, #16
 800c6f6:	61fb      	str	r3, [r7, #28]
 800c6f8:	e090      	b.n	800c81c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681a      	ldr	r2, [r3, #0]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	3304      	adds	r3, #4
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	405a      	eors	r2, r3
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	3308      	adds	r3, #8
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4013      	ands	r3, r2
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d012      	beq.n	800c738 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c718:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d00b      	beq.n	800c738 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	330c      	adds	r3, #12
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d003      	beq.n	800c732 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	330c      	adds	r3, #12
 800c72e:	61bb      	str	r3, [r7, #24]
 800c730:	e002      	b.n	800c738 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c732:	f06f 0303 	mvn.w	r3, #3
 800c736:	e07d      	b.n	800c834 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c738:	4b46      	ldr	r3, [pc, #280]	; (800c854 <etharp_output+0x1fc>)
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	4619      	mov	r1, r3
 800c73e:	4a46      	ldr	r2, [pc, #280]	; (800c858 <etharp_output+0x200>)
 800c740:	460b      	mov	r3, r1
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	440b      	add	r3, r1
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	4413      	add	r3, r2
 800c74a:	3314      	adds	r3, #20
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d925      	bls.n	800c79e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c752:	4b40      	ldr	r3, [pc, #256]	; (800c854 <etharp_output+0x1fc>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	4619      	mov	r1, r3
 800c758:	4a3f      	ldr	r2, [pc, #252]	; (800c858 <etharp_output+0x200>)
 800c75a:	460b      	mov	r3, r1
 800c75c:	005b      	lsls	r3, r3, #1
 800c75e:	440b      	add	r3, r1
 800c760:	00db      	lsls	r3, r3, #3
 800c762:	4413      	add	r3, r2
 800c764:	3308      	adds	r3, #8
 800c766:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d117      	bne.n	800c79e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	4b38      	ldr	r3, [pc, #224]	; (800c854 <etharp_output+0x1fc>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	4618      	mov	r0, r3
 800c778:	4937      	ldr	r1, [pc, #220]	; (800c858 <etharp_output+0x200>)
 800c77a:	4603      	mov	r3, r0
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	4403      	add	r3, r0
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	440b      	add	r3, r1
 800c784:	3304      	adds	r3, #4
 800c786:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c788:	429a      	cmp	r2, r3
 800c78a:	d108      	bne.n	800c79e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c78c:	4b31      	ldr	r3, [pc, #196]	; (800c854 <etharp_output+0x1fc>)
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	461a      	mov	r2, r3
 800c792:	68b9      	ldr	r1, [r7, #8]
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f7ff fec5 	bl	800c524 <etharp_output_to_arp_index>
 800c79a:	4603      	mov	r3, r0
 800c79c:	e04a      	b.n	800c834 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c79e:	2300      	movs	r3, #0
 800c7a0:	75fb      	strb	r3, [r7, #23]
 800c7a2:	e031      	b.n	800c808 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c7a4:	7dfa      	ldrb	r2, [r7, #23]
 800c7a6:	492c      	ldr	r1, [pc, #176]	; (800c858 <etharp_output+0x200>)
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	005b      	lsls	r3, r3, #1
 800c7ac:	4413      	add	r3, r2
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	440b      	add	r3, r1
 800c7b2:	3314      	adds	r3, #20
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d923      	bls.n	800c802 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c7ba:	7dfa      	ldrb	r2, [r7, #23]
 800c7bc:	4926      	ldr	r1, [pc, #152]	; (800c858 <etharp_output+0x200>)
 800c7be:	4613      	mov	r3, r2
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	4413      	add	r3, r2
 800c7c4:	00db      	lsls	r3, r3, #3
 800c7c6:	440b      	add	r3, r1
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c7cc:	68fa      	ldr	r2, [r7, #12]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d117      	bne.n	800c802 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	6819      	ldr	r1, [r3, #0]
 800c7d6:	7dfa      	ldrb	r2, [r7, #23]
 800c7d8:	481f      	ldr	r0, [pc, #124]	; (800c858 <etharp_output+0x200>)
 800c7da:	4613      	mov	r3, r2
 800c7dc:	005b      	lsls	r3, r3, #1
 800c7de:	4413      	add	r3, r2
 800c7e0:	00db      	lsls	r3, r3, #3
 800c7e2:	4403      	add	r3, r0
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c7e8:	4299      	cmp	r1, r3
 800c7ea:	d10a      	bne.n	800c802 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c7ec:	4a19      	ldr	r2, [pc, #100]	; (800c854 <etharp_output+0x1fc>)
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c7f2:	7dfb      	ldrb	r3, [r7, #23]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	68b9      	ldr	r1, [r7, #8]
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f7ff fe93 	bl	800c524 <etharp_output_to_arp_index>
 800c7fe:	4603      	mov	r3, r0
 800c800:	e018      	b.n	800c834 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c802:	7dfb      	ldrb	r3, [r7, #23]
 800c804:	3301      	adds	r3, #1
 800c806:	75fb      	strb	r3, [r7, #23]
 800c808:	7dfb      	ldrb	r3, [r7, #23]
 800c80a:	2b09      	cmp	r3, #9
 800c80c:	d9ca      	bls.n	800c7a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	69b9      	ldr	r1, [r7, #24]
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	f000 f822 	bl	800c85c <etharp_query>
 800c818:	4603      	mov	r3, r0
 800c81a:	e00b      	b.n	800c834 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c826:	9300      	str	r3, [sp, #0]
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	68b9      	ldr	r1, [r7, #8]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f001 fd45 	bl	800e2bc <ethernet_output>
 800c832:	4603      	mov	r3, r0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3720      	adds	r7, #32
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	080116a4 	.word	0x080116a4
 800c840:	080117f4 	.word	0x080117f4
 800c844:	0801171c 	.word	0x0801171c
 800c848:	08011844 	.word	0x08011844
 800c84c:	080117e4 	.word	0x080117e4
 800c850:	08011e60 	.word	0x08011e60
 800c854:	200088bc 	.word	0x200088bc
 800c858:	200087cc 	.word	0x200087cc

0800c85c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08c      	sub	sp, #48	; 0x30
 800c860:	af02      	add	r7, sp, #8
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	3326      	adds	r3, #38	; 0x26
 800c86c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c86e:	23ff      	movs	r3, #255	; 0xff
 800c870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	68f9      	ldr	r1, [r7, #12]
 800c87e:	4618      	mov	r0, r3
 800c880:	f000 fe0e 	bl	800d4a0 <ip4_addr_isbroadcast_u32>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10c      	bne.n	800c8a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c892:	2be0      	cmp	r3, #224	; 0xe0
 800c894:	d006      	beq.n	800c8a4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d003      	beq.n	800c8a4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d102      	bne.n	800c8aa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c8a4:	f06f 030f 	mvn.w	r3, #15
 800c8a8:	e101      	b.n	800caae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c8aa:	68fa      	ldr	r2, [r7, #12]
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	68b8      	ldr	r0, [r7, #8]
 800c8b0:	f7ff fb60 	bl	800bf74 <etharp_find_entry>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c8b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	da02      	bge.n	800c8c6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c8c0:	8a7b      	ldrh	r3, [r7, #18]
 800c8c2:	b25b      	sxtb	r3, r3
 800c8c4:	e0f3      	b.n	800caae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c8c6:	8a7b      	ldrh	r3, [r7, #18]
 800c8c8:	2b7e      	cmp	r3, #126	; 0x7e
 800c8ca:	d906      	bls.n	800c8da <etharp_query+0x7e>
 800c8cc:	4b7a      	ldr	r3, [pc, #488]	; (800cab8 <etharp_query+0x25c>)
 800c8ce:	f240 32c1 	movw	r2, #961	; 0x3c1
 800c8d2:	497a      	ldr	r1, [pc, #488]	; (800cabc <etharp_query+0x260>)
 800c8d4:	487a      	ldr	r0, [pc, #488]	; (800cac0 <etharp_query+0x264>)
 800c8d6:	f001 fe39 	bl	800e54c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c8da:	8a7b      	ldrh	r3, [r7, #18]
 800c8dc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c8de:	7c7a      	ldrb	r2, [r7, #17]
 800c8e0:	4978      	ldr	r1, [pc, #480]	; (800cac4 <etharp_query+0x268>)
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	4413      	add	r3, r2
 800c8e8:	00db      	lsls	r3, r3, #3
 800c8ea:	440b      	add	r3, r1
 800c8ec:	3314      	adds	r3, #20
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d115      	bne.n	800c920 <etharp_query+0xc4>
    is_new_entry = 1;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c8f8:	7c7a      	ldrb	r2, [r7, #17]
 800c8fa:	4972      	ldr	r1, [pc, #456]	; (800cac4 <etharp_query+0x268>)
 800c8fc:	4613      	mov	r3, r2
 800c8fe:	005b      	lsls	r3, r3, #1
 800c900:	4413      	add	r3, r2
 800c902:	00db      	lsls	r3, r3, #3
 800c904:	440b      	add	r3, r1
 800c906:	3314      	adds	r3, #20
 800c908:	2201      	movs	r2, #1
 800c90a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c90c:	7c7a      	ldrb	r2, [r7, #17]
 800c90e:	496d      	ldr	r1, [pc, #436]	; (800cac4 <etharp_query+0x268>)
 800c910:	4613      	mov	r3, r2
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	4413      	add	r3, r2
 800c916:	00db      	lsls	r3, r3, #3
 800c918:	440b      	add	r3, r1
 800c91a:	3308      	adds	r3, #8
 800c91c:	68fa      	ldr	r2, [r7, #12]
 800c91e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c920:	7c7a      	ldrb	r2, [r7, #17]
 800c922:	4968      	ldr	r1, [pc, #416]	; (800cac4 <etharp_query+0x268>)
 800c924:	4613      	mov	r3, r2
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	4413      	add	r3, r2
 800c92a:	00db      	lsls	r3, r3, #3
 800c92c:	440b      	add	r3, r1
 800c92e:	3314      	adds	r3, #20
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d011      	beq.n	800c95a <etharp_query+0xfe>
 800c936:	7c7a      	ldrb	r2, [r7, #17]
 800c938:	4962      	ldr	r1, [pc, #392]	; (800cac4 <etharp_query+0x268>)
 800c93a:	4613      	mov	r3, r2
 800c93c:	005b      	lsls	r3, r3, #1
 800c93e:	4413      	add	r3, r2
 800c940:	00db      	lsls	r3, r3, #3
 800c942:	440b      	add	r3, r1
 800c944:	3314      	adds	r3, #20
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d806      	bhi.n	800c95a <etharp_query+0xfe>
 800c94c:	4b5a      	ldr	r3, [pc, #360]	; (800cab8 <etharp_query+0x25c>)
 800c94e:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c952:	495d      	ldr	r1, [pc, #372]	; (800cac8 <etharp_query+0x26c>)
 800c954:	485a      	ldr	r0, [pc, #360]	; (800cac0 <etharp_query+0x264>)
 800c956:	f001 fdf9 	bl	800e54c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c95a:	6a3b      	ldr	r3, [r7, #32]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d102      	bne.n	800c966 <etharp_query+0x10a>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10c      	bne.n	800c980 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c966:	68b9      	ldr	r1, [r7, #8]
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 f963 	bl	800cc34 <etharp_request>
 800c96e:	4603      	mov	r3, r0
 800c970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d102      	bne.n	800c980 <etharp_query+0x124>
      return result;
 800c97a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c97e:	e096      	b.n	800caae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d106      	bne.n	800c994 <etharp_query+0x138>
 800c986:	4b4c      	ldr	r3, [pc, #304]	; (800cab8 <etharp_query+0x25c>)
 800c988:	f240 32e1 	movw	r2, #993	; 0x3e1
 800c98c:	494f      	ldr	r1, [pc, #316]	; (800cacc <etharp_query+0x270>)
 800c98e:	484c      	ldr	r0, [pc, #304]	; (800cac0 <etharp_query+0x264>)
 800c990:	f001 fddc 	bl	800e54c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c994:	7c7a      	ldrb	r2, [r7, #17]
 800c996:	494b      	ldr	r1, [pc, #300]	; (800cac4 <etharp_query+0x268>)
 800c998:	4613      	mov	r3, r2
 800c99a:	005b      	lsls	r3, r3, #1
 800c99c:	4413      	add	r3, r2
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	440b      	add	r3, r1
 800c9a2:	3314      	adds	r3, #20
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	2b01      	cmp	r3, #1
 800c9a8:	d917      	bls.n	800c9da <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c9aa:	4a49      	ldr	r2, [pc, #292]	; (800cad0 <etharp_query+0x274>)
 800c9ac:	7c7b      	ldrb	r3, [r7, #17]
 800c9ae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c9b0:	7c7a      	ldrb	r2, [r7, #17]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	00db      	lsls	r3, r3, #3
 800c9ba:	3308      	adds	r3, #8
 800c9bc:	4a41      	ldr	r2, [pc, #260]	; (800cac4 <etharp_query+0x268>)
 800c9be:	4413      	add	r3, r2
 800c9c0:	3304      	adds	r3, #4
 800c9c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9c6:	9200      	str	r2, [sp, #0]
 800c9c8:	697a      	ldr	r2, [r7, #20]
 800c9ca:	6879      	ldr	r1, [r7, #4]
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f001 fc75 	bl	800e2bc <ethernet_output>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c9d8:	e067      	b.n	800caaa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c9da:	7c7a      	ldrb	r2, [r7, #17]
 800c9dc:	4939      	ldr	r1, [pc, #228]	; (800cac4 <etharp_query+0x268>)
 800c9de:	4613      	mov	r3, r2
 800c9e0:	005b      	lsls	r3, r3, #1
 800c9e2:	4413      	add	r3, r2
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	440b      	add	r3, r1
 800c9e8:	3314      	adds	r3, #20
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d15c      	bne.n	800caaa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c9f8:	e01c      	b.n	800ca34 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c9fa:	69fb      	ldr	r3, [r7, #28]
 800c9fc:	895a      	ldrh	r2, [r3, #10]
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	891b      	ldrh	r3, [r3, #8]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d10a      	bne.n	800ca1c <etharp_query+0x1c0>
 800ca06:	69fb      	ldr	r3, [r7, #28]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d006      	beq.n	800ca1c <etharp_query+0x1c0>
 800ca0e:	4b2a      	ldr	r3, [pc, #168]	; (800cab8 <etharp_query+0x25c>)
 800ca10:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800ca14:	492f      	ldr	r1, [pc, #188]	; (800cad4 <etharp_query+0x278>)
 800ca16:	482a      	ldr	r0, [pc, #168]	; (800cac0 <etharp_query+0x264>)
 800ca18:	f001 fd98 	bl	800e54c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	7b1b      	ldrb	r3, [r3, #12]
 800ca20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <etharp_query+0x1d2>
        copy_needed = 1;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	61bb      	str	r3, [r7, #24]
        break;
 800ca2c:	e005      	b.n	800ca3a <etharp_query+0x1de>
      }
      p = p->next;
 800ca2e:	69fb      	ldr	r3, [r7, #28]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	61fb      	str	r3, [r7, #28]
    while (p) {
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1df      	bne.n	800c9fa <etharp_query+0x19e>
    }
    if (copy_needed) {
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d007      	beq.n	800ca50 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	f44f 7120 	mov.w	r1, #640	; 0x280
 800ca46:	200e      	movs	r0, #14
 800ca48:	f7f9 fd28 	bl	800649c <pbuf_clone>
 800ca4c:	61f8      	str	r0, [r7, #28]
 800ca4e:	e004      	b.n	800ca5a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800ca54:	69f8      	ldr	r0, [r7, #28]
 800ca56:	f7f9 fb65 	bl	8006124 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d021      	beq.n	800caa4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800ca60:	7c7a      	ldrb	r2, [r7, #17]
 800ca62:	4918      	ldr	r1, [pc, #96]	; (800cac4 <etharp_query+0x268>)
 800ca64:	4613      	mov	r3, r2
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	4413      	add	r3, r2
 800ca6a:	00db      	lsls	r3, r3, #3
 800ca6c:	440b      	add	r3, r1
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00a      	beq.n	800ca8a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800ca74:	7c7a      	ldrb	r2, [r7, #17]
 800ca76:	4913      	ldr	r1, [pc, #76]	; (800cac4 <etharp_query+0x268>)
 800ca78:	4613      	mov	r3, r2
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	4413      	add	r3, r2
 800ca7e:	00db      	lsls	r3, r3, #3
 800ca80:	440b      	add	r3, r1
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7f9 faad 	bl	8005fe4 <pbuf_free>
      }
      arp_table[i].q = p;
 800ca8a:	7c7a      	ldrb	r2, [r7, #17]
 800ca8c:	490d      	ldr	r1, [pc, #52]	; (800cac4 <etharp_query+0x268>)
 800ca8e:	4613      	mov	r3, r2
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	4413      	add	r3, r2
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	440b      	add	r3, r1
 800ca98:	69fa      	ldr	r2, [r7, #28]
 800ca9a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800caa2:	e002      	b.n	800caaa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800caa4:	23ff      	movs	r3, #255	; 0xff
 800caa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800caaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3728      	adds	r7, #40	; 0x28
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	080116a4 	.word	0x080116a4
 800cabc:	08011850 	.word	0x08011850
 800cac0:	0801171c 	.word	0x0801171c
 800cac4:	200087cc 	.word	0x200087cc
 800cac8:	08011860 	.word	0x08011860
 800cacc:	08011844 	.word	0x08011844
 800cad0:	200088bc 	.word	0x200088bc
 800cad4:	08011888 	.word	0x08011888

0800cad8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08a      	sub	sp, #40	; 0x28
 800cadc:	af02      	add	r7, sp, #8
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	607a      	str	r2, [r7, #4]
 800cae4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d106      	bne.n	800cafe <etharp_raw+0x26>
 800caf0:	4b3a      	ldr	r3, [pc, #232]	; (800cbdc <etharp_raw+0x104>)
 800caf2:	f240 4257 	movw	r2, #1111	; 0x457
 800caf6:	493a      	ldr	r1, [pc, #232]	; (800cbe0 <etharp_raw+0x108>)
 800caf8:	483a      	ldr	r0, [pc, #232]	; (800cbe4 <etharp_raw+0x10c>)
 800cafa:	f001 fd27 	bl	800e54c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cafe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cb02:	211c      	movs	r1, #28
 800cb04:	200e      	movs	r0, #14
 800cb06:	f7f8 ff89 	bl	8005a1c <pbuf_alloc>
 800cb0a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d102      	bne.n	800cb18 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cb12:	f04f 33ff 	mov.w	r3, #4294967295
 800cb16:	e05d      	b.n	800cbd4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	895b      	ldrh	r3, [r3, #10]
 800cb1c:	2b1b      	cmp	r3, #27
 800cb1e:	d806      	bhi.n	800cb2e <etharp_raw+0x56>
 800cb20:	4b2e      	ldr	r3, [pc, #184]	; (800cbdc <etharp_raw+0x104>)
 800cb22:	f240 4262 	movw	r2, #1122	; 0x462
 800cb26:	4930      	ldr	r1, [pc, #192]	; (800cbe8 <etharp_raw+0x110>)
 800cb28:	482e      	ldr	r0, [pc, #184]	; (800cbe4 <etharp_raw+0x10c>)
 800cb2a:	f001 fd0f 	bl	800e54c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cb34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7f7 fef6 	bl	8004928 <lwip_htons>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	461a      	mov	r2, r3
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb4a:	2b06      	cmp	r3, #6
 800cb4c:	d006      	beq.n	800cb5c <etharp_raw+0x84>
 800cb4e:	4b23      	ldr	r3, [pc, #140]	; (800cbdc <etharp_raw+0x104>)
 800cb50:	f240 4269 	movw	r2, #1129	; 0x469
 800cb54:	4925      	ldr	r1, [pc, #148]	; (800cbec <etharp_raw+0x114>)
 800cb56:	4823      	ldr	r0, [pc, #140]	; (800cbe4 <etharp_raw+0x10c>)
 800cb58:	f001 fcf8 	bl	800e54c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	3308      	adds	r3, #8
 800cb60:	2206      	movs	r2, #6
 800cb62:	6839      	ldr	r1, [r7, #0]
 800cb64:	4618      	mov	r0, r3
 800cb66:	f001 fdcc 	bl	800e702 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	3312      	adds	r3, #18
 800cb6e:	2206      	movs	r2, #6
 800cb70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cb72:	4618      	mov	r0, r3
 800cb74:	f001 fdc5 	bl	800e702 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	330e      	adds	r3, #14
 800cb7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb7e:	6812      	ldr	r2, [r2, #0]
 800cb80:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	3318      	adds	r3, #24
 800cb86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb88:	6812      	ldr	r2, [r2, #0]
 800cb8a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	701a      	strb	r2, [r3, #0]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f042 0201 	orr.w	r2, r2, #1
 800cb98:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f042 0208 	orr.w	r2, r2, #8
 800cba2:	709a      	strb	r2, [r3, #2]
 800cba4:	2200      	movs	r2, #0
 800cba6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	2206      	movs	r2, #6
 800cbac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	2204      	movs	r2, #4
 800cbb2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cbb4:	f640 0306 	movw	r3, #2054	; 0x806
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	69b9      	ldr	r1, [r7, #24]
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	f001 fb7b 	bl	800e2bc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cbc6:	69b8      	ldr	r0, [r7, #24]
 800cbc8:	f7f9 fa0c 	bl	8005fe4 <pbuf_free>
  p = NULL;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cbd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3720      	adds	r7, #32
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}
 800cbdc:	080116a4 	.word	0x080116a4
 800cbe0:	080117f4 	.word	0x080117f4
 800cbe4:	0801171c 	.word	0x0801171c
 800cbe8:	080118a4 	.word	0x080118a4
 800cbec:	080118d8 	.word	0x080118d8

0800cbf0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b088      	sub	sp, #32
 800cbf4:	af04      	add	r7, sp, #16
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	9203      	str	r2, [sp, #12]
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	9202      	str	r2, [sp, #8]
 800cc14:	4a06      	ldr	r2, [pc, #24]	; (800cc30 <etharp_request_dst+0x40>)
 800cc16:	9201      	str	r2, [sp, #4]
 800cc18:	9300      	str	r3, [sp, #0]
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	687a      	ldr	r2, [r7, #4]
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f7ff ff5a 	bl	800cad8 <etharp_raw>
 800cc24:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3710      	adds	r7, #16
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	08011e68 	.word	0x08011e68

0800cc34 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800cc3e:	4a05      	ldr	r2, [pc, #20]	; (800cc54 <etharp_request+0x20>)
 800cc40:	6839      	ldr	r1, [r7, #0]
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff ffd4 	bl	800cbf0 <etharp_request_dst>
 800cc48:	4603      	mov	r3, r0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	08011e60 	.word	0x08011e60

0800cc58 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08e      	sub	sp, #56	; 0x38
 800cc5c:	af04      	add	r7, sp, #16
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800cc62:	4b79      	ldr	r3, [pc, #484]	; (800ce48 <icmp_input+0x1f0>)
 800cc64:	689b      	ldr	r3, [r3, #8]
 800cc66:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800cc68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	f003 030f 	and.w	r3, r3, #15
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800cc78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cc7a:	2b13      	cmp	r3, #19
 800cc7c:	f240 80cd 	bls.w	800ce1a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	895b      	ldrh	r3, [r3, #10]
 800cc84:	2b03      	cmp	r3, #3
 800cc86:	f240 80ca 	bls.w	800ce1e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800cc94:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f000 80b7 	beq.w	800ce0c <icmp_input+0x1b4>
 800cc9e:	2b08      	cmp	r3, #8
 800cca0:	f040 80b7 	bne.w	800ce12 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800cca4:	4b69      	ldr	r3, [pc, #420]	; (800ce4c <icmp_input+0x1f4>)
 800cca6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cca8:	4b67      	ldr	r3, [pc, #412]	; (800ce48 <icmp_input+0x1f0>)
 800ccaa:	695b      	ldr	r3, [r3, #20]
 800ccac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccb0:	2be0      	cmp	r3, #224	; 0xe0
 800ccb2:	f000 80bb 	beq.w	800ce2c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ccb6:	4b64      	ldr	r3, [pc, #400]	; (800ce48 <icmp_input+0x1f0>)
 800ccb8:	695b      	ldr	r3, [r3, #20]
 800ccba:	4a63      	ldr	r2, [pc, #396]	; (800ce48 <icmp_input+0x1f0>)
 800ccbc:	6812      	ldr	r2, [r2, #0]
 800ccbe:	4611      	mov	r1, r2
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 fbed 	bl	800d4a0 <ip4_addr_isbroadcast_u32>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f040 80b1 	bne.w	800ce30 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	891b      	ldrh	r3, [r3, #8]
 800ccd2:	2b07      	cmp	r3, #7
 800ccd4:	f240 80a5 	bls.w	800ce22 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ccd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccda:	330e      	adds	r3, #14
 800ccdc:	4619      	mov	r1, r3
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7f9 f8ea 	bl	8005eb8 <pbuf_add_header>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d04b      	beq.n	800cd82 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	891a      	ldrh	r2, [r3, #8]
 800ccee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccf0:	4413      	add	r3, r2
 800ccf2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	891b      	ldrh	r3, [r3, #8]
 800ccf8:	8b7a      	ldrh	r2, [r7, #26]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	f0c0 809a 	bcc.w	800ce34 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cd00:	8b7b      	ldrh	r3, [r7, #26]
 800cd02:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cd06:	4619      	mov	r1, r3
 800cd08:	200e      	movs	r0, #14
 800cd0a:	f7f8 fe87 	bl	8005a1c <pbuf_alloc>
 800cd0e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f000 8090 	beq.w	800ce38 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	895b      	ldrh	r3, [r3, #10]
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd20:	3308      	adds	r3, #8
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d203      	bcs.n	800cd2e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cd26:	6978      	ldr	r0, [r7, #20]
 800cd28:	f7f9 f95c 	bl	8005fe4 <pbuf_free>
          goto icmperr;
 800cd2c:	e085      	b.n	800ce3a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cd2e:	697b      	ldr	r3, [r7, #20]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd36:	4618      	mov	r0, r3
 800cd38:	f001 fce3 	bl	800e702 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800cd3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd3e:	4619      	mov	r1, r3
 800cd40:	6978      	ldr	r0, [r7, #20]
 800cd42:	f7f9 f8c9 	bl	8005ed8 <pbuf_remove_header>
 800cd46:	4603      	mov	r3, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d009      	beq.n	800cd60 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cd4c:	4b40      	ldr	r3, [pc, #256]	; (800ce50 <icmp_input+0x1f8>)
 800cd4e:	22b6      	movs	r2, #182	; 0xb6
 800cd50:	4940      	ldr	r1, [pc, #256]	; (800ce54 <icmp_input+0x1fc>)
 800cd52:	4841      	ldr	r0, [pc, #260]	; (800ce58 <icmp_input+0x200>)
 800cd54:	f001 fbfa 	bl	800e54c <iprintf>
          pbuf_free(r);
 800cd58:	6978      	ldr	r0, [r7, #20]
 800cd5a:	f7f9 f943 	bl	8005fe4 <pbuf_free>
          goto icmperr;
 800cd5e:	e06c      	b.n	800ce3a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cd60:	6879      	ldr	r1, [r7, #4]
 800cd62:	6978      	ldr	r0, [r7, #20]
 800cd64:	f7f9 fa56 	bl	8006214 <pbuf_copy>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d003      	beq.n	800cd76 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cd6e:	6978      	ldr	r0, [r7, #20]
 800cd70:	f7f9 f938 	bl	8005fe4 <pbuf_free>
          goto icmperr;
 800cd74:	e061      	b.n	800ce3a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f7f9 f934 	bl	8005fe4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	607b      	str	r3, [r7, #4]
 800cd80:	e00f      	b.n	800cda2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cd82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd84:	330e      	adds	r3, #14
 800cd86:	4619      	mov	r1, r3
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f7f9 f8a5 	bl	8005ed8 <pbuf_remove_header>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d006      	beq.n	800cda2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cd94:	4b2e      	ldr	r3, [pc, #184]	; (800ce50 <icmp_input+0x1f8>)
 800cd96:	22c7      	movs	r2, #199	; 0xc7
 800cd98:	4930      	ldr	r1, [pc, #192]	; (800ce5c <icmp_input+0x204>)
 800cd9a:	482f      	ldr	r0, [pc, #188]	; (800ce58 <icmp_input+0x200>)
 800cd9c:	f001 fbd6 	bl	800e54c <iprintf>
          goto icmperr;
 800cda0:	e04b      	b.n	800ce3a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cda8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f7f9 f883 	bl	8005eb8 <pbuf_add_header>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d12b      	bne.n	800ce10 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cdc6:	4b20      	ldr	r3, [pc, #128]	; (800ce48 <icmp_input+0x1f0>)
 800cdc8:	691a      	ldr	r2, [r3, #16]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cdce:	693b      	ldr	r3, [r7, #16]
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	709a      	strb	r2, [r3, #2]
 800cdda:	2200      	movs	r2, #0
 800cddc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	22ff      	movs	r2, #255	; 0xff
 800cde2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2200      	movs	r2, #0
 800cde8:	729a      	strb	r2, [r3, #10]
 800cdea:	2200      	movs	r2, #0
 800cdec:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	9302      	str	r3, [sp, #8]
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	9301      	str	r3, [sp, #4]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	23ff      	movs	r3, #255	; 0xff
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	69f9      	ldr	r1, [r7, #28]
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f000 fa75 	bl	800d2f0 <ip4_output_if>
 800ce06:	4603      	mov	r3, r0
 800ce08:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ce0a:	e001      	b.n	800ce10 <icmp_input+0x1b8>
      break;
 800ce0c:	bf00      	nop
 800ce0e:	e000      	b.n	800ce12 <icmp_input+0x1ba>
      break;
 800ce10:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7f9 f8e6 	bl	8005fe4 <pbuf_free>
  return;
 800ce18:	e013      	b.n	800ce42 <icmp_input+0x1ea>
    goto lenerr;
 800ce1a:	bf00      	nop
 800ce1c:	e002      	b.n	800ce24 <icmp_input+0x1cc>
    goto lenerr;
 800ce1e:	bf00      	nop
 800ce20:	e000      	b.n	800ce24 <icmp_input+0x1cc>
        goto lenerr;
 800ce22:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	f7f9 f8dd 	bl	8005fe4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ce2a:	e00a      	b.n	800ce42 <icmp_input+0x1ea>
        goto icmperr;
 800ce2c:	bf00      	nop
 800ce2e:	e004      	b.n	800ce3a <icmp_input+0x1e2>
        goto icmperr;
 800ce30:	bf00      	nop
 800ce32:	e002      	b.n	800ce3a <icmp_input+0x1e2>
          goto icmperr;
 800ce34:	bf00      	nop
 800ce36:	e000      	b.n	800ce3a <icmp_input+0x1e2>
          goto icmperr;
 800ce38:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7f9 f8d2 	bl	8005fe4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ce40:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ce42:	3728      	adds	r7, #40	; 0x28
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	200051fc 	.word	0x200051fc
 800ce4c:	20005210 	.word	0x20005210
 800ce50:	0801191c 	.word	0x0801191c
 800ce54:	08011954 	.word	0x08011954
 800ce58:	0801198c 	.word	0x0801198c
 800ce5c:	080119b4 	.word	0x080119b4

0800ce60 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ce6c:	78fb      	ldrb	r3, [r7, #3]
 800ce6e:	461a      	mov	r2, r3
 800ce70:	2103      	movs	r1, #3
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f000 f814 	bl	800cea0 <icmp_send_response>
}
 800ce78:	bf00      	nop
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	460b      	mov	r3, r1
 800ce8a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ce8c:	78fb      	ldrb	r3, [r7, #3]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	210b      	movs	r1, #11
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 f804 	bl	800cea0 <icmp_send_response>
}
 800ce98:	bf00      	nop
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08c      	sub	sp, #48	; 0x30
 800cea4:	af04      	add	r7, sp, #16
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	460b      	mov	r3, r1
 800ceaa:	70fb      	strb	r3, [r7, #3]
 800ceac:	4613      	mov	r3, r2
 800ceae:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800ceb0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ceb4:	2124      	movs	r1, #36	; 0x24
 800ceb6:	2022      	movs	r0, #34	; 0x22
 800ceb8:	f7f8 fdb0 	bl	8005a1c <pbuf_alloc>
 800cebc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cebe:	69fb      	ldr	r3, [r7, #28]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d04c      	beq.n	800cf5e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	895b      	ldrh	r3, [r3, #10]
 800cec8:	2b23      	cmp	r3, #35	; 0x23
 800ceca:	d806      	bhi.n	800ceda <icmp_send_response+0x3a>
 800cecc:	4b26      	ldr	r3, [pc, #152]	; (800cf68 <icmp_send_response+0xc8>)
 800cece:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800ced2:	4926      	ldr	r1, [pc, #152]	; (800cf6c <icmp_send_response+0xcc>)
 800ced4:	4826      	ldr	r0, [pc, #152]	; (800cf70 <icmp_send_response+0xd0>)
 800ced6:	f001 fb39 	bl	800e54c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	78fa      	ldrb	r2, [r7, #3]
 800ceea:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	78ba      	ldrb	r2, [r7, #2]
 800cef0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	2200      	movs	r2, #0
 800cef6:	711a      	strb	r2, [r3, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2200      	movs	r2, #0
 800cf00:	719a      	strb	r2, [r3, #6]
 800cf02:	2200      	movs	r2, #0
 800cf04:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	f103 0008 	add.w	r0, r3, #8
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	221c      	movs	r2, #28
 800cf14:	4619      	mov	r1, r3
 800cf16:	f001 fbf4 	bl	800e702 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cf20:	f107 030c 	add.w	r3, r7, #12
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 f825 	bl	800cf74 <ip4_route>
 800cf2a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d011      	beq.n	800cf56 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	2200      	movs	r2, #0
 800cf36:	709a      	strb	r2, [r3, #2]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cf3c:	f107 020c 	add.w	r2, r7, #12
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	9302      	str	r3, [sp, #8]
 800cf44:	2301      	movs	r3, #1
 800cf46:	9301      	str	r3, [sp, #4]
 800cf48:	2300      	movs	r3, #0
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	23ff      	movs	r3, #255	; 0xff
 800cf4e:	2100      	movs	r1, #0
 800cf50:	69f8      	ldr	r0, [r7, #28]
 800cf52:	f000 f9cd 	bl	800d2f0 <ip4_output_if>
  }
  pbuf_free(q);
 800cf56:	69f8      	ldr	r0, [r7, #28]
 800cf58:	f7f9 f844 	bl	8005fe4 <pbuf_free>
 800cf5c:	e000      	b.n	800cf60 <icmp_send_response+0xc0>
    return;
 800cf5e:	bf00      	nop
}
 800cf60:	3720      	adds	r7, #32
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	0801191c 	.word	0x0801191c
 800cf6c:	080119e8 	.word	0x080119e8
 800cf70:	0801198c 	.word	0x0801198c

0800cf74 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b085      	sub	sp, #20
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cf7c:	4b33      	ldr	r3, [pc, #204]	; (800d04c <ip4_route+0xd8>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	60fb      	str	r3, [r7, #12]
 800cf82:	e036      	b.n	800cff2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	b2db      	uxtb	r3, r3
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d02b      	beq.n	800cfec <ip4_route+0x78>
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf9a:	089b      	lsrs	r3, r3, #2
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d022      	beq.n	800cfec <ip4_route+0x78>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3304      	adds	r3, #4
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d01d      	beq.n	800cfec <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	3304      	adds	r3, #4
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	405a      	eors	r2, r3
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	3308      	adds	r3, #8
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4013      	ands	r3, r2
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d101      	bne.n	800cfcc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	e038      	b.n	800d03e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfd2:	f003 0302 	and.w	r3, r3, #2
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d108      	bne.n	800cfec <ip4_route+0x78>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	330c      	adds	r3, #12
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d101      	bne.n	800cfec <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	e028      	b.n	800d03e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	60fb      	str	r3, [r7, #12]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d1c5      	bne.n	800cf84 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cff8:	4b15      	ldr	r3, [pc, #84]	; (800d050 <ip4_route+0xdc>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d01a      	beq.n	800d036 <ip4_route+0xc2>
 800d000:	4b13      	ldr	r3, [pc, #76]	; (800d050 <ip4_route+0xdc>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d008:	f003 0301 	and.w	r3, r3, #1
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d012      	beq.n	800d036 <ip4_route+0xc2>
 800d010:	4b0f      	ldr	r3, [pc, #60]	; (800d050 <ip4_route+0xdc>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d018:	f003 0304 	and.w	r3, r3, #4
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00a      	beq.n	800d036 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d020:	4b0b      	ldr	r3, [pc, #44]	; (800d050 <ip4_route+0xdc>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	3304      	adds	r3, #4
 800d026:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d004      	beq.n	800d036 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	b2db      	uxtb	r3, r3
 800d032:	2b7f      	cmp	r3, #127	; 0x7f
 800d034:	d101      	bne.n	800d03a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d036:	2300      	movs	r3, #0
 800d038:	e001      	b.n	800d03e <ip4_route+0xca>
  }

  return netif_default;
 800d03a:	4b05      	ldr	r3, [pc, #20]	; (800d050 <ip4_route+0xdc>)
 800d03c:	681b      	ldr	r3, [r3, #0]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	20008760 	.word	0x20008760
 800d050:	20008764 	.word	0x20008764

0800d054 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d062:	f003 0301 	and.w	r3, r3, #1
 800d066:	b2db      	uxtb	r3, r3
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d016      	beq.n	800d09a <ip4_input_accept+0x46>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	3304      	adds	r3, #4
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d011      	beq.n	800d09a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d076:	4b0b      	ldr	r3, [pc, #44]	; (800d0a4 <ip4_input_accept+0x50>)
 800d078:	695a      	ldr	r2, [r3, #20]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	3304      	adds	r3, #4
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	429a      	cmp	r2, r3
 800d082:	d008      	beq.n	800d096 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d084:	4b07      	ldr	r3, [pc, #28]	; (800d0a4 <ip4_input_accept+0x50>)
 800d086:	695b      	ldr	r3, [r3, #20]
 800d088:	6879      	ldr	r1, [r7, #4]
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 fa08 	bl	800d4a0 <ip4_addr_isbroadcast_u32>
 800d090:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d096:	2301      	movs	r3, #1
 800d098:	e000      	b.n	800d09c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	200051fc 	.word	0x200051fc

0800d0a8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	091b      	lsrs	r3, r3, #4
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d004      	beq.n	800d0ce <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f7f8 ff8d 	bl	8005fe4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	e107      	b.n	800d2de <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	f003 030f 	and.w	r3, r3, #15
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	885b      	ldrh	r3, [r3, #2]
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7f7 fc1f 	bl	8004928 <lwip_htons>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	891b      	ldrh	r3, [r3, #8]
 800d0f2:	89ba      	ldrh	r2, [r7, #12]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d204      	bcs.n	800d102 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d0f8:	89bb      	ldrh	r3, [r7, #12]
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7f8 fdeb 	bl	8005cd8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	895b      	ldrh	r3, [r3, #10]
 800d106:	89fa      	ldrh	r2, [r7, #14]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d807      	bhi.n	800d11c <ip4_input+0x74>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	891b      	ldrh	r3, [r3, #8]
 800d110:	89ba      	ldrh	r2, [r7, #12]
 800d112:	429a      	cmp	r2, r3
 800d114:	d802      	bhi.n	800d11c <ip4_input+0x74>
 800d116:	89fb      	ldrh	r3, [r7, #14]
 800d118:	2b13      	cmp	r3, #19
 800d11a:	d804      	bhi.n	800d126 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7f8 ff61 	bl	8005fe4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d122:	2300      	movs	r3, #0
 800d124:	e0db      	b.n	800d2de <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	4a6f      	ldr	r2, [pc, #444]	; (800d2e8 <ip4_input+0x240>)
 800d12c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	4a6d      	ldr	r2, [pc, #436]	; (800d2e8 <ip4_input+0x240>)
 800d134:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d136:	4b6c      	ldr	r3, [pc, #432]	; (800d2e8 <ip4_input+0x240>)
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d13e:	2be0      	cmp	r3, #224	; 0xe0
 800d140:	d112      	bne.n	800d168 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d148:	f003 0301 	and.w	r3, r3, #1
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d007      	beq.n	800d162 <ip4_input+0xba>
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	3304      	adds	r3, #4
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <ip4_input+0xba>
      netif = inp;
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	613b      	str	r3, [r7, #16]
 800d160:	e02a      	b.n	800d1b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d162:	2300      	movs	r3, #0
 800d164:	613b      	str	r3, [r7, #16]
 800d166:	e027      	b.n	800d1b8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d168:	6838      	ldr	r0, [r7, #0]
 800d16a:	f7ff ff73 	bl	800d054 <ip4_input_accept>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d002      	beq.n	800d17a <ip4_input+0xd2>
      netif = inp;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	613b      	str	r3, [r7, #16]
 800d178:	e01e      	b.n	800d1b8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d17e:	4b5a      	ldr	r3, [pc, #360]	; (800d2e8 <ip4_input+0x240>)
 800d180:	695b      	ldr	r3, [r3, #20]
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b7f      	cmp	r3, #127	; 0x7f
 800d186:	d017      	beq.n	800d1b8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d188:	4b58      	ldr	r3, [pc, #352]	; (800d2ec <ip4_input+0x244>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	613b      	str	r3, [r7, #16]
 800d18e:	e00e      	b.n	800d1ae <ip4_input+0x106>
          if (netif == inp) {
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	429a      	cmp	r2, r3
 800d196:	d006      	beq.n	800d1a6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d198:	6938      	ldr	r0, [r7, #16]
 800d19a:	f7ff ff5b 	bl	800d054 <ip4_input_accept>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d108      	bne.n	800d1b6 <ip4_input+0x10e>
 800d1a4:	e000      	b.n	800d1a8 <ip4_input+0x100>
            continue;
 800d1a6:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	613b      	str	r3, [r7, #16]
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d1ed      	bne.n	800d190 <ip4_input+0xe8>
 800d1b4:	e000      	b.n	800d1b8 <ip4_input+0x110>
            break;
 800d1b6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d1b8:	4b4b      	ldr	r3, [pc, #300]	; (800d2e8 <ip4_input+0x240>)
 800d1ba:	691b      	ldr	r3, [r3, #16]
 800d1bc:	6839      	ldr	r1, [r7, #0]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 f96e 	bl	800d4a0 <ip4_addr_isbroadcast_u32>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d105      	bne.n	800d1d6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d1ca:	4b47      	ldr	r3, [pc, #284]	; (800d2e8 <ip4_input+0x240>)
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d1d2:	2be0      	cmp	r3, #224	; 0xe0
 800d1d4:	d104      	bne.n	800d1e0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7f8 ff04 	bl	8005fe4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e07e      	b.n	800d2de <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d104      	bne.n	800d1f0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7f8 fefc 	bl	8005fe4 <pbuf_free>
    return ERR_OK;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e076      	b.n	800d2de <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	88db      	ldrh	r3, [r3, #6]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00b      	beq.n	800d21a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 fc92 	bl	800db2c <ip4_reass>
 800d208:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <ip4_input+0x16c>
      return ERR_OK;
 800d210:	2300      	movs	r3, #0
 800d212:	e064      	b.n	800d2de <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d21a:	4a33      	ldr	r2, [pc, #204]	; (800d2e8 <ip4_input+0x240>)
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d220:	4a31      	ldr	r2, [pc, #196]	; (800d2e8 <ip4_input+0x240>)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d226:	4a30      	ldr	r2, [pc, #192]	; (800d2e8 <ip4_input+0x240>)
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	f003 030f 	and.w	r3, r3, #15
 800d234:	b2db      	uxtb	r3, r3
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	b29a      	uxth	r2, r3
 800d23c:	4b2a      	ldr	r3, [pc, #168]	; (800d2e8 <ip4_input+0x240>)
 800d23e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d240:	89fb      	ldrh	r3, [r7, #14]
 800d242:	4619      	mov	r1, r3
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7f8 fe47 	bl	8005ed8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	7a5b      	ldrb	r3, [r3, #9]
 800d24e:	2b11      	cmp	r3, #17
 800d250:	d006      	beq.n	800d260 <ip4_input+0x1b8>
 800d252:	2b11      	cmp	r3, #17
 800d254:	dc13      	bgt.n	800d27e <ip4_input+0x1d6>
 800d256:	2b01      	cmp	r3, #1
 800d258:	d00c      	beq.n	800d274 <ip4_input+0x1cc>
 800d25a:	2b06      	cmp	r3, #6
 800d25c:	d005      	beq.n	800d26a <ip4_input+0x1c2>
 800d25e:	e00e      	b.n	800d27e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d260:	6839      	ldr	r1, [r7, #0]
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7fe fc68 	bl	800bb38 <udp_input>
        break;
 800d268:	e026      	b.n	800d2b8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f7fa fce1 	bl	8007c34 <tcp_input>
        break;
 800d272:	e021      	b.n	800d2b8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7ff fcee 	bl	800cc58 <icmp_input>
        break;
 800d27c:	e01c      	b.n	800d2b8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d27e:	4b1a      	ldr	r3, [pc, #104]	; (800d2e8 <ip4_input+0x240>)
 800d280:	695b      	ldr	r3, [r3, #20]
 800d282:	6939      	ldr	r1, [r7, #16]
 800d284:	4618      	mov	r0, r3
 800d286:	f000 f90b 	bl	800d4a0 <ip4_addr_isbroadcast_u32>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10f      	bne.n	800d2b0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d290:	4b15      	ldr	r3, [pc, #84]	; (800d2e8 <ip4_input+0x240>)
 800d292:	695b      	ldr	r3, [r3, #20]
 800d294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d298:	2be0      	cmp	r3, #224	; 0xe0
 800d29a:	d009      	beq.n	800d2b0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d29c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f7f8 fe8b 	bl	8005fbe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d2a8:	2102      	movs	r1, #2
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7ff fdd8 	bl	800ce60 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7f8 fe97 	bl	8005fe4 <pbuf_free>
        break;
 800d2b6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d2b8:	4b0b      	ldr	r3, [pc, #44]	; (800d2e8 <ip4_input+0x240>)
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d2be:	4b0a      	ldr	r3, [pc, #40]	; (800d2e8 <ip4_input+0x240>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d2c4:	4b08      	ldr	r3, [pc, #32]	; (800d2e8 <ip4_input+0x240>)
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d2ca:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <ip4_input+0x240>)
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d2d0:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <ip4_input+0x240>)
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d2d6:	4b04      	ldr	r3, [pc, #16]	; (800d2e8 <ip4_input+0x240>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3718      	adds	r7, #24
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	200051fc 	.word	0x200051fc
 800d2ec:	20008760 	.word	0x20008760

0800d2f0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b08a      	sub	sp, #40	; 0x28
 800d2f4:	af04      	add	r7, sp, #16
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	607a      	str	r2, [r7, #4]
 800d2fc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d009      	beq.n	800d31c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d003      	beq.n	800d316 <ip4_output_if+0x26>
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d102      	bne.n	800d31c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d318:	3304      	adds	r3, #4
 800d31a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d31c:	78fa      	ldrb	r2, [r7, #3]
 800d31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d320:	9302      	str	r3, [sp, #8]
 800d322:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d326:	9301      	str	r3, [sp, #4]
 800d328:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	4613      	mov	r3, r2
 800d330:	687a      	ldr	r2, [r7, #4]
 800d332:	6979      	ldr	r1, [r7, #20]
 800d334:	68f8      	ldr	r0, [r7, #12]
 800d336:	f000 f805 	bl	800d344 <ip4_output_if_src>
 800d33a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b088      	sub	sp, #32
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
 800d350:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	7b9b      	ldrb	r3, [r3, #14]
 800d356:	2b01      	cmp	r3, #1
 800d358:	d006      	beq.n	800d368 <ip4_output_if_src+0x24>
 800d35a:	4b4b      	ldr	r3, [pc, #300]	; (800d488 <ip4_output_if_src+0x144>)
 800d35c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d360:	494a      	ldr	r1, [pc, #296]	; (800d48c <ip4_output_if_src+0x148>)
 800d362:	484b      	ldr	r0, [pc, #300]	; (800d490 <ip4_output_if_src+0x14c>)
 800d364:	f001 f8f2 	bl	800e54c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d060      	beq.n	800d430 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d36e:	2314      	movs	r3, #20
 800d370:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d372:	2114      	movs	r1, #20
 800d374:	68f8      	ldr	r0, [r7, #12]
 800d376:	f7f8 fd9f 	bl	8005eb8 <pbuf_add_header>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d002      	beq.n	800d386 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d380:	f06f 0301 	mvn.w	r3, #1
 800d384:	e07c      	b.n	800d480 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	895b      	ldrh	r3, [r3, #10]
 800d390:	2b13      	cmp	r3, #19
 800d392:	d806      	bhi.n	800d3a2 <ip4_output_if_src+0x5e>
 800d394:	4b3c      	ldr	r3, [pc, #240]	; (800d488 <ip4_output_if_src+0x144>)
 800d396:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d39a:	493e      	ldr	r1, [pc, #248]	; (800d494 <ip4_output_if_src+0x150>)
 800d39c:	483c      	ldr	r0, [pc, #240]	; (800d490 <ip4_output_if_src+0x14c>)
 800d39e:	f001 f8d5 	bl	800e54c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d3a2:	69fb      	ldr	r3, [r7, #28]
 800d3a4:	78fa      	ldrb	r2, [r7, #3]
 800d3a6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d3ae:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681a      	ldr	r2, [r3, #0]
 800d3b4:	69fb      	ldr	r3, [r7, #28]
 800d3b6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d3b8:	8b7b      	ldrh	r3, [r7, #26]
 800d3ba:	089b      	lsrs	r3, r3, #2
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3c4:	b2da      	uxtb	r2, r3
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d3d0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	891b      	ldrh	r3, [r3, #8]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7f7 faa6 	bl	8004928 <lwip_htons>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	461a      	mov	r2, r3
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	719a      	strb	r2, [r3, #6]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d3ee:	4b2a      	ldr	r3, [pc, #168]	; (800d498 <ip4_output_if_src+0x154>)
 800d3f0:	881b      	ldrh	r3, [r3, #0]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7f7 fa98 	bl	8004928 <lwip_htons>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d400:	4b25      	ldr	r3, [pc, #148]	; (800d498 <ip4_output_if_src+0x154>)
 800d402:	881b      	ldrh	r3, [r3, #0]
 800d404:	3301      	adds	r3, #1
 800d406:	b29a      	uxth	r2, r3
 800d408:	4b23      	ldr	r3, [pc, #140]	; (800d498 <ip4_output_if_src+0x154>)
 800d40a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d40c:	68bb      	ldr	r3, [r7, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d104      	bne.n	800d41c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d412:	4b22      	ldr	r3, [pc, #136]	; (800d49c <ip4_output_if_src+0x158>)
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	69fb      	ldr	r3, [r7, #28]
 800d418:	60da      	str	r2, [r3, #12]
 800d41a:	e003      	b.n	800d424 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	681a      	ldr	r2, [r3, #0]
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	2200      	movs	r2, #0
 800d428:	729a      	strb	r2, [r3, #10]
 800d42a:	2200      	movs	r2, #0
 800d42c:	72da      	strb	r2, [r3, #11]
 800d42e:	e00f      	b.n	800d450 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	895b      	ldrh	r3, [r3, #10]
 800d434:	2b13      	cmp	r3, #19
 800d436:	d802      	bhi.n	800d43e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d438:	f06f 0301 	mvn.w	r3, #1
 800d43c:	e020      	b.n	800d480 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	691b      	ldr	r3, [r3, #16]
 800d448:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d44a:	f107 0314 	add.w	r3, r7, #20
 800d44e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00c      	beq.n	800d472 <ip4_output_if_src+0x12e>
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	891a      	ldrh	r2, [r3, #8]
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d460:	429a      	cmp	r2, r3
 800d462:	d906      	bls.n	800d472 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f000 fd53 	bl	800df14 <ip4_frag>
 800d46e:	4603      	mov	r3, r0
 800d470:	e006      	b.n	800d480 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d474:	695b      	ldr	r3, [r3, #20]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	68f9      	ldr	r1, [r7, #12]
 800d47a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d47c:	4798      	blx	r3
 800d47e:	4603      	mov	r3, r0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3720      	adds	r7, #32
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}
 800d488:	08011a14 	.word	0x08011a14
 800d48c:	08011a48 	.word	0x08011a48
 800d490:	08011a54 	.word	0x08011a54
 800d494:	08011a7c 	.word	0x08011a7c
 800d498:	200088be 	.word	0x200088be
 800d49c:	08011e5c 	.word	0x08011e5c

0800d4a0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b4:	d002      	beq.n	800d4bc <ip4_addr_isbroadcast_u32+0x1c>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d101      	bne.n	800d4c0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e02a      	b.n	800d516 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4c6:	f003 0302 	and.w	r3, r3, #2
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d101      	bne.n	800d4d2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	e021      	b.n	800d516 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	3304      	adds	r3, #4
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d101      	bne.n	800d4e2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	e019      	b.n	800d516 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d4e2:	68fa      	ldr	r2, [r7, #12]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	405a      	eors	r2, r3
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	3308      	adds	r3, #8
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4013      	ands	r3, r2
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d10d      	bne.n	800d514 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	3308      	adds	r3, #8
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	43da      	mvns	r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	3308      	adds	r3, #8
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d101      	bne.n	800d514 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d510:	2301      	movs	r3, #1
 800d512:	e000      	b.n	800d516 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d514:	2300      	movs	r3, #0
  }
}
 800d516:	4618      	mov	r0, r3
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
	...

0800d524 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d52a:	2300      	movs	r3, #0
 800d52c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d52e:	4b12      	ldr	r3, [pc, #72]	; (800d578 <ip_reass_tmr+0x54>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d534:	e018      	b.n	800d568 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	7fdb      	ldrb	r3, [r3, #31]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00b      	beq.n	800d556 <ip_reass_tmr+0x32>
      r->timer--;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	7fdb      	ldrb	r3, [r3, #31]
 800d542:	3b01      	subs	r3, #1
 800d544:	b2da      	uxtb	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	e008      	b.n	800d568 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d560:	68b9      	ldr	r1, [r7, #8]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f80a 	bl	800d57c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1e3      	bne.n	800d536 <ip_reass_tmr+0x12>
    }
  }
}
 800d56e:	bf00      	nop
 800d570:	bf00      	nop
 800d572:	3710      	adds	r7, #16
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	200088c0 	.word	0x200088c0

0800d57c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b088      	sub	sp, #32
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d586:	2300      	movs	r3, #0
 800d588:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d58a:	683a      	ldr	r2, [r7, #0]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d105      	bne.n	800d59e <ip_reass_free_complete_datagram+0x22>
 800d592:	4b45      	ldr	r3, [pc, #276]	; (800d6a8 <ip_reass_free_complete_datagram+0x12c>)
 800d594:	22ab      	movs	r2, #171	; 0xab
 800d596:	4945      	ldr	r1, [pc, #276]	; (800d6ac <ip_reass_free_complete_datagram+0x130>)
 800d598:	4845      	ldr	r0, [pc, #276]	; (800d6b0 <ip_reass_free_complete_datagram+0x134>)
 800d59a:	f000 ffd7 	bl	800e54c <iprintf>
  if (prev != NULL) {
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00a      	beq.n	800d5ba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d005      	beq.n	800d5ba <ip_reass_free_complete_datagram+0x3e>
 800d5ae:	4b3e      	ldr	r3, [pc, #248]	; (800d6a8 <ip_reass_free_complete_datagram+0x12c>)
 800d5b0:	22ad      	movs	r2, #173	; 0xad
 800d5b2:	4940      	ldr	r1, [pc, #256]	; (800d6b4 <ip_reass_free_complete_datagram+0x138>)
 800d5b4:	483e      	ldr	r0, [pc, #248]	; (800d6b0 <ip_reass_free_complete_datagram+0x134>)
 800d5b6:	f000 ffc9 	bl	800e54c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	889b      	ldrh	r3, [r3, #4]
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d12a      	bne.n	800d622 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d5da:	69bb      	ldr	r3, [r7, #24]
 800d5dc:	6858      	ldr	r0, [r3, #4]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	3308      	adds	r3, #8
 800d5e2:	2214      	movs	r2, #20
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	f001 f88c 	bl	800e702 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d5ea:	2101      	movs	r1, #1
 800d5ec:	69b8      	ldr	r0, [r7, #24]
 800d5ee:	f7ff fc47 	bl	800ce80 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d5f2:	69b8      	ldr	r0, [r7, #24]
 800d5f4:	f7f8 fd7e 	bl	80060f4 <pbuf_clen>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d5fc:	8bfa      	ldrh	r2, [r7, #30]
 800d5fe:	8a7b      	ldrh	r3, [r7, #18]
 800d600:	4413      	add	r3, r2
 800d602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d606:	db05      	blt.n	800d614 <ip_reass_free_complete_datagram+0x98>
 800d608:	4b27      	ldr	r3, [pc, #156]	; (800d6a8 <ip_reass_free_complete_datagram+0x12c>)
 800d60a:	22bc      	movs	r2, #188	; 0xbc
 800d60c:	492a      	ldr	r1, [pc, #168]	; (800d6b8 <ip_reass_free_complete_datagram+0x13c>)
 800d60e:	4828      	ldr	r0, [pc, #160]	; (800d6b0 <ip_reass_free_complete_datagram+0x134>)
 800d610:	f000 ff9c 	bl	800e54c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d614:	8bfa      	ldrh	r2, [r7, #30]
 800d616:	8a7b      	ldrh	r3, [r7, #18]
 800d618:	4413      	add	r3, r2
 800d61a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d61c:	69b8      	ldr	r0, [r7, #24]
 800d61e:	f7f8 fce1 	bl	8005fe4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d628:	e01f      	b.n	800d66a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d63a:	68f8      	ldr	r0, [r7, #12]
 800d63c:	f7f8 fd5a 	bl	80060f4 <pbuf_clen>
 800d640:	4603      	mov	r3, r0
 800d642:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d644:	8bfa      	ldrh	r2, [r7, #30]
 800d646:	8a7b      	ldrh	r3, [r7, #18]
 800d648:	4413      	add	r3, r2
 800d64a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d64e:	db05      	blt.n	800d65c <ip_reass_free_complete_datagram+0xe0>
 800d650:	4b15      	ldr	r3, [pc, #84]	; (800d6a8 <ip_reass_free_complete_datagram+0x12c>)
 800d652:	22cc      	movs	r2, #204	; 0xcc
 800d654:	4918      	ldr	r1, [pc, #96]	; (800d6b8 <ip_reass_free_complete_datagram+0x13c>)
 800d656:	4816      	ldr	r0, [pc, #88]	; (800d6b0 <ip_reass_free_complete_datagram+0x134>)
 800d658:	f000 ff78 	bl	800e54c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d65c:	8bfa      	ldrh	r2, [r7, #30]
 800d65e:	8a7b      	ldrh	r3, [r7, #18]
 800d660:	4413      	add	r3, r2
 800d662:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f7f8 fcbd 	bl	8005fe4 <pbuf_free>
  while (p != NULL) {
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d1dc      	bne.n	800d62a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d670:	6839      	ldr	r1, [r7, #0]
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f8c2 	bl	800d7fc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d678:	4b10      	ldr	r3, [pc, #64]	; (800d6bc <ip_reass_free_complete_datagram+0x140>)
 800d67a:	881b      	ldrh	r3, [r3, #0]
 800d67c:	8bfa      	ldrh	r2, [r7, #30]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d905      	bls.n	800d68e <ip_reass_free_complete_datagram+0x112>
 800d682:	4b09      	ldr	r3, [pc, #36]	; (800d6a8 <ip_reass_free_complete_datagram+0x12c>)
 800d684:	22d2      	movs	r2, #210	; 0xd2
 800d686:	490e      	ldr	r1, [pc, #56]	; (800d6c0 <ip_reass_free_complete_datagram+0x144>)
 800d688:	4809      	ldr	r0, [pc, #36]	; (800d6b0 <ip_reass_free_complete_datagram+0x134>)
 800d68a:	f000 ff5f 	bl	800e54c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d68e:	4b0b      	ldr	r3, [pc, #44]	; (800d6bc <ip_reass_free_complete_datagram+0x140>)
 800d690:	881a      	ldrh	r2, [r3, #0]
 800d692:	8bfb      	ldrh	r3, [r7, #30]
 800d694:	1ad3      	subs	r3, r2, r3
 800d696:	b29a      	uxth	r2, r3
 800d698:	4b08      	ldr	r3, [pc, #32]	; (800d6bc <ip_reass_free_complete_datagram+0x140>)
 800d69a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d69c:	8bfb      	ldrh	r3, [r7, #30]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3720      	adds	r7, #32
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
 800d6a6:	bf00      	nop
 800d6a8:	08011aac 	.word	0x08011aac
 800d6ac:	08011ae8 	.word	0x08011ae8
 800d6b0:	08011af4 	.word	0x08011af4
 800d6b4:	08011b1c 	.word	0x08011b1c
 800d6b8:	08011b30 	.word	0x08011b30
 800d6bc:	200088c4 	.word	0x200088c4
 800d6c0:	08011b50 	.word	0x08011b50

0800d6c4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b08a      	sub	sp, #40	; 0x28
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d6e2:	4b28      	ldr	r3, [pc, #160]	; (800d784 <ip_reass_remove_oldest_datagram+0xc0>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d6e8:	e030      	b.n	800d74c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ec:	695a      	ldr	r2, [r3, #20]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d10c      	bne.n	800d710 <ip_reass_remove_oldest_datagram+0x4c>
 800d6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f8:	699a      	ldr	r2, [r3, #24]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	691b      	ldr	r3, [r3, #16]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d106      	bne.n	800d710 <ip_reass_remove_oldest_datagram+0x4c>
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d704:	899a      	ldrh	r2, [r3, #12]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	889b      	ldrh	r3, [r3, #4]
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d014      	beq.n	800d73a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	3301      	adds	r3, #1
 800d714:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d716:	6a3b      	ldr	r3, [r7, #32]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d104      	bne.n	800d726 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	61bb      	str	r3, [r7, #24]
 800d724:	e009      	b.n	800d73a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d728:	7fda      	ldrb	r2, [r3, #31]
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	7fdb      	ldrb	r3, [r3, #31]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d803      	bhi.n	800d73a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d734:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d744:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d1cb      	bne.n	800d6ea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d008      	beq.n	800d76a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d758:	69b9      	ldr	r1, [r7, #24]
 800d75a:	6a38      	ldr	r0, [r7, #32]
 800d75c:	f7ff ff0e 	bl	800d57c <ip_reass_free_complete_datagram>
 800d760:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	4413      	add	r3, r2
 800d768:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d76a:	697a      	ldr	r2, [r7, #20]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	da02      	bge.n	800d778 <ip_reass_remove_oldest_datagram+0xb4>
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	2b01      	cmp	r3, #1
 800d776:	dcac      	bgt.n	800d6d2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d778:	697b      	ldr	r3, [r7, #20]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3728      	adds	r7, #40	; 0x28
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	200088c0 	.word	0x200088c0

0800d788 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d792:	2004      	movs	r0, #4
 800d794:	f7f7 fd40 	bl	8005218 <memp_malloc>
 800d798:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d110      	bne.n	800d7c2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7ff ff8e 	bl	800d6c4 <ip_reass_remove_oldest_datagram>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	dc03      	bgt.n	800d7b8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d7b0:	2004      	movs	r0, #4
 800d7b2:	f7f7 fd31 	bl	8005218 <memp_malloc>
 800d7b6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d101      	bne.n	800d7c2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	e016      	b.n	800d7f0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d7c2:	2220      	movs	r2, #32
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f000 ff25 	bl	800e616 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	220f      	movs	r2, #15
 800d7d0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d7d2:	4b09      	ldr	r3, [pc, #36]	; (800d7f8 <ip_reass_enqueue_new_datagram+0x70>)
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d7da:	4a07      	ldr	r2, [pc, #28]	; (800d7f8 <ip_reass_enqueue_new_datagram+0x70>)
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3308      	adds	r3, #8
 800d7e4:	2214      	movs	r2, #20
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 ff8a 	bl	800e702 <memcpy>
  return ipr;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}
 800d7f8:	200088c0 	.word	0x200088c0

0800d7fc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d806:	4b10      	ldr	r3, [pc, #64]	; (800d848 <ip_reass_dequeue_datagram+0x4c>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d104      	bne.n	800d81a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a0c      	ldr	r2, [pc, #48]	; (800d848 <ip_reass_dequeue_datagram+0x4c>)
 800d816:	6013      	str	r3, [r2, #0]
 800d818:	e00d      	b.n	800d836 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d106      	bne.n	800d82e <ip_reass_dequeue_datagram+0x32>
 800d820:	4b0a      	ldr	r3, [pc, #40]	; (800d84c <ip_reass_dequeue_datagram+0x50>)
 800d822:	f240 1245 	movw	r2, #325	; 0x145
 800d826:	490a      	ldr	r1, [pc, #40]	; (800d850 <ip_reass_dequeue_datagram+0x54>)
 800d828:	480a      	ldr	r0, [pc, #40]	; (800d854 <ip_reass_dequeue_datagram+0x58>)
 800d82a:	f000 fe8f 	bl	800e54c <iprintf>
    prev->next = ipr->next;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d836:	6879      	ldr	r1, [r7, #4]
 800d838:	2004      	movs	r0, #4
 800d83a:	f7f7 fd5d 	bl	80052f8 <memp_free>
}
 800d83e:	bf00      	nop
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	200088c0 	.word	0x200088c0
 800d84c:	08011aac 	.word	0x08011aac
 800d850:	08011b74 	.word	0x08011b74
 800d854:	08011af4 	.word	0x08011af4

0800d858 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b08c      	sub	sp, #48	; 0x30
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d864:	2300      	movs	r3, #0
 800d866:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d868:	2301      	movs	r3, #1
 800d86a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	885b      	ldrh	r3, [r3, #2]
 800d876:	b29b      	uxth	r3, r3
 800d878:	4618      	mov	r0, r3
 800d87a:	f7f7 f855 	bl	8004928 <lwip_htons>
 800d87e:	4603      	mov	r3, r0
 800d880:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	f003 030f 	and.w	r3, r3, #15
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	009b      	lsls	r3, r3, #2
 800d88e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d890:	7e7b      	ldrb	r3, [r7, #25]
 800d892:	b29b      	uxth	r3, r3
 800d894:	8b7a      	ldrh	r2, [r7, #26]
 800d896:	429a      	cmp	r2, r3
 800d898:	d202      	bcs.n	800d8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d89a:	f04f 33ff 	mov.w	r3, #4294967295
 800d89e:	e135      	b.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d8a0:	7e7b      	ldrb	r3, [r7, #25]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	8b7a      	ldrh	r2, [r7, #26]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	88db      	ldrh	r3, [r3, #6]
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7f7 f839 	bl	8004928 <lwip_htons>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	00db      	lsls	r3, r3, #3
 800d8c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800d8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	701a      	strb	r2, [r3, #0]
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	705a      	strb	r2, [r3, #1]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	709a      	strb	r2, [r3, #2]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	8afa      	ldrh	r2, [r7, #22]
 800d8de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d8e0:	8afa      	ldrh	r2, [r7, #22]
 800d8e2:	8b7b      	ldrh	r3, [r7, #26]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	b29a      	uxth	r2, r3
 800d8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ee:	88db      	ldrh	r3, [r3, #6]
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	8afa      	ldrh	r2, [r7, #22]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	d902      	bls.n	800d8fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8fc:	e106      	b.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	627b      	str	r3, [r7, #36]	; 0x24
 800d904:	e068      	b.n	800d9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	889b      	ldrh	r3, [r3, #4]
 800d910:	b29a      	uxth	r2, r3
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	889b      	ldrh	r3, [r3, #4]
 800d916:	b29b      	uxth	r3, r3
 800d918:	429a      	cmp	r2, r3
 800d91a:	d235      	bcs.n	800d988 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d920:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d924:	2b00      	cmp	r3, #0
 800d926:	d020      	beq.n	800d96a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92a:	889b      	ldrh	r3, [r3, #4]
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d930:	88db      	ldrh	r3, [r3, #6]
 800d932:	b29b      	uxth	r3, r3
 800d934:	429a      	cmp	r2, r3
 800d936:	d307      	bcc.n	800d948 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d93a:	88db      	ldrh	r3, [r3, #6]
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	889b      	ldrh	r3, [r3, #4]
 800d942:	b29b      	uxth	r3, r3
 800d944:	429a      	cmp	r2, r3
 800d946:	d902      	bls.n	800d94e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d948:	f04f 33ff 	mov.w	r3, #4294967295
 800d94c:	e0de      	b.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d950:	68ba      	ldr	r2, [r7, #8]
 800d952:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d956:	88db      	ldrh	r3, [r3, #6]
 800d958:	b29a      	uxth	r2, r3
 800d95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95c:	889b      	ldrh	r3, [r3, #4]
 800d95e:	b29b      	uxth	r3, r3
 800d960:	429a      	cmp	r2, r3
 800d962:	d03d      	beq.n	800d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d964:	2300      	movs	r3, #0
 800d966:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d968:	e03a      	b.n	800d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d96c:	88db      	ldrh	r3, [r3, #6]
 800d96e:	b29a      	uxth	r2, r3
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	889b      	ldrh	r3, [r3, #4]
 800d974:	b29b      	uxth	r3, r3
 800d976:	429a      	cmp	r2, r3
 800d978:	d902      	bls.n	800d980 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d97a:	f04f 33ff 	mov.w	r3, #4294967295
 800d97e:	e0c5      	b.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	68ba      	ldr	r2, [r7, #8]
 800d984:	605a      	str	r2, [r3, #4]
      break;
 800d986:	e02b      	b.n	800d9e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98a:	889b      	ldrh	r3, [r3, #4]
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	889b      	ldrh	r3, [r3, #4]
 800d992:	b29b      	uxth	r3, r3
 800d994:	429a      	cmp	r2, r3
 800d996:	d102      	bne.n	800d99e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d998:	f04f 33ff 	mov.w	r3, #4294967295
 800d99c:	e0b6      	b.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a0:	889b      	ldrh	r3, [r3, #4]
 800d9a2:	b29a      	uxth	r2, r3
 800d9a4:	693b      	ldr	r3, [r7, #16]
 800d9a6:	88db      	ldrh	r3, [r3, #6]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d202      	bcs.n	800d9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b2:	e0ab      	b.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d009      	beq.n	800d9ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9bc:	88db      	ldrh	r3, [r3, #6]
 800d9be:	b29a      	uxth	r2, r3
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	889b      	ldrh	r3, [r3, #4]
 800d9c4:	b29b      	uxth	r3, r3
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d001      	beq.n	800d9ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d193      	bne.n	800d906 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d9de:	e000      	b.n	800d9e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d9e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d12d      	bne.n	800da44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d01c      	beq.n	800da28 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f0:	88db      	ldrh	r3, [r3, #6]
 800d9f2:	b29a      	uxth	r2, r3
 800d9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f6:	889b      	ldrh	r3, [r3, #4]
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d906      	bls.n	800da0c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d9fe:	4b45      	ldr	r3, [pc, #276]	; (800db14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da00:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800da04:	4944      	ldr	r1, [pc, #272]	; (800db18 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800da06:	4845      	ldr	r0, [pc, #276]	; (800db1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da08:	f000 fda0 	bl	800e54c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da0e:	68ba      	ldr	r2, [r7, #8]
 800da10:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da14:	88db      	ldrh	r3, [r3, #6]
 800da16:	b29a      	uxth	r2, r3
 800da18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da1a:	889b      	ldrh	r3, [r3, #4]
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	429a      	cmp	r2, r3
 800da20:	d010      	beq.n	800da44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800da22:	2300      	movs	r3, #0
 800da24:	623b      	str	r3, [r7, #32]
 800da26:	e00d      	b.n	800da44 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d006      	beq.n	800da3e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800da30:	4b38      	ldr	r3, [pc, #224]	; (800db14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800da32:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800da36:	493a      	ldr	r1, [pc, #232]	; (800db20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800da38:	4838      	ldr	r0, [pc, #224]	; (800db1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800da3a:	f000 fd87 	bl	800e54c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	68ba      	ldr	r2, [r7, #8]
 800da42:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d105      	bne.n	800da56 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	7f9b      	ldrb	r3, [r3, #30]
 800da4e:	f003 0301 	and.w	r3, r3, #1
 800da52:	2b00      	cmp	r3, #0
 800da54:	d059      	beq.n	800db0a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d04f      	beq.n	800dafc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	685b      	ldr	r3, [r3, #4]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d006      	beq.n	800da72 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	889b      	ldrh	r3, [r3, #4]
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d002      	beq.n	800da78 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800da72:	2300      	movs	r3, #0
 800da74:	623b      	str	r3, [r7, #32]
 800da76:	e041      	b.n	800dafc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800da78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800da7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800da82:	e012      	b.n	800daaa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800da84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800da8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da8c:	88db      	ldrh	r3, [r3, #6]
 800da8e:	b29a      	uxth	r2, r3
 800da90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da92:	889b      	ldrh	r3, [r3, #4]
 800da94:	b29b      	uxth	r3, r3
 800da96:	429a      	cmp	r2, r3
 800da98:	d002      	beq.n	800daa0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800da9a:	2300      	movs	r3, #0
 800da9c:	623b      	str	r3, [r7, #32]
            break;
 800da9e:	e007      	b.n	800dab0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800daa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daac:	2b00      	cmp	r3, #0
 800daae:	d1e9      	bne.n	800da84 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dab0:	6a3b      	ldr	r3, [r7, #32]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d022      	beq.n	800dafc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d106      	bne.n	800dacc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800dabe:	4b15      	ldr	r3, [pc, #84]	; (800db14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dac0:	f240 12df 	movw	r2, #479	; 0x1df
 800dac4:	4917      	ldr	r1, [pc, #92]	; (800db24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dac6:	4815      	ldr	r0, [pc, #84]	; (800db1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dac8:	f000 fd40 	bl	800e54c <iprintf>
          LWIP_ASSERT("sanity check",
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d106      	bne.n	800dae6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800dad8:	4b0e      	ldr	r3, [pc, #56]	; (800db14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dada:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dade:	4911      	ldr	r1, [pc, #68]	; (800db24 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dae0:	480e      	ldr	r0, [pc, #56]	; (800db1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dae2:	f000 fd33 	bl	800e54c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d006      	beq.n	800dafc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800daee:	4b09      	ldr	r3, [pc, #36]	; (800db14 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800daf0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800daf4:	490c      	ldr	r1, [pc, #48]	; (800db28 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800daf6:	4809      	ldr	r0, [pc, #36]	; (800db1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800daf8:	f000 fd28 	bl	800e54c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dafc:	6a3b      	ldr	r3, [r7, #32]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	bf14      	ite	ne
 800db02:	2301      	movne	r3, #1
 800db04:	2300      	moveq	r3, #0
 800db06:	b2db      	uxtb	r3, r3
 800db08:	e000      	b.n	800db0c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3730      	adds	r7, #48	; 0x30
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	08011aac 	.word	0x08011aac
 800db18:	08011b90 	.word	0x08011b90
 800db1c:	08011af4 	.word	0x08011af4
 800db20:	08011bb0 	.word	0x08011bb0
 800db24:	08011be8 	.word	0x08011be8
 800db28:	08011bf8 	.word	0x08011bf8

0800db2c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08e      	sub	sp, #56	; 0x38
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	f003 030f 	and.w	r3, r3, #15
 800db42:	b2db      	uxtb	r3, r3
 800db44:	009b      	lsls	r3, r3, #2
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b14      	cmp	r3, #20
 800db4a:	f040 8171 	bne.w	800de30 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800db4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db50:	88db      	ldrh	r3, [r3, #6]
 800db52:	b29b      	uxth	r3, r3
 800db54:	4618      	mov	r0, r3
 800db56:	f7f6 fee7 	bl	8004928 <lwip_htons>
 800db5a:	4603      	mov	r3, r0
 800db5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800db60:	b29b      	uxth	r3, r3
 800db62:	00db      	lsls	r3, r3, #3
 800db64:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800db66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db68:	885b      	ldrh	r3, [r3, #2]
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7f6 fedb 	bl	8004928 <lwip_htons>
 800db72:	4603      	mov	r3, r0
 800db74:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800db76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	f003 030f 	and.w	r3, r3, #15
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800db86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db8e:	429a      	cmp	r2, r3
 800db90:	f0c0 8150 	bcc.w	800de34 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800db94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800db98:	b29b      	uxth	r3, r3
 800db9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7f8 faa7 	bl	80060f4 <pbuf_clen>
 800dba6:	4603      	mov	r3, r0
 800dba8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800dbaa:	4b8c      	ldr	r3, [pc, #560]	; (800dddc <ip4_reass+0x2b0>)
 800dbac:	881b      	ldrh	r3, [r3, #0]
 800dbae:	461a      	mov	r2, r3
 800dbb0:	8c3b      	ldrh	r3, [r7, #32]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	2b0a      	cmp	r3, #10
 800dbb6:	dd10      	ble.n	800dbda <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dbb8:	8c3b      	ldrh	r3, [r7, #32]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbbe:	f7ff fd81 	bl	800d6c4 <ip_reass_remove_oldest_datagram>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f000 8137 	beq.w	800de38 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800dbca:	4b84      	ldr	r3, [pc, #528]	; (800dddc <ip4_reass+0x2b0>)
 800dbcc:	881b      	ldrh	r3, [r3, #0]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	8c3b      	ldrh	r3, [r7, #32]
 800dbd2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800dbd4:	2b0a      	cmp	r3, #10
 800dbd6:	f300 812f 	bgt.w	800de38 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dbda:	4b81      	ldr	r3, [pc, #516]	; (800dde0 <ip4_reass+0x2b4>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	633b      	str	r3, [r7, #48]	; 0x30
 800dbe0:	e015      	b.n	800dc0e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	695a      	ldr	r2, [r3, #20]
 800dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe8:	68db      	ldr	r3, [r3, #12]
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d10c      	bne.n	800dc08 <ip4_reass+0xdc>
 800dbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf0:	699a      	ldr	r2, [r3, #24]
 800dbf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf4:	691b      	ldr	r3, [r3, #16]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d106      	bne.n	800dc08 <ip4_reass+0xdc>
 800dbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfc:	899a      	ldrh	r2, [r3, #12]
 800dbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc00:	889b      	ldrh	r3, [r3, #4]
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d006      	beq.n	800dc16 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	633b      	str	r3, [r7, #48]	; 0x30
 800dc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d1e6      	bne.n	800dbe2 <ip4_reass+0xb6>
 800dc14:	e000      	b.n	800dc18 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800dc16:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800dc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d109      	bne.n	800dc32 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800dc1e:	8c3b      	ldrh	r3, [r7, #32]
 800dc20:	4619      	mov	r1, r3
 800dc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc24:	f7ff fdb0 	bl	800d788 <ip_reass_enqueue_new_datagram>
 800dc28:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800dc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d11c      	bne.n	800dc6a <ip4_reass+0x13e>
      goto nullreturn;
 800dc30:	e105      	b.n	800de3e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc34:	88db      	ldrh	r3, [r3, #6]
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7f6 fe75 	bl	8004928 <lwip_htons>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d110      	bne.n	800dc6a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	89db      	ldrh	r3, [r3, #14]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7f6 fe6b 	bl	8004928 <lwip_htons>
 800dc52:	4603      	mov	r3, r0
 800dc54:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d006      	beq.n	800dc6a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5e:	3308      	adds	r3, #8
 800dc60:	2214      	movs	r2, #20
 800dc62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc64:	4618      	mov	r0, r3
 800dc66:	f000 fd4c 	bl	800e702 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	88db      	ldrh	r3, [r3, #6]
 800dc6e:	b29b      	uxth	r3, r3
 800dc70:	f003 0320 	and.w	r3, r3, #32
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	bf0c      	ite	eq
 800dc78:	2301      	moveq	r3, #1
 800dc7a:	2300      	movne	r3, #0
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d00e      	beq.n	800dca4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800dc86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc8a:	4413      	add	r3, r2
 800dc8c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800dc8e:	8b7a      	ldrh	r2, [r7, #26]
 800dc90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc92:	429a      	cmp	r2, r3
 800dc94:	f0c0 80a0 	bcc.w	800ddd8 <ip4_reass+0x2ac>
 800dc98:	8b7b      	ldrh	r3, [r7, #26]
 800dc9a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	f200 809a 	bhi.w	800ddd8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800dca4:	69fa      	ldr	r2, [r7, #28]
 800dca6:	6879      	ldr	r1, [r7, #4]
 800dca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dcaa:	f7ff fdd5 	bl	800d858 <ip_reass_chain_frag_into_datagram_and_validate>
 800dcae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb6:	f000 809b 	beq.w	800ddf0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dcba:	4b48      	ldr	r3, [pc, #288]	; (800dddc <ip4_reass+0x2b0>)
 800dcbc:	881a      	ldrh	r2, [r3, #0]
 800dcbe:	8c3b      	ldrh	r3, [r7, #32]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	4b45      	ldr	r3, [pc, #276]	; (800dddc <ip4_reass+0x2b0>)
 800dcc6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d00d      	beq.n	800dcea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800dcce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dcd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dcd2:	4413      	add	r3, r2
 800dcd4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	8a7a      	ldrh	r2, [r7, #18]
 800dcda:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcde:	7f9b      	ldrb	r3, [r3, #30]
 800dce0:	f043 0301 	orr.w	r3, r3, #1
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dce8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d171      	bne.n	800ddd4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcf2:	8b9b      	ldrh	r3, [r3, #28]
 800dcf4:	3314      	adds	r3, #20
 800dcf6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800dd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800dd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd0c:	3308      	adds	r3, #8
 800dd0e:	2214      	movs	r2, #20
 800dd10:	4619      	mov	r1, r3
 800dd12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd14:	f000 fcf5 	bl	800e702 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800dd18:	8a3b      	ldrh	r3, [r7, #16]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7f6 fe04 	bl	8004928 <lwip_htons>
 800dd20:	4603      	mov	r3, r0
 800dd22:	461a      	mov	r2, r3
 800dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd26:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	719a      	strb	r2, [r3, #6]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	2200      	movs	r2, #0
 800dd36:	729a      	strb	r2, [r3, #10]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800dd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800dd42:	e00d      	b.n	800dd60 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800dd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800dd4a:	2114      	movs	r1, #20
 800dd4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dd4e:	f7f8 f8c3 	bl	8005ed8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800dd52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7f8 fa07 	bl	8006168 <pbuf_cat>
      r = iprh->next_pbuf;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800dd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d1ee      	bne.n	800dd44 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800dd66:	4b1e      	ldr	r3, [pc, #120]	; (800dde0 <ip4_reass+0x2b4>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d102      	bne.n	800dd76 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800dd70:	2300      	movs	r3, #0
 800dd72:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd74:	e010      	b.n	800dd98 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dd76:	4b1a      	ldr	r3, [pc, #104]	; (800dde0 <ip4_reass+0x2b4>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd7c:	e007      	b.n	800dd8e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800dd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d006      	beq.n	800dd96 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800dd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1f4      	bne.n	800dd7e <ip4_reass+0x252>
 800dd94:	e000      	b.n	800dd98 <ip4_reass+0x26c>
          break;
 800dd96:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dd98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd9c:	f7ff fd2e 	bl	800d7fc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7f8 f9a7 	bl	80060f4 <pbuf_clen>
 800dda6:	4603      	mov	r3, r0
 800dda8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ddaa:	4b0c      	ldr	r3, [pc, #48]	; (800dddc <ip4_reass+0x2b0>)
 800ddac:	881b      	ldrh	r3, [r3, #0]
 800ddae:	8c3a      	ldrh	r2, [r7, #32]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d906      	bls.n	800ddc2 <ip4_reass+0x296>
 800ddb4:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <ip4_reass+0x2b8>)
 800ddb6:	f240 229b 	movw	r2, #667	; 0x29b
 800ddba:	490b      	ldr	r1, [pc, #44]	; (800dde8 <ip4_reass+0x2bc>)
 800ddbc:	480b      	ldr	r0, [pc, #44]	; (800ddec <ip4_reass+0x2c0>)
 800ddbe:	f000 fbc5 	bl	800e54c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ddc2:	4b06      	ldr	r3, [pc, #24]	; (800dddc <ip4_reass+0x2b0>)
 800ddc4:	881a      	ldrh	r2, [r3, #0]
 800ddc6:	8c3b      	ldrh	r3, [r7, #32]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	4b03      	ldr	r3, [pc, #12]	; (800dddc <ip4_reass+0x2b0>)
 800ddce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	e038      	b.n	800de46 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	e036      	b.n	800de46 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800ddd8:	bf00      	nop
 800ddda:	e00a      	b.n	800ddf2 <ip4_reass+0x2c6>
 800dddc:	200088c4 	.word	0x200088c4
 800dde0:	200088c0 	.word	0x200088c0
 800dde4:	08011aac 	.word	0x08011aac
 800dde8:	08011c1c 	.word	0x08011c1c
 800ddec:	08011af4 	.word	0x08011af4
    goto nullreturn_ipr;
 800ddf0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ddf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d106      	bne.n	800de06 <ip4_reass+0x2da>
 800ddf8:	4b15      	ldr	r3, [pc, #84]	; (800de50 <ip4_reass+0x324>)
 800ddfa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ddfe:	4915      	ldr	r1, [pc, #84]	; (800de54 <ip4_reass+0x328>)
 800de00:	4815      	ldr	r0, [pc, #84]	; (800de58 <ip4_reass+0x32c>)
 800de02:	f000 fba3 	bl	800e54c <iprintf>
  if (ipr->p == NULL) {
 800de06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d116      	bne.n	800de3c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800de0e:	4b13      	ldr	r3, [pc, #76]	; (800de5c <ip4_reass+0x330>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de14:	429a      	cmp	r2, r3
 800de16:	d006      	beq.n	800de26 <ip4_reass+0x2fa>
 800de18:	4b0d      	ldr	r3, [pc, #52]	; (800de50 <ip4_reass+0x324>)
 800de1a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800de1e:	4910      	ldr	r1, [pc, #64]	; (800de60 <ip4_reass+0x334>)
 800de20:	480d      	ldr	r0, [pc, #52]	; (800de58 <ip4_reass+0x32c>)
 800de22:	f000 fb93 	bl	800e54c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800de26:	2100      	movs	r1, #0
 800de28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800de2a:	f7ff fce7 	bl	800d7fc <ip_reass_dequeue_datagram>
 800de2e:	e006      	b.n	800de3e <ip4_reass+0x312>
    goto nullreturn;
 800de30:	bf00      	nop
 800de32:	e004      	b.n	800de3e <ip4_reass+0x312>
    goto nullreturn;
 800de34:	bf00      	nop
 800de36:	e002      	b.n	800de3e <ip4_reass+0x312>
      goto nullreturn;
 800de38:	bf00      	nop
 800de3a:	e000      	b.n	800de3e <ip4_reass+0x312>
  }

nullreturn:
 800de3c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7f8 f8d0 	bl	8005fe4 <pbuf_free>
  return NULL;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	3738      	adds	r7, #56	; 0x38
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	08011aac 	.word	0x08011aac
 800de54:	08011c38 	.word	0x08011c38
 800de58:	08011af4 	.word	0x08011af4
 800de5c:	200088c0 	.word	0x200088c0
 800de60:	08011c44 	.word	0x08011c44

0800de64 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800de68:	2005      	movs	r0, #5
 800de6a:	f7f7 f9d5 	bl	8005218 <memp_malloc>
 800de6e:	4603      	mov	r3, r0
}
 800de70:	4618      	mov	r0, r3
 800de72:	bd80      	pop	{r7, pc}

0800de74 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d106      	bne.n	800de90 <ip_frag_free_pbuf_custom_ref+0x1c>
 800de82:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800de84:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800de88:	4906      	ldr	r1, [pc, #24]	; (800dea4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800de8a:	4807      	ldr	r0, [pc, #28]	; (800dea8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800de8c:	f000 fb5e 	bl	800e54c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800de90:	6879      	ldr	r1, [r7, #4]
 800de92:	2005      	movs	r0, #5
 800de94:	f7f7 fa30 	bl	80052f8 <memp_free>
}
 800de98:	bf00      	nop
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	08011aac 	.word	0x08011aac
 800dea4:	08011c64 	.word	0x08011c64
 800dea8:	08011af4 	.word	0x08011af4

0800deac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d106      	bne.n	800decc <ipfrag_free_pbuf_custom+0x20>
 800debe:	4b11      	ldr	r3, [pc, #68]	; (800df04 <ipfrag_free_pbuf_custom+0x58>)
 800dec0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800dec4:	4910      	ldr	r1, [pc, #64]	; (800df08 <ipfrag_free_pbuf_custom+0x5c>)
 800dec6:	4811      	ldr	r0, [pc, #68]	; (800df0c <ipfrag_free_pbuf_custom+0x60>)
 800dec8:	f000 fb40 	bl	800e54c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d006      	beq.n	800dee2 <ipfrag_free_pbuf_custom+0x36>
 800ded4:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <ipfrag_free_pbuf_custom+0x58>)
 800ded6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800deda:	490d      	ldr	r1, [pc, #52]	; (800df10 <ipfrag_free_pbuf_custom+0x64>)
 800dedc:	480b      	ldr	r0, [pc, #44]	; (800df0c <ipfrag_free_pbuf_custom+0x60>)
 800dede:	f000 fb35 	bl	800e54c <iprintf>
  if (pcr->original != NULL) {
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	695b      	ldr	r3, [r3, #20]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d004      	beq.n	800def4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	695b      	ldr	r3, [r3, #20]
 800deee:	4618      	mov	r0, r3
 800def0:	f7f8 f878 	bl	8005fe4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800def4:	68f8      	ldr	r0, [r7, #12]
 800def6:	f7ff ffbd 	bl	800de74 <ip_frag_free_pbuf_custom_ref>
}
 800defa:	bf00      	nop
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	08011aac 	.word	0x08011aac
 800df08:	08011c70 	.word	0x08011c70
 800df0c:	08011af4 	.word	0x08011af4
 800df10:	08011c7c 	.word	0x08011c7c

0800df14 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b094      	sub	sp, #80	; 0x50
 800df18:	af02      	add	r7, sp, #8
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800df20:	2300      	movs	r3, #0
 800df22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800df2a:	3b14      	subs	r3, #20
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	da00      	bge.n	800df32 <ip4_frag+0x1e>
 800df30:	3307      	adds	r3, #7
 800df32:	10db      	asrs	r3, r3, #3
 800df34:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800df36:	2314      	movs	r3, #20
 800df38:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800df40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df42:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800df44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df46:	781b      	ldrb	r3, [r3, #0]
 800df48:	f003 030f 	and.w	r3, r3, #15
 800df4c:	b2db      	uxtb	r3, r3
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b14      	cmp	r3, #20
 800df54:	d002      	beq.n	800df5c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800df56:	f06f 0305 	mvn.w	r3, #5
 800df5a:	e110      	b.n	800e17e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	895b      	ldrh	r3, [r3, #10]
 800df60:	2b13      	cmp	r3, #19
 800df62:	d809      	bhi.n	800df78 <ip4_frag+0x64>
 800df64:	4b88      	ldr	r3, [pc, #544]	; (800e188 <ip4_frag+0x274>)
 800df66:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800df6a:	4988      	ldr	r1, [pc, #544]	; (800e18c <ip4_frag+0x278>)
 800df6c:	4888      	ldr	r0, [pc, #544]	; (800e190 <ip4_frag+0x27c>)
 800df6e:	f000 faed 	bl	800e54c <iprintf>
 800df72:	f06f 0305 	mvn.w	r3, #5
 800df76:	e102      	b.n	800e17e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800df78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7a:	88db      	ldrh	r3, [r3, #6]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	4618      	mov	r0, r3
 800df80:	f7f6 fcd2 	bl	8004928 <lwip_htons>
 800df84:	4603      	mov	r3, r0
 800df86:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800df88:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800df92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800df94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df98:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	891b      	ldrh	r3, [r3, #8]
 800df9e:	3b14      	subs	r3, #20
 800dfa0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800dfa4:	e0e1      	b.n	800e16a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dfa6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dfa8:	00db      	lsls	r3, r3, #3
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	bf28      	it	cs
 800dfb4:	4613      	movcs	r3, r2
 800dfb6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dfb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dfbc:	2114      	movs	r1, #20
 800dfbe:	200e      	movs	r0, #14
 800dfc0:	f7f7 fd2c 	bl	8005a1c <pbuf_alloc>
 800dfc4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f000 80d5 	beq.w	800e178 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd0:	895b      	ldrh	r3, [r3, #10]
 800dfd2:	2b13      	cmp	r3, #19
 800dfd4:	d806      	bhi.n	800dfe4 <ip4_frag+0xd0>
 800dfd6:	4b6c      	ldr	r3, [pc, #432]	; (800e188 <ip4_frag+0x274>)
 800dfd8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800dfdc:	496d      	ldr	r1, [pc, #436]	; (800e194 <ip4_frag+0x280>)
 800dfde:	486c      	ldr	r0, [pc, #432]	; (800e190 <ip4_frag+0x27c>)
 800dfe0:	f000 fab4 	bl	800e54c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	2214      	movs	r2, #20
 800dfea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dfec:	4618      	mov	r0, r3
 800dfee:	f000 fb88 	bl	800e702 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff4:	685b      	ldr	r3, [r3, #4]
 800dff6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800dff8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800dffa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800dffe:	e064      	b.n	800e0ca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	895a      	ldrh	r2, [r3, #10]
 800e004:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e006:	1ad3      	subs	r3, r2, r3
 800e008:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	895b      	ldrh	r3, [r3, #10]
 800e00e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e010:	429a      	cmp	r2, r3
 800e012:	d906      	bls.n	800e022 <ip4_frag+0x10e>
 800e014:	4b5c      	ldr	r3, [pc, #368]	; (800e188 <ip4_frag+0x274>)
 800e016:	f240 322d 	movw	r2, #813	; 0x32d
 800e01a:	495f      	ldr	r1, [pc, #380]	; (800e198 <ip4_frag+0x284>)
 800e01c:	485c      	ldr	r0, [pc, #368]	; (800e190 <ip4_frag+0x27c>)
 800e01e:	f000 fa95 	bl	800e54c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e022:	8bfa      	ldrh	r2, [r7, #30]
 800e024:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e028:	4293      	cmp	r3, r2
 800e02a:	bf28      	it	cs
 800e02c:	4613      	movcs	r3, r2
 800e02e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e032:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e036:	2b00      	cmp	r3, #0
 800e038:	d105      	bne.n	800e046 <ip4_frag+0x132>
        poff = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	60fb      	str	r3, [r7, #12]
        continue;
 800e044:	e041      	b.n	800e0ca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e046:	f7ff ff0d 	bl	800de64 <ip_frag_alloc_pbuf_custom_ref>
 800e04a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e04c:	69bb      	ldr	r3, [r7, #24]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d103      	bne.n	800e05a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e052:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e054:	f7f7 ffc6 	bl	8005fe4 <pbuf_free>
        goto memerr;
 800e058:	e08f      	b.n	800e17a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e05a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e060:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e062:	4413      	add	r3, r2
 800e064:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e068:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e06c:	9201      	str	r2, [sp, #4]
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	4603      	mov	r3, r0
 800e072:	2241      	movs	r2, #65	; 0x41
 800e074:	2000      	movs	r0, #0
 800e076:	f7f7 fdfb 	bl	8005c70 <pbuf_alloced_custom>
 800e07a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d106      	bne.n	800e090 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e082:	69b8      	ldr	r0, [r7, #24]
 800e084:	f7ff fef6 	bl	800de74 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e088:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e08a:	f7f7 ffab 	bl	8005fe4 <pbuf_free>
        goto memerr;
 800e08e:	e074      	b.n	800e17a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f7f8 f847 	bl	8006124 <pbuf_ref>
      pcr->original = p;
 800e096:	69bb      	ldr	r3, [r7, #24]
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	4a3f      	ldr	r2, [pc, #252]	; (800e19c <ip4_frag+0x288>)
 800e0a0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e0a2:	6979      	ldr	r1, [r7, #20]
 800e0a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0a6:	f7f8 f85f 	bl	8006168 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e0aa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e0ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0b2:	1ad3      	subs	r3, r2, r3
 800e0b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e0b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d004      	beq.n	800e0ca <ip4_frag+0x1b6>
        poff = 0;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e0ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d196      	bne.n	800e000 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e0d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e0d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e0d8:	4413      	add	r3, r2
 800e0da:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e0e0:	f1a3 0213 	sub.w	r2, r3, #19
 800e0e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	bfcc      	ite	gt
 800e0ec:	2301      	movgt	r3, #1
 800e0ee:	2300      	movle	r3, #0
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e0f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e0f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e0fe:	6a3b      	ldr	r3, [r7, #32]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d002      	beq.n	800e10a <ip4_frag+0x1f6>
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	2b00      	cmp	r3, #0
 800e108:	d003      	beq.n	800e112 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e10a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e10c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e110:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e112:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e114:	4618      	mov	r0, r3
 800e116:	f7f6 fc07 	bl	8004928 <lwip_htons>
 800e11a:	4603      	mov	r3, r0
 800e11c:	461a      	mov	r2, r3
 800e11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e120:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e122:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e124:	3314      	adds	r3, #20
 800e126:	b29b      	uxth	r3, r3
 800e128:	4618      	mov	r0, r3
 800e12a:	f7f6 fbfd 	bl	8004928 <lwip_htons>
 800e12e:	4603      	mov	r3, r0
 800e130:	461a      	mov	r2, r3
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e138:	2200      	movs	r2, #0
 800e13a:	729a      	strb	r2, [r3, #10]
 800e13c:	2200      	movs	r2, #0
 800e13e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	695b      	ldr	r3, [r3, #20]
 800e144:	687a      	ldr	r2, [r7, #4]
 800e146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e148:	68b8      	ldr	r0, [r7, #8]
 800e14a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e14c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e14e:	f7f7 ff49 	bl	8005fe4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e152:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e156:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e158:	1ad3      	subs	r3, r2, r3
 800e15a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e15e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e162:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e164:	4413      	add	r3, r2
 800e166:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e16a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e16e:	2b00      	cmp	r3, #0
 800e170:	f47f af19 	bne.w	800dfa6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e174:	2300      	movs	r3, #0
 800e176:	e002      	b.n	800e17e <ip4_frag+0x26a>
      goto memerr;
 800e178:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e17a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3748      	adds	r7, #72	; 0x48
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}
 800e186:	bf00      	nop
 800e188:	08011aac 	.word	0x08011aac
 800e18c:	08011c88 	.word	0x08011c88
 800e190:	08011af4 	.word	0x08011af4
 800e194:	08011ca4 	.word	0x08011ca4
 800e198:	08011cc4 	.word	0x08011cc4
 800e19c:	0800dead 	.word	0x0800dead

0800e1a0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b086      	sub	sp, #24
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e1aa:	230e      	movs	r3, #14
 800e1ac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	895b      	ldrh	r3, [r3, #10]
 800e1b2:	2b0e      	cmp	r3, #14
 800e1b4:	d96e      	bls.n	800e294 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	7bdb      	ldrb	r3, [r3, #15]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	685b      	ldr	r3, [r3, #4]
 800e1d0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	7b1a      	ldrb	r2, [r3, #12]
 800e1d6:	7b5b      	ldrb	r3, [r3, #13]
 800e1d8:	021b      	lsls	r3, r3, #8
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	f003 0301 	and.w	r3, r3, #1
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d023      	beq.n	800e232 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d10f      	bne.n	800e212 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	785b      	ldrb	r3, [r3, #1]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d11b      	bne.n	800e232 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e1fe:	2b5e      	cmp	r3, #94	; 0x5e
 800e200:	d117      	bne.n	800e232 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	7b5b      	ldrb	r3, [r3, #13]
 800e206:	f043 0310 	orr.w	r3, r3, #16
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	735a      	strb	r2, [r3, #13]
 800e210:	e00f      	b.n	800e232 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	2206      	movs	r2, #6
 800e216:	4928      	ldr	r1, [pc, #160]	; (800e2b8 <ethernet_input+0x118>)
 800e218:	4618      	mov	r0, r3
 800e21a:	f000 f9ec 	bl	800e5f6 <memcmp>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d106      	bne.n	800e232 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	7b5b      	ldrb	r3, [r3, #13]
 800e228:	f043 0308 	orr.w	r3, r3, #8
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e232:	89fb      	ldrh	r3, [r7, #14]
 800e234:	2b08      	cmp	r3, #8
 800e236:	d003      	beq.n	800e240 <ethernet_input+0xa0>
 800e238:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e23c:	d014      	beq.n	800e268 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e23e:	e032      	b.n	800e2a6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e246:	f003 0308 	and.w	r3, r3, #8
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d024      	beq.n	800e298 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e24e:	8afb      	ldrh	r3, [r7, #22]
 800e250:	4619      	mov	r1, r3
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7f7 fe40 	bl	8005ed8 <pbuf_remove_header>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d11e      	bne.n	800e29c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e25e:	6839      	ldr	r1, [r7, #0]
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f7fe ff21 	bl	800d0a8 <ip4_input>
      break;
 800e266:	e013      	b.n	800e290 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e26e:	f003 0308 	and.w	r3, r3, #8
 800e272:	2b00      	cmp	r3, #0
 800e274:	d014      	beq.n	800e2a0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e276:	8afb      	ldrh	r3, [r7, #22]
 800e278:	4619      	mov	r1, r3
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7f7 fe2c 	bl	8005ed8 <pbuf_remove_header>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d10e      	bne.n	800e2a4 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e286:	6839      	ldr	r1, [r7, #0]
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f7fe f8c1 	bl	800c410 <etharp_input>
      break;
 800e28e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	e00c      	b.n	800e2ae <ethernet_input+0x10e>
    goto free_and_return;
 800e294:	bf00      	nop
 800e296:	e006      	b.n	800e2a6 <ethernet_input+0x106>
        goto free_and_return;
 800e298:	bf00      	nop
 800e29a:	e004      	b.n	800e2a6 <ethernet_input+0x106>
        goto free_and_return;
 800e29c:	bf00      	nop
 800e29e:	e002      	b.n	800e2a6 <ethernet_input+0x106>
        goto free_and_return;
 800e2a0:	bf00      	nop
 800e2a2:	e000      	b.n	800e2a6 <ethernet_input+0x106>
        goto free_and_return;
 800e2a4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7f7 fe9c 	bl	8005fe4 <pbuf_free>
  return ERR_OK;
 800e2ac:	2300      	movs	r3, #0
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3718      	adds	r7, #24
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}
 800e2b6:	bf00      	nop
 800e2b8:	08011e60 	.word	0x08011e60

0800e2bc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b086      	sub	sp, #24
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
 800e2c8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e2ca:	8c3b      	ldrh	r3, [r7, #32]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7f6 fb2b 	bl	8004928 <lwip_htons>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e2d6:	210e      	movs	r1, #14
 800e2d8:	68b8      	ldr	r0, [r7, #8]
 800e2da:	f7f7 fded 	bl	8005eb8 <pbuf_add_header>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d125      	bne.n	800e330 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	8afa      	ldrh	r2, [r7, #22]
 800e2ee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	2206      	movs	r2, #6
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f000 fa03 	bl	800e702 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	3306      	adds	r3, #6
 800e300:	2206      	movs	r2, #6
 800e302:	6879      	ldr	r1, [r7, #4]
 800e304:	4618      	mov	r0, r3
 800e306:	f000 f9fc 	bl	800e702 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e310:	2b06      	cmp	r3, #6
 800e312:	d006      	beq.n	800e322 <ethernet_output+0x66>
 800e314:	4b0a      	ldr	r3, [pc, #40]	; (800e340 <ethernet_output+0x84>)
 800e316:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e31a:	490a      	ldr	r1, [pc, #40]	; (800e344 <ethernet_output+0x88>)
 800e31c:	480a      	ldr	r0, [pc, #40]	; (800e348 <ethernet_output+0x8c>)
 800e31e:	f000 f915 	bl	800e54c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	699b      	ldr	r3, [r3, #24]
 800e326:	68b9      	ldr	r1, [r7, #8]
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	4798      	blx	r3
 800e32c:	4603      	mov	r3, r0
 800e32e:	e002      	b.n	800e336 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e330:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e332:	f06f 0301 	mvn.w	r3, #1
}
 800e336:	4618      	mov	r0, r3
 800e338:	3718      	adds	r7, #24
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	08011cd4 	.word	0x08011cd4
 800e344:	08011d0c 	.word	0x08011d0c
 800e348:	08011d40 	.word	0x08011d40

0800e34c <rand>:
 800e34c:	4b16      	ldr	r3, [pc, #88]	; (800e3a8 <rand+0x5c>)
 800e34e:	b510      	push	{r4, lr}
 800e350:	681c      	ldr	r4, [r3, #0]
 800e352:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e354:	b9b3      	cbnz	r3, 800e384 <rand+0x38>
 800e356:	2018      	movs	r0, #24
 800e358:	f000 fa4c 	bl	800e7f4 <malloc>
 800e35c:	4602      	mov	r2, r0
 800e35e:	6320      	str	r0, [r4, #48]	; 0x30
 800e360:	b920      	cbnz	r0, 800e36c <rand+0x20>
 800e362:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <rand+0x60>)
 800e364:	4812      	ldr	r0, [pc, #72]	; (800e3b0 <rand+0x64>)
 800e366:	2152      	movs	r1, #82	; 0x52
 800e368:	f000 f9da 	bl	800e720 <__assert_func>
 800e36c:	4911      	ldr	r1, [pc, #68]	; (800e3b4 <rand+0x68>)
 800e36e:	4b12      	ldr	r3, [pc, #72]	; (800e3b8 <rand+0x6c>)
 800e370:	e9c0 1300 	strd	r1, r3, [r0]
 800e374:	4b11      	ldr	r3, [pc, #68]	; (800e3bc <rand+0x70>)
 800e376:	6083      	str	r3, [r0, #8]
 800e378:	230b      	movs	r3, #11
 800e37a:	8183      	strh	r3, [r0, #12]
 800e37c:	2100      	movs	r1, #0
 800e37e:	2001      	movs	r0, #1
 800e380:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e384:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800e386:	480e      	ldr	r0, [pc, #56]	; (800e3c0 <rand+0x74>)
 800e388:	690b      	ldr	r3, [r1, #16]
 800e38a:	694c      	ldr	r4, [r1, #20]
 800e38c:	4a0d      	ldr	r2, [pc, #52]	; (800e3c4 <rand+0x78>)
 800e38e:	4358      	muls	r0, r3
 800e390:	fb02 0004 	mla	r0, r2, r4, r0
 800e394:	fba3 3202 	umull	r3, r2, r3, r2
 800e398:	3301      	adds	r3, #1
 800e39a:	eb40 0002 	adc.w	r0, r0, r2
 800e39e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e3a2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e3a6:	bd10      	pop	{r4, pc}
 800e3a8:	20000084 	.word	0x20000084
 800e3ac:	08011e6e 	.word	0x08011e6e
 800e3b0:	08011e85 	.word	0x08011e85
 800e3b4:	abcd330e 	.word	0xabcd330e
 800e3b8:	e66d1234 	.word	0xe66d1234
 800e3bc:	0005deec 	.word	0x0005deec
 800e3c0:	5851f42d 	.word	0x5851f42d
 800e3c4:	4c957f2d 	.word	0x4c957f2d

0800e3c8 <std>:
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	b510      	push	{r4, lr}
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e3d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3d6:	6083      	str	r3, [r0, #8]
 800e3d8:	8181      	strh	r1, [r0, #12]
 800e3da:	6643      	str	r3, [r0, #100]	; 0x64
 800e3dc:	81c2      	strh	r2, [r0, #14]
 800e3de:	6183      	str	r3, [r0, #24]
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	2208      	movs	r2, #8
 800e3e4:	305c      	adds	r0, #92	; 0x5c
 800e3e6:	f000 f916 	bl	800e616 <memset>
 800e3ea:	4b0d      	ldr	r3, [pc, #52]	; (800e420 <std+0x58>)
 800e3ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e3ee:	4b0d      	ldr	r3, [pc, #52]	; (800e424 <std+0x5c>)
 800e3f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e3f2:	4b0d      	ldr	r3, [pc, #52]	; (800e428 <std+0x60>)
 800e3f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e3f6:	4b0d      	ldr	r3, [pc, #52]	; (800e42c <std+0x64>)
 800e3f8:	6323      	str	r3, [r4, #48]	; 0x30
 800e3fa:	4b0d      	ldr	r3, [pc, #52]	; (800e430 <std+0x68>)
 800e3fc:	6224      	str	r4, [r4, #32]
 800e3fe:	429c      	cmp	r4, r3
 800e400:	d006      	beq.n	800e410 <std+0x48>
 800e402:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e406:	4294      	cmp	r4, r2
 800e408:	d002      	beq.n	800e410 <std+0x48>
 800e40a:	33d0      	adds	r3, #208	; 0xd0
 800e40c:	429c      	cmp	r4, r3
 800e40e:	d105      	bne.n	800e41c <std+0x54>
 800e410:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e418:	f000 b970 	b.w	800e6fc <__retarget_lock_init_recursive>
 800e41c:	bd10      	pop	{r4, pc}
 800e41e:	bf00      	nop
 800e420:	0800e571 	.word	0x0800e571
 800e424:	0800e593 	.word	0x0800e593
 800e428:	0800e5cb 	.word	0x0800e5cb
 800e42c:	0800e5ef 	.word	0x0800e5ef
 800e430:	200088c8 	.word	0x200088c8

0800e434 <stdio_exit_handler>:
 800e434:	4a02      	ldr	r2, [pc, #8]	; (800e440 <stdio_exit_handler+0xc>)
 800e436:	4903      	ldr	r1, [pc, #12]	; (800e444 <stdio_exit_handler+0x10>)
 800e438:	4803      	ldr	r0, [pc, #12]	; (800e448 <stdio_exit_handler+0x14>)
 800e43a:	f000 b869 	b.w	800e510 <_fwalk_sglue>
 800e43e:	bf00      	nop
 800e440:	2000002c 	.word	0x2000002c
 800e444:	0800f011 	.word	0x0800f011
 800e448:	20000038 	.word	0x20000038

0800e44c <cleanup_stdio>:
 800e44c:	6841      	ldr	r1, [r0, #4]
 800e44e:	4b0c      	ldr	r3, [pc, #48]	; (800e480 <cleanup_stdio+0x34>)
 800e450:	4299      	cmp	r1, r3
 800e452:	b510      	push	{r4, lr}
 800e454:	4604      	mov	r4, r0
 800e456:	d001      	beq.n	800e45c <cleanup_stdio+0x10>
 800e458:	f000 fdda 	bl	800f010 <_fflush_r>
 800e45c:	68a1      	ldr	r1, [r4, #8]
 800e45e:	4b09      	ldr	r3, [pc, #36]	; (800e484 <cleanup_stdio+0x38>)
 800e460:	4299      	cmp	r1, r3
 800e462:	d002      	beq.n	800e46a <cleanup_stdio+0x1e>
 800e464:	4620      	mov	r0, r4
 800e466:	f000 fdd3 	bl	800f010 <_fflush_r>
 800e46a:	68e1      	ldr	r1, [r4, #12]
 800e46c:	4b06      	ldr	r3, [pc, #24]	; (800e488 <cleanup_stdio+0x3c>)
 800e46e:	4299      	cmp	r1, r3
 800e470:	d004      	beq.n	800e47c <cleanup_stdio+0x30>
 800e472:	4620      	mov	r0, r4
 800e474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e478:	f000 bdca 	b.w	800f010 <_fflush_r>
 800e47c:	bd10      	pop	{r4, pc}
 800e47e:	bf00      	nop
 800e480:	200088c8 	.word	0x200088c8
 800e484:	20008930 	.word	0x20008930
 800e488:	20008998 	.word	0x20008998

0800e48c <global_stdio_init.part.0>:
 800e48c:	b510      	push	{r4, lr}
 800e48e:	4b0b      	ldr	r3, [pc, #44]	; (800e4bc <global_stdio_init.part.0+0x30>)
 800e490:	4c0b      	ldr	r4, [pc, #44]	; (800e4c0 <global_stdio_init.part.0+0x34>)
 800e492:	4a0c      	ldr	r2, [pc, #48]	; (800e4c4 <global_stdio_init.part.0+0x38>)
 800e494:	601a      	str	r2, [r3, #0]
 800e496:	4620      	mov	r0, r4
 800e498:	2200      	movs	r2, #0
 800e49a:	2104      	movs	r1, #4
 800e49c:	f7ff ff94 	bl	800e3c8 <std>
 800e4a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	2109      	movs	r1, #9
 800e4a8:	f7ff ff8e 	bl	800e3c8 <std>
 800e4ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e4b0:	2202      	movs	r2, #2
 800e4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4b6:	2112      	movs	r1, #18
 800e4b8:	f7ff bf86 	b.w	800e3c8 <std>
 800e4bc:	20008a00 	.word	0x20008a00
 800e4c0:	200088c8 	.word	0x200088c8
 800e4c4:	0800e435 	.word	0x0800e435

0800e4c8 <__sfp_lock_acquire>:
 800e4c8:	4801      	ldr	r0, [pc, #4]	; (800e4d0 <__sfp_lock_acquire+0x8>)
 800e4ca:	f000 b918 	b.w	800e6fe <__retarget_lock_acquire_recursive>
 800e4ce:	bf00      	nop
 800e4d0:	20008a09 	.word	0x20008a09

0800e4d4 <__sfp_lock_release>:
 800e4d4:	4801      	ldr	r0, [pc, #4]	; (800e4dc <__sfp_lock_release+0x8>)
 800e4d6:	f000 b913 	b.w	800e700 <__retarget_lock_release_recursive>
 800e4da:	bf00      	nop
 800e4dc:	20008a09 	.word	0x20008a09

0800e4e0 <__sinit>:
 800e4e0:	b510      	push	{r4, lr}
 800e4e2:	4604      	mov	r4, r0
 800e4e4:	f7ff fff0 	bl	800e4c8 <__sfp_lock_acquire>
 800e4e8:	6a23      	ldr	r3, [r4, #32]
 800e4ea:	b11b      	cbz	r3, 800e4f4 <__sinit+0x14>
 800e4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4f0:	f7ff bff0 	b.w	800e4d4 <__sfp_lock_release>
 800e4f4:	4b04      	ldr	r3, [pc, #16]	; (800e508 <__sinit+0x28>)
 800e4f6:	6223      	str	r3, [r4, #32]
 800e4f8:	4b04      	ldr	r3, [pc, #16]	; (800e50c <__sinit+0x2c>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1f5      	bne.n	800e4ec <__sinit+0xc>
 800e500:	f7ff ffc4 	bl	800e48c <global_stdio_init.part.0>
 800e504:	e7f2      	b.n	800e4ec <__sinit+0xc>
 800e506:	bf00      	nop
 800e508:	0800e44d 	.word	0x0800e44d
 800e50c:	20008a00 	.word	0x20008a00

0800e510 <_fwalk_sglue>:
 800e510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e514:	4607      	mov	r7, r0
 800e516:	4688      	mov	r8, r1
 800e518:	4614      	mov	r4, r2
 800e51a:	2600      	movs	r6, #0
 800e51c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e520:	f1b9 0901 	subs.w	r9, r9, #1
 800e524:	d505      	bpl.n	800e532 <_fwalk_sglue+0x22>
 800e526:	6824      	ldr	r4, [r4, #0]
 800e528:	2c00      	cmp	r4, #0
 800e52a:	d1f7      	bne.n	800e51c <_fwalk_sglue+0xc>
 800e52c:	4630      	mov	r0, r6
 800e52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e532:	89ab      	ldrh	r3, [r5, #12]
 800e534:	2b01      	cmp	r3, #1
 800e536:	d907      	bls.n	800e548 <_fwalk_sglue+0x38>
 800e538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e53c:	3301      	adds	r3, #1
 800e53e:	d003      	beq.n	800e548 <_fwalk_sglue+0x38>
 800e540:	4629      	mov	r1, r5
 800e542:	4638      	mov	r0, r7
 800e544:	47c0      	blx	r8
 800e546:	4306      	orrs	r6, r0
 800e548:	3568      	adds	r5, #104	; 0x68
 800e54a:	e7e9      	b.n	800e520 <_fwalk_sglue+0x10>

0800e54c <iprintf>:
 800e54c:	b40f      	push	{r0, r1, r2, r3}
 800e54e:	b507      	push	{r0, r1, r2, lr}
 800e550:	4906      	ldr	r1, [pc, #24]	; (800e56c <iprintf+0x20>)
 800e552:	ab04      	add	r3, sp, #16
 800e554:	6808      	ldr	r0, [r1, #0]
 800e556:	f853 2b04 	ldr.w	r2, [r3], #4
 800e55a:	6881      	ldr	r1, [r0, #8]
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	f000 fa27 	bl	800e9b0 <_vfiprintf_r>
 800e562:	b003      	add	sp, #12
 800e564:	f85d eb04 	ldr.w	lr, [sp], #4
 800e568:	b004      	add	sp, #16
 800e56a:	4770      	bx	lr
 800e56c:	20000084 	.word	0x20000084

0800e570 <__sread>:
 800e570:	b510      	push	{r4, lr}
 800e572:	460c      	mov	r4, r1
 800e574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e578:	f000 f878 	bl	800e66c <_read_r>
 800e57c:	2800      	cmp	r0, #0
 800e57e:	bfab      	itete	ge
 800e580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e582:	89a3      	ldrhlt	r3, [r4, #12]
 800e584:	181b      	addge	r3, r3, r0
 800e586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e58a:	bfac      	ite	ge
 800e58c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e58e:	81a3      	strhlt	r3, [r4, #12]
 800e590:	bd10      	pop	{r4, pc}

0800e592 <__swrite>:
 800e592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e596:	461f      	mov	r7, r3
 800e598:	898b      	ldrh	r3, [r1, #12]
 800e59a:	05db      	lsls	r3, r3, #23
 800e59c:	4605      	mov	r5, r0
 800e59e:	460c      	mov	r4, r1
 800e5a0:	4616      	mov	r6, r2
 800e5a2:	d505      	bpl.n	800e5b0 <__swrite+0x1e>
 800e5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	f000 f84c 	bl	800e648 <_lseek_r>
 800e5b0:	89a3      	ldrh	r3, [r4, #12]
 800e5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5ba:	81a3      	strh	r3, [r4, #12]
 800e5bc:	4632      	mov	r2, r6
 800e5be:	463b      	mov	r3, r7
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c6:	f000 b863 	b.w	800e690 <_write_r>

0800e5ca <__sseek>:
 800e5ca:	b510      	push	{r4, lr}
 800e5cc:	460c      	mov	r4, r1
 800e5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5d2:	f000 f839 	bl	800e648 <_lseek_r>
 800e5d6:	1c43      	adds	r3, r0, #1
 800e5d8:	89a3      	ldrh	r3, [r4, #12]
 800e5da:	bf15      	itete	ne
 800e5dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5e6:	81a3      	strheq	r3, [r4, #12]
 800e5e8:	bf18      	it	ne
 800e5ea:	81a3      	strhne	r3, [r4, #12]
 800e5ec:	bd10      	pop	{r4, pc}

0800e5ee <__sclose>:
 800e5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5f2:	f000 b819 	b.w	800e628 <_close_r>

0800e5f6 <memcmp>:
 800e5f6:	b510      	push	{r4, lr}
 800e5f8:	3901      	subs	r1, #1
 800e5fa:	4402      	add	r2, r0
 800e5fc:	4290      	cmp	r0, r2
 800e5fe:	d101      	bne.n	800e604 <memcmp+0xe>
 800e600:	2000      	movs	r0, #0
 800e602:	e005      	b.n	800e610 <memcmp+0x1a>
 800e604:	7803      	ldrb	r3, [r0, #0]
 800e606:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e60a:	42a3      	cmp	r3, r4
 800e60c:	d001      	beq.n	800e612 <memcmp+0x1c>
 800e60e:	1b18      	subs	r0, r3, r4
 800e610:	bd10      	pop	{r4, pc}
 800e612:	3001      	adds	r0, #1
 800e614:	e7f2      	b.n	800e5fc <memcmp+0x6>

0800e616 <memset>:
 800e616:	4402      	add	r2, r0
 800e618:	4603      	mov	r3, r0
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d100      	bne.n	800e620 <memset+0xa>
 800e61e:	4770      	bx	lr
 800e620:	f803 1b01 	strb.w	r1, [r3], #1
 800e624:	e7f9      	b.n	800e61a <memset+0x4>
	...

0800e628 <_close_r>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4d06      	ldr	r5, [pc, #24]	; (800e644 <_close_r+0x1c>)
 800e62c:	2300      	movs	r3, #0
 800e62e:	4604      	mov	r4, r0
 800e630:	4608      	mov	r0, r1
 800e632:	602b      	str	r3, [r5, #0]
 800e634:	f7f2 fab1 	bl	8000b9a <_close>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d102      	bne.n	800e642 <_close_r+0x1a>
 800e63c:	682b      	ldr	r3, [r5, #0]
 800e63e:	b103      	cbz	r3, 800e642 <_close_r+0x1a>
 800e640:	6023      	str	r3, [r4, #0]
 800e642:	bd38      	pop	{r3, r4, r5, pc}
 800e644:	20008a04 	.word	0x20008a04

0800e648 <_lseek_r>:
 800e648:	b538      	push	{r3, r4, r5, lr}
 800e64a:	4d07      	ldr	r5, [pc, #28]	; (800e668 <_lseek_r+0x20>)
 800e64c:	4604      	mov	r4, r0
 800e64e:	4608      	mov	r0, r1
 800e650:	4611      	mov	r1, r2
 800e652:	2200      	movs	r2, #0
 800e654:	602a      	str	r2, [r5, #0]
 800e656:	461a      	mov	r2, r3
 800e658:	f7f2 fac6 	bl	8000be8 <_lseek>
 800e65c:	1c43      	adds	r3, r0, #1
 800e65e:	d102      	bne.n	800e666 <_lseek_r+0x1e>
 800e660:	682b      	ldr	r3, [r5, #0]
 800e662:	b103      	cbz	r3, 800e666 <_lseek_r+0x1e>
 800e664:	6023      	str	r3, [r4, #0]
 800e666:	bd38      	pop	{r3, r4, r5, pc}
 800e668:	20008a04 	.word	0x20008a04

0800e66c <_read_r>:
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4d07      	ldr	r5, [pc, #28]	; (800e68c <_read_r+0x20>)
 800e670:	4604      	mov	r4, r0
 800e672:	4608      	mov	r0, r1
 800e674:	4611      	mov	r1, r2
 800e676:	2200      	movs	r2, #0
 800e678:	602a      	str	r2, [r5, #0]
 800e67a:	461a      	mov	r2, r3
 800e67c:	f7f2 fa54 	bl	8000b28 <_read>
 800e680:	1c43      	adds	r3, r0, #1
 800e682:	d102      	bne.n	800e68a <_read_r+0x1e>
 800e684:	682b      	ldr	r3, [r5, #0]
 800e686:	b103      	cbz	r3, 800e68a <_read_r+0x1e>
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	bd38      	pop	{r3, r4, r5, pc}
 800e68c:	20008a04 	.word	0x20008a04

0800e690 <_write_r>:
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4d07      	ldr	r5, [pc, #28]	; (800e6b0 <_write_r+0x20>)
 800e694:	4604      	mov	r4, r0
 800e696:	4608      	mov	r0, r1
 800e698:	4611      	mov	r1, r2
 800e69a:	2200      	movs	r2, #0
 800e69c:	602a      	str	r2, [r5, #0]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	f7f2 fa5f 	bl	8000b62 <_write>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_write_r+0x1e>
 800e6a8:	682b      	ldr	r3, [r5, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_write_r+0x1e>
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	20008a04 	.word	0x20008a04

0800e6b4 <__libc_init_array>:
 800e6b4:	b570      	push	{r4, r5, r6, lr}
 800e6b6:	4d0d      	ldr	r5, [pc, #52]	; (800e6ec <__libc_init_array+0x38>)
 800e6b8:	4c0d      	ldr	r4, [pc, #52]	; (800e6f0 <__libc_init_array+0x3c>)
 800e6ba:	1b64      	subs	r4, r4, r5
 800e6bc:	10a4      	asrs	r4, r4, #2
 800e6be:	2600      	movs	r6, #0
 800e6c0:	42a6      	cmp	r6, r4
 800e6c2:	d109      	bne.n	800e6d8 <__libc_init_array+0x24>
 800e6c4:	4d0b      	ldr	r5, [pc, #44]	; (800e6f4 <__libc_init_array+0x40>)
 800e6c6:	4c0c      	ldr	r4, [pc, #48]	; (800e6f8 <__libc_init_array+0x44>)
 800e6c8:	f000 fe52 	bl	800f370 <_init>
 800e6cc:	1b64      	subs	r4, r4, r5
 800e6ce:	10a4      	asrs	r4, r4, #2
 800e6d0:	2600      	movs	r6, #0
 800e6d2:	42a6      	cmp	r6, r4
 800e6d4:	d105      	bne.n	800e6e2 <__libc_init_array+0x2e>
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}
 800e6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6dc:	4798      	blx	r3
 800e6de:	3601      	adds	r6, #1
 800e6e0:	e7ee      	b.n	800e6c0 <__libc_init_array+0xc>
 800e6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6e6:	4798      	blx	r3
 800e6e8:	3601      	adds	r6, #1
 800e6ea:	e7f2      	b.n	800e6d2 <__libc_init_array+0x1e>
 800e6ec:	08011f54 	.word	0x08011f54
 800e6f0:	08011f54 	.word	0x08011f54
 800e6f4:	08011f54 	.word	0x08011f54
 800e6f8:	08011f58 	.word	0x08011f58

0800e6fc <__retarget_lock_init_recursive>:
 800e6fc:	4770      	bx	lr

0800e6fe <__retarget_lock_acquire_recursive>:
 800e6fe:	4770      	bx	lr

0800e700 <__retarget_lock_release_recursive>:
 800e700:	4770      	bx	lr

0800e702 <memcpy>:
 800e702:	440a      	add	r2, r1
 800e704:	4291      	cmp	r1, r2
 800e706:	f100 33ff 	add.w	r3, r0, #4294967295
 800e70a:	d100      	bne.n	800e70e <memcpy+0xc>
 800e70c:	4770      	bx	lr
 800e70e:	b510      	push	{r4, lr}
 800e710:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e714:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e718:	4291      	cmp	r1, r2
 800e71a:	d1f9      	bne.n	800e710 <memcpy+0xe>
 800e71c:	bd10      	pop	{r4, pc}
	...

0800e720 <__assert_func>:
 800e720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e722:	4614      	mov	r4, r2
 800e724:	461a      	mov	r2, r3
 800e726:	4b09      	ldr	r3, [pc, #36]	; (800e74c <__assert_func+0x2c>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4605      	mov	r5, r0
 800e72c:	68d8      	ldr	r0, [r3, #12]
 800e72e:	b14c      	cbz	r4, 800e744 <__assert_func+0x24>
 800e730:	4b07      	ldr	r3, [pc, #28]	; (800e750 <__assert_func+0x30>)
 800e732:	9100      	str	r1, [sp, #0]
 800e734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e738:	4906      	ldr	r1, [pc, #24]	; (800e754 <__assert_func+0x34>)
 800e73a:	462b      	mov	r3, r5
 800e73c:	f000 fc90 	bl	800f060 <fiprintf>
 800e740:	f000 fd46 	bl	800f1d0 <abort>
 800e744:	4b04      	ldr	r3, [pc, #16]	; (800e758 <__assert_func+0x38>)
 800e746:	461c      	mov	r4, r3
 800e748:	e7f3      	b.n	800e732 <__assert_func+0x12>
 800e74a:	bf00      	nop
 800e74c:	20000084 	.word	0x20000084
 800e750:	08011edd 	.word	0x08011edd
 800e754:	08011eea 	.word	0x08011eea
 800e758:	08011f18 	.word	0x08011f18

0800e75c <_free_r>:
 800e75c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e75e:	2900      	cmp	r1, #0
 800e760:	d044      	beq.n	800e7ec <_free_r+0x90>
 800e762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e766:	9001      	str	r0, [sp, #4]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f1a1 0404 	sub.w	r4, r1, #4
 800e76e:	bfb8      	it	lt
 800e770:	18e4      	addlt	r4, r4, r3
 800e772:	f000 f8e7 	bl	800e944 <__malloc_lock>
 800e776:	4a1e      	ldr	r2, [pc, #120]	; (800e7f0 <_free_r+0x94>)
 800e778:	9801      	ldr	r0, [sp, #4]
 800e77a:	6813      	ldr	r3, [r2, #0]
 800e77c:	b933      	cbnz	r3, 800e78c <_free_r+0x30>
 800e77e:	6063      	str	r3, [r4, #4]
 800e780:	6014      	str	r4, [r2, #0]
 800e782:	b003      	add	sp, #12
 800e784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e788:	f000 b8e2 	b.w	800e950 <__malloc_unlock>
 800e78c:	42a3      	cmp	r3, r4
 800e78e:	d908      	bls.n	800e7a2 <_free_r+0x46>
 800e790:	6825      	ldr	r5, [r4, #0]
 800e792:	1961      	adds	r1, r4, r5
 800e794:	428b      	cmp	r3, r1
 800e796:	bf01      	itttt	eq
 800e798:	6819      	ldreq	r1, [r3, #0]
 800e79a:	685b      	ldreq	r3, [r3, #4]
 800e79c:	1949      	addeq	r1, r1, r5
 800e79e:	6021      	streq	r1, [r4, #0]
 800e7a0:	e7ed      	b.n	800e77e <_free_r+0x22>
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	b10b      	cbz	r3, 800e7ac <_free_r+0x50>
 800e7a8:	42a3      	cmp	r3, r4
 800e7aa:	d9fa      	bls.n	800e7a2 <_free_r+0x46>
 800e7ac:	6811      	ldr	r1, [r2, #0]
 800e7ae:	1855      	adds	r5, r2, r1
 800e7b0:	42a5      	cmp	r5, r4
 800e7b2:	d10b      	bne.n	800e7cc <_free_r+0x70>
 800e7b4:	6824      	ldr	r4, [r4, #0]
 800e7b6:	4421      	add	r1, r4
 800e7b8:	1854      	adds	r4, r2, r1
 800e7ba:	42a3      	cmp	r3, r4
 800e7bc:	6011      	str	r1, [r2, #0]
 800e7be:	d1e0      	bne.n	800e782 <_free_r+0x26>
 800e7c0:	681c      	ldr	r4, [r3, #0]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	6053      	str	r3, [r2, #4]
 800e7c6:	440c      	add	r4, r1
 800e7c8:	6014      	str	r4, [r2, #0]
 800e7ca:	e7da      	b.n	800e782 <_free_r+0x26>
 800e7cc:	d902      	bls.n	800e7d4 <_free_r+0x78>
 800e7ce:	230c      	movs	r3, #12
 800e7d0:	6003      	str	r3, [r0, #0]
 800e7d2:	e7d6      	b.n	800e782 <_free_r+0x26>
 800e7d4:	6825      	ldr	r5, [r4, #0]
 800e7d6:	1961      	adds	r1, r4, r5
 800e7d8:	428b      	cmp	r3, r1
 800e7da:	bf04      	itt	eq
 800e7dc:	6819      	ldreq	r1, [r3, #0]
 800e7de:	685b      	ldreq	r3, [r3, #4]
 800e7e0:	6063      	str	r3, [r4, #4]
 800e7e2:	bf04      	itt	eq
 800e7e4:	1949      	addeq	r1, r1, r5
 800e7e6:	6021      	streq	r1, [r4, #0]
 800e7e8:	6054      	str	r4, [r2, #4]
 800e7ea:	e7ca      	b.n	800e782 <_free_r+0x26>
 800e7ec:	b003      	add	sp, #12
 800e7ee:	bd30      	pop	{r4, r5, pc}
 800e7f0:	20008a0c 	.word	0x20008a0c

0800e7f4 <malloc>:
 800e7f4:	4b02      	ldr	r3, [pc, #8]	; (800e800 <malloc+0xc>)
 800e7f6:	4601      	mov	r1, r0
 800e7f8:	6818      	ldr	r0, [r3, #0]
 800e7fa:	f000 b823 	b.w	800e844 <_malloc_r>
 800e7fe:	bf00      	nop
 800e800:	20000084 	.word	0x20000084

0800e804 <sbrk_aligned>:
 800e804:	b570      	push	{r4, r5, r6, lr}
 800e806:	4e0e      	ldr	r6, [pc, #56]	; (800e840 <sbrk_aligned+0x3c>)
 800e808:	460c      	mov	r4, r1
 800e80a:	6831      	ldr	r1, [r6, #0]
 800e80c:	4605      	mov	r5, r0
 800e80e:	b911      	cbnz	r1, 800e816 <sbrk_aligned+0x12>
 800e810:	f000 fcce 	bl	800f1b0 <_sbrk_r>
 800e814:	6030      	str	r0, [r6, #0]
 800e816:	4621      	mov	r1, r4
 800e818:	4628      	mov	r0, r5
 800e81a:	f000 fcc9 	bl	800f1b0 <_sbrk_r>
 800e81e:	1c43      	adds	r3, r0, #1
 800e820:	d00a      	beq.n	800e838 <sbrk_aligned+0x34>
 800e822:	1cc4      	adds	r4, r0, #3
 800e824:	f024 0403 	bic.w	r4, r4, #3
 800e828:	42a0      	cmp	r0, r4
 800e82a:	d007      	beq.n	800e83c <sbrk_aligned+0x38>
 800e82c:	1a21      	subs	r1, r4, r0
 800e82e:	4628      	mov	r0, r5
 800e830:	f000 fcbe 	bl	800f1b0 <_sbrk_r>
 800e834:	3001      	adds	r0, #1
 800e836:	d101      	bne.n	800e83c <sbrk_aligned+0x38>
 800e838:	f04f 34ff 	mov.w	r4, #4294967295
 800e83c:	4620      	mov	r0, r4
 800e83e:	bd70      	pop	{r4, r5, r6, pc}
 800e840:	20008a10 	.word	0x20008a10

0800e844 <_malloc_r>:
 800e844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e848:	1ccd      	adds	r5, r1, #3
 800e84a:	f025 0503 	bic.w	r5, r5, #3
 800e84e:	3508      	adds	r5, #8
 800e850:	2d0c      	cmp	r5, #12
 800e852:	bf38      	it	cc
 800e854:	250c      	movcc	r5, #12
 800e856:	2d00      	cmp	r5, #0
 800e858:	4607      	mov	r7, r0
 800e85a:	db01      	blt.n	800e860 <_malloc_r+0x1c>
 800e85c:	42a9      	cmp	r1, r5
 800e85e:	d905      	bls.n	800e86c <_malloc_r+0x28>
 800e860:	230c      	movs	r3, #12
 800e862:	603b      	str	r3, [r7, #0]
 800e864:	2600      	movs	r6, #0
 800e866:	4630      	mov	r0, r6
 800e868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e86c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e940 <_malloc_r+0xfc>
 800e870:	f000 f868 	bl	800e944 <__malloc_lock>
 800e874:	f8d8 3000 	ldr.w	r3, [r8]
 800e878:	461c      	mov	r4, r3
 800e87a:	bb5c      	cbnz	r4, 800e8d4 <_malloc_r+0x90>
 800e87c:	4629      	mov	r1, r5
 800e87e:	4638      	mov	r0, r7
 800e880:	f7ff ffc0 	bl	800e804 <sbrk_aligned>
 800e884:	1c43      	adds	r3, r0, #1
 800e886:	4604      	mov	r4, r0
 800e888:	d155      	bne.n	800e936 <_malloc_r+0xf2>
 800e88a:	f8d8 4000 	ldr.w	r4, [r8]
 800e88e:	4626      	mov	r6, r4
 800e890:	2e00      	cmp	r6, #0
 800e892:	d145      	bne.n	800e920 <_malloc_r+0xdc>
 800e894:	2c00      	cmp	r4, #0
 800e896:	d048      	beq.n	800e92a <_malloc_r+0xe6>
 800e898:	6823      	ldr	r3, [r4, #0]
 800e89a:	4631      	mov	r1, r6
 800e89c:	4638      	mov	r0, r7
 800e89e:	eb04 0903 	add.w	r9, r4, r3
 800e8a2:	f000 fc85 	bl	800f1b0 <_sbrk_r>
 800e8a6:	4581      	cmp	r9, r0
 800e8a8:	d13f      	bne.n	800e92a <_malloc_r+0xe6>
 800e8aa:	6821      	ldr	r1, [r4, #0]
 800e8ac:	1a6d      	subs	r5, r5, r1
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	4638      	mov	r0, r7
 800e8b2:	f7ff ffa7 	bl	800e804 <sbrk_aligned>
 800e8b6:	3001      	adds	r0, #1
 800e8b8:	d037      	beq.n	800e92a <_malloc_r+0xe6>
 800e8ba:	6823      	ldr	r3, [r4, #0]
 800e8bc:	442b      	add	r3, r5
 800e8be:	6023      	str	r3, [r4, #0]
 800e8c0:	f8d8 3000 	ldr.w	r3, [r8]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d038      	beq.n	800e93a <_malloc_r+0xf6>
 800e8c8:	685a      	ldr	r2, [r3, #4]
 800e8ca:	42a2      	cmp	r2, r4
 800e8cc:	d12b      	bne.n	800e926 <_malloc_r+0xe2>
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	605a      	str	r2, [r3, #4]
 800e8d2:	e00f      	b.n	800e8f4 <_malloc_r+0xb0>
 800e8d4:	6822      	ldr	r2, [r4, #0]
 800e8d6:	1b52      	subs	r2, r2, r5
 800e8d8:	d41f      	bmi.n	800e91a <_malloc_r+0xd6>
 800e8da:	2a0b      	cmp	r2, #11
 800e8dc:	d917      	bls.n	800e90e <_malloc_r+0xca>
 800e8de:	1961      	adds	r1, r4, r5
 800e8e0:	42a3      	cmp	r3, r4
 800e8e2:	6025      	str	r5, [r4, #0]
 800e8e4:	bf18      	it	ne
 800e8e6:	6059      	strne	r1, [r3, #4]
 800e8e8:	6863      	ldr	r3, [r4, #4]
 800e8ea:	bf08      	it	eq
 800e8ec:	f8c8 1000 	streq.w	r1, [r8]
 800e8f0:	5162      	str	r2, [r4, r5]
 800e8f2:	604b      	str	r3, [r1, #4]
 800e8f4:	4638      	mov	r0, r7
 800e8f6:	f104 060b 	add.w	r6, r4, #11
 800e8fa:	f000 f829 	bl	800e950 <__malloc_unlock>
 800e8fe:	f026 0607 	bic.w	r6, r6, #7
 800e902:	1d23      	adds	r3, r4, #4
 800e904:	1af2      	subs	r2, r6, r3
 800e906:	d0ae      	beq.n	800e866 <_malloc_r+0x22>
 800e908:	1b9b      	subs	r3, r3, r6
 800e90a:	50a3      	str	r3, [r4, r2]
 800e90c:	e7ab      	b.n	800e866 <_malloc_r+0x22>
 800e90e:	42a3      	cmp	r3, r4
 800e910:	6862      	ldr	r2, [r4, #4]
 800e912:	d1dd      	bne.n	800e8d0 <_malloc_r+0x8c>
 800e914:	f8c8 2000 	str.w	r2, [r8]
 800e918:	e7ec      	b.n	800e8f4 <_malloc_r+0xb0>
 800e91a:	4623      	mov	r3, r4
 800e91c:	6864      	ldr	r4, [r4, #4]
 800e91e:	e7ac      	b.n	800e87a <_malloc_r+0x36>
 800e920:	4634      	mov	r4, r6
 800e922:	6876      	ldr	r6, [r6, #4]
 800e924:	e7b4      	b.n	800e890 <_malloc_r+0x4c>
 800e926:	4613      	mov	r3, r2
 800e928:	e7cc      	b.n	800e8c4 <_malloc_r+0x80>
 800e92a:	230c      	movs	r3, #12
 800e92c:	603b      	str	r3, [r7, #0]
 800e92e:	4638      	mov	r0, r7
 800e930:	f000 f80e 	bl	800e950 <__malloc_unlock>
 800e934:	e797      	b.n	800e866 <_malloc_r+0x22>
 800e936:	6025      	str	r5, [r4, #0]
 800e938:	e7dc      	b.n	800e8f4 <_malloc_r+0xb0>
 800e93a:	605b      	str	r3, [r3, #4]
 800e93c:	deff      	udf	#255	; 0xff
 800e93e:	bf00      	nop
 800e940:	20008a0c 	.word	0x20008a0c

0800e944 <__malloc_lock>:
 800e944:	4801      	ldr	r0, [pc, #4]	; (800e94c <__malloc_lock+0x8>)
 800e946:	f7ff beda 	b.w	800e6fe <__retarget_lock_acquire_recursive>
 800e94a:	bf00      	nop
 800e94c:	20008a08 	.word	0x20008a08

0800e950 <__malloc_unlock>:
 800e950:	4801      	ldr	r0, [pc, #4]	; (800e958 <__malloc_unlock+0x8>)
 800e952:	f7ff bed5 	b.w	800e700 <__retarget_lock_release_recursive>
 800e956:	bf00      	nop
 800e958:	20008a08 	.word	0x20008a08

0800e95c <__sfputc_r>:
 800e95c:	6893      	ldr	r3, [r2, #8]
 800e95e:	3b01      	subs	r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	b410      	push	{r4}
 800e964:	6093      	str	r3, [r2, #8]
 800e966:	da08      	bge.n	800e97a <__sfputc_r+0x1e>
 800e968:	6994      	ldr	r4, [r2, #24]
 800e96a:	42a3      	cmp	r3, r4
 800e96c:	db01      	blt.n	800e972 <__sfputc_r+0x16>
 800e96e:	290a      	cmp	r1, #10
 800e970:	d103      	bne.n	800e97a <__sfputc_r+0x1e>
 800e972:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e976:	f000 bb85 	b.w	800f084 <__swbuf_r>
 800e97a:	6813      	ldr	r3, [r2, #0]
 800e97c:	1c58      	adds	r0, r3, #1
 800e97e:	6010      	str	r0, [r2, #0]
 800e980:	7019      	strb	r1, [r3, #0]
 800e982:	4608      	mov	r0, r1
 800e984:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e988:	4770      	bx	lr

0800e98a <__sfputs_r>:
 800e98a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98c:	4606      	mov	r6, r0
 800e98e:	460f      	mov	r7, r1
 800e990:	4614      	mov	r4, r2
 800e992:	18d5      	adds	r5, r2, r3
 800e994:	42ac      	cmp	r4, r5
 800e996:	d101      	bne.n	800e99c <__sfputs_r+0x12>
 800e998:	2000      	movs	r0, #0
 800e99a:	e007      	b.n	800e9ac <__sfputs_r+0x22>
 800e99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9a0:	463a      	mov	r2, r7
 800e9a2:	4630      	mov	r0, r6
 800e9a4:	f7ff ffda 	bl	800e95c <__sfputc_r>
 800e9a8:	1c43      	adds	r3, r0, #1
 800e9aa:	d1f3      	bne.n	800e994 <__sfputs_r+0xa>
 800e9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9b0 <_vfiprintf_r>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	460d      	mov	r5, r1
 800e9b6:	b09d      	sub	sp, #116	; 0x74
 800e9b8:	4614      	mov	r4, r2
 800e9ba:	4698      	mov	r8, r3
 800e9bc:	4606      	mov	r6, r0
 800e9be:	b118      	cbz	r0, 800e9c8 <_vfiprintf_r+0x18>
 800e9c0:	6a03      	ldr	r3, [r0, #32]
 800e9c2:	b90b      	cbnz	r3, 800e9c8 <_vfiprintf_r+0x18>
 800e9c4:	f7ff fd8c 	bl	800e4e0 <__sinit>
 800e9c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9ca:	07d9      	lsls	r1, r3, #31
 800e9cc:	d405      	bmi.n	800e9da <_vfiprintf_r+0x2a>
 800e9ce:	89ab      	ldrh	r3, [r5, #12]
 800e9d0:	059a      	lsls	r2, r3, #22
 800e9d2:	d402      	bmi.n	800e9da <_vfiprintf_r+0x2a>
 800e9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9d6:	f7ff fe92 	bl	800e6fe <__retarget_lock_acquire_recursive>
 800e9da:	89ab      	ldrh	r3, [r5, #12]
 800e9dc:	071b      	lsls	r3, r3, #28
 800e9de:	d501      	bpl.n	800e9e4 <_vfiprintf_r+0x34>
 800e9e0:	692b      	ldr	r3, [r5, #16]
 800e9e2:	b99b      	cbnz	r3, 800ea0c <_vfiprintf_r+0x5c>
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	f000 fb8a 	bl	800f100 <__swsetup_r>
 800e9ec:	b170      	cbz	r0, 800ea0c <_vfiprintf_r+0x5c>
 800e9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9f0:	07dc      	lsls	r4, r3, #31
 800e9f2:	d504      	bpl.n	800e9fe <_vfiprintf_r+0x4e>
 800e9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f8:	b01d      	add	sp, #116	; 0x74
 800e9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9fe:	89ab      	ldrh	r3, [r5, #12]
 800ea00:	0598      	lsls	r0, r3, #22
 800ea02:	d4f7      	bmi.n	800e9f4 <_vfiprintf_r+0x44>
 800ea04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea06:	f7ff fe7b 	bl	800e700 <__retarget_lock_release_recursive>
 800ea0a:	e7f3      	b.n	800e9f4 <_vfiprintf_r+0x44>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ea10:	2320      	movs	r3, #32
 800ea12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea16:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea1a:	2330      	movs	r3, #48	; 0x30
 800ea1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ebd0 <_vfiprintf_r+0x220>
 800ea20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea24:	f04f 0901 	mov.w	r9, #1
 800ea28:	4623      	mov	r3, r4
 800ea2a:	469a      	mov	sl, r3
 800ea2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea30:	b10a      	cbz	r2, 800ea36 <_vfiprintf_r+0x86>
 800ea32:	2a25      	cmp	r2, #37	; 0x25
 800ea34:	d1f9      	bne.n	800ea2a <_vfiprintf_r+0x7a>
 800ea36:	ebba 0b04 	subs.w	fp, sl, r4
 800ea3a:	d00b      	beq.n	800ea54 <_vfiprintf_r+0xa4>
 800ea3c:	465b      	mov	r3, fp
 800ea3e:	4622      	mov	r2, r4
 800ea40:	4629      	mov	r1, r5
 800ea42:	4630      	mov	r0, r6
 800ea44:	f7ff ffa1 	bl	800e98a <__sfputs_r>
 800ea48:	3001      	adds	r0, #1
 800ea4a:	f000 80a9 	beq.w	800eba0 <_vfiprintf_r+0x1f0>
 800ea4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea50:	445a      	add	r2, fp
 800ea52:	9209      	str	r2, [sp, #36]	; 0x24
 800ea54:	f89a 3000 	ldrb.w	r3, [sl]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f000 80a1 	beq.w	800eba0 <_vfiprintf_r+0x1f0>
 800ea5e:	2300      	movs	r3, #0
 800ea60:	f04f 32ff 	mov.w	r2, #4294967295
 800ea64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea68:	f10a 0a01 	add.w	sl, sl, #1
 800ea6c:	9304      	str	r3, [sp, #16]
 800ea6e:	9307      	str	r3, [sp, #28]
 800ea70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ea74:	931a      	str	r3, [sp, #104]	; 0x68
 800ea76:	4654      	mov	r4, sl
 800ea78:	2205      	movs	r2, #5
 800ea7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea7e:	4854      	ldr	r0, [pc, #336]	; (800ebd0 <_vfiprintf_r+0x220>)
 800ea80:	f7f1 fbb6 	bl	80001f0 <memchr>
 800ea84:	9a04      	ldr	r2, [sp, #16]
 800ea86:	b9d8      	cbnz	r0, 800eac0 <_vfiprintf_r+0x110>
 800ea88:	06d1      	lsls	r1, r2, #27
 800ea8a:	bf44      	itt	mi
 800ea8c:	2320      	movmi	r3, #32
 800ea8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea92:	0713      	lsls	r3, r2, #28
 800ea94:	bf44      	itt	mi
 800ea96:	232b      	movmi	r3, #43	; 0x2b
 800ea98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea9c:	f89a 3000 	ldrb.w	r3, [sl]
 800eaa0:	2b2a      	cmp	r3, #42	; 0x2a
 800eaa2:	d015      	beq.n	800ead0 <_vfiprintf_r+0x120>
 800eaa4:	9a07      	ldr	r2, [sp, #28]
 800eaa6:	4654      	mov	r4, sl
 800eaa8:	2000      	movs	r0, #0
 800eaaa:	f04f 0c0a 	mov.w	ip, #10
 800eaae:	4621      	mov	r1, r4
 800eab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eab4:	3b30      	subs	r3, #48	; 0x30
 800eab6:	2b09      	cmp	r3, #9
 800eab8:	d94d      	bls.n	800eb56 <_vfiprintf_r+0x1a6>
 800eaba:	b1b0      	cbz	r0, 800eaea <_vfiprintf_r+0x13a>
 800eabc:	9207      	str	r2, [sp, #28]
 800eabe:	e014      	b.n	800eaea <_vfiprintf_r+0x13a>
 800eac0:	eba0 0308 	sub.w	r3, r0, r8
 800eac4:	fa09 f303 	lsl.w	r3, r9, r3
 800eac8:	4313      	orrs	r3, r2
 800eaca:	9304      	str	r3, [sp, #16]
 800eacc:	46a2      	mov	sl, r4
 800eace:	e7d2      	b.n	800ea76 <_vfiprintf_r+0xc6>
 800ead0:	9b03      	ldr	r3, [sp, #12]
 800ead2:	1d19      	adds	r1, r3, #4
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	9103      	str	r1, [sp, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	bfbb      	ittet	lt
 800eadc:	425b      	neglt	r3, r3
 800eade:	f042 0202 	orrlt.w	r2, r2, #2
 800eae2:	9307      	strge	r3, [sp, #28]
 800eae4:	9307      	strlt	r3, [sp, #28]
 800eae6:	bfb8      	it	lt
 800eae8:	9204      	strlt	r2, [sp, #16]
 800eaea:	7823      	ldrb	r3, [r4, #0]
 800eaec:	2b2e      	cmp	r3, #46	; 0x2e
 800eaee:	d10c      	bne.n	800eb0a <_vfiprintf_r+0x15a>
 800eaf0:	7863      	ldrb	r3, [r4, #1]
 800eaf2:	2b2a      	cmp	r3, #42	; 0x2a
 800eaf4:	d134      	bne.n	800eb60 <_vfiprintf_r+0x1b0>
 800eaf6:	9b03      	ldr	r3, [sp, #12]
 800eaf8:	1d1a      	adds	r2, r3, #4
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	9203      	str	r2, [sp, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	bfb8      	it	lt
 800eb02:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb06:	3402      	adds	r4, #2
 800eb08:	9305      	str	r3, [sp, #20]
 800eb0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ebe0 <_vfiprintf_r+0x230>
 800eb0e:	7821      	ldrb	r1, [r4, #0]
 800eb10:	2203      	movs	r2, #3
 800eb12:	4650      	mov	r0, sl
 800eb14:	f7f1 fb6c 	bl	80001f0 <memchr>
 800eb18:	b138      	cbz	r0, 800eb2a <_vfiprintf_r+0x17a>
 800eb1a:	9b04      	ldr	r3, [sp, #16]
 800eb1c:	eba0 000a 	sub.w	r0, r0, sl
 800eb20:	2240      	movs	r2, #64	; 0x40
 800eb22:	4082      	lsls	r2, r0
 800eb24:	4313      	orrs	r3, r2
 800eb26:	3401      	adds	r4, #1
 800eb28:	9304      	str	r3, [sp, #16]
 800eb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb2e:	4829      	ldr	r0, [pc, #164]	; (800ebd4 <_vfiprintf_r+0x224>)
 800eb30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb34:	2206      	movs	r2, #6
 800eb36:	f7f1 fb5b 	bl	80001f0 <memchr>
 800eb3a:	2800      	cmp	r0, #0
 800eb3c:	d03f      	beq.n	800ebbe <_vfiprintf_r+0x20e>
 800eb3e:	4b26      	ldr	r3, [pc, #152]	; (800ebd8 <_vfiprintf_r+0x228>)
 800eb40:	bb1b      	cbnz	r3, 800eb8a <_vfiprintf_r+0x1da>
 800eb42:	9b03      	ldr	r3, [sp, #12]
 800eb44:	3307      	adds	r3, #7
 800eb46:	f023 0307 	bic.w	r3, r3, #7
 800eb4a:	3308      	adds	r3, #8
 800eb4c:	9303      	str	r3, [sp, #12]
 800eb4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb50:	443b      	add	r3, r7
 800eb52:	9309      	str	r3, [sp, #36]	; 0x24
 800eb54:	e768      	b.n	800ea28 <_vfiprintf_r+0x78>
 800eb56:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	2001      	movs	r0, #1
 800eb5e:	e7a6      	b.n	800eaae <_vfiprintf_r+0xfe>
 800eb60:	2300      	movs	r3, #0
 800eb62:	3401      	adds	r4, #1
 800eb64:	9305      	str	r3, [sp, #20]
 800eb66:	4619      	mov	r1, r3
 800eb68:	f04f 0c0a 	mov.w	ip, #10
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb72:	3a30      	subs	r2, #48	; 0x30
 800eb74:	2a09      	cmp	r2, #9
 800eb76:	d903      	bls.n	800eb80 <_vfiprintf_r+0x1d0>
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d0c6      	beq.n	800eb0a <_vfiprintf_r+0x15a>
 800eb7c:	9105      	str	r1, [sp, #20]
 800eb7e:	e7c4      	b.n	800eb0a <_vfiprintf_r+0x15a>
 800eb80:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb84:	4604      	mov	r4, r0
 800eb86:	2301      	movs	r3, #1
 800eb88:	e7f0      	b.n	800eb6c <_vfiprintf_r+0x1bc>
 800eb8a:	ab03      	add	r3, sp, #12
 800eb8c:	9300      	str	r3, [sp, #0]
 800eb8e:	462a      	mov	r2, r5
 800eb90:	4b12      	ldr	r3, [pc, #72]	; (800ebdc <_vfiprintf_r+0x22c>)
 800eb92:	a904      	add	r1, sp, #16
 800eb94:	4630      	mov	r0, r6
 800eb96:	f3af 8000 	nop.w
 800eb9a:	4607      	mov	r7, r0
 800eb9c:	1c78      	adds	r0, r7, #1
 800eb9e:	d1d6      	bne.n	800eb4e <_vfiprintf_r+0x19e>
 800eba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eba2:	07d9      	lsls	r1, r3, #31
 800eba4:	d405      	bmi.n	800ebb2 <_vfiprintf_r+0x202>
 800eba6:	89ab      	ldrh	r3, [r5, #12]
 800eba8:	059a      	lsls	r2, r3, #22
 800ebaa:	d402      	bmi.n	800ebb2 <_vfiprintf_r+0x202>
 800ebac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebae:	f7ff fda7 	bl	800e700 <__retarget_lock_release_recursive>
 800ebb2:	89ab      	ldrh	r3, [r5, #12]
 800ebb4:	065b      	lsls	r3, r3, #25
 800ebb6:	f53f af1d 	bmi.w	800e9f4 <_vfiprintf_r+0x44>
 800ebba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebbc:	e71c      	b.n	800e9f8 <_vfiprintf_r+0x48>
 800ebbe:	ab03      	add	r3, sp, #12
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	462a      	mov	r2, r5
 800ebc4:	4b05      	ldr	r3, [pc, #20]	; (800ebdc <_vfiprintf_r+0x22c>)
 800ebc6:	a904      	add	r1, sp, #16
 800ebc8:	4630      	mov	r0, r6
 800ebca:	f000 f879 	bl	800ecc0 <_printf_i>
 800ebce:	e7e4      	b.n	800eb9a <_vfiprintf_r+0x1ea>
 800ebd0:	08011f19 	.word	0x08011f19
 800ebd4:	08011f23 	.word	0x08011f23
 800ebd8:	00000000 	.word	0x00000000
 800ebdc:	0800e98b 	.word	0x0800e98b
 800ebe0:	08011f1f 	.word	0x08011f1f

0800ebe4 <_printf_common>:
 800ebe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe8:	4616      	mov	r6, r2
 800ebea:	4699      	mov	r9, r3
 800ebec:	688a      	ldr	r2, [r1, #8]
 800ebee:	690b      	ldr	r3, [r1, #16]
 800ebf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	bfb8      	it	lt
 800ebf8:	4613      	movlt	r3, r2
 800ebfa:	6033      	str	r3, [r6, #0]
 800ebfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec00:	4607      	mov	r7, r0
 800ec02:	460c      	mov	r4, r1
 800ec04:	b10a      	cbz	r2, 800ec0a <_printf_common+0x26>
 800ec06:	3301      	adds	r3, #1
 800ec08:	6033      	str	r3, [r6, #0]
 800ec0a:	6823      	ldr	r3, [r4, #0]
 800ec0c:	0699      	lsls	r1, r3, #26
 800ec0e:	bf42      	ittt	mi
 800ec10:	6833      	ldrmi	r3, [r6, #0]
 800ec12:	3302      	addmi	r3, #2
 800ec14:	6033      	strmi	r3, [r6, #0]
 800ec16:	6825      	ldr	r5, [r4, #0]
 800ec18:	f015 0506 	ands.w	r5, r5, #6
 800ec1c:	d106      	bne.n	800ec2c <_printf_common+0x48>
 800ec1e:	f104 0a19 	add.w	sl, r4, #25
 800ec22:	68e3      	ldr	r3, [r4, #12]
 800ec24:	6832      	ldr	r2, [r6, #0]
 800ec26:	1a9b      	subs	r3, r3, r2
 800ec28:	42ab      	cmp	r3, r5
 800ec2a:	dc26      	bgt.n	800ec7a <_printf_common+0x96>
 800ec2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec30:	1e13      	subs	r3, r2, #0
 800ec32:	6822      	ldr	r2, [r4, #0]
 800ec34:	bf18      	it	ne
 800ec36:	2301      	movne	r3, #1
 800ec38:	0692      	lsls	r2, r2, #26
 800ec3a:	d42b      	bmi.n	800ec94 <_printf_common+0xb0>
 800ec3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec40:	4649      	mov	r1, r9
 800ec42:	4638      	mov	r0, r7
 800ec44:	47c0      	blx	r8
 800ec46:	3001      	adds	r0, #1
 800ec48:	d01e      	beq.n	800ec88 <_printf_common+0xa4>
 800ec4a:	6823      	ldr	r3, [r4, #0]
 800ec4c:	6922      	ldr	r2, [r4, #16]
 800ec4e:	f003 0306 	and.w	r3, r3, #6
 800ec52:	2b04      	cmp	r3, #4
 800ec54:	bf02      	ittt	eq
 800ec56:	68e5      	ldreq	r5, [r4, #12]
 800ec58:	6833      	ldreq	r3, [r6, #0]
 800ec5a:	1aed      	subeq	r5, r5, r3
 800ec5c:	68a3      	ldr	r3, [r4, #8]
 800ec5e:	bf0c      	ite	eq
 800ec60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec64:	2500      	movne	r5, #0
 800ec66:	4293      	cmp	r3, r2
 800ec68:	bfc4      	itt	gt
 800ec6a:	1a9b      	subgt	r3, r3, r2
 800ec6c:	18ed      	addgt	r5, r5, r3
 800ec6e:	2600      	movs	r6, #0
 800ec70:	341a      	adds	r4, #26
 800ec72:	42b5      	cmp	r5, r6
 800ec74:	d11a      	bne.n	800ecac <_printf_common+0xc8>
 800ec76:	2000      	movs	r0, #0
 800ec78:	e008      	b.n	800ec8c <_printf_common+0xa8>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	4652      	mov	r2, sl
 800ec7e:	4649      	mov	r1, r9
 800ec80:	4638      	mov	r0, r7
 800ec82:	47c0      	blx	r8
 800ec84:	3001      	adds	r0, #1
 800ec86:	d103      	bne.n	800ec90 <_printf_common+0xac>
 800ec88:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec90:	3501      	adds	r5, #1
 800ec92:	e7c6      	b.n	800ec22 <_printf_common+0x3e>
 800ec94:	18e1      	adds	r1, r4, r3
 800ec96:	1c5a      	adds	r2, r3, #1
 800ec98:	2030      	movs	r0, #48	; 0x30
 800ec9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec9e:	4422      	add	r2, r4
 800eca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eca8:	3302      	adds	r3, #2
 800ecaa:	e7c7      	b.n	800ec3c <_printf_common+0x58>
 800ecac:	2301      	movs	r3, #1
 800ecae:	4622      	mov	r2, r4
 800ecb0:	4649      	mov	r1, r9
 800ecb2:	4638      	mov	r0, r7
 800ecb4:	47c0      	blx	r8
 800ecb6:	3001      	adds	r0, #1
 800ecb8:	d0e6      	beq.n	800ec88 <_printf_common+0xa4>
 800ecba:	3601      	adds	r6, #1
 800ecbc:	e7d9      	b.n	800ec72 <_printf_common+0x8e>
	...

0800ecc0 <_printf_i>:
 800ecc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc4:	7e0f      	ldrb	r7, [r1, #24]
 800ecc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ecc8:	2f78      	cmp	r7, #120	; 0x78
 800ecca:	4691      	mov	r9, r2
 800eccc:	4680      	mov	r8, r0
 800ecce:	460c      	mov	r4, r1
 800ecd0:	469a      	mov	sl, r3
 800ecd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ecd6:	d807      	bhi.n	800ece8 <_printf_i+0x28>
 800ecd8:	2f62      	cmp	r7, #98	; 0x62
 800ecda:	d80a      	bhi.n	800ecf2 <_printf_i+0x32>
 800ecdc:	2f00      	cmp	r7, #0
 800ecde:	f000 80d4 	beq.w	800ee8a <_printf_i+0x1ca>
 800ece2:	2f58      	cmp	r7, #88	; 0x58
 800ece4:	f000 80c0 	beq.w	800ee68 <_printf_i+0x1a8>
 800ece8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ecec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ecf0:	e03a      	b.n	800ed68 <_printf_i+0xa8>
 800ecf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ecf6:	2b15      	cmp	r3, #21
 800ecf8:	d8f6      	bhi.n	800ece8 <_printf_i+0x28>
 800ecfa:	a101      	add	r1, pc, #4	; (adr r1, 800ed00 <_printf_i+0x40>)
 800ecfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed00:	0800ed59 	.word	0x0800ed59
 800ed04:	0800ed6d 	.word	0x0800ed6d
 800ed08:	0800ece9 	.word	0x0800ece9
 800ed0c:	0800ece9 	.word	0x0800ece9
 800ed10:	0800ece9 	.word	0x0800ece9
 800ed14:	0800ece9 	.word	0x0800ece9
 800ed18:	0800ed6d 	.word	0x0800ed6d
 800ed1c:	0800ece9 	.word	0x0800ece9
 800ed20:	0800ece9 	.word	0x0800ece9
 800ed24:	0800ece9 	.word	0x0800ece9
 800ed28:	0800ece9 	.word	0x0800ece9
 800ed2c:	0800ee71 	.word	0x0800ee71
 800ed30:	0800ed99 	.word	0x0800ed99
 800ed34:	0800ee2b 	.word	0x0800ee2b
 800ed38:	0800ece9 	.word	0x0800ece9
 800ed3c:	0800ece9 	.word	0x0800ece9
 800ed40:	0800ee93 	.word	0x0800ee93
 800ed44:	0800ece9 	.word	0x0800ece9
 800ed48:	0800ed99 	.word	0x0800ed99
 800ed4c:	0800ece9 	.word	0x0800ece9
 800ed50:	0800ece9 	.word	0x0800ece9
 800ed54:	0800ee33 	.word	0x0800ee33
 800ed58:	682b      	ldr	r3, [r5, #0]
 800ed5a:	1d1a      	adds	r2, r3, #4
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	602a      	str	r2, [r5, #0]
 800ed60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed68:	2301      	movs	r3, #1
 800ed6a:	e09f      	b.n	800eeac <_printf_i+0x1ec>
 800ed6c:	6820      	ldr	r0, [r4, #0]
 800ed6e:	682b      	ldr	r3, [r5, #0]
 800ed70:	0607      	lsls	r7, r0, #24
 800ed72:	f103 0104 	add.w	r1, r3, #4
 800ed76:	6029      	str	r1, [r5, #0]
 800ed78:	d501      	bpl.n	800ed7e <_printf_i+0xbe>
 800ed7a:	681e      	ldr	r6, [r3, #0]
 800ed7c:	e003      	b.n	800ed86 <_printf_i+0xc6>
 800ed7e:	0646      	lsls	r6, r0, #25
 800ed80:	d5fb      	bpl.n	800ed7a <_printf_i+0xba>
 800ed82:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ed86:	2e00      	cmp	r6, #0
 800ed88:	da03      	bge.n	800ed92 <_printf_i+0xd2>
 800ed8a:	232d      	movs	r3, #45	; 0x2d
 800ed8c:	4276      	negs	r6, r6
 800ed8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed92:	485a      	ldr	r0, [pc, #360]	; (800eefc <_printf_i+0x23c>)
 800ed94:	230a      	movs	r3, #10
 800ed96:	e012      	b.n	800edbe <_printf_i+0xfe>
 800ed98:	682b      	ldr	r3, [r5, #0]
 800ed9a:	6820      	ldr	r0, [r4, #0]
 800ed9c:	1d19      	adds	r1, r3, #4
 800ed9e:	6029      	str	r1, [r5, #0]
 800eda0:	0605      	lsls	r5, r0, #24
 800eda2:	d501      	bpl.n	800eda8 <_printf_i+0xe8>
 800eda4:	681e      	ldr	r6, [r3, #0]
 800eda6:	e002      	b.n	800edae <_printf_i+0xee>
 800eda8:	0641      	lsls	r1, r0, #25
 800edaa:	d5fb      	bpl.n	800eda4 <_printf_i+0xe4>
 800edac:	881e      	ldrh	r6, [r3, #0]
 800edae:	4853      	ldr	r0, [pc, #332]	; (800eefc <_printf_i+0x23c>)
 800edb0:	2f6f      	cmp	r7, #111	; 0x6f
 800edb2:	bf0c      	ite	eq
 800edb4:	2308      	moveq	r3, #8
 800edb6:	230a      	movne	r3, #10
 800edb8:	2100      	movs	r1, #0
 800edba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edbe:	6865      	ldr	r5, [r4, #4]
 800edc0:	60a5      	str	r5, [r4, #8]
 800edc2:	2d00      	cmp	r5, #0
 800edc4:	bfa2      	ittt	ge
 800edc6:	6821      	ldrge	r1, [r4, #0]
 800edc8:	f021 0104 	bicge.w	r1, r1, #4
 800edcc:	6021      	strge	r1, [r4, #0]
 800edce:	b90e      	cbnz	r6, 800edd4 <_printf_i+0x114>
 800edd0:	2d00      	cmp	r5, #0
 800edd2:	d04b      	beq.n	800ee6c <_printf_i+0x1ac>
 800edd4:	4615      	mov	r5, r2
 800edd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800edda:	fb03 6711 	mls	r7, r3, r1, r6
 800edde:	5dc7      	ldrb	r7, [r0, r7]
 800ede0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ede4:	4637      	mov	r7, r6
 800ede6:	42bb      	cmp	r3, r7
 800ede8:	460e      	mov	r6, r1
 800edea:	d9f4      	bls.n	800edd6 <_printf_i+0x116>
 800edec:	2b08      	cmp	r3, #8
 800edee:	d10b      	bne.n	800ee08 <_printf_i+0x148>
 800edf0:	6823      	ldr	r3, [r4, #0]
 800edf2:	07de      	lsls	r6, r3, #31
 800edf4:	d508      	bpl.n	800ee08 <_printf_i+0x148>
 800edf6:	6923      	ldr	r3, [r4, #16]
 800edf8:	6861      	ldr	r1, [r4, #4]
 800edfa:	4299      	cmp	r1, r3
 800edfc:	bfde      	ittt	le
 800edfe:	2330      	movle	r3, #48	; 0x30
 800ee00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee08:	1b52      	subs	r2, r2, r5
 800ee0a:	6122      	str	r2, [r4, #16]
 800ee0c:	f8cd a000 	str.w	sl, [sp]
 800ee10:	464b      	mov	r3, r9
 800ee12:	aa03      	add	r2, sp, #12
 800ee14:	4621      	mov	r1, r4
 800ee16:	4640      	mov	r0, r8
 800ee18:	f7ff fee4 	bl	800ebe4 <_printf_common>
 800ee1c:	3001      	adds	r0, #1
 800ee1e:	d14a      	bne.n	800eeb6 <_printf_i+0x1f6>
 800ee20:	f04f 30ff 	mov.w	r0, #4294967295
 800ee24:	b004      	add	sp, #16
 800ee26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	f043 0320 	orr.w	r3, r3, #32
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	4833      	ldr	r0, [pc, #204]	; (800ef00 <_printf_i+0x240>)
 800ee34:	2778      	movs	r7, #120	; 0x78
 800ee36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	6829      	ldr	r1, [r5, #0]
 800ee3e:	061f      	lsls	r7, r3, #24
 800ee40:	f851 6b04 	ldr.w	r6, [r1], #4
 800ee44:	d402      	bmi.n	800ee4c <_printf_i+0x18c>
 800ee46:	065f      	lsls	r7, r3, #25
 800ee48:	bf48      	it	mi
 800ee4a:	b2b6      	uxthmi	r6, r6
 800ee4c:	07df      	lsls	r7, r3, #31
 800ee4e:	bf48      	it	mi
 800ee50:	f043 0320 	orrmi.w	r3, r3, #32
 800ee54:	6029      	str	r1, [r5, #0]
 800ee56:	bf48      	it	mi
 800ee58:	6023      	strmi	r3, [r4, #0]
 800ee5a:	b91e      	cbnz	r6, 800ee64 <_printf_i+0x1a4>
 800ee5c:	6823      	ldr	r3, [r4, #0]
 800ee5e:	f023 0320 	bic.w	r3, r3, #32
 800ee62:	6023      	str	r3, [r4, #0]
 800ee64:	2310      	movs	r3, #16
 800ee66:	e7a7      	b.n	800edb8 <_printf_i+0xf8>
 800ee68:	4824      	ldr	r0, [pc, #144]	; (800eefc <_printf_i+0x23c>)
 800ee6a:	e7e4      	b.n	800ee36 <_printf_i+0x176>
 800ee6c:	4615      	mov	r5, r2
 800ee6e:	e7bd      	b.n	800edec <_printf_i+0x12c>
 800ee70:	682b      	ldr	r3, [r5, #0]
 800ee72:	6826      	ldr	r6, [r4, #0]
 800ee74:	6961      	ldr	r1, [r4, #20]
 800ee76:	1d18      	adds	r0, r3, #4
 800ee78:	6028      	str	r0, [r5, #0]
 800ee7a:	0635      	lsls	r5, r6, #24
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	d501      	bpl.n	800ee84 <_printf_i+0x1c4>
 800ee80:	6019      	str	r1, [r3, #0]
 800ee82:	e002      	b.n	800ee8a <_printf_i+0x1ca>
 800ee84:	0670      	lsls	r0, r6, #25
 800ee86:	d5fb      	bpl.n	800ee80 <_printf_i+0x1c0>
 800ee88:	8019      	strh	r1, [r3, #0]
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	6123      	str	r3, [r4, #16]
 800ee8e:	4615      	mov	r5, r2
 800ee90:	e7bc      	b.n	800ee0c <_printf_i+0x14c>
 800ee92:	682b      	ldr	r3, [r5, #0]
 800ee94:	1d1a      	adds	r2, r3, #4
 800ee96:	602a      	str	r2, [r5, #0]
 800ee98:	681d      	ldr	r5, [r3, #0]
 800ee9a:	6862      	ldr	r2, [r4, #4]
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f7f1 f9a6 	bl	80001f0 <memchr>
 800eea4:	b108      	cbz	r0, 800eeaa <_printf_i+0x1ea>
 800eea6:	1b40      	subs	r0, r0, r5
 800eea8:	6060      	str	r0, [r4, #4]
 800eeaa:	6863      	ldr	r3, [r4, #4]
 800eeac:	6123      	str	r3, [r4, #16]
 800eeae:	2300      	movs	r3, #0
 800eeb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eeb4:	e7aa      	b.n	800ee0c <_printf_i+0x14c>
 800eeb6:	6923      	ldr	r3, [r4, #16]
 800eeb8:	462a      	mov	r2, r5
 800eeba:	4649      	mov	r1, r9
 800eebc:	4640      	mov	r0, r8
 800eebe:	47d0      	blx	sl
 800eec0:	3001      	adds	r0, #1
 800eec2:	d0ad      	beq.n	800ee20 <_printf_i+0x160>
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	079b      	lsls	r3, r3, #30
 800eec8:	d413      	bmi.n	800eef2 <_printf_i+0x232>
 800eeca:	68e0      	ldr	r0, [r4, #12]
 800eecc:	9b03      	ldr	r3, [sp, #12]
 800eece:	4298      	cmp	r0, r3
 800eed0:	bfb8      	it	lt
 800eed2:	4618      	movlt	r0, r3
 800eed4:	e7a6      	b.n	800ee24 <_printf_i+0x164>
 800eed6:	2301      	movs	r3, #1
 800eed8:	4632      	mov	r2, r6
 800eeda:	4649      	mov	r1, r9
 800eedc:	4640      	mov	r0, r8
 800eede:	47d0      	blx	sl
 800eee0:	3001      	adds	r0, #1
 800eee2:	d09d      	beq.n	800ee20 <_printf_i+0x160>
 800eee4:	3501      	adds	r5, #1
 800eee6:	68e3      	ldr	r3, [r4, #12]
 800eee8:	9903      	ldr	r1, [sp, #12]
 800eeea:	1a5b      	subs	r3, r3, r1
 800eeec:	42ab      	cmp	r3, r5
 800eeee:	dcf2      	bgt.n	800eed6 <_printf_i+0x216>
 800eef0:	e7eb      	b.n	800eeca <_printf_i+0x20a>
 800eef2:	2500      	movs	r5, #0
 800eef4:	f104 0619 	add.w	r6, r4, #25
 800eef8:	e7f5      	b.n	800eee6 <_printf_i+0x226>
 800eefa:	bf00      	nop
 800eefc:	08011f2a 	.word	0x08011f2a
 800ef00:	08011f3b 	.word	0x08011f3b

0800ef04 <__sflush_r>:
 800ef04:	898a      	ldrh	r2, [r1, #12]
 800ef06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef0a:	4605      	mov	r5, r0
 800ef0c:	0710      	lsls	r0, r2, #28
 800ef0e:	460c      	mov	r4, r1
 800ef10:	d458      	bmi.n	800efc4 <__sflush_r+0xc0>
 800ef12:	684b      	ldr	r3, [r1, #4]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	dc05      	bgt.n	800ef24 <__sflush_r+0x20>
 800ef18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	dc02      	bgt.n	800ef24 <__sflush_r+0x20>
 800ef1e:	2000      	movs	r0, #0
 800ef20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef26:	2e00      	cmp	r6, #0
 800ef28:	d0f9      	beq.n	800ef1e <__sflush_r+0x1a>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef30:	682f      	ldr	r7, [r5, #0]
 800ef32:	6a21      	ldr	r1, [r4, #32]
 800ef34:	602b      	str	r3, [r5, #0]
 800ef36:	d032      	beq.n	800ef9e <__sflush_r+0x9a>
 800ef38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	075a      	lsls	r2, r3, #29
 800ef3e:	d505      	bpl.n	800ef4c <__sflush_r+0x48>
 800ef40:	6863      	ldr	r3, [r4, #4]
 800ef42:	1ac0      	subs	r0, r0, r3
 800ef44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef46:	b10b      	cbz	r3, 800ef4c <__sflush_r+0x48>
 800ef48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef4a:	1ac0      	subs	r0, r0, r3
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	4602      	mov	r2, r0
 800ef50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef52:	6a21      	ldr	r1, [r4, #32]
 800ef54:	4628      	mov	r0, r5
 800ef56:	47b0      	blx	r6
 800ef58:	1c43      	adds	r3, r0, #1
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	d106      	bne.n	800ef6c <__sflush_r+0x68>
 800ef5e:	6829      	ldr	r1, [r5, #0]
 800ef60:	291d      	cmp	r1, #29
 800ef62:	d82b      	bhi.n	800efbc <__sflush_r+0xb8>
 800ef64:	4a29      	ldr	r2, [pc, #164]	; (800f00c <__sflush_r+0x108>)
 800ef66:	410a      	asrs	r2, r1
 800ef68:	07d6      	lsls	r6, r2, #31
 800ef6a:	d427      	bmi.n	800efbc <__sflush_r+0xb8>
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	6062      	str	r2, [r4, #4]
 800ef70:	04d9      	lsls	r1, r3, #19
 800ef72:	6922      	ldr	r2, [r4, #16]
 800ef74:	6022      	str	r2, [r4, #0]
 800ef76:	d504      	bpl.n	800ef82 <__sflush_r+0x7e>
 800ef78:	1c42      	adds	r2, r0, #1
 800ef7a:	d101      	bne.n	800ef80 <__sflush_r+0x7c>
 800ef7c:	682b      	ldr	r3, [r5, #0]
 800ef7e:	b903      	cbnz	r3, 800ef82 <__sflush_r+0x7e>
 800ef80:	6560      	str	r0, [r4, #84]	; 0x54
 800ef82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef84:	602f      	str	r7, [r5, #0]
 800ef86:	2900      	cmp	r1, #0
 800ef88:	d0c9      	beq.n	800ef1e <__sflush_r+0x1a>
 800ef8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef8e:	4299      	cmp	r1, r3
 800ef90:	d002      	beq.n	800ef98 <__sflush_r+0x94>
 800ef92:	4628      	mov	r0, r5
 800ef94:	f7ff fbe2 	bl	800e75c <_free_r>
 800ef98:	2000      	movs	r0, #0
 800ef9a:	6360      	str	r0, [r4, #52]	; 0x34
 800ef9c:	e7c0      	b.n	800ef20 <__sflush_r+0x1c>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	4628      	mov	r0, r5
 800efa2:	47b0      	blx	r6
 800efa4:	1c41      	adds	r1, r0, #1
 800efa6:	d1c8      	bne.n	800ef3a <__sflush_r+0x36>
 800efa8:	682b      	ldr	r3, [r5, #0]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d0c5      	beq.n	800ef3a <__sflush_r+0x36>
 800efae:	2b1d      	cmp	r3, #29
 800efb0:	d001      	beq.n	800efb6 <__sflush_r+0xb2>
 800efb2:	2b16      	cmp	r3, #22
 800efb4:	d101      	bne.n	800efba <__sflush_r+0xb6>
 800efb6:	602f      	str	r7, [r5, #0]
 800efb8:	e7b1      	b.n	800ef1e <__sflush_r+0x1a>
 800efba:	89a3      	ldrh	r3, [r4, #12]
 800efbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efc0:	81a3      	strh	r3, [r4, #12]
 800efc2:	e7ad      	b.n	800ef20 <__sflush_r+0x1c>
 800efc4:	690f      	ldr	r7, [r1, #16]
 800efc6:	2f00      	cmp	r7, #0
 800efc8:	d0a9      	beq.n	800ef1e <__sflush_r+0x1a>
 800efca:	0793      	lsls	r3, r2, #30
 800efcc:	680e      	ldr	r6, [r1, #0]
 800efce:	bf08      	it	eq
 800efd0:	694b      	ldreq	r3, [r1, #20]
 800efd2:	600f      	str	r7, [r1, #0]
 800efd4:	bf18      	it	ne
 800efd6:	2300      	movne	r3, #0
 800efd8:	eba6 0807 	sub.w	r8, r6, r7
 800efdc:	608b      	str	r3, [r1, #8]
 800efde:	f1b8 0f00 	cmp.w	r8, #0
 800efe2:	dd9c      	ble.n	800ef1e <__sflush_r+0x1a>
 800efe4:	6a21      	ldr	r1, [r4, #32]
 800efe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efe8:	4643      	mov	r3, r8
 800efea:	463a      	mov	r2, r7
 800efec:	4628      	mov	r0, r5
 800efee:	47b0      	blx	r6
 800eff0:	2800      	cmp	r0, #0
 800eff2:	dc06      	bgt.n	800f002 <__sflush_r+0xfe>
 800eff4:	89a3      	ldrh	r3, [r4, #12]
 800eff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800effa:	81a3      	strh	r3, [r4, #12]
 800effc:	f04f 30ff 	mov.w	r0, #4294967295
 800f000:	e78e      	b.n	800ef20 <__sflush_r+0x1c>
 800f002:	4407      	add	r7, r0
 800f004:	eba8 0800 	sub.w	r8, r8, r0
 800f008:	e7e9      	b.n	800efde <__sflush_r+0xda>
 800f00a:	bf00      	nop
 800f00c:	dfbffffe 	.word	0xdfbffffe

0800f010 <_fflush_r>:
 800f010:	b538      	push	{r3, r4, r5, lr}
 800f012:	690b      	ldr	r3, [r1, #16]
 800f014:	4605      	mov	r5, r0
 800f016:	460c      	mov	r4, r1
 800f018:	b913      	cbnz	r3, 800f020 <_fflush_r+0x10>
 800f01a:	2500      	movs	r5, #0
 800f01c:	4628      	mov	r0, r5
 800f01e:	bd38      	pop	{r3, r4, r5, pc}
 800f020:	b118      	cbz	r0, 800f02a <_fflush_r+0x1a>
 800f022:	6a03      	ldr	r3, [r0, #32]
 800f024:	b90b      	cbnz	r3, 800f02a <_fflush_r+0x1a>
 800f026:	f7ff fa5b 	bl	800e4e0 <__sinit>
 800f02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d0f3      	beq.n	800f01a <_fflush_r+0xa>
 800f032:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f034:	07d0      	lsls	r0, r2, #31
 800f036:	d404      	bmi.n	800f042 <_fflush_r+0x32>
 800f038:	0599      	lsls	r1, r3, #22
 800f03a:	d402      	bmi.n	800f042 <_fflush_r+0x32>
 800f03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f03e:	f7ff fb5e 	bl	800e6fe <__retarget_lock_acquire_recursive>
 800f042:	4628      	mov	r0, r5
 800f044:	4621      	mov	r1, r4
 800f046:	f7ff ff5d 	bl	800ef04 <__sflush_r>
 800f04a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f04c:	07da      	lsls	r2, r3, #31
 800f04e:	4605      	mov	r5, r0
 800f050:	d4e4      	bmi.n	800f01c <_fflush_r+0xc>
 800f052:	89a3      	ldrh	r3, [r4, #12]
 800f054:	059b      	lsls	r3, r3, #22
 800f056:	d4e1      	bmi.n	800f01c <_fflush_r+0xc>
 800f058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f05a:	f7ff fb51 	bl	800e700 <__retarget_lock_release_recursive>
 800f05e:	e7dd      	b.n	800f01c <_fflush_r+0xc>

0800f060 <fiprintf>:
 800f060:	b40e      	push	{r1, r2, r3}
 800f062:	b503      	push	{r0, r1, lr}
 800f064:	4601      	mov	r1, r0
 800f066:	ab03      	add	r3, sp, #12
 800f068:	4805      	ldr	r0, [pc, #20]	; (800f080 <fiprintf+0x20>)
 800f06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f06e:	6800      	ldr	r0, [r0, #0]
 800f070:	9301      	str	r3, [sp, #4]
 800f072:	f7ff fc9d 	bl	800e9b0 <_vfiprintf_r>
 800f076:	b002      	add	sp, #8
 800f078:	f85d eb04 	ldr.w	lr, [sp], #4
 800f07c:	b003      	add	sp, #12
 800f07e:	4770      	bx	lr
 800f080:	20000084 	.word	0x20000084

0800f084 <__swbuf_r>:
 800f084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f086:	460e      	mov	r6, r1
 800f088:	4614      	mov	r4, r2
 800f08a:	4605      	mov	r5, r0
 800f08c:	b118      	cbz	r0, 800f096 <__swbuf_r+0x12>
 800f08e:	6a03      	ldr	r3, [r0, #32]
 800f090:	b90b      	cbnz	r3, 800f096 <__swbuf_r+0x12>
 800f092:	f7ff fa25 	bl	800e4e0 <__sinit>
 800f096:	69a3      	ldr	r3, [r4, #24]
 800f098:	60a3      	str	r3, [r4, #8]
 800f09a:	89a3      	ldrh	r3, [r4, #12]
 800f09c:	071a      	lsls	r2, r3, #28
 800f09e:	d525      	bpl.n	800f0ec <__swbuf_r+0x68>
 800f0a0:	6923      	ldr	r3, [r4, #16]
 800f0a2:	b31b      	cbz	r3, 800f0ec <__swbuf_r+0x68>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	6922      	ldr	r2, [r4, #16]
 800f0a8:	1a98      	subs	r0, r3, r2
 800f0aa:	6963      	ldr	r3, [r4, #20]
 800f0ac:	b2f6      	uxtb	r6, r6
 800f0ae:	4283      	cmp	r3, r0
 800f0b0:	4637      	mov	r7, r6
 800f0b2:	dc04      	bgt.n	800f0be <__swbuf_r+0x3a>
 800f0b4:	4621      	mov	r1, r4
 800f0b6:	4628      	mov	r0, r5
 800f0b8:	f7ff ffaa 	bl	800f010 <_fflush_r>
 800f0bc:	b9e0      	cbnz	r0, 800f0f8 <__swbuf_r+0x74>
 800f0be:	68a3      	ldr	r3, [r4, #8]
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	60a3      	str	r3, [r4, #8]
 800f0c4:	6823      	ldr	r3, [r4, #0]
 800f0c6:	1c5a      	adds	r2, r3, #1
 800f0c8:	6022      	str	r2, [r4, #0]
 800f0ca:	701e      	strb	r6, [r3, #0]
 800f0cc:	6962      	ldr	r2, [r4, #20]
 800f0ce:	1c43      	adds	r3, r0, #1
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d004      	beq.n	800f0de <__swbuf_r+0x5a>
 800f0d4:	89a3      	ldrh	r3, [r4, #12]
 800f0d6:	07db      	lsls	r3, r3, #31
 800f0d8:	d506      	bpl.n	800f0e8 <__swbuf_r+0x64>
 800f0da:	2e0a      	cmp	r6, #10
 800f0dc:	d104      	bne.n	800f0e8 <__swbuf_r+0x64>
 800f0de:	4621      	mov	r1, r4
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	f7ff ff95 	bl	800f010 <_fflush_r>
 800f0e6:	b938      	cbnz	r0, 800f0f8 <__swbuf_r+0x74>
 800f0e8:	4638      	mov	r0, r7
 800f0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	f000 f806 	bl	800f100 <__swsetup_r>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d0d5      	beq.n	800f0a4 <__swbuf_r+0x20>
 800f0f8:	f04f 37ff 	mov.w	r7, #4294967295
 800f0fc:	e7f4      	b.n	800f0e8 <__swbuf_r+0x64>
	...

0800f100 <__swsetup_r>:
 800f100:	b538      	push	{r3, r4, r5, lr}
 800f102:	4b2a      	ldr	r3, [pc, #168]	; (800f1ac <__swsetup_r+0xac>)
 800f104:	4605      	mov	r5, r0
 800f106:	6818      	ldr	r0, [r3, #0]
 800f108:	460c      	mov	r4, r1
 800f10a:	b118      	cbz	r0, 800f114 <__swsetup_r+0x14>
 800f10c:	6a03      	ldr	r3, [r0, #32]
 800f10e:	b90b      	cbnz	r3, 800f114 <__swsetup_r+0x14>
 800f110:	f7ff f9e6 	bl	800e4e0 <__sinit>
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f11a:	0718      	lsls	r0, r3, #28
 800f11c:	d422      	bmi.n	800f164 <__swsetup_r+0x64>
 800f11e:	06d9      	lsls	r1, r3, #27
 800f120:	d407      	bmi.n	800f132 <__swsetup_r+0x32>
 800f122:	2309      	movs	r3, #9
 800f124:	602b      	str	r3, [r5, #0]
 800f126:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f12a:	81a3      	strh	r3, [r4, #12]
 800f12c:	f04f 30ff 	mov.w	r0, #4294967295
 800f130:	e034      	b.n	800f19c <__swsetup_r+0x9c>
 800f132:	0758      	lsls	r0, r3, #29
 800f134:	d512      	bpl.n	800f15c <__swsetup_r+0x5c>
 800f136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f138:	b141      	cbz	r1, 800f14c <__swsetup_r+0x4c>
 800f13a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f13e:	4299      	cmp	r1, r3
 800f140:	d002      	beq.n	800f148 <__swsetup_r+0x48>
 800f142:	4628      	mov	r0, r5
 800f144:	f7ff fb0a 	bl	800e75c <_free_r>
 800f148:	2300      	movs	r3, #0
 800f14a:	6363      	str	r3, [r4, #52]	; 0x34
 800f14c:	89a3      	ldrh	r3, [r4, #12]
 800f14e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f152:	81a3      	strh	r3, [r4, #12]
 800f154:	2300      	movs	r3, #0
 800f156:	6063      	str	r3, [r4, #4]
 800f158:	6923      	ldr	r3, [r4, #16]
 800f15a:	6023      	str	r3, [r4, #0]
 800f15c:	89a3      	ldrh	r3, [r4, #12]
 800f15e:	f043 0308 	orr.w	r3, r3, #8
 800f162:	81a3      	strh	r3, [r4, #12]
 800f164:	6923      	ldr	r3, [r4, #16]
 800f166:	b94b      	cbnz	r3, 800f17c <__swsetup_r+0x7c>
 800f168:	89a3      	ldrh	r3, [r4, #12]
 800f16a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f16e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f172:	d003      	beq.n	800f17c <__swsetup_r+0x7c>
 800f174:	4621      	mov	r1, r4
 800f176:	4628      	mov	r0, r5
 800f178:	f000 f857 	bl	800f22a <__smakebuf_r>
 800f17c:	89a0      	ldrh	r0, [r4, #12]
 800f17e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f182:	f010 0301 	ands.w	r3, r0, #1
 800f186:	d00a      	beq.n	800f19e <__swsetup_r+0x9e>
 800f188:	2300      	movs	r3, #0
 800f18a:	60a3      	str	r3, [r4, #8]
 800f18c:	6963      	ldr	r3, [r4, #20]
 800f18e:	425b      	negs	r3, r3
 800f190:	61a3      	str	r3, [r4, #24]
 800f192:	6923      	ldr	r3, [r4, #16]
 800f194:	b943      	cbnz	r3, 800f1a8 <__swsetup_r+0xa8>
 800f196:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f19a:	d1c4      	bne.n	800f126 <__swsetup_r+0x26>
 800f19c:	bd38      	pop	{r3, r4, r5, pc}
 800f19e:	0781      	lsls	r1, r0, #30
 800f1a0:	bf58      	it	pl
 800f1a2:	6963      	ldrpl	r3, [r4, #20]
 800f1a4:	60a3      	str	r3, [r4, #8]
 800f1a6:	e7f4      	b.n	800f192 <__swsetup_r+0x92>
 800f1a8:	2000      	movs	r0, #0
 800f1aa:	e7f7      	b.n	800f19c <__swsetup_r+0x9c>
 800f1ac:	20000084 	.word	0x20000084

0800f1b0 <_sbrk_r>:
 800f1b0:	b538      	push	{r3, r4, r5, lr}
 800f1b2:	4d06      	ldr	r5, [pc, #24]	; (800f1cc <_sbrk_r+0x1c>)
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	4608      	mov	r0, r1
 800f1ba:	602b      	str	r3, [r5, #0]
 800f1bc:	f7f1 fd22 	bl	8000c04 <_sbrk>
 800f1c0:	1c43      	adds	r3, r0, #1
 800f1c2:	d102      	bne.n	800f1ca <_sbrk_r+0x1a>
 800f1c4:	682b      	ldr	r3, [r5, #0]
 800f1c6:	b103      	cbz	r3, 800f1ca <_sbrk_r+0x1a>
 800f1c8:	6023      	str	r3, [r4, #0]
 800f1ca:	bd38      	pop	{r3, r4, r5, pc}
 800f1cc:	20008a04 	.word	0x20008a04

0800f1d0 <abort>:
 800f1d0:	b508      	push	{r3, lr}
 800f1d2:	2006      	movs	r0, #6
 800f1d4:	f000 f88e 	bl	800f2f4 <raise>
 800f1d8:	2001      	movs	r0, #1
 800f1da:	f7f1 fc9b 	bl	8000b14 <_exit>

0800f1de <__swhatbuf_r>:
 800f1de:	b570      	push	{r4, r5, r6, lr}
 800f1e0:	460c      	mov	r4, r1
 800f1e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e6:	2900      	cmp	r1, #0
 800f1e8:	b096      	sub	sp, #88	; 0x58
 800f1ea:	4615      	mov	r5, r2
 800f1ec:	461e      	mov	r6, r3
 800f1ee:	da0d      	bge.n	800f20c <__swhatbuf_r+0x2e>
 800f1f0:	89a3      	ldrh	r3, [r4, #12]
 800f1f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f1f6:	f04f 0100 	mov.w	r1, #0
 800f1fa:	bf0c      	ite	eq
 800f1fc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f200:	2340      	movne	r3, #64	; 0x40
 800f202:	2000      	movs	r0, #0
 800f204:	6031      	str	r1, [r6, #0]
 800f206:	602b      	str	r3, [r5, #0]
 800f208:	b016      	add	sp, #88	; 0x58
 800f20a:	bd70      	pop	{r4, r5, r6, pc}
 800f20c:	466a      	mov	r2, sp
 800f20e:	f000 f879 	bl	800f304 <_fstat_r>
 800f212:	2800      	cmp	r0, #0
 800f214:	dbec      	blt.n	800f1f0 <__swhatbuf_r+0x12>
 800f216:	9901      	ldr	r1, [sp, #4]
 800f218:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f21c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f220:	4259      	negs	r1, r3
 800f222:	4159      	adcs	r1, r3
 800f224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f228:	e7eb      	b.n	800f202 <__swhatbuf_r+0x24>

0800f22a <__smakebuf_r>:
 800f22a:	898b      	ldrh	r3, [r1, #12]
 800f22c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f22e:	079d      	lsls	r5, r3, #30
 800f230:	4606      	mov	r6, r0
 800f232:	460c      	mov	r4, r1
 800f234:	d507      	bpl.n	800f246 <__smakebuf_r+0x1c>
 800f236:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f23a:	6023      	str	r3, [r4, #0]
 800f23c:	6123      	str	r3, [r4, #16]
 800f23e:	2301      	movs	r3, #1
 800f240:	6163      	str	r3, [r4, #20]
 800f242:	b002      	add	sp, #8
 800f244:	bd70      	pop	{r4, r5, r6, pc}
 800f246:	ab01      	add	r3, sp, #4
 800f248:	466a      	mov	r2, sp
 800f24a:	f7ff ffc8 	bl	800f1de <__swhatbuf_r>
 800f24e:	9900      	ldr	r1, [sp, #0]
 800f250:	4605      	mov	r5, r0
 800f252:	4630      	mov	r0, r6
 800f254:	f7ff faf6 	bl	800e844 <_malloc_r>
 800f258:	b948      	cbnz	r0, 800f26e <__smakebuf_r+0x44>
 800f25a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f25e:	059a      	lsls	r2, r3, #22
 800f260:	d4ef      	bmi.n	800f242 <__smakebuf_r+0x18>
 800f262:	f023 0303 	bic.w	r3, r3, #3
 800f266:	f043 0302 	orr.w	r3, r3, #2
 800f26a:	81a3      	strh	r3, [r4, #12]
 800f26c:	e7e3      	b.n	800f236 <__smakebuf_r+0xc>
 800f26e:	89a3      	ldrh	r3, [r4, #12]
 800f270:	6020      	str	r0, [r4, #0]
 800f272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f276:	81a3      	strh	r3, [r4, #12]
 800f278:	9b00      	ldr	r3, [sp, #0]
 800f27a:	6163      	str	r3, [r4, #20]
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	6120      	str	r0, [r4, #16]
 800f280:	b15b      	cbz	r3, 800f29a <__smakebuf_r+0x70>
 800f282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f286:	4630      	mov	r0, r6
 800f288:	f000 f84e 	bl	800f328 <_isatty_r>
 800f28c:	b128      	cbz	r0, 800f29a <__smakebuf_r+0x70>
 800f28e:	89a3      	ldrh	r3, [r4, #12]
 800f290:	f023 0303 	bic.w	r3, r3, #3
 800f294:	f043 0301 	orr.w	r3, r3, #1
 800f298:	81a3      	strh	r3, [r4, #12]
 800f29a:	89a3      	ldrh	r3, [r4, #12]
 800f29c:	431d      	orrs	r5, r3
 800f29e:	81a5      	strh	r5, [r4, #12]
 800f2a0:	e7cf      	b.n	800f242 <__smakebuf_r+0x18>

0800f2a2 <_raise_r>:
 800f2a2:	291f      	cmp	r1, #31
 800f2a4:	b538      	push	{r3, r4, r5, lr}
 800f2a6:	4604      	mov	r4, r0
 800f2a8:	460d      	mov	r5, r1
 800f2aa:	d904      	bls.n	800f2b6 <_raise_r+0x14>
 800f2ac:	2316      	movs	r3, #22
 800f2ae:	6003      	str	r3, [r0, #0]
 800f2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b4:	bd38      	pop	{r3, r4, r5, pc}
 800f2b6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f2b8:	b112      	cbz	r2, 800f2c0 <_raise_r+0x1e>
 800f2ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2be:	b94b      	cbnz	r3, 800f2d4 <_raise_r+0x32>
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f000 f853 	bl	800f36c <_getpid_r>
 800f2c6:	462a      	mov	r2, r5
 800f2c8:	4601      	mov	r1, r0
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2d0:	f000 b83a 	b.w	800f348 <_kill_r>
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d00a      	beq.n	800f2ee <_raise_r+0x4c>
 800f2d8:	1c59      	adds	r1, r3, #1
 800f2da:	d103      	bne.n	800f2e4 <_raise_r+0x42>
 800f2dc:	2316      	movs	r3, #22
 800f2de:	6003      	str	r3, [r0, #0]
 800f2e0:	2001      	movs	r0, #1
 800f2e2:	e7e7      	b.n	800f2b4 <_raise_r+0x12>
 800f2e4:	2400      	movs	r4, #0
 800f2e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	4798      	blx	r3
 800f2ee:	2000      	movs	r0, #0
 800f2f0:	e7e0      	b.n	800f2b4 <_raise_r+0x12>
	...

0800f2f4 <raise>:
 800f2f4:	4b02      	ldr	r3, [pc, #8]	; (800f300 <raise+0xc>)
 800f2f6:	4601      	mov	r1, r0
 800f2f8:	6818      	ldr	r0, [r3, #0]
 800f2fa:	f7ff bfd2 	b.w	800f2a2 <_raise_r>
 800f2fe:	bf00      	nop
 800f300:	20000084 	.word	0x20000084

0800f304 <_fstat_r>:
 800f304:	b538      	push	{r3, r4, r5, lr}
 800f306:	4d07      	ldr	r5, [pc, #28]	; (800f324 <_fstat_r+0x20>)
 800f308:	2300      	movs	r3, #0
 800f30a:	4604      	mov	r4, r0
 800f30c:	4608      	mov	r0, r1
 800f30e:	4611      	mov	r1, r2
 800f310:	602b      	str	r3, [r5, #0]
 800f312:	f7f1 fc4e 	bl	8000bb2 <_fstat>
 800f316:	1c43      	adds	r3, r0, #1
 800f318:	d102      	bne.n	800f320 <_fstat_r+0x1c>
 800f31a:	682b      	ldr	r3, [r5, #0]
 800f31c:	b103      	cbz	r3, 800f320 <_fstat_r+0x1c>
 800f31e:	6023      	str	r3, [r4, #0]
 800f320:	bd38      	pop	{r3, r4, r5, pc}
 800f322:	bf00      	nop
 800f324:	20008a04 	.word	0x20008a04

0800f328 <_isatty_r>:
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	4d06      	ldr	r5, [pc, #24]	; (800f344 <_isatty_r+0x1c>)
 800f32c:	2300      	movs	r3, #0
 800f32e:	4604      	mov	r4, r0
 800f330:	4608      	mov	r0, r1
 800f332:	602b      	str	r3, [r5, #0]
 800f334:	f7f1 fc4d 	bl	8000bd2 <_isatty>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d102      	bne.n	800f342 <_isatty_r+0x1a>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	b103      	cbz	r3, 800f342 <_isatty_r+0x1a>
 800f340:	6023      	str	r3, [r4, #0]
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	20008a04 	.word	0x20008a04

0800f348 <_kill_r>:
 800f348:	b538      	push	{r3, r4, r5, lr}
 800f34a:	4d07      	ldr	r5, [pc, #28]	; (800f368 <_kill_r+0x20>)
 800f34c:	2300      	movs	r3, #0
 800f34e:	4604      	mov	r4, r0
 800f350:	4608      	mov	r0, r1
 800f352:	4611      	mov	r1, r2
 800f354:	602b      	str	r3, [r5, #0]
 800f356:	f7f1 fbcb 	bl	8000af0 <_kill>
 800f35a:	1c43      	adds	r3, r0, #1
 800f35c:	d102      	bne.n	800f364 <_kill_r+0x1c>
 800f35e:	682b      	ldr	r3, [r5, #0]
 800f360:	b103      	cbz	r3, 800f364 <_kill_r+0x1c>
 800f362:	6023      	str	r3, [r4, #0]
 800f364:	bd38      	pop	{r3, r4, r5, pc}
 800f366:	bf00      	nop
 800f368:	20008a04 	.word	0x20008a04

0800f36c <_getpid_r>:
 800f36c:	f7f1 bbb8 	b.w	8000ae0 <_getpid>

0800f370 <_init>:
 800f370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f372:	bf00      	nop
 800f374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f376:	bc08      	pop	{r3}
 800f378:	469e      	mov	lr, r3
 800f37a:	4770      	bx	lr

0800f37c <_fini>:
 800f37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f37e:	bf00      	nop
 800f380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f382:	bc08      	pop	{r3}
 800f384:	469e      	mov	lr, r3
 800f386:	4770      	bx	lr
