
test_7_UDP_echo_server_with_lwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9f4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  0800fba4  0800fba4  0001fba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012768  08012768  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  08012768  08012768  00022768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012770  08012770  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012770  08012770  00022770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012774  08012774  00022774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012778  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          0000898c  20000088  20000088  00030088  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008a14  20008a14  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e1fb  00000000  00000000  000300fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000542d  00000000  00000000  0004e2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016a8  00000000  00000000  00053728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000120d  00000000  00000000  00054dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000305a9  00000000  00000000  00055fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000274e5  00000000  00000000  00086586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed747  00000000  00000000  000ada6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006568  00000000  00000000  0019b1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  001a171c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000088 	.word	0x20000088
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fb8c 	.word	0x0800fb8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	0800fb8c 	.word	0x0800fb8c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fd50 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f812 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8d2 	bl	8000740 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800059c:	f000 f878 	bl	8000690 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a0:	f000 f8a0 	bl	80006e4 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005a4:	f003 fcf4 	bl	8003f90 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  udp_echoserver_init();
 80005a8:	f000 fb78 	bl	8000c9c <udp_echoserver_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	ethernetif_notify_conn_changed(&gnetif);
 80005ac:	4802      	ldr	r0, [pc, #8]	; (80005b8 <main+0x2c>)
 80005ae:	f000 f975 	bl	800089c <ethernetif_notify_conn_changed>
  	MX_LWIP_Process();
 80005b2:	f003 fe2d 	bl	8004210 <MX_LWIP_Process>
  	ethernetif_notify_conn_changed(&gnetif);
 80005b6:	e7f9      	b.n	80005ac <main+0x20>
 80005b8:	200005dc 	.word	0x200005dc

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00e fc31 	bl	800ee32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	; (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	; (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	; (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	; (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	; 0xa8
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fa49 	bl	8002ad8 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f950 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2105      	movs	r1, #5
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fcaa 	bl	8002fc8 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 f939 	bl	80008f0 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART3_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART3_UART_Init+0x4c>)
 80006c8:	f002 fe9e 	bl	8003408 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f90d 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	200000a4 	.word	0x200000a4
 80006e0:	40004800 	.word	0x40004800

080006e4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f8:	2202      	movs	r2, #2
 80006fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000704:	2202      	movs	r2, #2
 8000706:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	2201      	movs	r2, #1
 800070c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071c:	2201      	movs	r2, #1
 800071e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000728:	f002 f8c7 	bl	80028ba <HAL_PCD_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f8dd 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200000ec 	.word	0x200000ec

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	4b4c      	ldr	r3, [pc, #304]	; (800088c <MX_GPIO_Init+0x14c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a4b      	ldr	r2, [pc, #300]	; (800088c <MX_GPIO_Init+0x14c>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b49      	ldr	r3, [pc, #292]	; (800088c <MX_GPIO_Init+0x14c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <MX_GPIO_Init+0x14c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a44      	ldr	r2, [pc, #272]	; (800088c <MX_GPIO_Init+0x14c>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <MX_GPIO_Init+0x14c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b3e      	ldr	r3, [pc, #248]	; (800088c <MX_GPIO_Init+0x14c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a3d      	ldr	r2, [pc, #244]	; (800088c <MX_GPIO_Init+0x14c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b3b      	ldr	r3, [pc, #236]	; (800088c <MX_GPIO_Init+0x14c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_GPIO_Init+0x14c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a36      	ldr	r2, [pc, #216]	; (800088c <MX_GPIO_Init+0x14c>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_GPIO_Init+0x14c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b30      	ldr	r3, [pc, #192]	; (800088c <MX_GPIO_Init+0x14c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a2f      	ldr	r2, [pc, #188]	; (800088c <MX_GPIO_Init+0x14c>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_GPIO_Init+0x14c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_GPIO_Init+0x14c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a28      	ldr	r2, [pc, #160]	; (800088c <MX_GPIO_Init+0x14c>)
 80007ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f244 0181 	movw	r1, #16513	; 0x4081
 8000804:	4822      	ldr	r0, [pc, #136]	; (8000890 <MX_GPIO_Init+0x150>)
 8000806:	f002 f83f 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2140      	movs	r1, #64	; 0x40
 800080e:	4821      	ldr	r0, [pc, #132]	; (8000894 <MX_GPIO_Init+0x154>)
 8000810:	f002 f83a 	bl	8002888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	481b      	ldr	r0, [pc, #108]	; (8000898 <MX_GPIO_Init+0x158>)
 800082c:	f001 fe80 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000830:	f244 0381 	movw	r3, #16513	; 0x4081
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_GPIO_Init+0x150>)
 800084a:	f001 fe71 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x154>)
 8000866:	f001 fe63 	bl	8002530 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800086a:	2380      	movs	r3, #128	; 0x80
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0x154>)
 800087e:	f001 fe57 	bl	8002530 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40021800 	.word	0x40021800
 8000898:	40020800 	.word	0x40020800

0800089c <ethernetif_notify_conn_changed>:

/* USER CODE BEGIN 4 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	/* NOTE : This is function could be implemented in user file
	 when the callback is needed,
	 */
	if (netif_is_link_up(netif))
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d00b      	beq.n	80008ce <ethernetif_notify_conn_changed+0x32>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2101      	movs	r1, #1
 80008ba:	480c      	ldr	r0, [pc, #48]	; (80008ec <ethernetif_notify_conn_changed+0x50>)
 80008bc:	f001 ffe4 	bl	8002888 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008c6:	4809      	ldr	r0, [pc, #36]	; (80008ec <ethernetif_notify_conn_changed+0x50>)
 80008c8:	f001 ffde 	bl	8002888 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
	}
}
 80008cc:	e00a      	b.n	80008e4 <ethernetif_notify_conn_changed+0x48>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2101      	movs	r1, #1
 80008d2:	4806      	ldr	r0, [pc, #24]	; (80008ec <ethernetif_notify_conn_changed+0x50>)
 80008d4:	f001 ffd8 	bl	8002888 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008de:	4803      	ldr	r0, [pc, #12]	; (80008ec <ethernetif_notify_conn_changed+0x50>)
 80008e0:	f001 ffd2 	bl	8002888 <HAL_GPIO_WritePin>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40020400 	.word	0x40020400

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a19      	ldr	r2, [pc, #100]	; (80009d0 <HAL_UART_MspInit+0x84>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d12c      	bne.n	80009c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <HAL_UART_MspInit+0x88>)
 8000994:	f043 0308 	orr.w	r3, r3, #8
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <HAL_UART_MspInit+0x88>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009b8:	2307      	movs	r3, #7
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <HAL_UART_MspInit+0x8c>)
 80009c4:	f001 fdb4 	bl	8002530 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3728      	adds	r7, #40	; 0x28
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40004800 	.word	0x40004800
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020c00 	.word	0x40020c00

080009dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009fc:	d13f      	bne.n	8000a7e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a20      	ldr	r2, [pc, #128]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a1a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4815      	ldr	r0, [pc, #84]	; (8000a8c <HAL_PCD_MspInit+0xb0>)
 8000a38:	f001 fd7a 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480e      	ldr	r0, [pc, #56]	; (8000a8c <HAL_PCD_MspInit+0xb0>)
 8000a52:	f001 fd6d 	bl	8002530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	4a0b      	ldr	r2, [pc, #44]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a60:	6353      	str	r3, [r2, #52]	; 0x34
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a70:	6453      	str	r3, [r2, #68]	; 0x44
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <HAL_PCD_MspInit+0xac>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40020000 	.word	0x40020000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 fafc 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return 1;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_kill>:

int _kill(int pid, int sig)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000afe:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <_kill+0x20>)
 8000b00:	2216      	movs	r2, #22
 8000b02:	601a      	str	r2, [r3, #0]
  return -1;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	20008a04 	.word	0x20008a04

08000b18 <_exit>:

void _exit (int status)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ffe5 	bl	8000af4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b2a:	e7fe      	b.n	8000b2a <_exit+0x12>

08000b2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	e00a      	b.n	8000b54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b3e:	f3af 8000 	nop.w
 8000b42:	4601      	mov	r1, r0
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	b2ca      	uxtb	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <_read+0x12>
  }

  return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	60f8      	str	r0, [r7, #12]
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	e009      	b.n	8000b8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	1c5a      	adds	r2, r3, #1
 8000b7c:	60ba      	str	r2, [r7, #8]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	dbf1      	blt.n	8000b78 <_write+0x12>
  }
  return len;
 8000b94:	687b      	ldr	r3, [r7, #4]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_close>:

int _close(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b083      	sub	sp, #12
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_isatty>:

int _isatty(int file)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bde:	2301      	movs	r3, #1
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
	...

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b087      	sub	sp, #28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d205      	bcs.n	8000c44 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <_sbrk+0x6c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	371c      	adds	r7, #28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	20030000 	.word	0x20030000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200005d0 	.word	0x200005d0
 8000c70:	20008a18 	.word	0x20008a18
 8000c74:	20008a04 	.word	0x20008a04

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8000ca2:	f00b fc53 	bl	800c54c <udp_new>
 8000ca6:	60f8      	str	r0, [r7, #12]

   // static IP address
   ip_addr_t myIPADDR;
   IP_ADDR4(&myIPADDR, 192, 168, 1, 194);
 8000ca8:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <udp_echoserver_init+0x48>)
 8000caa:	607b      	str	r3, [r7, #4]

   if (upcb)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d014      	beq.n	8000cdc <udp_echoserver_init+0x40>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, &myIPADDR, UDP_SERVER_PORT);
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f00b fac7 	bl	800c24c <udp_bind>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	72fb      	strb	r3, [r7, #11]
      
      if(err == ERR_OK)
 8000cc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <udp_echoserver_init+0x3a>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4906      	ldr	r1, [pc, #24]	; (8000ce8 <udp_echoserver_init+0x4c>)
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f00b fbda 	bl	800c488 <udp_recv>
      else
      {
        udp_remove(upcb);
      }
   }
}
 8000cd4:	e002      	b.n	8000cdc <udp_echoserver_init+0x40>
        udp_remove(upcb);
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f00b fbf6 	bl	800c4c8 <udp_remove>
}
 8000cdc:	bf00      	nop
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	c201a8c0 	.word	0xc201a8c0
 8000ce8:	08000ced 	.word	0x08000ced

08000cec <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8000cfa:	2207      	movs	r2, #7
 8000cfc:	6839      	ldr	r1, [r7, #0]
 8000cfe:	68b8      	ldr	r0, [r7, #8]
 8000d00:	f00b fb2c 	bl	800c35c <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f00b f8b6 	bl	800be78 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8000d0c:	68b8      	ldr	r0, [r7, #8]
 8000d0e:	f00b fb93 	bl	800c438 <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f005 f9aa 	bl	800606c <pbuf_free>
   
}
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d24:	f7ff ffa8 	bl	8000c78 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d28:	480c      	ldr	r0, [pc, #48]	; (8000d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d2a:	490d      	ldr	r1, [pc, #52]	; (8000d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d30:	e002      	b.n	8000d38 <LoopCopyDataInit>

08000d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d36:	3304      	adds	r3, #4

08000d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d3c:	d3f9      	bcc.n	8000d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d44:	e001      	b.n	8000d4a <LoopFillZerobss>

08000d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d48:	3204      	adds	r2, #4

08000d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d4c:	d3fb      	bcc.n	8000d46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f00e f8bf 	bl	800eed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc1b 	bl	800058c <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d58:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d64:	08012778 	.word	0x08012778
  ldr r2, =_sbss
 8000d68:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000d6c:	20008a14 	.word	0x20008a14

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>

08000d72 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d00b      	beq.n	8000d9a <LAN8742_RegisterBusIO+0x28>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d007      	beq.n	8000d9a <LAN8742_RegisterBusIO+0x28>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <LAN8742_RegisterBusIO+0x28>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e014      	b.n	8000dca <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d17c      	bne.n	8000ef0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2220      	movs	r2, #32
 8000e08:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	e01c      	b.n	8000e4a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	f107 0208 	add.w	r2, r7, #8
 8000e18:	2112      	movs	r1, #18
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	4798      	blx	r3
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	da03      	bge.n	8000e2c <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000e24:	f06f 0304 	mvn.w	r3, #4
 8000e28:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000e2a:	e00b      	b.n	8000e44 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d105      	bne.n	8000e44 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
         break;
 8000e42:	e005      	b.n	8000e50 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b1f      	cmp	r3, #31
 8000e4e:	d9df      	bls.n	8000e10 <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b1f      	cmp	r3, #31
 8000e56:	d902      	bls.n	8000e5e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e58:	f06f 0302 	mvn.w	r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d145      	bne.n	8000ef0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6810      	ldr	r0, [r2, #0]
 8000e6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e70:	2100      	movs	r1, #0
 8000e72:	4798      	blx	r3
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db37      	blt.n	8000eea <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	6810      	ldr	r0, [r2, #0]
 8000e82:	f107 0208 	add.w	r2, r7, #8
 8000e86:	2100      	movs	r1, #0
 8000e88:	4798      	blx	r3
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db28      	blt.n	8000ee2 <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4798      	blx	r3
 8000e96:	4603      	mov	r3, r0
 8000e98:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e9a:	e01c      	b.n	8000ed6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4798      	blx	r3
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000eae:	d80e      	bhi.n	8000ece <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	6810      	ldr	r0, [r2, #0]
 8000eb8:	f107 0208 	add.w	r2, r7, #8
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4798      	blx	r3
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	da07      	bge.n	8000ed6 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 8000ec6:	f06f 0304 	mvn.w	r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
                 break;
 8000ecc:	e010      	b.n	8000ef0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000ece:	f06f 0301 	mvn.w	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
               break;
 8000ed4:	e00c      	b.n	8000ef0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1dd      	bne.n	8000e9c <LAN8742_Init+0xc6>
 8000ee0:	e006      	b.n	8000ef0 <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000ee2:	f06f 0304 	mvn.w	r3, #4
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	e002      	b.n	8000ef0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000eea:	f06f 0303 	mvn.w	r3, #3
 8000eee:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d112      	bne.n	8000f1c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4798      	blx	r3
 8000efc:	4603      	mov	r3, r0
 8000efe:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000f00:	bf00      	nop
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4798      	blx	r3
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f14:	d9f5      	bls.n	8000f02 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000f1c:	693b      	ldr	r3, [r7, #16]
 }
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	6810      	ldr	r0, [r2, #0]
 8000f3a:	f107 020c 	add.w	r2, r7, #12
 8000f3e:	2101      	movs	r1, #1
 8000f40:	4798      	blx	r3
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	da02      	bge.n	8000f4e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f48:	f06f 0304 	mvn.w	r3, #4
 8000f4c:	e06e      	b.n	800102c <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	695b      	ldr	r3, [r3, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6810      	ldr	r0, [r2, #0]
 8000f56:	f107 020c 	add.w	r2, r7, #12
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4798      	blx	r3
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	da02      	bge.n	8000f6a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f64:	f06f 0304 	mvn.w	r3, #4
 8000f68:	e060      	b.n	800102c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e059      	b.n	800102c <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	6810      	ldr	r0, [r2, #0]
 8000f80:	f107 020c 	add.w	r2, r7, #12
 8000f84:	2100      	movs	r1, #0
 8000f86:	4798      	blx	r3
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	da02      	bge.n	8000f94 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f8e:	f06f 0304 	mvn.w	r3, #4
 8000f92:	e04b      	b.n	800102c <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d11b      	bne.n	8000fd6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d006      	beq.n	8000fb6 <LAN8742_GetLinkState+0x90>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e03a      	b.n	800102c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e033      	b.n	800102c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e02c      	b.n	800102c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	e02a      	b.n	800102c <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	6810      	ldr	r0, [r2, #0]
 8000fde:	f107 020c 	add.w	r2, r7, #12
 8000fe2:	211f      	movs	r1, #31
 8000fe4:	4798      	blx	r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	da02      	bge.n	8000ff2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000fec:	f06f 0304 	mvn.w	r3, #4
 8000ff0:	e01c      	b.n	800102c <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d101      	bne.n	8001000 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	e015      	b.n	800102c <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 031c 	and.w	r3, r3, #28
 8001006:	2b18      	cmp	r3, #24
 8001008:	d101      	bne.n	800100e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800100a:	2302      	movs	r3, #2
 800100c:	e00e      	b.n	800102c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f003 031c 	and.w	r3, r3, #28
 8001014:	2b08      	cmp	r3, #8
 8001016:	d101      	bne.n	800101c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001018:	2303      	movs	r3, #3
 800101a:	e007      	b.n	800102c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 031c 	and.w	r3, r3, #28
 8001022:	2b14      	cmp	r3, #20
 8001024:	d101      	bne.n	800102a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001026:	2304      	movs	r3, #4
 8001028:	e000      	b.n	800102c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800102a:	2305      	movs	r3, #5
    }
  }
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f931 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fc48 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f93b 	bl	8001312 <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f911 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	200005d4 	.word	0x200005d4

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	200005d4 	.word	0x200005d4

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff47 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff5c 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ffb0 	bl	8001280 <SysTick_Config>
 8001320:	4603      	mov	r3, r0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e06c      	b.n	8001418 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001344:	2b00      	cmp	r3, #0
 8001346:	d106      	bne.n	8001356 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2223      	movs	r2, #35	; 0x23
 800134c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f003 f91d 	bl	8004590 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_ETH_Init+0xf4>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a30      	ldr	r2, [pc, #192]	; (8001420 <HAL_ETH_Init+0xf4>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_ETH_Init+0xf4>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <HAL_ETH_Init+0xf8>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a2b      	ldr	r2, [pc, #172]	; (8001424 <HAL_ETH_Init+0xf8>)
 8001378:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800137c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_ETH_Init+0xf8>)
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	4927      	ldr	r1, [pc, #156]	; (8001424 <HAL_ETH_Init+0xf8>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_ETH_Init+0xf8>)
 800138e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a8:	f7ff feaa 	bl	8001100 <HAL_GetTick>
 80013ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013ae:	e011      	b.n	80013d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013b0:	f7ff fea6 	bl	8001100 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013be:	d909      	bls.n	80013d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2204      	movs	r2, #4
 80013c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	22e0      	movs	r2, #224	; 0xe0
 80013cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e021      	b.n	8001418 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1e4      	bne.n	80013b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f000 fdfc 	bl	8001fe4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fea3 	bl	8002138 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 fef9 	bl	80021ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	2100      	movs	r1, #0
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 fe61 	bl	80020c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2210      	movs	r2, #16
 8001412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001416:	2300      	movs	r3, #0
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40013800 	.word	0x40013800

08001428 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001436:	2b10      	cmp	r3, #16
 8001438:	d150      	bne.n	80014dc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2223      	movs	r2, #35	; 0x23
 800143e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2204      	movs	r2, #4
 8001446:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f9fd 	bl	8001848 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0208 	orr.w	r2, r2, #8
 800145c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fe56 	bl	8001118 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0204 	orr.w	r2, r2, #4
 8001482:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800148c:	2001      	movs	r0, #1
 800148e:	f7ff fe43 	bl	8001118 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68fa      	ldr	r2, [r7, #12]
 8001498:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 fc42 	bl	8001d24 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014b6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014ce:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2223      	movs	r2, #35	; 0x23
 80014d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	e000      	b.n	80014de <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
  }
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b084      	sub	sp, #16
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f4:	2b23      	cmp	r3, #35	; 0x23
 80014f6:	d14a      	bne.n	800158e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2223      	movs	r2, #35	; 0x23
 80014fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001512:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001516:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	f023 0302 	bic.w	r3, r3, #2
 800152a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800152e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001548:	2001      	movs	r0, #1
 800154a:	f7ff fde5 	bl	8001118 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 fbe4 	bl	8001d24 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0208 	bic.w	r2, r2, #8
 800156a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001574:	2001      	movs	r0, #1
 8001576:	f7ff fdcf 	bl	8001118 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2210      	movs	r2, #16
 8001586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800158a:	2300      	movs	r3, #0
 800158c:	e000      	b.n	8001590 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
  }
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e07c      	b.n	80016b8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015c4:	2b23      	cmp	r3, #35	; 0x23
 80015c6:	d176      	bne.n	80016b6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80015c8:	2200      	movs	r2, #0
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 fe79 	bl	80022c4 <ETH_Prepare_Tx_Descriptors>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d009      	beq.n	80015ec <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	f043 0202 	orr.w	r2, r3, #2
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e065      	b.n	80016b8 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ec:	f3bf 8f4f 	dsb	sy
}
 80015f0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3206      	adds	r2, #6
 80015fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fe:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160e:	2b03      	cmp	r3, #3
 8001610:	d904      	bls.n	800161c <HAL_ETH_Transmit+0x84>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001616:	1f1a      	subs	r2, r3, #4
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	3106      	adds	r1, #6
 8001628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800162c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001630:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001632:	f7ff fd65 	bl	8001100 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001638:	e037      	b.n	80016aa <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d011      	beq.n	8001670 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	f043 0208 	orr.w	r2, r3, #8
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e023      	b.n	80016b8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001676:	d018      	beq.n	80016aa <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001678:	f7ff fd42 	bl	8001100 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	d302      	bcc.n	800168e <HAL_ETH_Transmit+0xf6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10d      	bne.n	80016aa <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001694:	f043 0204 	orr.w	r2, r3, #4
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80016a4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e006      	b.n	80016b8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	dbc3      	blt.n	800163a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	e000      	b.n	80016b8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
  }
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0a8      	b.n	800183e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016f2:	2b23      	cmp	r3, #35	; 0x23
 80016f4:	d001      	beq.n	80016fa <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e0a1      	b.n	800183e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	3212      	adds	r2, #18
 8001706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800170a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001710:	f1c3 0304 	rsb	r3, r3, #4
 8001714:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001716:	e06a      	b.n	80017ee <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d007      	beq.n	8001734 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	69da      	ldr	r2, [r3, #28]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800173c:	2b00      	cmp	r3, #0
 800173e:	d103      	bne.n	8001748 <HAL_ETH_ReadData+0x88>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d040      	beq.n	80017ca <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00c      	beq.n	800178c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	0c1b      	lsrs	r3, r3, #16
 8001778:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800177c:	3b04      	subs	r3, #4
 800177e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017a4:	461a      	mov	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	f003 f8c1 	bl	8004930 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	441a      	add	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d902      	bls.n	80017dc <HAL_ETH_ReadData+0x11c>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b04      	subs	r3, #4
 80017da:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	3212      	adds	r2, #18
 80017e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db06      	blt.n	8001804 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d202      	bcs.n	8001804 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d089      	beq.n	8001718 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	441a      	add	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f815 	bl	8001848 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001824:	7bfb      	ldrb	r3, [r7, #15]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	e000      	b.n	800183e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001854:	2301      	movs	r3, #1
 8001856:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800185c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	3212      	adds	r2, #18
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800186e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001870:	e03d      	b.n	80018ee <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d112      	bne.n	80018a0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4618      	mov	r0, r3
 8001880:	f003 f826 	bl	80048d0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	74fb      	strb	r3, [r7, #19]
 800188e:	e007      	b.n	80018a0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	461a      	mov	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	461a      	mov	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80018a0:	7cfb      	ldrb	r3, [r7, #19]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d023      	beq.n	80018ee <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	4a24      	ldr	r2, [pc, #144]	; (8001944 <ETH_UpdateDescriptor+0xfc>)
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	e003      	b.n	80018be <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80018bc:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3301      	adds	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d902      	bls.n	80018dc <ETH_UpdateDescriptor+0x94>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b04      	subs	r3, #4
 80018da:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69fa      	ldr	r2, [r7, #28]
 80018e0:	3212      	adds	r2, #18
 80018e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e6:	617b      	str	r3, [r7, #20]
      desccount--;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <ETH_UpdateDescriptor+0xb2>
 80018f4:	7cfb      	ldrb	r3, [r7, #19]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1bb      	bne.n	8001872 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	429a      	cmp	r2, r3
 8001902:	d01a      	beq.n	800193a <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	3301      	adds	r3, #1
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800190e:	f3bf 8f5f 	dmb	sy
}
 8001912:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6919      	ldr	r1, [r3, #16]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	18ca      	adds	r2, r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192c:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800193a:	bf00      	nop
 800193c:	3720      	adds	r7, #32
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	80004600 	.word	0x80004600

08001948 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f003 031c 	and.w	r3, r3, #28
 8001964:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	02db      	lsls	r3, r3, #11
 800196a:	b29b      	uxth	r3, r3
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	019b      	lsls	r3, r3, #6
 8001976:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f023 0302 	bic.w	r3, r3, #2
 8001986:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001998:	f7ff fbb2 	bl	8001100 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800199e:	e00d      	b.n	80019bc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80019a0:	f7ff fbae 	bl	8001100 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ae:	d301      	bcc.n	80019b4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e010      	b.n	80019d6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ec      	bne.n	80019a0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b086      	sub	sp, #24
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	60f8      	str	r0, [r7, #12]
 80019e6:	60b9      	str	r1, [r7, #8]
 80019e8:	607a      	str	r2, [r7, #4]
 80019ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 031c 	and.w	r3, r3, #28
 80019fa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	02db      	lsls	r3, r3, #11
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	019b      	lsls	r3, r3, #6
 8001a0c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a38:	f7ff fb62 	bl	8001100 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a3e:	e00d      	b.n	8001a5c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001a40:	f7ff fb5e 	bl	8001100 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a4e:	d301      	bcc.n	8001a54 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e009      	b.n	8001a68 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1ec      	bne.n	8001a40 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0d9      	b.n	8001c38 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bf14      	ite	ne
 8001a92:	2301      	movne	r3, #1
 8001a94:	2300      	moveq	r3, #0
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	461a      	mov	r2, r3
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf14      	ite	ne
 8001ad8:	2301      	movne	r3, #1
 8001ada:	2300      	moveq	r3, #0
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bf0c      	ite	eq
 8001af2:	2301      	moveq	r3, #1
 8001af4:	2300      	movne	r3, #0
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	461a      	mov	r2, r3
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf0c      	ite	eq
 8001b42:	2301      	moveq	r3, #1
 8001b44:	2300      	movne	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf14      	ite	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	2300      	moveq	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bf14      	ite	ne
 8001bb8:	2301      	movne	r3, #1
 8001bba:	2300      	moveq	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e00b      	b.n	8001c70 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c5e:	2b10      	cmp	r3, #16
 8001c60:	d105      	bne.n	8001c6e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c62:	6839      	ldr	r1, [r7, #0]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f883 	bl	8001d70 <ETH_SetMACConfig>

    return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
  }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f023 031c 	bic.w	r3, r3, #28
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c90:	f001 fb86 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 8001c94:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	4a1d      	ldr	r2, [pc, #116]	; (8001d10 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d908      	bls.n	8001cb0 <HAL_ETH_SetMDIOClockRange+0x38>
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d804      	bhi.n	8001cb0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e027      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4a18      	ldr	r2, [pc, #96]	; (8001d14 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d908      	bls.n	8001cca <HAL_ETH_SetMDIOClockRange+0x52>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d204      	bcs.n	8001cca <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f043 030c 	orr.w	r3, r3, #12
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e01a      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d303      	bcc.n	8001cda <HAL_ETH_SetMDIOClockRange+0x62>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d911      	bls.n	8001cfe <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d908      	bls.n	8001cf4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d804      	bhi.n	8001cf4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	e005      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f043 0310 	orr.w	r3, r3, #16
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e000      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001cfe:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	611a      	str	r2, [r3, #16]
}
 8001d08:	bf00      	nop
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	01312cff 	.word	0x01312cff
 8001d14:	02160ebf 	.word	0x02160ebf
 8001d18:	03938700 	.word	0x03938700
 8001d1c:	05f5e0ff 	.word	0x05f5e0ff
 8001d20:	08f0d17f 	.word	0x08f0d17f

08001d24 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d46:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d54:	2001      	movs	r0, #1
 8001d56:	f7ff f9df 	bl	8001118 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d64:	6193      	str	r3, [r2, #24]
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4b51      	ldr	r3, [pc, #324]	; (8001ecc <ETH_SetMACConfig+0x15c>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	7c1b      	ldrb	r3, [r3, #16]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d102      	bne.n	8001d98 <ETH_SetMACConfig+0x28>
 8001d92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d96:	e000      	b.n	8001d9a <ETH_SetMACConfig+0x2a>
 8001d98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	7c5b      	ldrb	r3, [r3, #17]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <ETH_SetMACConfig+0x38>
 8001da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001da6:	e000      	b.n	8001daa <ETH_SetMACConfig+0x3a>
 8001da8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001daa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001db0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	7fdb      	ldrb	r3, [r3, #31]
 8001db6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001db8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001dbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	7f92      	ldrb	r2, [r2, #30]
 8001dc4:	2a00      	cmp	r2, #0
 8001dc6:	d102      	bne.n	8001dce <ETH_SetMACConfig+0x5e>
 8001dc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dcc:	e000      	b.n	8001dd0 <ETH_SetMACConfig+0x60>
 8001dce:	2200      	movs	r2, #0
                        macconf->Speed |
 8001dd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	7f1b      	ldrb	r3, [r3, #28]
 8001dd6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001dd8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001dde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001de6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d102      	bne.n	8001df8 <ETH_SetMACConfig+0x88>
 8001df2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df6:	e000      	b.n	8001dfa <ETH_SetMACConfig+0x8a>
 8001df8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001dfa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7bdb      	ldrb	r3, [r3, #15]
 8001e00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001e02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001e08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e12:	4313      	orrs	r3, r2
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7ff f974 	bl	8001118 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e46:	4013      	ands	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001e56:	2a00      	cmp	r2, #0
 8001e58:	d101      	bne.n	8001e5e <ETH_SetMACConfig+0xee>
 8001e5a:	2280      	movs	r2, #128	; 0x80
 8001e5c:	e000      	b.n	8001e60 <ETH_SetMACConfig+0xf0>
 8001e5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e60:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001e66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e6e:	2a01      	cmp	r2, #1
 8001e70:	d101      	bne.n	8001e76 <ETH_SetMACConfig+0x106>
 8001e72:	2208      	movs	r2, #8
 8001e74:	e000      	b.n	8001e78 <ETH_SetMACConfig+0x108>
 8001e76:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e80:	2a01      	cmp	r2, #1
 8001e82:	d101      	bne.n	8001e88 <ETH_SetMACConfig+0x118>
 8001e84:	2204      	movs	r2, #4
 8001e86:	e000      	b.n	8001e8a <ETH_SetMACConfig+0x11a>
 8001e88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e92:	2a01      	cmp	r2, #1
 8001e94:	d101      	bne.n	8001e9a <ETH_SetMACConfig+0x12a>
 8001e96:	2202      	movs	r2, #2
 8001e98:	e000      	b.n	8001e9c <ETH_SetMACConfig+0x12c>
 8001e9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	f7ff f92f 	bl	8001118 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	ff20810f 	.word	0xff20810f

08001ed0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <ETH_SetDMAConfig+0x110>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	7b1b      	ldrb	r3, [r3, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <ETH_SetDMAConfig+0x2c>
 8001ef6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001efa:	e000      	b.n	8001efe <ETH_SetDMAConfig+0x2e>
 8001efc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	7b5b      	ldrb	r3, [r3, #13]
 8001f02:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f04:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f06:	683a      	ldr	r2, [r7, #0]
 8001f08:	7f52      	ldrb	r2, [r2, #29]
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	d102      	bne.n	8001f14 <ETH_SetDMAConfig+0x44>
 8001f0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f12:	e000      	b.n	8001f16 <ETH_SetDMAConfig+0x46>
 8001f14:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001f16:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	7b9b      	ldrb	r3, [r3, #14]
 8001f1c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001f1e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001f24:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	7f1b      	ldrb	r3, [r3, #28]
 8001f2a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001f2c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	7f9b      	ldrb	r3, [r3, #30]
 8001f32:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001f34:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001f3a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f42:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001f44:	4313      	orrs	r3, r2
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f54:	461a      	mov	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f7ff f8d6 	bl	8001118 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f74:	461a      	mov	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	791b      	ldrb	r3, [r3, #4]
 8001f7e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f84:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f8a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f90:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f98:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f9a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001fa2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001fa8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fb6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f7ff f8a7 	bl	8001118 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	f8de3f23 	.word	0xf8de3f23

08001fe4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0a6      	sub	sp, #152	; 0x98
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001fec:	2301      	movs	r3, #1
 8001fee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002002:	2301      	movs	r3, #1
 8002004:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002020:	2300      	movs	r3, #0
 8002022:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800202a:	2300      	movs	r3, #0
 800202c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002046:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800204a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800204c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002050:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002058:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800205c:	4619      	mov	r1, r3
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fe86 	bl	8001d70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002064:	2301      	movs	r3, #1
 8002066:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002068:	2301      	movs	r3, #1
 800206a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800206c:	2301      	movs	r3, #1
 800206e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002072:	2301      	movs	r3, #1
 8002074:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002090:	2301      	movs	r3, #1
 8002092:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002094:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002098:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800209a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800209e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80020a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80020a6:	2301      	movs	r3, #1
 80020a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80020b4:	f107 0308 	add.w	r3, r7, #8
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff08 	bl	8001ed0 <ETH_SetDMAConfig>
}
 80020c0:	bf00      	nop
 80020c2:	3798      	adds	r7, #152	; 0x98
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3305      	adds	r3, #5
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	3204      	adds	r2, #4
 80020e0:	7812      	ldrb	r2, [r2, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <ETH_MACAddressConfig+0x68>)
 80020ea:	4413      	add	r3, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3303      	adds	r3, #3
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	061a      	lsls	r2, r3, #24
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3302      	adds	r3, #2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3301      	adds	r3, #1
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	4313      	orrs	r3, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	7812      	ldrb	r2, [r2, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <ETH_MACAddressConfig+0x6c>)
 800211a:	4413      	add	r3, r2
 800211c:	461a      	mov	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	6013      	str	r3, [r2, #0]
}
 8002122:	bf00      	nop
 8002124:	371c      	adds	r7, #28
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40028040 	.word	0x40028040
 8002134:	40028044 	.word	0x40028044

08002138 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e03e      	b.n	80021c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68d9      	ldr	r1, [r3, #12]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2200      	movs	r2, #0
 8002162:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2200      	movs	r2, #0
 800216e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	3206      	adds	r2, #6
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d80c      	bhi.n	80021a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68d9      	ldr	r1, [r3, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	440b      	add	r3, r1
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	e004      	b.n	80021b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3301      	adds	r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d9bd      	bls.n	8002146 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021dc:	611a      	str	r2, [r3, #16]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	e046      	b.n	8002286 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6919      	ldr	r1, [r3, #16]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2200      	movs	r2, #0
 8002214:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002234:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800223c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	3212      	adds	r2, #18
 8002252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d80c      	bhi.n	8002276 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6919      	ldr	r1, [r3, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60da      	str	r2, [r3, #12]
 8002274:	e004      	b.n	8002280 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	461a      	mov	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d9b5      	bls.n	80021f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b6:	60da      	str	r2, [r3, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b08d      	sub	sp, #52	; 0x34
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3318      	adds	r3, #24
 80022d4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ee:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80022fa:	6a3b      	ldr	r3, [r7, #32]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002306:	d007      	beq.n	8002318 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	3304      	adds	r3, #4
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002318:	2302      	movs	r3, #2
 800231a:	e103      	b.n	8002524 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	3301      	adds	r3, #1
 8002320:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	461a      	mov	r2, r3
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002334:	f023 031f 	bic.w	r3, r3, #31
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	6852      	ldr	r2, [r2, #4]
 800233c:	431a      	orrs	r2, r3
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	431a      	orrs	r2, r3
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	431a      	orrs	r2, r3
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800238a:	6a3b      	ldr	r3, [r7, #32]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80023a2:	f3bf 8f5f 	dmb	sy
}
 80023a6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80023b4:	e084      	b.n	80024c0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e005      	b.n	80023e2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023de:	6a3b      	ldr	r3, [r7, #32]
 80023e0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	3301      	adds	r3, #1
 80023e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d902      	bls.n	80023f4 <ETH_Prepare_Tx_Descriptors+0x130>
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	3b04      	subs	r3, #4
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002416:	d007      	beq.n	8002428 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	3304      	adds	r3, #4
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d029      	beq.n	800247c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002434:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
 800243a:	e019      	b.n	8002470 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800243c:	f3bf 8f5f 	dmb	sy
}
 8002440:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	3301      	adds	r3, #1
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	2b03      	cmp	r3, #3
 8002458:	d902      	bls.n	8002460 <ETH_Prepare_Tx_Descriptors+0x19c>
 800245a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245c:	3b04      	subs	r3, #4
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002468:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800246a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800246c:	3301      	adds	r3, #1
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	429a      	cmp	r2, r3
 8002476:	d3e1      	bcc.n	800243c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002478:	2302      	movs	r3, #2
 800247a:	e053      	b.n	8002524 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	3301      	adds	r3, #1
 8002480:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800249a:	f023 031f 	bic.w	r3, r3, #31
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	6852      	ldr	r2, [r2, #4]
 80024a2:	431a      	orrs	r2, r3
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80024ae:	f3bf 8f5f 	dmb	sy
}
 80024b2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f47f af76 	bne.w	80023b6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e005      	b.n	80024ea <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024fa:	6979      	ldr	r1, [r7, #20]
 80024fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fe:	3304      	adds	r3, #4
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800250a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
}
 800250e:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	4413      	add	r3, r2
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800251e:	b662      	cpsie	i
}
 8002520:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3734      	adds	r7, #52	; 0x34
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800253e:	2300      	movs	r3, #0
 8002540:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e177      	b.n	800283c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	429a      	cmp	r2, r3
 8002566:	f040 8166 	bne.w	8002836 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d005      	beq.n	8002582 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800257e:	2b02      	cmp	r3, #2
 8002580:	d130      	bne.n	80025e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	2203      	movs	r2, #3
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025b8:	2201      	movs	r2, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 0201 	and.w	r2, r3, #1
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d017      	beq.n	8002620 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d123      	bne.n	8002674 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	08da      	lsrs	r2, r3, #3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3208      	adds	r2, #8
 8002634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	220f      	movs	r2, #15
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	08da      	lsrs	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3208      	adds	r2, #8
 800266e:	69b9      	ldr	r1, [r7, #24]
 8002670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	2203      	movs	r2, #3
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0203 	and.w	r2, r3, #3
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80c0 	beq.w	8002836 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	4b66      	ldr	r3, [pc, #408]	; (8002854 <HAL_GPIO_Init+0x324>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a65      	ldr	r2, [pc, #404]	; (8002854 <HAL_GPIO_Init+0x324>)
 80026c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b63      	ldr	r3, [pc, #396]	; (8002854 <HAL_GPIO_Init+0x324>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026d2:	4a61      	ldr	r2, [pc, #388]	; (8002858 <HAL_GPIO_Init+0x328>)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	3302      	adds	r3, #2
 80026da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	220f      	movs	r2, #15
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	4013      	ands	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a58      	ldr	r2, [pc, #352]	; (800285c <HAL_GPIO_Init+0x32c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d037      	beq.n	800276e <HAL_GPIO_Init+0x23e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a57      	ldr	r2, [pc, #348]	; (8002860 <HAL_GPIO_Init+0x330>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d031      	beq.n	800276a <HAL_GPIO_Init+0x23a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a56      	ldr	r2, [pc, #344]	; (8002864 <HAL_GPIO_Init+0x334>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d02b      	beq.n	8002766 <HAL_GPIO_Init+0x236>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a55      	ldr	r2, [pc, #340]	; (8002868 <HAL_GPIO_Init+0x338>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d025      	beq.n	8002762 <HAL_GPIO_Init+0x232>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a54      	ldr	r2, [pc, #336]	; (800286c <HAL_GPIO_Init+0x33c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01f      	beq.n	800275e <HAL_GPIO_Init+0x22e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a53      	ldr	r2, [pc, #332]	; (8002870 <HAL_GPIO_Init+0x340>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x22a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a52      	ldr	r2, [pc, #328]	; (8002874 <HAL_GPIO_Init+0x344>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x226>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a51      	ldr	r2, [pc, #324]	; (8002878 <HAL_GPIO_Init+0x348>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x222>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a50      	ldr	r2, [pc, #320]	; (800287c <HAL_GPIO_Init+0x34c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x21e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a4f      	ldr	r2, [pc, #316]	; (8002880 <HAL_GPIO_Init+0x350>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x21a>
 8002746:	2309      	movs	r3, #9
 8002748:	e012      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800274a:	230a      	movs	r3, #10
 800274c:	e010      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800274e:	2308      	movs	r3, #8
 8002750:	e00e      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002752:	2307      	movs	r3, #7
 8002754:	e00c      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002756:	2306      	movs	r3, #6
 8002758:	e00a      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800275a:	2305      	movs	r3, #5
 800275c:	e008      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800275e:	2304      	movs	r3, #4
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002762:	2303      	movs	r3, #3
 8002764:	e004      	b.n	8002770 <HAL_GPIO_Init+0x240>
 8002766:	2302      	movs	r3, #2
 8002768:	e002      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <HAL_GPIO_Init+0x240>
 800276e:	2300      	movs	r3, #0
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	f002 0203 	and.w	r2, r2, #3
 8002776:	0092      	lsls	r2, r2, #2
 8002778:	4093      	lsls	r3, r2
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002780:	4935      	ldr	r1, [pc, #212]	; (8002858 <HAL_GPIO_Init+0x328>)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	089b      	lsrs	r3, r3, #2
 8002786:	3302      	adds	r3, #2
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_GPIO_Init+0x354>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027b2:	4a34      	ldr	r2, [pc, #208]	; (8002884 <HAL_GPIO_Init+0x354>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027b8:	4b32      	ldr	r3, [pc, #200]	; (8002884 <HAL_GPIO_Init+0x354>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027dc:	4a29      	ldr	r2, [pc, #164]	; (8002884 <HAL_GPIO_Init+0x354>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027e2:	4b28      	ldr	r3, [pc, #160]	; (8002884 <HAL_GPIO_Init+0x354>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002806:	4a1f      	ldr	r2, [pc, #124]	; (8002884 <HAL_GPIO_Init+0x354>)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_GPIO_Init+0x354>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002830:	4a14      	ldr	r2, [pc, #80]	; (8002884 <HAL_GPIO_Init+0x354>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3301      	adds	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b0f      	cmp	r3, #15
 8002840:	f67f ae84 	bls.w	800254c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800
 8002858:	40013800 	.word	0x40013800
 800285c:	40020000 	.word	0x40020000
 8002860:	40020400 	.word	0x40020400
 8002864:	40020800 	.word	0x40020800
 8002868:	40020c00 	.word	0x40020c00
 800286c:	40021000 	.word	0x40021000
 8002870:	40021400 	.word	0x40021400
 8002874:	40021800 	.word	0x40021800
 8002878:	40021c00 	.word	0x40021c00
 800287c:	40022000 	.word	0x40022000
 8002880:	40022400 	.word	0x40022400
 8002884:	40013c00 	.word	0x40013c00

08002888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
 8002894:	4613      	mov	r3, r2
 8002896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002898:	787b      	ldrb	r3, [r7, #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028a4:	e003      	b.n	80028ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	041a      	lsls	r2, r3, #16
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	619a      	str	r2, [r3, #24]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b086      	sub	sp, #24
 80028be:	af02      	add	r7, sp, #8
 80028c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e101      	b.n	8002ad0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f878 	bl	80009dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2203      	movs	r2, #3
 80028f0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fa:	d102      	bne.n	8002902 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f001 f8a6 	bl	8003a58 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7c1a      	ldrb	r2, [r3, #16]
 8002914:	f88d 2000 	strb.w	r2, [sp]
 8002918:	3304      	adds	r3, #4
 800291a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800291c:	f001 f838 	bl	8003990 <USB_CoreInit>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e0ce      	b.n	8002ad0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f001 f89e 	bl	8003a7a <USB_SetCurrentMode>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e0bf      	b.n	8002ad0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
 8002954:	e04a      	b.n	80029ec <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	3315      	adds	r3, #21
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800296a:	7bfa      	ldrb	r2, [r7, #15]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3314      	adds	r3, #20
 800297a:	7bfa      	ldrb	r2, [r7, #15]
 800297c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800297e:	7bfa      	ldrb	r2, [r7, #15]
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	b298      	uxth	r0, r3
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	332e      	adds	r3, #46	; 0x2e
 8002992:	4602      	mov	r2, r0
 8002994:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3318      	adds	r3, #24
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	331c      	adds	r3, #28
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3320      	adds	r3, #32
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	3324      	adds	r3, #36	; 0x24
 80029e2:	2200      	movs	r2, #0
 80029e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	3301      	adds	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	791b      	ldrb	r3, [r3, #4]
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d3af      	bcc.n	8002956 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f6:	2300      	movs	r3, #0
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e044      	b.n	8002a86 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029fc:	7bfa      	ldrb	r2, [r7, #15]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a28:	7bfa      	ldrb	r2, [r7, #15]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a3e:	7bfa      	ldrb	r2, [r7, #15]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	3301      	adds	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	791b      	ldrb	r3, [r3, #4]
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d3b5      	bcc.n	80029fc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	7c1a      	ldrb	r2, [r3, #16]
 8002a98:	f88d 2000 	strb.w	r2, [sp]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa0:	f001 f838 	bl	8003b14 <USB_DevInit>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00c      	b.n	8002ad0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f001 fa00 	bl	8003ece <USB_DevDisconnect>

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e267      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d075      	beq.n	8002be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002af6:	4b88      	ldr	r3, [pc, #544]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d00c      	beq.n	8002b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b02:	4b85      	ldr	r3, [pc, #532]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d112      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4b82      	ldr	r3, [pc, #520]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1a:	d10b      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d05b      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d157      	bne.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e242      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3c:	d106      	bne.n	8002b4c <HAL_RCC_OscConfig+0x74>
 8002b3e:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a75      	ldr	r2, [pc, #468]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	e01d      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x98>
 8002b56:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a6f      	ldr	r2, [pc, #444]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a6c      	ldr	r2, [pc, #432]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0xb0>
 8002b70:	4b69      	ldr	r3, [pc, #420]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a68      	ldr	r2, [pc, #416]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a65      	ldr	r2, [pc, #404]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d013      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fab6 	bl	8001100 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fab2 	bl	8001100 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e207      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002bb6:	e014      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe faa2 	bl	8001100 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fa9e 	bl	8001100 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1f3      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bd2:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1f0      	bne.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d063      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bee:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00b      	beq.n	8002c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d11c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b44      	ldr	r3, [pc, #272]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d116      	bne.n	8002c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c12:	4b41      	ldr	r3, [pc, #260]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e1c7      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4937      	ldr	r1, [pc, #220]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3e:	e03a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c48:	4b34      	ldr	r3, [pc, #208]	; (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fe fa57 	bl	8001100 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c56:	f7fe fa53 	bl	8001100 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e1a8      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0f0      	beq.n	8002c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4925      	ldr	r1, [pc, #148]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]
 8002c88:	e015      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCC_OscConfig+0x244>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fa36 	bl	8001100 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c98:	f7fe fa32 	bl	8001100 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e187      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d036      	beq.n	8002d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d016      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe fa16 	bl	8001100 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fa12 	bl	8001100 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e167      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_OscConfig+0x240>)
 8002cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f0      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x200>
 8002cf6:	e01b      	b.n	8002d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_RCC_OscConfig+0x248>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe f9ff 	bl	8001100 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d04:	e00e      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d06:	f7fe f9fb 	bl	8001100 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d907      	bls.n	8002d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e150      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	42470000 	.word	0x42470000
 8002d20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b88      	ldr	r3, [pc, #544]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ea      	bne.n	8002d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 8097 	beq.w	8002e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b81      	ldr	r3, [pc, #516]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b7d      	ldr	r3, [pc, #500]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a7c      	ldr	r2, [pc, #496]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b7a      	ldr	r3, [pc, #488]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b77      	ldr	r3, [pc, #476]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d118      	bne.n	8002dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b74      	ldr	r3, [pc, #464]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a73      	ldr	r2, [pc, #460]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fe f9bb 	bl	8001100 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fe f9b7 	bl	8001100 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e10c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <HAL_RCC_OscConfig+0x474>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d106      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2ea>
 8002db4:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a63      	ldr	r2, [pc, #396]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	e01c      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b05      	cmp	r3, #5
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCC_OscConfig+0x30c>
 8002dca:	4b5f      	ldr	r3, [pc, #380]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a5e      	ldr	r2, [pc, #376]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	4a5b      	ldr	r2, [pc, #364]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6713      	str	r3, [r2, #112]	; 0x70
 8002de2:	e00b      	b.n	8002dfc <HAL_RCC_OscConfig+0x324>
 8002de4:	4b58      	ldr	r3, [pc, #352]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002dea:	f023 0301 	bic.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	4b55      	ldr	r3, [pc, #340]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df4:	4a54      	ldr	r2, [pc, #336]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002df6:	f023 0304 	bic.w	r3, r3, #4
 8002dfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e04:	f7fe f97c 	bl	8001100 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	e00a      	b.n	8002e22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0c:	f7fe f978 	bl	8001100 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e0cb      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ee      	beq.n	8002e0c <HAL_RCC_OscConfig+0x334>
 8002e2e:	e014      	b.n	8002e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e30:	f7fe f966 	bl	8001100 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e36:	e00a      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e38:	f7fe f962 	bl	8001100 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e0b5      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4e:	4b3e      	ldr	r3, [pc, #248]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ee      	bne.n	8002e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e5a:	7dfb      	ldrb	r3, [r7, #23]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b39      	ldr	r3, [pc, #228]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	4a38      	ldr	r2, [pc, #224]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80a1 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e76:	4b34      	ldr	r3, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b08      	cmp	r3, #8
 8002e80:	d05c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d141      	bne.n	8002f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe f936 	bl	8001100 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe f932 	bl	8001100 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e087      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	061b      	lsls	r3, r3, #24
 8002eda:	491b      	ldr	r1, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee0:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee6:	f7fe f90b 	bl	8001100 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eee:	f7fe f907 	bl	8001100 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e05c      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x416>
 8002f0c:	e054      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0e:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_OscConfig+0x478>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe f8f4 	bl	8001100 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe f8f0 	bl	8001100 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e045      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x470>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x444>
 8002f3a:	e03d      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e038      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	40007000 	.word	0x40007000
 8002f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x4ec>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d121      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d11a      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40023800 	.word	0x40023800

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0cc      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d90c      	bls.n	8003004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b65      	ldr	r3, [pc, #404]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	494d      	ldr	r1, [pc, #308]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e067      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4934      	ldr	r1, [pc, #208]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe f822 	bl	8001100 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe f81e 	bl	8001100 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e032      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4916      	ldr	r1, [pc, #88]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	490e      	ldr	r1, [pc, #56]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314e:	f000 f821 	bl	8003194 <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	490a      	ldr	r1, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fd ff82 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	08012584 	.word	0x08012584
 800318c:	20000000 	.word	0x20000000
 8003190:	20000004 	.word	0x20000004

08003194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003198:	b094      	sub	sp, #80	; 0x50
 800319a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	647b      	str	r3, [r7, #68]	; 0x44
 80031a0:	2300      	movs	r3, #0
 80031a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a4:	2300      	movs	r3, #0
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031ac:	4b79      	ldr	r3, [pc, #484]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d00d      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x40>
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	f200 80e1 	bhi.w	8003380 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x34>
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x3a>
 80031c6:	e0db      	b.n	8003380 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c8:	4b73      	ldr	r3, [pc, #460]	; (8003398 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80031cc:	e0db      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ce:	4b73      	ldr	r3, [pc, #460]	; (800339c <HAL_RCC_GetSysClockFreq+0x208>)
 80031d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031d2:	e0d8      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d4:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031de:	4b6d      	ldr	r3, [pc, #436]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d063      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ea:	4b6a      	ldr	r3, [pc, #424]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	099b      	lsrs	r3, r3, #6
 80031f0:	2200      	movs	r2, #0
 80031f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fc:	633b      	str	r3, [r7, #48]	; 0x30
 80031fe:	2300      	movs	r3, #0
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
 8003202:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003206:	4622      	mov	r2, r4
 8003208:	462b      	mov	r3, r5
 800320a:	f04f 0000 	mov.w	r0, #0
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	0159      	lsls	r1, r3, #5
 8003214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003218:	0150      	lsls	r0, r2, #5
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4621      	mov	r1, r4
 8003220:	1a51      	subs	r1, r2, r1
 8003222:	6139      	str	r1, [r7, #16]
 8003224:	4629      	mov	r1, r5
 8003226:	eb63 0301 	sbc.w	r3, r3, r1
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003238:	4659      	mov	r1, fp
 800323a:	018b      	lsls	r3, r1, #6
 800323c:	4651      	mov	r1, sl
 800323e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003242:	4651      	mov	r1, sl
 8003244:	018a      	lsls	r2, r1, #6
 8003246:	4651      	mov	r1, sl
 8003248:	ebb2 0801 	subs.w	r8, r2, r1
 800324c:	4659      	mov	r1, fp
 800324e:	eb63 0901 	sbc.w	r9, r3, r1
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800325e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003262:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003266:	4690      	mov	r8, r2
 8003268:	4699      	mov	r9, r3
 800326a:	4623      	mov	r3, r4
 800326c:	eb18 0303 	adds.w	r3, r8, r3
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	462b      	mov	r3, r5
 8003274:	eb49 0303 	adc.w	r3, r9, r3
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	f04f 0300 	mov.w	r3, #0
 8003282:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003286:	4629      	mov	r1, r5
 8003288:	024b      	lsls	r3, r1, #9
 800328a:	4621      	mov	r1, r4
 800328c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003290:	4621      	mov	r1, r4
 8003292:	024a      	lsls	r2, r1, #9
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329a:	2200      	movs	r2, #0
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
 800329e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032a4:	f7fc fff4 	bl	8000290 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4613      	mov	r3, r2
 80032ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b0:	e058      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b2:	4b38      	ldr	r3, [pc, #224]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	099b      	lsrs	r3, r3, #6
 80032b8:	2200      	movs	r2, #0
 80032ba:	4618      	mov	r0, r3
 80032bc:	4611      	mov	r1, r2
 80032be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032c2:	623b      	str	r3, [r7, #32]
 80032c4:	2300      	movs	r3, #0
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
 80032c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032cc:	4642      	mov	r2, r8
 80032ce:	464b      	mov	r3, r9
 80032d0:	f04f 0000 	mov.w	r0, #0
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	0159      	lsls	r1, r3, #5
 80032da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032de:	0150      	lsls	r0, r2, #5
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4641      	mov	r1, r8
 80032e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032ea:	4649      	mov	r1, r9
 80032ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003300:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003304:	ebb2 040a 	subs.w	r4, r2, sl
 8003308:	eb63 050b 	sbc.w	r5, r3, fp
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	00eb      	lsls	r3, r5, #3
 8003316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800331a:	00e2      	lsls	r2, r4, #3
 800331c:	4614      	mov	r4, r2
 800331e:	461d      	mov	r5, r3
 8003320:	4643      	mov	r3, r8
 8003322:	18e3      	adds	r3, r4, r3
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	464b      	mov	r3, r9
 8003328:	eb45 0303 	adc.w	r3, r5, r3
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	f04f 0200 	mov.w	r2, #0
 8003332:	f04f 0300 	mov.w	r3, #0
 8003336:	e9d7 4500 	ldrd	r4, r5, [r7]
 800333a:	4629      	mov	r1, r5
 800333c:	028b      	lsls	r3, r1, #10
 800333e:	4621      	mov	r1, r4
 8003340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003344:	4621      	mov	r1, r4
 8003346:	028a      	lsls	r2, r1, #10
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334e:	2200      	movs	r2, #0
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	61fa      	str	r2, [r7, #28]
 8003354:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003358:	f7fc ff9a 	bl	8000290 <__aeabi_uldivmod>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4613      	mov	r3, r2
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCC_GetSysClockFreq+0x200>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003374:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800337e:	e002      	b.n	8003386 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_RCC_GetSysClockFreq+0x204>)
 8003382:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003388:	4618      	mov	r0, r3
 800338a:	3750      	adds	r7, #80	; 0x50
 800338c:	46bd      	mov	sp, r7
 800338e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	00f42400 	.word	0x00f42400
 800339c:	007a1200 	.word	0x007a1200

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b03      	ldr	r3, [pc, #12]	; (80033b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000

080033b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033bc:	f7ff fff0 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	0a9b      	lsrs	r3, r3, #10
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	4903      	ldr	r1, [pc, #12]	; (80033dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ce:	5ccb      	ldrb	r3, [r1, r3]
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08012594 	.word	0x08012594

080033e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033e4:	f7ff ffdc 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0b5b      	lsrs	r3, r3, #13
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	08012594 	.word	0x08012594

08003408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e042      	b.n	80034a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fa8c 	bl	800094c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	; 0x24
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800344a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f82b 	bl	80034a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ac:	b0c0      	sub	sp, #256	; 0x100
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c4:	68d9      	ldr	r1, [r3, #12]
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	ea40 0301 	orr.w	r3, r0, r1
 80034d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
 80034e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	431a      	orrs	r2, r3
 80034e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003500:	f021 010c 	bic.w	r1, r1, #12
 8003504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800350e:	430b      	orrs	r3, r1
 8003510:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800351e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003522:	6999      	ldr	r1, [r3, #24]
 8003524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	ea40 0301 	orr.w	r3, r0, r1
 800352e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	4b8f      	ldr	r3, [pc, #572]	; (8003774 <UART_SetConfig+0x2cc>)
 8003538:	429a      	cmp	r2, r3
 800353a:	d005      	beq.n	8003548 <UART_SetConfig+0xa0>
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4b8d      	ldr	r3, [pc, #564]	; (8003778 <UART_SetConfig+0x2d0>)
 8003544:	429a      	cmp	r2, r3
 8003546:	d104      	bne.n	8003552 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003548:	f7ff ff4a 	bl	80033e0 <HAL_RCC_GetPCLK2Freq>
 800354c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003550:	e003      	b.n	800355a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003552:	f7ff ff31 	bl	80033b8 <HAL_RCC_GetPCLK1Freq>
 8003556:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003564:	f040 810c 	bne.w	8003780 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800356c:	2200      	movs	r2, #0
 800356e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003572:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003576:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800357a:	4622      	mov	r2, r4
 800357c:	462b      	mov	r3, r5
 800357e:	1891      	adds	r1, r2, r2
 8003580:	65b9      	str	r1, [r7, #88]	; 0x58
 8003582:	415b      	adcs	r3, r3
 8003584:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003586:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800358a:	4621      	mov	r1, r4
 800358c:	eb12 0801 	adds.w	r8, r2, r1
 8003590:	4629      	mov	r1, r5
 8003592:	eb43 0901 	adc.w	r9, r3, r1
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035aa:	4690      	mov	r8, r2
 80035ac:	4699      	mov	r9, r3
 80035ae:	4623      	mov	r3, r4
 80035b0:	eb18 0303 	adds.w	r3, r8, r3
 80035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035b8:	462b      	mov	r3, r5
 80035ba:	eb49 0303 	adc.w	r3, r9, r3
 80035be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80035d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80035d6:	460b      	mov	r3, r1
 80035d8:	18db      	adds	r3, r3, r3
 80035da:	653b      	str	r3, [r7, #80]	; 0x50
 80035dc:	4613      	mov	r3, r2
 80035de:	eb42 0303 	adc.w	r3, r2, r3
 80035e2:	657b      	str	r3, [r7, #84]	; 0x54
 80035e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80035ec:	f7fc fe50 	bl	8000290 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4b61      	ldr	r3, [pc, #388]	; (800377c <UART_SetConfig+0x2d4>)
 80035f6:	fba3 2302 	umull	r2, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	011c      	lsls	r4, r3, #4
 80035fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003608:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800360c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003610:	4642      	mov	r2, r8
 8003612:	464b      	mov	r3, r9
 8003614:	1891      	adds	r1, r2, r2
 8003616:	64b9      	str	r1, [r7, #72]	; 0x48
 8003618:	415b      	adcs	r3, r3
 800361a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800361c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003620:	4641      	mov	r1, r8
 8003622:	eb12 0a01 	adds.w	sl, r2, r1
 8003626:	4649      	mov	r1, r9
 8003628:	eb43 0b01 	adc.w	fp, r3, r1
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003638:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800363c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003640:	4692      	mov	sl, r2
 8003642:	469b      	mov	fp, r3
 8003644:	4643      	mov	r3, r8
 8003646:	eb1a 0303 	adds.w	r3, sl, r3
 800364a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800364e:	464b      	mov	r3, r9
 8003650:	eb4b 0303 	adc.w	r3, fp, r3
 8003654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003664:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003668:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800366c:	460b      	mov	r3, r1
 800366e:	18db      	adds	r3, r3, r3
 8003670:	643b      	str	r3, [r7, #64]	; 0x40
 8003672:	4613      	mov	r3, r2
 8003674:	eb42 0303 	adc.w	r3, r2, r3
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
 800367a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800367e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003682:	f7fc fe05 	bl	8000290 <__aeabi_uldivmod>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4611      	mov	r1, r2
 800368c:	4b3b      	ldr	r3, [pc, #236]	; (800377c <UART_SetConfig+0x2d4>)
 800368e:	fba3 2301 	umull	r2, r3, r3, r1
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	2264      	movs	r2, #100	; 0x64
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	1acb      	subs	r3, r1, r3
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <UART_SetConfig+0x2d4>)
 80036a4:	fba3 2302 	umull	r2, r3, r3, r2
 80036a8:	095b      	lsrs	r3, r3, #5
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036b0:	441c      	add	r4, r3
 80036b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80036c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80036c4:	4642      	mov	r2, r8
 80036c6:	464b      	mov	r3, r9
 80036c8:	1891      	adds	r1, r2, r2
 80036ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80036cc:	415b      	adcs	r3, r3
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036d4:	4641      	mov	r1, r8
 80036d6:	1851      	adds	r1, r2, r1
 80036d8:	6339      	str	r1, [r7, #48]	; 0x30
 80036da:	4649      	mov	r1, r9
 80036dc:	414b      	adcs	r3, r1
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80036ec:	4659      	mov	r1, fp
 80036ee:	00cb      	lsls	r3, r1, #3
 80036f0:	4651      	mov	r1, sl
 80036f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036f6:	4651      	mov	r1, sl
 80036f8:	00ca      	lsls	r2, r1, #3
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	4642      	mov	r2, r8
 8003702:	189b      	adds	r3, r3, r2
 8003704:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003708:	464b      	mov	r3, r9
 800370a:	460a      	mov	r2, r1
 800370c:	eb42 0303 	adc.w	r3, r2, r3
 8003710:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003720:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003728:	460b      	mov	r3, r1
 800372a:	18db      	adds	r3, r3, r3
 800372c:	62bb      	str	r3, [r7, #40]	; 0x28
 800372e:	4613      	mov	r3, r2
 8003730:	eb42 0303 	adc.w	r3, r2, r3
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003736:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800373a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800373e:	f7fc fda7 	bl	8000290 <__aeabi_uldivmod>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4b0d      	ldr	r3, [pc, #52]	; (800377c <UART_SetConfig+0x2d4>)
 8003748:	fba3 1302 	umull	r1, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2164      	movs	r1, #100	; 0x64
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	3332      	adds	r3, #50	; 0x32
 800375a:	4a08      	ldr	r2, [pc, #32]	; (800377c <UART_SetConfig+0x2d4>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	f003 0207 	and.w	r2, r3, #7
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4422      	add	r2, r4
 800376e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003770:	e106      	b.n	8003980 <UART_SetConfig+0x4d8>
 8003772:	bf00      	nop
 8003774:	40011000 	.word	0x40011000
 8003778:	40011400 	.word	0x40011400
 800377c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003784:	2200      	movs	r2, #0
 8003786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800378a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800378e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003792:	4642      	mov	r2, r8
 8003794:	464b      	mov	r3, r9
 8003796:	1891      	adds	r1, r2, r2
 8003798:	6239      	str	r1, [r7, #32]
 800379a:	415b      	adcs	r3, r3
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
 800379e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037a2:	4641      	mov	r1, r8
 80037a4:	1854      	adds	r4, r2, r1
 80037a6:	4649      	mov	r1, r9
 80037a8:	eb43 0501 	adc.w	r5, r3, r1
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	00eb      	lsls	r3, r5, #3
 80037b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ba:	00e2      	lsls	r2, r4, #3
 80037bc:	4614      	mov	r4, r2
 80037be:	461d      	mov	r5, r3
 80037c0:	4643      	mov	r3, r8
 80037c2:	18e3      	adds	r3, r4, r3
 80037c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80037c8:	464b      	mov	r3, r9
 80037ca:	eb45 0303 	adc.w	r3, r5, r3
 80037ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80037d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80037ee:	4629      	mov	r1, r5
 80037f0:	008b      	lsls	r3, r1, #2
 80037f2:	4621      	mov	r1, r4
 80037f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037f8:	4621      	mov	r1, r4
 80037fa:	008a      	lsls	r2, r1, #2
 80037fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003800:	f7fc fd46 	bl	8000290 <__aeabi_uldivmod>
 8003804:	4602      	mov	r2, r0
 8003806:	460b      	mov	r3, r1
 8003808:	4b60      	ldr	r3, [pc, #384]	; (800398c <UART_SetConfig+0x4e4>)
 800380a:	fba3 2302 	umull	r2, r3, r3, r2
 800380e:	095b      	lsrs	r3, r3, #5
 8003810:	011c      	lsls	r4, r3, #4
 8003812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003816:	2200      	movs	r2, #0
 8003818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800381c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003820:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003824:	4642      	mov	r2, r8
 8003826:	464b      	mov	r3, r9
 8003828:	1891      	adds	r1, r2, r2
 800382a:	61b9      	str	r1, [r7, #24]
 800382c:	415b      	adcs	r3, r3
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003834:	4641      	mov	r1, r8
 8003836:	1851      	adds	r1, r2, r1
 8003838:	6139      	str	r1, [r7, #16]
 800383a:	4649      	mov	r1, r9
 800383c:	414b      	adcs	r3, r1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800384c:	4659      	mov	r1, fp
 800384e:	00cb      	lsls	r3, r1, #3
 8003850:	4651      	mov	r1, sl
 8003852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003856:	4651      	mov	r1, sl
 8003858:	00ca      	lsls	r2, r1, #3
 800385a:	4610      	mov	r0, r2
 800385c:	4619      	mov	r1, r3
 800385e:	4603      	mov	r3, r0
 8003860:	4642      	mov	r2, r8
 8003862:	189b      	adds	r3, r3, r2
 8003864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003868:	464b      	mov	r3, r9
 800386a:	460a      	mov	r2, r1
 800386c:	eb42 0303 	adc.w	r3, r2, r3
 8003870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	67bb      	str	r3, [r7, #120]	; 0x78
 800387e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800388c:	4649      	mov	r1, r9
 800388e:	008b      	lsls	r3, r1, #2
 8003890:	4641      	mov	r1, r8
 8003892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003896:	4641      	mov	r1, r8
 8003898:	008a      	lsls	r2, r1, #2
 800389a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800389e:	f7fc fcf7 	bl	8000290 <__aeabi_uldivmod>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4611      	mov	r1, r2
 80038a8:	4b38      	ldr	r3, [pc, #224]	; (800398c <UART_SetConfig+0x4e4>)
 80038aa:	fba3 2301 	umull	r2, r3, r3, r1
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	2264      	movs	r2, #100	; 0x64
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	1acb      	subs	r3, r1, r3
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	3332      	adds	r3, #50	; 0x32
 80038bc:	4a33      	ldr	r2, [pc, #204]	; (800398c <UART_SetConfig+0x4e4>)
 80038be:	fba2 2303 	umull	r2, r3, r2, r3
 80038c2:	095b      	lsrs	r3, r3, #5
 80038c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c8:	441c      	add	r4, r3
 80038ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ce:	2200      	movs	r2, #0
 80038d0:	673b      	str	r3, [r7, #112]	; 0x70
 80038d2:	677a      	str	r2, [r7, #116]	; 0x74
 80038d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80038d8:	4642      	mov	r2, r8
 80038da:	464b      	mov	r3, r9
 80038dc:	1891      	adds	r1, r2, r2
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	415b      	adcs	r3, r3
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038e8:	4641      	mov	r1, r8
 80038ea:	1851      	adds	r1, r2, r1
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	4649      	mov	r1, r9
 80038f0:	414b      	adcs	r3, r1
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003900:	4659      	mov	r1, fp
 8003902:	00cb      	lsls	r3, r1, #3
 8003904:	4651      	mov	r1, sl
 8003906:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800390a:	4651      	mov	r1, sl
 800390c:	00ca      	lsls	r2, r1, #3
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	4603      	mov	r3, r0
 8003914:	4642      	mov	r2, r8
 8003916:	189b      	adds	r3, r3, r2
 8003918:	66bb      	str	r3, [r7, #104]	; 0x68
 800391a:	464b      	mov	r3, r9
 800391c:	460a      	mov	r2, r1
 800391e:	eb42 0303 	adc.w	r3, r2, r3
 8003922:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	663b      	str	r3, [r7, #96]	; 0x60
 800392e:	667a      	str	r2, [r7, #100]	; 0x64
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800393c:	4649      	mov	r1, r9
 800393e:	008b      	lsls	r3, r1, #2
 8003940:	4641      	mov	r1, r8
 8003942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003946:	4641      	mov	r1, r8
 8003948:	008a      	lsls	r2, r1, #2
 800394a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800394e:	f7fc fc9f 	bl	8000290 <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <UART_SetConfig+0x4e4>)
 8003958:	fba3 1302 	umull	r1, r3, r3, r2
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	2164      	movs	r1, #100	; 0x64
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	3332      	adds	r3, #50	; 0x32
 800396a:	4a08      	ldr	r2, [pc, #32]	; (800398c <UART_SetConfig+0x4e4>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	f003 020f 	and.w	r2, r3, #15
 8003976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4422      	add	r2, r4
 800397e:	609a      	str	r2, [r3, #8]
}
 8003980:	bf00      	nop
 8003982:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003986:	46bd      	mov	sp, r7
 8003988:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800398c:	51eb851f 	.word	0x51eb851f

08003990 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003990:	b084      	sub	sp, #16
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	f107 001c 	add.w	r0, r7, #28
 800399e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039a2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d123      	bne.n	80039f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d105      	bne.n	80039e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 faa0 	bl	8003f2c <USB_CoreReset>
 80039ec:	4603      	mov	r3, r0
 80039ee:	73fb      	strb	r3, [r7, #15]
 80039f0:	e01b      	b.n	8003a2a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fa94 	bl	8003f2c <USB_CoreReset>
 8003a04:	4603      	mov	r3, r0
 8003a06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a08:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a1c:	e005      	b.n	8003a2a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a2a:	7fbb      	ldrb	r3, [r7, #30]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10b      	bne.n	8003a48 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f043 0206 	orr.w	r2, r3, #6
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f043 0220 	orr.w	r2, r3, #32
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a54:	b004      	add	sp, #16
 8003a56:	4770      	bx	lr

08003a58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 0201 	bic.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a96:	78fb      	ldrb	r3, [r7, #3]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d115      	bne.n	8003ac8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003aa8:	200a      	movs	r0, #10
 8003aaa:	f7fd fb35 	bl	8001118 <HAL_Delay>
      ms += 10U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	330a      	adds	r3, #10
 8003ab2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fa2b 	bl	8003f10 <USB_GetMode>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d01e      	beq.n	8003afe <USB_SetCurrentMode+0x84>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2bc7      	cmp	r3, #199	; 0xc7
 8003ac4:	d9f0      	bls.n	8003aa8 <USB_SetCurrentMode+0x2e>
 8003ac6:	e01a      	b.n	8003afe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d115      	bne.n	8003afa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ada:	200a      	movs	r0, #10
 8003adc:	f7fd fb1c 	bl	8001118 <HAL_Delay>
      ms += 10U;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	330a      	adds	r3, #10
 8003ae4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fa12 	bl	8003f10 <USB_GetMode>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <USB_SetCurrentMode+0x84>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2bc7      	cmp	r3, #199	; 0xc7
 8003af6:	d9f0      	bls.n	8003ada <USB_SetCurrentMode+0x60>
 8003af8:	e001      	b.n	8003afe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e005      	b.n	8003b0a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2bc8      	cmp	r3, #200	; 0xc8
 8003b02:	d101      	bne.n	8003b08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b14:	b084      	sub	sp, #16
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003b22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	e009      	b.n	8003b48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	3340      	adds	r3, #64	; 0x40
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	3301      	adds	r3, #1
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	2b0e      	cmp	r3, #14
 8003b4c:	d9f2      	bls.n	8003b34 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11c      	bne.n	8003b90 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b64:	f043 0302 	orr.w	r3, r3, #2
 8003b68:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b8e:	e00b      	b.n	8003ba8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bb4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10d      	bne.n	8003bd8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d104      	bne.n	8003bce <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f968 	bl	8003e9c <USB_SetDevSpeed>
 8003bcc:	e008      	b.n	8003be0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003bce:	2101      	movs	r1, #1
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f963 	bl	8003e9c <USB_SetDevSpeed>
 8003bd6:	e003      	b.n	8003be0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003bd8:	2103      	movs	r1, #3
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f95e 	bl	8003e9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003be0:	2110      	movs	r1, #16
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f8fa 	bl	8003ddc <USB_FlushTxFifo>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f924 	bl	8003e40 <USB_FlushRxFifo>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c14:	461a      	mov	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c20:	461a      	mov	r2, r3
 8003c22:	2300      	movs	r3, #0
 8003c24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e043      	b.n	8003cb4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c42:	d118      	bne.n	8003c76 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	461a      	mov	r2, r3
 8003c58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e013      	b.n	8003c88 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e008      	b.n	8003c88 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c82:	461a      	mov	r2, r3
 8003c84:	2300      	movs	r3, #0
 8003c86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c94:	461a      	mov	r2, r3
 8003c96:	2300      	movs	r3, #0
 8003c98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cb8:	461a      	mov	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d3b5      	bcc.n	8003c2c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	e043      	b.n	8003d4e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cdc:	d118      	bne.n	8003d10 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	e013      	b.n	8003d22 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d06:	461a      	mov	r2, r3
 8003d08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e008      	b.n	8003d22 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	2300      	movs	r3, #0
 8003d20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2e:	461a      	mov	r2, r3
 8003d30:	2300      	movs	r3, #0
 8003d32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	015a      	lsls	r2, r3, #5
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d40:	461a      	mov	r2, r3
 8003d42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d52:	461a      	mov	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d3b5      	bcc.n	8003cc6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	f043 0210 	orr.w	r2, r3, #16
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699a      	ldr	r2, [r3, #24]
 8003d94:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <USB_DevInit+0x2c4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d005      	beq.n	8003db0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f043 0208 	orr.w	r2, r3, #8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003db0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d107      	bne.n	8003dc8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dc0:	f043 0304 	orr.w	r3, r3, #4
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003dd4:	b004      	add	sp, #16
 8003dd6:	4770      	bx	lr
 8003dd8:	803c3800 	.word	0x803c3800

08003ddc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3301      	adds	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003df6:	d901      	bls.n	8003dfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e01b      	b.n	8003e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	daf2      	bge.n	8003dea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	019b      	lsls	r3, r3, #6
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3301      	adds	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e20:	d901      	bls.n	8003e26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e006      	b.n	8003e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d0f0      	beq.n	8003e14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e58:	d901      	bls.n	8003e5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e018      	b.n	8003e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	daf2      	bge.n	8003e4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e7c:	d901      	bls.n	8003e82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e006      	b.n	8003e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d0f0      	beq.n	8003e70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	68f9      	ldr	r1, [r7, #12]
 8003eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003ee8:	f023 0303 	bic.w	r3, r3, #3
 8003eec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003efc:	f043 0302 	orr.w	r3, r3, #2
 8003f00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3714      	adds	r7, #20
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003f44:	d901      	bls.n	8003f4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e01b      	b.n	8003f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	daf2      	bge.n	8003f38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3301      	adds	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003f6e:	d901      	bls.n	8003f74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e006      	b.n	8003f82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d0f0      	beq.n	8003f62 <USB_CoreReset+0x36>

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003f96:	4b87      	ldr	r3, [pc, #540]	; (80041b4 <MX_LWIP_Init+0x224>)
 8003f98:	22c0      	movs	r2, #192	; 0xc0
 8003f9a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003f9c:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <MX_LWIP_Init+0x224>)
 8003f9e:	22a8      	movs	r2, #168	; 0xa8
 8003fa0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8003fa2:	4b84      	ldr	r3, [pc, #528]	; (80041b4 <MX_LWIP_Init+0x224>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 194;
 8003fa8:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <MX_LWIP_Init+0x224>)
 8003faa:	22c2      	movs	r2, #194	; 0xc2
 8003fac:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003fae:	4b82      	ldr	r3, [pc, #520]	; (80041b8 <MX_LWIP_Init+0x228>)
 8003fb0:	22ff      	movs	r2, #255	; 0xff
 8003fb2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003fb4:	4b80      	ldr	r3, [pc, #512]	; (80041b8 <MX_LWIP_Init+0x228>)
 8003fb6:	22ff      	movs	r2, #255	; 0xff
 8003fb8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003fba:	4b7f      	ldr	r3, [pc, #508]	; (80041b8 <MX_LWIP_Init+0x228>)
 8003fbc:	22ff      	movs	r2, #255	; 0xff
 8003fbe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003fc0:	4b7d      	ldr	r3, [pc, #500]	; (80041b8 <MX_LWIP_Init+0x228>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003fc6:	4b7d      	ldr	r3, [pc, #500]	; (80041bc <MX_LWIP_Init+0x22c>)
 8003fc8:	22c0      	movs	r2, #192	; 0xc0
 8003fca:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003fcc:	4b7b      	ldr	r3, [pc, #492]	; (80041bc <MX_LWIP_Init+0x22c>)
 8003fce:	22a8      	movs	r2, #168	; 0xa8
 8003fd0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8003fd2:	4b7a      	ldr	r3, [pc, #488]	; (80041bc <MX_LWIP_Init+0x22c>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003fd8:	4b78      	ldr	r3, [pc, #480]	; (80041bc <MX_LWIP_Init+0x22c>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8003fde:	f000 fd15 	bl	8004a0c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003fe2:	4b74      	ldr	r3, [pc, #464]	; (80041b4 <MX_LWIP_Init+0x224>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	061a      	lsls	r2, r3, #24
 8003fe8:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <MX_LWIP_Init+0x224>)
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	4b70      	ldr	r3, [pc, #448]	; (80041b4 <MX_LWIP_Init+0x224>)
 8003ff2:	789b      	ldrb	r3, [r3, #2]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	4a6e      	ldr	r2, [pc, #440]	; (80041b4 <MX_LWIP_Init+0x224>)
 8003ffa:	78d2      	ldrb	r2, [r2, #3]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	061a      	lsls	r2, r3, #24
 8004000:	4b6c      	ldr	r3, [pc, #432]	; (80041b4 <MX_LWIP_Init+0x224>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	0619      	lsls	r1, r3, #24
 8004006:	4b6b      	ldr	r3, [pc, #428]	; (80041b4 <MX_LWIP_Init+0x224>)
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	041b      	lsls	r3, r3, #16
 800400c:	4319      	orrs	r1, r3
 800400e:	4b69      	ldr	r3, [pc, #420]	; (80041b4 <MX_LWIP_Init+0x224>)
 8004010:	789b      	ldrb	r3, [r3, #2]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	430b      	orrs	r3, r1
 8004016:	4967      	ldr	r1, [pc, #412]	; (80041b4 <MX_LWIP_Init+0x224>)
 8004018:	78c9      	ldrb	r1, [r1, #3]
 800401a:	430b      	orrs	r3, r1
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004022:	431a      	orrs	r2, r3
 8004024:	4b63      	ldr	r3, [pc, #396]	; (80041b4 <MX_LWIP_Init+0x224>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	0619      	lsls	r1, r3, #24
 800402a:	4b62      	ldr	r3, [pc, #392]	; (80041b4 <MX_LWIP_Init+0x224>)
 800402c:	785b      	ldrb	r3, [r3, #1]
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	4319      	orrs	r1, r3
 8004032:	4b60      	ldr	r3, [pc, #384]	; (80041b4 <MX_LWIP_Init+0x224>)
 8004034:	789b      	ldrb	r3, [r3, #2]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	430b      	orrs	r3, r1
 800403a:	495e      	ldr	r1, [pc, #376]	; (80041b4 <MX_LWIP_Init+0x224>)
 800403c:	78c9      	ldrb	r1, [r1, #3]
 800403e:	430b      	orrs	r3, r1
 8004040:	0a1b      	lsrs	r3, r3, #8
 8004042:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004046:	431a      	orrs	r2, r3
 8004048:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <MX_LWIP_Init+0x224>)
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	0619      	lsls	r1, r3, #24
 800404e:	4b59      	ldr	r3, [pc, #356]	; (80041b4 <MX_LWIP_Init+0x224>)
 8004050:	785b      	ldrb	r3, [r3, #1]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	4319      	orrs	r1, r3
 8004056:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <MX_LWIP_Init+0x224>)
 8004058:	789b      	ldrb	r3, [r3, #2]
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	430b      	orrs	r3, r1
 800405e:	4955      	ldr	r1, [pc, #340]	; (80041b4 <MX_LWIP_Init+0x224>)
 8004060:	78c9      	ldrb	r1, [r1, #3]
 8004062:	430b      	orrs	r3, r1
 8004064:	0e1b      	lsrs	r3, r3, #24
 8004066:	4313      	orrs	r3, r2
 8004068:	4a55      	ldr	r2, [pc, #340]	; (80041c0 <MX_LWIP_Init+0x230>)
 800406a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800406c:	4b52      	ldr	r3, [pc, #328]	; (80041b8 <MX_LWIP_Init+0x228>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	061a      	lsls	r2, r3, #24
 8004072:	4b51      	ldr	r3, [pc, #324]	; (80041b8 <MX_LWIP_Init+0x228>)
 8004074:	785b      	ldrb	r3, [r3, #1]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	431a      	orrs	r2, r3
 800407a:	4b4f      	ldr	r3, [pc, #316]	; (80041b8 <MX_LWIP_Init+0x228>)
 800407c:	789b      	ldrb	r3, [r3, #2]
 800407e:	021b      	lsls	r3, r3, #8
 8004080:	4313      	orrs	r3, r2
 8004082:	4a4d      	ldr	r2, [pc, #308]	; (80041b8 <MX_LWIP_Init+0x228>)
 8004084:	78d2      	ldrb	r2, [r2, #3]
 8004086:	4313      	orrs	r3, r2
 8004088:	061a      	lsls	r2, r3, #24
 800408a:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <MX_LWIP_Init+0x228>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	0619      	lsls	r1, r3, #24
 8004090:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <MX_LWIP_Init+0x228>)
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	041b      	lsls	r3, r3, #16
 8004096:	4319      	orrs	r1, r3
 8004098:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <MX_LWIP_Init+0x228>)
 800409a:	789b      	ldrb	r3, [r3, #2]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	430b      	orrs	r3, r1
 80040a0:	4945      	ldr	r1, [pc, #276]	; (80041b8 <MX_LWIP_Init+0x228>)
 80040a2:	78c9      	ldrb	r1, [r1, #3]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040ac:	431a      	orrs	r2, r3
 80040ae:	4b42      	ldr	r3, [pc, #264]	; (80041b8 <MX_LWIP_Init+0x228>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	0619      	lsls	r1, r3, #24
 80040b4:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <MX_LWIP_Init+0x228>)
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	4319      	orrs	r1, r3
 80040bc:	4b3e      	ldr	r3, [pc, #248]	; (80041b8 <MX_LWIP_Init+0x228>)
 80040be:	789b      	ldrb	r3, [r3, #2]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	430b      	orrs	r3, r1
 80040c4:	493c      	ldr	r1, [pc, #240]	; (80041b8 <MX_LWIP_Init+0x228>)
 80040c6:	78c9      	ldrb	r1, [r1, #3]
 80040c8:	430b      	orrs	r3, r1
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040d0:	431a      	orrs	r2, r3
 80040d2:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <MX_LWIP_Init+0x228>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	0619      	lsls	r1, r3, #24
 80040d8:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <MX_LWIP_Init+0x228>)
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	4319      	orrs	r1, r3
 80040e0:	4b35      	ldr	r3, [pc, #212]	; (80041b8 <MX_LWIP_Init+0x228>)
 80040e2:	789b      	ldrb	r3, [r3, #2]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	430b      	orrs	r3, r1
 80040e8:	4933      	ldr	r1, [pc, #204]	; (80041b8 <MX_LWIP_Init+0x228>)
 80040ea:	78c9      	ldrb	r1, [r1, #3]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	0e1b      	lsrs	r3, r3, #24
 80040f0:	4313      	orrs	r3, r2
 80040f2:	4a34      	ldr	r2, [pc, #208]	; (80041c4 <MX_LWIP_Init+0x234>)
 80040f4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80040f6:	4b31      	ldr	r3, [pc, #196]	; (80041bc <MX_LWIP_Init+0x22c>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	061a      	lsls	r2, r3, #24
 80040fc:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <MX_LWIP_Init+0x22c>)
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	431a      	orrs	r2, r3
 8004104:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <MX_LWIP_Init+0x22c>)
 8004106:	789b      	ldrb	r3, [r3, #2]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	4313      	orrs	r3, r2
 800410c:	4a2b      	ldr	r2, [pc, #172]	; (80041bc <MX_LWIP_Init+0x22c>)
 800410e:	78d2      	ldrb	r2, [r2, #3]
 8004110:	4313      	orrs	r3, r2
 8004112:	061a      	lsls	r2, r3, #24
 8004114:	4b29      	ldr	r3, [pc, #164]	; (80041bc <MX_LWIP_Init+0x22c>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	0619      	lsls	r1, r3, #24
 800411a:	4b28      	ldr	r3, [pc, #160]	; (80041bc <MX_LWIP_Init+0x22c>)
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	4319      	orrs	r1, r3
 8004122:	4b26      	ldr	r3, [pc, #152]	; (80041bc <MX_LWIP_Init+0x22c>)
 8004124:	789b      	ldrb	r3, [r3, #2]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	430b      	orrs	r3, r1
 800412a:	4924      	ldr	r1, [pc, #144]	; (80041bc <MX_LWIP_Init+0x22c>)
 800412c:	78c9      	ldrb	r1, [r1, #3]
 800412e:	430b      	orrs	r3, r1
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004136:	431a      	orrs	r2, r3
 8004138:	4b20      	ldr	r3, [pc, #128]	; (80041bc <MX_LWIP_Init+0x22c>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	0619      	lsls	r1, r3, #24
 800413e:	4b1f      	ldr	r3, [pc, #124]	; (80041bc <MX_LWIP_Init+0x22c>)
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	4319      	orrs	r1, r3
 8004146:	4b1d      	ldr	r3, [pc, #116]	; (80041bc <MX_LWIP_Init+0x22c>)
 8004148:	789b      	ldrb	r3, [r3, #2]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	430b      	orrs	r3, r1
 800414e:	491b      	ldr	r1, [pc, #108]	; (80041bc <MX_LWIP_Init+0x22c>)
 8004150:	78c9      	ldrb	r1, [r1, #3]
 8004152:	430b      	orrs	r3, r1
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800415a:	431a      	orrs	r2, r3
 800415c:	4b17      	ldr	r3, [pc, #92]	; (80041bc <MX_LWIP_Init+0x22c>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	0619      	lsls	r1, r3, #24
 8004162:	4b16      	ldr	r3, [pc, #88]	; (80041bc <MX_LWIP_Init+0x22c>)
 8004164:	785b      	ldrb	r3, [r3, #1]
 8004166:	041b      	lsls	r3, r3, #16
 8004168:	4319      	orrs	r1, r3
 800416a:	4b14      	ldr	r3, [pc, #80]	; (80041bc <MX_LWIP_Init+0x22c>)
 800416c:	789b      	ldrb	r3, [r3, #2]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	430b      	orrs	r3, r1
 8004172:	4912      	ldr	r1, [pc, #72]	; (80041bc <MX_LWIP_Init+0x22c>)
 8004174:	78c9      	ldrb	r1, [r1, #3]
 8004176:	430b      	orrs	r3, r1
 8004178:	0e1b      	lsrs	r3, r3, #24
 800417a:	4313      	orrs	r3, r2
 800417c:	4a12      	ldr	r2, [pc, #72]	; (80041c8 <MX_LWIP_Init+0x238>)
 800417e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004180:	4b12      	ldr	r3, [pc, #72]	; (80041cc <MX_LWIP_Init+0x23c>)
 8004182:	9302      	str	r3, [sp, #8]
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <MX_LWIP_Init+0x240>)
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	2300      	movs	r3, #0
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	4b0e      	ldr	r3, [pc, #56]	; (80041c8 <MX_LWIP_Init+0x238>)
 800418e:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <MX_LWIP_Init+0x234>)
 8004190:	490b      	ldr	r1, [pc, #44]	; (80041c0 <MX_LWIP_Init+0x230>)
 8004192:	4810      	ldr	r0, [pc, #64]	; (80041d4 <MX_LWIP_Init+0x244>)
 8004194:	f001 f926 	bl	80053e4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004198:	480e      	ldr	r0, [pc, #56]	; (80041d4 <MX_LWIP_Init+0x244>)
 800419a:	f001 fad5 	bl	8005748 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800419e:	480d      	ldr	r0, [pc, #52]	; (80041d4 <MX_LWIP_Init+0x244>)
 80041a0:	f001 fae2 	bl	8005768 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80041a4:	490c      	ldr	r1, [pc, #48]	; (80041d8 <MX_LWIP_Init+0x248>)
 80041a6:	480b      	ldr	r0, [pc, #44]	; (80041d4 <MX_LWIP_Init+0x244>)
 80041a8:	f001 fbe0 	bl	800596c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	2000061c 	.word	0x2000061c
 80041b8:	20000620 	.word	0x20000620
 80041bc:	20000624 	.word	0x20000624
 80041c0:	20000610 	.word	0x20000610
 80041c4:	20000614 	.word	0x20000614
 80041c8:	20000618 	.word	0x20000618
 80041cc:	0800e9bd 	.word	0x0800e9bd
 80041d0:	080044f1 	.word	0x080044f1
 80041d4:	200005dc 	.word	0x200005dc
 80041d8:	08004235 	.word	0x08004235

080041dc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80041e4:	f7fc ff8c 	bl	8001100 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	4b08      	ldr	r3, [pc, #32]	; (800420c <Ethernet_Link_Periodic_Handle+0x30>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b63      	cmp	r3, #99	; 0x63
 80041f2:	d907      	bls.n	8004204 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80041f4:	f7fc ff84 	bl	8001100 <HAL_GetTick>
 80041f8:	4603      	mov	r3, r0
 80041fa:	4a04      	ldr	r2, [pc, #16]	; (800420c <Ethernet_Link_Periodic_Handle+0x30>)
 80041fc:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fada 	bl	80047b8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200005d8 	.word	0x200005d8

08004210 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004214:	4806      	ldr	r0, [pc, #24]	; (8004230 <MX_LWIP_Process+0x20>)
 8004216:	f000 f94b 	bl	80044b0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800421a:	f007 fc29 	bl	800ba70 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800421e:	4804      	ldr	r0, [pc, #16]	; (8004230 <MX_LWIP_Process+0x20>)
 8004220:	f7ff ffdc 	bl	80041dc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
  ethernet_link_status_updated(&gnetif);
 8004224:	4802      	ldr	r0, [pc, #8]	; (8004230 <MX_LWIP_Process+0x20>)
 8004226:	f000 f805 	bl	8004234 <ethernet_link_status_updated>
/* USER CODE END 4_3 */
}
 800422a:	bf00      	nop
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	200005dc 	.word	0x200005dc

08004234 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004254:	4b40      	ldr	r3, [pc, #256]	; (8004358 <low_level_init+0x110>)
 8004256:	4a41      	ldr	r2, [pc, #260]	; (800435c <low_level_init+0x114>)
 8004258:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800425a:	2300      	movs	r3, #0
 800425c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004262:	23e1      	movs	r3, #225	; 0xe1
 8004264:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004266:	2300      	movs	r3, #0
 8004268:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800426a:	2300      	movs	r3, #0
 800426c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800426e:	2300      	movs	r3, #0
 8004270:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004272:	4a39      	ldr	r2, [pc, #228]	; (8004358 <low_level_init+0x110>)
 8004274:	f107 0308 	add.w	r3, r7, #8
 8004278:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800427a:	4b37      	ldr	r3, [pc, #220]	; (8004358 <low_level_init+0x110>)
 800427c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004280:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004282:	4b35      	ldr	r3, [pc, #212]	; (8004358 <low_level_init+0x110>)
 8004284:	4a36      	ldr	r2, [pc, #216]	; (8004360 <low_level_init+0x118>)
 8004286:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004288:	4b33      	ldr	r3, [pc, #204]	; (8004358 <low_level_init+0x110>)
 800428a:	4a36      	ldr	r2, [pc, #216]	; (8004364 <low_level_init+0x11c>)
 800428c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800428e:	4b32      	ldr	r3, [pc, #200]	; (8004358 <low_level_init+0x110>)
 8004290:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004294:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004296:	4830      	ldr	r0, [pc, #192]	; (8004358 <low_level_init+0x110>)
 8004298:	f7fd f848 	bl	800132c <HAL_ETH_Init>
 800429c:	4603      	mov	r3, r0
 800429e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80042a0:	2238      	movs	r2, #56	; 0x38
 80042a2:	2100      	movs	r1, #0
 80042a4:	4830      	ldr	r0, [pc, #192]	; (8004368 <low_level_init+0x120>)
 80042a6:	f00a fdc4 	bl	800ee32 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80042aa:	4b2f      	ldr	r3, [pc, #188]	; (8004368 <low_level_init+0x120>)
 80042ac:	2221      	movs	r2, #33	; 0x21
 80042ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80042b0:	4b2d      	ldr	r3, [pc, #180]	; (8004368 <low_level_init+0x120>)
 80042b2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80042b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <low_level_init+0x120>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80042be:	482b      	ldr	r0, [pc, #172]	; (800436c <low_level_init+0x124>)
 80042c0:	f000 ff58 	bl	8005174 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2206      	movs	r2, #6
 80042c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80042cc:	4b22      	ldr	r3, [pc, #136]	; (8004358 <low_level_init+0x110>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	781a      	ldrb	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80042d8:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <low_level_init+0x110>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	785a      	ldrb	r2, [r3, #1]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80042e4:	4b1c      	ldr	r3, [pc, #112]	; (8004358 <low_level_init+0x110>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	789a      	ldrb	r2, [r3, #2]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80042f0:	4b19      	ldr	r3, [pc, #100]	; (8004358 <low_level_init+0x110>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	78da      	ldrb	r2, [r3, #3]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80042fc:	4b16      	ldr	r3, [pc, #88]	; (8004358 <low_level_init+0x110>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	791a      	ldrb	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004308:	4b13      	ldr	r3, [pc, #76]	; (8004358 <low_level_init+0x110>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	795a      	ldrb	r2, [r3, #5]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800431a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004322:	f043 030a 	orr.w	r3, r3, #10
 8004326:	b2da      	uxtb	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800432e:	4910      	ldr	r1, [pc, #64]	; (8004370 <low_level_init+0x128>)
 8004330:	4810      	ldr	r0, [pc, #64]	; (8004374 <low_level_init+0x12c>)
 8004332:	f7fc fd1e 	bl	8000d72 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004336:	480f      	ldr	r0, [pc, #60]	; (8004374 <low_level_init+0x12c>)
 8004338:	f7fc fd4d 	bl	8000dd6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d103      	bne.n	800434a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fa38 	bl	80047b8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004348:	e001      	b.n	800434e <low_level_init+0x106>
    Error_Handler();
 800434a:	f7fc fad1 	bl	80008f0 <Error_Handler>
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200050f4 	.word	0x200050f4
 800435c:	40028000 	.word	0x40028000
 8004360:	20005054 	.word	0x20005054
 8004364:	20004fb4 	.word	0x20004fb4
 8004368:	200051a4 	.word	0x200051a4
 800436c:	0801259c 	.word	0x0801259c
 8004370:	2000000c 	.word	0x2000000c
 8004374:	200051dc 	.word	0x200051dc

08004378 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b092      	sub	sp, #72	; 0x48
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004386:	2300      	movs	r3, #0
 8004388:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	2230      	movs	r2, #48	; 0x30
 8004396:	2100      	movs	r1, #0
 8004398:	4618      	mov	r0, r3
 800439a:	f00a fd4a 	bl	800ee32 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800439e:	f107 030c 	add.w	r3, r7, #12
 80043a2:	2230      	movs	r2, #48	; 0x30
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00a fd43 	bl	800ee32 <memset>

  for(q = p; q != NULL; q = q->next)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	643b      	str	r3, [r7, #64]	; 0x40
 80043b0:	e045      	b.n	800443e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80043b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d902      	bls.n	80043be <low_level_output+0x46>
      return ERR_IF;
 80043b8:	f06f 030b 	mvn.w	r3, #11
 80043bc:	e055      	b.n	800446a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80043be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c0:	6859      	ldr	r1, [r3, #4]
 80043c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043c4:	4613      	mov	r3, r2
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4413      	add	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	3348      	adds	r3, #72	; 0x48
 80043ce:	443b      	add	r3, r7
 80043d0:	3b3c      	subs	r3, #60	; 0x3c
 80043d2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80043d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d6:	895b      	ldrh	r3, [r3, #10]
 80043d8:	4619      	mov	r1, r3
 80043da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043dc:	4613      	mov	r3, r2
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	3348      	adds	r3, #72	; 0x48
 80043e6:	443b      	add	r3, r7
 80043e8:	3b38      	subs	r3, #56	; 0x38
 80043ea:	6019      	str	r1, [r3, #0]

    if(i>0)
 80043ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d011      	beq.n	8004416 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80043f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f4:	1e5a      	subs	r2, r3, #1
 80043f6:	f107 000c 	add.w	r0, r7, #12
 80043fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043fc:	460b      	mov	r3, r1
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	440b      	add	r3, r1
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	18c1      	adds	r1, r0, r3
 8004406:	4613      	mov	r3, r2
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	3348      	adds	r3, #72	; 0x48
 8004410:	443b      	add	r3, r7
 8004412:	3b34      	subs	r3, #52	; 0x34
 8004414:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d109      	bne.n	8004432 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800441e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004420:	4613      	mov	r3, r2
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	3348      	adds	r3, #72	; 0x48
 800442a:	443b      	add	r3, r7
 800442c:	3b34      	subs	r3, #52	; 0x34
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004434:	3301      	adds	r3, #1
 8004436:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	643b      	str	r3, [r7, #64]	; 0x40
 800443e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1b6      	bne.n	80043b2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	891b      	ldrh	r3, [r3, #8]
 8004448:	461a      	mov	r2, r3
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <low_level_output+0xfc>)
 800444c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <low_level_output+0xfc>)
 8004450:	f107 030c 	add.w	r3, r7, #12
 8004454:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004456:	4a07      	ldr	r2, [pc, #28]	; (8004474 <low_level_output+0xfc>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800445c:	2214      	movs	r2, #20
 800445e:	4905      	ldr	r1, [pc, #20]	; (8004474 <low_level_output+0xfc>)
 8004460:	4805      	ldr	r0, [pc, #20]	; (8004478 <low_level_output+0x100>)
 8004462:	f7fd f899 	bl	8001598 <HAL_ETH_Transmit>

  return errval;
 8004466:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800446a:	4618      	mov	r0, r3
 800446c:	3748      	adds	r7, #72	; 0x48
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	200051a4 	.word	0x200051a4
 8004478:	200050f4 	.word	0x200050f4

0800447c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004488:	4b07      	ldr	r3, [pc, #28]	; (80044a8 <low_level_input+0x2c>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d105      	bne.n	800449c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	4619      	mov	r1, r3
 8004496:	4805      	ldr	r0, [pc, #20]	; (80044ac <low_level_input+0x30>)
 8004498:	f7fd f912 	bl	80016c0 <HAL_ETH_ReadData>
  }

  return p;
 800449c:	68fb      	ldr	r3, [r7, #12]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20004fb0 	.word	0x20004fb0
 80044ac:	200050f4 	.word	0x200050f4

080044b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ffdd 	bl	800447c <low_level_input>
 80044c2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00a      	beq.n	80044e0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	4798      	blx	r3
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f001 fdc6 	bl	800606c <pbuf_free>
      }
    }
  } while(p!=NULL);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ea      	bne.n	80044bc <ethernetif_input+0xc>
}
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <ethernetif_init+0x1c>
 80044fe:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <ethernetif_init+0x48>)
 8004500:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8004504:	490d      	ldr	r1, [pc, #52]	; (800453c <ethernetif_init+0x4c>)
 8004506:	480e      	ldr	r0, [pc, #56]	; (8004540 <ethernetif_init+0x50>)
 8004508:	f00a fc2e 	bl	800ed68 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2273      	movs	r2, #115	; 0x73
 8004510:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2274      	movs	r2, #116	; 0x74
 8004518:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a09      	ldr	r2, [pc, #36]	; (8004544 <ethernetif_init+0x54>)
 8004520:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a08      	ldr	r2, [pc, #32]	; (8004548 <ethernetif_init+0x58>)
 8004526:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f7ff fe8d 	bl	8004248 <low_level_init>

  return ERR_OK;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	0800fba4 	.word	0x0800fba4
 800453c:	0800fbc0 	.word	0x0800fbc0
 8004540:	0800fbd0 	.word	0x0800fbd0
 8004544:	0800ce75 	.word	0x0800ce75
 8004548:	08004379 	.word	0x08004379

0800454c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004558:	68f9      	ldr	r1, [r7, #12]
 800455a:	4807      	ldr	r0, [pc, #28]	; (8004578 <pbuf_free_custom+0x2c>)
 800455c:	f000 feec 	bl	8005338 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004560:	4b06      	ldr	r3, [pc, #24]	; (800457c <pbuf_free_custom+0x30>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d102      	bne.n	800456e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <pbuf_free_custom+0x30>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
  }
}
 800456e:	bf00      	nop
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	0801259c 	.word	0x0801259c
 800457c:	20004fb0 	.word	0x20004fb0

08004580 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004584:	f7fc fdbc 	bl	8001100 <HAL_GetTick>
 8004588:	4603      	mov	r3, r0
}
 800458a:	4618      	mov	r0, r3
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08e      	sub	sp, #56	; 0x38
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a55      	ldr	r2, [pc, #340]	; (8004704 <HAL_ETH_MspInit+0x174>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	f040 80a4 	bne.w	80046fc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80045b4:	2300      	movs	r3, #0
 80045b6:	623b      	str	r3, [r7, #32]
 80045b8:	4b53      	ldr	r3, [pc, #332]	; (8004708 <HAL_ETH_MspInit+0x178>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	4a52      	ldr	r2, [pc, #328]	; (8004708 <HAL_ETH_MspInit+0x178>)
 80045be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045c2:	6313      	str	r3, [r2, #48]	; 0x30
 80045c4:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_ETH_MspInit+0x178>)
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045cc:	623b      	str	r3, [r7, #32]
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	4b4c      	ldr	r3, [pc, #304]	; (8004708 <HAL_ETH_MspInit+0x178>)
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	4a4b      	ldr	r2, [pc, #300]	; (8004708 <HAL_ETH_MspInit+0x178>)
 80045da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045de:	6313      	str	r3, [r2, #48]	; 0x30
 80045e0:	4b49      	ldr	r3, [pc, #292]	; (8004708 <HAL_ETH_MspInit+0x178>)
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	2300      	movs	r3, #0
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	4b45      	ldr	r3, [pc, #276]	; (8004708 <HAL_ETH_MspInit+0x178>)
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	4a44      	ldr	r2, [pc, #272]	; (8004708 <HAL_ETH_MspInit+0x178>)
 80045f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045fa:	6313      	str	r3, [r2, #48]	; 0x30
 80045fc:	4b42      	ldr	r3, [pc, #264]	; (8004708 <HAL_ETH_MspInit+0x178>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	4b3e      	ldr	r3, [pc, #248]	; (8004708 <HAL_ETH_MspInit+0x178>)
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	4a3d      	ldr	r2, [pc, #244]	; (8004708 <HAL_ETH_MspInit+0x178>)
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	6313      	str	r3, [r2, #48]	; 0x30
 8004618:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_ETH_MspInit+0x178>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	617b      	str	r3, [r7, #20]
 8004622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]
 8004628:	4b37      	ldr	r3, [pc, #220]	; (8004708 <HAL_ETH_MspInit+0x178>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4a36      	ldr	r2, [pc, #216]	; (8004708 <HAL_ETH_MspInit+0x178>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6313      	str	r3, [r2, #48]	; 0x30
 8004634:	4b34      	ldr	r3, [pc, #208]	; (8004708 <HAL_ETH_MspInit+0x178>)
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	4b30      	ldr	r3, [pc, #192]	; (8004708 <HAL_ETH_MspInit+0x178>)
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	4a2f      	ldr	r2, [pc, #188]	; (8004708 <HAL_ETH_MspInit+0x178>)
 800464a:	f043 0302 	orr.w	r3, r3, #2
 800464e:	6313      	str	r3, [r2, #48]	; 0x30
 8004650:	4b2d      	ldr	r3, [pc, #180]	; (8004708 <HAL_ETH_MspInit+0x178>)
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	4b29      	ldr	r3, [pc, #164]	; (8004708 <HAL_ETH_MspInit+0x178>)
 8004662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004664:	4a28      	ldr	r2, [pc, #160]	; (8004708 <HAL_ETH_MspInit+0x178>)
 8004666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466a:	6313      	str	r3, [r2, #48]	; 0x30
 800466c:	4b26      	ldr	r3, [pc, #152]	; (8004708 <HAL_ETH_MspInit+0x178>)
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004678:	2332      	movs	r3, #50	; 0x32
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800467c:	2302      	movs	r3, #2
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004680:	2300      	movs	r3, #0
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004684:	2303      	movs	r3, #3
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004688:	230b      	movs	r3, #11
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800468c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004690:	4619      	mov	r1, r3
 8004692:	481e      	ldr	r0, [pc, #120]	; (800470c <HAL_ETH_MspInit+0x17c>)
 8004694:	f7fd ff4c 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004698:	2386      	movs	r3, #134	; 0x86
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469c:	2302      	movs	r3, #2
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a4:	2303      	movs	r3, #3
 80046a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046a8:	230b      	movs	r3, #11
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046b0:	4619      	mov	r1, r3
 80046b2:	4817      	ldr	r0, [pc, #92]	; (8004710 <HAL_ETH_MspInit+0x180>)
 80046b4:	f7fd ff3c 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80046b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	2302      	movs	r3, #2
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c6:	2303      	movs	r3, #3
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046ca:	230b      	movs	r3, #11
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80046ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d2:	4619      	mov	r1, r3
 80046d4:	480f      	ldr	r0, [pc, #60]	; (8004714 <HAL_ETH_MspInit+0x184>)
 80046d6:	f7fd ff2b 	bl	8002530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80046da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80046de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e0:	2302      	movs	r3, #2
 80046e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e8:	2303      	movs	r3, #3
 80046ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80046ec:	230b      	movs	r3, #11
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80046f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046f4:	4619      	mov	r1, r3
 80046f6:	4808      	ldr	r0, [pc, #32]	; (8004718 <HAL_ETH_MspInit+0x188>)
 80046f8:	f7fd ff1a 	bl	8002530 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80046fc:	bf00      	nop
 80046fe:	3738      	adds	r7, #56	; 0x38
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40028000 	.word	0x40028000
 8004708:	40023800 	.word	0x40023800
 800470c:	40020800 	.word	0x40020800
 8004710:	40020000 	.word	0x40020000
 8004714:	40020400 	.word	0x40020400
 8004718:	40021800 	.word	0x40021800

0800471c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004720:	4802      	ldr	r0, [pc, #8]	; (800472c <ETH_PHY_IO_Init+0x10>)
 8004722:	f7fd faa9 	bl	8001c78 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	200050f4 	.word	0x200050f4

08004730 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  return 0;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	68f9      	ldr	r1, [r7, #12]
 8004752:	4807      	ldr	r0, [pc, #28]	; (8004770 <ETH_PHY_IO_ReadReg+0x30>)
 8004754:	f7fd f8f8 	bl	8001948 <HAL_ETH_ReadPHYRegister>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	e000      	b.n	8004766 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	200050f4 	.word	0x200050f4

08004774 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	68f9      	ldr	r1, [r7, #12]
 8004786:	4807      	ldr	r0, [pc, #28]	; (80047a4 <ETH_PHY_IO_WriteReg+0x30>)
 8004788:	f7fd f929 	bl	80019de <HAL_ETH_WritePHYRegister>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295
 8004796:	e000      	b.n	800479a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200050f4 	.word	0x200050f4

080047a8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047ac:	f7fc fca8 	bl	8001100 <HAL_GetTick>
 80047b0:	4603      	mov	r3, r0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b0a0      	sub	sp, #128	; 0x80
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80047c0:	f107 030c 	add.w	r3, r7, #12
 80047c4:	2264      	movs	r2, #100	; 0x64
 80047c6:	2100      	movs	r1, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	f00a fb32 	bl	800ee32 <memset>
  int32_t PHYLinkState = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047d6:	2300      	movs	r3, #0
 80047d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047da:	2300      	movs	r3, #0
 80047dc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80047de:	483a      	ldr	r0, [pc, #232]	; (80048c8 <ethernet_link_check_state+0x110>)
 80047e0:	f7fc fba1 	bl	8000f26 <LAN8742_GetLinkState>
 80047e4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047ec:	089b      	lsrs	r3, r3, #2
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <ethernet_link_check_state+0x5a>
 80047f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	dc09      	bgt.n	8004812 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80047fe:	4833      	ldr	r0, [pc, #204]	; (80048cc <ethernet_link_check_state+0x114>)
 8004800:	f7fc fe71 	bl	80014e6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f001 f81b 	bl	8005840 <netif_set_down>
    netif_set_link_down(netif);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f001 f87e 	bl	800590c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004810:	e055      	b.n	80048be <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d14e      	bne.n	80048be <ethernet_link_check_state+0x106>
 8004820:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004822:	2b01      	cmp	r3, #1
 8004824:	dd4b      	ble.n	80048be <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004828:	3b02      	subs	r3, #2
 800482a:	2b03      	cmp	r3, #3
 800482c:	d82a      	bhi.n	8004884 <ethernet_link_check_state+0xcc>
 800482e:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <ethernet_link_check_state+0x7c>)
 8004830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004834:	08004845 	.word	0x08004845
 8004838:	08004857 	.word	0x08004857
 800483c:	08004867 	.word	0x08004867
 8004840:	08004877 	.word	0x08004877
      duplex = ETH_FULLDUPLEX_MODE;
 8004844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004848:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800484a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800484e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004850:	2301      	movs	r3, #1
 8004852:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004854:	e017      	b.n	8004886 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004856:	2300      	movs	r3, #0
 8004858:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800485a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800485e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004860:	2301      	movs	r3, #1
 8004862:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004864:	e00f      	b.n	8004886 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004866:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800486a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800486c:	2300      	movs	r3, #0
 800486e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004870:	2301      	movs	r3, #1
 8004872:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004874:	e007      	b.n	8004886 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004876:	2300      	movs	r3, #0
 8004878:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800487a:	2300      	movs	r3, #0
 800487c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800487e:	2301      	movs	r3, #1
 8004880:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004882:	e000      	b.n	8004886 <ethernet_link_check_state+0xce>
      break;
 8004884:	bf00      	nop
    if(linkchanged)
 8004886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d018      	beq.n	80048be <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	4619      	mov	r1, r3
 8004892:	480e      	ldr	r0, [pc, #56]	; (80048cc <ethernet_link_check_state+0x114>)
 8004894:	f7fd f8ec 	bl	8001a70 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800489c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800489e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	4619      	mov	r1, r3
 80048a6:	4809      	ldr	r0, [pc, #36]	; (80048cc <ethernet_link_check_state+0x114>)
 80048a8:	f7fd f9cc 	bl	8001c44 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80048ac:	4807      	ldr	r0, [pc, #28]	; (80048cc <ethernet_link_check_state+0x114>)
 80048ae:	f7fc fdbb 	bl	8001428 <HAL_ETH_Start>
      netif_set_up(netif);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 ff58 	bl	8005768 <netif_set_up>
      netif_set_link_up(netif);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fff3 	bl	80058a4 <netif_set_link_up>
}
 80048be:	bf00      	nop
 80048c0:	3780      	adds	r7, #128	; 0x80
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	200051dc 	.word	0x200051dc
 80048cc:	200050f4 	.word	0x200050f4

080048d0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80048d8:	4812      	ldr	r0, [pc, #72]	; (8004924 <HAL_ETH_RxAllocateCallback+0x54>)
 80048da:	f000 fcbf 	bl	800525c <memp_malloc_pool>
 80048de:	60f8      	str	r0, [r7, #12]
  if (p)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d014      	beq.n	8004910 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f103 0220 	add.w	r2, r3, #32
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a0d      	ldr	r2, [pc, #52]	; (8004928 <HAL_ETH_RxAllocateCallback+0x58>)
 80048f4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80048fe:	9201      	str	r2, [sp, #4]
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2241      	movs	r2, #65	; 0x41
 8004906:	2100      	movs	r1, #0
 8004908:	2000      	movs	r0, #0
 800490a:	f001 f9f5 	bl	8005cf8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800490e:	e005      	b.n	800491c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	0801259c 	.word	0x0801259c
 8004928:	0800454d 	.word	0x0800454d
 800492c:	20004fb0 	.word	0x20004fb0

08004930 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3b20      	subs	r3, #32
 800494e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	2200      	movs	r2, #0
 800495a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	887a      	ldrh	r2, [r7, #2]
 8004960:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e003      	b.n	800497a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	69fa      	ldr	r2, [r7, #28]
 800497e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	e009      	b.n	800499c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	891a      	ldrh	r2, [r3, #8]
 800498c:	887b      	ldrh	r3, [r7, #2]
 800498e:	4413      	add	r3, r2
 8004990:	b29a      	uxth	r2, r3
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f2      	bne.n	8004988 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80049a2:	bf00      	nop
 80049a4:	bf00      	nop
 80049a6:	3724      	adds	r7, #36	; 0x24
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80049ba:	88fb      	ldrh	r3, [r7, #6]
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	b21a      	sxth	r2, r3
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	b21b      	sxth	r3, r3
 80049c8:	4313      	orrs	r3, r2
 80049ca:	b21b      	sxth	r3, r3
 80049cc:	b29b      	uxth	r3, r3
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	061a      	lsls	r2, r3, #24
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	0e1b      	lsrs	r3, r3, #24
 80049fe:	4313      	orrs	r3, r2
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004a12:	2300      	movs	r3, #0
 8004a14:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004a16:	f000 f8d5 	bl	8004bc4 <mem_init>
  memp_init();
 8004a1a:	f000 fbdb 	bl	80051d4 <memp_init>
  pbuf_init();
  netif_init();
 8004a1e:	f000 fcd9 	bl	80053d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004a22:	f007 f867 	bl	800baf4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004a26:	f001 fdbf 	bl	80065a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004a2a:	f006 ffd9 	bl	800b9e0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004a42:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <ptr_to_mem+0x20>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	4413      	add	r3, r2
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20005868 	.word	0x20005868

08004a5c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004a64:	4b05      	ldr	r3, [pc, #20]	; (8004a7c <mem_to_ptr+0x20>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	b29b      	uxth	r3, r3
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20005868 	.word	0x20005868

08004a80 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004a80:	b590      	push	{r4, r7, lr}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004a88:	4b45      	ldr	r3, [pc, #276]	; (8004ba0 <plug_holes+0x120>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d206      	bcs.n	8004aa0 <plug_holes+0x20>
 8004a92:	4b44      	ldr	r3, [pc, #272]	; (8004ba4 <plug_holes+0x124>)
 8004a94:	f240 12df 	movw	r2, #479	; 0x1df
 8004a98:	4943      	ldr	r1, [pc, #268]	; (8004ba8 <plug_holes+0x128>)
 8004a9a:	4844      	ldr	r0, [pc, #272]	; (8004bac <plug_holes+0x12c>)
 8004a9c:	f00a f964 	bl	800ed68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004aa0:	4b43      	ldr	r3, [pc, #268]	; (8004bb0 <plug_holes+0x130>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d306      	bcc.n	8004ab8 <plug_holes+0x38>
 8004aaa:	4b3e      	ldr	r3, [pc, #248]	; (8004ba4 <plug_holes+0x124>)
 8004aac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004ab0:	4940      	ldr	r1, [pc, #256]	; (8004bb4 <plug_holes+0x134>)
 8004ab2:	483e      	ldr	r0, [pc, #248]	; (8004bac <plug_holes+0x12c>)
 8004ab4:	f00a f958 	bl	800ed68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	791b      	ldrb	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d006      	beq.n	8004ace <plug_holes+0x4e>
 8004ac0:	4b38      	ldr	r3, [pc, #224]	; (8004ba4 <plug_holes+0x124>)
 8004ac2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004ac6:	493c      	ldr	r1, [pc, #240]	; (8004bb8 <plug_holes+0x138>)
 8004ac8:	4838      	ldr	r0, [pc, #224]	; (8004bac <plug_holes+0x12c>)
 8004aca:	f00a f94d 	bl	800ed68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ad6:	d906      	bls.n	8004ae6 <plug_holes+0x66>
 8004ad8:	4b32      	ldr	r3, [pc, #200]	; (8004ba4 <plug_holes+0x124>)
 8004ada:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004ade:	4937      	ldr	r1, [pc, #220]	; (8004bbc <plug_holes+0x13c>)
 8004ae0:	4832      	ldr	r0, [pc, #200]	; (8004bac <plug_holes+0x12c>)
 8004ae2:	f00a f941 	bl	800ed68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff ffa4 	bl	8004a38 <ptr_to_mem>
 8004af0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d024      	beq.n	8004b44 <plug_holes+0xc4>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	791b      	ldrb	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d120      	bne.n	8004b44 <plug_holes+0xc4>
 8004b02:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <plug_holes+0x130>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d01b      	beq.n	8004b44 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <plug_holes+0x140>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d102      	bne.n	8004b1c <plug_holes+0x9c>
      lfree = mem;
 8004b16:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <plug_holes+0x140>)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	881a      	ldrh	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b2c:	d00a      	beq.n	8004b44 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff ff80 	bl	8004a38 <ptr_to_mem>
 8004b38:	4604      	mov	r4, r0
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ff8e 	bl	8004a5c <mem_to_ptr>
 8004b40:	4603      	mov	r3, r0
 8004b42:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	885b      	ldrh	r3, [r3, #2]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7ff ff75 	bl	8004a38 <ptr_to_mem>
 8004b4e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d01f      	beq.n	8004b98 <plug_holes+0x118>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	791b      	ldrb	r3, [r3, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11b      	bne.n	8004b98 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004b60:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <plug_holes+0x140>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d102      	bne.n	8004b70 <plug_holes+0xf0>
      lfree = pmem;
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <plug_holes+0x140>)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	881a      	ldrh	r2, [r3, #0]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004b80:	d00a      	beq.n	8004b98 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ff56 	bl	8004a38 <ptr_to_mem>
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	68b8      	ldr	r0, [r7, #8]
 8004b90:	f7ff ff64 	bl	8004a5c <mem_to_ptr>
 8004b94:	4603      	mov	r3, r0
 8004b96:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd90      	pop	{r4, r7, pc}
 8004ba0:	20005868 	.word	0x20005868
 8004ba4:	0800fbf8 	.word	0x0800fbf8
 8004ba8:	0800fc28 	.word	0x0800fc28
 8004bac:	0800fc40 	.word	0x0800fc40
 8004bb0:	2000586c 	.word	0x2000586c
 8004bb4:	0800fc68 	.word	0x0800fc68
 8004bb8:	0800fc84 	.word	0x0800fc84
 8004bbc:	0800fca0 	.word	0x0800fca0
 8004bc0:	20005870 	.word	0x20005870

08004bc4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <mem_init+0x68>)
 8004bcc:	3303      	adds	r3, #3
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <mem_init+0x6c>)
 8004bd6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004bd8:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <mem_init+0x6c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004be4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004bf2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004bf6:	f7ff ff1f 	bl	8004a38 <ptr_to_mem>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <mem_init+0x70>)
 8004bfe:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <mem_init+0x70>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2201      	movs	r2, #1
 8004c06:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <mem_init+0x70>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c10:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <mem_init+0x70>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004c1a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <mem_init+0x6c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <mem_init+0x74>)
 8004c22:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20005214 	.word	0x20005214
 8004c30:	20005868 	.word	0x20005868
 8004c34:	2000586c 	.word	0x2000586c
 8004c38:	20005870 	.word	0x20005870

08004c3c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7ff ff09 	bl	8004a5c <mem_to_ptr>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7ff fef0 	bl	8004a38 <ptr_to_mem>
 8004c58:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	885b      	ldrh	r3, [r3, #2]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff feea 	bl	8004a38 <ptr_to_mem>
 8004c64:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c6e:	d818      	bhi.n	8004ca2 <mem_link_valid+0x66>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	885b      	ldrh	r3, [r3, #2]
 8004c74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c78:	d813      	bhi.n	8004ca2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004c7e:	8afa      	ldrh	r2, [r7, #22]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d004      	beq.n	8004c8e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	881b      	ldrh	r3, [r3, #0]
 8004c88:	8afa      	ldrh	r2, [r7, #22]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d109      	bne.n	8004ca2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <mem_link_valid+0x74>)
 8004c90:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d006      	beq.n	8004ca6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	885b      	ldrh	r3, [r3, #2]
 8004c9c:	8afa      	ldrh	r2, [r7, #22]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d001      	beq.n	8004ca6 <mem_link_valid+0x6a>
    return 0;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <mem_link_valid+0x6c>
  }
  return 1;
 8004ca6:	2301      	movs	r3, #1
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	2000586c 	.word	0x2000586c

08004cb4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04c      	beq.n	8004d5c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004ccc:	4b25      	ldr	r3, [pc, #148]	; (8004d64 <mem_free+0xb0>)
 8004cce:	f240 2273 	movw	r2, #627	; 0x273
 8004cd2:	4925      	ldr	r1, [pc, #148]	; (8004d68 <mem_free+0xb4>)
 8004cd4:	4825      	ldr	r0, [pc, #148]	; (8004d6c <mem_free+0xb8>)
 8004cd6:	f00a f847 	bl	800ed68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004cda:	e040      	b.n	8004d5e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	3b08      	subs	r3, #8
 8004ce0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004ce2:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <mem_free+0xbc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d306      	bcc.n	8004cfa <mem_free+0x46>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f103 020c 	add.w	r2, r3, #12
 8004cf2:	4b20      	ldr	r3, [pc, #128]	; (8004d74 <mem_free+0xc0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d907      	bls.n	8004d0a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <mem_free+0xb0>)
 8004cfc:	f240 227f 	movw	r2, #639	; 0x27f
 8004d00:	491d      	ldr	r1, [pc, #116]	; (8004d78 <mem_free+0xc4>)
 8004d02:	481a      	ldr	r0, [pc, #104]	; (8004d6c <mem_free+0xb8>)
 8004d04:	f00a f830 	bl	800ed68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d08:	e029      	b.n	8004d5e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	791b      	ldrb	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <mem_free+0xb0>)
 8004d14:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004d18:	4918      	ldr	r1, [pc, #96]	; (8004d7c <mem_free+0xc8>)
 8004d1a:	4814      	ldr	r0, [pc, #80]	; (8004d6c <mem_free+0xb8>)
 8004d1c:	f00a f824 	bl	800ed68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d20:	e01d      	b.n	8004d5e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff ff8a 	bl	8004c3c <mem_link_valid>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d107      	bne.n	8004d3e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <mem_free+0xb0>)
 8004d30:	f240 2295 	movw	r2, #661	; 0x295
 8004d34:	4912      	ldr	r1, [pc, #72]	; (8004d80 <mem_free+0xcc>)
 8004d36:	480d      	ldr	r0, [pc, #52]	; (8004d6c <mem_free+0xb8>)
 8004d38:	f00a f816 	bl	800ed68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004d3c:	e00f      	b.n	8004d5e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004d44:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <mem_free+0xd0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d202      	bcs.n	8004d54 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <mem_free+0xd0>)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fe93 	bl	8004a80 <plug_holes>
 8004d5a:	e000      	b.n	8004d5e <mem_free+0xaa>
    return;
 8004d5c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	0800fbf8 	.word	0x0800fbf8
 8004d68:	0800fccc 	.word	0x0800fccc
 8004d6c:	0800fc40 	.word	0x0800fc40
 8004d70:	20005868 	.word	0x20005868
 8004d74:	2000586c 	.word	0x2000586c
 8004d78:	0800fcf0 	.word	0x0800fcf0
 8004d7c:	0800fd0c 	.word	0x0800fd0c
 8004d80:	0800fd34 	.word	0x0800fd34
 8004d84:	20005870 	.word	0x20005870

08004d88 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004d94:	887b      	ldrh	r3, [r7, #2]
 8004d96:	3303      	adds	r3, #3
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f023 0303 	bic.w	r3, r3, #3
 8004d9e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004da0:	8bfb      	ldrh	r3, [r7, #30]
 8004da2:	2b0b      	cmp	r3, #11
 8004da4:	d801      	bhi.n	8004daa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004da6:	230c      	movs	r3, #12
 8004da8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004daa:	8bfb      	ldrh	r3, [r7, #30]
 8004dac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004db0:	d803      	bhi.n	8004dba <mem_trim+0x32>
 8004db2:	8bfa      	ldrh	r2, [r7, #30]
 8004db4:	887b      	ldrh	r3, [r7, #2]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d201      	bcs.n	8004dbe <mem_trim+0x36>
    return NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	e0cc      	b.n	8004f58 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004dbe:	4b68      	ldr	r3, [pc, #416]	; (8004f60 <mem_trim+0x1d8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d304      	bcc.n	8004dd2 <mem_trim+0x4a>
 8004dc8:	4b66      	ldr	r3, [pc, #408]	; (8004f64 <mem_trim+0x1dc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d306      	bcc.n	8004de0 <mem_trim+0x58>
 8004dd2:	4b65      	ldr	r3, [pc, #404]	; (8004f68 <mem_trim+0x1e0>)
 8004dd4:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004dd8:	4964      	ldr	r1, [pc, #400]	; (8004f6c <mem_trim+0x1e4>)
 8004dda:	4865      	ldr	r0, [pc, #404]	; (8004f70 <mem_trim+0x1e8>)
 8004ddc:	f009 ffc4 	bl	800ed68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004de0:	4b5f      	ldr	r3, [pc, #380]	; (8004f60 <mem_trim+0x1d8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d304      	bcc.n	8004df4 <mem_trim+0x6c>
 8004dea:	4b5e      	ldr	r3, [pc, #376]	; (8004f64 <mem_trim+0x1dc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d301      	bcc.n	8004df8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	e0af      	b.n	8004f58 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3b08      	subs	r3, #8
 8004dfc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004dfe:	69b8      	ldr	r0, [r7, #24]
 8004e00:	f7ff fe2c 	bl	8004a5c <mem_to_ptr>
 8004e04:	4603      	mov	r3, r0
 8004e06:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	881a      	ldrh	r2, [r3, #0]
 8004e0c:	8afb      	ldrh	r3, [r7, #22]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b08      	subs	r3, #8
 8004e14:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004e16:	8bfa      	ldrh	r2, [r7, #30]
 8004e18:	8abb      	ldrh	r3, [r7, #20]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d906      	bls.n	8004e2c <mem_trim+0xa4>
 8004e1e:	4b52      	ldr	r3, [pc, #328]	; (8004f68 <mem_trim+0x1e0>)
 8004e20:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004e24:	4953      	ldr	r1, [pc, #332]	; (8004f74 <mem_trim+0x1ec>)
 8004e26:	4852      	ldr	r0, [pc, #328]	; (8004f70 <mem_trim+0x1e8>)
 8004e28:	f009 ff9e 	bl	800ed68 <iprintf>
  if (newsize > size) {
 8004e2c:	8bfa      	ldrh	r2, [r7, #30]
 8004e2e:	8abb      	ldrh	r3, [r7, #20]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d901      	bls.n	8004e38 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	e08f      	b.n	8004f58 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004e38:	8bfa      	ldrh	r2, [r7, #30]
 8004e3a:	8abb      	ldrh	r3, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d101      	bne.n	8004e44 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	e089      	b.n	8004f58 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f7ff fdf5 	bl	8004a38 <ptr_to_mem>
 8004e4e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	791b      	ldrb	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d13f      	bne.n	8004ed8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	881b      	ldrh	r3, [r3, #0]
 8004e5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004e60:	d106      	bne.n	8004e70 <mem_trim+0xe8>
 8004e62:	4b41      	ldr	r3, [pc, #260]	; (8004f68 <mem_trim+0x1e0>)
 8004e64:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004e68:	4943      	ldr	r1, [pc, #268]	; (8004f78 <mem_trim+0x1f0>)
 8004e6a:	4841      	ldr	r0, [pc, #260]	; (8004f70 <mem_trim+0x1e8>)
 8004e6c:	f009 ff7c 	bl	800ed68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004e76:	8afa      	ldrh	r2, [r7, #22]
 8004e78:	8bfb      	ldrh	r3, [r7, #30]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3308      	adds	r3, #8
 8004e80:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004e82:	4b3e      	ldr	r3, [pc, #248]	; (8004f7c <mem_trim+0x1f4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d106      	bne.n	8004e9a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004e8c:	89fb      	ldrh	r3, [r7, #14]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fdd2 	bl	8004a38 <ptr_to_mem>
 8004e94:	4603      	mov	r3, r0
 8004e96:	4a39      	ldr	r2, [pc, #228]	; (8004f7c <mem_trim+0x1f4>)
 8004e98:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004e9a:	89fb      	ldrh	r3, [r7, #14]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fdcb 	bl	8004a38 <ptr_to_mem>
 8004ea2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	89ba      	ldrh	r2, [r7, #12]
 8004eae:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	8afa      	ldrh	r2, [r7, #22]
 8004eb4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	89fa      	ldrh	r2, [r7, #14]
 8004eba:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ec4:	d047      	beq.n	8004f56 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff fdb4 	bl	8004a38 <ptr_to_mem>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	89fb      	ldrh	r3, [r7, #14]
 8004ed4:	8053      	strh	r3, [r2, #2]
 8004ed6:	e03e      	b.n	8004f56 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004ed8:	8bfb      	ldrh	r3, [r7, #30]
 8004eda:	f103 0214 	add.w	r2, r3, #20
 8004ede:	8abb      	ldrh	r3, [r7, #20]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d838      	bhi.n	8004f56 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004ee4:	8afa      	ldrh	r2, [r7, #22]
 8004ee6:	8bfb      	ldrh	r3, [r7, #30]
 8004ee8:	4413      	add	r3, r2
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3308      	adds	r3, #8
 8004eee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ef8:	d106      	bne.n	8004f08 <mem_trim+0x180>
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <mem_trim+0x1e0>)
 8004efc:	f240 3216 	movw	r2, #790	; 0x316
 8004f00:	491d      	ldr	r1, [pc, #116]	; (8004f78 <mem_trim+0x1f0>)
 8004f02:	481b      	ldr	r0, [pc, #108]	; (8004f70 <mem_trim+0x1e8>)
 8004f04:	f009 ff30 	bl	800ed68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fd94 	bl	8004a38 <ptr_to_mem>
 8004f10:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004f12:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <mem_trim+0x1f4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d202      	bcs.n	8004f22 <mem_trim+0x19a>
      lfree = mem2;
 8004f1c:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <mem_trim+0x1f4>)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2200      	movs	r2, #0
 8004f26:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	881a      	ldrh	r2, [r3, #0]
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	8afa      	ldrh	r2, [r7, #22]
 8004f34:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	89fa      	ldrh	r2, [r7, #14]
 8004f3a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f44:	d007      	beq.n	8004f56 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fd74 	bl	8004a38 <ptr_to_mem>
 8004f50:	4602      	mov	r2, r0
 8004f52:	89fb      	ldrh	r3, [r7, #14]
 8004f54:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004f56:	687b      	ldr	r3, [r7, #4]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20005868 	.word	0x20005868
 8004f64:	2000586c 	.word	0x2000586c
 8004f68:	0800fbf8 	.word	0x0800fbf8
 8004f6c:	0800fd68 	.word	0x0800fd68
 8004f70:	0800fc40 	.word	0x0800fc40
 8004f74:	0800fd80 	.word	0x0800fd80
 8004f78:	0800fda0 	.word	0x0800fda0
 8004f7c:	20005870 	.word	0x20005870

08004f80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b088      	sub	sp, #32
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	4603      	mov	r3, r0
 8004f88:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <mem_malloc+0x14>
    return NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	e0d9      	b.n	8005148 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	3303      	adds	r3, #3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004fa0:	8bbb      	ldrh	r3, [r7, #28]
 8004fa2:	2b0b      	cmp	r3, #11
 8004fa4:	d801      	bhi.n	8004faa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004faa:	8bbb      	ldrh	r3, [r7, #28]
 8004fac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004fb0:	d803      	bhi.n	8004fba <mem_malloc+0x3a>
 8004fb2:	8bba      	ldrh	r2, [r7, #28]
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d201      	bcs.n	8004fbe <mem_malloc+0x3e>
    return NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	e0c4      	b.n	8005148 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004fbe:	4b64      	ldr	r3, [pc, #400]	; (8005150 <mem_malloc+0x1d0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7ff fd4a 	bl	8004a5c <mem_to_ptr>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	83fb      	strh	r3, [r7, #30]
 8004fcc:	e0b4      	b.n	8005138 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004fce:	8bfb      	ldrh	r3, [r7, #30]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fd31 	bl	8004a38 <ptr_to_mem>
 8004fd6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	791b      	ldrb	r3, [r3, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f040 80a4 	bne.w	800512a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	8bfb      	ldrh	r3, [r7, #30]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	f1a3 0208 	sub.w	r2, r3, #8
 8004ff0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	f0c0 8099 	bcc.w	800512a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	881b      	ldrh	r3, [r3, #0]
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	8bfb      	ldrh	r3, [r7, #30]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f1a3 0208 	sub.w	r2, r3, #8
 8005006:	8bbb      	ldrh	r3, [r7, #28]
 8005008:	3314      	adds	r3, #20
 800500a:	429a      	cmp	r2, r3
 800500c:	d333      	bcc.n	8005076 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800500e:	8bfa      	ldrh	r2, [r7, #30]
 8005010:	8bbb      	ldrh	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	b29b      	uxth	r3, r3
 8005016:	3308      	adds	r3, #8
 8005018:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800501a:	8a7b      	ldrh	r3, [r7, #18]
 800501c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005020:	d106      	bne.n	8005030 <mem_malloc+0xb0>
 8005022:	4b4c      	ldr	r3, [pc, #304]	; (8005154 <mem_malloc+0x1d4>)
 8005024:	f240 3287 	movw	r2, #903	; 0x387
 8005028:	494b      	ldr	r1, [pc, #300]	; (8005158 <mem_malloc+0x1d8>)
 800502a:	484c      	ldr	r0, [pc, #304]	; (800515c <mem_malloc+0x1dc>)
 800502c:	f009 fe9c 	bl	800ed68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005030:	8a7b      	ldrh	r3, [r7, #18]
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff fd00 	bl	8004a38 <ptr_to_mem>
 8005038:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	881a      	ldrh	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8bfa      	ldrh	r2, [r7, #30]
 800504c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	8a7a      	ldrh	r2, [r7, #18]
 8005052:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2201      	movs	r2, #1
 8005058:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005062:	d00b      	beq.n	800507c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff fce5 	bl	8004a38 <ptr_to_mem>
 800506e:	4602      	mov	r2, r0
 8005070:	8a7b      	ldrh	r3, [r7, #18]
 8005072:	8053      	strh	r3, [r2, #2]
 8005074:	e002      	b.n	800507c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2201      	movs	r2, #1
 800507a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800507c:	4b34      	ldr	r3, [pc, #208]	; (8005150 <mem_malloc+0x1d0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	429a      	cmp	r2, r3
 8005084:	d127      	bne.n	80050d6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005086:	4b32      	ldr	r3, [pc, #200]	; (8005150 <mem_malloc+0x1d0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800508c:	e005      	b.n	800509a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fcd0 	bl	8004a38 <ptr_to_mem>
 8005098:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	791b      	ldrb	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <mem_malloc+0x12c>
 80050a2:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <mem_malloc+0x1e0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1f0      	bne.n	800508e <mem_malloc+0x10e>
          }
          lfree = cur;
 80050ac:	4a28      	ldr	r2, [pc, #160]	; (8005150 <mem_malloc+0x1d0>)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80050b2:	4b27      	ldr	r3, [pc, #156]	; (8005150 <mem_malloc+0x1d0>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <mem_malloc+0x1e0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d00b      	beq.n	80050d6 <mem_malloc+0x156>
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <mem_malloc+0x1d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	791b      	ldrb	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d006      	beq.n	80050d6 <mem_malloc+0x156>
 80050c8:	4b22      	ldr	r3, [pc, #136]	; (8005154 <mem_malloc+0x1d4>)
 80050ca:	f240 32b5 	movw	r2, #949	; 0x3b5
 80050ce:	4925      	ldr	r1, [pc, #148]	; (8005164 <mem_malloc+0x1e4>)
 80050d0:	4822      	ldr	r0, [pc, #136]	; (800515c <mem_malloc+0x1dc>)
 80050d2:	f009 fe49 	bl	800ed68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80050d6:	8bba      	ldrh	r2, [r7, #28]
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	4413      	add	r3, r2
 80050dc:	3308      	adds	r3, #8
 80050de:	4a20      	ldr	r2, [pc, #128]	; (8005160 <mem_malloc+0x1e0>)
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d906      	bls.n	80050f4 <mem_malloc+0x174>
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <mem_malloc+0x1d4>)
 80050e8:	f240 32b9 	movw	r2, #953	; 0x3b9
 80050ec:	491e      	ldr	r1, [pc, #120]	; (8005168 <mem_malloc+0x1e8>)
 80050ee:	481b      	ldr	r0, [pc, #108]	; (800515c <mem_malloc+0x1dc>)
 80050f0:	f009 fe3a 	bl	800ed68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d006      	beq.n	800510c <mem_malloc+0x18c>
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <mem_malloc+0x1d4>)
 8005100:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005104:	4919      	ldr	r1, [pc, #100]	; (800516c <mem_malloc+0x1ec>)
 8005106:	4815      	ldr	r0, [pc, #84]	; (800515c <mem_malloc+0x1dc>)
 8005108:	f009 fe2e 	bl	800ed68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f003 0303 	and.w	r3, r3, #3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d006      	beq.n	8005124 <mem_malloc+0x1a4>
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <mem_malloc+0x1d4>)
 8005118:	f240 32bd 	movw	r2, #957	; 0x3bd
 800511c:	4914      	ldr	r1, [pc, #80]	; (8005170 <mem_malloc+0x1f0>)
 800511e:	480f      	ldr	r0, [pc, #60]	; (800515c <mem_malloc+0x1dc>)
 8005120:	f009 fe22 	bl	800ed68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	3308      	adds	r3, #8
 8005128:	e00e      	b.n	8005148 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800512a:	8bfb      	ldrh	r3, [r7, #30]
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff fc83 	bl	8004a38 <ptr_to_mem>
 8005132:	4603      	mov	r3, r0
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005138:	8bfa      	ldrh	r2, [r7, #30]
 800513a:	8bbb      	ldrh	r3, [r7, #28]
 800513c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005140:	429a      	cmp	r2, r3
 8005142:	f4ff af44 	bcc.w	8004fce <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3720      	adds	r7, #32
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20005870 	.word	0x20005870
 8005154:	0800fbf8 	.word	0x0800fbf8
 8005158:	0800fda0 	.word	0x0800fda0
 800515c:	0800fc40 	.word	0x0800fc40
 8005160:	2000586c 	.word	0x2000586c
 8005164:	0800fdb4 	.word	0x0800fdb4
 8005168:	0800fdd0 	.word	0x0800fdd0
 800516c:	0800fe00 	.word	0x0800fe00
 8005170:	0800fe30 	.word	0x0800fe30

08005174 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	3303      	adds	r3, #3
 800518a:	f023 0303 	bic.w	r3, r3, #3
 800518e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
 8005194:	e011      	b.n	80051ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	461a      	mov	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	4413      	add	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3301      	adds	r3, #1
 80051b8:	60fb      	str	r3, [r7, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	885b      	ldrh	r3, [r3, #2]
 80051be:	461a      	mov	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4293      	cmp	r3, r2
 80051c4:	dbe7      	blt.n	8005196 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80051da:	2300      	movs	r3, #0
 80051dc:	80fb      	strh	r3, [r7, #6]
 80051de:	e009      	b.n	80051f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	4a08      	ldr	r2, [pc, #32]	; (8005204 <memp_init+0x30>)
 80051e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff ffc3 	bl	8005174 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	3301      	adds	r3, #1
 80051f2:	80fb      	strh	r3, [r7, #6]
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	2b08      	cmp	r3, #8
 80051f8:	d9f2      	bls.n	80051e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80051fa:	bf00      	nop
 80051fc:	bf00      	nop
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	08012614 	.word	0x08012614

08005208 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d012      	beq.n	8005244 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	6812      	ldr	r2, [r2, #0]
 8005226:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d006      	beq.n	8005240 <do_memp_malloc_pool+0x38>
 8005232:	4b07      	ldr	r3, [pc, #28]	; (8005250 <do_memp_malloc_pool+0x48>)
 8005234:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005238:	4906      	ldr	r1, [pc, #24]	; (8005254 <do_memp_malloc_pool+0x4c>)
 800523a:	4807      	ldr	r0, [pc, #28]	; (8005258 <do_memp_malloc_pool+0x50>)
 800523c:	f009 fd94 	bl	800ed68 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	e000      	b.n	8005246 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	0800fe54 	.word	0x0800fe54
 8005254:	0800fe84 	.word	0x0800fe84
 8005258:	0800fea8 	.word	0x0800fea8

0800525c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d106      	bne.n	8005278 <memp_malloc_pool+0x1c>
 800526a:	4b0a      	ldr	r3, [pc, #40]	; (8005294 <memp_malloc_pool+0x38>)
 800526c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005270:	4909      	ldr	r1, [pc, #36]	; (8005298 <memp_malloc_pool+0x3c>)
 8005272:	480a      	ldr	r0, [pc, #40]	; (800529c <memp_malloc_pool+0x40>)
 8005274:	f009 fd78 	bl	800ed68 <iprintf>
  if (desc == NULL) {
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <memp_malloc_pool+0x26>
    return NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	e003      	b.n	800528a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7ff ffc0 	bl	8005208 <do_memp_malloc_pool>
 8005288:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	0800fe54 	.word	0x0800fe54
 8005298:	0800fed0 	.word	0x0800fed0
 800529c:	0800fea8 	.word	0x0800fea8

080052a0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d908      	bls.n	80052c2 <memp_malloc+0x22>
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <memp_malloc+0x3c>)
 80052b2:	f240 1257 	movw	r2, #343	; 0x157
 80052b6:	490a      	ldr	r1, [pc, #40]	; (80052e0 <memp_malloc+0x40>)
 80052b8:	480a      	ldr	r0, [pc, #40]	; (80052e4 <memp_malloc+0x44>)
 80052ba:	f009 fd55 	bl	800ed68 <iprintf>
 80052be:	2300      	movs	r3, #0
 80052c0:	e008      	b.n	80052d4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <memp_malloc+0x48>)
 80052c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff ff9c 	bl	8005208 <do_memp_malloc_pool>
 80052d0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80052d2:	68fb      	ldr	r3, [r7, #12]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	0800fe54 	.word	0x0800fe54
 80052e0:	0800fee4 	.word	0x0800fee4
 80052e4:	0800fea8 	.word	0x0800fea8
 80052e8:	08012614 	.word	0x08012614

080052ec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d006      	beq.n	800530e <do_memp_free_pool+0x22>
 8005300:	4b0a      	ldr	r3, [pc, #40]	; (800532c <do_memp_free_pool+0x40>)
 8005302:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005306:	490a      	ldr	r1, [pc, #40]	; (8005330 <do_memp_free_pool+0x44>)
 8005308:	480a      	ldr	r0, [pc, #40]	; (8005334 <do_memp_free_pool+0x48>)
 800530a:	f009 fd2d 	bl	800ed68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	0800fe54 	.word	0x0800fe54
 8005330:	0800ff04 	.word	0x0800ff04
 8005334:	0800fea8 	.word	0x0800fea8

08005338 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d106      	bne.n	8005356 <memp_free_pool+0x1e>
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <memp_free_pool+0x3c>)
 800534a:	f240 1295 	movw	r2, #405	; 0x195
 800534e:	490a      	ldr	r1, [pc, #40]	; (8005378 <memp_free_pool+0x40>)
 8005350:	480a      	ldr	r0, [pc, #40]	; (800537c <memp_free_pool+0x44>)
 8005352:	f009 fd09 	bl	800ed68 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <memp_free_pool+0x34>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d004      	beq.n	800536c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005362:	6839      	ldr	r1, [r7, #0]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ffc1 	bl	80052ec <do_memp_free_pool>
 800536a:	e000      	b.n	800536e <memp_free_pool+0x36>
    return;
 800536c:	bf00      	nop
}
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	0800fe54 	.word	0x0800fe54
 8005378:	0800fed0 	.word	0x0800fed0
 800537c:	0800fea8 	.word	0x0800fea8

08005380 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	2b08      	cmp	r3, #8
 8005390:	d907      	bls.n	80053a2 <memp_free+0x22>
 8005392:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <memp_free+0x44>)
 8005394:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005398:	490b      	ldr	r1, [pc, #44]	; (80053c8 <memp_free+0x48>)
 800539a:	480c      	ldr	r0, [pc, #48]	; (80053cc <memp_free+0x4c>)
 800539c:	f009 fce4 	bl	800ed68 <iprintf>
 80053a0:	e00c      	b.n	80053bc <memp_free+0x3c>

  if (mem == NULL) {
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <memp_free+0x50>)
 80053ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff ff9a 	bl	80052ec <do_memp_free_pool>
 80053b8:	e000      	b.n	80053bc <memp_free+0x3c>
    return;
 80053ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	0800fe54 	.word	0x0800fe54
 80053c8:	0800ff24 	.word	0x0800ff24
 80053cc:	0800fea8 	.word	0x0800fea8
 80053d0:	08012614 	.word	0x08012614

080053d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80053d8:	bf00      	nop
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
	...

080053e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <netif_add+0x26>
 80053f8:	4b57      	ldr	r3, [pc, #348]	; (8005558 <netif_add+0x174>)
 80053fa:	f240 1227 	movw	r2, #295	; 0x127
 80053fe:	4957      	ldr	r1, [pc, #348]	; (800555c <netif_add+0x178>)
 8005400:	4857      	ldr	r0, [pc, #348]	; (8005560 <netif_add+0x17c>)
 8005402:	f009 fcb1 	bl	800ed68 <iprintf>
 8005406:	2300      	movs	r3, #0
 8005408:	e0a2      	b.n	8005550 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	2b00      	cmp	r3, #0
 800540e:	d108      	bne.n	8005422 <netif_add+0x3e>
 8005410:	4b51      	ldr	r3, [pc, #324]	; (8005558 <netif_add+0x174>)
 8005412:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005416:	4953      	ldr	r1, [pc, #332]	; (8005564 <netif_add+0x180>)
 8005418:	4851      	ldr	r0, [pc, #324]	; (8005560 <netif_add+0x17c>)
 800541a:	f009 fca5 	bl	800ed68 <iprintf>
 800541e:	2300      	movs	r3, #0
 8005420:	e096      	b.n	8005550 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005428:	4b4f      	ldr	r3, [pc, #316]	; (8005568 <netif_add+0x184>)
 800542a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005432:	4b4d      	ldr	r3, [pc, #308]	; (8005568 <netif_add+0x184>)
 8005434:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800543c:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <netif_add+0x184>)
 800543e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4a45      	ldr	r2, [pc, #276]	; (800556c <netif_add+0x188>)
 8005456:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a3a      	ldr	r2, [r7, #32]
 8005470:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005472:	4b3f      	ldr	r3, [pc, #252]	; (8005570 <netif_add+0x18c>)
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005480:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f913 	bl	80056b4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	4798      	blx	r3
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <netif_add+0xba>
    return NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	e058      	b.n	8005550 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054a4:	2bff      	cmp	r3, #255	; 0xff
 80054a6:	d103      	bne.n	80054b0 <netif_add+0xcc>
        netif->num = 0;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80054b4:	4b2f      	ldr	r3, [pc, #188]	; (8005574 <netif_add+0x190>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e02b      	b.n	8005514 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d106      	bne.n	80054d2 <netif_add+0xee>
 80054c4:	4b24      	ldr	r3, [pc, #144]	; (8005558 <netif_add+0x174>)
 80054c6:	f240 128b 	movw	r2, #395	; 0x18b
 80054ca:	492b      	ldr	r1, [pc, #172]	; (8005578 <netif_add+0x194>)
 80054cc:	4824      	ldr	r0, [pc, #144]	; (8005560 <netif_add+0x17c>)
 80054ce:	f009 fc4b 	bl	800ed68 <iprintf>
        num_netifs++;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3301      	adds	r3, #1
 80054d6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	2bff      	cmp	r3, #255	; 0xff
 80054dc:	dd06      	ble.n	80054ec <netif_add+0x108>
 80054de:	4b1e      	ldr	r3, [pc, #120]	; (8005558 <netif_add+0x174>)
 80054e0:	f240 128d 	movw	r2, #397	; 0x18d
 80054e4:	4925      	ldr	r1, [pc, #148]	; (800557c <netif_add+0x198>)
 80054e6:	481e      	ldr	r0, [pc, #120]	; (8005560 <netif_add+0x17c>)
 80054e8:	f009 fc3e 	bl	800ed68 <iprintf>
        if (netif2->num == netif->num) {
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d108      	bne.n	800550e <netif_add+0x12a>
          netif->num++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005502:	3301      	adds	r3, #1
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800550c:	e005      	b.n	800551a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d1d0      	bne.n	80054bc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1be      	bne.n	800549e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005526:	2bfe      	cmp	r3, #254	; 0xfe
 8005528:	d103      	bne.n	8005532 <netif_add+0x14e>
    netif_num = 0;
 800552a:	4b11      	ldr	r3, [pc, #68]	; (8005570 <netif_add+0x18c>)
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e006      	b.n	8005540 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005538:	3301      	adds	r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <netif_add+0x18c>)
 800553e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005540:	4b0c      	ldr	r3, [pc, #48]	; (8005574 <netif_add+0x190>)
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005548:	4a0a      	ldr	r2, [pc, #40]	; (8005574 <netif_add+0x190>)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800554e:	68fb      	ldr	r3, [r7, #12]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	0800ff40 	.word	0x0800ff40
 800555c:	0800ffd4 	.word	0x0800ffd4
 8005560:	0800ff90 	.word	0x0800ff90
 8005564:	0800fff0 	.word	0x0800fff0
 8005568:	08012678 	.word	0x08012678
 800556c:	0800598f 	.word	0x0800598f
 8005570:	20008768 	.word	0x20008768
 8005574:	20008760 	.word	0x20008760
 8005578:	08010014 	.word	0x08010014
 800557c:	08010028 	.word	0x08010028

08005580 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f002 fb53 	bl	8007c38 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f006 fff1 	bl	800c57c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <netif_do_set_ipaddr+0x20>
 80055b6:	4b1d      	ldr	r3, [pc, #116]	; (800562c <netif_do_set_ipaddr+0x88>)
 80055b8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80055bc:	491c      	ldr	r1, [pc, #112]	; (8005630 <netif_do_set_ipaddr+0x8c>)
 80055be:	481d      	ldr	r0, [pc, #116]	; (8005634 <netif_do_set_ipaddr+0x90>)
 80055c0:	f009 fbd2 	bl	800ed68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <netif_do_set_ipaddr+0x34>
 80055ca:	4b18      	ldr	r3, [pc, #96]	; (800562c <netif_do_set_ipaddr+0x88>)
 80055cc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80055d0:	4917      	ldr	r1, [pc, #92]	; (8005630 <netif_do_set_ipaddr+0x8c>)
 80055d2:	4818      	ldr	r0, [pc, #96]	; (8005634 <netif_do_set_ipaddr+0x90>)
 80055d4:	f009 fbc8 	bl	800ed68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3304      	adds	r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d01c      	beq.n	8005620 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3304      	adds	r3, #4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80055f6:	f107 0314 	add.w	r3, r7, #20
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ffbf 	bl	8005580 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <netif_do_set_ipaddr+0x6a>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	e000      	b.n	8005610 <netif_do_set_ipaddr+0x6c>
 800560e:	2300      	movs	r3, #0
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005614:	2101      	movs	r1, #1
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 f8d2 	bl	80057c0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	0800ff40 	.word	0x0800ff40
 8005630:	08010058 	.word	0x08010058
 8005634:	0800ff90 	.word	0x0800ff90

08005638 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3308      	adds	r3, #8
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d00a      	beq.n	8005668 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <netif_do_set_netmask+0x26>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	e000      	b.n	8005660 <netif_do_set_netmask+0x28>
 800565e:	2300      	movs	r3, #0
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005676:	b480      	push	{r7}
 8005678:	b085      	sub	sp, #20
 800567a:	af00      	add	r7, sp, #0
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	330c      	adds	r3, #12
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d00a      	beq.n	80056a6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <netif_do_set_gw+0x26>
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	e000      	b.n	800569e <netif_do_set_gw+0x28>
 800569c:	2300      	movs	r3, #0
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d101      	bne.n	80056d4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80056d0:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <netif_set_addr+0x90>)
 80056d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80056da:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <netif_set_addr+0x90>)
 80056dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80056e4:	4b17      	ldr	r3, [pc, #92]	; (8005744 <netif_set_addr+0x90>)
 80056e6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <netif_set_addr+0x42>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <netif_set_addr+0x46>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <netif_set_addr+0x48>
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d006      	beq.n	8005712 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005704:	f107 0310 	add.w	r3, r7, #16
 8005708:	461a      	mov	r2, r3
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff ff49 	bl	80055a4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	6879      	ldr	r1, [r7, #4]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff ff8e 	bl	8005638 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff ffa8 	bl	8005676 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800572c:	f107 0310 	add.w	r3, r7, #16
 8005730:	461a      	mov	r2, r3
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f7ff ff35 	bl	80055a4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800573a:	bf00      	nop
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	08012678 	.word	0x08012678

08005748 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005750:	4a04      	ldr	r2, [pc, #16]	; (8005764 <netif_set_default+0x1c>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20008764 	.word	0x20008764

08005768 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d107      	bne.n	8005786 <netif_set_up+0x1e>
 8005776:	4b0f      	ldr	r3, [pc, #60]	; (80057b4 <netif_set_up+0x4c>)
 8005778:	f44f 7254 	mov.w	r2, #848	; 0x350
 800577c:	490e      	ldr	r1, [pc, #56]	; (80057b8 <netif_set_up+0x50>)
 800577e:	480f      	ldr	r0, [pc, #60]	; (80057bc <netif_set_up+0x54>)
 8005780:	f009 faf2 	bl	800ed68 <iprintf>
 8005784:	e013      	b.n	80057ae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10c      	bne.n	80057ae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800579a:	f043 0301 	orr.w	r3, r3, #1
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80057a6:	2103      	movs	r1, #3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f809 	bl	80057c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	0800ff40 	.word	0x0800ff40
 80057b8:	080100c8 	.word	0x080100c8
 80057bc:	0800ff90 	.word	0x0800ff90

080057c0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	460b      	mov	r3, r1
 80057ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <netif_issue_reports+0x20>
 80057d2:	4b18      	ldr	r3, [pc, #96]	; (8005834 <netif_issue_reports+0x74>)
 80057d4:	f240 326d 	movw	r2, #877	; 0x36d
 80057d8:	4917      	ldr	r1, [pc, #92]	; (8005838 <netif_issue_reports+0x78>)
 80057da:	4818      	ldr	r0, [pc, #96]	; (800583c <netif_issue_reports+0x7c>)
 80057dc:	f009 fac4 	bl	800ed68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d01e      	beq.n	800582c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80057f4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d017      	beq.n	800582c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d013      	beq.n	800582e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3304      	adds	r3, #4
 800580a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00e      	beq.n	800582e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d007      	beq.n	800582e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	3304      	adds	r3, #4
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f007 fe13 	bl	800d450 <etharp_request>
 800582a:	e000      	b.n	800582e <netif_issue_reports+0x6e>
    return;
 800582c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	0800ff40 	.word	0x0800ff40
 8005838:	080100e4 	.word	0x080100e4
 800583c:	0800ff90 	.word	0x0800ff90

08005840 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d107      	bne.n	800585e <netif_set_down+0x1e>
 800584e:	4b12      	ldr	r3, [pc, #72]	; (8005898 <netif_set_down+0x58>)
 8005850:	f240 329b 	movw	r2, #923	; 0x39b
 8005854:	4911      	ldr	r1, [pc, #68]	; (800589c <netif_set_down+0x5c>)
 8005856:	4812      	ldr	r0, [pc, #72]	; (80058a0 <netif_set_down+0x60>)
 8005858:	f009 fa86 	bl	800ed68 <iprintf>
 800585c:	e019      	b.n	8005892 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d012      	beq.n	8005892 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005872:	f023 0301 	bic.w	r3, r3, #1
 8005876:	b2da      	uxtb	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f007 f99d 	bl	800cbcc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	0800ff40 	.word	0x0800ff40
 800589c:	08010108 	.word	0x08010108
 80058a0:	0800ff90 	.word	0x0800ff90

080058a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <netif_set_link_up+0x1e>
 80058b2:	4b13      	ldr	r3, [pc, #76]	; (8005900 <netif_set_link_up+0x5c>)
 80058b4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80058b8:	4912      	ldr	r1, [pc, #72]	; (8005904 <netif_set_link_up+0x60>)
 80058ba:	4813      	ldr	r0, [pc, #76]	; (8005908 <netif_set_link_up+0x64>)
 80058bc:	f009 fa54 	bl	800ed68 <iprintf>
 80058c0:	e01b      	b.n	80058fa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d114      	bne.n	80058fa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058d6:	f043 0304 	orr.w	r3, r3, #4
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80058e2:	2103      	movs	r1, #3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff ff6b 	bl	80057c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <netif_set_link_up+0x56>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	0800ff40 	.word	0x0800ff40
 8005904:	08010128 	.word	0x08010128
 8005908:	0800ff90 	.word	0x0800ff90

0800590c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d107      	bne.n	800592a <netif_set_link_down+0x1e>
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <netif_set_link_down+0x54>)
 800591c:	f240 4206 	movw	r2, #1030	; 0x406
 8005920:	4910      	ldr	r1, [pc, #64]	; (8005964 <netif_set_link_down+0x58>)
 8005922:	4811      	ldr	r0, [pc, #68]	; (8005968 <netif_set_link_down+0x5c>)
 8005924:	f009 fa20 	bl	800ed68 <iprintf>
 8005928:	e017      	b.n	800595a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005930:	f003 0304 	and.w	r3, r3, #4
 8005934:	2b00      	cmp	r3, #0
 8005936:	d010      	beq.n	800595a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800593e:	f023 0304 	bic.w	r3, r3, #4
 8005942:	b2da      	uxtb	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <netif_set_link_down+0x4e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	0800ff40 	.word	0x0800ff40
 8005964:	0801014c 	.word	0x0801014c
 8005968:	0800ff90 	.word	0x0800ff90

0800596c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	61da      	str	r2, [r3, #28]
  }
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800599a:	f06f 030b 	mvn.w	r3, #11
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
	...

080059ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d013      	beq.n	80059e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80059bc:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <netif_get_by_index+0x48>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e00c      	b.n	80059de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80059ca:	3301      	adds	r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	79fa      	ldrb	r2, [r7, #7]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d101      	bne.n	80059d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	e006      	b.n	80059e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1ef      	bne.n	80059c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3714      	adds	r7, #20
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	20008760 	.word	0x20008760

080059f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <pbuf_free_ooseq+0x38>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a04:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <pbuf_free_ooseq+0x3c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	607b      	str	r3, [r7, #4]
 8005a0a:	e00a      	b.n	8005a22 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f002 f94d 	bl	8007cb4 <tcp_free_ooseq>
      return;
 8005a1a:	e005      	b.n	8005a28 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	607b      	str	r3, [r7, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1f1      	bne.n	8005a0c <pbuf_free_ooseq+0x14>
    }
  }
}
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20008769 	.word	0x20008769
 8005a34:	20008778 	.word	0x20008778

08005a38 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005a3c:	4b03      	ldr	r3, [pc, #12]	; (8005a4c <pbuf_pool_is_empty+0x14>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005a42:	bf00      	nop
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr
 8005a4c:	20008769 	.word	0x20008769

08005a50 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	460b      	mov	r3, r1
 8005a60:	80fb      	strh	r3, [r7, #6]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	88fa      	ldrh	r2, [r7, #6]
 8005a76:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	88ba      	ldrh	r2, [r7, #4]
 8005a7c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005a7e:	8b3b      	ldrh	r3, [r7, #24]
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	7f3a      	ldrb	r2, [r7, #28]
 8005a8a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	73da      	strb	r2, [r3, #15]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08c      	sub	sp, #48	; 0x30
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	80bb      	strh	r3, [r7, #4]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005aba:	887b      	ldrh	r3, [r7, #2]
 8005abc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005ac0:	d07f      	beq.n	8005bc2 <pbuf_alloc+0x11e>
 8005ac2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005ac6:	f300 80c8 	bgt.w	8005c5a <pbuf_alloc+0x1b6>
 8005aca:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005ace:	d010      	beq.n	8005af2 <pbuf_alloc+0x4e>
 8005ad0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005ad4:	f300 80c1 	bgt.w	8005c5a <pbuf_alloc+0x1b6>
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d002      	beq.n	8005ae2 <pbuf_alloc+0x3e>
 8005adc:	2b41      	cmp	r3, #65	; 0x41
 8005ade:	f040 80bc 	bne.w	8005c5a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005ae2:	887a      	ldrh	r2, [r7, #2]
 8005ae4:	88bb      	ldrh	r3, [r7, #4]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f000 f8d1 	bl	8005c90 <pbuf_alloc_reference>
 8005aee:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005af0:	e0bd      	b.n	8005c6e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005afa:	88bb      	ldrh	r3, [r7, #4]
 8005afc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005afe:	2008      	movs	r0, #8
 8005b00:	f7ff fbce 	bl	80052a0 <memp_malloc>
 8005b04:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d109      	bne.n	8005b20 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005b0c:	f7ff ff94 	bl	8005a38 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b18:	f000 faa8 	bl	800606c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e0a7      	b.n	8005c70 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b22:	3303      	adds	r3, #3
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f023 0303 	bic.w	r3, r3, #3
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	8b7a      	ldrh	r2, [r7, #26]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	bf28      	it	cs
 8005b38:	4613      	movcs	r3, r2
 8005b3a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005b3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b3e:	3310      	adds	r3, #16
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4413      	add	r3, r2
 8005b44:	3303      	adds	r3, #3
 8005b46:	f023 0303 	bic.w	r3, r3, #3
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	89f9      	ldrh	r1, [r7, #14]
 8005b4e:	8b7a      	ldrh	r2, [r7, #26]
 8005b50:	2300      	movs	r3, #0
 8005b52:	9301      	str	r3, [sp, #4]
 8005b54:	887b      	ldrh	r3, [r7, #2]
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4601      	mov	r1, r0
 8005b5c:	6938      	ldr	r0, [r7, #16]
 8005b5e:	f7ff ff77 	bl	8005a50 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f003 0303 	and.w	r3, r3, #3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d006      	beq.n	8005b7c <pbuf_alloc+0xd8>
 8005b6e:	4b42      	ldr	r3, [pc, #264]	; (8005c78 <pbuf_alloc+0x1d4>)
 8005b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b74:	4941      	ldr	r1, [pc, #260]	; (8005c7c <pbuf_alloc+0x1d8>)
 8005b76:	4842      	ldr	r0, [pc, #264]	; (8005c80 <pbuf_alloc+0x1dc>)
 8005b78:	f009 f8f6 	bl	800ed68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005b7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b7e:	3303      	adds	r3, #3
 8005b80:	f023 0303 	bic.w	r3, r3, #3
 8005b84:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005b88:	d106      	bne.n	8005b98 <pbuf_alloc+0xf4>
 8005b8a:	4b3b      	ldr	r3, [pc, #236]	; (8005c78 <pbuf_alloc+0x1d4>)
 8005b8c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005b90:	493c      	ldr	r1, [pc, #240]	; (8005c84 <pbuf_alloc+0x1e0>)
 8005b92:	483b      	ldr	r0, [pc, #236]	; (8005c80 <pbuf_alloc+0x1dc>)
 8005b94:	f009 f8e8 	bl	800ed68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba2:	e002      	b.n	8005baa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005bae:	8b7a      	ldrh	r2, [r7, #26]
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005bba:	8b7b      	ldrh	r3, [r7, #26]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d19e      	bne.n	8005afe <pbuf_alloc+0x5a>
      break;
 8005bc0:	e055      	b.n	8005c6e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005bc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bc4:	3303      	adds	r3, #3
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f023 0303 	bic.w	r3, r3, #3
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	88bb      	ldrh	r3, [r7, #4]
 8005bd0:	3303      	adds	r3, #3
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f023 0303 	bic.w	r3, r3, #3
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	4413      	add	r3, r2
 8005bdc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005bde:	8b3b      	ldrh	r3, [r7, #24]
 8005be0:	3310      	adds	r3, #16
 8005be2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005be4:	8b3a      	ldrh	r2, [r7, #24]
 8005be6:	88bb      	ldrh	r3, [r7, #4]
 8005be8:	3303      	adds	r3, #3
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d306      	bcc.n	8005c00 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005bf2:	8afa      	ldrh	r2, [r7, #22]
 8005bf4:	88bb      	ldrh	r3, [r7, #4]
 8005bf6:	3303      	adds	r3, #3
 8005bf8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d201      	bcs.n	8005c04 <pbuf_alloc+0x160>
        return NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e035      	b.n	8005c70 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005c04:	8afb      	ldrh	r3, [r7, #22]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff f9ba 	bl	8004f80 <mem_malloc>
 8005c0c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <pbuf_alloc+0x174>
        return NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e02b      	b.n	8005c70 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005c18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c1a:	3310      	adds	r3, #16
 8005c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1e:	4413      	add	r3, r2
 8005c20:	3303      	adds	r3, #3
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	4618      	mov	r0, r3
 8005c28:	88b9      	ldrh	r1, [r7, #4]
 8005c2a:	88ba      	ldrh	r2, [r7, #4]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9301      	str	r3, [sp, #4]
 8005c30:	887b      	ldrh	r3, [r7, #2]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	460b      	mov	r3, r1
 8005c36:	4601      	mov	r1, r0
 8005c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c3a:	f7ff ff09 	bl	8005a50 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <pbuf_alloc+0x1c8>
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <pbuf_alloc+0x1d4>)
 8005c4c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005c50:	490d      	ldr	r1, [pc, #52]	; (8005c88 <pbuf_alloc+0x1e4>)
 8005c52:	480b      	ldr	r0, [pc, #44]	; (8005c80 <pbuf_alloc+0x1dc>)
 8005c54:	f009 f888 	bl	800ed68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005c58:	e008      	b.n	8005c6c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005c5a:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <pbuf_alloc+0x1d4>)
 8005c5c:	f240 1227 	movw	r2, #295	; 0x127
 8005c60:	490a      	ldr	r1, [pc, #40]	; (8005c8c <pbuf_alloc+0x1e8>)
 8005c62:	4807      	ldr	r0, [pc, #28]	; (8005c80 <pbuf_alloc+0x1dc>)
 8005c64:	f009 f880 	bl	800ed68 <iprintf>
      return NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e001      	b.n	8005c70 <pbuf_alloc+0x1cc>
      break;
 8005c6c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3728      	adds	r7, #40	; 0x28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	08010170 	.word	0x08010170
 8005c7c:	080101a0 	.word	0x080101a0
 8005c80:	080101d0 	.word	0x080101d0
 8005c84:	080101f8 	.word	0x080101f8
 8005c88:	0801022c 	.word	0x0801022c
 8005c8c:	08010258 	.word	0x08010258

08005c90 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	460b      	mov	r3, r1
 8005c9a:	807b      	strh	r3, [r7, #2]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005ca0:	883b      	ldrh	r3, [r7, #0]
 8005ca2:	2b41      	cmp	r3, #65	; 0x41
 8005ca4:	d009      	beq.n	8005cba <pbuf_alloc_reference+0x2a>
 8005ca6:	883b      	ldrh	r3, [r7, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d006      	beq.n	8005cba <pbuf_alloc_reference+0x2a>
 8005cac:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <pbuf_alloc_reference+0x5c>)
 8005cae:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005cb2:	490f      	ldr	r1, [pc, #60]	; (8005cf0 <pbuf_alloc_reference+0x60>)
 8005cb4:	480f      	ldr	r0, [pc, #60]	; (8005cf4 <pbuf_alloc_reference+0x64>)
 8005cb6:	f009 f857 	bl	800ed68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005cba:	2007      	movs	r0, #7
 8005cbc:	f7ff faf0 	bl	80052a0 <memp_malloc>
 8005cc0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e00b      	b.n	8005ce4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005ccc:	8879      	ldrh	r1, [r7, #2]
 8005cce:	887a      	ldrh	r2, [r7, #2]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	883b      	ldrh	r3, [r7, #0]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff feb7 	bl	8005a50 <pbuf_init_alloced_pbuf>
  return p;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	08010170 	.word	0x08010170
 8005cf0:	08010274 	.word	0x08010274
 8005cf4:	080101d0 	.word	0x080101d0

08005cf8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]
 8005d04:	460b      	mov	r3, r1
 8005d06:	81bb      	strh	r3, [r7, #12]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005d10:	8a7b      	ldrh	r3, [r7, #18]
 8005d12:	3303      	adds	r3, #3
 8005d14:	f023 0203 	bic.w	r2, r3, #3
 8005d18:	89bb      	ldrh	r3, [r7, #12]
 8005d1a:	441a      	add	r2, r3
 8005d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d901      	bls.n	8005d26 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	e018      	b.n	8005d58 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d007      	beq.n	8005d3c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005d2c:	8a7b      	ldrh	r3, [r7, #18]
 8005d2e:	3303      	adds	r3, #3
 8005d30:	f023 0303 	bic.w	r3, r3, #3
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	4413      	add	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	e001      	b.n	8005d40 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	89b9      	ldrh	r1, [r7, #12]
 8005d44:	89ba      	ldrh	r2, [r7, #12]
 8005d46:	2302      	movs	r3, #2
 8005d48:	9301      	str	r3, [sp, #4]
 8005d4a:	897b      	ldrh	r3, [r7, #10]
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	6979      	ldr	r1, [r7, #20]
 8005d52:	f7ff fe7d 	bl	8005a50 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005d56:	687b      	ldr	r3, [r7, #4]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <pbuf_realloc+0x20>
 8005d72:	4b3a      	ldr	r3, [pc, #232]	; (8005e5c <pbuf_realloc+0xfc>)
 8005d74:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005d78:	4939      	ldr	r1, [pc, #228]	; (8005e60 <pbuf_realloc+0x100>)
 8005d7a:	483a      	ldr	r0, [pc, #232]	; (8005e64 <pbuf_realloc+0x104>)
 8005d7c:	f008 fff4 	bl	800ed68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	891b      	ldrh	r3, [r3, #8]
 8005d84:	887a      	ldrh	r2, [r7, #2]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d263      	bcs.n	8005e52 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	891a      	ldrh	r2, [r3, #8]
 8005d8e:	887b      	ldrh	r3, [r7, #2]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005d94:	887b      	ldrh	r3, [r7, #2]
 8005d96:	817b      	strh	r3, [r7, #10]
  q = p;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005d9c:	e018      	b.n	8005dd0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	895b      	ldrh	r3, [r3, #10]
 8005da2:	897a      	ldrh	r2, [r7, #10]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	891a      	ldrh	r2, [r3, #8]
 8005dac:	893b      	ldrh	r3, [r7, #8]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <pbuf_realloc+0x70>
 8005dc2:	4b26      	ldr	r3, [pc, #152]	; (8005e5c <pbuf_realloc+0xfc>)
 8005dc4:	f240 12af 	movw	r2, #431	; 0x1af
 8005dc8:	4927      	ldr	r1, [pc, #156]	; (8005e68 <pbuf_realloc+0x108>)
 8005dca:	4826      	ldr	r0, [pc, #152]	; (8005e64 <pbuf_realloc+0x104>)
 8005dcc:	f008 ffcc 	bl	800ed68 <iprintf>
  while (rem_len > q->len) {
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	895b      	ldrh	r3, [r3, #10]
 8005dd4:	897a      	ldrh	r2, [r7, #10]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d8e1      	bhi.n	8005d9e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	7b1b      	ldrb	r3, [r3, #12]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d121      	bne.n	8005e2a <pbuf_realloc+0xca>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	895b      	ldrh	r3, [r3, #10]
 8005dea:	897a      	ldrh	r2, [r7, #10]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d01c      	beq.n	8005e2a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	7b5b      	ldrb	r3, [r3, #13]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d116      	bne.n	8005e2a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	897b      	ldrh	r3, [r7, #10]
 8005e08:	4413      	add	r3, r2
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7fe ffba 	bl	8004d88 <mem_trim>
 8005e14:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <pbuf_realloc+0xca>
 8005e1c:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <pbuf_realloc+0xfc>)
 8005e1e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005e22:	4912      	ldr	r1, [pc, #72]	; (8005e6c <pbuf_realloc+0x10c>)
 8005e24:	480f      	ldr	r0, [pc, #60]	; (8005e64 <pbuf_realloc+0x104>)
 8005e26:	f008 ff9f 	bl	800ed68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	897a      	ldrh	r2, [r7, #10]
 8005e2e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	895a      	ldrh	r2, [r3, #10]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 f911 	bl	800606c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	e000      	b.n	8005e54 <pbuf_realloc+0xf4>
    return;
 8005e52:	bf00      	nop

}
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	08010170 	.word	0x08010170
 8005e60:	08010288 	.word	0x08010288
 8005e64:	080101d0 	.word	0x080101d0
 8005e68:	080102a0 	.word	0x080102a0
 8005e6c:	080102b8 	.word	0x080102b8

08005e70 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <pbuf_add_header_impl+0x22>
 8005e84:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <pbuf_add_header_impl+0xc4>)
 8005e86:	f240 12df 	movw	r2, #479	; 0x1df
 8005e8a:	492b      	ldr	r1, [pc, #172]	; (8005f38 <pbuf_add_header_impl+0xc8>)
 8005e8c:	482b      	ldr	r0, [pc, #172]	; (8005f3c <pbuf_add_header_impl+0xcc>)
 8005e8e:	f008 ff6b 	bl	800ed68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <pbuf_add_header_impl+0x30>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9e:	d301      	bcc.n	8005ea4 <pbuf_add_header_impl+0x34>
    return 1;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e043      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <pbuf_add_header_impl+0x3e>
    return 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e03e      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	891a      	ldrh	r2, [r3, #8]
 8005eb6:	8a7b      	ldrh	r3, [r7, #18]
 8005eb8:	4413      	add	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8a7a      	ldrh	r2, [r7, #18]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d901      	bls.n	8005ec6 <pbuf_add_header_impl+0x56>
    return 1;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e032      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	7b1b      	ldrb	r3, [r3, #12]
 8005eca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005ecc:	8a3b      	ldrh	r3, [r7, #16]
 8005ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00c      	beq.n	8005ef0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	425b      	negs	r3, r3
 8005ede:	4413      	add	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3310      	adds	r3, #16
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d20d      	bcs.n	8005f08 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e01d      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	425b      	negs	r3, r3
 8005efe:	4413      	add	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	e001      	b.n	8005f08 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e011      	b.n	8005f2c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	895a      	ldrh	r2, [r3, #10]
 8005f12:	8a7b      	ldrh	r3, [r7, #18]
 8005f14:	4413      	add	r3, r2
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	891a      	ldrh	r2, [r3, #8]
 8005f20:	8a7b      	ldrh	r3, [r7, #18]
 8005f22:	4413      	add	r3, r2
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	811a      	strh	r2, [r3, #8]


  return 0;
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3718      	adds	r7, #24
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	08010170 	.word	0x08010170
 8005f38:	080102d4 	.word	0x080102d4
 8005f3c:	080101d0 	.word	0x080101d0

08005f40 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	6839      	ldr	r1, [r7, #0]
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff ff8e 	bl	8005e70 <pbuf_add_header_impl>
 8005f54:	4603      	mov	r3, r0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <pbuf_remove_header+0x1e>
 8005f70:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <pbuf_remove_header+0x94>)
 8005f72:	f240 224b 	movw	r2, #587	; 0x24b
 8005f76:	4920      	ldr	r1, [pc, #128]	; (8005ff8 <pbuf_remove_header+0x98>)
 8005f78:	4820      	ldr	r0, [pc, #128]	; (8005ffc <pbuf_remove_header+0x9c>)
 8005f7a:	f008 fef5 	bl	800ed68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <pbuf_remove_header+0x2c>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8a:	d301      	bcc.n	8005f90 <pbuf_remove_header+0x30>
    return 1;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e02c      	b.n	8005fea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <pbuf_remove_header+0x3a>
    return 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	e027      	b.n	8005fea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	895b      	ldrh	r3, [r3, #10]
 8005fa2:	89fa      	ldrh	r2, [r7, #14]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d908      	bls.n	8005fba <pbuf_remove_header+0x5a>
 8005fa8:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <pbuf_remove_header+0x94>)
 8005faa:	f240 2255 	movw	r2, #597	; 0x255
 8005fae:	4914      	ldr	r1, [pc, #80]	; (8006000 <pbuf_remove_header+0xa0>)
 8005fb0:	4812      	ldr	r0, [pc, #72]	; (8005ffc <pbuf_remove_header+0x9c>)
 8005fb2:	f008 fed9 	bl	800ed68 <iprintf>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e017      	b.n	8005fea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	441a      	add	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	895a      	ldrh	r2, [r3, #10]
 8005fd0:	89fb      	ldrh	r3, [r7, #14]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	891a      	ldrh	r2, [r3, #8]
 8005fde:	89fb      	ldrh	r3, [r7, #14]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	08010170 	.word	0x08010170
 8005ff8:	080102d4 	.word	0x080102d4
 8005ffc:	080101d0 	.word	0x080101d0
 8006000:	080102e0 	.word	0x080102e0

08006004 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	807b      	strh	r3, [r7, #2]
 8006010:	4613      	mov	r3, r2
 8006012:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006014:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006018:	2b00      	cmp	r3, #0
 800601a:	da08      	bge.n	800602e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800601c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006020:	425b      	negs	r3, r3
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff ff9b 	bl	8005f60 <pbuf_remove_header>
 800602a:	4603      	mov	r3, r0
 800602c:	e007      	b.n	800603e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800602e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006032:	787a      	ldrb	r2, [r7, #1]
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff ff1a 	bl	8005e70 <pbuf_add_header_impl>
 800603c:	4603      	mov	r3, r0
  }
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b082      	sub	sp, #8
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006052:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006056:	2201      	movs	r2, #1
 8006058:	4619      	mov	r1, r3
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff ffd2 	bl	8006004 <pbuf_header_impl>
 8006060:	4603      	mov	r3, r0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3708      	adds	r7, #8
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d106      	bne.n	800608e <pbuf_free+0x22>
 8006080:	4b38      	ldr	r3, [pc, #224]	; (8006164 <pbuf_free+0xf8>)
 8006082:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006086:	4938      	ldr	r1, [pc, #224]	; (8006168 <pbuf_free+0xfc>)
 8006088:	4838      	ldr	r0, [pc, #224]	; (800616c <pbuf_free+0x100>)
 800608a:	f008 fe6d 	bl	800ed68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800608e:	2300      	movs	r3, #0
 8006090:	e063      	b.n	800615a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006096:	e05c      	b.n	8006152 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7b9b      	ldrb	r3, [r3, #14]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <pbuf_free+0x42>
 80060a0:	4b30      	ldr	r3, [pc, #192]	; (8006164 <pbuf_free+0xf8>)
 80060a2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80060a6:	4932      	ldr	r1, [pc, #200]	; (8006170 <pbuf_free+0x104>)
 80060a8:	4830      	ldr	r0, [pc, #192]	; (800616c <pbuf_free+0x100>)
 80060aa:	f008 fe5d 	bl	800ed68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7b9b      	ldrb	r3, [r3, #14]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	739a      	strb	r2, [r3, #14]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	7b9b      	ldrb	r3, [r3, #14]
 80060be:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80060c0:	7dbb      	ldrb	r3, [r7, #22]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d143      	bne.n	800614e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	7b1b      	ldrb	r3, [r3, #12]
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	7b5b      	ldrb	r3, [r3, #13]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d011      	beq.n	8006106 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <pbuf_free+0x90>
 80060ee:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <pbuf_free+0xf8>)
 80060f0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80060f4:	491f      	ldr	r1, [pc, #124]	; (8006174 <pbuf_free+0x108>)
 80060f6:	481d      	ldr	r0, [pc, #116]	; (800616c <pbuf_free+0x100>)
 80060f8:	f008 fe36 	bl	800ed68 <iprintf>
        pc->custom_free_function(p);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691b      	ldr	r3, [r3, #16]
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
 8006104:	e01d      	b.n	8006142 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d104      	bne.n	8006116 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	2008      	movs	r0, #8
 8006110:	f7ff f936 	bl	8005380 <memp_free>
 8006114:	e015      	b.n	8006142 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d104      	bne.n	8006126 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800611c:	6879      	ldr	r1, [r7, #4]
 800611e:	2007      	movs	r0, #7
 8006120:	f7ff f92e 	bl	8005380 <memp_free>
 8006124:	e00d      	b.n	8006142 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d103      	bne.n	8006134 <pbuf_free+0xc8>
          mem_free(p);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fe fdc1 	bl	8004cb4 <mem_free>
 8006132:	e006      	b.n	8006142 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006134:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <pbuf_free+0xf8>)
 8006136:	f240 320f 	movw	r2, #783	; 0x30f
 800613a:	490f      	ldr	r1, [pc, #60]	; (8006178 <pbuf_free+0x10c>)
 800613c:	480b      	ldr	r0, [pc, #44]	; (800616c <pbuf_free+0x100>)
 800613e:	f008 fe13 	bl	800ed68 <iprintf>
        }
      }
      count++;
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	3301      	adds	r3, #1
 8006146:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	607b      	str	r3, [r7, #4]
 800614c:	e001      	b.n	8006152 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d19f      	bne.n	8006098 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006158:	7dfb      	ldrb	r3, [r7, #23]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	08010170 	.word	0x08010170
 8006168:	080102d4 	.word	0x080102d4
 800616c:	080101d0 	.word	0x080101d0
 8006170:	08010300 	.word	0x08010300
 8006174:	08010318 	.word	0x08010318
 8006178:	0801033c 	.word	0x0801033c

0800617c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006188:	e005      	b.n	8006196 <pbuf_clen+0x1a>
    ++len;
 800618a:	89fb      	ldrh	r3, [r7, #14]
 800618c:	3301      	adds	r3, #1
 800618e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1f6      	bne.n	800618a <pbuf_clen+0xe>
  }
  return len;
 800619c:	89fb      	ldrh	r3, [r7, #14]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d010      	beq.n	80061dc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	7b9b      	ldrb	r3, [r3, #14]
 80061be:	3301      	adds	r3, #1
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	7b9b      	ldrb	r3, [r3, #14]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <pbuf_ref+0x30>
 80061ce:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <pbuf_ref+0x38>)
 80061d0:	f240 3242 	movw	r2, #834	; 0x342
 80061d4:	4904      	ldr	r1, [pc, #16]	; (80061e8 <pbuf_ref+0x3c>)
 80061d6:	4805      	ldr	r0, [pc, #20]	; (80061ec <pbuf_ref+0x40>)
 80061d8:	f008 fdc6 	bl	800ed68 <iprintf>
  }
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	08010170 	.word	0x08010170
 80061e8:	08010350 	.word	0x08010350
 80061ec:	080101d0 	.word	0x080101d0

080061f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <pbuf_cat+0x16>
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d107      	bne.n	8006216 <pbuf_cat+0x26>
 8006206:	4b20      	ldr	r3, [pc, #128]	; (8006288 <pbuf_cat+0x98>)
 8006208:	f240 3259 	movw	r2, #857	; 0x359
 800620c:	491f      	ldr	r1, [pc, #124]	; (800628c <pbuf_cat+0x9c>)
 800620e:	4820      	ldr	r0, [pc, #128]	; (8006290 <pbuf_cat+0xa0>)
 8006210:	f008 fdaa 	bl	800ed68 <iprintf>
 8006214:	e034      	b.n	8006280 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e00a      	b.n	8006232 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	891a      	ldrh	r2, [r3, #8]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	891b      	ldrh	r3, [r3, #8]
 8006224:	4413      	add	r3, r2
 8006226:	b29a      	uxth	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	60fb      	str	r3, [r7, #12]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	891a      	ldrh	r2, [r3, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	895b      	ldrh	r3, [r3, #10]
 8006242:	429a      	cmp	r2, r3
 8006244:	d006      	beq.n	8006254 <pbuf_cat+0x64>
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <pbuf_cat+0x98>)
 8006248:	f240 3262 	movw	r2, #866	; 0x362
 800624c:	4911      	ldr	r1, [pc, #68]	; (8006294 <pbuf_cat+0xa4>)
 800624e:	4810      	ldr	r0, [pc, #64]	; (8006290 <pbuf_cat+0xa0>)
 8006250:	f008 fd8a 	bl	800ed68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d006      	beq.n	800626a <pbuf_cat+0x7a>
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <pbuf_cat+0x98>)
 800625e:	f240 3263 	movw	r2, #867	; 0x363
 8006262:	490d      	ldr	r1, [pc, #52]	; (8006298 <pbuf_cat+0xa8>)
 8006264:	480a      	ldr	r0, [pc, #40]	; (8006290 <pbuf_cat+0xa0>)
 8006266:	f008 fd7f 	bl	800ed68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	891a      	ldrh	r2, [r3, #8]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	891b      	ldrh	r3, [r3, #8]
 8006272:	4413      	add	r3, r2
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	08010170 	.word	0x08010170
 800628c:	08010364 	.word	0x08010364
 8006290:	080101d0 	.word	0x080101d0
 8006294:	0801039c 	.word	0x0801039c
 8006298:	080103cc 	.word	0x080103cc

0800629c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80062a6:	6839      	ldr	r1, [r7, #0]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff ffa1 	bl	80061f0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80062ae:	6838      	ldr	r0, [r7, #0]
 80062b0:	f7ff ff7c 	bl	80061ac <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	2300      	movs	r3, #0
 80062cc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d008      	beq.n	80062e6 <pbuf_copy+0x2a>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d005      	beq.n	80062e6 <pbuf_copy+0x2a>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	891a      	ldrh	r2, [r3, #8]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	891b      	ldrh	r3, [r3, #8]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d209      	bcs.n	80062fa <pbuf_copy+0x3e>
 80062e6:	4b57      	ldr	r3, [pc, #348]	; (8006444 <pbuf_copy+0x188>)
 80062e8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80062ec:	4956      	ldr	r1, [pc, #344]	; (8006448 <pbuf_copy+0x18c>)
 80062ee:	4857      	ldr	r0, [pc, #348]	; (800644c <pbuf_copy+0x190>)
 80062f0:	f008 fd3a 	bl	800ed68 <iprintf>
 80062f4:	f06f 030f 	mvn.w	r3, #15
 80062f8:	e09f      	b.n	800643a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	895b      	ldrh	r3, [r3, #10]
 80062fe:	461a      	mov	r2, r3
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	1ad2      	subs	r2, r2, r3
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	895b      	ldrh	r3, [r3, #10]
 8006308:	4619      	mov	r1, r3
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	1acb      	subs	r3, r1, r3
 800630e:	429a      	cmp	r2, r3
 8006310:	d306      	bcc.n	8006320 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	895b      	ldrh	r3, [r3, #10]
 8006316:	461a      	mov	r2, r3
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e005      	b.n	800632c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	895b      	ldrh	r3, [r3, #10]
 8006324:	461a      	mov	r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	18d0      	adds	r0, r2, r3
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4413      	add	r3, r2
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4619      	mov	r1, r3
 8006340:	f008 fded 	bl	800ef1e <memcpy>
    offset_to += len;
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4413      	add	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4413      	add	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	895b      	ldrh	r3, [r3, #10]
 8006358:	461a      	mov	r2, r3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	4293      	cmp	r3, r2
 800635e:	d906      	bls.n	800636e <pbuf_copy+0xb2>
 8006360:	4b38      	ldr	r3, [pc, #224]	; (8006444 <pbuf_copy+0x188>)
 8006362:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006366:	493a      	ldr	r1, [pc, #232]	; (8006450 <pbuf_copy+0x194>)
 8006368:	4838      	ldr	r0, [pc, #224]	; (800644c <pbuf_copy+0x190>)
 800636a:	f008 fcfd 	bl	800ed68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	895b      	ldrh	r3, [r3, #10]
 8006372:	461a      	mov	r2, r3
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	4293      	cmp	r3, r2
 8006378:	d906      	bls.n	8006388 <pbuf_copy+0xcc>
 800637a:	4b32      	ldr	r3, [pc, #200]	; (8006444 <pbuf_copy+0x188>)
 800637c:	f240 32da 	movw	r2, #986	; 0x3da
 8006380:	4934      	ldr	r1, [pc, #208]	; (8006454 <pbuf_copy+0x198>)
 8006382:	4832      	ldr	r0, [pc, #200]	; (800644c <pbuf_copy+0x190>)
 8006384:	f008 fcf0 	bl	800ed68 <iprintf>
    if (offset_from >= p_from->len) {
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	895b      	ldrh	r3, [r3, #10]
 800638c:	461a      	mov	r2, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4293      	cmp	r3, r2
 8006392:	d304      	bcc.n	800639e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	895b      	ldrh	r3, [r3, #10]
 80063a2:	461a      	mov	r2, r3
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d114      	bne.n	80063d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10c      	bne.n	80063d4 <pbuf_copy+0x118>
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d009      	beq.n	80063d4 <pbuf_copy+0x118>
 80063c0:	4b20      	ldr	r3, [pc, #128]	; (8006444 <pbuf_copy+0x188>)
 80063c2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80063c6:	4924      	ldr	r1, [pc, #144]	; (8006458 <pbuf_copy+0x19c>)
 80063c8:	4820      	ldr	r0, [pc, #128]	; (800644c <pbuf_copy+0x190>)
 80063ca:	f008 fccd 	bl	800ed68 <iprintf>
 80063ce:	f06f 030f 	mvn.w	r3, #15
 80063d2:	e032      	b.n	800643a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d013      	beq.n	8006402 <pbuf_copy+0x146>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	895a      	ldrh	r2, [r3, #10]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	891b      	ldrh	r3, [r3, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d10d      	bne.n	8006402 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d009      	beq.n	8006402 <pbuf_copy+0x146>
 80063ee:	4b15      	ldr	r3, [pc, #84]	; (8006444 <pbuf_copy+0x188>)
 80063f0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80063f4:	4919      	ldr	r1, [pc, #100]	; (800645c <pbuf_copy+0x1a0>)
 80063f6:	4815      	ldr	r0, [pc, #84]	; (800644c <pbuf_copy+0x190>)
 80063f8:	f008 fcb6 	bl	800ed68 <iprintf>
 80063fc:	f06f 0305 	mvn.w	r3, #5
 8006400:	e01b      	b.n	800643a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d013      	beq.n	8006430 <pbuf_copy+0x174>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	895a      	ldrh	r2, [r3, #10]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	891b      	ldrh	r3, [r3, #8]
 8006410:	429a      	cmp	r2, r3
 8006412:	d10d      	bne.n	8006430 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d009      	beq.n	8006430 <pbuf_copy+0x174>
 800641c:	4b09      	ldr	r3, [pc, #36]	; (8006444 <pbuf_copy+0x188>)
 800641e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006422:	490e      	ldr	r1, [pc, #56]	; (800645c <pbuf_copy+0x1a0>)
 8006424:	4809      	ldr	r0, [pc, #36]	; (800644c <pbuf_copy+0x190>)
 8006426:	f008 fc9f 	bl	800ed68 <iprintf>
 800642a:	f06f 0305 	mvn.w	r3, #5
 800642e:	e004      	b.n	800643a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f47f af61 	bne.w	80062fa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	08010170 	.word	0x08010170
 8006448:	08010418 	.word	0x08010418
 800644c:	080101d0 	.word	0x080101d0
 8006450:	08010448 	.word	0x08010448
 8006454:	08010460 	.word	0x08010460
 8006458:	0801047c 	.word	0x0801047c
 800645c:	0801048c 	.word	0x0801048c

08006460 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	4611      	mov	r1, r2
 800646c:	461a      	mov	r2, r3
 800646e:	460b      	mov	r3, r1
 8006470:	80fb      	strh	r3, [r7, #6]
 8006472:	4613      	mov	r3, r2
 8006474:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800647a:	2300      	movs	r3, #0
 800647c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d108      	bne.n	8006496 <pbuf_copy_partial+0x36>
 8006484:	4b2b      	ldr	r3, [pc, #172]	; (8006534 <pbuf_copy_partial+0xd4>)
 8006486:	f240 420a 	movw	r2, #1034	; 0x40a
 800648a:	492b      	ldr	r1, [pc, #172]	; (8006538 <pbuf_copy_partial+0xd8>)
 800648c:	482b      	ldr	r0, [pc, #172]	; (800653c <pbuf_copy_partial+0xdc>)
 800648e:	f008 fc6b 	bl	800ed68 <iprintf>
 8006492:	2300      	movs	r3, #0
 8006494:	e04a      	b.n	800652c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d108      	bne.n	80064ae <pbuf_copy_partial+0x4e>
 800649c:	4b25      	ldr	r3, [pc, #148]	; (8006534 <pbuf_copy_partial+0xd4>)
 800649e:	f240 420b 	movw	r2, #1035	; 0x40b
 80064a2:	4927      	ldr	r1, [pc, #156]	; (8006540 <pbuf_copy_partial+0xe0>)
 80064a4:	4825      	ldr	r0, [pc, #148]	; (800653c <pbuf_copy_partial+0xdc>)
 80064a6:	f008 fc5f 	bl	800ed68 <iprintf>
 80064aa:	2300      	movs	r3, #0
 80064ac:	e03e      	b.n	800652c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	e034      	b.n	800651e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80064b4:	88bb      	ldrh	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <pbuf_copy_partial+0x70>
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	895b      	ldrh	r3, [r3, #10]
 80064be:	88ba      	ldrh	r2, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d305      	bcc.n	80064d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	895b      	ldrh	r3, [r3, #10]
 80064c8:	88ba      	ldrh	r2, [r7, #4]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	80bb      	strh	r3, [r7, #4]
 80064ce:	e023      	b.n	8006518 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	895a      	ldrh	r2, [r3, #10]
 80064d4:	88bb      	ldrh	r3, [r7, #4]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80064da:	8b3a      	ldrh	r2, [r7, #24]
 80064dc:	88fb      	ldrh	r3, [r7, #6]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d901      	bls.n	80064e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80064e2:	88fb      	ldrh	r3, [r7, #6]
 80064e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80064e6:	8b7b      	ldrh	r3, [r7, #26]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	18d0      	adds	r0, r2, r3
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	88bb      	ldrh	r3, [r7, #4]
 80064f2:	4413      	add	r3, r2
 80064f4:	8b3a      	ldrh	r2, [r7, #24]
 80064f6:	4619      	mov	r1, r3
 80064f8:	f008 fd11 	bl	800ef1e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80064fc:	8afa      	ldrh	r2, [r7, #22]
 80064fe:	8b3b      	ldrh	r3, [r7, #24]
 8006500:	4413      	add	r3, r2
 8006502:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006504:	8b7a      	ldrh	r2, [r7, #26]
 8006506:	8b3b      	ldrh	r3, [r7, #24]
 8006508:	4413      	add	r3, r2
 800650a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	8b3b      	ldrh	r3, [r7, #24]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	61fb      	str	r3, [r7, #28]
 800651e:	88fb      	ldrh	r3, [r7, #6]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <pbuf_copy_partial+0xca>
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1c4      	bne.n	80064b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800652a:	8afb      	ldrh	r3, [r7, #22]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	08010170 	.word	0x08010170
 8006538:	080104b8 	.word	0x080104b8
 800653c:	080101d0 	.word	0x080101d0
 8006540:	080104d8 	.word	0x080104d8

08006544 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	4603      	mov	r3, r0
 800654c:	603a      	str	r2, [r7, #0]
 800654e:	71fb      	strb	r3, [r7, #7]
 8006550:	460b      	mov	r3, r1
 8006552:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	8919      	ldrh	r1, [r3, #8]
 8006558:	88ba      	ldrh	r2, [r7, #4]
 800655a:	79fb      	ldrb	r3, [r7, #7]
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff faa1 	bl	8005aa4 <pbuf_alloc>
 8006562:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <pbuf_clone+0x2a>
    return NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	e011      	b.n	8006592 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff fea3 	bl	80062bc <pbuf_copy>
 8006576:	4603      	mov	r3, r0
 8006578:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800657a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d006      	beq.n	8006590 <pbuf_clone+0x4c>
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <pbuf_clone+0x58>)
 8006584:	f240 5224 	movw	r2, #1316	; 0x524
 8006588:	4905      	ldr	r1, [pc, #20]	; (80065a0 <pbuf_clone+0x5c>)
 800658a:	4806      	ldr	r0, [pc, #24]	; (80065a4 <pbuf_clone+0x60>)
 800658c:	f008 fbec 	bl	800ed68 <iprintf>
  return q;
 8006590:	68fb      	ldr	r3, [r7, #12]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	08010170 	.word	0x08010170
 80065a0:	080105e4 	.word	0x080105e4
 80065a4:	080101d0 	.word	0x080101d0

080065a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80065ac:	f008 fadc 	bl	800eb68 <rand>
 80065b0:	4603      	mov	r3, r0
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80065be:	b29a      	uxth	r2, r3
 80065c0:	4b01      	ldr	r3, [pc, #4]	; (80065c8 <tcp_init+0x20>)
 80065c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80065c4:	bf00      	nop
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000020 	.word	0x20000020

080065cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	7d1b      	ldrb	r3, [r3, #20]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d105      	bne.n	80065e8 <tcp_free+0x1c>
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <tcp_free+0x2c>)
 80065de:	22d4      	movs	r2, #212	; 0xd4
 80065e0:	4906      	ldr	r1, [pc, #24]	; (80065fc <tcp_free+0x30>)
 80065e2:	4807      	ldr	r0, [pc, #28]	; (8006600 <tcp_free+0x34>)
 80065e4:	f008 fbc0 	bl	800ed68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80065e8:	6879      	ldr	r1, [r7, #4]
 80065ea:	2001      	movs	r0, #1
 80065ec:	f7fe fec8 	bl	8005380 <memp_free>
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	08010670 	.word	0x08010670
 80065fc:	080106a0 	.word	0x080106a0
 8006600:	080106b4 	.word	0x080106b4

08006604 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	7d1b      	ldrb	r3, [r3, #20]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d105      	bne.n	8006620 <tcp_free_listen+0x1c>
 8006614:	4b06      	ldr	r3, [pc, #24]	; (8006630 <tcp_free_listen+0x2c>)
 8006616:	22df      	movs	r2, #223	; 0xdf
 8006618:	4906      	ldr	r1, [pc, #24]	; (8006634 <tcp_free_listen+0x30>)
 800661a:	4807      	ldr	r0, [pc, #28]	; (8006638 <tcp_free_listen+0x34>)
 800661c:	f008 fba4 	bl	800ed68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	2002      	movs	r0, #2
 8006624:	f7fe feac 	bl	8005380 <memp_free>
}
 8006628:	bf00      	nop
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	08010670 	.word	0x08010670
 8006634:	080106dc 	.word	0x080106dc
 8006638:	080106b4 	.word	0x080106b4

0800663c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006640:	f000 fea2 	bl	8007388 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006644:	4b07      	ldr	r3, [pc, #28]	; (8006664 <tcp_tmr+0x28>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	3301      	adds	r3, #1
 800664a:	b2da      	uxtb	r2, r3
 800664c:	4b05      	ldr	r3, [pc, #20]	; (8006664 <tcp_tmr+0x28>)
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	4b04      	ldr	r3, [pc, #16]	; (8006664 <tcp_tmr+0x28>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800665c:	f000 fb54 	bl	8006d08 <tcp_slowtmr>
  }
}
 8006660:	bf00      	nop
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20008781 	.word	0x20008781

08006668 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <tcp_remove_listener+0x1c>
 8006678:	4b0d      	ldr	r3, [pc, #52]	; (80066b0 <tcp_remove_listener+0x48>)
 800667a:	22ff      	movs	r2, #255	; 0xff
 800667c:	490d      	ldr	r1, [pc, #52]	; (80066b4 <tcp_remove_listener+0x4c>)
 800667e:	480e      	ldr	r0, [pc, #56]	; (80066b8 <tcp_remove_listener+0x50>)
 8006680:	f008 fb72 	bl	800ed68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e00a      	b.n	80066a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	429a      	cmp	r2, r3
 8006692:	d102      	bne.n	800669a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f1      	bne.n	800668a <tcp_remove_listener+0x22>
    }
  }
}
 80066a6:	bf00      	nop
 80066a8:	bf00      	nop
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	08010670 	.word	0x08010670
 80066b4:	080106f8 	.word	0x080106f8
 80066b8:	080106b4 	.word	0x080106b4

080066bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d106      	bne.n	80066d8 <tcp_listen_closed+0x1c>
 80066ca:	4b14      	ldr	r3, [pc, #80]	; (800671c <tcp_listen_closed+0x60>)
 80066cc:	f240 1211 	movw	r2, #273	; 0x111
 80066d0:	4913      	ldr	r1, [pc, #76]	; (8006720 <tcp_listen_closed+0x64>)
 80066d2:	4814      	ldr	r0, [pc, #80]	; (8006724 <tcp_listen_closed+0x68>)
 80066d4:	f008 fb48 	bl	800ed68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	7d1b      	ldrb	r3, [r3, #20]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d006      	beq.n	80066ee <tcp_listen_closed+0x32>
 80066e0:	4b0e      	ldr	r3, [pc, #56]	; (800671c <tcp_listen_closed+0x60>)
 80066e2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80066e6:	4910      	ldr	r1, [pc, #64]	; (8006728 <tcp_listen_closed+0x6c>)
 80066e8:	480e      	ldr	r0, [pc, #56]	; (8006724 <tcp_listen_closed+0x68>)
 80066ea:	f008 fb3d 	bl	800ed68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80066ee:	2301      	movs	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	e00b      	b.n	800670c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80066f4:	4a0d      	ldr	r2, [pc, #52]	; (800672c <tcp_listen_closed+0x70>)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff ffb1 	bl	8006668 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3301      	adds	r3, #1
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2b03      	cmp	r3, #3
 8006710:	d9f0      	bls.n	80066f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	08010670 	.word	0x08010670
 8006720:	08010720 	.word	0x08010720
 8006724:	080106b4 	.word	0x080106b4
 8006728:	0801072c 	.word	0x0801072c
 800672c:	08012650 	.word	0x08012650

08006730 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006730:	b5b0      	push	{r4, r5, r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af04      	add	r7, sp, #16
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	460b      	mov	r3, r1
 800673a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d106      	bne.n	8006750 <tcp_close_shutdown+0x20>
 8006742:	4b63      	ldr	r3, [pc, #396]	; (80068d0 <tcp_close_shutdown+0x1a0>)
 8006744:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006748:	4962      	ldr	r1, [pc, #392]	; (80068d4 <tcp_close_shutdown+0x1a4>)
 800674a:	4863      	ldr	r0, [pc, #396]	; (80068d8 <tcp_close_shutdown+0x1a8>)
 800674c:	f008 fb0c 	bl	800ed68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d066      	beq.n	8006824 <tcp_close_shutdown+0xf4>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	7d1b      	ldrb	r3, [r3, #20]
 800675a:	2b04      	cmp	r3, #4
 800675c:	d003      	beq.n	8006766 <tcp_close_shutdown+0x36>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	7d1b      	ldrb	r3, [r3, #20]
 8006762:	2b07      	cmp	r3, #7
 8006764:	d15e      	bne.n	8006824 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800676a:	2b00      	cmp	r3, #0
 800676c:	d104      	bne.n	8006778 <tcp_close_shutdown+0x48>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006772:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006776:	d055      	beq.n	8006824 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8b5b      	ldrh	r3, [r3, #26]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d106      	bne.n	8006792 <tcp_close_shutdown+0x62>
 8006784:	4b52      	ldr	r3, [pc, #328]	; (80068d0 <tcp_close_shutdown+0x1a0>)
 8006786:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800678a:	4954      	ldr	r1, [pc, #336]	; (80068dc <tcp_close_shutdown+0x1ac>)
 800678c:	4852      	ldr	r0, [pc, #328]	; (80068d8 <tcp_close_shutdown+0x1a8>)
 800678e:	f008 faeb 	bl	800ed68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800679a:	687d      	ldr	r5, [r7, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	8ad2      	ldrh	r2, [r2, #22]
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	8b09      	ldrh	r1, [r1, #24]
 80067a8:	9102      	str	r1, [sp, #8]
 80067aa:	9201      	str	r2, [sp, #4]
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	462b      	mov	r3, r5
 80067b0:	4622      	mov	r2, r4
 80067b2:	4601      	mov	r1, r0
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f004 fe91 	bl	800b4dc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 f8c6 	bl	800794c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80067c0:	4b47      	ldr	r3, [pc, #284]	; (80068e0 <tcp_close_shutdown+0x1b0>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d105      	bne.n	80067d6 <tcp_close_shutdown+0xa6>
 80067ca:	4b45      	ldr	r3, [pc, #276]	; (80068e0 <tcp_close_shutdown+0x1b0>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4a43      	ldr	r2, [pc, #268]	; (80068e0 <tcp_close_shutdown+0x1b0>)
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	e013      	b.n	80067fe <tcp_close_shutdown+0xce>
 80067d6:	4b42      	ldr	r3, [pc, #264]	; (80068e0 <tcp_close_shutdown+0x1b0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e00c      	b.n	80067f8 <tcp_close_shutdown+0xc8>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d104      	bne.n	80067f2 <tcp_close_shutdown+0xc2>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	60da      	str	r2, [r3, #12]
 80067f0:	e005      	b.n	80067fe <tcp_close_shutdown+0xce>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1ef      	bne.n	80067de <tcp_close_shutdown+0xae>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	60da      	str	r2, [r3, #12]
 8006804:	4b37      	ldr	r3, [pc, #220]	; (80068e4 <tcp_close_shutdown+0x1b4>)
 8006806:	2201      	movs	r2, #1
 8006808:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800680a:	4b37      	ldr	r3, [pc, #220]	; (80068e8 <tcp_close_shutdown+0x1b8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d102      	bne.n	800681a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006814:	f003 fd5e 	bl	800a2d4 <tcp_trigger_input_pcb_close>
 8006818:	e002      	b.n	8006820 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff fed6 	bl	80065cc <tcp_free>
      }
      return ERR_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	e050      	b.n	80068c6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	7d1b      	ldrb	r3, [r3, #20]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d03b      	beq.n	80068a4 <tcp_close_shutdown+0x174>
 800682c:	2b02      	cmp	r3, #2
 800682e:	dc44      	bgt.n	80068ba <tcp_close_shutdown+0x18a>
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <tcp_close_shutdown+0x10a>
 8006834:	2b01      	cmp	r3, #1
 8006836:	d02a      	beq.n	800688e <tcp_close_shutdown+0x15e>
 8006838:	e03f      	b.n	80068ba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	8adb      	ldrh	r3, [r3, #22]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d021      	beq.n	8006886 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006842:	4b2a      	ldr	r3, [pc, #168]	; (80068ec <tcp_close_shutdown+0x1bc>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	429a      	cmp	r2, r3
 800684a:	d105      	bne.n	8006858 <tcp_close_shutdown+0x128>
 800684c:	4b27      	ldr	r3, [pc, #156]	; (80068ec <tcp_close_shutdown+0x1bc>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	4a26      	ldr	r2, [pc, #152]	; (80068ec <tcp_close_shutdown+0x1bc>)
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e013      	b.n	8006880 <tcp_close_shutdown+0x150>
 8006858:	4b24      	ldr	r3, [pc, #144]	; (80068ec <tcp_close_shutdown+0x1bc>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	e00c      	b.n	800687a <tcp_close_shutdown+0x14a>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	429a      	cmp	r2, r3
 8006868:	d104      	bne.n	8006874 <tcp_close_shutdown+0x144>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	60da      	str	r2, [r3, #12]
 8006872:	e005      	b.n	8006880 <tcp_close_shutdown+0x150>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1ef      	bne.n	8006860 <tcp_close_shutdown+0x130>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fea0 	bl	80065cc <tcp_free>
      break;
 800688c:	e01a      	b.n	80068c4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff ff14 	bl	80066bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4816      	ldr	r0, [pc, #88]	; (80068f0 <tcp_close_shutdown+0x1c0>)
 8006898:	f001 f8a8 	bl	80079ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7ff feb1 	bl	8006604 <tcp_free_listen>
      break;
 80068a2:	e00f      	b.n	80068c4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	480e      	ldr	r0, [pc, #56]	; (80068e0 <tcp_close_shutdown+0x1b0>)
 80068a8:	f001 f8a0 	bl	80079ec <tcp_pcb_remove>
 80068ac:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <tcp_close_shutdown+0x1b4>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff fe8a 	bl	80065cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80068b8:	e004      	b.n	80068c4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f81a 	bl	80068f4 <tcp_close_shutdown_fin>
 80068c0:	4603      	mov	r3, r0
 80068c2:	e000      	b.n	80068c6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bdb0      	pop	{r4, r5, r7, pc}
 80068ce:	bf00      	nop
 80068d0:	08010670 	.word	0x08010670
 80068d4:	08010744 	.word	0x08010744
 80068d8:	080106b4 	.word	0x080106b4
 80068dc:	08010764 	.word	0x08010764
 80068e0:	20008778 	.word	0x20008778
 80068e4:	20008780 	.word	0x20008780
 80068e8:	200087b8 	.word	0x200087b8
 80068ec:	20008770 	.word	0x20008770
 80068f0:	20008774 	.word	0x20008774

080068f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d106      	bne.n	8006910 <tcp_close_shutdown_fin+0x1c>
 8006902:	4b2e      	ldr	r3, [pc, #184]	; (80069bc <tcp_close_shutdown_fin+0xc8>)
 8006904:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006908:	492d      	ldr	r1, [pc, #180]	; (80069c0 <tcp_close_shutdown_fin+0xcc>)
 800690a:	482e      	ldr	r0, [pc, #184]	; (80069c4 <tcp_close_shutdown_fin+0xd0>)
 800690c:	f008 fa2c 	bl	800ed68 <iprintf>

  switch (pcb->state) {
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	7d1b      	ldrb	r3, [r3, #20]
 8006914:	2b07      	cmp	r3, #7
 8006916:	d020      	beq.n	800695a <tcp_close_shutdown_fin+0x66>
 8006918:	2b07      	cmp	r3, #7
 800691a:	dc2b      	bgt.n	8006974 <tcp_close_shutdown_fin+0x80>
 800691c:	2b03      	cmp	r3, #3
 800691e:	d002      	beq.n	8006926 <tcp_close_shutdown_fin+0x32>
 8006920:	2b04      	cmp	r3, #4
 8006922:	d00d      	beq.n	8006940 <tcp_close_shutdown_fin+0x4c>
 8006924:	e026      	b.n	8006974 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f003 fee6 	bl	800a6f8 <tcp_send_fin>
 800692c:	4603      	mov	r3, r0
 800692e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d11f      	bne.n	8006978 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2205      	movs	r2, #5
 800693c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800693e:	e01b      	b.n	8006978 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f003 fed9 	bl	800a6f8 <tcp_send_fin>
 8006946:	4603      	mov	r3, r0
 8006948:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800694a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d114      	bne.n	800697c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2205      	movs	r2, #5
 8006956:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006958:	e010      	b.n	800697c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f003 fecc 	bl	800a6f8 <tcp_send_fin>
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d109      	bne.n	8006980 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2209      	movs	r2, #9
 8006970:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006972:	e005      	b.n	8006980 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	e01c      	b.n	80069b2 <tcp_close_shutdown_fin+0xbe>
      break;
 8006978:	bf00      	nop
 800697a:	e002      	b.n	8006982 <tcp_close_shutdown_fin+0x8e>
      break;
 800697c:	bf00      	nop
 800697e:	e000      	b.n	8006982 <tcp_close_shutdown_fin+0x8e>
      break;
 8006980:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f003 fff2 	bl	800a974 <tcp_output>
 8006990:	e00d      	b.n	80069ae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800699a:	d108      	bne.n	80069ae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8b5b      	ldrh	r3, [r3, #26]
 80069a0:	f043 0308 	orr.w	r3, r3, #8
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e001      	b.n	80069b2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80069ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	08010670 	.word	0x08010670
 80069c0:	08010720 	.word	0x08010720
 80069c4:	080106b4 	.word	0x080106b4

080069c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <tcp_close+0x22>
 80069d6:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <tcp_close+0x4c>)
 80069d8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80069dc:	490e      	ldr	r1, [pc, #56]	; (8006a18 <tcp_close+0x50>)
 80069de:	480f      	ldr	r0, [pc, #60]	; (8006a1c <tcp_close+0x54>)
 80069e0:	f008 f9c2 	bl	800ed68 <iprintf>
 80069e4:	f06f 030f 	mvn.w	r3, #15
 80069e8:	e00f      	b.n	8006a0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	7d1b      	ldrb	r3, [r3, #20]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d006      	beq.n	8006a00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	8b5b      	ldrh	r3, [r3, #26]
 80069f6:	f043 0310 	orr.w	r3, r3, #16
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006a00:	2101      	movs	r1, #1
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff fe94 	bl	8006730 <tcp_close_shutdown>
 8006a08:	4603      	mov	r3, r0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	08010670 	.word	0x08010670
 8006a18:	08010780 	.word	0x08010780
 8006a1c:	080106b4 	.word	0x080106b4

08006a20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08e      	sub	sp, #56	; 0x38
 8006a24:	af04      	add	r7, sp, #16
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d107      	bne.n	8006a40 <tcp_abandon+0x20>
 8006a30:	4b52      	ldr	r3, [pc, #328]	; (8006b7c <tcp_abandon+0x15c>)
 8006a32:	f240 223d 	movw	r2, #573	; 0x23d
 8006a36:	4952      	ldr	r1, [pc, #328]	; (8006b80 <tcp_abandon+0x160>)
 8006a38:	4852      	ldr	r0, [pc, #328]	; (8006b84 <tcp_abandon+0x164>)
 8006a3a:	f008 f995 	bl	800ed68 <iprintf>
 8006a3e:	e099      	b.n	8006b74 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	7d1b      	ldrb	r3, [r3, #20]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d106      	bne.n	8006a56 <tcp_abandon+0x36>
 8006a48:	4b4c      	ldr	r3, [pc, #304]	; (8006b7c <tcp_abandon+0x15c>)
 8006a4a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006a4e:	494e      	ldr	r1, [pc, #312]	; (8006b88 <tcp_abandon+0x168>)
 8006a50:	484c      	ldr	r0, [pc, #304]	; (8006b84 <tcp_abandon+0x164>)
 8006a52:	f008 f989 	bl	800ed68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	7d1b      	ldrb	r3, [r3, #20]
 8006a5a:	2b0a      	cmp	r3, #10
 8006a5c:	d107      	bne.n	8006a6e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006a5e:	6879      	ldr	r1, [r7, #4]
 8006a60:	484a      	ldr	r0, [pc, #296]	; (8006b8c <tcp_abandon+0x16c>)
 8006a62:	f000 ffc3 	bl	80079ec <tcp_pcb_remove>
    tcp_free(pcb);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fdb0 	bl	80065cc <tcp_free>
 8006a6c:	e082      	b.n	8006b74 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a80:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a88:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	7d1b      	ldrb	r3, [r3, #20]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d126      	bne.n	8006ae6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	8adb      	ldrh	r3, [r3, #22]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d02e      	beq.n	8006afe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006aa0:	4b3b      	ldr	r3, [pc, #236]	; (8006b90 <tcp_abandon+0x170>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d105      	bne.n	8006ab6 <tcp_abandon+0x96>
 8006aaa:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <tcp_abandon+0x170>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	4a37      	ldr	r2, [pc, #220]	; (8006b90 <tcp_abandon+0x170>)
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	e013      	b.n	8006ade <tcp_abandon+0xbe>
 8006ab6:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <tcp_abandon+0x170>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	61fb      	str	r3, [r7, #28]
 8006abc:	e00c      	b.n	8006ad8 <tcp_abandon+0xb8>
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d104      	bne.n	8006ad2 <tcp_abandon+0xb2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	60da      	str	r2, [r3, #12]
 8006ad0:	e005      	b.n	8006ade <tcp_abandon+0xbe>
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1ef      	bne.n	8006abe <tcp_abandon+0x9e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	60da      	str	r2, [r3, #12]
 8006ae4:	e00b      	b.n	8006afe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	8adb      	ldrh	r3, [r3, #22]
 8006aee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4828      	ldr	r0, [pc, #160]	; (8006b94 <tcp_abandon+0x174>)
 8006af4:	f000 ff7a 	bl	80079ec <tcp_pcb_remove>
 8006af8:	4b27      	ldr	r3, [pc, #156]	; (8006b98 <tcp_abandon+0x178>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d004      	beq.n	8006b10 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fd1c 	bl	8007548 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f000 fd13 	bl	8007548 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fd0a 	bl	8007548 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00e      	beq.n	8006b58 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006b3a:	6879      	ldr	r1, [r7, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	8b12      	ldrh	r2, [r2, #24]
 8006b44:	9202      	str	r2, [sp, #8]
 8006b46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b48:	9201      	str	r2, [sp, #4]
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	69b9      	ldr	r1, [r7, #24]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f004 fcc2 	bl	800b4dc <tcp_rst>
    }
    last_state = pcb->state;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	7d1b      	ldrb	r3, [r3, #20]
 8006b5c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fd34 	bl	80065cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <tcp_abandon+0x154>
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f06f 010c 	mvn.w	r1, #12
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	4798      	blx	r3
  }
}
 8006b74:	3728      	adds	r7, #40	; 0x28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	08010670 	.word	0x08010670
 8006b80:	080107b4 	.word	0x080107b4
 8006b84:	080106b4 	.word	0x080106b4
 8006b88:	080107d0 	.word	0x080107d0
 8006b8c:	2000877c 	.word	0x2000877c
 8006b90:	20008770 	.word	0x20008770
 8006b94:	20008778 	.word	0x20008778
 8006b98:	20008780 	.word	0x20008780

08006b9c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f7ff ff3a 	bl	8006a20 <tcp_abandon>
}
 8006bac:	bf00      	nop
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d106      	bne.n	8006bd0 <tcp_update_rcv_ann_wnd+0x1c>
 8006bc2:	4b25      	ldr	r3, [pc, #148]	; (8006c58 <tcp_update_rcv_ann_wnd+0xa4>)
 8006bc4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006bc8:	4924      	ldr	r1, [pc, #144]	; (8006c5c <tcp_update_rcv_ann_wnd+0xa8>)
 8006bca:	4825      	ldr	r0, [pc, #148]	; (8006c60 <tcp_update_rcv_ann_wnd+0xac>)
 8006bcc:	f008 f8cc 	bl	800ed68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006bd8:	4413      	add	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006be4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006be8:	bf28      	it	cs
 8006bea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8006bee:	b292      	uxth	r2, r2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	db08      	blt.n	8006c0c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	e020      	b.n	8006c4e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dd03      	ble.n	8006c22 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c20:	e014      	b.n	8006c4c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c34:	d306      	bcc.n	8006c44 <tcp_update_rcv_ann_wnd+0x90>
 8006c36:	4b08      	ldr	r3, [pc, #32]	; (8006c58 <tcp_update_rcv_ann_wnd+0xa4>)
 8006c38:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006c3c:	4909      	ldr	r1, [pc, #36]	; (8006c64 <tcp_update_rcv_ann_wnd+0xb0>)
 8006c3e:	4808      	ldr	r0, [pc, #32]	; (8006c60 <tcp_update_rcv_ann_wnd+0xac>)
 8006c40:	f008 f892 	bl	800ed68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006c4c:	2300      	movs	r3, #0
  }
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	08010670 	.word	0x08010670
 8006c5c:	080108cc 	.word	0x080108cc
 8006c60:	080106b4 	.word	0x080106b4
 8006c64:	080108f0 	.word	0x080108f0

08006c68 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d107      	bne.n	8006c8a <tcp_recved+0x22>
 8006c7a:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <tcp_recved+0x90>)
 8006c7c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006c80:	491e      	ldr	r1, [pc, #120]	; (8006cfc <tcp_recved+0x94>)
 8006c82:	481f      	ldr	r0, [pc, #124]	; (8006d00 <tcp_recved+0x98>)
 8006c84:	f008 f870 	bl	800ed68 <iprintf>
 8006c88:	e032      	b.n	8006cf0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	7d1b      	ldrb	r3, [r3, #20]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d106      	bne.n	8006ca0 <tcp_recved+0x38>
 8006c92:	4b19      	ldr	r3, [pc, #100]	; (8006cf8 <tcp_recved+0x90>)
 8006c94:	f240 32d2 	movw	r2, #978	; 0x3d2
 8006c98:	491a      	ldr	r1, [pc, #104]	; (8006d04 <tcp_recved+0x9c>)
 8006c9a:	4819      	ldr	r0, [pc, #100]	; (8006d00 <tcp_recved+0x98>)
 8006c9c:	f008 f864 	bl	800ed68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006ca4:	887b      	ldrh	r3, [r7, #2]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8006caa:	89fb      	ldrh	r3, [r7, #14]
 8006cac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006cb0:	d804      	bhi.n	8006cbc <tcp_recved+0x54>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb6:	89fa      	ldrh	r2, [r7, #14]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d204      	bcs.n	8006cc6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006cc2:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cc4:	e002      	b.n	8006ccc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	89fa      	ldrh	r2, [r7, #14]
 8006cca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff ff71 	bl	8006bb4 <tcp_update_rcv_ann_wnd>
 8006cd2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8006cda:	d309      	bcc.n	8006cf0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	8b5b      	ldrh	r3, [r3, #26]
 8006ce0:	f043 0302 	orr.w	r3, r3, #2
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f003 fe42 	bl	800a974 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	08010670 	.word	0x08010670
 8006cfc:	0801090c 	.word	0x0801090c
 8006d00:	080106b4 	.word	0x080106b4
 8006d04:	08010924 	.word	0x08010924

08006d08 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006d08:	b5b0      	push	{r4, r5, r7, lr}
 8006d0a:	b090      	sub	sp, #64	; 0x40
 8006d0c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006d14:	4b94      	ldr	r3, [pc, #592]	; (8006f68 <tcp_slowtmr+0x260>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	4a93      	ldr	r2, [pc, #588]	; (8006f68 <tcp_slowtmr+0x260>)
 8006d1c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006d1e:	4b93      	ldr	r3, [pc, #588]	; (8006f6c <tcp_slowtmr+0x264>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	4b91      	ldr	r3, [pc, #580]	; (8006f6c <tcp_slowtmr+0x264>)
 8006d28:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8006d2e:	4b90      	ldr	r3, [pc, #576]	; (8006f70 <tcp_slowtmr+0x268>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006d34:	e29f      	b.n	8007276 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d38:	7d1b      	ldrb	r3, [r3, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <tcp_slowtmr+0x44>
 8006d3e:	4b8d      	ldr	r3, [pc, #564]	; (8006f74 <tcp_slowtmr+0x26c>)
 8006d40:	f240 42be 	movw	r2, #1214	; 0x4be
 8006d44:	498c      	ldr	r1, [pc, #560]	; (8006f78 <tcp_slowtmr+0x270>)
 8006d46:	488d      	ldr	r0, [pc, #564]	; (8006f7c <tcp_slowtmr+0x274>)
 8006d48:	f008 f80e 	bl	800ed68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4e:	7d1b      	ldrb	r3, [r3, #20]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d106      	bne.n	8006d62 <tcp_slowtmr+0x5a>
 8006d54:	4b87      	ldr	r3, [pc, #540]	; (8006f74 <tcp_slowtmr+0x26c>)
 8006d56:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006d5a:	4989      	ldr	r1, [pc, #548]	; (8006f80 <tcp_slowtmr+0x278>)
 8006d5c:	4887      	ldr	r0, [pc, #540]	; (8006f7c <tcp_slowtmr+0x274>)
 8006d5e:	f008 f803 	bl	800ed68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	7d1b      	ldrb	r3, [r3, #20]
 8006d66:	2b0a      	cmp	r3, #10
 8006d68:	d106      	bne.n	8006d78 <tcp_slowtmr+0x70>
 8006d6a:	4b82      	ldr	r3, [pc, #520]	; (8006f74 <tcp_slowtmr+0x26c>)
 8006d6c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006d70:	4984      	ldr	r1, [pc, #528]	; (8006f84 <tcp_slowtmr+0x27c>)
 8006d72:	4882      	ldr	r0, [pc, #520]	; (8006f7c <tcp_slowtmr+0x274>)
 8006d74:	f007 fff8 	bl	800ed68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	7f9a      	ldrb	r2, [r3, #30]
 8006d7c:	4b7b      	ldr	r3, [pc, #492]	; (8006f6c <tcp_slowtmr+0x264>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d105      	bne.n	8006d90 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006d8e:	e272      	b.n	8007276 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006d90:	4b76      	ldr	r3, [pc, #472]	; (8006f6c <tcp_slowtmr+0x264>)
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	7d1b      	ldrb	r3, [r3, #20]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d10a      	bne.n	8006dc2 <tcp_slowtmr+0xba>
 8006dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006db2:	2b05      	cmp	r3, #5
 8006db4:	d905      	bls.n	8006dc2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8006db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dba:	3301      	adds	r3, #1
 8006dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006dc0:	e11e      	b.n	8007000 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dc8:	2b0b      	cmp	r3, #11
 8006dca:	d905      	bls.n	8006dd8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006dd6:	e113      	b.n	8007000 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d075      	beq.n	8006ece <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d006      	beq.n	8006df8 <tcp_slowtmr+0xf0>
 8006dea:	4b62      	ldr	r3, [pc, #392]	; (8006f74 <tcp_slowtmr+0x26c>)
 8006dec:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006df0:	4965      	ldr	r1, [pc, #404]	; (8006f88 <tcp_slowtmr+0x280>)
 8006df2:	4862      	ldr	r0, [pc, #392]	; (8006f7c <tcp_slowtmr+0x274>)
 8006df4:	f007 ffb8 	bl	800ed68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d106      	bne.n	8006e0e <tcp_slowtmr+0x106>
 8006e00:	4b5c      	ldr	r3, [pc, #368]	; (8006f74 <tcp_slowtmr+0x26c>)
 8006e02:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006e06:	4961      	ldr	r1, [pc, #388]	; (8006f8c <tcp_slowtmr+0x284>)
 8006e08:	485c      	ldr	r0, [pc, #368]	; (8006f7c <tcp_slowtmr+0x274>)
 8006e0a:	f007 ffad 	bl	800ed68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006e14:	2b0b      	cmp	r3, #11
 8006e16:	d905      	bls.n	8006e24 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e22:	e0ed      	b.n	8007000 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	4a58      	ldr	r2, [pc, #352]	; (8006f90 <tcp_slowtmr+0x288>)
 8006e2e:	5cd3      	ldrb	r3, [r2, r3]
 8006e30:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e38:	7c7a      	ldrb	r2, [r7, #17]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d907      	bls.n	8006e4e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e44:	3301      	adds	r3, #1
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e54:	7c7a      	ldrb	r2, [r7, #17]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	f200 80d2 	bhi.w	8007000 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d108      	bne.n	8006e7c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006e6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e6c:	f004 fc2a 	bl	800b6c4 <tcp_zero_window_probe>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d014      	beq.n	8006ea0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006e76:	2300      	movs	r3, #0
 8006e78:	623b      	str	r3, [r7, #32]
 8006e7a:	e011      	b.n	8006ea0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e82:	4619      	mov	r1, r3
 8006e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e86:	f003 faef 	bl	800a468 <tcp_split_unsent_seg>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d107      	bne.n	8006ea0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006e90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e92:	f003 fd6f 	bl	800a974 <tcp_output>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006ea0:	6a3b      	ldr	r3, [r7, #32]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 80ac 	beq.w	8007000 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	f200 80a2 	bhi.w	8007000 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ebe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006ecc:	e098      	b.n	8007000 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	db0f      	blt.n	8006ef8 <tcp_slowtmr+0x1f0>
 8006ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006ede:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d008      	beq.n	8006ef8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	b21a      	sxth	r2, r3
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006f04:	429a      	cmp	r2, r3
 8006f06:	db7b      	blt.n	8007000 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f0a:	f004 f827 	bl	800af5c <tcp_rexmit_rto_prepare>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d007      	beq.n	8006f24 <tcp_slowtmr+0x21c>
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d171      	bne.n	8007000 <tcp_slowtmr+0x2f8>
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d06d      	beq.n	8007000 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f26:	7d1b      	ldrb	r3, [r3, #20]
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d03a      	beq.n	8006fa2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f32:	2b0c      	cmp	r3, #12
 8006f34:	bf28      	it	cs
 8006f36:	230c      	movcs	r3, #12
 8006f38:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006f40:	10db      	asrs	r3, r3, #3
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006f4c:	4413      	add	r3, r2
 8006f4e:	7efa      	ldrb	r2, [r7, #27]
 8006f50:	4910      	ldr	r1, [pc, #64]	; (8006f94 <tcp_slowtmr+0x28c>)
 8006f52:	5c8a      	ldrb	r2, [r1, r2]
 8006f54:	4093      	lsls	r3, r2
 8006f56:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	dc1a      	bgt.n	8006f98 <tcp_slowtmr+0x290>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	b21a      	sxth	r2, r3
 8006f66:	e019      	b.n	8006f9c <tcp_slowtmr+0x294>
 8006f68:	2000876c 	.word	0x2000876c
 8006f6c:	20008782 	.word	0x20008782
 8006f70:	20008778 	.word	0x20008778
 8006f74:	08010670 	.word	0x08010670
 8006f78:	080109b4 	.word	0x080109b4
 8006f7c:	080106b4 	.word	0x080106b4
 8006f80:	080109e0 	.word	0x080109e0
 8006f84:	08010a0c 	.word	0x08010a0c
 8006f88:	08010a3c 	.word	0x08010a3c
 8006f8c:	08010a70 	.word	0x08010a70
 8006f90:	08012648 	.word	0x08012648
 8006f94:	08012638 	.word	0x08012638
 8006f98:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006faa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	bf28      	it	cs
 8006fb8:	4613      	movcs	r3, r2
 8006fba:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006fbc:	8a7b      	ldrh	r3, [r7, #18]
 8006fbe:	085b      	lsrs	r3, r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fca:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d206      	bcs.n	8006fe8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006ffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ffc:	f004 f81e 	bl	800b03c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	7d1b      	ldrb	r3, [r3, #20]
 8007004:	2b06      	cmp	r3, #6
 8007006:	d111      	bne.n	800702c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	8b5b      	ldrh	r3, [r3, #26]
 800700c:	f003 0310 	and.w	r3, r3, #16
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007014:	4b9d      	ldr	r3, [pc, #628]	; (800728c <tcp_slowtmr+0x584>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b28      	cmp	r3, #40	; 0x28
 8007020:	d904      	bls.n	800702c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007026:	3301      	adds	r3, #1
 8007028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	7a5b      	ldrb	r3, [r3, #9]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d04c      	beq.n	80070d2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800703c:	2b04      	cmp	r3, #4
 800703e:	d003      	beq.n	8007048 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007044:	2b07      	cmp	r3, #7
 8007046:	d144      	bne.n	80070d2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007048:	4b90      	ldr	r3, [pc, #576]	; (800728c <tcp_slowtmr+0x584>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007058:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800705c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007060:	498b      	ldr	r1, [pc, #556]	; (8007290 <tcp_slowtmr+0x588>)
 8007062:	fba1 1303 	umull	r1, r3, r1, r3
 8007066:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007068:	429a      	cmp	r2, r3
 800706a:	d90a      	bls.n	8007082 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800706c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007070:	3301      	adds	r3, #1
 8007072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007076:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800707a:	3301      	adds	r3, #1
 800707c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007080:	e027      	b.n	80070d2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007082:	4b82      	ldr	r3, [pc, #520]	; (800728c <tcp_slowtmr+0x584>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800708c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007098:	4618      	mov	r0, r3
 800709a:	4b7e      	ldr	r3, [pc, #504]	; (8007294 <tcp_slowtmr+0x58c>)
 800709c:	fb00 f303 	mul.w	r3, r0, r3
 80070a0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80070a2:	497b      	ldr	r1, [pc, #492]	; (8007290 <tcp_slowtmr+0x588>)
 80070a4:	fba1 1303 	umull	r1, r3, r1, r3
 80070a8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d911      	bls.n	80070d2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80070ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070b0:	f004 fac8 	bl	800b644 <tcp_keepalive>
 80070b4:	4603      	mov	r3, r0
 80070b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80070ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d107      	bne.n	80070d2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80070c8:	3301      	adds	r3, #1
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d011      	beq.n	80070fe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80070da:	4b6c      	ldr	r3, [pc, #432]	; (800728c <tcp_slowtmr+0x584>)
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	1ad2      	subs	r2, r2, r3
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80070ea:	4619      	mov	r1, r3
 80070ec:	460b      	mov	r3, r1
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	440b      	add	r3, r1
 80070f2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d302      	bcc.n	80070fe <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80070f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070fa:	f000 fddb 	bl	8007cb4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	7d1b      	ldrb	r3, [r3, #20]
 8007102:	2b03      	cmp	r3, #3
 8007104:	d10b      	bne.n	800711e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007106:	4b61      	ldr	r3, [pc, #388]	; (800728c <tcp_slowtmr+0x584>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b28      	cmp	r3, #40	; 0x28
 8007112:	d904      	bls.n	800711e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007118:	3301      	adds	r3, #1
 800711a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800711e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007120:	7d1b      	ldrb	r3, [r3, #20]
 8007122:	2b09      	cmp	r3, #9
 8007124:	d10b      	bne.n	800713e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007126:	4b59      	ldr	r3, [pc, #356]	; (800728c <tcp_slowtmr+0x584>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2bf0      	cmp	r3, #240	; 0xf0
 8007132:	d904      	bls.n	800713e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007138:	3301      	adds	r3, #1
 800713a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800713e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007142:	2b00      	cmp	r3, #0
 8007144:	d060      	beq.n	8007208 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800714c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800714e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007150:	f000 fbfc 	bl	800794c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007156:	2b00      	cmp	r3, #0
 8007158:	d010      	beq.n	800717c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800715a:	4b4f      	ldr	r3, [pc, #316]	; (8007298 <tcp_slowtmr+0x590>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007160:	429a      	cmp	r2, r3
 8007162:	d106      	bne.n	8007172 <tcp_slowtmr+0x46a>
 8007164:	4b4d      	ldr	r3, [pc, #308]	; (800729c <tcp_slowtmr+0x594>)
 8007166:	f240 526d 	movw	r2, #1389	; 0x56d
 800716a:	494d      	ldr	r1, [pc, #308]	; (80072a0 <tcp_slowtmr+0x598>)
 800716c:	484d      	ldr	r0, [pc, #308]	; (80072a4 <tcp_slowtmr+0x59c>)
 800716e:	f007 fdfb 	bl	800ed68 <iprintf>
        prev->next = pcb->next;
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	60da      	str	r2, [r3, #12]
 800717a:	e00f      	b.n	800719c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800717c:	4b46      	ldr	r3, [pc, #280]	; (8007298 <tcp_slowtmr+0x590>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007182:	429a      	cmp	r2, r3
 8007184:	d006      	beq.n	8007194 <tcp_slowtmr+0x48c>
 8007186:	4b45      	ldr	r3, [pc, #276]	; (800729c <tcp_slowtmr+0x594>)
 8007188:	f240 5271 	movw	r2, #1393	; 0x571
 800718c:	4946      	ldr	r1, [pc, #280]	; (80072a8 <tcp_slowtmr+0x5a0>)
 800718e:	4845      	ldr	r0, [pc, #276]	; (80072a4 <tcp_slowtmr+0x59c>)
 8007190:	f007 fdea 	bl	800ed68 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	4a3f      	ldr	r2, [pc, #252]	; (8007298 <tcp_slowtmr+0x590>)
 800719a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800719c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d013      	beq.n	80071cc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80071ac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	3304      	adds	r3, #4
 80071b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071b4:	8ad2      	ldrh	r2, [r2, #22]
 80071b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071b8:	8b09      	ldrh	r1, [r1, #24]
 80071ba:	9102      	str	r1, [sp, #8]
 80071bc:	9201      	str	r2, [sp, #4]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	462b      	mov	r3, r5
 80071c2:	4622      	mov	r2, r4
 80071c4:	4601      	mov	r1, r0
 80071c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80071c8:	f004 f988 	bl	800b4dc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80071cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80071d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d4:	7d1b      	ldrb	r3, [r3, #20]
 80071d6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80071dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80071e2:	6838      	ldr	r0, [r7, #0]
 80071e4:	f7ff f9f2 	bl	80065cc <tcp_free>

      tcp_active_pcbs_changed = 0;
 80071e8:	4b30      	ldr	r3, [pc, #192]	; (80072ac <tcp_slowtmr+0x5a4>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <tcp_slowtmr+0x4f6>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f06f 010c 	mvn.w	r1, #12
 80071fa:	68b8      	ldr	r0, [r7, #8]
 80071fc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80071fe:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <tcp_slowtmr+0x5a4>)
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d037      	beq.n	8007276 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007206:	e590      	b.n	8006d2a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	7f1b      	ldrb	r3, [r3, #28]
 8007216:	3301      	adds	r3, #1
 8007218:	b2da      	uxtb	r2, r3
 800721a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	7f1a      	ldrb	r2, [r3, #28]
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	7f5b      	ldrb	r3, [r3, #29]
 8007226:	429a      	cmp	r2, r3
 8007228:	d325      	bcc.n	8007276 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	2200      	movs	r2, #0
 800722e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007230:	4b1e      	ldr	r3, [pc, #120]	; (80072ac <tcp_slowtmr+0x5a4>)
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00b      	beq.n	8007258 <tcp_slowtmr+0x550>
 8007240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007248:	6912      	ldr	r2, [r2, #16]
 800724a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
 8007250:	4603      	mov	r3, r0
 8007252:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007256:	e002      	b.n	800725e <tcp_slowtmr+0x556>
 8007258:	2300      	movs	r3, #0
 800725a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800725e:	4b13      	ldr	r3, [pc, #76]	; (80072ac <tcp_slowtmr+0x5a4>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d000      	beq.n	8007268 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007266:	e560      	b.n	8006d2a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007268:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007272:	f003 fb7f 	bl	800a974 <tcp_output>
  while (pcb != NULL) {
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	2b00      	cmp	r3, #0
 800727a:	f47f ad5c 	bne.w	8006d36 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800727e:	2300      	movs	r3, #0
 8007280:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007282:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <tcp_slowtmr+0x5a8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007288:	e067      	b.n	800735a <tcp_slowtmr+0x652>
 800728a:	bf00      	nop
 800728c:	2000876c 	.word	0x2000876c
 8007290:	10624dd3 	.word	0x10624dd3
 8007294:	000124f8 	.word	0x000124f8
 8007298:	20008778 	.word	0x20008778
 800729c:	08010670 	.word	0x08010670
 80072a0:	08010aa8 	.word	0x08010aa8
 80072a4:	080106b4 	.word	0x080106b4
 80072a8:	08010ad4 	.word	0x08010ad4
 80072ac:	20008780 	.word	0x20008780
 80072b0:	2000877c 	.word	0x2000877c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	7d1b      	ldrb	r3, [r3, #20]
 80072b8:	2b0a      	cmp	r3, #10
 80072ba:	d006      	beq.n	80072ca <tcp_slowtmr+0x5c2>
 80072bc:	4b2b      	ldr	r3, [pc, #172]	; (800736c <tcp_slowtmr+0x664>)
 80072be:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80072c2:	492b      	ldr	r1, [pc, #172]	; (8007370 <tcp_slowtmr+0x668>)
 80072c4:	482b      	ldr	r0, [pc, #172]	; (8007374 <tcp_slowtmr+0x66c>)
 80072c6:	f007 fd4f 	bl	800ed68 <iprintf>
    pcb_remove = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80072d0:	4b29      	ldr	r3, [pc, #164]	; (8007378 <tcp_slowtmr+0x670>)
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2bf0      	cmp	r3, #240	; 0xf0
 80072dc:	d904      	bls.n	80072e8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80072de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e2:	3301      	adds	r3, #1
 80072e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80072e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d02f      	beq.n	8007350 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80072f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072f2:	f000 fb2b 	bl	800794c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d010      	beq.n	800731e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80072fc:	4b1f      	ldr	r3, [pc, #124]	; (800737c <tcp_slowtmr+0x674>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007302:	429a      	cmp	r2, r3
 8007304:	d106      	bne.n	8007314 <tcp_slowtmr+0x60c>
 8007306:	4b19      	ldr	r3, [pc, #100]	; (800736c <tcp_slowtmr+0x664>)
 8007308:	f240 52af 	movw	r2, #1455	; 0x5af
 800730c:	491c      	ldr	r1, [pc, #112]	; (8007380 <tcp_slowtmr+0x678>)
 800730e:	4819      	ldr	r0, [pc, #100]	; (8007374 <tcp_slowtmr+0x66c>)
 8007310:	f007 fd2a 	bl	800ed68 <iprintf>
        prev->next = pcb->next;
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	60da      	str	r2, [r3, #12]
 800731c:	e00f      	b.n	800733e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800731e:	4b17      	ldr	r3, [pc, #92]	; (800737c <tcp_slowtmr+0x674>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007324:	429a      	cmp	r2, r3
 8007326:	d006      	beq.n	8007336 <tcp_slowtmr+0x62e>
 8007328:	4b10      	ldr	r3, [pc, #64]	; (800736c <tcp_slowtmr+0x664>)
 800732a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800732e:	4915      	ldr	r1, [pc, #84]	; (8007384 <tcp_slowtmr+0x67c>)
 8007330:	4810      	ldr	r0, [pc, #64]	; (8007374 <tcp_slowtmr+0x66c>)
 8007332:	f007 fd19 	bl	800ed68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	4a10      	ldr	r2, [pc, #64]	; (800737c <tcp_slowtmr+0x674>)
 800733c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800733e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007340:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007348:	69f8      	ldr	r0, [r7, #28]
 800734a:	f7ff f93f 	bl	80065cc <tcp_free>
 800734e:	e004      	b.n	800735a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800735a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1a9      	bne.n	80072b4 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	3730      	adds	r7, #48	; 0x30
 8007366:	46bd      	mov	sp, r7
 8007368:	bdb0      	pop	{r4, r5, r7, pc}
 800736a:	bf00      	nop
 800736c:	08010670 	.word	0x08010670
 8007370:	08010b00 	.word	0x08010b00
 8007374:	080106b4 	.word	0x080106b4
 8007378:	2000876c 	.word	0x2000876c
 800737c:	2000877c 	.word	0x2000877c
 8007380:	08010b30 	.word	0x08010b30
 8007384:	08010b58 	.word	0x08010b58

08007388 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800738e:	4b2d      	ldr	r3, [pc, #180]	; (8007444 <tcp_fasttmr+0xbc>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	3301      	adds	r3, #1
 8007394:	b2da      	uxtb	r2, r3
 8007396:	4b2b      	ldr	r3, [pc, #172]	; (8007444 <tcp_fasttmr+0xbc>)
 8007398:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800739a:	4b2b      	ldr	r3, [pc, #172]	; (8007448 <tcp_fasttmr+0xc0>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80073a0:	e048      	b.n	8007434 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	7f9a      	ldrb	r2, [r3, #30]
 80073a6:	4b27      	ldr	r3, [pc, #156]	; (8007444 <tcp_fasttmr+0xbc>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d03f      	beq.n	800742e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80073ae:	4b25      	ldr	r3, [pc, #148]	; (8007444 <tcp_fasttmr+0xbc>)
 80073b0:	781a      	ldrb	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	8b5b      	ldrh	r3, [r3, #26]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d010      	beq.n	80073e4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	8b5b      	ldrh	r3, [r3, #26]
 80073c6:	f043 0302 	orr.w	r3, r3, #2
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f003 facf 	bl	800a974 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	8b5b      	ldrh	r3, [r3, #26]
 80073da:	f023 0303 	bic.w	r3, r3, #3
 80073de:	b29a      	uxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8b5b      	ldrh	r3, [r3, #26]
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d009      	beq.n	8007404 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	8b5b      	ldrh	r3, [r3, #26]
 80073f4:	f023 0308 	bic.w	r3, r3, #8
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fa78 	bl	80068f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007412:	4b0e      	ldr	r3, [pc, #56]	; (800744c <tcp_fasttmr+0xc4>)
 8007414:	2200      	movs	r2, #0
 8007416:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f819 	bl	8007450 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800741e:	4b0b      	ldr	r3, [pc, #44]	; (800744c <tcp_fasttmr+0xc4>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d000      	beq.n	8007428 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007426:	e7b8      	b.n	800739a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	607b      	str	r3, [r7, #4]
 800742c:	e002      	b.n	8007434 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1b3      	bne.n	80073a2 <tcp_fasttmr+0x1a>
    }
  }
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20008782 	.word	0x20008782
 8007448:	20008778 	.word	0x20008778
 800744c:	20008780 	.word	0x20008780

08007450 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007450:	b590      	push	{r4, r7, lr}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <tcp_process_refused_data+0x22>
 800745e:	4b37      	ldr	r3, [pc, #220]	; (800753c <tcp_process_refused_data+0xec>)
 8007460:	f240 6209 	movw	r2, #1545	; 0x609
 8007464:	4936      	ldr	r1, [pc, #216]	; (8007540 <tcp_process_refused_data+0xf0>)
 8007466:	4837      	ldr	r0, [pc, #220]	; (8007544 <tcp_process_refused_data+0xf4>)
 8007468:	f007 fc7e 	bl	800ed68 <iprintf>
 800746c:	f06f 030f 	mvn.w	r3, #15
 8007470:	e060      	b.n	8007534 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007476:	7b5b      	ldrb	r3, [r3, #13]
 8007478:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800747e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <tcp_process_refused_data+0x58>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6918      	ldr	r0, [r3, #16]
 800749a:	2300      	movs	r3, #0
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	47a0      	blx	r4
 80074a2:	4603      	mov	r3, r0
 80074a4:	73fb      	strb	r3, [r7, #15]
 80074a6:	e007      	b.n	80074b8 <tcp_process_refused_data+0x68>
 80074a8:	2300      	movs	r3, #0
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	2000      	movs	r0, #0
 80074b0:	f000 f8a4 	bl	80075fc <tcp_recv_null>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80074b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d12a      	bne.n	8007516 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d033      	beq.n	8007532 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80074d2:	d005      	beq.n	80074e0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d8:	3301      	adds	r3, #1
 80074da:	b29a      	uxth	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <tcp_process_refused_data+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6918      	ldr	r0, [r3, #16]
 80074f4:	2300      	movs	r3, #0
 80074f6:	2200      	movs	r2, #0
 80074f8:	6879      	ldr	r1, [r7, #4]
 80074fa:	47a0      	blx	r4
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
 8007500:	e001      	b.n	8007506 <tcp_process_refused_data+0xb6>
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800750a:	f113 0f0d 	cmn.w	r3, #13
 800750e:	d110      	bne.n	8007532 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007510:	f06f 030c 	mvn.w	r3, #12
 8007514:	e00e      	b.n	8007534 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800751a:	f113 0f0d 	cmn.w	r3, #13
 800751e:	d102      	bne.n	8007526 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007520:	f06f 030c 	mvn.w	r3, #12
 8007524:	e006      	b.n	8007534 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800752c:	f06f 0304 	mvn.w	r3, #4
 8007530:	e000      	b.n	8007534 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3714      	adds	r7, #20
 8007538:	46bd      	mov	sp, r7
 800753a:	bd90      	pop	{r4, r7, pc}
 800753c:	08010670 	.word	0x08010670
 8007540:	08010b80 	.word	0x08010b80
 8007544:	080106b4 	.word	0x080106b4

08007548 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007550:	e007      	b.n	8007562 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f80a 	bl	8007572 <tcp_seg_free>
    seg = next;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d1f4      	bne.n	8007552 <tcp_segs_free+0xa>
  }
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b082      	sub	sp, #8
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00c      	beq.n	800759a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d004      	beq.n	8007592 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	4618      	mov	r0, r3
 800758e:	f7fe fd6d 	bl	800606c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	2003      	movs	r0, #3
 8007596:	f7fd fef3 	bl	8005380 <memp_free>
  }
}
 800759a:	bf00      	nop
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <tcp_seg_copy+0x1c>
 80075b2:	4b0f      	ldr	r3, [pc, #60]	; (80075f0 <tcp_seg_copy+0x4c>)
 80075b4:	f240 6282 	movw	r2, #1666	; 0x682
 80075b8:	490e      	ldr	r1, [pc, #56]	; (80075f4 <tcp_seg_copy+0x50>)
 80075ba:	480f      	ldr	r0, [pc, #60]	; (80075f8 <tcp_seg_copy+0x54>)
 80075bc:	f007 fbd4 	bl	800ed68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80075c0:	2003      	movs	r0, #3
 80075c2:	f7fd fe6d 	bl	80052a0 <memp_malloc>
 80075c6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <tcp_seg_copy+0x2e>
    return NULL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e00a      	b.n	80075e8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80075d2:	2210      	movs	r2, #16
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f007 fca1 	bl	800ef1e <memcpy>
  pbuf_ref(cseg->p);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe fde3 	bl	80061ac <pbuf_ref>
  return cseg;
 80075e6:	68fb      	ldr	r3, [r7, #12]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	08010670 	.word	0x08010670
 80075f4:	08010bc4 	.word	0x08010bc4
 80075f8:	080106b4 	.word	0x080106b4

080075fc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d109      	bne.n	8007624 <tcp_recv_null+0x28>
 8007610:	4b12      	ldr	r3, [pc, #72]	; (800765c <tcp_recv_null+0x60>)
 8007612:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007616:	4912      	ldr	r1, [pc, #72]	; (8007660 <tcp_recv_null+0x64>)
 8007618:	4812      	ldr	r0, [pc, #72]	; (8007664 <tcp_recv_null+0x68>)
 800761a:	f007 fba5 	bl	800ed68 <iprintf>
 800761e:	f06f 030f 	mvn.w	r3, #15
 8007622:	e016      	b.n	8007652 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d009      	beq.n	800763e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	891b      	ldrh	r3, [r3, #8]
 800762e:	4619      	mov	r1, r3
 8007630:	68b8      	ldr	r0, [r7, #8]
 8007632:	f7ff fb19 	bl	8006c68 <tcp_recved>
    pbuf_free(p);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fe fd18 	bl	800606c <pbuf_free>
 800763c:	e008      	b.n	8007650 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800763e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d104      	bne.n	8007650 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007646:	68b8      	ldr	r0, [r7, #8]
 8007648:	f7ff f9be 	bl	80069c8 <tcp_close>
 800764c:	4603      	mov	r3, r0
 800764e:	e000      	b.n	8007652 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	08010670 	.word	0x08010670
 8007660:	08010be0 	.word	0x08010be0
 8007664:	080106b4 	.word	0x080106b4

08007668 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007676:	2b00      	cmp	r3, #0
 8007678:	db01      	blt.n	800767e <tcp_kill_prio+0x16>
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	e000      	b.n	8007680 <tcp_kill_prio+0x18>
 800767e:	237f      	movs	r3, #127	; 0x7f
 8007680:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d034      	beq.n	80076f2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007688:	7afb      	ldrb	r3, [r7, #11]
 800768a:	3b01      	subs	r3, #1
 800768c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800768e:	2300      	movs	r3, #0
 8007690:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007692:	2300      	movs	r3, #0
 8007694:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007696:	4b19      	ldr	r3, [pc, #100]	; (80076fc <tcp_kill_prio+0x94>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	e01f      	b.n	80076de <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	7d5b      	ldrb	r3, [r3, #21]
 80076a2:	7afa      	ldrb	r2, [r7, #11]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d80c      	bhi.n	80076c2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80076ac:	7afa      	ldrb	r2, [r7, #11]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d112      	bne.n	80076d8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80076b2:	4b13      	ldr	r3, [pc, #76]	; (8007700 <tcp_kill_prio+0x98>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d80a      	bhi.n	80076d8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80076c2:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <tcp_kill_prio+0x98>)
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	7d5b      	ldrb	r3, [r3, #21]
 80076d6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1dc      	bne.n	800769e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80076ea:	6938      	ldr	r0, [r7, #16]
 80076ec:	f7ff fa56 	bl	8006b9c <tcp_abort>
 80076f0:	e000      	b.n	80076f4 <tcp_kill_prio+0x8c>
    return;
 80076f2:	bf00      	nop
  }
}
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20008778 	.word	0x20008778
 8007700:	2000876c 	.word	0x2000876c

08007704 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	2b08      	cmp	r3, #8
 8007712:	d009      	beq.n	8007728 <tcp_kill_state+0x24>
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	2b09      	cmp	r3, #9
 8007718:	d006      	beq.n	8007728 <tcp_kill_state+0x24>
 800771a:	4b1a      	ldr	r3, [pc, #104]	; (8007784 <tcp_kill_state+0x80>)
 800771c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007720:	4919      	ldr	r1, [pc, #100]	; (8007788 <tcp_kill_state+0x84>)
 8007722:	481a      	ldr	r0, [pc, #104]	; (800778c <tcp_kill_state+0x88>)
 8007724:	f007 fb20 	bl	800ed68 <iprintf>

  inactivity = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007730:	4b17      	ldr	r3, [pc, #92]	; (8007790 <tcp_kill_state+0x8c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e017      	b.n	8007768 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	7d1b      	ldrb	r3, [r3, #20]
 800773c:	79fa      	ldrb	r2, [r7, #7]
 800773e:	429a      	cmp	r2, r3
 8007740:	d10f      	bne.n	8007762 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007742:	4b14      	ldr	r3, [pc, #80]	; (8007794 <tcp_kill_state+0x90>)
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	429a      	cmp	r2, r3
 8007750:	d807      	bhi.n	8007762 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007752:	4b10      	ldr	r3, [pc, #64]	; (8007794 <tcp_kill_state+0x90>)
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	617b      	str	r3, [r7, #20]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e4      	bne.n	8007738 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007774:	2100      	movs	r1, #0
 8007776:	6938      	ldr	r0, [r7, #16]
 8007778:	f7ff f952 	bl	8006a20 <tcp_abandon>
  }
}
 800777c:	bf00      	nop
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	08010670 	.word	0x08010670
 8007788:	08010bfc 	.word	0x08010bfc
 800778c:	080106b4 	.word	0x080106b4
 8007790:	20008778 	.word	0x20008778
 8007794:	2000876c 	.word	0x2000876c

08007798 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077a6:	4b12      	ldr	r3, [pc, #72]	; (80077f0 <tcp_kill_timewait+0x58>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	e012      	b.n	80077d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80077ae:	4b11      	ldr	r3, [pc, #68]	; (80077f4 <tcp_kill_timewait+0x5c>)
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d807      	bhi.n	80077ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80077be:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <tcp_kill_timewait+0x5c>)
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e9      	bne.n	80077ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80077e0:	68b8      	ldr	r0, [r7, #8]
 80077e2:	f7ff f9db 	bl	8006b9c <tcp_abort>
  }
}
 80077e6:	bf00      	nop
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	2000877c 	.word	0x2000877c
 80077f4:	2000876c 	.word	0x2000876c

080077f8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80077fe:	4b10      	ldr	r3, [pc, #64]	; (8007840 <tcp_handle_closepend+0x48>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007804:	e014      	b.n	8007830 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	8b5b      	ldrh	r3, [r3, #26]
 8007810:	f003 0308 	and.w	r3, r3, #8
 8007814:	2b00      	cmp	r3, #0
 8007816:	d009      	beq.n	800782c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8b5b      	ldrh	r3, [r3, #26]
 800781c:	f023 0308 	bic.w	r3, r3, #8
 8007820:	b29a      	uxth	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff f864 	bl	80068f4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e7      	bne.n	8007806 <tcp_handle_closepend+0xe>
  }
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	20008778 	.word	0x20008778

08007844 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800784e:	2001      	movs	r0, #1
 8007850:	f7fd fd26 	bl	80052a0 <memp_malloc>
 8007854:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d126      	bne.n	80078aa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800785c:	f7ff ffcc 	bl	80077f8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007860:	f7ff ff9a 	bl	8007798 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007864:	2001      	movs	r0, #1
 8007866:	f7fd fd1b 	bl	80052a0 <memp_malloc>
 800786a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d11b      	bne.n	80078aa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007872:	2009      	movs	r0, #9
 8007874:	f7ff ff46 	bl	8007704 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007878:	2001      	movs	r0, #1
 800787a:	f7fd fd11 	bl	80052a0 <memp_malloc>
 800787e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d111      	bne.n	80078aa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007886:	2008      	movs	r0, #8
 8007888:	f7ff ff3c 	bl	8007704 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800788c:	2001      	movs	r0, #1
 800788e:	f7fd fd07 	bl	80052a0 <memp_malloc>
 8007892:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d107      	bne.n	80078aa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800789a:	79fb      	ldrb	r3, [r7, #7]
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff fee3 	bl	8007668 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80078a2:	2001      	movs	r0, #1
 80078a4:	f7fd fcfc 	bl	80052a0 <memp_malloc>
 80078a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d03f      	beq.n	8007930 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80078b0:	229c      	movs	r2, #156	; 0x9c
 80078b2:	2100      	movs	r1, #0
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f007 fabc 	bl	800ee32 <memset>
    pcb->prio = prio;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	79fa      	ldrb	r2, [r7, #7]
 80078be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80078c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80078d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	22ff      	movs	r2, #255	; 0xff
 80078de:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80078e6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2206      	movs	r2, #6
 80078ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2206      	movs	r2, #6
 80078f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078fc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007906:	4b0d      	ldr	r3, [pc, #52]	; (800793c <tcp_alloc+0xf8>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800790e:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <tcp_alloc+0xfc>)
 8007910:	781a      	ldrb	r2, [r3, #0]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800791c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4a08      	ldr	r2, [pc, #32]	; (8007944 <tcp_alloc+0x100>)
 8007924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4a07      	ldr	r2, [pc, #28]	; (8007948 <tcp_alloc+0x104>)
 800792c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007930:	68fb      	ldr	r3, [r7, #12]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	2000876c 	.word	0x2000876c
 8007940:	20008782 	.word	0x20008782
 8007944:	080075fd 	.word	0x080075fd
 8007948:	006ddd00 	.word	0x006ddd00

0800794c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d107      	bne.n	800796a <tcp_pcb_purge+0x1e>
 800795a:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <tcp_pcb_purge+0x94>)
 800795c:	f640 0251 	movw	r2, #2129	; 0x851
 8007960:	4920      	ldr	r1, [pc, #128]	; (80079e4 <tcp_pcb_purge+0x98>)
 8007962:	4821      	ldr	r0, [pc, #132]	; (80079e8 <tcp_pcb_purge+0x9c>)
 8007964:	f007 fa00 	bl	800ed68 <iprintf>
 8007968:	e037      	b.n	80079da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	7d1b      	ldrb	r3, [r3, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d033      	beq.n	80079da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8007976:	2b0a      	cmp	r3, #10
 8007978:	d02f      	beq.n	80079da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800797e:	2b01      	cmp	r3, #1
 8007980:	d02b      	beq.n	80079da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fb6c 	bl	800606c <pbuf_free>
      pcb->refused_data = NULL;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f986 	bl	8007cb4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079ae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7ff fdc7 	bl	8007548 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff fdc2 	bl	8007548 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	08010670 	.word	0x08010670
 80079e4:	08010cbc 	.word	0x08010cbc
 80079e8:	080106b4 	.word	0x080106b4

080079ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <tcp_pcb_remove+0x1e>
 80079fc:	4b3e      	ldr	r3, [pc, #248]	; (8007af8 <tcp_pcb_remove+0x10c>)
 80079fe:	f640 0283 	movw	r2, #2179	; 0x883
 8007a02:	493e      	ldr	r1, [pc, #248]	; (8007afc <tcp_pcb_remove+0x110>)
 8007a04:	483e      	ldr	r0, [pc, #248]	; (8007b00 <tcp_pcb_remove+0x114>)
 8007a06:	f007 f9af 	bl	800ed68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <tcp_pcb_remove+0x32>
 8007a10:	4b39      	ldr	r3, [pc, #228]	; (8007af8 <tcp_pcb_remove+0x10c>)
 8007a12:	f640 0284 	movw	r2, #2180	; 0x884
 8007a16:	493b      	ldr	r1, [pc, #236]	; (8007b04 <tcp_pcb_remove+0x118>)
 8007a18:	4839      	ldr	r0, [pc, #228]	; (8007b00 <tcp_pcb_remove+0x114>)
 8007a1a:	f007 f9a5 	bl	800ed68 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d105      	bne.n	8007a34 <tcp_pcb_remove+0x48>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68da      	ldr	r2, [r3, #12]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	e013      	b.n	8007a5c <tcp_pcb_remove+0x70>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	e00c      	b.n	8007a56 <tcp_pcb_remove+0x6a>
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d104      	bne.n	8007a50 <tcp_pcb_remove+0x64>
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	60da      	str	r2, [r3, #12]
 8007a4e:	e005      	b.n	8007a5c <tcp_pcb_remove+0x70>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1ef      	bne.n	8007a3c <tcp_pcb_remove+0x50>
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007a62:	6838      	ldr	r0, [r7, #0]
 8007a64:	f7ff ff72 	bl	800794c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	7d1b      	ldrb	r3, [r3, #20]
 8007a6c:	2b0a      	cmp	r3, #10
 8007a6e:	d013      	beq.n	8007a98 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d00f      	beq.n	8007a98 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	8b5b      	ldrh	r3, [r3, #26]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d009      	beq.n	8007a98 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	8b5b      	ldrh	r3, [r3, #26]
 8007a88:	f043 0302 	orr.w	r3, r3, #2
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007a92:	6838      	ldr	r0, [r7, #0]
 8007a94:	f002 ff6e 	bl	800a974 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	7d1b      	ldrb	r3, [r3, #20]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d020      	beq.n	8007ae2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d006      	beq.n	8007ab6 <tcp_pcb_remove+0xca>
 8007aa8:	4b13      	ldr	r3, [pc, #76]	; (8007af8 <tcp_pcb_remove+0x10c>)
 8007aaa:	f640 0293 	movw	r2, #2195	; 0x893
 8007aae:	4916      	ldr	r1, [pc, #88]	; (8007b08 <tcp_pcb_remove+0x11c>)
 8007ab0:	4813      	ldr	r0, [pc, #76]	; (8007b00 <tcp_pcb_remove+0x114>)
 8007ab2:	f007 f959 	bl	800ed68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d006      	beq.n	8007acc <tcp_pcb_remove+0xe0>
 8007abe:	4b0e      	ldr	r3, [pc, #56]	; (8007af8 <tcp_pcb_remove+0x10c>)
 8007ac0:	f640 0294 	movw	r2, #2196	; 0x894
 8007ac4:	4911      	ldr	r1, [pc, #68]	; (8007b0c <tcp_pcb_remove+0x120>)
 8007ac6:	480e      	ldr	r0, [pc, #56]	; (8007b00 <tcp_pcb_remove+0x114>)
 8007ac8:	f007 f94e 	bl	800ed68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d006      	beq.n	8007ae2 <tcp_pcb_remove+0xf6>
 8007ad4:	4b08      	ldr	r3, [pc, #32]	; (8007af8 <tcp_pcb_remove+0x10c>)
 8007ad6:	f640 0296 	movw	r2, #2198	; 0x896
 8007ada:	490d      	ldr	r1, [pc, #52]	; (8007b10 <tcp_pcb_remove+0x124>)
 8007adc:	4808      	ldr	r0, [pc, #32]	; (8007b00 <tcp_pcb_remove+0x114>)
 8007ade:	f007 f943 	bl	800ed68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2200      	movs	r2, #0
 8007aec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	08010670 	.word	0x08010670
 8007afc:	08010cd8 	.word	0x08010cd8
 8007b00:	080106b4 	.word	0x080106b4
 8007b04:	08010cf4 	.word	0x08010cf4
 8007b08:	08010d14 	.word	0x08010d14
 8007b0c:	08010d2c 	.word	0x08010d2c
 8007b10:	08010d48 	.word	0x08010d48

08007b14 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d106      	bne.n	8007b30 <tcp_next_iss+0x1c>
 8007b22:	4b0a      	ldr	r3, [pc, #40]	; (8007b4c <tcp_next_iss+0x38>)
 8007b24:	f640 02af 	movw	r2, #2223	; 0x8af
 8007b28:	4909      	ldr	r1, [pc, #36]	; (8007b50 <tcp_next_iss+0x3c>)
 8007b2a:	480a      	ldr	r0, [pc, #40]	; (8007b54 <tcp_next_iss+0x40>)
 8007b2c:	f007 f91c 	bl	800ed68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007b30:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <tcp_next_iss+0x44>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	4b09      	ldr	r3, [pc, #36]	; (8007b5c <tcp_next_iss+0x48>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4413      	add	r3, r2
 8007b3a:	4a07      	ldr	r2, [pc, #28]	; (8007b58 <tcp_next_iss+0x44>)
 8007b3c:	6013      	str	r3, [r2, #0]
  return iss;
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <tcp_next_iss+0x44>)
 8007b40:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	08010670 	.word	0x08010670
 8007b50:	08010d60 	.word	0x08010d60
 8007b54:	080106b4 	.word	0x080106b4
 8007b58:	20000024 	.word	0x20000024
 8007b5c:	2000876c 	.word	0x2000876c

08007b60 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <tcp_eff_send_mss_netif+0x22>
 8007b74:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <tcp_eff_send_mss_netif+0x68>)
 8007b76:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007b7a:	4914      	ldr	r1, [pc, #80]	; (8007bcc <tcp_eff_send_mss_netif+0x6c>)
 8007b7c:	4814      	ldr	r0, [pc, #80]	; (8007bd0 <tcp_eff_send_mss_netif+0x70>)
 8007b7e:	f007 f8f3 	bl	800ed68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8007b88:	89fb      	ldrh	r3, [r7, #14]
 8007b8a:	e019      	b.n	8007bc0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007b90:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007b92:	8afb      	ldrh	r3, [r7, #22]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d012      	beq.n	8007bbe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8007b98:	2328      	movs	r3, #40	; 0x28
 8007b9a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8007b9c:	8afa      	ldrh	r2, [r7, #22]
 8007b9e:	8abb      	ldrh	r3, [r7, #20]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d904      	bls.n	8007bae <tcp_eff_send_mss_netif+0x4e>
 8007ba4:	8afa      	ldrh	r2, [r7, #22]
 8007ba6:	8abb      	ldrh	r3, [r7, #20]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	e000      	b.n	8007bb0 <tcp_eff_send_mss_netif+0x50>
 8007bae:	2300      	movs	r3, #0
 8007bb0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007bb2:	8a7a      	ldrh	r2, [r7, #18]
 8007bb4:	89fb      	ldrh	r3, [r7, #14]
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	bf28      	it	cs
 8007bba:	4613      	movcs	r3, r2
 8007bbc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007bbe:	89fb      	ldrh	r3, [r7, #14]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	08010670 	.word	0x08010670
 8007bcc:	08010d7c 	.word	0x08010d7c
 8007bd0:	080106b4 	.word	0x080106b4

08007bd4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d119      	bne.n	8007c1c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007be8:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007bea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007bee:	4910      	ldr	r1, [pc, #64]	; (8007c30 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007bf0:	4810      	ldr	r0, [pc, #64]	; (8007c34 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8007bf2:	f007 f8b9 	bl	800ed68 <iprintf>

  while (pcb != NULL) {
 8007bf6:	e011      	b.n	8007c1c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d108      	bne.n	8007c16 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7fe ffc6 	bl	8006b9c <tcp_abort>
      pcb = next;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	e002      	b.n	8007c1c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1ea      	bne.n	8007bf8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007c22:	bf00      	nop
 8007c24:	bf00      	nop
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	08010670 	.word	0x08010670
 8007c30:	08010da4 	.word	0x08010da4
 8007c34:	080106b4 	.word	0x080106b4

08007c38 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d02a      	beq.n	8007c9e <tcp_netif_ip_addr_changed+0x66>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d026      	beq.n	8007c9e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007c50:	4b15      	ldr	r3, [pc, #84]	; (8007ca8 <tcp_netif_ip_addr_changed+0x70>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4619      	mov	r1, r3
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff ffbc 	bl	8007bd4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007c5c:	4b13      	ldr	r3, [pc, #76]	; (8007cac <tcp_netif_ip_addr_changed+0x74>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4619      	mov	r1, r3
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff ffb6 	bl	8007bd4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d017      	beq.n	8007c9e <tcp_netif_ip_addr_changed+0x66>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d013      	beq.n	8007c9e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007c76:	4b0e      	ldr	r3, [pc, #56]	; (8007cb0 <tcp_netif_ip_addr_changed+0x78>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	e00c      	b.n	8007c98 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d103      	bne.n	8007c92 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1ef      	bne.n	8007c7e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	20008778 	.word	0x20008778
 8007cac:	20008770 	.word	0x20008770
 8007cb0:	20008774 	.word	0x20008774

08007cb4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7ff fc3d 	bl	8007548 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007cdc:	b590      	push	{r4, r7, lr}
 8007cde:	b08d      	sub	sp, #52	; 0x34
 8007ce0:	af04      	add	r7, sp, #16
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d105      	bne.n	8007cf8 <tcp_input+0x1c>
 8007cec:	4b9b      	ldr	r3, [pc, #620]	; (8007f5c <tcp_input+0x280>)
 8007cee:	2283      	movs	r2, #131	; 0x83
 8007cf0:	499b      	ldr	r1, [pc, #620]	; (8007f60 <tcp_input+0x284>)
 8007cf2:	489c      	ldr	r0, [pc, #624]	; (8007f64 <tcp_input+0x288>)
 8007cf4:	f007 f838 	bl	800ed68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	4a9a      	ldr	r2, [pc, #616]	; (8007f68 <tcp_input+0x28c>)
 8007cfe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	895b      	ldrh	r3, [r3, #10]
 8007d04:	2b13      	cmp	r3, #19
 8007d06:	f240 83d1 	bls.w	80084ac <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007d0a:	4b98      	ldr	r3, [pc, #608]	; (8007f6c <tcp_input+0x290>)
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	4a97      	ldr	r2, [pc, #604]	; (8007f6c <tcp_input+0x290>)
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f005 ffd1 	bl	800dcbc <ip4_addr_isbroadcast_u32>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f040 83c7 	bne.w	80084b0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007d22:	4b92      	ldr	r3, [pc, #584]	; (8007f6c <tcp_input+0x290>)
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007d2a:	2be0      	cmp	r3, #224	; 0xe0
 8007d2c:	f000 83c0 	beq.w	80084b0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007d30:	4b8d      	ldr	r3, [pc, #564]	; (8007f68 <tcp_input+0x28c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	899b      	ldrh	r3, [r3, #12]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fc fe39 	bl	80049b0 <lwip_htons>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	0b1b      	lsrs	r3, r3, #12
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007d4a:	7cbb      	ldrb	r3, [r7, #18]
 8007d4c:	2b13      	cmp	r3, #19
 8007d4e:	f240 83b1 	bls.w	80084b4 <tcp_input+0x7d8>
 8007d52:	7cbb      	ldrb	r3, [r7, #18]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	891b      	ldrh	r3, [r3, #8]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	f200 83aa 	bhi.w	80084b4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007d60:	7cbb      	ldrb	r3, [r7, #18]
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b14      	subs	r3, #20
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	4b81      	ldr	r3, [pc, #516]	; (8007f70 <tcp_input+0x294>)
 8007d6a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007d6c:	4b81      	ldr	r3, [pc, #516]	; (8007f74 <tcp_input+0x298>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	895a      	ldrh	r2, [r3, #10]
 8007d76:	7cbb      	ldrb	r3, [r7, #18]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d309      	bcc.n	8007d92 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007d7e:	4b7c      	ldr	r3, [pc, #496]	; (8007f70 <tcp_input+0x294>)
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	4b7d      	ldr	r3, [pc, #500]	; (8007f78 <tcp_input+0x29c>)
 8007d84:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007d86:	7cbb      	ldrb	r3, [r7, #18]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fe f8e8 	bl	8005f60 <pbuf_remove_header>
 8007d90:	e04e      	b.n	8007e30 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d105      	bne.n	8007da6 <tcp_input+0xca>
 8007d9a:	4b70      	ldr	r3, [pc, #448]	; (8007f5c <tcp_input+0x280>)
 8007d9c:	22c2      	movs	r2, #194	; 0xc2
 8007d9e:	4977      	ldr	r1, [pc, #476]	; (8007f7c <tcp_input+0x2a0>)
 8007da0:	4870      	ldr	r0, [pc, #448]	; (8007f64 <tcp_input+0x288>)
 8007da2:	f006 ffe1 	bl	800ed68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007da6:	2114      	movs	r1, #20
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe f8d9 	bl	8005f60 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	895a      	ldrh	r2, [r3, #10]
 8007db2:	4b71      	ldr	r3, [pc, #452]	; (8007f78 <tcp_input+0x29c>)
 8007db4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007db6:	4b6e      	ldr	r3, [pc, #440]	; (8007f70 <tcp_input+0x294>)
 8007db8:	881a      	ldrh	r2, [r3, #0]
 8007dba:	4b6f      	ldr	r3, [pc, #444]	; (8007f78 <tcp_input+0x29c>)
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007dc2:	4b6d      	ldr	r3, [pc, #436]	; (8007f78 <tcp_input+0x29c>)
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7fe f8c9 	bl	8005f60 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	895b      	ldrh	r3, [r3, #10]
 8007dd4:	8a3a      	ldrh	r2, [r7, #16]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	f200 836e 	bhi.w	80084b8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	4a64      	ldr	r2, [pc, #400]	; (8007f74 <tcp_input+0x298>)
 8007de4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	8a3a      	ldrh	r2, [r7, #16]
 8007dec:	4611      	mov	r1, r2
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe f8b6 	bl	8005f60 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	891a      	ldrh	r2, [r3, #8]
 8007df8:	8a3b      	ldrh	r3, [r7, #16]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	895b      	ldrh	r3, [r3, #10]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d005      	beq.n	8007e16 <tcp_input+0x13a>
 8007e0a:	4b54      	ldr	r3, [pc, #336]	; (8007f5c <tcp_input+0x280>)
 8007e0c:	22df      	movs	r2, #223	; 0xdf
 8007e0e:	495c      	ldr	r1, [pc, #368]	; (8007f80 <tcp_input+0x2a4>)
 8007e10:	4854      	ldr	r0, [pc, #336]	; (8007f64 <tcp_input+0x288>)
 8007e12:	f006 ffa9 	bl	800ed68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	891a      	ldrh	r2, [r3, #8]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	891b      	ldrh	r3, [r3, #8]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d005      	beq.n	8007e30 <tcp_input+0x154>
 8007e24:	4b4d      	ldr	r3, [pc, #308]	; (8007f5c <tcp_input+0x280>)
 8007e26:	22e0      	movs	r2, #224	; 0xe0
 8007e28:	4956      	ldr	r1, [pc, #344]	; (8007f84 <tcp_input+0x2a8>)
 8007e2a:	484e      	ldr	r0, [pc, #312]	; (8007f64 <tcp_input+0x288>)
 8007e2c:	f006 ff9c 	bl	800ed68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007e30:	4b4d      	ldr	r3, [pc, #308]	; (8007f68 <tcp_input+0x28c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	4a4b      	ldr	r2, [pc, #300]	; (8007f68 <tcp_input+0x28c>)
 8007e3a:	6814      	ldr	r4, [r2, #0]
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fc fdb7 	bl	80049b0 <lwip_htons>
 8007e42:	4603      	mov	r3, r0
 8007e44:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007e46:	4b48      	ldr	r3, [pc, #288]	; (8007f68 <tcp_input+0x28c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	885b      	ldrh	r3, [r3, #2]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	4a46      	ldr	r2, [pc, #280]	; (8007f68 <tcp_input+0x28c>)
 8007e50:	6814      	ldr	r4, [r2, #0]
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7fc fdac 	bl	80049b0 <lwip_htons>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007e5c:	4b42      	ldr	r3, [pc, #264]	; (8007f68 <tcp_input+0x28c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	4a41      	ldr	r2, [pc, #260]	; (8007f68 <tcp_input+0x28c>)
 8007e64:	6814      	ldr	r4, [r2, #0]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fc fdb7 	bl	80049da <lwip_htonl>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	6863      	ldr	r3, [r4, #4]
 8007e72:	4a45      	ldr	r2, [pc, #276]	; (8007f88 <tcp_input+0x2ac>)
 8007e74:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007e76:	4b3c      	ldr	r3, [pc, #240]	; (8007f68 <tcp_input+0x28c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	4a3a      	ldr	r2, [pc, #232]	; (8007f68 <tcp_input+0x28c>)
 8007e7e:	6814      	ldr	r4, [r2, #0]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fc fdaa 	bl	80049da <lwip_htonl>
 8007e86:	4603      	mov	r3, r0
 8007e88:	60a3      	str	r3, [r4, #8]
 8007e8a:	68a3      	ldr	r3, [r4, #8]
 8007e8c:	4a3f      	ldr	r2, [pc, #252]	; (8007f8c <tcp_input+0x2b0>)
 8007e8e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007e90:	4b35      	ldr	r3, [pc, #212]	; (8007f68 <tcp_input+0x28c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	89db      	ldrh	r3, [r3, #14]
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	4a33      	ldr	r2, [pc, #204]	; (8007f68 <tcp_input+0x28c>)
 8007e9a:	6814      	ldr	r4, [r2, #0]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fc fd87 	bl	80049b0 <lwip_htons>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007ea6:	4b30      	ldr	r3, [pc, #192]	; (8007f68 <tcp_input+0x28c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	899b      	ldrh	r3, [r3, #12]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fc fd7e 	bl	80049b0 <lwip_htons>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	4b34      	ldr	r3, [pc, #208]	; (8007f90 <tcp_input+0x2b4>)
 8007ec0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	891a      	ldrh	r2, [r3, #8]
 8007ec6:	4b33      	ldr	r3, [pc, #204]	; (8007f94 <tcp_input+0x2b8>)
 8007ec8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007eca:	4b31      	ldr	r3, [pc, #196]	; (8007f90 <tcp_input+0x2b4>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00c      	beq.n	8007ef0 <tcp_input+0x214>
    tcplen++;
 8007ed6:	4b2f      	ldr	r3, [pc, #188]	; (8007f94 <tcp_input+0x2b8>)
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	3301      	adds	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <tcp_input+0x2b8>)
 8007ee0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	891a      	ldrh	r2, [r3, #8]
 8007ee6:	4b2b      	ldr	r3, [pc, #172]	; (8007f94 <tcp_input+0x2b8>)
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	f200 82e6 	bhi.w	80084bc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ef4:	4b28      	ldr	r3, [pc, #160]	; (8007f98 <tcp_input+0x2bc>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	61fb      	str	r3, [r7, #28]
 8007efa:	e09d      	b.n	8008038 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	7d1b      	ldrb	r3, [r3, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d105      	bne.n	8007f10 <tcp_input+0x234>
 8007f04:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <tcp_input+0x280>)
 8007f06:	22fb      	movs	r2, #251	; 0xfb
 8007f08:	4924      	ldr	r1, [pc, #144]	; (8007f9c <tcp_input+0x2c0>)
 8007f0a:	4816      	ldr	r0, [pc, #88]	; (8007f64 <tcp_input+0x288>)
 8007f0c:	f006 ff2c 	bl	800ed68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	7d1b      	ldrb	r3, [r3, #20]
 8007f14:	2b0a      	cmp	r3, #10
 8007f16:	d105      	bne.n	8007f24 <tcp_input+0x248>
 8007f18:	4b10      	ldr	r3, [pc, #64]	; (8007f5c <tcp_input+0x280>)
 8007f1a:	22fc      	movs	r2, #252	; 0xfc
 8007f1c:	4920      	ldr	r1, [pc, #128]	; (8007fa0 <tcp_input+0x2c4>)
 8007f1e:	4811      	ldr	r0, [pc, #68]	; (8007f64 <tcp_input+0x288>)
 8007f20:	f006 ff22 	bl	800ed68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	7d1b      	ldrb	r3, [r3, #20]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d105      	bne.n	8007f38 <tcp_input+0x25c>
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <tcp_input+0x280>)
 8007f2e:	22fd      	movs	r2, #253	; 0xfd
 8007f30:	491c      	ldr	r1, [pc, #112]	; (8007fa4 <tcp_input+0x2c8>)
 8007f32:	480c      	ldr	r0, [pc, #48]	; (8007f64 <tcp_input+0x288>)
 8007f34:	f006 ff18 	bl	800ed68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	7a1b      	ldrb	r3, [r3, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d033      	beq.n	8007fa8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	7a1a      	ldrb	r2, [r3, #8]
 8007f44:	4b09      	ldr	r3, [pc, #36]	; (8007f6c <tcp_input+0x290>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d029      	beq.n	8007fa8 <tcp_input+0x2cc>
      prev = pcb;
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	61bb      	str	r3, [r7, #24]
      continue;
 8007f58:	e06b      	b.n	8008032 <tcp_input+0x356>
 8007f5a:	bf00      	nop
 8007f5c:	08010dd8 	.word	0x08010dd8
 8007f60:	08010e0c 	.word	0x08010e0c
 8007f64:	08010e24 	.word	0x08010e24
 8007f68:	20008794 	.word	0x20008794
 8007f6c:	200051fc 	.word	0x200051fc
 8007f70:	20008798 	.word	0x20008798
 8007f74:	2000879c 	.word	0x2000879c
 8007f78:	2000879a 	.word	0x2000879a
 8007f7c:	08010e4c 	.word	0x08010e4c
 8007f80:	08010e5c 	.word	0x08010e5c
 8007f84:	08010e68 	.word	0x08010e68
 8007f88:	200087a4 	.word	0x200087a4
 8007f8c:	200087a8 	.word	0x200087a8
 8007f90:	200087b0 	.word	0x200087b0
 8007f94:	200087ae 	.word	0x200087ae
 8007f98:	20008778 	.word	0x20008778
 8007f9c:	08010e88 	.word	0x08010e88
 8007fa0:	08010eb0 	.word	0x08010eb0
 8007fa4:	08010edc 	.word	0x08010edc
    }

    if (pcb->remote_port == tcphdr->src &&
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	8b1a      	ldrh	r2, [r3, #24]
 8007fac:	4b72      	ldr	r3, [pc, #456]	; (8008178 <tcp_input+0x49c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d13a      	bne.n	800802e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	8ada      	ldrh	r2, [r3, #22]
 8007fbc:	4b6e      	ldr	r3, [pc, #440]	; (8008178 <tcp_input+0x49c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	885b      	ldrh	r3, [r3, #2]
 8007fc2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d132      	bne.n	800802e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007fc8:	69fb      	ldr	r3, [r7, #28]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	4b6b      	ldr	r3, [pc, #428]	; (800817c <tcp_input+0x4a0>)
 8007fce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d12c      	bne.n	800802e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	4b68      	ldr	r3, [pc, #416]	; (800817c <tcp_input+0x4a0>)
 8007fda:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d126      	bne.n	800802e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d106      	bne.n	8007ff8 <tcp_input+0x31c>
 8007fea:	4b65      	ldr	r3, [pc, #404]	; (8008180 <tcp_input+0x4a4>)
 8007fec:	f240 120d 	movw	r2, #269	; 0x10d
 8007ff0:	4964      	ldr	r1, [pc, #400]	; (8008184 <tcp_input+0x4a8>)
 8007ff2:	4865      	ldr	r0, [pc, #404]	; (8008188 <tcp_input+0x4ac>)
 8007ff4:	f006 feb8 	bl	800ed68 <iprintf>
      if (prev != NULL) {
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <tcp_input+0x338>
        prev->next = pcb->next;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008006:	4b61      	ldr	r3, [pc, #388]	; (800818c <tcp_input+0x4b0>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800800e:	4a5f      	ldr	r2, [pc, #380]	; (800818c <tcp_input+0x4b0>)
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008014:	69fb      	ldr	r3, [r7, #28]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	69fa      	ldr	r2, [r7, #28]
 800801a:	429a      	cmp	r2, r3
 800801c:	d111      	bne.n	8008042 <tcp_input+0x366>
 800801e:	4b58      	ldr	r3, [pc, #352]	; (8008180 <tcp_input+0x4a4>)
 8008020:	f240 1215 	movw	r2, #277	; 0x115
 8008024:	495a      	ldr	r1, [pc, #360]	; (8008190 <tcp_input+0x4b4>)
 8008026:	4858      	ldr	r0, [pc, #352]	; (8008188 <tcp_input+0x4ac>)
 8008028:	f006 fe9e 	bl	800ed68 <iprintf>
      break;
 800802c:	e009      	b.n	8008042 <tcp_input+0x366>
    }
    prev = pcb;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	61fb      	str	r3, [r7, #28]
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	2b00      	cmp	r3, #0
 800803c:	f47f af5e 	bne.w	8007efc <tcp_input+0x220>
 8008040:	e000      	b.n	8008044 <tcp_input+0x368>
      break;
 8008042:	bf00      	nop
  }

  if (pcb == NULL) {
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f040 80aa 	bne.w	80081a0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800804c:	4b51      	ldr	r3, [pc, #324]	; (8008194 <tcp_input+0x4b8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	61fb      	str	r3, [r7, #28]
 8008052:	e03f      	b.n	80080d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	7d1b      	ldrb	r3, [r3, #20]
 8008058:	2b0a      	cmp	r3, #10
 800805a:	d006      	beq.n	800806a <tcp_input+0x38e>
 800805c:	4b48      	ldr	r3, [pc, #288]	; (8008180 <tcp_input+0x4a4>)
 800805e:	f240 121f 	movw	r2, #287	; 0x11f
 8008062:	494d      	ldr	r1, [pc, #308]	; (8008198 <tcp_input+0x4bc>)
 8008064:	4848      	ldr	r0, [pc, #288]	; (8008188 <tcp_input+0x4ac>)
 8008066:	f006 fe7f 	bl	800ed68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	7a1b      	ldrb	r3, [r3, #8]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d009      	beq.n	8008086 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	7a1a      	ldrb	r2, [r3, #8]
 8008076:	4b41      	ldr	r3, [pc, #260]	; (800817c <tcp_input+0x4a0>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800807e:	3301      	adds	r3, #1
 8008080:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008082:	429a      	cmp	r2, r3
 8008084:	d122      	bne.n	80080cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	8b1a      	ldrh	r2, [r3, #24]
 800808a:	4b3b      	ldr	r3, [pc, #236]	; (8008178 <tcp_input+0x49c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29b      	uxth	r3, r3
 8008092:	429a      	cmp	r2, r3
 8008094:	d11b      	bne.n	80080ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	8ada      	ldrh	r2, [r3, #22]
 800809a:	4b37      	ldr	r3, [pc, #220]	; (8008178 <tcp_input+0x49c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	885b      	ldrh	r3, [r3, #2]
 80080a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d113      	bne.n	80080ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	4b34      	ldr	r3, [pc, #208]	; (800817c <tcp_input+0x4a0>)
 80080ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d10d      	bne.n	80080ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	4b31      	ldr	r3, [pc, #196]	; (800817c <tcp_input+0x4a0>)
 80080b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d107      	bne.n	80080ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80080be:	69f8      	ldr	r0, [r7, #28]
 80080c0:	f000 fb56 	bl	8008770 <tcp_timewait_input>
        }
        pbuf_free(p);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7fd ffd1 	bl	800606c <pbuf_free>
        return;
 80080ca:	e1fd      	b.n	80084c8 <tcp_input+0x7ec>
        continue;
 80080cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	61fb      	str	r3, [r7, #28]
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1bc      	bne.n	8008054 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80080da:	2300      	movs	r3, #0
 80080dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80080de:	4b2f      	ldr	r3, [pc, #188]	; (800819c <tcp_input+0x4c0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e02a      	b.n	800813c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	7a1b      	ldrb	r3, [r3, #8]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00c      	beq.n	8008108 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	7a1a      	ldrb	r2, [r3, #8]
 80080f2:	4b22      	ldr	r3, [pc, #136]	; (800817c <tcp_input+0x4a0>)
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080fa:	3301      	adds	r3, #1
 80080fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80080fe:	429a      	cmp	r2, r3
 8008100:	d002      	beq.n	8008108 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	61bb      	str	r3, [r7, #24]
        continue;
 8008106:	e016      	b.n	8008136 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	8ada      	ldrh	r2, [r3, #22]
 800810c:	4b1a      	ldr	r3, [pc, #104]	; (8008178 <tcp_input+0x49c>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	885b      	ldrh	r3, [r3, #2]
 8008112:	b29b      	uxth	r3, r3
 8008114:	429a      	cmp	r2, r3
 8008116:	d10c      	bne.n	8008132 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4b17      	ldr	r3, [pc, #92]	; (800817c <tcp_input+0x4a0>)
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	429a      	cmp	r2, r3
 8008122:	d00f      	beq.n	8008144 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00d      	beq.n	8008146 <tcp_input+0x46a>
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d009      	beq.n	8008146 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1d1      	bne.n	80080e6 <tcp_input+0x40a>
 8008142:	e000      	b.n	8008146 <tcp_input+0x46a>
            break;
 8008144:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d029      	beq.n	80081a0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800815a:	4b10      	ldr	r3, [pc, #64]	; (800819c <tcp_input+0x4c0>)
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008162:	4a0e      	ldr	r2, [pc, #56]	; (800819c <tcp_input+0x4c0>)
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008168:	6978      	ldr	r0, [r7, #20]
 800816a:	f000 fa03 	bl	8008574 <tcp_listen_input>
      }
      pbuf_free(p);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7fd ff7c 	bl	800606c <pbuf_free>
      return;
 8008174:	e1a8      	b.n	80084c8 <tcp_input+0x7ec>
 8008176:	bf00      	nop
 8008178:	20008794 	.word	0x20008794
 800817c:	200051fc 	.word	0x200051fc
 8008180:	08010dd8 	.word	0x08010dd8
 8008184:	08010f04 	.word	0x08010f04
 8008188:	08010e24 	.word	0x08010e24
 800818c:	20008778 	.word	0x20008778
 8008190:	08010f30 	.word	0x08010f30
 8008194:	2000877c 	.word	0x2000877c
 8008198:	08010f5c 	.word	0x08010f5c
 800819c:	20008774 	.word	0x20008774
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 8158 	beq.w	8008458 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80081a8:	4b95      	ldr	r3, [pc, #596]	; (8008400 <tcp_input+0x724>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	891a      	ldrh	r2, [r3, #8]
 80081b2:	4b93      	ldr	r3, [pc, #588]	; (8008400 <tcp_input+0x724>)
 80081b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80081b6:	4a92      	ldr	r2, [pc, #584]	; (8008400 <tcp_input+0x724>)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80081bc:	4b91      	ldr	r3, [pc, #580]	; (8008404 <tcp_input+0x728>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a8f      	ldr	r2, [pc, #572]	; (8008400 <tcp_input+0x724>)
 80081c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80081c4:	4b90      	ldr	r3, [pc, #576]	; (8008408 <tcp_input+0x72c>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80081ca:	4b90      	ldr	r3, [pc, #576]	; (800840c <tcp_input+0x730>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80081d0:	4b8f      	ldr	r3, [pc, #572]	; (8008410 <tcp_input+0x734>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80081d6:	4b8f      	ldr	r3, [pc, #572]	; (8008414 <tcp_input+0x738>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d006      	beq.n	80081f0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	7b5b      	ldrb	r3, [r3, #13]
 80081e6:	f043 0301 	orr.w	r3, r3, #1
 80081ea:	b2da      	uxtb	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d017      	beq.n	8008228 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80081f8:	69f8      	ldr	r0, [r7, #28]
 80081fa:	f7ff f929 	bl	8007450 <tcp_process_refused_data>
 80081fe:	4603      	mov	r3, r0
 8008200:	f113 0f0d 	cmn.w	r3, #13
 8008204:	d007      	beq.n	8008216 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00c      	beq.n	8008228 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800820e:	4b82      	ldr	r3, [pc, #520]	; (8008418 <tcp_input+0x73c>)
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800821a:	2b00      	cmp	r3, #0
 800821c:	f040 80e3 	bne.w	80083e6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008220:	69f8      	ldr	r0, [r7, #28]
 8008222:	f003 f9ad 	bl	800b580 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008226:	e0de      	b.n	80083e6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008228:	4a7c      	ldr	r2, [pc, #496]	; (800841c <tcp_input+0x740>)
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800822e:	69f8      	ldr	r0, [r7, #28]
 8008230:	f000 fb18 	bl	8008864 <tcp_process>
 8008234:	4603      	mov	r3, r0
 8008236:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008238:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800823c:	f113 0f0d 	cmn.w	r3, #13
 8008240:	f000 80d3 	beq.w	80083ea <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008244:	4b71      	ldr	r3, [pc, #452]	; (800840c <tcp_input+0x730>)
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	f003 0308 	and.w	r3, r3, #8
 800824c:	2b00      	cmp	r3, #0
 800824e:	d015      	beq.n	800827c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008256:	2b00      	cmp	r3, #0
 8008258:	d008      	beq.n	800826c <tcp_input+0x590>
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008260:	69fa      	ldr	r2, [r7, #28]
 8008262:	6912      	ldr	r2, [r2, #16]
 8008264:	f06f 010d 	mvn.w	r1, #13
 8008268:	4610      	mov	r0, r2
 800826a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800826c:	69f9      	ldr	r1, [r7, #28]
 800826e:	486c      	ldr	r0, [pc, #432]	; (8008420 <tcp_input+0x744>)
 8008270:	f7ff fbbc 	bl	80079ec <tcp_pcb_remove>
        tcp_free(pcb);
 8008274:	69f8      	ldr	r0, [r7, #28]
 8008276:	f7fe f9a9 	bl	80065cc <tcp_free>
 800827a:	e0da      	b.n	8008432 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008280:	4b63      	ldr	r3, [pc, #396]	; (8008410 <tcp_input+0x734>)
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01d      	beq.n	80082c4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008288:	4b61      	ldr	r3, [pc, #388]	; (8008410 <tcp_input+0x734>)
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00a      	beq.n	80082ae <tcp_input+0x5d2>
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	6910      	ldr	r0, [r2, #16]
 80082a2:	89fa      	ldrh	r2, [r7, #14]
 80082a4:	69f9      	ldr	r1, [r7, #28]
 80082a6:	4798      	blx	r3
 80082a8:	4603      	mov	r3, r0
 80082aa:	74fb      	strb	r3, [r7, #19]
 80082ac:	e001      	b.n	80082b2 <tcp_input+0x5d6>
 80082ae:	2300      	movs	r3, #0
 80082b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80082b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80082b6:	f113 0f0d 	cmn.w	r3, #13
 80082ba:	f000 8098 	beq.w	80083ee <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80082be:	4b54      	ldr	r3, [pc, #336]	; (8008410 <tcp_input+0x734>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80082c4:	69f8      	ldr	r0, [r7, #28]
 80082c6:	f000 f915 	bl	80084f4 <tcp_input_delayed_close>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f040 8090 	bne.w	80083f2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80082d2:	4b4d      	ldr	r3, [pc, #308]	; (8008408 <tcp_input+0x72c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d041      	beq.n	800835e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80082da:	69fb      	ldr	r3, [r7, #28]
 80082dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d006      	beq.n	80082f0 <tcp_input+0x614>
 80082e2:	4b50      	ldr	r3, [pc, #320]	; (8008424 <tcp_input+0x748>)
 80082e4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80082e8:	494f      	ldr	r1, [pc, #316]	; (8008428 <tcp_input+0x74c>)
 80082ea:	4850      	ldr	r0, [pc, #320]	; (800842c <tcp_input+0x750>)
 80082ec:	f006 fd3c 	bl	800ed68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	8b5b      	ldrh	r3, [r3, #26]
 80082f4:	f003 0310 	and.w	r3, r3, #16
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80082fc:	4b42      	ldr	r3, [pc, #264]	; (8008408 <tcp_input+0x72c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f7fd feb3 	bl	800606c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008306:	69f8      	ldr	r0, [r7, #28]
 8008308:	f7fe fc48 	bl	8006b9c <tcp_abort>
            goto aborted;
 800830c:	e091      	b.n	8008432 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00c      	beq.n	8008332 <tcp_input+0x656>
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	6918      	ldr	r0, [r3, #16]
 8008322:	4b39      	ldr	r3, [pc, #228]	; (8008408 <tcp_input+0x72c>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	2300      	movs	r3, #0
 8008328:	69f9      	ldr	r1, [r7, #28]
 800832a:	47a0      	blx	r4
 800832c:	4603      	mov	r3, r0
 800832e:	74fb      	strb	r3, [r7, #19]
 8008330:	e008      	b.n	8008344 <tcp_input+0x668>
 8008332:	4b35      	ldr	r3, [pc, #212]	; (8008408 <tcp_input+0x72c>)
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	2300      	movs	r3, #0
 8008338:	69f9      	ldr	r1, [r7, #28]
 800833a:	2000      	movs	r0, #0
 800833c:	f7ff f95e 	bl	80075fc <tcp_recv_null>
 8008340:	4603      	mov	r3, r0
 8008342:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008344:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008348:	f113 0f0d 	cmn.w	r3, #13
 800834c:	d053      	beq.n	80083f6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800834e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8008356:	4b2c      	ldr	r3, [pc, #176]	; (8008408 <tcp_input+0x72c>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800835e:	4b2b      	ldr	r3, [pc, #172]	; (800840c <tcp_input+0x730>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b00      	cmp	r3, #0
 8008368:	d030      	beq.n	80083cc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008376:	7b5a      	ldrb	r2, [r3, #13]
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800837c:	f042 0220 	orr.w	r2, r2, #32
 8008380:	b2d2      	uxtb	r2, r2
 8008382:	735a      	strb	r2, [r3, #13]
 8008384:	e022      	b.n	80083cc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800838a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800838e:	d005      	beq.n	800839c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008394:	3301      	adds	r3, #1
 8008396:	b29a      	uxth	r2, r3
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00b      	beq.n	80083be <tcp_input+0x6e2>
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80083ac:	69fb      	ldr	r3, [r7, #28]
 80083ae:	6918      	ldr	r0, [r3, #16]
 80083b0:	2300      	movs	r3, #0
 80083b2:	2200      	movs	r2, #0
 80083b4:	69f9      	ldr	r1, [r7, #28]
 80083b6:	47a0      	blx	r4
 80083b8:	4603      	mov	r3, r0
 80083ba:	74fb      	strb	r3, [r7, #19]
 80083bc:	e001      	b.n	80083c2 <tcp_input+0x6e6>
 80083be:	2300      	movs	r3, #0
 80083c0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80083c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083c6:	f113 0f0d 	cmn.w	r3, #13
 80083ca:	d016      	beq.n	80083fa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80083cc:	4b13      	ldr	r3, [pc, #76]	; (800841c <tcp_input+0x740>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80083d2:	69f8      	ldr	r0, [r7, #28]
 80083d4:	f000 f88e 	bl	80084f4 <tcp_input_delayed_close>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d128      	bne.n	8008430 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80083de:	69f8      	ldr	r0, [r7, #28]
 80083e0:	f002 fac8 	bl	800a974 <tcp_output>
 80083e4:	e025      	b.n	8008432 <tcp_input+0x756>
        goto aborted;
 80083e6:	bf00      	nop
 80083e8:	e023      	b.n	8008432 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80083ea:	bf00      	nop
 80083ec:	e021      	b.n	8008432 <tcp_input+0x756>
              goto aborted;
 80083ee:	bf00      	nop
 80083f0:	e01f      	b.n	8008432 <tcp_input+0x756>
          goto aborted;
 80083f2:	bf00      	nop
 80083f4:	e01d      	b.n	8008432 <tcp_input+0x756>
            goto aborted;
 80083f6:	bf00      	nop
 80083f8:	e01b      	b.n	8008432 <tcp_input+0x756>
              goto aborted;
 80083fa:	bf00      	nop
 80083fc:	e019      	b.n	8008432 <tcp_input+0x756>
 80083fe:	bf00      	nop
 8008400:	20008784 	.word	0x20008784
 8008404:	20008794 	.word	0x20008794
 8008408:	200087b4 	.word	0x200087b4
 800840c:	200087b1 	.word	0x200087b1
 8008410:	200087ac 	.word	0x200087ac
 8008414:	200087b0 	.word	0x200087b0
 8008418:	200087ae 	.word	0x200087ae
 800841c:	200087b8 	.word	0x200087b8
 8008420:	20008778 	.word	0x20008778
 8008424:	08010dd8 	.word	0x08010dd8
 8008428:	08010f8c 	.word	0x08010f8c
 800842c:	08010e24 	.word	0x08010e24
          goto aborted;
 8008430:	bf00      	nop
    tcp_input_pcb = NULL;
 8008432:	4b27      	ldr	r3, [pc, #156]	; (80084d0 <tcp_input+0x7f4>)
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008438:	4b26      	ldr	r3, [pc, #152]	; (80084d4 <tcp_input+0x7f8>)
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800843e:	4b26      	ldr	r3, [pc, #152]	; (80084d8 <tcp_input+0x7fc>)
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d03f      	beq.n	80084c6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008446:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <tcp_input+0x7fc>)
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	4618      	mov	r0, r3
 800844c:	f7fd fe0e 	bl	800606c <pbuf_free>
      inseg.p = NULL;
 8008450:	4b21      	ldr	r3, [pc, #132]	; (80084d8 <tcp_input+0x7fc>)
 8008452:	2200      	movs	r2, #0
 8008454:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008456:	e036      	b.n	80084c6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008458:	4b20      	ldr	r3, [pc, #128]	; (80084dc <tcp_input+0x800>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	899b      	ldrh	r3, [r3, #12]
 800845e:	b29b      	uxth	r3, r3
 8008460:	4618      	mov	r0, r3
 8008462:	f7fc faa5 	bl	80049b0 <lwip_htons>
 8008466:	4603      	mov	r3, r0
 8008468:	b2db      	uxtb	r3, r3
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b00      	cmp	r3, #0
 8008470:	d118      	bne.n	80084a4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008472:	4b1b      	ldr	r3, [pc, #108]	; (80084e0 <tcp_input+0x804>)
 8008474:	6819      	ldr	r1, [r3, #0]
 8008476:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <tcp_input+0x808>)
 8008478:	881b      	ldrh	r3, [r3, #0]
 800847a:	461a      	mov	r2, r3
 800847c:	4b1a      	ldr	r3, [pc, #104]	; (80084e8 <tcp_input+0x80c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008482:	4b16      	ldr	r3, [pc, #88]	; (80084dc <tcp_input+0x800>)
 8008484:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008486:	885b      	ldrh	r3, [r3, #2]
 8008488:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800848a:	4a14      	ldr	r2, [pc, #80]	; (80084dc <tcp_input+0x800>)
 800848c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800848e:	8812      	ldrh	r2, [r2, #0]
 8008490:	b292      	uxth	r2, r2
 8008492:	9202      	str	r2, [sp, #8]
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	4b15      	ldr	r3, [pc, #84]	; (80084ec <tcp_input+0x810>)
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	4b15      	ldr	r3, [pc, #84]	; (80084f0 <tcp_input+0x814>)
 800849c:	4602      	mov	r2, r0
 800849e:	2000      	movs	r0, #0
 80084a0:	f003 f81c 	bl	800b4dc <tcp_rst>
    pbuf_free(p);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7fd fde1 	bl	800606c <pbuf_free>
  return;
 80084aa:	e00c      	b.n	80084c6 <tcp_input+0x7ea>
    goto dropped;
 80084ac:	bf00      	nop
 80084ae:	e006      	b.n	80084be <tcp_input+0x7e2>
    goto dropped;
 80084b0:	bf00      	nop
 80084b2:	e004      	b.n	80084be <tcp_input+0x7e2>
    goto dropped;
 80084b4:	bf00      	nop
 80084b6:	e002      	b.n	80084be <tcp_input+0x7e2>
      goto dropped;
 80084b8:	bf00      	nop
 80084ba:	e000      	b.n	80084be <tcp_input+0x7e2>
      goto dropped;
 80084bc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fd fdd4 	bl	800606c <pbuf_free>
 80084c4:	e000      	b.n	80084c8 <tcp_input+0x7ec>
  return;
 80084c6:	bf00      	nop
}
 80084c8:	3724      	adds	r7, #36	; 0x24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd90      	pop	{r4, r7, pc}
 80084ce:	bf00      	nop
 80084d0:	200087b8 	.word	0x200087b8
 80084d4:	200087b4 	.word	0x200087b4
 80084d8:	20008784 	.word	0x20008784
 80084dc:	20008794 	.word	0x20008794
 80084e0:	200087a8 	.word	0x200087a8
 80084e4:	200087ae 	.word	0x200087ae
 80084e8:	200087a4 	.word	0x200087a4
 80084ec:	2000520c 	.word	0x2000520c
 80084f0:	20005210 	.word	0x20005210

080084f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d106      	bne.n	8008510 <tcp_input_delayed_close+0x1c>
 8008502:	4b17      	ldr	r3, [pc, #92]	; (8008560 <tcp_input_delayed_close+0x6c>)
 8008504:	f240 225a 	movw	r2, #602	; 0x25a
 8008508:	4916      	ldr	r1, [pc, #88]	; (8008564 <tcp_input_delayed_close+0x70>)
 800850a:	4817      	ldr	r0, [pc, #92]	; (8008568 <tcp_input_delayed_close+0x74>)
 800850c:	f006 fc2c 	bl	800ed68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008510:	4b16      	ldr	r3, [pc, #88]	; (800856c <tcp_input_delayed_close+0x78>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	f003 0310 	and.w	r3, r3, #16
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01c      	beq.n	8008556 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	8b5b      	ldrh	r3, [r3, #26]
 8008520:	f003 0310 	and.w	r3, r3, #16
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10d      	bne.n	8008544 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852e:	2b00      	cmp	r3, #0
 8008530:	d008      	beq.n	8008544 <tcp_input_delayed_close+0x50>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	6912      	ldr	r2, [r2, #16]
 800853c:	f06f 010e 	mvn.w	r1, #14
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	480a      	ldr	r0, [pc, #40]	; (8008570 <tcp_input_delayed_close+0x7c>)
 8008548:	f7ff fa50 	bl	80079ec <tcp_pcb_remove>
    tcp_free(pcb);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7fe f83d 	bl	80065cc <tcp_free>
    return 1;
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	08010dd8 	.word	0x08010dd8
 8008564:	08010fa8 	.word	0x08010fa8
 8008568:	08010e24 	.word	0x08010e24
 800856c:	200087b1 	.word	0x200087b1
 8008570:	20008778 	.word	0x20008778

08008574 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008574:	b590      	push	{r4, r7, lr}
 8008576:	b08b      	sub	sp, #44	; 0x2c
 8008578:	af04      	add	r7, sp, #16
 800857a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800857c:	4b6f      	ldr	r3, [pc, #444]	; (800873c <tcp_listen_input+0x1c8>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	f040 80d2 	bne.w	800872e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d106      	bne.n	800859e <tcp_listen_input+0x2a>
 8008590:	4b6b      	ldr	r3, [pc, #428]	; (8008740 <tcp_listen_input+0x1cc>)
 8008592:	f240 2281 	movw	r2, #641	; 0x281
 8008596:	496b      	ldr	r1, [pc, #428]	; (8008744 <tcp_listen_input+0x1d0>)
 8008598:	486b      	ldr	r0, [pc, #428]	; (8008748 <tcp_listen_input+0x1d4>)
 800859a:	f006 fbe5 	bl	800ed68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800859e:	4b67      	ldr	r3, [pc, #412]	; (800873c <tcp_listen_input+0x1c8>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	f003 0310 	and.w	r3, r3, #16
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d019      	beq.n	80085de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085aa:	4b68      	ldr	r3, [pc, #416]	; (800874c <tcp_listen_input+0x1d8>)
 80085ac:	6819      	ldr	r1, [r3, #0]
 80085ae:	4b68      	ldr	r3, [pc, #416]	; (8008750 <tcp_listen_input+0x1dc>)
 80085b0:	881b      	ldrh	r3, [r3, #0]
 80085b2:	461a      	mov	r2, r3
 80085b4:	4b67      	ldr	r3, [pc, #412]	; (8008754 <tcp_listen_input+0x1e0>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085ba:	4b67      	ldr	r3, [pc, #412]	; (8008758 <tcp_listen_input+0x1e4>)
 80085bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085be:	885b      	ldrh	r3, [r3, #2]
 80085c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80085c2:	4a65      	ldr	r2, [pc, #404]	; (8008758 <tcp_listen_input+0x1e4>)
 80085c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085c6:	8812      	ldrh	r2, [r2, #0]
 80085c8:	b292      	uxth	r2, r2
 80085ca:	9202      	str	r2, [sp, #8]
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	4b63      	ldr	r3, [pc, #396]	; (800875c <tcp_listen_input+0x1e8>)
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	4b63      	ldr	r3, [pc, #396]	; (8008760 <tcp_listen_input+0x1ec>)
 80085d4:	4602      	mov	r2, r0
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f002 ff80 	bl	800b4dc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80085dc:	e0a9      	b.n	8008732 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80085de:	4b57      	ldr	r3, [pc, #348]	; (800873c <tcp_listen_input+0x1c8>)
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 80a3 	beq.w	8008732 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	7d5b      	ldrb	r3, [r3, #21]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7ff f927 	bl	8007844 <tcp_alloc>
 80085f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d111      	bne.n	8008622 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00a      	beq.n	800861c <tcp_listen_input+0xa8>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6910      	ldr	r0, [r2, #16]
 800860e:	f04f 32ff 	mov.w	r2, #4294967295
 8008612:	2100      	movs	r1, #0
 8008614:	4798      	blx	r3
 8008616:	4603      	mov	r3, r0
 8008618:	73bb      	strb	r3, [r7, #14]
      return;
 800861a:	e08b      	b.n	8008734 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800861c:	23f0      	movs	r3, #240	; 0xf0
 800861e:	73bb      	strb	r3, [r7, #14]
      return;
 8008620:	e088      	b.n	8008734 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008622:	4b50      	ldr	r3, [pc, #320]	; (8008764 <tcp_listen_input+0x1f0>)
 8008624:	695a      	ldr	r2, [r3, #20]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800862a:	4b4e      	ldr	r3, [pc, #312]	; (8008764 <tcp_listen_input+0x1f0>)
 800862c:	691a      	ldr	r2, [r3, #16]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	8ada      	ldrh	r2, [r3, #22]
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800863a:	4b47      	ldr	r3, [pc, #284]	; (8008758 <tcp_listen_input+0x1e4>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	b29a      	uxth	r2, r3
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2203      	movs	r2, #3
 800864a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800864c:	4b41      	ldr	r3, [pc, #260]	; (8008754 <tcp_listen_input+0x1e0>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	1c5a      	adds	r2, r3, #1
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800865e:	6978      	ldr	r0, [r7, #20]
 8008660:	f7ff fa58 	bl	8007b14 <tcp_next_iss>
 8008664:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800867e:	4b35      	ldr	r3, [pc, #212]	; (8008754 <tcp_listen_input+0x1e0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	1e5a      	subs	r2, r3, #1
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691a      	ldr	r2, [r3, #16]
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	7a5b      	ldrb	r3, [r3, #9]
 800869a:	f003 030c 	and.w	r3, r3, #12
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	7a1a      	ldrb	r2, [r3, #8]
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80086ac:	4b2e      	ldr	r3, [pc, #184]	; (8008768 <tcp_listen_input+0x1f4>)
 80086ae:	681a      	ldr	r2, [r3, #0]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	60da      	str	r2, [r3, #12]
 80086b4:	4a2c      	ldr	r2, [pc, #176]	; (8008768 <tcp_listen_input+0x1f4>)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	f003 f8d1 	bl	800b860 <tcp_timer_needed>
 80086be:	4b2b      	ldr	r3, [pc, #172]	; (800876c <tcp_listen_input+0x1f8>)
 80086c0:	2201      	movs	r2, #1
 80086c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80086c4:	6978      	ldr	r0, [r7, #20]
 80086c6:	f001 fd8f 	bl	800a1e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80086ca:	4b23      	ldr	r3, [pc, #140]	; (8008758 <tcp_listen_input+0x1e4>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	89db      	ldrh	r3, [r3, #14]
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	3304      	adds	r3, #4
 80086ec:	4618      	mov	r0, r3
 80086ee:	f005 f84f 	bl	800d790 <ip4_route>
 80086f2:	4601      	mov	r1, r0
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	3304      	adds	r3, #4
 80086f8:	461a      	mov	r2, r3
 80086fa:	4620      	mov	r0, r4
 80086fc:	f7ff fa30 	bl	8007b60 <tcp_eff_send_mss_netif>
 8008700:	4603      	mov	r3, r0
 8008702:	461a      	mov	r2, r3
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008708:	2112      	movs	r1, #18
 800870a:	6978      	ldr	r0, [r7, #20]
 800870c:	f002 f844 	bl	800a798 <tcp_enqueue_flags>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d004      	beq.n	8008726 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800871c:	2100      	movs	r1, #0
 800871e:	6978      	ldr	r0, [r7, #20]
 8008720:	f7fe f97e 	bl	8006a20 <tcp_abandon>
      return;
 8008724:	e006      	b.n	8008734 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008726:	6978      	ldr	r0, [r7, #20]
 8008728:	f002 f924 	bl	800a974 <tcp_output>
  return;
 800872c:	e001      	b.n	8008732 <tcp_listen_input+0x1be>
    return;
 800872e:	bf00      	nop
 8008730:	e000      	b.n	8008734 <tcp_listen_input+0x1c0>
  return;
 8008732:	bf00      	nop
}
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	bd90      	pop	{r4, r7, pc}
 800873a:	bf00      	nop
 800873c:	200087b0 	.word	0x200087b0
 8008740:	08010dd8 	.word	0x08010dd8
 8008744:	08010fd0 	.word	0x08010fd0
 8008748:	08010e24 	.word	0x08010e24
 800874c:	200087a8 	.word	0x200087a8
 8008750:	200087ae 	.word	0x200087ae
 8008754:	200087a4 	.word	0x200087a4
 8008758:	20008794 	.word	0x20008794
 800875c:	2000520c 	.word	0x2000520c
 8008760:	20005210 	.word	0x20005210
 8008764:	200051fc 	.word	0x200051fc
 8008768:	20008778 	.word	0x20008778
 800876c:	20008780 	.word	0x20008780

08008770 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af04      	add	r7, sp, #16
 8008776:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008778:	4b2f      	ldr	r3, [pc, #188]	; (8008838 <tcp_timewait_input+0xc8>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	f003 0304 	and.w	r3, r3, #4
 8008780:	2b00      	cmp	r3, #0
 8008782:	d153      	bne.n	800882c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d106      	bne.n	8008798 <tcp_timewait_input+0x28>
 800878a:	4b2c      	ldr	r3, [pc, #176]	; (800883c <tcp_timewait_input+0xcc>)
 800878c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008790:	492b      	ldr	r1, [pc, #172]	; (8008840 <tcp_timewait_input+0xd0>)
 8008792:	482c      	ldr	r0, [pc, #176]	; (8008844 <tcp_timewait_input+0xd4>)
 8008794:	f006 fae8 	bl	800ed68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008798:	4b27      	ldr	r3, [pc, #156]	; (8008838 <tcp_timewait_input+0xc8>)
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d02a      	beq.n	80087fa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80087a4:	4b28      	ldr	r3, [pc, #160]	; (8008848 <tcp_timewait_input+0xd8>)
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	db2d      	blt.n	800880e <tcp_timewait_input+0x9e>
 80087b2:	4b25      	ldr	r3, [pc, #148]	; (8008848 <tcp_timewait_input+0xd8>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087be:	440b      	add	r3, r1
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	dc23      	bgt.n	800880e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087c6:	4b21      	ldr	r3, [pc, #132]	; (800884c <tcp_timewait_input+0xdc>)
 80087c8:	6819      	ldr	r1, [r3, #0]
 80087ca:	4b21      	ldr	r3, [pc, #132]	; (8008850 <tcp_timewait_input+0xe0>)
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	4b1d      	ldr	r3, [pc, #116]	; (8008848 <tcp_timewait_input+0xd8>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087d6:	4b1f      	ldr	r3, [pc, #124]	; (8008854 <tcp_timewait_input+0xe4>)
 80087d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087da:	885b      	ldrh	r3, [r3, #2]
 80087dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087de:	4a1d      	ldr	r2, [pc, #116]	; (8008854 <tcp_timewait_input+0xe4>)
 80087e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087e2:	8812      	ldrh	r2, [r2, #0]
 80087e4:	b292      	uxth	r2, r2
 80087e6:	9202      	str	r2, [sp, #8]
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	4b1b      	ldr	r3, [pc, #108]	; (8008858 <tcp_timewait_input+0xe8>)
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	4b1b      	ldr	r3, [pc, #108]	; (800885c <tcp_timewait_input+0xec>)
 80087f0:	4602      	mov	r2, r0
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f002 fe72 	bl	800b4dc <tcp_rst>
      return;
 80087f8:	e01b      	b.n	8008832 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80087fa:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <tcp_timewait_input+0xc8>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008806:	4b16      	ldr	r3, [pc, #88]	; (8008860 <tcp_timewait_input+0xf0>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800880e:	4b10      	ldr	r3, [pc, #64]	; (8008850 <tcp_timewait_input+0xe0>)
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00c      	beq.n	8008830 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	8b5b      	ldrh	r3, [r3, #26]
 800881a:	f043 0302 	orr.w	r3, r3, #2
 800881e:	b29a      	uxth	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f002 f8a5 	bl	800a974 <tcp_output>
  }
  return;
 800882a:	e001      	b.n	8008830 <tcp_timewait_input+0xc0>
    return;
 800882c:	bf00      	nop
 800882e:	e000      	b.n	8008832 <tcp_timewait_input+0xc2>
  return;
 8008830:	bf00      	nop
}
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	200087b0 	.word	0x200087b0
 800883c:	08010dd8 	.word	0x08010dd8
 8008840:	08010ff0 	.word	0x08010ff0
 8008844:	08010e24 	.word	0x08010e24
 8008848:	200087a4 	.word	0x200087a4
 800884c:	200087a8 	.word	0x200087a8
 8008850:	200087ae 	.word	0x200087ae
 8008854:	20008794 	.word	0x20008794
 8008858:	2000520c 	.word	0x2000520c
 800885c:	20005210 	.word	0x20005210
 8008860:	2000876c 	.word	0x2000876c

08008864 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b08d      	sub	sp, #52	; 0x34
 8008868:	af04      	add	r7, sp, #16
 800886a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d106      	bne.n	8008888 <tcp_process+0x24>
 800887a:	4b9d      	ldr	r3, [pc, #628]	; (8008af0 <tcp_process+0x28c>)
 800887c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008880:	499c      	ldr	r1, [pc, #624]	; (8008af4 <tcp_process+0x290>)
 8008882:	489d      	ldr	r0, [pc, #628]	; (8008af8 <tcp_process+0x294>)
 8008884:	f006 fa70 	bl	800ed68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008888:	4b9c      	ldr	r3, [pc, #624]	; (8008afc <tcp_process+0x298>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d04e      	beq.n	8008932 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7d1b      	ldrb	r3, [r3, #20]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d108      	bne.n	80088ae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088a0:	4b97      	ldr	r3, [pc, #604]	; (8008b00 <tcp_process+0x29c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d123      	bne.n	80088f0 <tcp_process+0x8c>
        acceptable = 1;
 80088a8:	2301      	movs	r3, #1
 80088aa:	76fb      	strb	r3, [r7, #27]
 80088ac:	e020      	b.n	80088f0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80088b2:	4b94      	ldr	r3, [pc, #592]	; (8008b04 <tcp_process+0x2a0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d102      	bne.n	80088c0 <tcp_process+0x5c>
        acceptable = 1;
 80088ba:	2301      	movs	r3, #1
 80088bc:	76fb      	strb	r3, [r7, #27]
 80088be:	e017      	b.n	80088f0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80088c0:	4b90      	ldr	r3, [pc, #576]	; (8008b04 <tcp_process+0x2a0>)
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	db10      	blt.n	80088f0 <tcp_process+0x8c>
 80088ce:	4b8d      	ldr	r3, [pc, #564]	; (8008b04 <tcp_process+0x2a0>)
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80088da:	440b      	add	r3, r1
 80088dc:	1ad3      	subs	r3, r2, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dc06      	bgt.n	80088f0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	8b5b      	ldrh	r3, [r3, #26]
 80088e6:	f043 0302 	orr.w	r3, r3, #2
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80088f0:	7efb      	ldrb	r3, [r7, #27]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d01b      	beq.n	800892e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	7d1b      	ldrb	r3, [r3, #20]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <tcp_process+0xa8>
 80088fe:	4b7c      	ldr	r3, [pc, #496]	; (8008af0 <tcp_process+0x28c>)
 8008900:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008904:	4980      	ldr	r1, [pc, #512]	; (8008b08 <tcp_process+0x2a4>)
 8008906:	487c      	ldr	r0, [pc, #496]	; (8008af8 <tcp_process+0x294>)
 8008908:	f006 fa2e 	bl	800ed68 <iprintf>
      recv_flags |= TF_RESET;
 800890c:	4b7f      	ldr	r3, [pc, #508]	; (8008b0c <tcp_process+0x2a8>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f043 0308 	orr.w	r3, r3, #8
 8008914:	b2da      	uxtb	r2, r3
 8008916:	4b7d      	ldr	r3, [pc, #500]	; (8008b0c <tcp_process+0x2a8>)
 8008918:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	8b5b      	ldrh	r3, [r3, #26]
 800891e:	f023 0301 	bic.w	r3, r3, #1
 8008922:	b29a      	uxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008928:	f06f 030d 	mvn.w	r3, #13
 800892c:	e37a      	b.n	8009024 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	e378      	b.n	8009024 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008932:	4b72      	ldr	r3, [pc, #456]	; (8008afc <tcp_process+0x298>)
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d010      	beq.n	8008960 <tcp_process+0xfc>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	7d1b      	ldrb	r3, [r3, #20]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d00c      	beq.n	8008960 <tcp_process+0xfc>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7d1b      	ldrb	r3, [r3, #20]
 800894a:	2b03      	cmp	r3, #3
 800894c:	d008      	beq.n	8008960 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	8b5b      	ldrh	r3, [r3, #26]
 8008952:	f043 0302 	orr.w	r3, r3, #2
 8008956:	b29a      	uxth	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800895c:	2300      	movs	r3, #0
 800895e:	e361      	b.n	8009024 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	8b5b      	ldrh	r3, [r3, #26]
 8008964:	f003 0310 	and.w	r3, r3, #16
 8008968:	2b00      	cmp	r3, #0
 800896a:	d103      	bne.n	8008974 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800896c:	4b68      	ldr	r3, [pc, #416]	; (8008b10 <tcp_process+0x2ac>)
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f001 fc2f 	bl	800a1e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	7d1b      	ldrb	r3, [r3, #20]
 800898e:	3b02      	subs	r3, #2
 8008990:	2b07      	cmp	r3, #7
 8008992:	f200 8337 	bhi.w	8009004 <tcp_process+0x7a0>
 8008996:	a201      	add	r2, pc, #4	; (adr r2, 800899c <tcp_process+0x138>)
 8008998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899c:	080089bd 	.word	0x080089bd
 80089a0:	08008bed 	.word	0x08008bed
 80089a4:	08008d65 	.word	0x08008d65
 80089a8:	08008d8f 	.word	0x08008d8f
 80089ac:	08008eb3 	.word	0x08008eb3
 80089b0:	08008d65 	.word	0x08008d65
 80089b4:	08008f3f 	.word	0x08008f3f
 80089b8:	08008fcf 	.word	0x08008fcf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80089bc:	4b4f      	ldr	r3, [pc, #316]	; (8008afc <tcp_process+0x298>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	f003 0310 	and.w	r3, r3, #16
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 80e4 	beq.w	8008b92 <tcp_process+0x32e>
 80089ca:	4b4c      	ldr	r3, [pc, #304]	; (8008afc <tcp_process+0x298>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 80dd 	beq.w	8008b92 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089dc:	1c5a      	adds	r2, r3, #1
 80089de:	4b48      	ldr	r3, [pc, #288]	; (8008b00 <tcp_process+0x29c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	f040 80d5 	bne.w	8008b92 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80089e8:	4b46      	ldr	r3, [pc, #280]	; (8008b04 <tcp_process+0x2a0>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80089fa:	4b41      	ldr	r3, [pc, #260]	; (8008b00 <tcp_process+0x29c>)
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008a02:	4b44      	ldr	r3, [pc, #272]	; (8008b14 <tcp_process+0x2b0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	89db      	ldrh	r3, [r3, #14]
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008a1c:	4b39      	ldr	r3, [pc, #228]	; (8008b04 <tcp_process+0x2a0>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	1e5a      	subs	r2, r3, #1
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3304      	adds	r3, #4
 8008a34:	4618      	mov	r0, r3
 8008a36:	f004 feab 	bl	800d790 <ip4_route>
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3304      	adds	r3, #4
 8008a40:	461a      	mov	r2, r3
 8008a42:	4620      	mov	r0, r4
 8008a44:	f7ff f88c 	bl	8007b60 <tcp_eff_send_mss_netif>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a54:	009a      	lsls	r2, r3, #2
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	f241 111c 	movw	r1, #4380	; 0x111c
 8008a60:	428b      	cmp	r3, r1
 8008a62:	bf38      	it	cc
 8008a64:	460b      	movcc	r3, r1
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d204      	bcs.n	8008a74 <tcp_process+0x210>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	e00d      	b.n	8008a90 <tcp_process+0x22c>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	f241 121c 	movw	r2, #4380	; 0x111c
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d904      	bls.n	8008a8c <tcp_process+0x228>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008a86:	005b      	lsls	r3, r3, #1
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	e001      	b.n	8008a90 <tcp_process+0x22c>
 8008a8c:	f241 131c 	movw	r3, #4380	; 0x111c
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d106      	bne.n	8008aae <tcp_process+0x24a>
 8008aa0:	4b13      	ldr	r3, [pc, #76]	; (8008af0 <tcp_process+0x28c>)
 8008aa2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8008aa6:	491c      	ldr	r1, [pc, #112]	; (8008b18 <tcp_process+0x2b4>)
 8008aa8:	4813      	ldr	r0, [pc, #76]	; (8008af8 <tcp_process+0x294>)
 8008aaa:	f006 f95d 	bl	800ed68 <iprintf>
        --pcb->snd_queuelen;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	b29a      	uxth	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d12a      	bne.n	8008b20 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ace:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d106      	bne.n	8008ae4 <tcp_process+0x280>
 8008ad6:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <tcp_process+0x28c>)
 8008ad8:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008adc:	490f      	ldr	r1, [pc, #60]	; (8008b1c <tcp_process+0x2b8>)
 8008ade:	4806      	ldr	r0, [pc, #24]	; (8008af8 <tcp_process+0x294>)
 8008ae0:	f006 f942 	bl	800ed68 <iprintf>
          pcb->unsent = rseg->next;
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	66da      	str	r2, [r3, #108]	; 0x6c
 8008aec:	e01c      	b.n	8008b28 <tcp_process+0x2c4>
 8008aee:	bf00      	nop
 8008af0:	08010dd8 	.word	0x08010dd8
 8008af4:	08011010 	.word	0x08011010
 8008af8:	08010e24 	.word	0x08010e24
 8008afc:	200087b0 	.word	0x200087b0
 8008b00:	200087a8 	.word	0x200087a8
 8008b04:	200087a4 	.word	0x200087a4
 8008b08:	0801102c 	.word	0x0801102c
 8008b0c:	200087b1 	.word	0x200087b1
 8008b10:	2000876c 	.word	0x2000876c
 8008b14:	20008794 	.word	0x20008794
 8008b18:	0801104c 	.word	0x0801104c
 8008b1c:	08011064 	.word	0x08011064
        } else {
          pcb->unacked = rseg->next;
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008b28:	69f8      	ldr	r0, [r7, #28]
 8008b2a:	f7fe fd22 	bl	8007572 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d104      	bne.n	8008b40 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b3c:	861a      	strh	r2, [r3, #48]	; 0x30
 8008b3e:	e006      	b.n	8008b4e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <tcp_process+0x30a>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	6910      	ldr	r0, [r2, #16]
 8008b62:	2200      	movs	r2, #0
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	4798      	blx	r3
 8008b68:	4603      	mov	r3, r0
 8008b6a:	76bb      	strb	r3, [r7, #26]
 8008b6c:	e001      	b.n	8008b72 <tcp_process+0x30e>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008b72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008b76:	f113 0f0d 	cmn.w	r3, #13
 8008b7a:	d102      	bne.n	8008b82 <tcp_process+0x31e>
          return ERR_ABRT;
 8008b7c:	f06f 030c 	mvn.w	r3, #12
 8008b80:	e250      	b.n	8009024 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	8b5b      	ldrh	r3, [r3, #26]
 8008b86:	f043 0302 	orr.w	r3, r3, #2
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008b90:	e23a      	b.n	8009008 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008b92:	4b98      	ldr	r3, [pc, #608]	; (8008df4 <tcp_process+0x590>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	f003 0310 	and.w	r3, r3, #16
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f000 8234 	beq.w	8009008 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008ba0:	4b95      	ldr	r3, [pc, #596]	; (8008df8 <tcp_process+0x594>)
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	4b95      	ldr	r3, [pc, #596]	; (8008dfc <tcp_process+0x598>)
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4b95      	ldr	r3, [pc, #596]	; (8008e00 <tcp_process+0x59c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bb0:	4b94      	ldr	r3, [pc, #592]	; (8008e04 <tcp_process+0x5a0>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bb4:	885b      	ldrh	r3, [r3, #2]
 8008bb6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008bb8:	4a92      	ldr	r2, [pc, #584]	; (8008e04 <tcp_process+0x5a0>)
 8008bba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008bbc:	8812      	ldrh	r2, [r2, #0]
 8008bbe:	b292      	uxth	r2, r2
 8008bc0:	9202      	str	r2, [sp, #8]
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	4b90      	ldr	r3, [pc, #576]	; (8008e08 <tcp_process+0x5a4>)
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	4b90      	ldr	r3, [pc, #576]	; (8008e0c <tcp_process+0x5a8>)
 8008bca:	4602      	mov	r2, r0
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f002 fc85 	bl	800b4dc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bd8:	2b05      	cmp	r3, #5
 8008bda:	f200 8215 	bhi.w	8009008 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f002 fa51 	bl	800b08c <tcp_rexmit_rto>
      break;
 8008bea:	e20d      	b.n	8009008 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008bec:	4b81      	ldr	r3, [pc, #516]	; (8008df4 <tcp_process+0x590>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 80a1 	beq.w	8008d3c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008bfa:	4b7f      	ldr	r3, [pc, #508]	; (8008df8 <tcp_process+0x594>)
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	3b01      	subs	r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	db7e      	blt.n	8008d08 <tcp_process+0x4a4>
 8008c0a:	4b7b      	ldr	r3, [pc, #492]	; (8008df8 <tcp_process+0x594>)
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c12:	1ad3      	subs	r3, r2, r3
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	dc77      	bgt.n	8008d08 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2204      	movs	r2, #4
 8008c1c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d102      	bne.n	8008c2c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8008c26:	23fa      	movs	r3, #250	; 0xfa
 8008c28:	76bb      	strb	r3, [r7, #26]
 8008c2a:	e01d      	b.n	8008c68 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d106      	bne.n	8008c44 <tcp_process+0x3e0>
 8008c36:	4b76      	ldr	r3, [pc, #472]	; (8008e10 <tcp_process+0x5ac>)
 8008c38:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008c3c:	4975      	ldr	r1, [pc, #468]	; (8008e14 <tcp_process+0x5b0>)
 8008c3e:	4876      	ldr	r0, [pc, #472]	; (8008e18 <tcp_process+0x5b4>)
 8008c40:	f006 f892 	bl	800ed68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00a      	beq.n	8008c64 <tcp_process+0x400>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	6910      	ldr	r0, [r2, #16]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	6879      	ldr	r1, [r7, #4]
 8008c5c:	4798      	blx	r3
 8008c5e:	4603      	mov	r3, r0
 8008c60:	76bb      	strb	r3, [r7, #26]
 8008c62:	e001      	b.n	8008c68 <tcp_process+0x404>
 8008c64:	23f0      	movs	r3, #240	; 0xf0
 8008c66:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008c68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00a      	beq.n	8008c86 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008c70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008c74:	f113 0f0d 	cmn.w	r3, #13
 8008c78:	d002      	beq.n	8008c80 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fd ff8e 	bl	8006b9c <tcp_abort>
            }
            return ERR_ABRT;
 8008c80:	f06f 030c 	mvn.w	r3, #12
 8008c84:	e1ce      	b.n	8009024 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fae0 	bl	800924c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008c8c:	4b63      	ldr	r3, [pc, #396]	; (8008e1c <tcp_process+0x5b8>)
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d005      	beq.n	8008ca0 <tcp_process+0x43c>
            recv_acked--;
 8008c94:	4b61      	ldr	r3, [pc, #388]	; (8008e1c <tcp_process+0x5b8>)
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	4b5f      	ldr	r3, [pc, #380]	; (8008e1c <tcp_process+0x5b8>)
 8008c9e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ca4:	009a      	lsls	r2, r3, #2
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	f241 111c 	movw	r1, #4380	; 0x111c
 8008cb0:	428b      	cmp	r3, r1
 8008cb2:	bf38      	it	cc
 8008cb4:	460b      	movcc	r3, r1
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d204      	bcs.n	8008cc4 <tcp_process+0x460>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	e00d      	b.n	8008ce0 <tcp_process+0x47c>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	f241 121c 	movw	r2, #4380	; 0x111c
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d904      	bls.n	8008cdc <tcp_process+0x478>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cd6:	005b      	lsls	r3, r3, #1
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	e001      	b.n	8008ce0 <tcp_process+0x47c>
 8008cdc:	f241 131c 	movw	r3, #4380	; 0x111c
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8008ce6:	4b4e      	ldr	r3, [pc, #312]	; (8008e20 <tcp_process+0x5bc>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	f003 0320 	and.w	r3, r3, #32
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d037      	beq.n	8008d62 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	8b5b      	ldrh	r3, [r3, #26]
 8008cf6:	f043 0302 	orr.w	r3, r3, #2
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2207      	movs	r2, #7
 8008d04:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008d06:	e02c      	b.n	8008d62 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d08:	4b3b      	ldr	r3, [pc, #236]	; (8008df8 <tcp_process+0x594>)
 8008d0a:	6819      	ldr	r1, [r3, #0]
 8008d0c:	4b3b      	ldr	r3, [pc, #236]	; (8008dfc <tcp_process+0x598>)
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	4b3b      	ldr	r3, [pc, #236]	; (8008e00 <tcp_process+0x59c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d18:	4b3a      	ldr	r3, [pc, #232]	; (8008e04 <tcp_process+0x5a0>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d1c:	885b      	ldrh	r3, [r3, #2]
 8008d1e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008d20:	4a38      	ldr	r2, [pc, #224]	; (8008e04 <tcp_process+0x5a0>)
 8008d22:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d24:	8812      	ldrh	r2, [r2, #0]
 8008d26:	b292      	uxth	r2, r2
 8008d28:	9202      	str	r2, [sp, #8]
 8008d2a:	9301      	str	r3, [sp, #4]
 8008d2c:	4b36      	ldr	r3, [pc, #216]	; (8008e08 <tcp_process+0x5a4>)
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	4b36      	ldr	r3, [pc, #216]	; (8008e0c <tcp_process+0x5a8>)
 8008d32:	4602      	mov	r2, r0
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f002 fbd1 	bl	800b4dc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008d3a:	e167      	b.n	800900c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008d3c:	4b2d      	ldr	r3, [pc, #180]	; (8008df4 <tcp_process+0x590>)
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	f003 0302 	and.w	r3, r3, #2
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8161 	beq.w	800900c <tcp_process+0x7a8>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4e:	1e5a      	subs	r2, r3, #1
 8008d50:	4b2b      	ldr	r3, [pc, #172]	; (8008e00 <tcp_process+0x59c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	f040 8159 	bne.w	800900c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f002 f9b8 	bl	800b0d0 <tcp_rexmit>
      break;
 8008d60:	e154      	b.n	800900c <tcp_process+0x7a8>
 8008d62:	e153      	b.n	800900c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fa71 	bl	800924c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008d6a:	4b2d      	ldr	r3, [pc, #180]	; (8008e20 <tcp_process+0x5bc>)
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	f003 0320 	and.w	r3, r3, #32
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 814c 	beq.w	8009010 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	8b5b      	ldrh	r3, [r3, #26]
 8008d7c:	f043 0302 	orr.w	r3, r3, #2
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2207      	movs	r2, #7
 8008d8a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008d8c:	e140      	b.n	8009010 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa5c 	bl	800924c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008d94:	4b22      	ldr	r3, [pc, #136]	; (8008e20 <tcp_process+0x5bc>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d071      	beq.n	8008e84 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008da0:	4b14      	ldr	r3, [pc, #80]	; (8008df4 <tcp_process+0x590>)
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	f003 0310 	and.w	r3, r3, #16
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d060      	beq.n	8008e6e <tcp_process+0x60a>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008db0:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <tcp_process+0x594>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d15a      	bne.n	8008e6e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d156      	bne.n	8008e6e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	8b5b      	ldrh	r3, [r3, #26]
 8008dc4:	f043 0302 	orr.w	r3, r3, #2
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7fe fdbc 	bl	800794c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008dd4:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <tcp_process+0x5c0>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d105      	bne.n	8008dea <tcp_process+0x586>
 8008dde:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <tcp_process+0x5c0>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	4a0f      	ldr	r2, [pc, #60]	; (8008e24 <tcp_process+0x5c0>)
 8008de6:	6013      	str	r3, [r2, #0]
 8008de8:	e02e      	b.n	8008e48 <tcp_process+0x5e4>
 8008dea:	4b0e      	ldr	r3, [pc, #56]	; (8008e24 <tcp_process+0x5c0>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	617b      	str	r3, [r7, #20]
 8008df0:	e027      	b.n	8008e42 <tcp_process+0x5de>
 8008df2:	bf00      	nop
 8008df4:	200087b0 	.word	0x200087b0
 8008df8:	200087a8 	.word	0x200087a8
 8008dfc:	200087ae 	.word	0x200087ae
 8008e00:	200087a4 	.word	0x200087a4
 8008e04:	20008794 	.word	0x20008794
 8008e08:	2000520c 	.word	0x2000520c
 8008e0c:	20005210 	.word	0x20005210
 8008e10:	08010dd8 	.word	0x08010dd8
 8008e14:	08011078 	.word	0x08011078
 8008e18:	08010e24 	.word	0x08010e24
 8008e1c:	200087ac 	.word	0x200087ac
 8008e20:	200087b1 	.word	0x200087b1
 8008e24:	20008778 	.word	0x20008778
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d104      	bne.n	8008e3c <tcp_process+0x5d8>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	60da      	str	r2, [r3, #12]
 8008e3a:	e005      	b.n	8008e48 <tcp_process+0x5e4>
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	617b      	str	r3, [r7, #20]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d1ef      	bne.n	8008e28 <tcp_process+0x5c4>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	60da      	str	r2, [r3, #12]
 8008e4e:	4b77      	ldr	r3, [pc, #476]	; (800902c <tcp_process+0x7c8>)
 8008e50:	2201      	movs	r2, #1
 8008e52:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	220a      	movs	r2, #10
 8008e58:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008e5a:	4b75      	ldr	r3, [pc, #468]	; (8009030 <tcp_process+0x7cc>)
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	60da      	str	r2, [r3, #12]
 8008e62:	4a73      	ldr	r2, [pc, #460]	; (8009030 <tcp_process+0x7cc>)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	f002 fcfa 	bl	800b860 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008e6c:	e0d2      	b.n	8009014 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	8b5b      	ldrh	r3, [r3, #26]
 8008e72:	f043 0302 	orr.w	r3, r3, #2
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2208      	movs	r2, #8
 8008e80:	751a      	strb	r2, [r3, #20]
      break;
 8008e82:	e0c7      	b.n	8009014 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008e84:	4b6b      	ldr	r3, [pc, #428]	; (8009034 <tcp_process+0x7d0>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	f003 0310 	and.w	r3, r3, #16
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 80c1 	beq.w	8009014 <tcp_process+0x7b0>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e96:	4b68      	ldr	r3, [pc, #416]	; (8009038 <tcp_process+0x7d4>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	f040 80ba 	bne.w	8009014 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f040 80b5 	bne.w	8009014 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2206      	movs	r2, #6
 8008eae:	751a      	strb	r2, [r3, #20]
      break;
 8008eb0:	e0b0      	b.n	8009014 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f9ca 	bl	800924c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008eb8:	4b60      	ldr	r3, [pc, #384]	; (800903c <tcp_process+0x7d8>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	f003 0320 	and.w	r3, r3, #32
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 80a9 	beq.w	8009018 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	8b5b      	ldrh	r3, [r3, #26]
 8008eca:	f043 0302 	orr.w	r3, r3, #2
 8008ece:	b29a      	uxth	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7fe fd39 	bl	800794c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008eda:	4b59      	ldr	r3, [pc, #356]	; (8009040 <tcp_process+0x7dc>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d105      	bne.n	8008ef0 <tcp_process+0x68c>
 8008ee4:	4b56      	ldr	r3, [pc, #344]	; (8009040 <tcp_process+0x7dc>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	4a55      	ldr	r2, [pc, #340]	; (8009040 <tcp_process+0x7dc>)
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	e013      	b.n	8008f18 <tcp_process+0x6b4>
 8008ef0:	4b53      	ldr	r3, [pc, #332]	; (8009040 <tcp_process+0x7dc>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	613b      	str	r3, [r7, #16]
 8008ef6:	e00c      	b.n	8008f12 <tcp_process+0x6ae>
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d104      	bne.n	8008f0c <tcp_process+0x6a8>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68da      	ldr	r2, [r3, #12]
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	60da      	str	r2, [r3, #12]
 8008f0a:	e005      	b.n	8008f18 <tcp_process+0x6b4>
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1ef      	bne.n	8008ef8 <tcp_process+0x694>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	60da      	str	r2, [r3, #12]
 8008f1e:	4b43      	ldr	r3, [pc, #268]	; (800902c <tcp_process+0x7c8>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	220a      	movs	r2, #10
 8008f28:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008f2a:	4b41      	ldr	r3, [pc, #260]	; (8009030 <tcp_process+0x7cc>)
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	60da      	str	r2, [r3, #12]
 8008f32:	4a3f      	ldr	r2, [pc, #252]	; (8009030 <tcp_process+0x7cc>)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	f002 fc92 	bl	800b860 <tcp_timer_needed>
      }
      break;
 8008f3c:	e06c      	b.n	8009018 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f984 	bl	800924c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008f44:	4b3b      	ldr	r3, [pc, #236]	; (8009034 <tcp_process+0x7d0>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f003 0310 	and.w	r3, r3, #16
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d065      	beq.n	800901c <tcp_process+0x7b8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f54:	4b38      	ldr	r3, [pc, #224]	; (8009038 <tcp_process+0x7d4>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d15f      	bne.n	800901c <tcp_process+0x7b8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d15b      	bne.n	800901c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7fe fcf1 	bl	800794c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008f6a:	4b35      	ldr	r3, [pc, #212]	; (8009040 <tcp_process+0x7dc>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d105      	bne.n	8008f80 <tcp_process+0x71c>
 8008f74:	4b32      	ldr	r3, [pc, #200]	; (8009040 <tcp_process+0x7dc>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	4a31      	ldr	r2, [pc, #196]	; (8009040 <tcp_process+0x7dc>)
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	e013      	b.n	8008fa8 <tcp_process+0x744>
 8008f80:	4b2f      	ldr	r3, [pc, #188]	; (8009040 <tcp_process+0x7dc>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	e00c      	b.n	8008fa2 <tcp_process+0x73e>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d104      	bne.n	8008f9c <tcp_process+0x738>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	60da      	str	r2, [r3, #12]
 8008f9a:	e005      	b.n	8008fa8 <tcp_process+0x744>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	60fb      	str	r3, [r7, #12]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d1ef      	bne.n	8008f88 <tcp_process+0x724>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	60da      	str	r2, [r3, #12]
 8008fae:	4b1f      	ldr	r3, [pc, #124]	; (800902c <tcp_process+0x7c8>)
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	220a      	movs	r2, #10
 8008fb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008fba:	4b1d      	ldr	r3, [pc, #116]	; (8009030 <tcp_process+0x7cc>)
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60da      	str	r2, [r3, #12]
 8008fc2:	4a1b      	ldr	r2, [pc, #108]	; (8009030 <tcp_process+0x7cc>)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6013      	str	r3, [r2, #0]
 8008fc8:	f002 fc4a 	bl	800b860 <tcp_timer_needed>
      }
      break;
 8008fcc:	e026      	b.n	800901c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f93c 	bl	800924c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008fd4:	4b17      	ldr	r3, [pc, #92]	; (8009034 <tcp_process+0x7d0>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01f      	beq.n	8009020 <tcp_process+0x7bc>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fe4:	4b14      	ldr	r3, [pc, #80]	; (8009038 <tcp_process+0x7d4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d119      	bne.n	8009020 <tcp_process+0x7bc>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d115      	bne.n	8009020 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <tcp_process+0x7d8>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	f043 0310 	orr.w	r3, r3, #16
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	; (800903c <tcp_process+0x7d8>)
 8009000:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009002:	e00d      	b.n	8009020 <tcp_process+0x7bc>
    default:
      break;
 8009004:	bf00      	nop
 8009006:	e00c      	b.n	8009022 <tcp_process+0x7be>
      break;
 8009008:	bf00      	nop
 800900a:	e00a      	b.n	8009022 <tcp_process+0x7be>
      break;
 800900c:	bf00      	nop
 800900e:	e008      	b.n	8009022 <tcp_process+0x7be>
      break;
 8009010:	bf00      	nop
 8009012:	e006      	b.n	8009022 <tcp_process+0x7be>
      break;
 8009014:	bf00      	nop
 8009016:	e004      	b.n	8009022 <tcp_process+0x7be>
      break;
 8009018:	bf00      	nop
 800901a:	e002      	b.n	8009022 <tcp_process+0x7be>
      break;
 800901c:	bf00      	nop
 800901e:	e000      	b.n	8009022 <tcp_process+0x7be>
      break;
 8009020:	bf00      	nop
  }
  return ERR_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3724      	adds	r7, #36	; 0x24
 8009028:	46bd      	mov	sp, r7
 800902a:	bd90      	pop	{r4, r7, pc}
 800902c:	20008780 	.word	0x20008780
 8009030:	2000877c 	.word	0x2000877c
 8009034:	200087b0 	.word	0x200087b0
 8009038:	200087a8 	.word	0x200087a8
 800903c:	200087b1 	.word	0x200087b1
 8009040:	20008778 	.word	0x20008778

08009044 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009044:	b590      	push	{r4, r7, lr}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d106      	bne.n	8009062 <tcp_oos_insert_segment+0x1e>
 8009054:	4b3b      	ldr	r3, [pc, #236]	; (8009144 <tcp_oos_insert_segment+0x100>)
 8009056:	f240 421f 	movw	r2, #1055	; 0x41f
 800905a:	493b      	ldr	r1, [pc, #236]	; (8009148 <tcp_oos_insert_segment+0x104>)
 800905c:	483b      	ldr	r0, [pc, #236]	; (800914c <tcp_oos_insert_segment+0x108>)
 800905e:	f005 fe83 	bl	800ed68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	899b      	ldrh	r3, [r3, #12]
 8009068:	b29b      	uxth	r3, r3
 800906a:	4618      	mov	r0, r3
 800906c:	f7fb fca0 	bl	80049b0 <lwip_htons>
 8009070:	4603      	mov	r3, r0
 8009072:	b2db      	uxtb	r3, r3
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b00      	cmp	r3, #0
 800907a:	d028      	beq.n	80090ce <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800907c:	6838      	ldr	r0, [r7, #0]
 800907e:	f7fe fa63 	bl	8007548 <tcp_segs_free>
    next = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	e056      	b.n	8009136 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	899b      	ldrh	r3, [r3, #12]
 800908e:	b29b      	uxth	r3, r3
 8009090:	4618      	mov	r0, r3
 8009092:	f7fb fc8d 	bl	80049b0 <lwip_htons>
 8009096:	4603      	mov	r3, r0
 8009098:	b2db      	uxtb	r3, r3
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00d      	beq.n	80090be <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	899b      	ldrh	r3, [r3, #12]
 80090a8:	b29c      	uxth	r4, r3
 80090aa:	2001      	movs	r0, #1
 80090ac:	f7fb fc80 	bl	80049b0 <lwip_htons>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4322      	orrs	r2, r4
 80090ba:	b292      	uxth	r2, r2
 80090bc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f7fe fa52 	bl	8007572 <tcp_seg_free>
    while (next &&
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00e      	beq.n	80090f2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	891b      	ldrh	r3, [r3, #8]
 80090d8:	461a      	mov	r2, r3
 80090da:	4b1d      	ldr	r3, [pc, #116]	; (8009150 <tcp_oos_insert_segment+0x10c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	441a      	add	r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	8909      	ldrh	r1, [r1, #8]
 80090ea:	440b      	add	r3, r1
 80090ec:	1ad3      	subs	r3, r2, r3
    while (next &&
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	daca      	bge.n	8009088 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d01e      	beq.n	8009136 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	891b      	ldrh	r3, [r3, #8]
 80090fc:	461a      	mov	r2, r3
 80090fe:	4b14      	ldr	r3, [pc, #80]	; (8009150 <tcp_oos_insert_segment+0x10c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	441a      	add	r2, r3
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800910c:	2b00      	cmp	r3, #0
 800910e:	dd12      	ble.n	8009136 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	b29a      	uxth	r2, r3
 8009118:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <tcp_oos_insert_segment+0x10c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	b29b      	uxth	r3, r3
 800911e:	1ad3      	subs	r3, r2, r3
 8009120:	b29a      	uxth	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	891b      	ldrh	r3, [r3, #8]
 800912e:	4619      	mov	r1, r3
 8009130:	4610      	mov	r0, r2
 8009132:	f7fc fe15 	bl	8005d60 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	601a      	str	r2, [r3, #0]
}
 800913c:	bf00      	nop
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	bd90      	pop	{r4, r7, pc}
 8009144:	08010dd8 	.word	0x08010dd8
 8009148:	08011098 	.word	0x08011098
 800914c:	08010e24 	.word	0x08010e24
 8009150:	200087a4 	.word	0x200087a4

08009154 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009154:	b5b0      	push	{r4, r5, r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009162:	e03e      	b.n	80091e2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd f802 	bl	800617c <pbuf_clen>
 8009178:	4603      	mov	r3, r0
 800917a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009182:	8a7a      	ldrh	r2, [r7, #18]
 8009184:	429a      	cmp	r2, r3
 8009186:	d906      	bls.n	8009196 <tcp_free_acked_segments+0x42>
 8009188:	4b2a      	ldr	r3, [pc, #168]	; (8009234 <tcp_free_acked_segments+0xe0>)
 800918a:	f240 4257 	movw	r2, #1111	; 0x457
 800918e:	492a      	ldr	r1, [pc, #168]	; (8009238 <tcp_free_acked_segments+0xe4>)
 8009190:	482a      	ldr	r0, [pc, #168]	; (800923c <tcp_free_acked_segments+0xe8>)
 8009192:	f005 fde9 	bl	800ed68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800919c:	8a7b      	ldrh	r3, [r7, #18]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	891a      	ldrh	r2, [r3, #8]
 80091ac:	4b24      	ldr	r3, [pc, #144]	; (8009240 <tcp_free_acked_segments+0xec>)
 80091ae:	881b      	ldrh	r3, [r3, #0]
 80091b0:	4413      	add	r3, r2
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	4b22      	ldr	r3, [pc, #136]	; (8009240 <tcp_free_acked_segments+0xec>)
 80091b6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80091b8:	6978      	ldr	r0, [r7, #20]
 80091ba:	f7fe f9da 	bl	8007572 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00c      	beq.n	80091e2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d109      	bne.n	80091e2 <tcp_free_acked_segments+0x8e>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d106      	bne.n	80091e2 <tcp_free_acked_segments+0x8e>
 80091d4:	4b17      	ldr	r3, [pc, #92]	; (8009234 <tcp_free_acked_segments+0xe0>)
 80091d6:	f240 4261 	movw	r2, #1121	; 0x461
 80091da:	491a      	ldr	r1, [pc, #104]	; (8009244 <tcp_free_acked_segments+0xf0>)
 80091dc:	4817      	ldr	r0, [pc, #92]	; (800923c <tcp_free_acked_segments+0xe8>)
 80091de:	f005 fdc3 	bl	800ed68 <iprintf>
  while (seg_list != NULL &&
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d020      	beq.n	800922a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fb fbf3 	bl	80049da <lwip_htonl>
 80091f4:	4604      	mov	r4, r0
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	891b      	ldrh	r3, [r3, #8]
 80091fa:	461d      	mov	r5, r3
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	68db      	ldr	r3, [r3, #12]
 8009200:	899b      	ldrh	r3, [r3, #12]
 8009202:	b29b      	uxth	r3, r3
 8009204:	4618      	mov	r0, r3
 8009206:	f7fb fbd3 	bl	80049b0 <lwip_htons>
 800920a:	4603      	mov	r3, r0
 800920c:	b2db      	uxtb	r3, r3
 800920e:	f003 0303 	and.w	r3, r3, #3
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <tcp_free_acked_segments+0xc6>
 8009216:	2301      	movs	r3, #1
 8009218:	e000      	b.n	800921c <tcp_free_acked_segments+0xc8>
 800921a:	2300      	movs	r3, #0
 800921c:	442b      	add	r3, r5
 800921e:	18e2      	adds	r2, r4, r3
 8009220:	4b09      	ldr	r3, [pc, #36]	; (8009248 <tcp_free_acked_segments+0xf4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009226:	2b00      	cmp	r3, #0
 8009228:	dd9c      	ble.n	8009164 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800922a:	68bb      	ldr	r3, [r7, #8]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bdb0      	pop	{r4, r5, r7, pc}
 8009234:	08010dd8 	.word	0x08010dd8
 8009238:	080110c0 	.word	0x080110c0
 800923c:	08010e24 	.word	0x08010e24
 8009240:	200087ac 	.word	0x200087ac
 8009244:	080110e8 	.word	0x080110e8
 8009248:	200087a8 	.word	0x200087a8

0800924c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800924c:	b5b0      	push	{r4, r5, r7, lr}
 800924e:	b094      	sub	sp, #80	; 0x50
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d106      	bne.n	800926c <tcp_receive+0x20>
 800925e:	4b91      	ldr	r3, [pc, #580]	; (80094a4 <tcp_receive+0x258>)
 8009260:	f240 427b 	movw	r2, #1147	; 0x47b
 8009264:	4990      	ldr	r1, [pc, #576]	; (80094a8 <tcp_receive+0x25c>)
 8009266:	4891      	ldr	r0, [pc, #580]	; (80094ac <tcp_receive+0x260>)
 8009268:	f005 fd7e 	bl	800ed68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	7d1b      	ldrb	r3, [r3, #20]
 8009270:	2b03      	cmp	r3, #3
 8009272:	d806      	bhi.n	8009282 <tcp_receive+0x36>
 8009274:	4b8b      	ldr	r3, [pc, #556]	; (80094a4 <tcp_receive+0x258>)
 8009276:	f240 427c 	movw	r2, #1148	; 0x47c
 800927a:	498d      	ldr	r1, [pc, #564]	; (80094b0 <tcp_receive+0x264>)
 800927c:	488b      	ldr	r0, [pc, #556]	; (80094ac <tcp_receive+0x260>)
 800927e:	f005 fd73 	bl	800ed68 <iprintf>

  if (flags & TCP_ACK) {
 8009282:	4b8c      	ldr	r3, [pc, #560]	; (80094b4 <tcp_receive+0x268>)
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	f003 0310 	and.w	r3, r3, #16
 800928a:	2b00      	cmp	r3, #0
 800928c:	f000 8264 	beq.w	8009758 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800929c:	4413      	add	r3, r2
 800929e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092a4:	4b84      	ldr	r3, [pc, #528]	; (80094b8 <tcp_receive+0x26c>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	db1b      	blt.n	80092e6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092b2:	4b81      	ldr	r3, [pc, #516]	; (80094b8 <tcp_receive+0x26c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d106      	bne.n	80092c8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092be:	4b7f      	ldr	r3, [pc, #508]	; (80094bc <tcp_receive+0x270>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	db0e      	blt.n	80092e6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092cc:	4b7b      	ldr	r3, [pc, #492]	; (80094bc <tcp_receive+0x270>)
 80092ce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d125      	bne.n	8009320 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80092d4:	4b7a      	ldr	r3, [pc, #488]	; (80094c0 <tcp_receive+0x274>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	89db      	ldrh	r3, [r3, #14]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d91c      	bls.n	8009320 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80092e6:	4b76      	ldr	r3, [pc, #472]	; (80094c0 <tcp_receive+0x274>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	89db      	ldrh	r3, [r3, #14]
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009300:	429a      	cmp	r2, r3
 8009302:	d205      	bcs.n	8009310 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009310:	4b69      	ldr	r3, [pc, #420]	; (80094b8 <tcp_receive+0x26c>)
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009318:	4b68      	ldr	r3, [pc, #416]	; (80094bc <tcp_receive+0x270>)
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009320:	4b66      	ldr	r3, [pc, #408]	; (80094bc <tcp_receive+0x270>)
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009328:	1ad3      	subs	r3, r2, r3
 800932a:	2b00      	cmp	r3, #0
 800932c:	dc58      	bgt.n	80093e0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800932e:	4b65      	ldr	r3, [pc, #404]	; (80094c4 <tcp_receive+0x278>)
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d14b      	bne.n	80093ce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8009340:	4413      	add	r3, r2
 8009342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009344:	429a      	cmp	r2, r3
 8009346:	d142      	bne.n	80093ce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800934e:	2b00      	cmp	r3, #0
 8009350:	db3d      	blt.n	80093ce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009356:	4b59      	ldr	r3, [pc, #356]	; (80094bc <tcp_receive+0x270>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	429a      	cmp	r2, r3
 800935c:	d137      	bne.n	80093ce <tcp_receive+0x182>
              found_dupack = 1;
 800935e:	2301      	movs	r3, #1
 8009360:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009368:	2bff      	cmp	r3, #255	; 0xff
 800936a:	d007      	beq.n	800937c <tcp_receive+0x130>
                ++pcb->dupacks;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009372:	3301      	adds	r3, #1
 8009374:	b2da      	uxtb	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009382:	2b03      	cmp	r3, #3
 8009384:	d91b      	bls.n	80093be <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009390:	4413      	add	r3, r2
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800939a:	429a      	cmp	r2, r3
 800939c:	d30a      	bcc.n	80093b4 <tcp_receive+0x168>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80093a8:	4413      	add	r3, r2
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80093b2:	e004      	b.n	80093be <tcp_receive+0x172>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d902      	bls.n	80093ce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 feed 	bl	800b1a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80093ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f040 8161 	bne.w	8009698 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093de:	e15b      	b.n	8009698 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80093e0:	4b36      	ldr	r3, [pc, #216]	; (80094bc <tcp_receive+0x270>)
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	3b01      	subs	r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f2c0 814e 	blt.w	800968e <tcp_receive+0x442>
 80093f2:	4b32      	ldr	r3, [pc, #200]	; (80094bc <tcp_receive+0x270>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f300 8146 	bgt.w	800968e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	8b5b      	ldrh	r3, [r3, #26]
 8009406:	f003 0304 	and.w	r3, r3, #4
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	8b5b      	ldrh	r3, [r3, #26]
 8009412:	f023 0304 	bic.w	r3, r3, #4
 8009416:	b29a      	uxth	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800943e:	10db      	asrs	r3, r3, #3
 8009440:	b21b      	sxth	r3, r3
 8009442:	b29a      	uxth	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800944a:	b29b      	uxth	r3, r3
 800944c:	4413      	add	r3, r2
 800944e:	b29b      	uxth	r3, r3
 8009450:	b21a      	sxth	r2, r3
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009458:	4b18      	ldr	r3, [pc, #96]	; (80094bc <tcp_receive+0x270>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	b29a      	uxth	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009462:	b29b      	uxth	r3, r3
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009470:	4b12      	ldr	r3, [pc, #72]	; (80094bc <tcp_receive+0x270>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	7d1b      	ldrb	r3, [r3, #20]
 800947c:	2b03      	cmp	r3, #3
 800947e:	f240 8097 	bls.w	80095b0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800948e:	429a      	cmp	r2, r3
 8009490:	d245      	bcs.n	800951e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	8b5b      	ldrh	r3, [r3, #26]
 8009496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800949a:	2b00      	cmp	r3, #0
 800949c:	d014      	beq.n	80094c8 <tcp_receive+0x27c>
 800949e:	2301      	movs	r3, #1
 80094a0:	e013      	b.n	80094ca <tcp_receive+0x27e>
 80094a2:	bf00      	nop
 80094a4:	08010dd8 	.word	0x08010dd8
 80094a8:	08011108 	.word	0x08011108
 80094ac:	08010e24 	.word	0x08010e24
 80094b0:	08011124 	.word	0x08011124
 80094b4:	200087b0 	.word	0x200087b0
 80094b8:	200087a4 	.word	0x200087a4
 80094bc:	200087a8 	.word	0x200087a8
 80094c0:	20008794 	.word	0x20008794
 80094c4:	200087ae 	.word	0x200087ae
 80094c8:	2302      	movs	r3, #2
 80094ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80094ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80094d8:	fb12 f303 	smulbb	r3, r2, r3
 80094dc:	b29b      	uxth	r3, r3
 80094de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80094e0:	4293      	cmp	r3, r2
 80094e2:	bf28      	it	cs
 80094e4:	4613      	movcs	r3, r2
 80094e6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80094ee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80094f0:	4413      	add	r3, r2
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d309      	bcc.n	8009512 <tcp_receive+0x2c6>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009504:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009506:	4413      	add	r3, r2
 8009508:	b29a      	uxth	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009510:	e04e      	b.n	80095b0 <tcp_receive+0x364>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009518:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800951c:	e048      	b.n	80095b0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009524:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009526:	4413      	add	r3, r2
 8009528:	b29a      	uxth	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009530:	429a      	cmp	r2, r3
 8009532:	d309      	bcc.n	8009548 <tcp_receive+0x2fc>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800953a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800953c:	4413      	add	r3, r2
 800953e:	b29a      	uxth	r2, r3
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009546:	e004      	b.n	8009552 <tcp_receive+0x306>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800954e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800955e:	429a      	cmp	r2, r3
 8009560:	d326      	bcc.n	80095b0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009582:	4413      	add	r3, r2
 8009584:	b29a      	uxth	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800958c:	429a      	cmp	r2, r3
 800958e:	d30a      	bcc.n	80095a6 <tcp_receive+0x35a>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800959a:	4413      	add	r3, r2
 800959c:	b29a      	uxth	r2, r3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80095a4:	e004      	b.n	80095b0 <tcp_receive+0x364>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b8:	4a98      	ldr	r2, [pc, #608]	; (800981c <tcp_receive+0x5d0>)
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7ff fdca 	bl	8009154 <tcp_free_acked_segments>
 80095c0:	4602      	mov	r2, r0
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ce:	4a94      	ldr	r2, [pc, #592]	; (8009820 <tcp_receive+0x5d4>)
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7ff fdbf 	bl	8009154 <tcp_free_acked_segments>
 80095d6:	4602      	mov	r2, r0
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d104      	bne.n	80095ee <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095ea:	861a      	strh	r2, [r3, #48]	; 0x30
 80095ec:	e002      	b.n	80095f4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d103      	bne.n	800960a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009610:	4b84      	ldr	r3, [pc, #528]	; (8009824 <tcp_receive+0x5d8>)
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	4413      	add	r3, r2
 8009616:	b29a      	uxth	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	8b5b      	ldrh	r3, [r3, #26]
 8009622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009626:	2b00      	cmp	r3, #0
 8009628:	d035      	beq.n	8009696 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800962e:	2b00      	cmp	r3, #0
 8009630:	d118      	bne.n	8009664 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00c      	beq.n	8009654 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	4618      	mov	r0, r3
 8009648:	f7fb f9c7 	bl	80049da <lwip_htonl>
 800964c:	4603      	mov	r3, r0
 800964e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009650:	2b00      	cmp	r3, #0
 8009652:	dc20      	bgt.n	8009696 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	8b5b      	ldrh	r3, [r3, #26]
 8009658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800965c:	b29a      	uxth	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009662:	e018      	b.n	8009696 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966c:	68db      	ldr	r3, [r3, #12]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	4618      	mov	r0, r3
 8009672:	f7fb f9b2 	bl	80049da <lwip_htonl>
 8009676:	4603      	mov	r3, r0
 8009678:	1ae3      	subs	r3, r4, r3
 800967a:	2b00      	cmp	r3, #0
 800967c:	dc0b      	bgt.n	8009696 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	8b5b      	ldrh	r3, [r3, #26]
 8009682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009686:	b29a      	uxth	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800968c:	e003      	b.n	8009696 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f001 ff76 	bl	800b580 <tcp_send_empty_ack>
 8009694:	e000      	b.n	8009698 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009696:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969c:	2b00      	cmp	r3, #0
 800969e:	d05b      	beq.n	8009758 <tcp_receive+0x50c>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a4:	4b60      	ldr	r3, [pc, #384]	; (8009828 <tcp_receive+0x5dc>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	da54      	bge.n	8009758 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80096ae:	4b5f      	ldr	r3, [pc, #380]	; (800982c <tcp_receive+0x5e0>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	b29b      	uxth	r3, r3
 80096be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80096c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80096cc:	10db      	asrs	r3, r3, #3
 80096ce:	b21b      	sxth	r3, r3
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	1ad3      	subs	r3, r2, r3
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80096e6:	4413      	add	r3, r2
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	b21a      	sxth	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80096f0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	da05      	bge.n	8009704 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80096f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80096fc:	425b      	negs	r3, r3
 80096fe:	b29b      	uxth	r3, r3
 8009700:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009704:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800970e:	109b      	asrs	r3, r3, #2
 8009710:	b21b      	sxth	r3, r3
 8009712:	b29b      	uxth	r3, r3
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	b29b      	uxth	r3, r3
 8009718:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009722:	b29a      	uxth	r2, r3
 8009724:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009728:	4413      	add	r3, r2
 800972a:	b29b      	uxth	r3, r3
 800972c:	b21a      	sxth	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009738:	10db      	asrs	r3, r3, #3
 800973a:	b21b      	sxth	r3, r3
 800973c:	b29a      	uxth	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009744:	b29b      	uxth	r3, r3
 8009746:	4413      	add	r3, r2
 8009748:	b29b      	uxth	r3, r3
 800974a:	b21a      	sxth	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009758:	4b35      	ldr	r3, [pc, #212]	; (8009830 <tcp_receive+0x5e4>)
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	f000 84e2 	beq.w	800a126 <tcp_receive+0xeda>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	7d1b      	ldrb	r3, [r3, #20]
 8009766:	2b06      	cmp	r3, #6
 8009768:	f200 84dd 	bhi.w	800a126 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009770:	4b30      	ldr	r3, [pc, #192]	; (8009834 <tcp_receive+0x5e8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	3b01      	subs	r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	f2c0 808f 	blt.w	800989c <tcp_receive+0x650>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009782:	4b2b      	ldr	r3, [pc, #172]	; (8009830 <tcp_receive+0x5e4>)
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	4619      	mov	r1, r3
 8009788:	4b2a      	ldr	r3, [pc, #168]	; (8009834 <tcp_receive+0x5e8>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	440b      	add	r3, r1
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	3301      	adds	r3, #1
 8009792:	2b00      	cmp	r3, #0
 8009794:	f300 8082 	bgt.w	800989c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009798:	4b27      	ldr	r3, [pc, #156]	; (8009838 <tcp_receive+0x5ec>)
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097a2:	4b24      	ldr	r3, [pc, #144]	; (8009834 <tcp_receive+0x5e8>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80097aa:	4b23      	ldr	r3, [pc, #140]	; (8009838 <tcp_receive+0x5ec>)
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <tcp_receive+0x574>
 80097b2:	4b22      	ldr	r3, [pc, #136]	; (800983c <tcp_receive+0x5f0>)
 80097b4:	f240 5294 	movw	r2, #1428	; 0x594
 80097b8:	4921      	ldr	r1, [pc, #132]	; (8009840 <tcp_receive+0x5f4>)
 80097ba:	4822      	ldr	r0, [pc, #136]	; (8009844 <tcp_receive+0x5f8>)
 80097bc:	f005 fad4 	bl	800ed68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d906      	bls.n	80097d8 <tcp_receive+0x58c>
 80097ca:	4b1c      	ldr	r3, [pc, #112]	; (800983c <tcp_receive+0x5f0>)
 80097cc:	f240 5295 	movw	r2, #1429	; 0x595
 80097d0:	491d      	ldr	r1, [pc, #116]	; (8009848 <tcp_receive+0x5fc>)
 80097d2:	481c      	ldr	r0, [pc, #112]	; (8009844 <tcp_receive+0x5f8>)
 80097d4:	f005 fac8 	bl	800ed68 <iprintf>
      off = (u16_t)off32;
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80097de:	4b16      	ldr	r3, [pc, #88]	; (8009838 <tcp_receive+0x5ec>)
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	891b      	ldrh	r3, [r3, #8]
 80097e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d906      	bls.n	80097fa <tcp_receive+0x5ae>
 80097ec:	4b13      	ldr	r3, [pc, #76]	; (800983c <tcp_receive+0x5f0>)
 80097ee:	f240 5297 	movw	r2, #1431	; 0x597
 80097f2:	4916      	ldr	r1, [pc, #88]	; (800984c <tcp_receive+0x600>)
 80097f4:	4813      	ldr	r0, [pc, #76]	; (8009844 <tcp_receive+0x5f8>)
 80097f6:	f005 fab7 	bl	800ed68 <iprintf>
      inseg.len -= off;
 80097fa:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <tcp_receive+0x5ec>)
 80097fc:	891a      	ldrh	r2, [r3, #8]
 80097fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	b29a      	uxth	r2, r3
 8009806:	4b0c      	ldr	r3, [pc, #48]	; (8009838 <tcp_receive+0x5ec>)
 8009808:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800980a:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <tcp_receive+0x5ec>)
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	891a      	ldrh	r2, [r3, #8]
 8009810:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009818:	e02a      	b.n	8009870 <tcp_receive+0x624>
 800981a:	bf00      	nop
 800981c:	08011140 	.word	0x08011140
 8009820:	08011148 	.word	0x08011148
 8009824:	200087ac 	.word	0x200087ac
 8009828:	200087a8 	.word	0x200087a8
 800982c:	2000876c 	.word	0x2000876c
 8009830:	200087ae 	.word	0x200087ae
 8009834:	200087a4 	.word	0x200087a4
 8009838:	20008784 	.word	0x20008784
 800983c:	08010dd8 	.word	0x08010dd8
 8009840:	08011150 	.word	0x08011150
 8009844:	08010e24 	.word	0x08010e24
 8009848:	08011160 	.word	0x08011160
 800984c:	08011170 	.word	0x08011170
        off -= p->len;
 8009850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009852:	895b      	ldrh	r3, [r3, #10]
 8009854:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800985e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009860:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009862:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009866:	2200      	movs	r2, #0
 8009868:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800986a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009872:	895b      	ldrh	r3, [r3, #10]
 8009874:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009878:	429a      	cmp	r2, r3
 800987a:	d8e9      	bhi.n	8009850 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800987c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009880:	4619      	mov	r1, r3
 8009882:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009884:	f7fc fb6c 	bl	8005f60 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	4a91      	ldr	r2, [pc, #580]	; (8009ad4 <tcp_receive+0x888>)
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	4b91      	ldr	r3, [pc, #580]	; (8009ad8 <tcp_receive+0x88c>)
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	4a8f      	ldr	r2, [pc, #572]	; (8009ad4 <tcp_receive+0x888>)
 8009896:	6812      	ldr	r2, [r2, #0]
 8009898:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800989a:	e00d      	b.n	80098b8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800989c:	4b8d      	ldr	r3, [pc, #564]	; (8009ad4 <tcp_receive+0x888>)
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	1ad3      	subs	r3, r2, r3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	da06      	bge.n	80098b8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	8b5b      	ldrh	r3, [r3, #26]
 80098ae:	f043 0302 	orr.w	r3, r3, #2
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80098b8:	4b86      	ldr	r3, [pc, #536]	; (8009ad4 <tcp_receive+0x888>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f2c0 842a 	blt.w	800a11c <tcp_receive+0xed0>
 80098c8:	4b82      	ldr	r3, [pc, #520]	; (8009ad4 <tcp_receive+0x888>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80098d4:	440b      	add	r3, r1
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	3301      	adds	r3, #1
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f300 841e 	bgt.w	800a11c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098e4:	4b7b      	ldr	r3, [pc, #492]	; (8009ad4 <tcp_receive+0x888>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	f040 829a 	bne.w	8009e22 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80098ee:	4b7a      	ldr	r3, [pc, #488]	; (8009ad8 <tcp_receive+0x88c>)
 80098f0:	891c      	ldrh	r4, [r3, #8]
 80098f2:	4b79      	ldr	r3, [pc, #484]	; (8009ad8 <tcp_receive+0x88c>)
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	899b      	ldrh	r3, [r3, #12]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fb f858 	bl	80049b0 <lwip_htons>
 8009900:	4603      	mov	r3, r0
 8009902:	b2db      	uxtb	r3, r3
 8009904:	f003 0303 	and.w	r3, r3, #3
 8009908:	2b00      	cmp	r3, #0
 800990a:	d001      	beq.n	8009910 <tcp_receive+0x6c4>
 800990c:	2301      	movs	r3, #1
 800990e:	e000      	b.n	8009912 <tcp_receive+0x6c6>
 8009910:	2300      	movs	r3, #0
 8009912:	4423      	add	r3, r4
 8009914:	b29a      	uxth	r2, r3
 8009916:	4b71      	ldr	r3, [pc, #452]	; (8009adc <tcp_receive+0x890>)
 8009918:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800991e:	4b6f      	ldr	r3, [pc, #444]	; (8009adc <tcp_receive+0x890>)
 8009920:	881b      	ldrh	r3, [r3, #0]
 8009922:	429a      	cmp	r2, r3
 8009924:	d275      	bcs.n	8009a12 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009926:	4b6c      	ldr	r3, [pc, #432]	; (8009ad8 <tcp_receive+0x88c>)
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	899b      	ldrh	r3, [r3, #12]
 800992c:	b29b      	uxth	r3, r3
 800992e:	4618      	mov	r0, r3
 8009930:	f7fb f83e 	bl	80049b0 <lwip_htons>
 8009934:	4603      	mov	r3, r0
 8009936:	b2db      	uxtb	r3, r3
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01f      	beq.n	8009980 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009940:	4b65      	ldr	r3, [pc, #404]	; (8009ad8 <tcp_receive+0x88c>)
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	899b      	ldrh	r3, [r3, #12]
 8009946:	b29b      	uxth	r3, r3
 8009948:	b21b      	sxth	r3, r3
 800994a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800994e:	b21c      	sxth	r4, r3
 8009950:	4b61      	ldr	r3, [pc, #388]	; (8009ad8 <tcp_receive+0x88c>)
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	899b      	ldrh	r3, [r3, #12]
 8009956:	b29b      	uxth	r3, r3
 8009958:	4618      	mov	r0, r3
 800995a:	f7fb f829 	bl	80049b0 <lwip_htons>
 800995e:	4603      	mov	r3, r0
 8009960:	b2db      	uxtb	r3, r3
 8009962:	b29b      	uxth	r3, r3
 8009964:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009968:	b29b      	uxth	r3, r3
 800996a:	4618      	mov	r0, r3
 800996c:	f7fb f820 	bl	80049b0 <lwip_htons>
 8009970:	4603      	mov	r3, r0
 8009972:	b21b      	sxth	r3, r3
 8009974:	4323      	orrs	r3, r4
 8009976:	b21a      	sxth	r2, r3
 8009978:	4b57      	ldr	r3, [pc, #348]	; (8009ad8 <tcp_receive+0x88c>)
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	b292      	uxth	r2, r2
 800997e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009984:	4b54      	ldr	r3, [pc, #336]	; (8009ad8 <tcp_receive+0x88c>)
 8009986:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009988:	4b53      	ldr	r3, [pc, #332]	; (8009ad8 <tcp_receive+0x88c>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	899b      	ldrh	r3, [r3, #12]
 800998e:	b29b      	uxth	r3, r3
 8009990:	4618      	mov	r0, r3
 8009992:	f7fb f80d 	bl	80049b0 <lwip_htons>
 8009996:	4603      	mov	r3, r0
 8009998:	b2db      	uxtb	r3, r3
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d005      	beq.n	80099ae <tcp_receive+0x762>
            inseg.len -= 1;
 80099a2:	4b4d      	ldr	r3, [pc, #308]	; (8009ad8 <tcp_receive+0x88c>)
 80099a4:	891b      	ldrh	r3, [r3, #8]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	4b4b      	ldr	r3, [pc, #300]	; (8009ad8 <tcp_receive+0x88c>)
 80099ac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80099ae:	4b4a      	ldr	r3, [pc, #296]	; (8009ad8 <tcp_receive+0x88c>)
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	4a49      	ldr	r2, [pc, #292]	; (8009ad8 <tcp_receive+0x88c>)
 80099b4:	8912      	ldrh	r2, [r2, #8]
 80099b6:	4611      	mov	r1, r2
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fc f9d1 	bl	8005d60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80099be:	4b46      	ldr	r3, [pc, #280]	; (8009ad8 <tcp_receive+0x88c>)
 80099c0:	891c      	ldrh	r4, [r3, #8]
 80099c2:	4b45      	ldr	r3, [pc, #276]	; (8009ad8 <tcp_receive+0x88c>)
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	899b      	ldrh	r3, [r3, #12]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fa fff0 	bl	80049b0 <lwip_htons>
 80099d0:	4603      	mov	r3, r0
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	f003 0303 	and.w	r3, r3, #3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <tcp_receive+0x794>
 80099dc:	2301      	movs	r3, #1
 80099de:	e000      	b.n	80099e2 <tcp_receive+0x796>
 80099e0:	2300      	movs	r3, #0
 80099e2:	4423      	add	r3, r4
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	4b3d      	ldr	r3, [pc, #244]	; (8009adc <tcp_receive+0x890>)
 80099e8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80099ea:	4b3c      	ldr	r3, [pc, #240]	; (8009adc <tcp_receive+0x890>)
 80099ec:	881b      	ldrh	r3, [r3, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	4b38      	ldr	r3, [pc, #224]	; (8009ad4 <tcp_receive+0x888>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	441a      	add	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80099fe:	440b      	add	r3, r1
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d006      	beq.n	8009a12 <tcp_receive+0x7c6>
 8009a04:	4b36      	ldr	r3, [pc, #216]	; (8009ae0 <tcp_receive+0x894>)
 8009a06:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009a0a:	4936      	ldr	r1, [pc, #216]	; (8009ae4 <tcp_receive+0x898>)
 8009a0c:	4836      	ldr	r0, [pc, #216]	; (8009ae8 <tcp_receive+0x89c>)
 8009a0e:	f005 f9ab 	bl	800ed68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80e7 	beq.w	8009bea <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009a1c:	4b2e      	ldr	r3, [pc, #184]	; (8009ad8 <tcp_receive+0x88c>)
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	899b      	ldrh	r3, [r3, #12]
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7fa ffc3 	bl	80049b0 <lwip_htons>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d010      	beq.n	8009a58 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009a36:	e00a      	b.n	8009a4e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a3c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f7fd fd92 	bl	8007572 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1f0      	bne.n	8009a38 <tcp_receive+0x7ec>
 8009a56:	e0c8      	b.n	8009bea <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009a5e:	e052      	b.n	8009b06 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	899b      	ldrh	r3, [r3, #12]
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fa ffa1 	bl	80049b0 <lwip_htons>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d03d      	beq.n	8009af6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009a7a:	4b17      	ldr	r3, [pc, #92]	; (8009ad8 <tcp_receive+0x88c>)
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	899b      	ldrh	r3, [r3, #12]
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fa ff94 	bl	80049b0 <lwip_htons>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d130      	bne.n	8009af6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009a94:	4b10      	ldr	r3, [pc, #64]	; (8009ad8 <tcp_receive+0x88c>)
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	899b      	ldrh	r3, [r3, #12]
 8009a9a:	b29c      	uxth	r4, r3
 8009a9c:	2001      	movs	r0, #1
 8009a9e:	f7fa ff87 	bl	80049b0 <lwip_htons>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	; (8009ad8 <tcp_receive+0x88c>)
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	4322      	orrs	r2, r4
 8009aac:	b292      	uxth	r2, r2
 8009aae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009ab0:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <tcp_receive+0x88c>)
 8009ab2:	891c      	ldrh	r4, [r3, #8]
 8009ab4:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <tcp_receive+0x88c>)
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	899b      	ldrh	r3, [r3, #12]
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7fa ff77 	bl	80049b0 <lwip_htons>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	f003 0303 	and.w	r3, r3, #3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00e      	beq.n	8009aec <tcp_receive+0x8a0>
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e00d      	b.n	8009aee <tcp_receive+0x8a2>
 8009ad2:	bf00      	nop
 8009ad4:	200087a4 	.word	0x200087a4
 8009ad8:	20008784 	.word	0x20008784
 8009adc:	200087ae 	.word	0x200087ae
 8009ae0:	08010dd8 	.word	0x08010dd8
 8009ae4:	08011180 	.word	0x08011180
 8009ae8:	08010e24 	.word	0x08010e24
 8009aec:	2300      	movs	r3, #0
 8009aee:	4423      	add	r3, r4
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	4b98      	ldr	r3, [pc, #608]	; (8009d54 <tcp_receive+0xb08>)
 8009af4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af8:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009b00:	6938      	ldr	r0, [r7, #16]
 8009b02:	f7fd fd36 	bl	8007572 <tcp_seg_free>
            while (next &&
 8009b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00e      	beq.n	8009b2a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009b0c:	4b91      	ldr	r3, [pc, #580]	; (8009d54 <tcp_receive+0xb08>)
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	461a      	mov	r2, r3
 8009b12:	4b91      	ldr	r3, [pc, #580]	; (8009d58 <tcp_receive+0xb0c>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	441a      	add	r2, r3
 8009b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b20:	8909      	ldrh	r1, [r1, #8]
 8009b22:	440b      	add	r3, r1
 8009b24:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	da9a      	bge.n	8009a60 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d059      	beq.n	8009be4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009b30:	4b88      	ldr	r3, [pc, #544]	; (8009d54 <tcp_receive+0xb08>)
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	461a      	mov	r2, r3
 8009b36:	4b88      	ldr	r3, [pc, #544]	; (8009d58 <tcp_receive+0xb0c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	441a      	add	r2, r3
 8009b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	dd4d      	ble.n	8009be4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	4b81      	ldr	r3, [pc, #516]	; (8009d58 <tcp_receive+0xb0c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	4b80      	ldr	r3, [pc, #512]	; (8009d5c <tcp_receive+0xb10>)
 8009b5c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009b5e:	4b7f      	ldr	r3, [pc, #508]	; (8009d5c <tcp_receive+0xb10>)
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	899b      	ldrh	r3, [r3, #12]
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fa ff22 	bl	80049b0 <lwip_htons>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	f003 0302 	and.w	r3, r3, #2
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d005      	beq.n	8009b84 <tcp_receive+0x938>
                inseg.len -= 1;
 8009b78:	4b78      	ldr	r3, [pc, #480]	; (8009d5c <tcp_receive+0xb10>)
 8009b7a:	891b      	ldrh	r3, [r3, #8]
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	4b76      	ldr	r3, [pc, #472]	; (8009d5c <tcp_receive+0xb10>)
 8009b82:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009b84:	4b75      	ldr	r3, [pc, #468]	; (8009d5c <tcp_receive+0xb10>)
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	4a74      	ldr	r2, [pc, #464]	; (8009d5c <tcp_receive+0xb10>)
 8009b8a:	8912      	ldrh	r2, [r2, #8]
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fc f8e6 	bl	8005d60 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009b94:	4b71      	ldr	r3, [pc, #452]	; (8009d5c <tcp_receive+0xb10>)
 8009b96:	891c      	ldrh	r4, [r3, #8]
 8009b98:	4b70      	ldr	r3, [pc, #448]	; (8009d5c <tcp_receive+0xb10>)
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	899b      	ldrh	r3, [r3, #12]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fa ff05 	bl	80049b0 <lwip_htons>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0303 	and.w	r3, r3, #3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <tcp_receive+0x96a>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e000      	b.n	8009bb8 <tcp_receive+0x96c>
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	4423      	add	r3, r4
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	4b65      	ldr	r3, [pc, #404]	; (8009d54 <tcp_receive+0xb08>)
 8009bbe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009bc0:	4b64      	ldr	r3, [pc, #400]	; (8009d54 <tcp_receive+0xb08>)
 8009bc2:	881b      	ldrh	r3, [r3, #0]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	4b64      	ldr	r3, [pc, #400]	; (8009d58 <tcp_receive+0xb0c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	441a      	add	r2, r3
 8009bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d006      	beq.n	8009be4 <tcp_receive+0x998>
 8009bd6:	4b62      	ldr	r3, [pc, #392]	; (8009d60 <tcp_receive+0xb14>)
 8009bd8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009bdc:	4961      	ldr	r1, [pc, #388]	; (8009d64 <tcp_receive+0xb18>)
 8009bde:	4862      	ldr	r0, [pc, #392]	; (8009d68 <tcp_receive+0xb1c>)
 8009be0:	f005 f8c2 	bl	800ed68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009be8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009bea:	4b5a      	ldr	r3, [pc, #360]	; (8009d54 <tcp_receive+0xb08>)
 8009bec:	881b      	ldrh	r3, [r3, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	4b59      	ldr	r3, [pc, #356]	; (8009d58 <tcp_receive+0xb0c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	441a      	add	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009bfe:	4b55      	ldr	r3, [pc, #340]	; (8009d54 <tcp_receive+0xb08>)
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d206      	bcs.n	8009c14 <tcp_receive+0x9c8>
 8009c06:	4b56      	ldr	r3, [pc, #344]	; (8009d60 <tcp_receive+0xb14>)
 8009c08:	f240 6207 	movw	r2, #1543	; 0x607
 8009c0c:	4957      	ldr	r1, [pc, #348]	; (8009d6c <tcp_receive+0xb20>)
 8009c0e:	4856      	ldr	r0, [pc, #344]	; (8009d68 <tcp_receive+0xb1c>)
 8009c10:	f005 f8aa 	bl	800ed68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009c18:	4b4e      	ldr	r3, [pc, #312]	; (8009d54 <tcp_receive+0xb08>)
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7fc ffc5 	bl	8006bb4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009c2a:	4b4c      	ldr	r3, [pc, #304]	; (8009d5c <tcp_receive+0xb10>)
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	891b      	ldrh	r3, [r3, #8]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d006      	beq.n	8009c42 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8009c34:	4b49      	ldr	r3, [pc, #292]	; (8009d5c <tcp_receive+0xb10>)
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	4a4d      	ldr	r2, [pc, #308]	; (8009d70 <tcp_receive+0xb24>)
 8009c3a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009c3c:	4b47      	ldr	r3, [pc, #284]	; (8009d5c <tcp_receive+0xb10>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009c42:	4b46      	ldr	r3, [pc, #280]	; (8009d5c <tcp_receive+0xb10>)
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	899b      	ldrh	r3, [r3, #12]
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f7fa feb0 	bl	80049b0 <lwip_htons>
 8009c50:	4603      	mov	r3, r0
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f000 80b8 	beq.w	8009dce <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009c5e:	4b45      	ldr	r3, [pc, #276]	; (8009d74 <tcp_receive+0xb28>)
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	f043 0320 	orr.w	r3, r3, #32
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	4b42      	ldr	r3, [pc, #264]	; (8009d74 <tcp_receive+0xb28>)
 8009c6a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009c6c:	e0af      	b.n	8009dce <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c72:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	4a36      	ldr	r2, [pc, #216]	; (8009d58 <tcp_receive+0xb0c>)
 8009c7e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	891b      	ldrh	r3, [r3, #8]
 8009c84:	461c      	mov	r4, r3
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	899b      	ldrh	r3, [r3, #12]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7fa fe8e 	bl	80049b0 <lwip_htons>
 8009c94:	4603      	mov	r3, r0
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	f003 0303 	and.w	r3, r3, #3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <tcp_receive+0xa58>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e000      	b.n	8009ca6 <tcp_receive+0xa5a>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	191a      	adds	r2, r3, r4
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	441a      	add	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb6:	461c      	mov	r4, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	891b      	ldrh	r3, [r3, #8]
 8009cbc:	461d      	mov	r5, r3
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	899b      	ldrh	r3, [r3, #12]
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fa fe72 	bl	80049b0 <lwip_htons>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	f003 0303 	and.w	r3, r3, #3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <tcp_receive+0xa90>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e000      	b.n	8009cde <tcp_receive+0xa92>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	442b      	add	r3, r5
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	d206      	bcs.n	8009cf2 <tcp_receive+0xaa6>
 8009ce4:	4b1e      	ldr	r3, [pc, #120]	; (8009d60 <tcp_receive+0xb14>)
 8009ce6:	f240 622b 	movw	r2, #1579	; 0x62b
 8009cea:	4923      	ldr	r1, [pc, #140]	; (8009d78 <tcp_receive+0xb2c>)
 8009cec:	481e      	ldr	r0, [pc, #120]	; (8009d68 <tcp_receive+0xb1c>)
 8009cee:	f005 f83b 	bl	800ed68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	891b      	ldrh	r3, [r3, #8]
 8009cf6:	461c      	mov	r4, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	899b      	ldrh	r3, [r3, #12]
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fa fe55 	bl	80049b0 <lwip_htons>
 8009d06:	4603      	mov	r3, r0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <tcp_receive+0xaca>
 8009d12:	2301      	movs	r3, #1
 8009d14:	e000      	b.n	8009d18 <tcp_receive+0xacc>
 8009d16:	2300      	movs	r3, #0
 8009d18:	1919      	adds	r1, r3, r4
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009d1e:	b28b      	uxth	r3, r1
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	b29a      	uxth	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7fc ff43 	bl	8006bb4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	891b      	ldrh	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d028      	beq.n	8009d8a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009d38:	4b0d      	ldr	r3, [pc, #52]	; (8009d70 <tcp_receive+0xb24>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d01d      	beq.n	8009d7c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009d40:	4b0b      	ldr	r3, [pc, #44]	; (8009d70 <tcp_receive+0xb24>)
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f7fc fa50 	bl	80061f0 <pbuf_cat>
 8009d50:	e018      	b.n	8009d84 <tcp_receive+0xb38>
 8009d52:	bf00      	nop
 8009d54:	200087ae 	.word	0x200087ae
 8009d58:	200087a4 	.word	0x200087a4
 8009d5c:	20008784 	.word	0x20008784
 8009d60:	08010dd8 	.word	0x08010dd8
 8009d64:	080111b8 	.word	0x080111b8
 8009d68:	08010e24 	.word	0x08010e24
 8009d6c:	080111f4 	.word	0x080111f4
 8009d70:	200087b4 	.word	0x200087b4
 8009d74:	200087b1 	.word	0x200087b1
 8009d78:	08011214 	.word	0x08011214
            } else {
              recv_data = cseg->p;
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	4a70      	ldr	r2, [pc, #448]	; (8009f44 <tcp_receive+0xcf8>)
 8009d82:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	2200      	movs	r2, #0
 8009d88:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	899b      	ldrh	r3, [r3, #12]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7fa fe0c 	bl	80049b0 <lwip_htons>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00d      	beq.n	8009dc0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009da4:	4b68      	ldr	r3, [pc, #416]	; (8009f48 <tcp_receive+0xcfc>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	f043 0320 	orr.w	r3, r3, #32
 8009dac:	b2da      	uxtb	r2, r3
 8009dae:	4b66      	ldr	r3, [pc, #408]	; (8009f48 <tcp_receive+0xcfc>)
 8009db0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	7d1b      	ldrb	r3, [r3, #20]
 8009db6:	2b04      	cmp	r3, #4
 8009db8:	d102      	bne.n	8009dc0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2207      	movs	r2, #7
 8009dbe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009dc8:	68b8      	ldr	r0, [r7, #8]
 8009dca:	f7fd fbd2 	bl	8007572 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d008      	beq.n	8009de8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	685a      	ldr	r2, [r3, #4]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009de2:	429a      	cmp	r2, r3
 8009de4:	f43f af43 	beq.w	8009c6e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	8b5b      	ldrh	r3, [r3, #26]
 8009dec:	f003 0301 	and.w	r3, r3, #1
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00e      	beq.n	8009e12 <tcp_receive+0xbc6>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	8b5b      	ldrh	r3, [r3, #26]
 8009df8:	f023 0301 	bic.w	r3, r3, #1
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	835a      	strh	r2, [r3, #26]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	8b5b      	ldrh	r3, [r3, #26]
 8009e06:	f043 0302 	orr.w	r3, r3, #2
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009e10:	e188      	b.n	800a124 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	8b5b      	ldrh	r3, [r3, #26]
 8009e16:	f043 0301 	orr.w	r3, r3, #1
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009e20:	e180      	b.n	800a124 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d106      	bne.n	8009e38 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009e2a:	4848      	ldr	r0, [pc, #288]	; (8009f4c <tcp_receive+0xd00>)
 8009e2c:	f7fd fbba 	bl	80075a4 <tcp_seg_copy>
 8009e30:	4602      	mov	r2, r0
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	675a      	str	r2, [r3, #116]	; 0x74
 8009e36:	e16d      	b.n	800a114 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e42:	e157      	b.n	800a0f4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	4b41      	ldr	r3, [pc, #260]	; (8009f50 <tcp_receive+0xd04>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d11d      	bne.n	8009e8e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009e52:	4b3e      	ldr	r3, [pc, #248]	; (8009f4c <tcp_receive+0xd00>)
 8009e54:	891a      	ldrh	r2, [r3, #8]
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	891b      	ldrh	r3, [r3, #8]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	f240 814f 	bls.w	800a0fe <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e60:	483a      	ldr	r0, [pc, #232]	; (8009f4c <tcp_receive+0xd00>)
 8009e62:	f7fd fb9f 	bl	80075a4 <tcp_seg_copy>
 8009e66:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 8149 	beq.w	800a102 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <tcp_receive+0xc32>
                    prev->next = cseg;
 8009e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	601a      	str	r2, [r3, #0]
 8009e7c:	e002      	b.n	8009e84 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009e84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e86:	6978      	ldr	r0, [r7, #20]
 8009e88:	f7ff f8dc 	bl	8009044 <tcp_oos_insert_segment>
                }
                break;
 8009e8c:	e139      	b.n	800a102 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d117      	bne.n	8009ec4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009e94:	4b2e      	ldr	r3, [pc, #184]	; (8009f50 <tcp_receive+0xd04>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	1ad3      	subs	r3, r2, r3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	da57      	bge.n	8009f54 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ea4:	4829      	ldr	r0, [pc, #164]	; (8009f4c <tcp_receive+0xd00>)
 8009ea6:	f7fd fb7d 	bl	80075a4 <tcp_seg_copy>
 8009eaa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 8129 	beq.w	800a106 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009eba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ebc:	69b8      	ldr	r0, [r7, #24]
 8009ebe:	f7ff f8c1 	bl	8009044 <tcp_oos_insert_segment>
                  }
                  break;
 8009ec2:	e120      	b.n	800a106 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009ec4:	4b22      	ldr	r3, [pc, #136]	; (8009f50 <tcp_receive+0xd04>)
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	db3e      	blt.n	8009f54 <tcp_receive+0xd08>
 8009ed6:	4b1e      	ldr	r3, [pc, #120]	; (8009f50 <tcp_receive+0xd04>)
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	dc35      	bgt.n	8009f54 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ee8:	4818      	ldr	r0, [pc, #96]	; (8009f4c <tcp_receive+0xd00>)
 8009eea:	f7fd fb5b 	bl	80075a4 <tcp_seg_copy>
 8009eee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	f000 8109 	beq.w	800a10a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f00:	8912      	ldrh	r2, [r2, #8]
 8009f02:	441a      	add	r2, r3
 8009f04:	4b12      	ldr	r3, [pc, #72]	; (8009f50 <tcp_receive+0xd04>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	1ad3      	subs	r3, r2, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	dd12      	ble.n	8009f34 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009f0e:	4b10      	ldr	r3, [pc, #64]	; (8009f50 <tcp_receive+0xd04>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f22:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f2a:	891b      	ldrh	r3, [r3, #8]
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	4610      	mov	r0, r2
 8009f30:	f7fb ff16 	bl	8005d60 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f36:	69fa      	ldr	r2, [r7, #28]
 8009f38:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009f3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f3c:	69f8      	ldr	r0, [r7, #28]
 8009f3e:	f7ff f881 	bl	8009044 <tcp_oos_insert_segment>
                  }
                  break;
 8009f42:	e0e2      	b.n	800a10a <tcp_receive+0xebe>
 8009f44:	200087b4 	.word	0x200087b4
 8009f48:	200087b1 	.word	0x200087b1
 8009f4c:	20008784 	.word	0x20008784
 8009f50:	200087a4 	.word	0x200087a4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	f040 80c6 	bne.w	800a0ee <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009f62:	4b80      	ldr	r3, [pc, #512]	; (800a164 <tcp_receive+0xf18>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f340 80bd 	ble.w	800a0ee <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	899b      	ldrh	r3, [r3, #12]
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fa fd17 	bl	80049b0 <lwip_htons>
 8009f82:	4603      	mov	r3, r0
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	f003 0301 	and.w	r3, r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f040 80bf 	bne.w	800a10e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009f90:	4875      	ldr	r0, [pc, #468]	; (800a168 <tcp_receive+0xf1c>)
 8009f92:	f7fd fb07 	bl	80075a4 <tcp_seg_copy>
 8009f96:	4602      	mov	r2, r0
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 80b6 	beq.w	800a112 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fae:	8912      	ldrh	r2, [r2, #8]
 8009fb0:	441a      	add	r2, r3
 8009fb2:	4b6c      	ldr	r3, [pc, #432]	; (800a164 <tcp_receive+0xf18>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	dd12      	ble.n	8009fe2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009fbc:	4b69      	ldr	r3, [pc, #420]	; (800a164 <tcp_receive+0xf18>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd8:	891b      	ldrh	r3, [r3, #8]
 8009fda:	4619      	mov	r1, r3
 8009fdc:	4610      	mov	r0, r2
 8009fde:	f7fb febf 	bl	8005d60 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009fe2:	4b62      	ldr	r3, [pc, #392]	; (800a16c <tcp_receive+0xf20>)
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	4b5e      	ldr	r3, [pc, #376]	; (800a164 <tcp_receive+0xf18>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	441a      	add	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	6879      	ldr	r1, [r7, #4]
 8009ff4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009ff6:	440b      	add	r3, r1
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f340 8089 	ble.w	800a112 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	899b      	ldrh	r3, [r3, #12]
 800a008:	b29b      	uxth	r3, r3
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fa fcd0 	bl	80049b0 <lwip_htons>
 800a010:	4603      	mov	r3, r0
 800a012:	b2db      	uxtb	r3, r3
 800a014:	f003 0301 	and.w	r3, r3, #1
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d022      	beq.n	800a062 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	899b      	ldrh	r3, [r3, #12]
 800a024:	b29b      	uxth	r3, r3
 800a026:	b21b      	sxth	r3, r3
 800a028:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a02c:	b21c      	sxth	r4, r3
 800a02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	899b      	ldrh	r3, [r3, #12]
 800a036:	b29b      	uxth	r3, r3
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fa fcb9 	bl	80049b0 <lwip_htons>
 800a03e:	4603      	mov	r3, r0
 800a040:	b2db      	uxtb	r3, r3
 800a042:	b29b      	uxth	r3, r3
 800a044:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a048:	b29b      	uxth	r3, r3
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fa fcb0 	bl	80049b0 <lwip_htons>
 800a050:	4603      	mov	r3, r0
 800a052:	b21b      	sxth	r3, r3
 800a054:	4323      	orrs	r3, r4
 800a056:	b21a      	sxth	r2, r3
 800a058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	b292      	uxth	r2, r2
 800a060:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a06c:	4413      	add	r3, r2
 800a06e:	b299      	uxth	r1, r3
 800a070:	4b3c      	ldr	r3, [pc, #240]	; (800a164 <tcp_receive+0xf18>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	b29a      	uxth	r2, r3
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	1a8a      	subs	r2, r1, r2
 800a07c:	b292      	uxth	r2, r2
 800a07e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	891b      	ldrh	r3, [r3, #8]
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7fb fe66 	bl	8005d60 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	891c      	ldrh	r4, [r3, #8]
 800a09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	899b      	ldrh	r3, [r3, #12]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f7fa fc83 	bl	80049b0 <lwip_htons>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <tcp_receive+0xe6e>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e000      	b.n	800a0bc <tcp_receive+0xe70>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	4423      	add	r3, r4
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	4b2a      	ldr	r3, [pc, #168]	; (800a16c <tcp_receive+0xf20>)
 800a0c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a0c4:	4b29      	ldr	r3, [pc, #164]	; (800a16c <tcp_receive+0xf20>)
 800a0c6:	881b      	ldrh	r3, [r3, #0]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	4b26      	ldr	r3, [pc, #152]	; (800a164 <tcp_receive+0xf18>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	441a      	add	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a0d8:	440b      	add	r3, r1
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d019      	beq.n	800a112 <tcp_receive+0xec6>
 800a0de:	4b24      	ldr	r3, [pc, #144]	; (800a170 <tcp_receive+0xf24>)
 800a0e0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a0e4:	4923      	ldr	r1, [pc, #140]	; (800a174 <tcp_receive+0xf28>)
 800a0e6:	4824      	ldr	r0, [pc, #144]	; (800a178 <tcp_receive+0xf2c>)
 800a0e8:	f004 fe3e 	bl	800ed68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a0ec:	e011      	b.n	800a112 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f47f aea4 	bne.w	8009e44 <tcp_receive+0xbf8>
 800a0fc:	e00a      	b.n	800a114 <tcp_receive+0xec8>
                break;
 800a0fe:	bf00      	nop
 800a100:	e008      	b.n	800a114 <tcp_receive+0xec8>
                break;
 800a102:	bf00      	nop
 800a104:	e006      	b.n	800a114 <tcp_receive+0xec8>
                  break;
 800a106:	bf00      	nop
 800a108:	e004      	b.n	800a114 <tcp_receive+0xec8>
                  break;
 800a10a:	bf00      	nop
 800a10c:	e002      	b.n	800a114 <tcp_receive+0xec8>
                  break;
 800a10e:	bf00      	nop
 800a110:	e000      	b.n	800a114 <tcp_receive+0xec8>
                break;
 800a112:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f001 fa33 	bl	800b580 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a11a:	e003      	b.n	800a124 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 fa2f 	bl	800b580 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a122:	e01a      	b.n	800a15a <tcp_receive+0xf0e>
 800a124:	e019      	b.n	800a15a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a126:	4b0f      	ldr	r3, [pc, #60]	; (800a164 <tcp_receive+0xf18>)
 800a128:	681a      	ldr	r2, [r3, #0]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12e:	1ad3      	subs	r3, r2, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	db0a      	blt.n	800a14a <tcp_receive+0xefe>
 800a134:	4b0b      	ldr	r3, [pc, #44]	; (800a164 <tcp_receive+0xf18>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a140:	440b      	add	r3, r1
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	3301      	adds	r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	dd07      	ble.n	800a15a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8b5b      	ldrh	r3, [r3, #26]
 800a14e:	f043 0302 	orr.w	r3, r3, #2
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a158:	e7ff      	b.n	800a15a <tcp_receive+0xf0e>
 800a15a:	bf00      	nop
 800a15c:	3750      	adds	r7, #80	; 0x50
 800a15e:	46bd      	mov	sp, r7
 800a160:	bdb0      	pop	{r4, r5, r7, pc}
 800a162:	bf00      	nop
 800a164:	200087a4 	.word	0x200087a4
 800a168:	20008784 	.word	0x20008784
 800a16c:	200087ae 	.word	0x200087ae
 800a170:	08010dd8 	.word	0x08010dd8
 800a174:	08011180 	.word	0x08011180
 800a178:	08010e24 	.word	0x08010e24

0800a17c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a182:	4b15      	ldr	r3, [pc, #84]	; (800a1d8 <tcp_get_next_optbyte+0x5c>)
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	1c5a      	adds	r2, r3, #1
 800a188:	b291      	uxth	r1, r2
 800a18a:	4a13      	ldr	r2, [pc, #76]	; (800a1d8 <tcp_get_next_optbyte+0x5c>)
 800a18c:	8011      	strh	r1, [r2, #0]
 800a18e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a190:	4b12      	ldr	r3, [pc, #72]	; (800a1dc <tcp_get_next_optbyte+0x60>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d004      	beq.n	800a1a2 <tcp_get_next_optbyte+0x26>
 800a198:	4b11      	ldr	r3, [pc, #68]	; (800a1e0 <tcp_get_next_optbyte+0x64>)
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	88fa      	ldrh	r2, [r7, #6]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d208      	bcs.n	800a1b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a1a2:	4b10      	ldr	r3, [pc, #64]	; (800a1e4 <tcp_get_next_optbyte+0x68>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3314      	adds	r3, #20
 800a1a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a1aa:	88fb      	ldrh	r3, [r7, #6]
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	e00b      	b.n	800a1cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a1b4:	88fb      	ldrh	r3, [r7, #6]
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	4b09      	ldr	r3, [pc, #36]	; (800a1e0 <tcp_get_next_optbyte+0x64>)
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a1c2:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <tcp_get_next_optbyte+0x60>)
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	797b      	ldrb	r3, [r7, #5]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	200087a0 	.word	0x200087a0
 800a1dc:	2000879c 	.word	0x2000879c
 800a1e0:	2000879a 	.word	0x2000879a
 800a1e4:	20008794 	.word	0x20008794

0800a1e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <tcp_parseopt+0x1c>
 800a1f6:	4b32      	ldr	r3, [pc, #200]	; (800a2c0 <tcp_parseopt+0xd8>)
 800a1f8:	f240 727d 	movw	r2, #1917	; 0x77d
 800a1fc:	4931      	ldr	r1, [pc, #196]	; (800a2c4 <tcp_parseopt+0xdc>)
 800a1fe:	4832      	ldr	r0, [pc, #200]	; (800a2c8 <tcp_parseopt+0xe0>)
 800a200:	f004 fdb2 	bl	800ed68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a204:	4b31      	ldr	r3, [pc, #196]	; (800a2cc <tcp_parseopt+0xe4>)
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d055      	beq.n	800a2b8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a20c:	4b30      	ldr	r3, [pc, #192]	; (800a2d0 <tcp_parseopt+0xe8>)
 800a20e:	2200      	movs	r2, #0
 800a210:	801a      	strh	r2, [r3, #0]
 800a212:	e045      	b.n	800a2a0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a214:	f7ff ffb2 	bl	800a17c <tcp_get_next_optbyte>
 800a218:	4603      	mov	r3, r0
 800a21a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a21c:	7bfb      	ldrb	r3, [r7, #15]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d006      	beq.n	800a230 <tcp_parseopt+0x48>
 800a222:	2b02      	cmp	r3, #2
 800a224:	dc2b      	bgt.n	800a27e <tcp_parseopt+0x96>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d041      	beq.n	800a2ae <tcp_parseopt+0xc6>
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d127      	bne.n	800a27e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a22e:	e037      	b.n	800a2a0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a230:	f7ff ffa4 	bl	800a17c <tcp_get_next_optbyte>
 800a234:	4603      	mov	r3, r0
 800a236:	2b04      	cmp	r3, #4
 800a238:	d13b      	bne.n	800a2b2 <tcp_parseopt+0xca>
 800a23a:	4b25      	ldr	r3, [pc, #148]	; (800a2d0 <tcp_parseopt+0xe8>)
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	3301      	adds	r3, #1
 800a240:	4a22      	ldr	r2, [pc, #136]	; (800a2cc <tcp_parseopt+0xe4>)
 800a242:	8812      	ldrh	r2, [r2, #0]
 800a244:	4293      	cmp	r3, r2
 800a246:	da34      	bge.n	800a2b2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a248:	f7ff ff98 	bl	800a17c <tcp_get_next_optbyte>
 800a24c:	4603      	mov	r3, r0
 800a24e:	b29b      	uxth	r3, r3
 800a250:	021b      	lsls	r3, r3, #8
 800a252:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a254:	f7ff ff92 	bl	800a17c <tcp_get_next_optbyte>
 800a258:	4603      	mov	r3, r0
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	89bb      	ldrh	r3, [r7, #12]
 800a25e:	4313      	orrs	r3, r2
 800a260:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a262:	89bb      	ldrh	r3, [r7, #12]
 800a264:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a268:	d804      	bhi.n	800a274 <tcp_parseopt+0x8c>
 800a26a:	89bb      	ldrh	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <tcp_parseopt+0x8c>
 800a270:	89ba      	ldrh	r2, [r7, #12]
 800a272:	e001      	b.n	800a278 <tcp_parseopt+0x90>
 800a274:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a27c:	e010      	b.n	800a2a0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a27e:	f7ff ff7d 	bl	800a17c <tcp_get_next_optbyte>
 800a282:	4603      	mov	r3, r0
 800a284:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a286:	7afb      	ldrb	r3, [r7, #11]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d914      	bls.n	800a2b6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a28c:	7afb      	ldrb	r3, [r7, #11]
 800a28e:	b29a      	uxth	r2, r3
 800a290:	4b0f      	ldr	r3, [pc, #60]	; (800a2d0 <tcp_parseopt+0xe8>)
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	4413      	add	r3, r2
 800a296:	b29b      	uxth	r3, r3
 800a298:	3b02      	subs	r3, #2
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	4b0c      	ldr	r3, [pc, #48]	; (800a2d0 <tcp_parseopt+0xe8>)
 800a29e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a2a0:	4b0b      	ldr	r3, [pc, #44]	; (800a2d0 <tcp_parseopt+0xe8>)
 800a2a2:	881a      	ldrh	r2, [r3, #0]
 800a2a4:	4b09      	ldr	r3, [pc, #36]	; (800a2cc <tcp_parseopt+0xe4>)
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d3b3      	bcc.n	800a214 <tcp_parseopt+0x2c>
 800a2ac:	e004      	b.n	800a2b8 <tcp_parseopt+0xd0>
          return;
 800a2ae:	bf00      	nop
 800a2b0:	e002      	b.n	800a2b8 <tcp_parseopt+0xd0>
            return;
 800a2b2:	bf00      	nop
 800a2b4:	e000      	b.n	800a2b8 <tcp_parseopt+0xd0>
            return;
 800a2b6:	bf00      	nop
      }
    }
  }
}
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	08010dd8 	.word	0x08010dd8
 800a2c4:	0801123c 	.word	0x0801123c
 800a2c8:	08010e24 	.word	0x08010e24
 800a2cc:	20008798 	.word	0x20008798
 800a2d0:	200087a0 	.word	0x200087a0

0800a2d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <tcp_trigger_input_pcb_close+0x1c>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	f043 0310 	orr.w	r3, r3, #16
 800a2e0:	b2da      	uxtb	r2, r3
 800a2e2:	4b03      	ldr	r3, [pc, #12]	; (800a2f0 <tcp_trigger_input_pcb_close+0x1c>)
 800a2e4:	701a      	strb	r2, [r3, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	200087b1 	.word	0x200087b1

0800a2f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00a      	beq.n	800a31c <tcp_route+0x28>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	7a1b      	ldrb	r3, [r3, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d006      	beq.n	800a31c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	7a1b      	ldrb	r3, [r3, #8]
 800a312:	4618      	mov	r0, r3
 800a314:	f7fb fb4a 	bl	80059ac <netif_get_by_index>
 800a318:	4603      	mov	r3, r0
 800a31a:	e003      	b.n	800a324 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f003 fa37 	bl	800d790 <ip4_route>
 800a322:	4603      	mov	r3, r0
  }
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a32c:	b590      	push	{r4, r7, lr}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	603b      	str	r3, [r7, #0]
 800a338:	4613      	mov	r3, r2
 800a33a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d105      	bne.n	800a34e <tcp_create_segment+0x22>
 800a342:	4b44      	ldr	r3, [pc, #272]	; (800a454 <tcp_create_segment+0x128>)
 800a344:	22a3      	movs	r2, #163	; 0xa3
 800a346:	4944      	ldr	r1, [pc, #272]	; (800a458 <tcp_create_segment+0x12c>)
 800a348:	4844      	ldr	r0, [pc, #272]	; (800a45c <tcp_create_segment+0x130>)
 800a34a:	f004 fd0d 	bl	800ed68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d105      	bne.n	800a360 <tcp_create_segment+0x34>
 800a354:	4b3f      	ldr	r3, [pc, #252]	; (800a454 <tcp_create_segment+0x128>)
 800a356:	22a4      	movs	r2, #164	; 0xa4
 800a358:	4941      	ldr	r1, [pc, #260]	; (800a460 <tcp_create_segment+0x134>)
 800a35a:	4840      	ldr	r0, [pc, #256]	; (800a45c <tcp_create_segment+0x130>)
 800a35c:	f004 fd04 	bl	800ed68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a360:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a36e:	2003      	movs	r0, #3
 800a370:	f7fa ff96 	bl	80052a0 <memp_malloc>
 800a374:	6138      	str	r0, [r7, #16]
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d104      	bne.n	800a386 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a37c:	68b8      	ldr	r0, [r7, #8]
 800a37e:	f7fb fe75 	bl	800606c <pbuf_free>
    return NULL;
 800a382:	2300      	movs	r3, #0
 800a384:	e061      	b.n	800a44a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a38c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2200      	movs	r2, #0
 800a392:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	891a      	ldrh	r2, [r3, #8]
 800a39e:	7dfb      	ldrb	r3, [r7, #23]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d205      	bcs.n	800a3b2 <tcp_create_segment+0x86>
 800a3a6:	4b2b      	ldr	r3, [pc, #172]	; (800a454 <tcp_create_segment+0x128>)
 800a3a8:	22b0      	movs	r2, #176	; 0xb0
 800a3aa:	492e      	ldr	r1, [pc, #184]	; (800a464 <tcp_create_segment+0x138>)
 800a3ac:	482b      	ldr	r0, [pc, #172]	; (800a45c <tcp_create_segment+0x130>)
 800a3ae:	f004 fcdb 	bl	800ed68 <iprintf>
  seg->len = p->tot_len - optlen;
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	891a      	ldrh	r2, [r3, #8]
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a3c2:	2114      	movs	r1, #20
 800a3c4:	68b8      	ldr	r0, [r7, #8]
 800a3c6:	f7fb fdbb 	bl	8005f40 <pbuf_add_header>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d004      	beq.n	800a3da <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a3d0:	6938      	ldr	r0, [r7, #16]
 800a3d2:	f7fd f8ce 	bl	8007572 <tcp_seg_free>
    return NULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e037      	b.n	800a44a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	685a      	ldr	r2, [r3, #4]
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	8ada      	ldrh	r2, [r3, #22]
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	68dc      	ldr	r4, [r3, #12]
 800a3ec:	4610      	mov	r0, r2
 800a3ee:	f7fa fadf 	bl	80049b0 <lwip_htons>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	8b1a      	ldrh	r2, [r3, #24]
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	68dc      	ldr	r4, [r3, #12]
 800a3fe:	4610      	mov	r0, r2
 800a400:	f7fa fad6 	bl	80049b0 <lwip_htons>
 800a404:	4603      	mov	r3, r0
 800a406:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	68dc      	ldr	r4, [r3, #12]
 800a40c:	6838      	ldr	r0, [r7, #0]
 800a40e:	f7fa fae4 	bl	80049da <lwip_htonl>
 800a412:	4603      	mov	r3, r0
 800a414:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	089b      	lsrs	r3, r3, #2
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	3305      	adds	r3, #5
 800a420:	b29b      	uxth	r3, r3
 800a422:	031b      	lsls	r3, r3, #12
 800a424:	b29a      	uxth	r2, r3
 800a426:	79fb      	ldrb	r3, [r7, #7]
 800a428:	b29b      	uxth	r3, r3
 800a42a:	4313      	orrs	r3, r2
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	693b      	ldr	r3, [r7, #16]
 800a430:	68dc      	ldr	r4, [r3, #12]
 800a432:	4610      	mov	r0, r2
 800a434:	f7fa fabc 	bl	80049b0 <lwip_htons>
 800a438:	4603      	mov	r3, r0
 800a43a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	749a      	strb	r2, [r3, #18]
 800a444:	2200      	movs	r2, #0
 800a446:	74da      	strb	r2, [r3, #19]
  return seg;
 800a448:	693b      	ldr	r3, [r7, #16]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	371c      	adds	r7, #28
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd90      	pop	{r4, r7, pc}
 800a452:	bf00      	nop
 800a454:	08011258 	.word	0x08011258
 800a458:	0801128c 	.word	0x0801128c
 800a45c:	080112ac 	.word	0x080112ac
 800a460:	080112d4 	.word	0x080112d4
 800a464:	080112f8 	.word	0x080112f8

0800a468 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a468:	b590      	push	{r4, r7, lr}
 800a46a:	b08b      	sub	sp, #44	; 0x2c
 800a46c:	af02      	add	r7, sp, #8
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	460b      	mov	r3, r1
 800a472:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a474:	2300      	movs	r3, #0
 800a476:	61fb      	str	r3, [r7, #28]
 800a478:	2300      	movs	r3, #0
 800a47a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a47c:	2300      	movs	r3, #0
 800a47e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d106      	bne.n	800a494 <tcp_split_unsent_seg+0x2c>
 800a486:	4b95      	ldr	r3, [pc, #596]	; (800a6dc <tcp_split_unsent_seg+0x274>)
 800a488:	f240 324b 	movw	r2, #843	; 0x34b
 800a48c:	4994      	ldr	r1, [pc, #592]	; (800a6e0 <tcp_split_unsent_seg+0x278>)
 800a48e:	4895      	ldr	r0, [pc, #596]	; (800a6e4 <tcp_split_unsent_seg+0x27c>)
 800a490:	f004 fc6a 	bl	800ed68 <iprintf>

  useg = pcb->unsent;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a498:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d102      	bne.n	800a4a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a4:	e116      	b.n	800a6d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a4a6:	887b      	ldrh	r3, [r7, #2]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d109      	bne.n	800a4c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a4ac:	4b8b      	ldr	r3, [pc, #556]	; (800a6dc <tcp_split_unsent_seg+0x274>)
 800a4ae:	f240 3253 	movw	r2, #851	; 0x353
 800a4b2:	498d      	ldr	r1, [pc, #564]	; (800a6e8 <tcp_split_unsent_seg+0x280>)
 800a4b4:	488b      	ldr	r0, [pc, #556]	; (800a6e4 <tcp_split_unsent_seg+0x27c>)
 800a4b6:	f004 fc57 	bl	800ed68 <iprintf>
    return ERR_VAL;
 800a4ba:	f06f 0305 	mvn.w	r3, #5
 800a4be:	e109      	b.n	800a6d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	891b      	ldrh	r3, [r3, #8]
 800a4c4:	887a      	ldrh	r2, [r7, #2]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d301      	bcc.n	800a4ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e102      	b.n	800a6d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a4d2:	887a      	ldrh	r2, [r7, #2]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d906      	bls.n	800a4e6 <tcp_split_unsent_seg+0x7e>
 800a4d8:	4b80      	ldr	r3, [pc, #512]	; (800a6dc <tcp_split_unsent_seg+0x274>)
 800a4da:	f240 325b 	movw	r2, #859	; 0x35b
 800a4de:	4983      	ldr	r1, [pc, #524]	; (800a6ec <tcp_split_unsent_seg+0x284>)
 800a4e0:	4880      	ldr	r0, [pc, #512]	; (800a6e4 <tcp_split_unsent_seg+0x27c>)
 800a4e2:	f004 fc41 	bl	800ed68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	891b      	ldrh	r3, [r3, #8]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d106      	bne.n	800a4fc <tcp_split_unsent_seg+0x94>
 800a4ee:	4b7b      	ldr	r3, [pc, #492]	; (800a6dc <tcp_split_unsent_seg+0x274>)
 800a4f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a4f4:	497e      	ldr	r1, [pc, #504]	; (800a6f0 <tcp_split_unsent_seg+0x288>)
 800a4f6:	487b      	ldr	r0, [pc, #492]	; (800a6e4 <tcp_split_unsent_seg+0x27c>)
 800a4f8:	f004 fc36 	bl	800ed68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	7a9b      	ldrb	r3, [r3, #10]
 800a500:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a502:	7bfb      	ldrb	r3, [r7, #15]
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	b2db      	uxtb	r3, r3
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	891a      	ldrh	r2, [r3, #8]
 800a512:	887b      	ldrh	r3, [r7, #2]
 800a514:	1ad3      	subs	r3, r2, r3
 800a516:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	89bb      	ldrh	r3, [r7, #12]
 800a51e:	4413      	add	r3, r2
 800a520:	b29b      	uxth	r3, r3
 800a522:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a526:	4619      	mov	r1, r3
 800a528:	2036      	movs	r0, #54	; 0x36
 800a52a:	f7fb fabb 	bl	8005aa4 <pbuf_alloc>
 800a52e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	2b00      	cmp	r3, #0
 800a534:	f000 80b7 	beq.w	800a6a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	891a      	ldrh	r2, [r3, #8]
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	891b      	ldrh	r3, [r3, #8]
 800a542:	1ad3      	subs	r3, r2, r3
 800a544:	b29a      	uxth	r2, r3
 800a546:	887b      	ldrh	r3, [r7, #2]
 800a548:	4413      	add	r3, r2
 800a54a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	6858      	ldr	r0, [r3, #4]
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	18d1      	adds	r1, r2, r3
 800a558:	897b      	ldrh	r3, [r7, #10]
 800a55a:	89ba      	ldrh	r2, [r7, #12]
 800a55c:	f7fb ff80 	bl	8006460 <pbuf_copy_partial>
 800a560:	4603      	mov	r3, r0
 800a562:	461a      	mov	r2, r3
 800a564:	89bb      	ldrh	r3, [r7, #12]
 800a566:	4293      	cmp	r3, r2
 800a568:	f040 809f 	bne.w	800a6aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	899b      	ldrh	r3, [r3, #12]
 800a572:	b29b      	uxth	r3, r3
 800a574:	4618      	mov	r0, r3
 800a576:	f7fa fa1b 	bl	80049b0 <lwip_htons>
 800a57a:	4603      	mov	r3, r0
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a582:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a584:	2300      	movs	r3, #0
 800a586:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a588:	7efb      	ldrb	r3, [r7, #27]
 800a58a:	f003 0308 	and.w	r3, r3, #8
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d007      	beq.n	800a5a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a592:	7efb      	ldrb	r3, [r7, #27]
 800a594:	f023 0308 	bic.w	r3, r3, #8
 800a598:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a59a:	7ebb      	ldrb	r3, [r7, #26]
 800a59c:	f043 0308 	orr.w	r3, r3, #8
 800a5a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a5a2:	7efb      	ldrb	r3, [r7, #27]
 800a5a4:	f003 0301 	and.w	r3, r3, #1
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d007      	beq.n	800a5bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a5ac:	7efb      	ldrb	r3, [r7, #27]
 800a5ae:	f023 0301 	bic.w	r3, r3, #1
 800a5b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a5b4:	7ebb      	ldrb	r3, [r7, #26]
 800a5b6:	f043 0301 	orr.w	r3, r3, #1
 800a5ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fa fa09 	bl	80049da <lwip_htonl>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	887b      	ldrh	r3, [r7, #2]
 800a5cc:	18d1      	adds	r1, r2, r3
 800a5ce:	7eba      	ldrb	r2, [r7, #26]
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	6939      	ldr	r1, [r7, #16]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fea7 	bl	800a32c <tcp_create_segment>
 800a5de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d063      	beq.n	800a6ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fb fdc6 	bl	800617c <pbuf_clen>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a5fa:	1a9b      	subs	r3, r3, r2
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	6858      	ldr	r0, [r3, #4]
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	891a      	ldrh	r2, [r3, #8]
 800a60e:	89bb      	ldrh	r3, [r7, #12]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	b29b      	uxth	r3, r3
 800a614:	4619      	mov	r1, r3
 800a616:	f7fb fba3 	bl	8005d60 <pbuf_realloc>
  useg->len -= remainder;
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	891a      	ldrh	r2, [r3, #8]
 800a61e:	89bb      	ldrh	r3, [r7, #12]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	b29a      	uxth	r2, r3
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	68db      	ldr	r3, [r3, #12]
 800a62c:	899b      	ldrh	r3, [r3, #12]
 800a62e:	b29c      	uxth	r4, r3
 800a630:	7efb      	ldrb	r3, [r7, #27]
 800a632:	b29b      	uxth	r3, r3
 800a634:	4618      	mov	r0, r3
 800a636:	f7fa f9bb 	bl	80049b0 <lwip_htons>
 800a63a:	4603      	mov	r3, r0
 800a63c:	461a      	mov	r2, r3
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	4322      	orrs	r2, r4
 800a644:	b292      	uxth	r2, r2
 800a646:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fb fd95 	bl	800617c <pbuf_clen>
 800a652:	4603      	mov	r3, r0
 800a654:	461a      	mov	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a65c:	4413      	add	r3, r2
 800a65e:	b29a      	uxth	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7fb fd86 	bl	800617c <pbuf_clen>
 800a670:	4603      	mov	r3, r0
 800a672:	461a      	mov	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a67a:	4413      	add	r3, r2
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	69fa      	ldr	r2, [r7, #28]
 800a690:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d103      	bne.n	800a6a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e016      	b.n	800a6d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a6a6:	bf00      	nop
 800a6a8:	e002      	b.n	800a6b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a6aa:	bf00      	nop
 800a6ac:	e000      	b.n	800a6b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a6ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d006      	beq.n	800a6c4 <tcp_split_unsent_seg+0x25c>
 800a6b6:	4b09      	ldr	r3, [pc, #36]	; (800a6dc <tcp_split_unsent_seg+0x274>)
 800a6b8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a6bc:	490d      	ldr	r1, [pc, #52]	; (800a6f4 <tcp_split_unsent_seg+0x28c>)
 800a6be:	4809      	ldr	r0, [pc, #36]	; (800a6e4 <tcp_split_unsent_seg+0x27c>)
 800a6c0:	f004 fb52 	bl	800ed68 <iprintf>
  if (p != NULL) {
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a6ca:	6938      	ldr	r0, [r7, #16]
 800a6cc:	f7fb fcce 	bl	800606c <pbuf_free>
  }

  return ERR_MEM;
 800a6d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3724      	adds	r7, #36	; 0x24
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd90      	pop	{r4, r7, pc}
 800a6dc:	08011258 	.word	0x08011258
 800a6e0:	080115ec 	.word	0x080115ec
 800a6e4:	080112ac 	.word	0x080112ac
 800a6e8:	08011610 	.word	0x08011610
 800a6ec:	08011634 	.word	0x08011634
 800a6f0:	08011644 	.word	0x08011644
 800a6f4:	08011654 	.word	0x08011654

0800a6f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a6f8:	b590      	push	{r4, r7, lr}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d106      	bne.n	800a714 <tcp_send_fin+0x1c>
 800a706:	4b21      	ldr	r3, [pc, #132]	; (800a78c <tcp_send_fin+0x94>)
 800a708:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800a70c:	4920      	ldr	r1, [pc, #128]	; (800a790 <tcp_send_fin+0x98>)
 800a70e:	4821      	ldr	r0, [pc, #132]	; (800a794 <tcp_send_fin+0x9c>)
 800a710:	f004 fb2a 	bl	800ed68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d02e      	beq.n	800a77a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	e002      	b.n	800a72a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d1f8      	bne.n	800a724 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	899b      	ldrh	r3, [r3, #12]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fa f938 	bl	80049b0 <lwip_htons>
 800a740:	4603      	mov	r3, r0
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0307 	and.w	r3, r3, #7
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d116      	bne.n	800a77a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	899b      	ldrh	r3, [r3, #12]
 800a752:	b29c      	uxth	r4, r3
 800a754:	2001      	movs	r0, #1
 800a756:	f7fa f92b 	bl	80049b0 <lwip_htons>
 800a75a:	4603      	mov	r3, r0
 800a75c:	461a      	mov	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	4322      	orrs	r2, r4
 800a764:	b292      	uxth	r2, r2
 800a766:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	8b5b      	ldrh	r3, [r3, #26]
 800a76c:	f043 0320 	orr.w	r3, r3, #32
 800a770:	b29a      	uxth	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	e004      	b.n	800a784 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a77a:	2101      	movs	r1, #1
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 f80b 	bl	800a798 <tcp_enqueue_flags>
 800a782:	4603      	mov	r3, r0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd90      	pop	{r4, r7, pc}
 800a78c:	08011258 	.word	0x08011258
 800a790:	08011660 	.word	0x08011660
 800a794:	080112ac 	.word	0x080112ac

0800a798 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b08a      	sub	sp, #40	; 0x28
 800a79c:	af02      	add	r7, sp, #8
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a7ac:	78fb      	ldrb	r3, [r7, #3]
 800a7ae:	f003 0303 	and.w	r3, r3, #3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d106      	bne.n	800a7c4 <tcp_enqueue_flags+0x2c>
 800a7b6:	4b67      	ldr	r3, [pc, #412]	; (800a954 <tcp_enqueue_flags+0x1bc>)
 800a7b8:	f240 4211 	movw	r2, #1041	; 0x411
 800a7bc:	4966      	ldr	r1, [pc, #408]	; (800a958 <tcp_enqueue_flags+0x1c0>)
 800a7be:	4867      	ldr	r0, [pc, #412]	; (800a95c <tcp_enqueue_flags+0x1c4>)
 800a7c0:	f004 fad2 	bl	800ed68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d106      	bne.n	800a7d8 <tcp_enqueue_flags+0x40>
 800a7ca:	4b62      	ldr	r3, [pc, #392]	; (800a954 <tcp_enqueue_flags+0x1bc>)
 800a7cc:	f240 4213 	movw	r2, #1043	; 0x413
 800a7d0:	4963      	ldr	r1, [pc, #396]	; (800a960 <tcp_enqueue_flags+0x1c8>)
 800a7d2:	4862      	ldr	r0, [pc, #392]	; (800a95c <tcp_enqueue_flags+0x1c4>)
 800a7d4:	f004 fac8 	bl	800ed68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	f003 0302 	and.w	r3, r3, #2
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a7e6:	7ffb      	ldrb	r3, [r7, #31]
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a7f2:	7dfb      	ldrb	r3, [r7, #23]
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	2036      	movs	r0, #54	; 0x36
 800a7fe:	f7fb f951 	bl	8005aa4 <pbuf_alloc>
 800a802:	6138      	str	r0, [r7, #16]
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d109      	bne.n	800a81e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	8b5b      	ldrh	r3, [r3, #26]
 800a80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a812:	b29a      	uxth	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a818:	f04f 33ff 	mov.w	r3, #4294967295
 800a81c:	e095      	b.n	800a94a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	895a      	ldrh	r2, [r3, #10]
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	b29b      	uxth	r3, r3
 800a826:	429a      	cmp	r2, r3
 800a828:	d206      	bcs.n	800a838 <tcp_enqueue_flags+0xa0>
 800a82a:	4b4a      	ldr	r3, [pc, #296]	; (800a954 <tcp_enqueue_flags+0x1bc>)
 800a82c:	f240 4239 	movw	r2, #1081	; 0x439
 800a830:	494c      	ldr	r1, [pc, #304]	; (800a964 <tcp_enqueue_flags+0x1cc>)
 800a832:	484a      	ldr	r0, [pc, #296]	; (800a95c <tcp_enqueue_flags+0x1c4>)
 800a834:	f004 fa98 	bl	800ed68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800a83c:	78fa      	ldrb	r2, [r7, #3]
 800a83e:	7ffb      	ldrb	r3, [r7, #31]
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	460b      	mov	r3, r1
 800a844:	6939      	ldr	r1, [r7, #16]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff fd70 	bl	800a32c <tcp_create_segment>
 800a84c:	60f8      	str	r0, [r7, #12]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d109      	bne.n	800a868 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	8b5b      	ldrh	r3, [r3, #26]
 800a858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a862:	f04f 33ff 	mov.w	r3, #4294967295
 800a866:	e070      	b.n	800a94a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d006      	beq.n	800a882 <tcp_enqueue_flags+0xea>
 800a874:	4b37      	ldr	r3, [pc, #220]	; (800a954 <tcp_enqueue_flags+0x1bc>)
 800a876:	f240 4242 	movw	r2, #1090	; 0x442
 800a87a:	493b      	ldr	r1, [pc, #236]	; (800a968 <tcp_enqueue_flags+0x1d0>)
 800a87c:	4837      	ldr	r0, [pc, #220]	; (800a95c <tcp_enqueue_flags+0x1c4>)
 800a87e:	f004 fa73 	bl	800ed68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	891b      	ldrh	r3, [r3, #8]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d006      	beq.n	800a898 <tcp_enqueue_flags+0x100>
 800a88a:	4b32      	ldr	r3, [pc, #200]	; (800a954 <tcp_enqueue_flags+0x1bc>)
 800a88c:	f240 4243 	movw	r2, #1091	; 0x443
 800a890:	4936      	ldr	r1, [pc, #216]	; (800a96c <tcp_enqueue_flags+0x1d4>)
 800a892:	4832      	ldr	r0, [pc, #200]	; (800a95c <tcp_enqueue_flags+0x1c4>)
 800a894:	f004 fa68 	bl	800ed68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d103      	bne.n	800a8a8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	66da      	str	r2, [r3, #108]	; 0x6c
 800a8a6:	e00d      	b.n	800a8c4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8ac:	61bb      	str	r3, [r7, #24]
 800a8ae:	e002      	b.n	800a8b6 <tcp_enqueue_flags+0x11e>
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	61bb      	str	r3, [r7, #24]
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1f8      	bne.n	800a8b0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a8cc:	78fb      	ldrb	r3, [r7, #3]
 800a8ce:	f003 0302 	and.w	r3, r3, #2
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d104      	bne.n	800a8e0 <tcp_enqueue_flags+0x148>
 800a8d6:	78fb      	ldrb	r3, [r7, #3]
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d004      	beq.n	800a8ea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8e4:	1c5a      	adds	r2, r3, #1
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a8ea:	78fb      	ldrb	r3, [r7, #3]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	8b5b      	ldrh	r3, [r3, #26]
 800a8f8:	f043 0320 	orr.w	r3, r3, #32
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	4618      	mov	r0, r3
 800a908:	f7fb fc38 	bl	800617c <pbuf_clen>
 800a90c:	4603      	mov	r3, r0
 800a90e:	461a      	mov	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a916:	4413      	add	r3, r2
 800a918:	b29a      	uxth	r2, r3
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00e      	beq.n	800a948 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10a      	bne.n	800a948 <tcp_enqueue_flags+0x1b0>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a936:	2b00      	cmp	r3, #0
 800a938:	d106      	bne.n	800a948 <tcp_enqueue_flags+0x1b0>
 800a93a:	4b06      	ldr	r3, [pc, #24]	; (800a954 <tcp_enqueue_flags+0x1bc>)
 800a93c:	f240 4265 	movw	r2, #1125	; 0x465
 800a940:	490b      	ldr	r1, [pc, #44]	; (800a970 <tcp_enqueue_flags+0x1d8>)
 800a942:	4806      	ldr	r0, [pc, #24]	; (800a95c <tcp_enqueue_flags+0x1c4>)
 800a944:	f004 fa10 	bl	800ed68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3720      	adds	r7, #32
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	08011258 	.word	0x08011258
 800a958:	0801167c 	.word	0x0801167c
 800a95c:	080112ac 	.word	0x080112ac
 800a960:	080116d4 	.word	0x080116d4
 800a964:	080116f4 	.word	0x080116f4
 800a968:	08011730 	.word	0x08011730
 800a96c:	08011748 	.word	0x08011748
 800a970:	08011774 	.word	0x08011774

0800a974 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a974:	b5b0      	push	{r4, r5, r7, lr}
 800a976:	b08a      	sub	sp, #40	; 0x28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d106      	bne.n	800a990 <tcp_output+0x1c>
 800a982:	4b8a      	ldr	r3, [pc, #552]	; (800abac <tcp_output+0x238>)
 800a984:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800a988:	4989      	ldr	r1, [pc, #548]	; (800abb0 <tcp_output+0x23c>)
 800a98a:	488a      	ldr	r0, [pc, #552]	; (800abb4 <tcp_output+0x240>)
 800a98c:	f004 f9ec 	bl	800ed68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	7d1b      	ldrb	r3, [r3, #20]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d106      	bne.n	800a9a6 <tcp_output+0x32>
 800a998:	4b84      	ldr	r3, [pc, #528]	; (800abac <tcp_output+0x238>)
 800a99a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800a99e:	4986      	ldr	r1, [pc, #536]	; (800abb8 <tcp_output+0x244>)
 800a9a0:	4884      	ldr	r0, [pc, #528]	; (800abb4 <tcp_output+0x240>)
 800a9a2:	f004 f9e1 	bl	800ed68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a9a6:	4b85      	ldr	r3, [pc, #532]	; (800abbc <tcp_output+0x248>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d101      	bne.n	800a9b4 <tcp_output+0x40>
    return ERR_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	e1ce      	b.n	800ad52 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	bf28      	it	cs
 800a9c4:	4613      	movcs	r3, r2
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10b      	bne.n	800a9ee <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	8b5b      	ldrh	r3, [r3, #26]
 800a9da:	f003 0302 	and.w	r3, r3, #2
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f000 81aa 	beq.w	800ad38 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fdcb 	bl	800b580 <tcp_send_empty_ack>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	e1b1      	b.n	800ad52 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f7ff fc7c 	bl	800a2f4 <tcp_route>
 800a9fc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d102      	bne.n	800aa0a <tcp_output+0x96>
    return ERR_RTE;
 800aa04:	f06f 0303 	mvn.w	r3, #3
 800aa08:	e1a3      	b.n	800ad52 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d003      	beq.n	800aa18 <tcp_output+0xa4>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d111      	bne.n	800aa3c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <tcp_output+0xb0>
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	3304      	adds	r3, #4
 800aa22:	e000      	b.n	800aa26 <tcp_output+0xb2>
 800aa24:	2300      	movs	r3, #0
 800aa26:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <tcp_output+0xc0>
      return ERR_RTE;
 800aa2e:	f06f 0303 	mvn.w	r3, #3
 800aa32:	e18e      	b.n	800ad52 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7f9 ffc9 	bl	80049da <lwip_htonl>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa52:	8912      	ldrh	r2, [r2, #8]
 800aa54:	4413      	add	r3, r2
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d227      	bcs.n	800aaac <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa62:	461a      	mov	r2, r3
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d114      	bne.n	800aa94 <tcp_output+0x120>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d110      	bne.n	800aa94 <tcp_output+0x120>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10b      	bne.n	800aa94 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	8b5b      	ldrh	r3, [r3, #26]
 800aa98:	f003 0302 	and.w	r3, r3, #2
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f000 814d 	beq.w	800ad3c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fd6c 	bl	800b580 <tcp_send_empty_ack>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	e152      	b.n	800ad52 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aab8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 811c 	beq.w	800acfa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800aac2:	e002      	b.n	800aaca <tcp_output+0x156>
 800aac4:	6a3b      	ldr	r3, [r7, #32]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	623b      	str	r3, [r7, #32]
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1f8      	bne.n	800aac4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800aad2:	e112      	b.n	800acfa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800aad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	899b      	ldrh	r3, [r3, #12]
 800aada:	b29b      	uxth	r3, r3
 800aadc:	4618      	mov	r0, r3
 800aade:	f7f9 ff67 	bl	80049b0 <lwip_htons>
 800aae2:	4603      	mov	r3, r0
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	f003 0304 	and.w	r3, r3, #4
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d006      	beq.n	800aafc <tcp_output+0x188>
 800aaee:	4b2f      	ldr	r3, [pc, #188]	; (800abac <tcp_output+0x238>)
 800aaf0:	f240 5236 	movw	r2, #1334	; 0x536
 800aaf4:	4932      	ldr	r1, [pc, #200]	; (800abc0 <tcp_output+0x24c>)
 800aaf6:	482f      	ldr	r0, [pc, #188]	; (800abb4 <tcp_output+0x240>)
 800aaf8:	f004 f936 	bl	800ed68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d01f      	beq.n	800ab44 <tcp_output+0x1d0>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	8b5b      	ldrh	r3, [r3, #26]
 800ab08:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d119      	bne.n	800ab44 <tcp_output+0x1d0>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00b      	beq.n	800ab30 <tcp_output+0x1bc>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d110      	bne.n	800ab44 <tcp_output+0x1d0>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab26:	891a      	ldrh	r2, [r3, #8]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d209      	bcs.n	800ab44 <tcp_output+0x1d0>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d004      	beq.n	800ab44 <tcp_output+0x1d0>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab40:	2b08      	cmp	r3, #8
 800ab42:	d901      	bls.n	800ab48 <tcp_output+0x1d4>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e000      	b.n	800ab4a <tcp_output+0x1d6>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d106      	bne.n	800ab5c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	8b5b      	ldrh	r3, [r3, #26]
 800ab52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 80e4 	beq.w	800ad24 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	7d1b      	ldrb	r3, [r3, #20]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d00d      	beq.n	800ab80 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	899b      	ldrh	r3, [r3, #12]
 800ab6a:	b29c      	uxth	r4, r3
 800ab6c:	2010      	movs	r0, #16
 800ab6e:	f7f9 ff1f 	bl	80049b0 <lwip_htons>
 800ab72:	4603      	mov	r3, r0
 800ab74:	461a      	mov	r2, r3
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	4322      	orrs	r2, r4
 800ab7c:	b292      	uxth	r2, r2
 800ab7e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	6879      	ldr	r1, [r7, #4]
 800ab84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab86:	f000 f909 	bl	800ad9c <tcp_output_segment>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ab8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d016      	beq.n	800abc4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	8b5b      	ldrh	r3, [r3, #26]
 800ab9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	835a      	strh	r2, [r3, #26]
      return err;
 800aba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aba8:	e0d3      	b.n	800ad52 <tcp_output+0x3de>
 800abaa:	bf00      	nop
 800abac:	08011258 	.word	0x08011258
 800abb0:	0801179c 	.word	0x0801179c
 800abb4:	080112ac 	.word	0x080112ac
 800abb8:	080117b4 	.word	0x080117b4
 800abbc:	200087b8 	.word	0x200087b8
 800abc0:	080117dc 	.word	0x080117dc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	7d1b      	ldrb	r3, [r3, #20]
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d006      	beq.n	800abe2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	8b5b      	ldrh	r3, [r3, #26]
 800abd8:	f023 0303 	bic.w	r3, r3, #3
 800abdc:	b29a      	uxth	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800abe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f9 fef6 	bl	80049da <lwip_htonl>
 800abee:	4604      	mov	r4, r0
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	891b      	ldrh	r3, [r3, #8]
 800abf4:	461d      	mov	r5, r3
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	899b      	ldrh	r3, [r3, #12]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f9 fed6 	bl	80049b0 <lwip_htons>
 800ac04:	4603      	mov	r3, r0
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 0303 	and.w	r3, r3, #3
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <tcp_output+0x2a0>
 800ac10:	2301      	movs	r3, #1
 800ac12:	e000      	b.n	800ac16 <tcp_output+0x2a2>
 800ac14:	2300      	movs	r3, #0
 800ac16:	442b      	add	r3, r5
 800ac18:	4423      	add	r3, r4
 800ac1a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	da02      	bge.n	800ac2e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	891b      	ldrh	r3, [r3, #8]
 800ac32:	461c      	mov	r4, r3
 800ac34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	899b      	ldrh	r3, [r3, #12]
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f7f9 feb7 	bl	80049b0 <lwip_htons>
 800ac42:	4603      	mov	r3, r0
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	f003 0303 	and.w	r3, r3, #3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <tcp_output+0x2de>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e000      	b.n	800ac54 <tcp_output+0x2e0>
 800ac52:	2300      	movs	r3, #0
 800ac54:	4423      	add	r3, r4
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d049      	beq.n	800acee <tcp_output+0x37a>
      seg->next = NULL;
 800ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d105      	bne.n	800ac74 <tcp_output+0x300>
        pcb->unacked = seg;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac6c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	623b      	str	r3, [r7, #32]
 800ac72:	e03f      	b.n	800acf4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7f9 fead 	bl	80049da <lwip_htonl>
 800ac80:	4604      	mov	r4, r0
 800ac82:	6a3b      	ldr	r3, [r7, #32]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7f9 fea6 	bl	80049da <lwip_htonl>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	1ae3      	subs	r3, r4, r3
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	da24      	bge.n	800ace0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	3370      	adds	r3, #112	; 0x70
 800ac9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ac9c:	e002      	b.n	800aca4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d011      	beq.n	800acd0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800acac:	69fb      	ldr	r3, [r7, #28]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7f9 fe90 	bl	80049da <lwip_htonl>
 800acba:	4604      	mov	r4, r0
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7f9 fe89 	bl	80049da <lwip_htonl>
 800acc8:	4603      	mov	r3, r0
 800acca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800accc:	2b00      	cmp	r3, #0
 800acce:	dbe6      	blt.n	800ac9e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	e009      	b.n	800acf4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ace0:	6a3b      	ldr	r3, [r7, #32]
 800ace2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ace4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ace6:	6a3b      	ldr	r3, [r7, #32]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	623b      	str	r3, [r7, #32]
 800acec:	e002      	b.n	800acf4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800acee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acf0:	f7fc fc3f 	bl	8007572 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acf8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d012      	beq.n	800ad26 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7f9 fe67 	bl	80049da <lwip_htonl>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad16:	8912      	ldrh	r2, [r2, #8]
 800ad18:	4413      	add	r3, r2
  while (seg != NULL &&
 800ad1a:	69ba      	ldr	r2, [r7, #24]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	f4bf aed9 	bcs.w	800aad4 <tcp_output+0x160>
 800ad22:	e000      	b.n	800ad26 <tcp_output+0x3b2>
      break;
 800ad24:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d108      	bne.n	800ad40 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ad36:	e004      	b.n	800ad42 <tcp_output+0x3ce>
    goto output_done;
 800ad38:	bf00      	nop
 800ad3a:	e002      	b.n	800ad42 <tcp_output+0x3ce>
    goto output_done;
 800ad3c:	bf00      	nop
 800ad3e:	e000      	b.n	800ad42 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ad40:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	8b5b      	ldrh	r3, [r3, #26]
 800ad46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3728      	adds	r7, #40	; 0x28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bdb0      	pop	{r4, r5, r7, pc}
 800ad5a:	bf00      	nop

0800ad5c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d106      	bne.n	800ad78 <tcp_output_segment_busy+0x1c>
 800ad6a:	4b09      	ldr	r3, [pc, #36]	; (800ad90 <tcp_output_segment_busy+0x34>)
 800ad6c:	f240 529a 	movw	r2, #1434	; 0x59a
 800ad70:	4908      	ldr	r1, [pc, #32]	; (800ad94 <tcp_output_segment_busy+0x38>)
 800ad72:	4809      	ldr	r0, [pc, #36]	; (800ad98 <tcp_output_segment_busy+0x3c>)
 800ad74:	f003 fff8 	bl	800ed68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	7b9b      	ldrb	r3, [r3, #14]
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d001      	beq.n	800ad86 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e000      	b.n	800ad88 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	08011258 	.word	0x08011258
 800ad94:	080117f4 	.word	0x080117f4
 800ad98:	080112ac 	.word	0x080112ac

0800ad9c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ad9c:	b5b0      	push	{r4, r5, r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af04      	add	r7, sp, #16
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d106      	bne.n	800adbc <tcp_output_segment+0x20>
 800adae:	4b64      	ldr	r3, [pc, #400]	; (800af40 <tcp_output_segment+0x1a4>)
 800adb0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800adb4:	4963      	ldr	r1, [pc, #396]	; (800af44 <tcp_output_segment+0x1a8>)
 800adb6:	4864      	ldr	r0, [pc, #400]	; (800af48 <tcp_output_segment+0x1ac>)
 800adb8:	f003 ffd6 	bl	800ed68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d106      	bne.n	800add0 <tcp_output_segment+0x34>
 800adc2:	4b5f      	ldr	r3, [pc, #380]	; (800af40 <tcp_output_segment+0x1a4>)
 800adc4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800adc8:	4960      	ldr	r1, [pc, #384]	; (800af4c <tcp_output_segment+0x1b0>)
 800adca:	485f      	ldr	r0, [pc, #380]	; (800af48 <tcp_output_segment+0x1ac>)
 800adcc:	f003 ffcc 	bl	800ed68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d106      	bne.n	800ade4 <tcp_output_segment+0x48>
 800add6:	4b5a      	ldr	r3, [pc, #360]	; (800af40 <tcp_output_segment+0x1a4>)
 800add8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800addc:	495c      	ldr	r1, [pc, #368]	; (800af50 <tcp_output_segment+0x1b4>)
 800adde:	485a      	ldr	r0, [pc, #360]	; (800af48 <tcp_output_segment+0x1ac>)
 800ade0:	f003 ffc2 	bl	800ed68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f7ff ffb9 	bl	800ad5c <tcp_output_segment_busy>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d001      	beq.n	800adf4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800adf0:	2300      	movs	r3, #0
 800adf2:	e0a1      	b.n	800af38 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	68dc      	ldr	r4, [r3, #12]
 800adfc:	4610      	mov	r0, r2
 800adfe:	f7f9 fdec 	bl	80049da <lwip_htonl>
 800ae02:	4603      	mov	r3, r0
 800ae04:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	68dc      	ldr	r4, [r3, #12]
 800ae0e:	4610      	mov	r0, r2
 800ae10:	f7f9 fdce 	bl	80049b0 <lwip_htons>
 800ae14:	4603      	mov	r3, r0
 800ae16:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	68ba      	ldr	r2, [r7, #8]
 800ae1e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ae20:	441a      	add	r2, r3
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	3314      	adds	r3, #20
 800ae2c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	7a9b      	ldrb	r3, [r3, #10]
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d015      	beq.n	800ae66 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	461a      	mov	r2, r3
 800ae40:	6879      	ldr	r1, [r7, #4]
 800ae42:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ae46:	f7fc fe8b 	bl	8007b60 <tcp_eff_send_mss_netif>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ae4e:	8b7b      	ldrh	r3, [r7, #26]
 800ae50:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7f9 fdc0 	bl	80049da <lwip_htonl>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	3304      	adds	r3, #4
 800ae64:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	da02      	bge.n	800ae76 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	2200      	movs	r2, #0
 800ae74:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10c      	bne.n	800ae98 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ae7e:	4b35      	ldr	r3, [pc, #212]	; (800af54 <tcp_output_segment+0x1b8>)
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	68db      	ldr	r3, [r3, #12]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f9 fda4 	bl	80049da <lwip_htonl>
 800ae92:	4602      	mov	r2, r0
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	8959      	ldrh	r1, [r3, #10]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	8b3a      	ldrh	r2, [r7, #24]
 800aeb2:	1a8a      	subs	r2, r1, r2
 800aeb4:	b292      	uxth	r2, r2
 800aeb6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	8919      	ldrh	r1, [r3, #8]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	8b3a      	ldrh	r2, [r7, #24]
 800aec4:	1a8a      	subs	r2, r1, r2
 800aec6:	b292      	uxth	r2, r2
 800aec8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	68d2      	ldr	r2, [r2, #12]
 800aed2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	741a      	strb	r2, [r3, #16]
 800aedc:	2200      	movs	r2, #0
 800aede:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	68da      	ldr	r2, [r3, #12]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	7a9b      	ldrb	r3, [r3, #10]
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d001      	beq.n	800aef4 <tcp_output_segment+0x158>
 800aef0:	2318      	movs	r3, #24
 800aef2:	e000      	b.n	800aef6 <tcp_output_segment+0x15a>
 800aef4:	2314      	movs	r3, #20
 800aef6:	4413      	add	r3, r2
 800aef8:	69fa      	ldr	r2, [r7, #28]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d006      	beq.n	800af0c <tcp_output_segment+0x170>
 800aefe:	4b10      	ldr	r3, [pc, #64]	; (800af40 <tcp_output_segment+0x1a4>)
 800af00:	f240 621c 	movw	r2, #1564	; 0x61c
 800af04:	4914      	ldr	r1, [pc, #80]	; (800af58 <tcp_output_segment+0x1bc>)
 800af06:	4810      	ldr	r0, [pc, #64]	; (800af48 <tcp_output_segment+0x1ac>)
 800af08:	f003 ff2e 	bl	800ed68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6858      	ldr	r0, [r3, #4]
 800af10:	68b9      	ldr	r1, [r7, #8]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	1d1c      	adds	r4, r3, #4
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	7add      	ldrb	r5, [r3, #11]
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	7a9b      	ldrb	r3, [r3, #10]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	9202      	str	r2, [sp, #8]
 800af22:	2206      	movs	r2, #6
 800af24:	9201      	str	r2, [sp, #4]
 800af26:	9300      	str	r3, [sp, #0]
 800af28:	462b      	mov	r3, r5
 800af2a:	4622      	mov	r2, r4
 800af2c:	f002 fdee 	bl	800db0c <ip4_output_if>
 800af30:	4603      	mov	r3, r0
 800af32:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800af34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bdb0      	pop	{r4, r5, r7, pc}
 800af40:	08011258 	.word	0x08011258
 800af44:	0801181c 	.word	0x0801181c
 800af48:	080112ac 	.word	0x080112ac
 800af4c:	0801183c 	.word	0x0801183c
 800af50:	0801185c 	.word	0x0801185c
 800af54:	2000876c 	.word	0x2000876c
 800af58:	08011880 	.word	0x08011880

0800af5c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800af5c:	b5b0      	push	{r4, r5, r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <tcp_rexmit_rto_prepare+0x1c>
 800af6a:	4b31      	ldr	r3, [pc, #196]	; (800b030 <tcp_rexmit_rto_prepare+0xd4>)
 800af6c:	f240 6263 	movw	r2, #1635	; 0x663
 800af70:	4930      	ldr	r1, [pc, #192]	; (800b034 <tcp_rexmit_rto_prepare+0xd8>)
 800af72:	4831      	ldr	r0, [pc, #196]	; (800b038 <tcp_rexmit_rto_prepare+0xdc>)
 800af74:	f003 fef8 	bl	800ed68 <iprintf>

  if (pcb->unacked == NULL) {
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d102      	bne.n	800af86 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800af80:	f06f 0305 	mvn.w	r3, #5
 800af84:	e050      	b.n	800b028 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	e00b      	b.n	800afa6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f7ff fee4 	bl	800ad5c <tcp_output_segment_busy>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800af9a:	f06f 0305 	mvn.w	r3, #5
 800af9e:	e043      	b.n	800b028 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	60fb      	str	r3, [r7, #12]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d1ef      	bne.n	800af8e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800afae:	68f8      	ldr	r0, [r7, #12]
 800afb0:	f7ff fed4 	bl	800ad5c <tcp_output_segment_busy>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800afba:	f06f 0305 	mvn.w	r3, #5
 800afbe:	e033      	b.n	800b028 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	8b5b      	ldrh	r3, [r3, #26]
 800afda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800afde:	b29a      	uxth	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	4618      	mov	r0, r3
 800afec:	f7f9 fcf5 	bl	80049da <lwip_htonl>
 800aff0:	4604      	mov	r4, r0
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	891b      	ldrh	r3, [r3, #8]
 800aff6:	461d      	mov	r5, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	68db      	ldr	r3, [r3, #12]
 800affc:	899b      	ldrh	r3, [r3, #12]
 800affe:	b29b      	uxth	r3, r3
 800b000:	4618      	mov	r0, r3
 800b002:	f7f9 fcd5 	bl	80049b0 <lwip_htons>
 800b006:	4603      	mov	r3, r0
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	f003 0303 	and.w	r3, r3, #3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <tcp_rexmit_rto_prepare+0xba>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <tcp_rexmit_rto_prepare+0xbc>
 800b016:	2300      	movs	r3, #0
 800b018:	442b      	add	r3, r5
 800b01a:	18e2      	adds	r2, r4, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3710      	adds	r7, #16
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bdb0      	pop	{r4, r5, r7, pc}
 800b030:	08011258 	.word	0x08011258
 800b034:	08011894 	.word	0x08011894
 800b038:	080112ac 	.word	0x080112ac

0800b03c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <tcp_rexmit_rto_commit+0x1c>
 800b04a:	4b0d      	ldr	r3, [pc, #52]	; (800b080 <tcp_rexmit_rto_commit+0x44>)
 800b04c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b050:	490c      	ldr	r1, [pc, #48]	; (800b084 <tcp_rexmit_rto_commit+0x48>)
 800b052:	480d      	ldr	r0, [pc, #52]	; (800b088 <tcp_rexmit_rto_commit+0x4c>)
 800b054:	f003 fe88 	bl	800ed68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b05e:	2bff      	cmp	r3, #255	; 0xff
 800b060:	d007      	beq.n	800b072 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b068:	3301      	adds	r3, #1
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff fc7e 	bl	800a974 <tcp_output>
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	08011258 	.word	0x08011258
 800b084:	080118b8 	.word	0x080118b8
 800b088:	080112ac 	.word	0x080112ac

0800b08c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d106      	bne.n	800b0a8 <tcp_rexmit_rto+0x1c>
 800b09a:	4b0a      	ldr	r3, [pc, #40]	; (800b0c4 <tcp_rexmit_rto+0x38>)
 800b09c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b0a0:	4909      	ldr	r1, [pc, #36]	; (800b0c8 <tcp_rexmit_rto+0x3c>)
 800b0a2:	480a      	ldr	r0, [pc, #40]	; (800b0cc <tcp_rexmit_rto+0x40>)
 800b0a4:	f003 fe60 	bl	800ed68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7ff ff57 	bl	800af5c <tcp_rexmit_rto_prepare>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d102      	bne.n	800b0ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7ff ffc1 	bl	800b03c <tcp_rexmit_rto_commit>
  }
}
 800b0ba:	bf00      	nop
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	08011258 	.word	0x08011258
 800b0c8:	080118dc 	.word	0x080118dc
 800b0cc:	080112ac 	.word	0x080112ac

0800b0d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d106      	bne.n	800b0ec <tcp_rexmit+0x1c>
 800b0de:	4b2f      	ldr	r3, [pc, #188]	; (800b19c <tcp_rexmit+0xcc>)
 800b0e0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b0e4:	492e      	ldr	r1, [pc, #184]	; (800b1a0 <tcp_rexmit+0xd0>)
 800b0e6:	482f      	ldr	r0, [pc, #188]	; (800b1a4 <tcp_rexmit+0xd4>)
 800b0e8:	f003 fe3e 	bl	800ed68 <iprintf>

  if (pcb->unacked == NULL) {
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d102      	bne.n	800b0fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b0f4:	f06f 0305 	mvn.w	r3, #5
 800b0f8:	e04c      	b.n	800b194 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b100:	68b8      	ldr	r0, [r7, #8]
 800b102:	f7ff fe2b 	bl	800ad5c <tcp_output_segment_busy>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b10c:	f06f 0305 	mvn.w	r3, #5
 800b110:	e040      	b.n	800b194 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	336c      	adds	r3, #108	; 0x6c
 800b11e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b120:	e002      	b.n	800b128 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d011      	beq.n	800b154 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	68db      	ldr	r3, [r3, #12]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	4618      	mov	r0, r3
 800b13a:	f7f9 fc4e 	bl	80049da <lwip_htonl>
 800b13e:	4604      	mov	r4, r0
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	4618      	mov	r0, r3
 800b148:	f7f9 fc47 	bl	80049da <lwip_htonl>
 800b14c:	4603      	mov	r3, r0
 800b14e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b150:	2b00      	cmp	r3, #0
 800b152:	dbe6      	blt.n	800b122 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	68ba      	ldr	r2, [r7, #8]
 800b160:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d103      	bne.n	800b172 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b178:	2bff      	cmp	r3, #255	; 0xff
 800b17a:	d007      	beq.n	800b18c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b182:	3301      	adds	r3, #1
 800b184:	b2da      	uxtb	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	3714      	adds	r7, #20
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd90      	pop	{r4, r7, pc}
 800b19c:	08011258 	.word	0x08011258
 800b1a0:	080118f8 	.word	0x080118f8
 800b1a4:	080112ac 	.word	0x080112ac

0800b1a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <tcp_rexmit_fast+0x1c>
 800b1b6:	4b2a      	ldr	r3, [pc, #168]	; (800b260 <tcp_rexmit_fast+0xb8>)
 800b1b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b1bc:	4929      	ldr	r1, [pc, #164]	; (800b264 <tcp_rexmit_fast+0xbc>)
 800b1be:	482a      	ldr	r0, [pc, #168]	; (800b268 <tcp_rexmit_fast+0xc0>)
 800b1c0:	f003 fdd2 	bl	800ed68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d044      	beq.n	800b256 <tcp_rexmit_fast+0xae>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	8b5b      	ldrh	r3, [r3, #26]
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d13e      	bne.n	800b256 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff ff79 	bl	800b0d0 <tcp_rexmit>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d138      	bne.n	800b256 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	bf28      	it	cs
 800b1f4:	4613      	movcs	r3, r2
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	0fda      	lsrs	r2, r3, #31
 800b1fa:	4413      	add	r3, r2
 800b1fc:	105b      	asrs	r3, r3, #1
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b20c:	461a      	mov	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	429a      	cmp	r2, r3
 800b216:	d206      	bcs.n	800b226 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	b29a      	uxth	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b230:	4619      	mov	r1, r3
 800b232:	0049      	lsls	r1, r1, #1
 800b234:	440b      	add	r3, r1
 800b236:	b29b      	uxth	r3, r3
 800b238:	4413      	add	r3, r2
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	8b5b      	ldrh	r3, [r3, #26]
 800b246:	f043 0304 	orr.w	r3, r3, #4
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b256:	bf00      	nop
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	08011258 	.word	0x08011258
 800b264:	08011910 	.word	0x08011910
 800b268:	080112ac 	.word	0x080112ac

0800b26c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
 800b272:	60f8      	str	r0, [r7, #12]
 800b274:	607b      	str	r3, [r7, #4]
 800b276:	460b      	mov	r3, r1
 800b278:	817b      	strh	r3, [r7, #10]
 800b27a:	4613      	mov	r3, r2
 800b27c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b27e:	897a      	ldrh	r2, [r7, #10]
 800b280:	893b      	ldrh	r3, [r7, #8]
 800b282:	4413      	add	r3, r2
 800b284:	b29b      	uxth	r3, r3
 800b286:	3314      	adds	r3, #20
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b28e:	4619      	mov	r1, r3
 800b290:	2022      	movs	r0, #34	; 0x22
 800b292:	f7fa fc07 	bl	8005aa4 <pbuf_alloc>
 800b296:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d04d      	beq.n	800b33a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b29e:	897b      	ldrh	r3, [r7, #10]
 800b2a0:	3313      	adds	r3, #19
 800b2a2:	697a      	ldr	r2, [r7, #20]
 800b2a4:	8952      	ldrh	r2, [r2, #10]
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	db06      	blt.n	800b2b8 <tcp_output_alloc_header_common+0x4c>
 800b2aa:	4b26      	ldr	r3, [pc, #152]	; (800b344 <tcp_output_alloc_header_common+0xd8>)
 800b2ac:	f240 7223 	movw	r2, #1827	; 0x723
 800b2b0:	4925      	ldr	r1, [pc, #148]	; (800b348 <tcp_output_alloc_header_common+0xdc>)
 800b2b2:	4826      	ldr	r0, [pc, #152]	; (800b34c <tcp_output_alloc_header_common+0xe0>)
 800b2b4:	f003 fd58 	bl	800ed68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b2be:	8c3b      	ldrh	r3, [r7, #32]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7f9 fb75 	bl	80049b0 <lwip_htons>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b2ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7f9 fb6d 	bl	80049b0 <lwip_htons>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	461a      	mov	r2, r3
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f7f9 fb78 	bl	80049da <lwip_htonl>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b2f0:	897b      	ldrh	r3, [r7, #10]
 800b2f2:	089b      	lsrs	r3, r3, #2
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3305      	adds	r3, #5
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	031b      	lsls	r3, r3, #12
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b302:	b29b      	uxth	r3, r3
 800b304:	4313      	orrs	r3, r2
 800b306:	b29b      	uxth	r3, r3
 800b308:	4618      	mov	r0, r3
 800b30a:	f7f9 fb51 	bl	80049b0 <lwip_htons>
 800b30e:	4603      	mov	r3, r0
 800b310:	461a      	mov	r2, r3
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b316:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b318:	4618      	mov	r0, r3
 800b31a:	f7f9 fb49 	bl	80049b0 <lwip_htons>
 800b31e:	4603      	mov	r3, r0
 800b320:	461a      	mov	r2, r3
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	2200      	movs	r2, #0
 800b32a:	741a      	strb	r2, [r3, #16]
 800b32c:	2200      	movs	r2, #0
 800b32e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	2200      	movs	r2, #0
 800b334:	749a      	strb	r2, [r3, #18]
 800b336:	2200      	movs	r2, #0
 800b338:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b33a:	697b      	ldr	r3, [r7, #20]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3718      	adds	r7, #24
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	08011258 	.word	0x08011258
 800b348:	08011930 	.word	0x08011930
 800b34c:	080112ac 	.word	0x080112ac

0800b350 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b350:	b5b0      	push	{r4, r5, r7, lr}
 800b352:	b08a      	sub	sp, #40	; 0x28
 800b354:	af04      	add	r7, sp, #16
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	607b      	str	r3, [r7, #4]
 800b35a:	460b      	mov	r3, r1
 800b35c:	817b      	strh	r3, [r7, #10]
 800b35e:	4613      	mov	r3, r2
 800b360:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d106      	bne.n	800b376 <tcp_output_alloc_header+0x26>
 800b368:	4b15      	ldr	r3, [pc, #84]	; (800b3c0 <tcp_output_alloc_header+0x70>)
 800b36a:	f240 7242 	movw	r2, #1858	; 0x742
 800b36e:	4915      	ldr	r1, [pc, #84]	; (800b3c4 <tcp_output_alloc_header+0x74>)
 800b370:	4815      	ldr	r0, [pc, #84]	; (800b3c8 <tcp_output_alloc_header+0x78>)
 800b372:	f003 fcf9 	bl	800ed68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	8adb      	ldrh	r3, [r3, #22]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	8b12      	ldrh	r2, [r2, #24]
 800b382:	68f9      	ldr	r1, [r7, #12]
 800b384:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b386:	893d      	ldrh	r5, [r7, #8]
 800b388:	897c      	ldrh	r4, [r7, #10]
 800b38a:	9103      	str	r1, [sp, #12]
 800b38c:	2110      	movs	r1, #16
 800b38e:	9102      	str	r1, [sp, #8]
 800b390:	9201      	str	r2, [sp, #4]
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	462a      	mov	r2, r5
 800b398:	4621      	mov	r1, r4
 800b39a:	f7ff ff67 	bl	800b26c <tcp_output_alloc_header_common>
 800b39e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d006      	beq.n	800b3b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b3ae:	441a      	add	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b3b4:	697b      	ldr	r3, [r7, #20]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bdb0      	pop	{r4, r5, r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	08011258 	.word	0x08011258
 800b3c4:	08011960 	.word	0x08011960
 800b3c8:	080112ac 	.word	0x080112ac

0800b3cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b088      	sub	sp, #32
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	461a      	mov	r2, r3
 800b3da:	460b      	mov	r3, r1
 800b3dc:	71fb      	strb	r3, [r7, #7]
 800b3de:	4613      	mov	r3, r2
 800b3e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d106      	bne.n	800b3fa <tcp_output_fill_options+0x2e>
 800b3ec:	4b12      	ldr	r3, [pc, #72]	; (800b438 <tcp_output_fill_options+0x6c>)
 800b3ee:	f240 7256 	movw	r2, #1878	; 0x756
 800b3f2:	4912      	ldr	r1, [pc, #72]	; (800b43c <tcp_output_fill_options+0x70>)
 800b3f4:	4812      	ldr	r0, [pc, #72]	; (800b440 <tcp_output_fill_options+0x74>)
 800b3f6:	f003 fcb7 	bl	800ed68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	3314      	adds	r3, #20
 800b404:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b406:	8bfb      	ldrh	r3, [r7, #30]
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	461a      	mov	r2, r3
 800b40c:	79fb      	ldrb	r3, [r7, #7]
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	f003 0304 	and.w	r3, r3, #4
 800b414:	4413      	add	r3, r2
 800b416:	3314      	adds	r3, #20
 800b418:	69ba      	ldr	r2, [r7, #24]
 800b41a:	4413      	add	r3, r2
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d006      	beq.n	800b430 <tcp_output_fill_options+0x64>
 800b422:	4b05      	ldr	r3, [pc, #20]	; (800b438 <tcp_output_fill_options+0x6c>)
 800b424:	f240 7275 	movw	r2, #1909	; 0x775
 800b428:	4906      	ldr	r1, [pc, #24]	; (800b444 <tcp_output_fill_options+0x78>)
 800b42a:	4805      	ldr	r0, [pc, #20]	; (800b440 <tcp_output_fill_options+0x74>)
 800b42c:	f003 fc9c 	bl	800ed68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b430:	bf00      	nop
 800b432:	3720      	adds	r7, #32
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	08011258 	.word	0x08011258
 800b43c:	08011988 	.word	0x08011988
 800b440:	080112ac 	.word	0x080112ac
 800b444:	08011880 	.word	0x08011880

0800b448 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b08a      	sub	sp, #40	; 0x28
 800b44c:	af04      	add	r7, sp, #16
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d106      	bne.n	800b46a <tcp_output_control_segment+0x22>
 800b45c:	4b1c      	ldr	r3, [pc, #112]	; (800b4d0 <tcp_output_control_segment+0x88>)
 800b45e:	f240 7287 	movw	r2, #1927	; 0x787
 800b462:	491c      	ldr	r1, [pc, #112]	; (800b4d4 <tcp_output_control_segment+0x8c>)
 800b464:	481c      	ldr	r0, [pc, #112]	; (800b4d8 <tcp_output_control_segment+0x90>)
 800b466:	f003 fc7f 	bl	800ed68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	6879      	ldr	r1, [r7, #4]
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f7fe ff40 	bl	800a2f4 <tcp_route>
 800b474:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d102      	bne.n	800b482 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b47c:	23fc      	movs	r3, #252	; 0xfc
 800b47e:	75fb      	strb	r3, [r7, #23]
 800b480:	e01c      	b.n	800b4bc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d006      	beq.n	800b496 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	7adb      	ldrb	r3, [r3, #11]
 800b48c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	7a9b      	ldrb	r3, [r3, #10]
 800b492:	757b      	strb	r3, [r7, #21]
 800b494:	e003      	b.n	800b49e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b496:	23ff      	movs	r3, #255	; 0xff
 800b498:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b49e:	7dba      	ldrb	r2, [r7, #22]
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	9302      	str	r3, [sp, #8]
 800b4a4:	2306      	movs	r3, #6
 800b4a6:	9301      	str	r3, [sp, #4]
 800b4a8:	7d7b      	ldrb	r3, [r7, #21]
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	6879      	ldr	r1, [r7, #4]
 800b4b2:	68b8      	ldr	r0, [r7, #8]
 800b4b4:	f002 fb2a 	bl	800db0c <ip4_output_if>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b4bc:	68b8      	ldr	r0, [r7, #8]
 800b4be:	f7fa fdd5 	bl	800606c <pbuf_free>
  return err;
 800b4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	08011258 	.word	0x08011258
 800b4d4:	080119b0 	.word	0x080119b0
 800b4d8:	080112ac 	.word	0x080112ac

0800b4dc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b4dc:	b590      	push	{r4, r7, lr}
 800b4de:	b08b      	sub	sp, #44	; 0x2c
 800b4e0:	af04      	add	r7, sp, #16
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
 800b4e8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d106      	bne.n	800b4fe <tcp_rst+0x22>
 800b4f0:	4b1f      	ldr	r3, [pc, #124]	; (800b570 <tcp_rst+0x94>)
 800b4f2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b4f6:	491f      	ldr	r1, [pc, #124]	; (800b574 <tcp_rst+0x98>)
 800b4f8:	481f      	ldr	r0, [pc, #124]	; (800b578 <tcp_rst+0x9c>)
 800b4fa:	f003 fc35 	bl	800ed68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b500:	2b00      	cmp	r3, #0
 800b502:	d106      	bne.n	800b512 <tcp_rst+0x36>
 800b504:	4b1a      	ldr	r3, [pc, #104]	; (800b570 <tcp_rst+0x94>)
 800b506:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b50a:	491c      	ldr	r1, [pc, #112]	; (800b57c <tcp_rst+0xa0>)
 800b50c:	481a      	ldr	r0, [pc, #104]	; (800b578 <tcp_rst+0x9c>)
 800b50e:	f003 fc2b 	bl	800ed68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b512:	2300      	movs	r3, #0
 800b514:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b516:	f246 0308 	movw	r3, #24584	; 0x6008
 800b51a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b51c:	7dfb      	ldrb	r3, [r7, #23]
 800b51e:	b29c      	uxth	r4, r3
 800b520:	68b8      	ldr	r0, [r7, #8]
 800b522:	f7f9 fa5a 	bl	80049da <lwip_htonl>
 800b526:	4602      	mov	r2, r0
 800b528:	8abb      	ldrh	r3, [r7, #20]
 800b52a:	9303      	str	r3, [sp, #12]
 800b52c:	2314      	movs	r3, #20
 800b52e:	9302      	str	r3, [sp, #8]
 800b530:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b532:	9301      	str	r3, [sp, #4]
 800b534:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	4613      	mov	r3, r2
 800b53a:	2200      	movs	r2, #0
 800b53c:	4621      	mov	r1, r4
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff fe94 	bl	800b26c <tcp_output_alloc_header_common>
 800b544:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00c      	beq.n	800b566 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b54c:	7dfb      	ldrb	r3, [r7, #23]
 800b54e:	2200      	movs	r2, #0
 800b550:	6939      	ldr	r1, [r7, #16]
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f7ff ff3a 	bl	800b3cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	6939      	ldr	r1, [r7, #16]
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f7ff ff72 	bl	800b448 <tcp_output_control_segment>
 800b564:	e000      	b.n	800b568 <tcp_rst+0x8c>
    return;
 800b566:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b568:	371c      	adds	r7, #28
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd90      	pop	{r4, r7, pc}
 800b56e:	bf00      	nop
 800b570:	08011258 	.word	0x08011258
 800b574:	080119dc 	.word	0x080119dc
 800b578:	080112ac 	.word	0x080112ac
 800b57c:	080119f8 	.word	0x080119f8

0800b580 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b580:	b590      	push	{r4, r7, lr}
 800b582:	b087      	sub	sp, #28
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b588:	2300      	movs	r3, #0
 800b58a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d106      	bne.n	800b5a4 <tcp_send_empty_ack+0x24>
 800b596:	4b28      	ldr	r3, [pc, #160]	; (800b638 <tcp_send_empty_ack+0xb8>)
 800b598:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b59c:	4927      	ldr	r1, [pc, #156]	; (800b63c <tcp_send_empty_ack+0xbc>)
 800b59e:	4828      	ldr	r0, [pc, #160]	; (800b640 <tcp_send_empty_ack+0xc0>)
 800b5a0:	f003 fbe2 	bl	800ed68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	f003 0304 	and.w	r3, r3, #4
 800b5ae:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b5b0:	7d7b      	ldrb	r3, [r7, #21]
 800b5b2:	b29c      	uxth	r4, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7f9 fa0e 	bl	80049da <lwip_htonl>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7ff fec3 	bl	800b350 <tcp_output_alloc_header>
 800b5ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d109      	bne.n	800b5e6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	8b5b      	ldrh	r3, [r3, #26]
 800b5d6:	f043 0303 	orr.w	r3, r3, #3
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b5e0:	f06f 0301 	mvn.w	r3, #1
 800b5e4:	e023      	b.n	800b62e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b5e6:	7dbb      	ldrb	r3, [r7, #22]
 800b5e8:	7dfa      	ldrb	r2, [r7, #23]
 800b5ea:	6939      	ldr	r1, [r7, #16]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff feed 	bl	800b3cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	6939      	ldr	r1, [r7, #16]
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7ff ff24 	bl	800b448 <tcp_output_control_segment>
 800b600:	4603      	mov	r3, r0
 800b602:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d007      	beq.n	800b61c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	8b5b      	ldrh	r3, [r3, #26]
 800b610:	f043 0303 	orr.w	r3, r3, #3
 800b614:	b29a      	uxth	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	835a      	strh	r2, [r3, #26]
 800b61a:	e006      	b.n	800b62a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	8b5b      	ldrh	r3, [r3, #26]
 800b620:	f023 0303 	bic.w	r3, r3, #3
 800b624:	b29a      	uxth	r2, r3
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	371c      	adds	r7, #28
 800b632:	46bd      	mov	sp, r7
 800b634:	bd90      	pop	{r4, r7, pc}
 800b636:	bf00      	nop
 800b638:	08011258 	.word	0x08011258
 800b63c:	08011a14 	.word	0x08011a14
 800b640:	080112ac 	.word	0x080112ac

0800b644 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b644:	b590      	push	{r4, r7, lr}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b64c:	2300      	movs	r3, #0
 800b64e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d106      	bne.n	800b664 <tcp_keepalive+0x20>
 800b656:	4b18      	ldr	r3, [pc, #96]	; (800b6b8 <tcp_keepalive+0x74>)
 800b658:	f640 0224 	movw	r2, #2084	; 0x824
 800b65c:	4917      	ldr	r1, [pc, #92]	; (800b6bc <tcp_keepalive+0x78>)
 800b65e:	4818      	ldr	r0, [pc, #96]	; (800b6c0 <tcp_keepalive+0x7c>)
 800b660:	f003 fb82 	bl	800ed68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	b29c      	uxth	r4, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b66c:	3b01      	subs	r3, #1
 800b66e:	4618      	mov	r0, r3
 800b670:	f7f9 f9b3 	bl	80049da <lwip_htonl>
 800b674:	4603      	mov	r3, r0
 800b676:	2200      	movs	r2, #0
 800b678:	4621      	mov	r1, r4
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fe68 	bl	800b350 <tcp_output_alloc_header>
 800b680:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d102      	bne.n	800b68e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b688:	f04f 33ff 	mov.w	r3, #4294967295
 800b68c:	e010      	b.n	800b6b0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b68e:	7dfb      	ldrb	r3, [r7, #23]
 800b690:	2200      	movs	r2, #0
 800b692:	6939      	ldr	r1, [r7, #16]
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7ff fe99 	bl	800b3cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	6939      	ldr	r1, [r7, #16]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f7ff fed0 	bl	800b448 <tcp_output_control_segment>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b6ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	371c      	adds	r7, #28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd90      	pop	{r4, r7, pc}
 800b6b8:	08011258 	.word	0x08011258
 800b6bc:	08011a34 	.word	0x08011a34
 800b6c0:	080112ac 	.word	0x080112ac

0800b6c4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b6c4:	b590      	push	{r4, r7, lr}
 800b6c6:	b08b      	sub	sp, #44	; 0x2c
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d106      	bne.n	800b6e6 <tcp_zero_window_probe+0x22>
 800b6d8:	4b4c      	ldr	r3, [pc, #304]	; (800b80c <tcp_zero_window_probe+0x148>)
 800b6da:	f640 024f 	movw	r2, #2127	; 0x84f
 800b6de:	494c      	ldr	r1, [pc, #304]	; (800b810 <tcp_zero_window_probe+0x14c>)
 800b6e0:	484c      	ldr	r0, [pc, #304]	; (800b814 <tcp_zero_window_probe+0x150>)
 800b6e2:	f003 fb41 	bl	800ed68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ea:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b6ec:	6a3b      	ldr	r3, [r7, #32]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d101      	bne.n	800b6f6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e086      	b.n	800b804 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b6fc:	2bff      	cmp	r3, #255	; 0xff
 800b6fe:	d007      	beq.n	800b710 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800b706:	3301      	adds	r3, #1
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b710:	6a3b      	ldr	r3, [r7, #32]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	899b      	ldrh	r3, [r3, #12]
 800b716:	b29b      	uxth	r3, r3
 800b718:	4618      	mov	r0, r3
 800b71a:	f7f9 f949 	bl	80049b0 <lwip_htons>
 800b71e:	4603      	mov	r3, r0
 800b720:	b2db      	uxtb	r3, r3
 800b722:	f003 0301 	and.w	r3, r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	d005      	beq.n	800b736 <tcp_zero_window_probe+0x72>
 800b72a:	6a3b      	ldr	r3, [r7, #32]
 800b72c:	891b      	ldrh	r3, [r3, #8]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d101      	bne.n	800b736 <tcp_zero_window_probe+0x72>
 800b732:	2301      	movs	r3, #1
 800b734:	e000      	b.n	800b738 <tcp_zero_window_probe+0x74>
 800b736:	2300      	movs	r3, #0
 800b738:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b73a:	7ffb      	ldrb	r3, [r7, #31]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	bf0c      	ite	eq
 800b740:	2301      	moveq	r3, #1
 800b742:	2300      	movne	r3, #0
 800b744:	b2db      	uxtb	r3, r3
 800b746:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b74c:	b299      	uxth	r1, r3
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	8bba      	ldrh	r2, [r7, #28]
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7ff fdfa 	bl	800b350 <tcp_output_alloc_header>
 800b75c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d102      	bne.n	800b76a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b764:	f04f 33ff 	mov.w	r3, #4294967295
 800b768:	e04c      	b.n	800b804 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b770:	7ffb      	ldrb	r3, [r7, #31]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d011      	beq.n	800b79a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	899b      	ldrh	r3, [r3, #12]
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	b21b      	sxth	r3, r3
 800b77e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b782:	b21c      	sxth	r4, r3
 800b784:	2011      	movs	r0, #17
 800b786:	f7f9 f913 	bl	80049b0 <lwip_htons>
 800b78a:	4603      	mov	r3, r0
 800b78c:	b21b      	sxth	r3, r3
 800b78e:	4323      	orrs	r3, r4
 800b790:	b21b      	sxth	r3, r3
 800b792:	b29a      	uxth	r2, r3
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	819a      	strh	r2, [r3, #12]
 800b798:	e010      	b.n	800b7bc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	3314      	adds	r3, #20
 800b7a0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b7a2:	6a3b      	ldr	r3, [r7, #32]
 800b7a4:	6858      	ldr	r0, [r3, #4]
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	891a      	ldrh	r2, [r3, #8]
 800b7ac:	6a3b      	ldr	r3, [r7, #32]
 800b7ae:	891b      	ldrh	r3, [r3, #8]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	6939      	ldr	r1, [r7, #16]
 800b7b8:	f7fa fe52 	bl	8006460 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b7bc:	6a3b      	ldr	r3, [r7, #32]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7f9 f909 	bl	80049da <lwip_htonl>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	da02      	bge.n	800b7e0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b7e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	69b9      	ldr	r1, [r7, #24]
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f7ff fdef 	bl	800b3cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	3304      	adds	r3, #4
 800b7f4:	69b9      	ldr	r1, [r7, #24]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff fe26 	bl	800b448 <tcp_output_control_segment>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b800:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b804:	4618      	mov	r0, r3
 800b806:	372c      	adds	r7, #44	; 0x2c
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd90      	pop	{r4, r7, pc}
 800b80c:	08011258 	.word	0x08011258
 800b810:	08011a50 	.word	0x08011a50
 800b814:	080112ac 	.word	0x080112ac

0800b818 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b820:	f7fa ff0c 	bl	800663c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b824:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <tcpip_tcp_timer+0x38>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d103      	bne.n	800b834 <tcpip_tcp_timer+0x1c>
 800b82c:	4b09      	ldr	r3, [pc, #36]	; (800b854 <tcpip_tcp_timer+0x3c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d005      	beq.n	800b840 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b834:	2200      	movs	r2, #0
 800b836:	4908      	ldr	r1, [pc, #32]	; (800b858 <tcpip_tcp_timer+0x40>)
 800b838:	20fa      	movs	r0, #250	; 0xfa
 800b83a:	f000 f8f3 	bl	800ba24 <sys_timeout>
 800b83e:	e003      	b.n	800b848 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b840:	4b06      	ldr	r3, [pc, #24]	; (800b85c <tcpip_tcp_timer+0x44>)
 800b842:	2200      	movs	r2, #0
 800b844:	601a      	str	r2, [r3, #0]
  }
}
 800b846:	bf00      	nop
 800b848:	bf00      	nop
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	20008778 	.word	0x20008778
 800b854:	2000877c 	.word	0x2000877c
 800b858:	0800b819 	.word	0x0800b819
 800b85c:	200087c4 	.word	0x200087c4

0800b860 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b864:	4b0a      	ldr	r3, [pc, #40]	; (800b890 <tcp_timer_needed+0x30>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10f      	bne.n	800b88c <tcp_timer_needed+0x2c>
 800b86c:	4b09      	ldr	r3, [pc, #36]	; (800b894 <tcp_timer_needed+0x34>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d103      	bne.n	800b87c <tcp_timer_needed+0x1c>
 800b874:	4b08      	ldr	r3, [pc, #32]	; (800b898 <tcp_timer_needed+0x38>)
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d007      	beq.n	800b88c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b87c:	4b04      	ldr	r3, [pc, #16]	; (800b890 <tcp_timer_needed+0x30>)
 800b87e:	2201      	movs	r2, #1
 800b880:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b882:	2200      	movs	r2, #0
 800b884:	4905      	ldr	r1, [pc, #20]	; (800b89c <tcp_timer_needed+0x3c>)
 800b886:	20fa      	movs	r0, #250	; 0xfa
 800b888:	f000 f8cc 	bl	800ba24 <sys_timeout>
  }
}
 800b88c:	bf00      	nop
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	200087c4 	.word	0x200087c4
 800b894:	20008778 	.word	0x20008778
 800b898:	2000877c 	.word	0x2000877c
 800b89c:	0800b819 	.word	0x0800b819

0800b8a0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b8ac:	2006      	movs	r0, #6
 800b8ae:	f7f9 fcf7 	bl	80052a0 <memp_malloc>
 800b8b2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d109      	bne.n	800b8ce <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d151      	bne.n	800b964 <sys_timeout_abs+0xc4>
 800b8c0:	4b2a      	ldr	r3, [pc, #168]	; (800b96c <sys_timeout_abs+0xcc>)
 800b8c2:	22be      	movs	r2, #190	; 0xbe
 800b8c4:	492a      	ldr	r1, [pc, #168]	; (800b970 <sys_timeout_abs+0xd0>)
 800b8c6:	482b      	ldr	r0, [pc, #172]	; (800b974 <sys_timeout_abs+0xd4>)
 800b8c8:	f003 fa4e 	bl	800ed68 <iprintf>
    return;
 800b8cc:	e04a      	b.n	800b964 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b8e6:	4b24      	ldr	r3, [pc, #144]	; (800b978 <sys_timeout_abs+0xd8>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d103      	bne.n	800b8f6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b8ee:	4a22      	ldr	r2, [pc, #136]	; (800b978 <sys_timeout_abs+0xd8>)
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	6013      	str	r3, [r2, #0]
    return;
 800b8f4:	e037      	b.n	800b966 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	4b1f      	ldr	r3, [pc, #124]	; (800b978 <sys_timeout_abs+0xd8>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	1ad3      	subs	r3, r2, r3
 800b902:	0fdb      	lsrs	r3, r3, #31
 800b904:	f003 0301 	and.w	r3, r3, #1
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d007      	beq.n	800b91e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b90e:	4b1a      	ldr	r3, [pc, #104]	; (800b978 <sys_timeout_abs+0xd8>)
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b916:	4a18      	ldr	r2, [pc, #96]	; (800b978 <sys_timeout_abs+0xd8>)
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6013      	str	r3, [r2, #0]
 800b91c:	e023      	b.n	800b966 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b91e:	4b16      	ldr	r3, [pc, #88]	; (800b978 <sys_timeout_abs+0xd8>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e01a      	b.n	800b95c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d00b      	beq.n	800b946 <sys_timeout_abs+0xa6>
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	685a      	ldr	r2, [r3, #4]
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	0fdb      	lsrs	r3, r3, #31
 800b93c:	f003 0301 	and.w	r3, r3, #1
 800b940:	b2db      	uxtb	r3, r3
 800b942:	2b00      	cmp	r3, #0
 800b944:	d007      	beq.n	800b956 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	693a      	ldr	r2, [r7, #16]
 800b952:	601a      	str	r2, [r3, #0]
        break;
 800b954:	e007      	b.n	800b966 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b956:	697b      	ldr	r3, [r7, #20]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	617b      	str	r3, [r7, #20]
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1e1      	bne.n	800b926 <sys_timeout_abs+0x86>
 800b962:	e000      	b.n	800b966 <sys_timeout_abs+0xc6>
    return;
 800b964:	bf00      	nop
      }
    }
  }
}
 800b966:	3718      	adds	r7, #24
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}
 800b96c:	08011a74 	.word	0x08011a74
 800b970:	08011aa8 	.word	0x08011aa8
 800b974:	08011ae8 	.word	0x08011ae8
 800b978:	200087bc 	.word	0x200087bc

0800b97c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	4798      	blx	r3

  now = sys_now();
 800b98e:	f7f8 fdf7 	bl	8004580 <sys_now>
 800b992:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	4b0f      	ldr	r3, [pc, #60]	; (800b9d8 <lwip_cyclic_timer+0x5c>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4413      	add	r3, r2
 800b99e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	1ad3      	subs	r3, r2, r3
 800b9a6:	0fdb      	lsrs	r3, r3, #31
 800b9a8:	f003 0301 	and.w	r3, r3, #1
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d009      	beq.n	800b9c6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	4907      	ldr	r1, [pc, #28]	; (800b9dc <lwip_cyclic_timer+0x60>)
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff ff6e 	bl	800b8a0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b9c4:	e004      	b.n	800b9d0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	4904      	ldr	r1, [pc, #16]	; (800b9dc <lwip_cyclic_timer+0x60>)
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff ff68 	bl	800b8a0 <sys_timeout_abs>
}
 800b9d0:	bf00      	nop
 800b9d2:	3718      	adds	r7, #24
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	200087c0 	.word	0x200087c0
 800b9dc:	0800b97d 	.word	0x0800b97d

0800b9e0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	607b      	str	r3, [r7, #4]
 800b9ea:	e00e      	b.n	800ba0a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b9ec:	4a0b      	ldr	r2, [pc, #44]	; (800ba1c <sys_timeouts_init+0x3c>)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	00db      	lsls	r3, r3, #3
 800b9f8:	4a08      	ldr	r2, [pc, #32]	; (800ba1c <sys_timeouts_init+0x3c>)
 800b9fa:	4413      	add	r3, r2
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	4908      	ldr	r1, [pc, #32]	; (800ba20 <sys_timeouts_init+0x40>)
 800ba00:	f000 f810 	bl	800ba24 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	3301      	adds	r3, #1
 800ba08:	607b      	str	r3, [r7, #4]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d9ed      	bls.n	800b9ec <sys_timeouts_init+0xc>
  }
}
 800ba10:	bf00      	nop
 800ba12:	bf00      	nop
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	08012660 	.word	0x08012660
 800ba20:	0800b97d 	.word	0x0800b97d

0800ba24 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba36:	d306      	bcc.n	800ba46 <sys_timeout+0x22>
 800ba38:	4b0a      	ldr	r3, [pc, #40]	; (800ba64 <sys_timeout+0x40>)
 800ba3a:	f240 1229 	movw	r2, #297	; 0x129
 800ba3e:	490a      	ldr	r1, [pc, #40]	; (800ba68 <sys_timeout+0x44>)
 800ba40:	480a      	ldr	r0, [pc, #40]	; (800ba6c <sys_timeout+0x48>)
 800ba42:	f003 f991 	bl	800ed68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ba46:	f7f8 fd9b 	bl	8004580 <sys_now>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4413      	add	r3, r2
 800ba50:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	68b9      	ldr	r1, [r7, #8]
 800ba56:	6978      	ldr	r0, [r7, #20]
 800ba58:	f7ff ff22 	bl	800b8a0 <sys_timeout_abs>
#endif
}
 800ba5c:	bf00      	nop
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	08011a74 	.word	0x08011a74
 800ba68:	08011b10 	.word	0x08011b10
 800ba6c:	08011ae8 	.word	0x08011ae8

0800ba70 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ba76:	f7f8 fd83 	bl	8004580 <sys_now>
 800ba7a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ba7c:	4b1a      	ldr	r3, [pc, #104]	; (800bae8 <sys_check_timeouts+0x78>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <sys_check_timeouts+0x1a>
 800ba86:	f7f9 ffb7 	bl	80059f8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ba8a:	4b18      	ldr	r3, [pc, #96]	; (800baec <sys_check_timeouts+0x7c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d022      	beq.n	800badc <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	0fdb      	lsrs	r3, r3, #31
 800baa0:	f003 0301 	and.w	r3, r3, #1
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d11a      	bne.n	800bae0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	4a0f      	ldr	r2, [pc, #60]	; (800baec <sys_check_timeouts+0x7c>)
 800bab0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	689b      	ldr	r3, [r3, #8]
 800bab6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	4a0b      	ldr	r2, [pc, #44]	; (800baf0 <sys_check_timeouts+0x80>)
 800bac4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bac6:	68b9      	ldr	r1, [r7, #8]
 800bac8:	2006      	movs	r0, #6
 800baca:	f7f9 fc59 	bl	8005380 <memp_free>
    if (handler != NULL) {
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d0d3      	beq.n	800ba7c <sys_check_timeouts+0xc>
      handler(arg);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6838      	ldr	r0, [r7, #0]
 800bad8:	4798      	blx	r3
  do {
 800bada:	e7cf      	b.n	800ba7c <sys_check_timeouts+0xc>
      return;
 800badc:	bf00      	nop
 800bade:	e000      	b.n	800bae2 <sys_check_timeouts+0x72>
      return;
 800bae0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	20008769 	.word	0x20008769
 800baec:	200087bc 	.word	0x200087bc
 800baf0:	200087c0 	.word	0x200087c0

0800baf4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800baf8:	f003 f836 	bl	800eb68 <rand>
 800bafc:	4603      	mov	r3, r0
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	4b01      	ldr	r3, [pc, #4]	; (800bb14 <udp_init+0x20>)
 800bb0e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bb10:	bf00      	nop
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	20000028 	.word	0x20000028

0800bb18 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800bb22:	4b17      	ldr	r3, [pc, #92]	; (800bb80 <udp_new_port+0x68>)
 800bb24:	881b      	ldrh	r3, [r3, #0]
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	b291      	uxth	r1, r2
 800bb2a:	4a15      	ldr	r2, [pc, #84]	; (800bb80 <udp_new_port+0x68>)
 800bb2c:	8011      	strh	r1, [r2, #0]
 800bb2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d103      	bne.n	800bb3e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800bb36:	4b12      	ldr	r3, [pc, #72]	; (800bb80 <udp_new_port+0x68>)
 800bb38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800bb3c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb3e:	4b11      	ldr	r3, [pc, #68]	; (800bb84 <udp_new_port+0x6c>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	603b      	str	r3, [r7, #0]
 800bb44:	e011      	b.n	800bb6a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	8a5a      	ldrh	r2, [r3, #18]
 800bb4a:	4b0d      	ldr	r3, [pc, #52]	; (800bb80 <udp_new_port+0x68>)
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d108      	bne.n	800bb64 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800bb52:	88fb      	ldrh	r3, [r7, #6]
 800bb54:	3301      	adds	r3, #1
 800bb56:	80fb      	strh	r3, [r7, #6]
 800bb58:	88fb      	ldrh	r3, [r7, #6]
 800bb5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb5e:	d3e0      	bcc.n	800bb22 <udp_new_port+0xa>
        return 0;
 800bb60:	2300      	movs	r3, #0
 800bb62:	e007      	b.n	800bb74 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	603b      	str	r3, [r7, #0]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1ea      	bne.n	800bb46 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800bb70:	4b03      	ldr	r3, [pc, #12]	; (800bb80 <udp_new_port+0x68>)
 800bb72:	881b      	ldrh	r3, [r3, #0]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr
 800bb80:	20000028 	.word	0x20000028
 800bb84:	200087c8 	.word	0x200087c8

0800bb88 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	4613      	mov	r3, r2
 800bb94:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d105      	bne.n	800bba8 <udp_input_local_match+0x20>
 800bb9c:	4b27      	ldr	r3, [pc, #156]	; (800bc3c <udp_input_local_match+0xb4>)
 800bb9e:	2287      	movs	r2, #135	; 0x87
 800bba0:	4927      	ldr	r1, [pc, #156]	; (800bc40 <udp_input_local_match+0xb8>)
 800bba2:	4828      	ldr	r0, [pc, #160]	; (800bc44 <udp_input_local_match+0xbc>)
 800bba4:	f003 f8e0 	bl	800ed68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d105      	bne.n	800bbba <udp_input_local_match+0x32>
 800bbae:	4b23      	ldr	r3, [pc, #140]	; (800bc3c <udp_input_local_match+0xb4>)
 800bbb0:	2288      	movs	r2, #136	; 0x88
 800bbb2:	4925      	ldr	r1, [pc, #148]	; (800bc48 <udp_input_local_match+0xc0>)
 800bbb4:	4823      	ldr	r0, [pc, #140]	; (800bc44 <udp_input_local_match+0xbc>)
 800bbb6:	f003 f8d7 	bl	800ed68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	7a1b      	ldrb	r3, [r3, #8]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00b      	beq.n	800bbda <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	7a1a      	ldrb	r2, [r3, #8]
 800bbc6:	4b21      	ldr	r3, [pc, #132]	; (800bc4c <udp_input_local_match+0xc4>)
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbce:	3301      	adds	r3, #1
 800bbd0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d001      	beq.n	800bbda <udp_input_local_match+0x52>
    return 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e02b      	b.n	800bc32 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bbda:	79fb      	ldrb	r3, [r7, #7]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d018      	beq.n	800bc12 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d013      	beq.n	800bc0e <udp_input_local_match+0x86>
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00f      	beq.n	800bc0e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bbee:	4b17      	ldr	r3, [pc, #92]	; (800bc4c <udp_input_local_match+0xc4>)
 800bbf0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf6:	d00a      	beq.n	800bc0e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	4b13      	ldr	r3, [pc, #76]	; (800bc4c <udp_input_local_match+0xc4>)
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	405a      	eors	r2, r3
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	3308      	adds	r3, #8
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d110      	bne.n	800bc30 <udp_input_local_match+0xa8>
          return 1;
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e00f      	b.n	800bc32 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d009      	beq.n	800bc2c <udp_input_local_match+0xa4>
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d005      	beq.n	800bc2c <udp_input_local_match+0xa4>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	4b09      	ldr	r3, [pc, #36]	; (800bc4c <udp_input_local_match+0xc4>)
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d101      	bne.n	800bc30 <udp_input_local_match+0xa8>
        return 1;
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e000      	b.n	800bc32 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	08011b5c 	.word	0x08011b5c
 800bc40:	08011b8c 	.word	0x08011b8c
 800bc44:	08011bb0 	.word	0x08011bb0
 800bc48:	08011bd8 	.word	0x08011bd8
 800bc4c:	200051fc 	.word	0x200051fc

0800bc50 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bc50:	b590      	push	{r4, r7, lr}
 800bc52:	b08d      	sub	sp, #52	; 0x34
 800bc54:	af02      	add	r7, sp, #8
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d105      	bne.n	800bc70 <udp_input+0x20>
 800bc64:	4b7c      	ldr	r3, [pc, #496]	; (800be58 <udp_input+0x208>)
 800bc66:	22cf      	movs	r2, #207	; 0xcf
 800bc68:	497c      	ldr	r1, [pc, #496]	; (800be5c <udp_input+0x20c>)
 800bc6a:	487d      	ldr	r0, [pc, #500]	; (800be60 <udp_input+0x210>)
 800bc6c:	f003 f87c 	bl	800ed68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d105      	bne.n	800bc82 <udp_input+0x32>
 800bc76:	4b78      	ldr	r3, [pc, #480]	; (800be58 <udp_input+0x208>)
 800bc78:	22d0      	movs	r2, #208	; 0xd0
 800bc7a:	497a      	ldr	r1, [pc, #488]	; (800be64 <udp_input+0x214>)
 800bc7c:	4878      	ldr	r0, [pc, #480]	; (800be60 <udp_input+0x210>)
 800bc7e:	f003 f873 	bl	800ed68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	895b      	ldrh	r3, [r3, #10]
 800bc86:	2b07      	cmp	r3, #7
 800bc88:	d803      	bhi.n	800bc92 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f7fa f9ee 	bl	800606c <pbuf_free>
    goto end;
 800bc90:	e0de      	b.n	800be50 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bc98:	4b73      	ldr	r3, [pc, #460]	; (800be68 <udp_input+0x218>)
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	4a72      	ldr	r2, [pc, #456]	; (800be68 <udp_input+0x218>)
 800bc9e:	6812      	ldr	r2, [r2, #0]
 800bca0:	4611      	mov	r1, r2
 800bca2:	4618      	mov	r0, r3
 800bca4:	f002 f80a 	bl	800dcbc <ip4_addr_isbroadcast_u32>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7f8 fe7c 	bl	80049b0 <lwip_htons>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	885b      	ldrh	r3, [r3, #2]
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7f8 fe74 	bl	80049b0 <lwip_htons>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bccc:	2300      	movs	r3, #0
 800bcce:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcd8:	4b64      	ldr	r3, [pc, #400]	; (800be6c <udp_input+0x21c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	627b      	str	r3, [r7, #36]	; 0x24
 800bcde:	e054      	b.n	800bd8a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bce2:	8a5b      	ldrh	r3, [r3, #18]
 800bce4:	89fa      	ldrh	r2, [r7, #14]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d14a      	bne.n	800bd80 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800bcea:	7cfb      	ldrb	r3, [r7, #19]
 800bcec:	461a      	mov	r2, r3
 800bcee:	6839      	ldr	r1, [r7, #0]
 800bcf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcf2:	f7ff ff49 	bl	800bb88 <udp_input_local_match>
 800bcf6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d041      	beq.n	800bd80 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	7c1b      	ldrb	r3, [r3, #16]
 800bd00:	f003 0304 	and.w	r3, r3, #4
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d11d      	bne.n	800bd44 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d102      	bne.n	800bd14 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd10:	61fb      	str	r3, [r7, #28]
 800bd12:	e017      	b.n	800bd44 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800bd14:	7cfb      	ldrb	r3, [r7, #19]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d014      	beq.n	800bd44 <udp_input+0xf4>
 800bd1a:	4b53      	ldr	r3, [pc, #332]	; (800be68 <udp_input+0x218>)
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd22:	d10f      	bne.n	800bd44 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d008      	beq.n	800bd44 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d101      	bne.n	800bd44 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	8a9b      	ldrh	r3, [r3, #20]
 800bd48:	8a3a      	ldrh	r2, [r7, #16]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d118      	bne.n	800bd80 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd50:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d005      	beq.n	800bd62 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800bd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd58:	685a      	ldr	r2, [r3, #4]
 800bd5a:	4b43      	ldr	r3, [pc, #268]	; (800be68 <udp_input+0x218>)
 800bd5c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d10e      	bne.n	800bd80 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800bd62:	6a3b      	ldr	r3, [r7, #32]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d014      	beq.n	800bd92 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800bd70:	4b3e      	ldr	r3, [pc, #248]	; (800be6c <udp_input+0x21c>)
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800bd78:	4a3c      	ldr	r2, [pc, #240]	; (800be6c <udp_input+0x21c>)
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800bd7e:	e008      	b.n	800bd92 <udp_input+0x142>
      }
    }

    prev = pcb;
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	627b      	str	r3, [r7, #36]	; 0x24
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1a7      	bne.n	800bce0 <udp_input+0x90>
 800bd90:	e000      	b.n	800bd94 <udp_input+0x144>
        break;
 800bd92:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d101      	bne.n	800bd9e <udp_input+0x14e>
    pcb = uncon_pcb;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d002      	beq.n	800bdaa <udp_input+0x15a>
    for_us = 1;
 800bda4:	2301      	movs	r3, #1
 800bda6:	76fb      	strb	r3, [r7, #27]
 800bda8:	e00a      	b.n	800bdc0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	3304      	adds	r3, #4
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	4b2d      	ldr	r3, [pc, #180]	; (800be68 <udp_input+0x218>)
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	bf0c      	ite	eq
 800bdb8:	2301      	moveq	r3, #1
 800bdba:	2300      	movne	r3, #0
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800bdc0:	7efb      	ldrb	r3, [r7, #27]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d041      	beq.n	800be4a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bdc6:	2108      	movs	r1, #8
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f7fa f8c9 	bl	8005f60 <pbuf_remove_header>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00a      	beq.n	800bdea <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bdd4:	4b20      	ldr	r3, [pc, #128]	; (800be58 <udp_input+0x208>)
 800bdd6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bdda:	4925      	ldr	r1, [pc, #148]	; (800be70 <udp_input+0x220>)
 800bddc:	4820      	ldr	r0, [pc, #128]	; (800be60 <udp_input+0x210>)
 800bdde:	f002 ffc3 	bl	800ed68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f7fa f942 	bl	800606c <pbuf_free>
      goto end;
 800bde8:	e032      	b.n	800be50 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d012      	beq.n	800be16 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00a      	beq.n	800be0e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	699c      	ldr	r4, [r3, #24]
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	69d8      	ldr	r0, [r3, #28]
 800be00:	8a3b      	ldrh	r3, [r7, #16]
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	4b1b      	ldr	r3, [pc, #108]	; (800be74 <udp_input+0x224>)
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be0a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800be0c:	e021      	b.n	800be52 <udp_input+0x202>
        pbuf_free(p);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7fa f92c 	bl	800606c <pbuf_free>
        goto end;
 800be14:	e01c      	b.n	800be50 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800be16:	7cfb      	ldrb	r3, [r7, #19]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d112      	bne.n	800be42 <udp_input+0x1f2>
 800be1c:	4b12      	ldr	r3, [pc, #72]	; (800be68 <udp_input+0x218>)
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be24:	2be0      	cmp	r3, #224	; 0xe0
 800be26:	d00c      	beq.n	800be42 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800be28:	4b0f      	ldr	r3, [pc, #60]	; (800be68 <udp_input+0x218>)
 800be2a:	899b      	ldrh	r3, [r3, #12]
 800be2c:	3308      	adds	r3, #8
 800be2e:	b29b      	uxth	r3, r3
 800be30:	b21b      	sxth	r3, r3
 800be32:	4619      	mov	r1, r3
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7fa f906 	bl	8006046 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800be3a:	2103      	movs	r1, #3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f001 fc1d 	bl	800d67c <icmp_dest_unreach>
      pbuf_free(p);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7fa f912 	bl	800606c <pbuf_free>
  return;
 800be48:	e003      	b.n	800be52 <udp_input+0x202>
    pbuf_free(p);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7fa f90e 	bl	800606c <pbuf_free>
  return;
 800be50:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800be52:	372c      	adds	r7, #44	; 0x2c
 800be54:	46bd      	mov	sp, r7
 800be56:	bd90      	pop	{r4, r7, pc}
 800be58:	08011b5c 	.word	0x08011b5c
 800be5c:	08011c00 	.word	0x08011c00
 800be60:	08011bb0 	.word	0x08011bb0
 800be64:	08011c18 	.word	0x08011c18
 800be68:	200051fc 	.word	0x200051fc
 800be6c:	200087c8 	.word	0x200087c8
 800be70:	08011c34 	.word	0x08011c34
 800be74:	2000520c 	.word	0x2000520c

0800be78 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d109      	bne.n	800be9c <udp_send+0x24>
 800be88:	4b11      	ldr	r3, [pc, #68]	; (800bed0 <udp_send+0x58>)
 800be8a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800be8e:	4911      	ldr	r1, [pc, #68]	; (800bed4 <udp_send+0x5c>)
 800be90:	4811      	ldr	r0, [pc, #68]	; (800bed8 <udp_send+0x60>)
 800be92:	f002 ff69 	bl	800ed68 <iprintf>
 800be96:	f06f 030f 	mvn.w	r3, #15
 800be9a:	e015      	b.n	800bec8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d109      	bne.n	800beb6 <udp_send+0x3e>
 800bea2:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <udp_send+0x58>)
 800bea4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800bea8:	490c      	ldr	r1, [pc, #48]	; (800bedc <udp_send+0x64>)
 800beaa:	480b      	ldr	r0, [pc, #44]	; (800bed8 <udp_send+0x60>)
 800beac:	f002 ff5c 	bl	800ed68 <iprintf>
 800beb0:	f06f 030f 	mvn.w	r3, #15
 800beb4:	e008      	b.n	800bec8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	1d1a      	adds	r2, r3, #4
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	8a9b      	ldrh	r3, [r3, #20]
 800bebe:	6839      	ldr	r1, [r7, #0]
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f000 f80d 	bl	800bee0 <udp_sendto>
 800bec6:	4603      	mov	r3, r0
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3708      	adds	r7, #8
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	08011b5c 	.word	0x08011b5c
 800bed4:	08011c50 	.word	0x08011c50
 800bed8:	08011bb0 	.word	0x08011bb0
 800bedc:	08011c68 	.word	0x08011c68

0800bee0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b088      	sub	sp, #32
 800bee4:	af02      	add	r7, sp, #8
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	60b9      	str	r1, [r7, #8]
 800beea:	607a      	str	r2, [r7, #4]
 800beec:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d109      	bne.n	800bf08 <udp_sendto+0x28>
 800bef4:	4b23      	ldr	r3, [pc, #140]	; (800bf84 <udp_sendto+0xa4>)
 800bef6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800befa:	4923      	ldr	r1, [pc, #140]	; (800bf88 <udp_sendto+0xa8>)
 800befc:	4823      	ldr	r0, [pc, #140]	; (800bf8c <udp_sendto+0xac>)
 800befe:	f002 ff33 	bl	800ed68 <iprintf>
 800bf02:	f06f 030f 	mvn.w	r3, #15
 800bf06:	e038      	b.n	800bf7a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d109      	bne.n	800bf22 <udp_sendto+0x42>
 800bf0e:	4b1d      	ldr	r3, [pc, #116]	; (800bf84 <udp_sendto+0xa4>)
 800bf10:	f240 2219 	movw	r2, #537	; 0x219
 800bf14:	491e      	ldr	r1, [pc, #120]	; (800bf90 <udp_sendto+0xb0>)
 800bf16:	481d      	ldr	r0, [pc, #116]	; (800bf8c <udp_sendto+0xac>)
 800bf18:	f002 ff26 	bl	800ed68 <iprintf>
 800bf1c:	f06f 030f 	mvn.w	r3, #15
 800bf20:	e02b      	b.n	800bf7a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d109      	bne.n	800bf3c <udp_sendto+0x5c>
 800bf28:	4b16      	ldr	r3, [pc, #88]	; (800bf84 <udp_sendto+0xa4>)
 800bf2a:	f240 221a 	movw	r2, #538	; 0x21a
 800bf2e:	4919      	ldr	r1, [pc, #100]	; (800bf94 <udp_sendto+0xb4>)
 800bf30:	4816      	ldr	r0, [pc, #88]	; (800bf8c <udp_sendto+0xac>)
 800bf32:	f002 ff19 	bl	800ed68 <iprintf>
 800bf36:	f06f 030f 	mvn.w	r3, #15
 800bf3a:	e01e      	b.n	800bf7a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	7a1b      	ldrb	r3, [r3, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d006      	beq.n	800bf52 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	7a1b      	ldrb	r3, [r3, #8]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7f9 fd2f 	bl	80059ac <netif_get_by_index>
 800bf4e:	6178      	str	r0, [r7, #20]
 800bf50:	e003      	b.n	800bf5a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f001 fc1c 	bl	800d790 <ip4_route>
 800bf58:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d102      	bne.n	800bf66 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800bf60:	f06f 0303 	mvn.w	r3, #3
 800bf64:	e009      	b.n	800bf7a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800bf66:	887a      	ldrh	r2, [r7, #2]
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	68b9      	ldr	r1, [r7, #8]
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 f810 	bl	800bf98 <udp_sendto_if>
 800bf78:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3718      	adds	r7, #24
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	08011b5c 	.word	0x08011b5c
 800bf88:	08011c80 	.word	0x08011c80
 800bf8c:	08011bb0 	.word	0x08011bb0
 800bf90:	08011c98 	.word	0x08011c98
 800bf94:	08011cb4 	.word	0x08011cb4

0800bf98 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b088      	sub	sp, #32
 800bf9c:	af02      	add	r7, sp, #8
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
 800bfa4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d109      	bne.n	800bfc0 <udp_sendto_if+0x28>
 800bfac:	4b2e      	ldr	r3, [pc, #184]	; (800c068 <udp_sendto_if+0xd0>)
 800bfae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bfb2:	492e      	ldr	r1, [pc, #184]	; (800c06c <udp_sendto_if+0xd4>)
 800bfb4:	482e      	ldr	r0, [pc, #184]	; (800c070 <udp_sendto_if+0xd8>)
 800bfb6:	f002 fed7 	bl	800ed68 <iprintf>
 800bfba:	f06f 030f 	mvn.w	r3, #15
 800bfbe:	e04f      	b.n	800c060 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d109      	bne.n	800bfda <udp_sendto_if+0x42>
 800bfc6:	4b28      	ldr	r3, [pc, #160]	; (800c068 <udp_sendto_if+0xd0>)
 800bfc8:	f240 2281 	movw	r2, #641	; 0x281
 800bfcc:	4929      	ldr	r1, [pc, #164]	; (800c074 <udp_sendto_if+0xdc>)
 800bfce:	4828      	ldr	r0, [pc, #160]	; (800c070 <udp_sendto_if+0xd8>)
 800bfd0:	f002 feca 	bl	800ed68 <iprintf>
 800bfd4:	f06f 030f 	mvn.w	r3, #15
 800bfd8:	e042      	b.n	800c060 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d109      	bne.n	800bff4 <udp_sendto_if+0x5c>
 800bfe0:	4b21      	ldr	r3, [pc, #132]	; (800c068 <udp_sendto_if+0xd0>)
 800bfe2:	f240 2282 	movw	r2, #642	; 0x282
 800bfe6:	4924      	ldr	r1, [pc, #144]	; (800c078 <udp_sendto_if+0xe0>)
 800bfe8:	4821      	ldr	r0, [pc, #132]	; (800c070 <udp_sendto_if+0xd8>)
 800bfea:	f002 febd 	bl	800ed68 <iprintf>
 800bfee:	f06f 030f 	mvn.w	r3, #15
 800bff2:	e035      	b.n	800c060 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800bff4:	6a3b      	ldr	r3, [r7, #32]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d109      	bne.n	800c00e <udp_sendto_if+0x76>
 800bffa:	4b1b      	ldr	r3, [pc, #108]	; (800c068 <udp_sendto_if+0xd0>)
 800bffc:	f240 2283 	movw	r2, #643	; 0x283
 800c000:	491e      	ldr	r1, [pc, #120]	; (800c07c <udp_sendto_if+0xe4>)
 800c002:	481b      	ldr	r0, [pc, #108]	; (800c070 <udp_sendto_if+0xd8>)
 800c004:	f002 feb0 	bl	800ed68 <iprintf>
 800c008:	f06f 030f 	mvn.w	r3, #15
 800c00c:	e028      	b.n	800c060 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d009      	beq.n	800c028 <udp_sendto_if+0x90>
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d005      	beq.n	800c028 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c024:	2be0      	cmp	r3, #224	; 0xe0
 800c026:	d103      	bne.n	800c030 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c028:	6a3b      	ldr	r3, [r7, #32]
 800c02a:	3304      	adds	r3, #4
 800c02c:	617b      	str	r3, [r7, #20]
 800c02e:	e00b      	b.n	800c048 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	3304      	adds	r3, #4
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d002      	beq.n	800c044 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c03e:	f06f 0303 	mvn.w	r3, #3
 800c042:	e00d      	b.n	800c060 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c048:	887a      	ldrh	r2, [r7, #2]
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	9301      	str	r3, [sp, #4]
 800c04e:	6a3b      	ldr	r3, [r7, #32]
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	4613      	mov	r3, r2
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	68b9      	ldr	r1, [r7, #8]
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f000 f811 	bl	800c080 <udp_sendto_if_src>
 800c05e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c060:	4618      	mov	r0, r3
 800c062:	3718      	adds	r7, #24
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	08011b5c 	.word	0x08011b5c
 800c06c:	08011cd0 	.word	0x08011cd0
 800c070:	08011bb0 	.word	0x08011bb0
 800c074:	08011cec 	.word	0x08011cec
 800c078:	08011d08 	.word	0x08011d08
 800c07c:	08011d28 	.word	0x08011d28

0800c080 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08c      	sub	sp, #48	; 0x30
 800c084:	af04      	add	r7, sp, #16
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d109      	bne.n	800c0a8 <udp_sendto_if_src+0x28>
 800c094:	4b65      	ldr	r3, [pc, #404]	; (800c22c <udp_sendto_if_src+0x1ac>)
 800c096:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c09a:	4965      	ldr	r1, [pc, #404]	; (800c230 <udp_sendto_if_src+0x1b0>)
 800c09c:	4865      	ldr	r0, [pc, #404]	; (800c234 <udp_sendto_if_src+0x1b4>)
 800c09e:	f002 fe63 	bl	800ed68 <iprintf>
 800c0a2:	f06f 030f 	mvn.w	r3, #15
 800c0a6:	e0bc      	b.n	800c222 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d109      	bne.n	800c0c2 <udp_sendto_if_src+0x42>
 800c0ae:	4b5f      	ldr	r3, [pc, #380]	; (800c22c <udp_sendto_if_src+0x1ac>)
 800c0b0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c0b4:	4960      	ldr	r1, [pc, #384]	; (800c238 <udp_sendto_if_src+0x1b8>)
 800c0b6:	485f      	ldr	r0, [pc, #380]	; (800c234 <udp_sendto_if_src+0x1b4>)
 800c0b8:	f002 fe56 	bl	800ed68 <iprintf>
 800c0bc:	f06f 030f 	mvn.w	r3, #15
 800c0c0:	e0af      	b.n	800c222 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d109      	bne.n	800c0dc <udp_sendto_if_src+0x5c>
 800c0c8:	4b58      	ldr	r3, [pc, #352]	; (800c22c <udp_sendto_if_src+0x1ac>)
 800c0ca:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c0ce:	495b      	ldr	r1, [pc, #364]	; (800c23c <udp_sendto_if_src+0x1bc>)
 800c0d0:	4858      	ldr	r0, [pc, #352]	; (800c234 <udp_sendto_if_src+0x1b4>)
 800c0d2:	f002 fe49 	bl	800ed68 <iprintf>
 800c0d6:	f06f 030f 	mvn.w	r3, #15
 800c0da:	e0a2      	b.n	800c222 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d109      	bne.n	800c0f6 <udp_sendto_if_src+0x76>
 800c0e2:	4b52      	ldr	r3, [pc, #328]	; (800c22c <udp_sendto_if_src+0x1ac>)
 800c0e4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c0e8:	4955      	ldr	r1, [pc, #340]	; (800c240 <udp_sendto_if_src+0x1c0>)
 800c0ea:	4852      	ldr	r0, [pc, #328]	; (800c234 <udp_sendto_if_src+0x1b4>)
 800c0ec:	f002 fe3c 	bl	800ed68 <iprintf>
 800c0f0:	f06f 030f 	mvn.w	r3, #15
 800c0f4:	e095      	b.n	800c222 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d109      	bne.n	800c110 <udp_sendto_if_src+0x90>
 800c0fc:	4b4b      	ldr	r3, [pc, #300]	; (800c22c <udp_sendto_if_src+0x1ac>)
 800c0fe:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c102:	4950      	ldr	r1, [pc, #320]	; (800c244 <udp_sendto_if_src+0x1c4>)
 800c104:	484b      	ldr	r0, [pc, #300]	; (800c234 <udp_sendto_if_src+0x1b4>)
 800c106:	f002 fe2f 	bl	800ed68 <iprintf>
 800c10a:	f06f 030f 	mvn.w	r3, #15
 800c10e:	e088      	b.n	800c222 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	8a5b      	ldrh	r3, [r3, #18]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10f      	bne.n	800c138 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c118:	68f9      	ldr	r1, [r7, #12]
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	8a5b      	ldrh	r3, [r3, #18]
 800c11e:	461a      	mov	r2, r3
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f000 f893 	bl	800c24c <udp_bind>
 800c126:	4603      	mov	r3, r0
 800c128:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c12a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d002      	beq.n	800c138 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c132:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c136:	e074      	b.n	800c222 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	891b      	ldrh	r3, [r3, #8]
 800c13c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c140:	4293      	cmp	r3, r2
 800c142:	d902      	bls.n	800c14a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c144:	f04f 33ff 	mov.w	r3, #4294967295
 800c148:	e06b      	b.n	800c222 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c14a:	2108      	movs	r1, #8
 800c14c:	68b8      	ldr	r0, [r7, #8]
 800c14e:	f7f9 fef7 	bl	8005f40 <pbuf_add_header>
 800c152:	4603      	mov	r3, r0
 800c154:	2b00      	cmp	r3, #0
 800c156:	d015      	beq.n	800c184 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c158:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c15c:	2108      	movs	r1, #8
 800c15e:	2022      	movs	r0, #34	; 0x22
 800c160:	f7f9 fca0 	bl	8005aa4 <pbuf_alloc>
 800c164:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d102      	bne.n	800c172 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c16c:	f04f 33ff 	mov.w	r3, #4294967295
 800c170:	e057      	b.n	800c222 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	891b      	ldrh	r3, [r3, #8]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d006      	beq.n	800c188 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c17a:	68b9      	ldr	r1, [r7, #8]
 800c17c:	69f8      	ldr	r0, [r7, #28]
 800c17e:	f7fa f88d 	bl	800629c <pbuf_chain>
 800c182:	e001      	b.n	800c188 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	895b      	ldrh	r3, [r3, #10]
 800c18c:	2b07      	cmp	r3, #7
 800c18e:	d806      	bhi.n	800c19e <udp_sendto_if_src+0x11e>
 800c190:	4b26      	ldr	r3, [pc, #152]	; (800c22c <udp_sendto_if_src+0x1ac>)
 800c192:	f240 320d 	movw	r2, #781	; 0x30d
 800c196:	492c      	ldr	r1, [pc, #176]	; (800c248 <udp_sendto_if_src+0x1c8>)
 800c198:	4826      	ldr	r0, [pc, #152]	; (800c234 <udp_sendto_if_src+0x1b4>)
 800c19a:	f002 fde5 	bl	800ed68 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	8a5b      	ldrh	r3, [r3, #18]
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f7f8 fc01 	bl	80049b0 <lwip_htons>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c1b6:	887b      	ldrh	r3, [r7, #2]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7f8 fbf9 	bl	80049b0 <lwip_htons>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	719a      	strb	r2, [r3, #6]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	891b      	ldrh	r3, [r3, #8]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f8 fbeb 	bl	80049b0 <lwip_htons>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	461a      	mov	r2, r3
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c1e2:	2311      	movs	r3, #17
 800c1e4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	7adb      	ldrb	r3, [r3, #11]
 800c1ea:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	7a9b      	ldrb	r3, [r3, #10]
 800c1f0:	7cb9      	ldrb	r1, [r7, #18]
 800c1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1f4:	9202      	str	r2, [sp, #8]
 800c1f6:	7cfa      	ldrb	r2, [r7, #19]
 800c1f8:	9201      	str	r2, [sp, #4]
 800c1fa:	9300      	str	r3, [sp, #0]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c202:	69f8      	ldr	r0, [r7, #28]
 800c204:	f001 fcac 	bl	800db60 <ip4_output_if_src>
 800c208:	4603      	mov	r3, r0
 800c20a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c20c:	69fa      	ldr	r2, [r7, #28]
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	429a      	cmp	r2, r3
 800c212:	d004      	beq.n	800c21e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c214:	69f8      	ldr	r0, [r7, #28]
 800c216:	f7f9 ff29 	bl	800606c <pbuf_free>
    q = NULL;
 800c21a:	2300      	movs	r3, #0
 800c21c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c21e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3720      	adds	r7, #32
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	08011b5c 	.word	0x08011b5c
 800c230:	08011d48 	.word	0x08011d48
 800c234:	08011bb0 	.word	0x08011bb0
 800c238:	08011d68 	.word	0x08011d68
 800c23c:	08011d88 	.word	0x08011d88
 800c240:	08011dac 	.word	0x08011dac
 800c244:	08011dd0 	.word	0x08011dd0
 800c248:	08011df4 	.word	0x08011df4

0800c24c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b086      	sub	sp, #24
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d101      	bne.n	800c264 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c260:	4b39      	ldr	r3, [pc, #228]	; (800c348 <udp_bind+0xfc>)
 800c262:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d109      	bne.n	800c27e <udp_bind+0x32>
 800c26a:	4b38      	ldr	r3, [pc, #224]	; (800c34c <udp_bind+0x100>)
 800c26c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c270:	4937      	ldr	r1, [pc, #220]	; (800c350 <udp_bind+0x104>)
 800c272:	4838      	ldr	r0, [pc, #224]	; (800c354 <udp_bind+0x108>)
 800c274:	f002 fd78 	bl	800ed68 <iprintf>
 800c278:	f06f 030f 	mvn.w	r3, #15
 800c27c:	e060      	b.n	800c340 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c27e:	2300      	movs	r3, #0
 800c280:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c282:	4b35      	ldr	r3, [pc, #212]	; (800c358 <udp_bind+0x10c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	e009      	b.n	800c29e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d102      	bne.n	800c298 <udp_bind+0x4c>
      rebind = 1;
 800c292:	2301      	movs	r3, #1
 800c294:	74fb      	strb	r3, [r7, #19]
      break;
 800c296:	e005      	b.n	800c2a4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1f2      	bne.n	800c28a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c2a4:	88fb      	ldrh	r3, [r7, #6]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d109      	bne.n	800c2be <udp_bind+0x72>
    port = udp_new_port();
 800c2aa:	f7ff fc35 	bl	800bb18 <udp_new_port>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c2b2:	88fb      	ldrh	r3, [r7, #6]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d12c      	bne.n	800c312 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c2b8:	f06f 0307 	mvn.w	r3, #7
 800c2bc:	e040      	b.n	800c340 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c2be:	4b26      	ldr	r3, [pc, #152]	; (800c358 <udp_bind+0x10c>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	617b      	str	r3, [r7, #20]
 800c2c4:	e022      	b.n	800c30c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d01b      	beq.n	800c306 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	8a5b      	ldrh	r3, [r3, #18]
 800c2d2:	88fa      	ldrh	r2, [r7, #6]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d116      	bne.n	800c306 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d00d      	beq.n	800c300 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d00a      	beq.n	800c300 <udp_bind+0xb4>
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d006      	beq.n	800c300 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c2f2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d003      	beq.n	800c300 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d102      	bne.n	800c306 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c300:	f06f 0307 	mvn.w	r3, #7
 800c304:	e01c      	b.n	800c340 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	617b      	str	r3, [r7, #20]
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1d9      	bne.n	800c2c6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d002      	beq.n	800c31e <udp_bind+0xd2>
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	e000      	b.n	800c320 <udp_bind+0xd4>
 800c31e:	2300      	movs	r3, #0
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	88fa      	ldrh	r2, [r7, #6]
 800c328:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c32a:	7cfb      	ldrb	r3, [r7, #19]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d106      	bne.n	800c33e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c330:	4b09      	ldr	r3, [pc, #36]	; (800c358 <udp_bind+0x10c>)
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c338:	4a07      	ldr	r2, [pc, #28]	; (800c358 <udp_bind+0x10c>)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3718      	adds	r7, #24
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	08012678 	.word	0x08012678
 800c34c:	08011b5c 	.word	0x08011b5c
 800c350:	08011e24 	.word	0x08011e24
 800c354:	08011bb0 	.word	0x08011bb0
 800c358:	200087c8 	.word	0x200087c8

0800c35c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	4613      	mov	r3, r2
 800c368:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d109      	bne.n	800c384 <udp_connect+0x28>
 800c370:	4b2c      	ldr	r3, [pc, #176]	; (800c424 <udp_connect+0xc8>)
 800c372:	f240 4235 	movw	r2, #1077	; 0x435
 800c376:	492c      	ldr	r1, [pc, #176]	; (800c428 <udp_connect+0xcc>)
 800c378:	482c      	ldr	r0, [pc, #176]	; (800c42c <udp_connect+0xd0>)
 800c37a:	f002 fcf5 	bl	800ed68 <iprintf>
 800c37e:	f06f 030f 	mvn.w	r3, #15
 800c382:	e04b      	b.n	800c41c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d109      	bne.n	800c39e <udp_connect+0x42>
 800c38a:	4b26      	ldr	r3, [pc, #152]	; (800c424 <udp_connect+0xc8>)
 800c38c:	f240 4236 	movw	r2, #1078	; 0x436
 800c390:	4927      	ldr	r1, [pc, #156]	; (800c430 <udp_connect+0xd4>)
 800c392:	4826      	ldr	r0, [pc, #152]	; (800c42c <udp_connect+0xd0>)
 800c394:	f002 fce8 	bl	800ed68 <iprintf>
 800c398:	f06f 030f 	mvn.w	r3, #15
 800c39c:	e03e      	b.n	800c41c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	8a5b      	ldrh	r3, [r3, #18]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d10f      	bne.n	800c3c6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c3a6:	68f9      	ldr	r1, [r7, #12]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	8a5b      	ldrh	r3, [r3, #18]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f7ff ff4c 	bl	800c24c <udp_bind>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c3b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d002      	beq.n	800c3c6 <udp_connect+0x6a>
      return err;
 800c3c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3c4:	e02a      	b.n	800c41c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <udp_connect+0x76>
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	e000      	b.n	800c3d4 <udp_connect+0x78>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	68fa      	ldr	r2, [r7, #12]
 800c3d6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	88fa      	ldrh	r2, [r7, #6]
 800c3dc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	7c1b      	ldrb	r3, [r3, #16]
 800c3e2:	f043 0304 	orr.w	r3, r3, #4
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c3ec:	4b11      	ldr	r3, [pc, #68]	; (800c434 <udp_connect+0xd8>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	617b      	str	r3, [r7, #20]
 800c3f2:	e008      	b.n	800c406 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d101      	bne.n	800c400 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	e00d      	b.n	800c41c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	617b      	str	r3, [r7, #20]
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1f3      	bne.n	800c3f4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c40c:	4b09      	ldr	r3, [pc, #36]	; (800c434 <udp_connect+0xd8>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c414:	4a07      	ldr	r2, [pc, #28]	; (800c434 <udp_connect+0xd8>)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	08011b5c 	.word	0x08011b5c
 800c428:	08011e3c 	.word	0x08011e3c
 800c42c:	08011bb0 	.word	0x08011bb0
 800c430:	08011e58 	.word	0x08011e58
 800c434:	200087c8 	.word	0x200087c8

0800c438 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d107      	bne.n	800c456 <udp_disconnect+0x1e>
 800c446:	4b0d      	ldr	r3, [pc, #52]	; (800c47c <udp_disconnect+0x44>)
 800c448:	f240 426a 	movw	r2, #1130	; 0x46a
 800c44c:	490c      	ldr	r1, [pc, #48]	; (800c480 <udp_disconnect+0x48>)
 800c44e:	480d      	ldr	r0, [pc, #52]	; (800c484 <udp_disconnect+0x4c>)
 800c450:	f002 fc8a 	bl	800ed68 <iprintf>
 800c454:	e00f      	b.n	800c476 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	7c1b      	ldrb	r3, [r3, #16]
 800c46c:	f023 0304 	bic.w	r3, r3, #4
 800c470:	b2da      	uxtb	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	741a      	strb	r2, [r3, #16]
}
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}
 800c47c:	08011b5c 	.word	0x08011b5c
 800c480:	08011e74 	.word	0x08011e74
 800c484:	08011bb0 	.word	0x08011bb0

0800c488 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d107      	bne.n	800c4aa <udp_recv+0x22>
 800c49a:	4b08      	ldr	r3, [pc, #32]	; (800c4bc <udp_recv+0x34>)
 800c49c:	f240 428a 	movw	r2, #1162	; 0x48a
 800c4a0:	4907      	ldr	r1, [pc, #28]	; (800c4c0 <udp_recv+0x38>)
 800c4a2:	4808      	ldr	r0, [pc, #32]	; (800c4c4 <udp_recv+0x3c>)
 800c4a4:	f002 fc60 	bl	800ed68 <iprintf>
 800c4a8:	e005      	b.n	800c4b6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	61da      	str	r2, [r3, #28]
}
 800c4b6:	3710      	adds	r7, #16
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	08011b5c 	.word	0x08011b5c
 800c4c0:	08011e90 	.word	0x08011e90
 800c4c4:	08011bb0 	.word	0x08011bb0

0800c4c8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d107      	bne.n	800c4e6 <udp_remove+0x1e>
 800c4d6:	4b19      	ldr	r3, [pc, #100]	; (800c53c <udp_remove+0x74>)
 800c4d8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c4dc:	4918      	ldr	r1, [pc, #96]	; (800c540 <udp_remove+0x78>)
 800c4de:	4819      	ldr	r0, [pc, #100]	; (800c544 <udp_remove+0x7c>)
 800c4e0:	f002 fc42 	bl	800ed68 <iprintf>
 800c4e4:	e026      	b.n	800c534 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c4e6:	4b18      	ldr	r3, [pc, #96]	; (800c548 <udp_remove+0x80>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d105      	bne.n	800c4fc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c4f0:	4b15      	ldr	r3, [pc, #84]	; (800c548 <udp_remove+0x80>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	4a14      	ldr	r2, [pc, #80]	; (800c548 <udp_remove+0x80>)
 800c4f8:	6013      	str	r3, [r2, #0]
 800c4fa:	e017      	b.n	800c52c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c4fc:	4b12      	ldr	r3, [pc, #72]	; (800c548 <udp_remove+0x80>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	60fb      	str	r3, [r7, #12]
 800c502:	e010      	b.n	800c526 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d009      	beq.n	800c520 <udp_remove+0x58>
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	429a      	cmp	r2, r3
 800c514:	d104      	bne.n	800c520 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68da      	ldr	r2, [r3, #12]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	60da      	str	r2, [r3, #12]
        break;
 800c51e:	e005      	b.n	800c52c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1eb      	bne.n	800c504 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	2000      	movs	r0, #0
 800c530:	f7f8 ff26 	bl	8005380 <memp_free>
}
 800c534:	3710      	adds	r7, #16
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	08011b5c 	.word	0x08011b5c
 800c540:	08011ea8 	.word	0x08011ea8
 800c544:	08011bb0 	.word	0x08011bb0
 800c548:	200087c8 	.word	0x200087c8

0800c54c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c552:	2000      	movs	r0, #0
 800c554:	f7f8 fea4 	bl	80052a0 <memp_malloc>
 800c558:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d007      	beq.n	800c570 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c560:	2220      	movs	r2, #32
 800c562:	2100      	movs	r1, #0
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f002 fc64 	bl	800ee32 <memset>
    pcb->ttl = UDP_TTL;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	22ff      	movs	r2, #255	; 0xff
 800c56e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c570:	687b      	ldr	r3, [r7, #4]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
	...

0800c57c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d01e      	beq.n	800c5ca <udp_netif_ip_addr_changed+0x4e>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d01a      	beq.n	800c5ca <udp_netif_ip_addr_changed+0x4e>
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d017      	beq.n	800c5ca <udp_netif_ip_addr_changed+0x4e>
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d013      	beq.n	800c5ca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c5a2:	4b0d      	ldr	r3, [pc, #52]	; (800c5d8 <udp_netif_ip_addr_changed+0x5c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	60fb      	str	r3, [r7, #12]
 800c5a8:	e00c      	b.n	800c5c4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d103      	bne.n	800c5be <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	60fb      	str	r3, [r7, #12]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d1ef      	bne.n	800c5aa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c5ca:	bf00      	nop
 800c5cc:	3714      	adds	r7, #20
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	200087c8 	.word	0x200087c8

0800c5dc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c5e4:	4915      	ldr	r1, [pc, #84]	; (800c63c <etharp_free_entry+0x60>)
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	005b      	lsls	r3, r3, #1
 800c5ec:	4413      	add	r3, r2
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	440b      	add	r3, r1
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d013      	beq.n	800c620 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c5f8:	4910      	ldr	r1, [pc, #64]	; (800c63c <etharp_free_entry+0x60>)
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	005b      	lsls	r3, r3, #1
 800c600:	4413      	add	r3, r2
 800c602:	00db      	lsls	r3, r3, #3
 800c604:	440b      	add	r3, r1
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4618      	mov	r0, r3
 800c60a:	f7f9 fd2f 	bl	800606c <pbuf_free>
    arp_table[i].q = NULL;
 800c60e:	490b      	ldr	r1, [pc, #44]	; (800c63c <etharp_free_entry+0x60>)
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	4613      	mov	r3, r2
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	4413      	add	r3, r2
 800c618:	00db      	lsls	r3, r3, #3
 800c61a:	440b      	add	r3, r1
 800c61c:	2200      	movs	r2, #0
 800c61e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c620:	4906      	ldr	r1, [pc, #24]	; (800c63c <etharp_free_entry+0x60>)
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	4613      	mov	r3, r2
 800c626:	005b      	lsls	r3, r3, #1
 800c628:	4413      	add	r3, r2
 800c62a:	00db      	lsls	r3, r3, #3
 800c62c:	440b      	add	r3, r1
 800c62e:	3314      	adds	r3, #20
 800c630:	2200      	movs	r2, #0
 800c632:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c634:	bf00      	nop
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	200087cc 	.word	0x200087cc

0800c640 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c646:	2300      	movs	r3, #0
 800c648:	607b      	str	r3, [r7, #4]
 800c64a:	e096      	b.n	800c77a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c64c:	494f      	ldr	r1, [pc, #316]	; (800c78c <etharp_tmr+0x14c>)
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	4613      	mov	r3, r2
 800c652:	005b      	lsls	r3, r3, #1
 800c654:	4413      	add	r3, r2
 800c656:	00db      	lsls	r3, r3, #3
 800c658:	440b      	add	r3, r1
 800c65a:	3314      	adds	r3, #20
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c660:	78fb      	ldrb	r3, [r7, #3]
 800c662:	2b00      	cmp	r3, #0
 800c664:	f000 8086 	beq.w	800c774 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c668:	4948      	ldr	r1, [pc, #288]	; (800c78c <etharp_tmr+0x14c>)
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	4613      	mov	r3, r2
 800c66e:	005b      	lsls	r3, r3, #1
 800c670:	4413      	add	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	440b      	add	r3, r1
 800c676:	3312      	adds	r3, #18
 800c678:	881b      	ldrh	r3, [r3, #0]
 800c67a:	3301      	adds	r3, #1
 800c67c:	b298      	uxth	r0, r3
 800c67e:	4943      	ldr	r1, [pc, #268]	; (800c78c <etharp_tmr+0x14c>)
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	4613      	mov	r3, r2
 800c684:	005b      	lsls	r3, r3, #1
 800c686:	4413      	add	r3, r2
 800c688:	00db      	lsls	r3, r3, #3
 800c68a:	440b      	add	r3, r1
 800c68c:	3312      	adds	r3, #18
 800c68e:	4602      	mov	r2, r0
 800c690:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c692:	493e      	ldr	r1, [pc, #248]	; (800c78c <etharp_tmr+0x14c>)
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	4613      	mov	r3, r2
 800c698:	005b      	lsls	r3, r3, #1
 800c69a:	4413      	add	r3, r2
 800c69c:	00db      	lsls	r3, r3, #3
 800c69e:	440b      	add	r3, r1
 800c6a0:	3312      	adds	r3, #18
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c6a8:	d215      	bcs.n	800c6d6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c6aa:	4938      	ldr	r1, [pc, #224]	; (800c78c <etharp_tmr+0x14c>)
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	4413      	add	r3, r2
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	440b      	add	r3, r1
 800c6b8:	3314      	adds	r3, #20
 800c6ba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d10e      	bne.n	800c6de <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c6c0:	4932      	ldr	r1, [pc, #200]	; (800c78c <etharp_tmr+0x14c>)
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	4413      	add	r3, r2
 800c6ca:	00db      	lsls	r3, r3, #3
 800c6cc:	440b      	add	r3, r1
 800c6ce:	3312      	adds	r3, #18
 800c6d0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d903      	bls.n	800c6de <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f7ff ff80 	bl	800c5dc <etharp_free_entry>
 800c6dc:	e04a      	b.n	800c774 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c6de:	492b      	ldr	r1, [pc, #172]	; (800c78c <etharp_tmr+0x14c>)
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	005b      	lsls	r3, r3, #1
 800c6e6:	4413      	add	r3, r2
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	440b      	add	r3, r1
 800c6ec:	3314      	adds	r3, #20
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	2b03      	cmp	r3, #3
 800c6f2:	d10a      	bne.n	800c70a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c6f4:	4925      	ldr	r1, [pc, #148]	; (800c78c <etharp_tmr+0x14c>)
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	4613      	mov	r3, r2
 800c6fa:	005b      	lsls	r3, r3, #1
 800c6fc:	4413      	add	r3, r2
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	440b      	add	r3, r1
 800c702:	3314      	adds	r3, #20
 800c704:	2204      	movs	r2, #4
 800c706:	701a      	strb	r2, [r3, #0]
 800c708:	e034      	b.n	800c774 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c70a:	4920      	ldr	r1, [pc, #128]	; (800c78c <etharp_tmr+0x14c>)
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	4613      	mov	r3, r2
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	4413      	add	r3, r2
 800c714:	00db      	lsls	r3, r3, #3
 800c716:	440b      	add	r3, r1
 800c718:	3314      	adds	r3, #20
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	2b04      	cmp	r3, #4
 800c71e:	d10a      	bne.n	800c736 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c720:	491a      	ldr	r1, [pc, #104]	; (800c78c <etharp_tmr+0x14c>)
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	4613      	mov	r3, r2
 800c726:	005b      	lsls	r3, r3, #1
 800c728:	4413      	add	r3, r2
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	440b      	add	r3, r1
 800c72e:	3314      	adds	r3, #20
 800c730:	2202      	movs	r2, #2
 800c732:	701a      	strb	r2, [r3, #0]
 800c734:	e01e      	b.n	800c774 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c736:	4915      	ldr	r1, [pc, #84]	; (800c78c <etharp_tmr+0x14c>)
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	4613      	mov	r3, r2
 800c73c:	005b      	lsls	r3, r3, #1
 800c73e:	4413      	add	r3, r2
 800c740:	00db      	lsls	r3, r3, #3
 800c742:	440b      	add	r3, r1
 800c744:	3314      	adds	r3, #20
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d113      	bne.n	800c774 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c74c:	490f      	ldr	r1, [pc, #60]	; (800c78c <etharp_tmr+0x14c>)
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	4613      	mov	r3, r2
 800c752:	005b      	lsls	r3, r3, #1
 800c754:	4413      	add	r3, r2
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	440b      	add	r3, r1
 800c75a:	3308      	adds	r3, #8
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	4613      	mov	r3, r2
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	4413      	add	r3, r2
 800c766:	00db      	lsls	r3, r3, #3
 800c768:	4a08      	ldr	r2, [pc, #32]	; (800c78c <etharp_tmr+0x14c>)
 800c76a:	4413      	add	r3, r2
 800c76c:	3304      	adds	r3, #4
 800c76e:	4619      	mov	r1, r3
 800c770:	f000 fe6e 	bl	800d450 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	3301      	adds	r3, #1
 800c778:	607b      	str	r3, [r7, #4]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b09      	cmp	r3, #9
 800c77e:	f77f af65 	ble.w	800c64c <etharp_tmr+0xc>
      }
    }
  }
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	3708      	adds	r7, #8
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	200087cc 	.word	0x200087cc

0800c790 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b08a      	sub	sp, #40	; 0x28
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	460b      	mov	r3, r1
 800c79a:	607a      	str	r2, [r7, #4]
 800c79c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c79e:	230a      	movs	r3, #10
 800c7a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c7a2:	230a      	movs	r3, #10
 800c7a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c7a6:	230a      	movs	r3, #10
 800c7a8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c7ae:	230a      	movs	r3, #10
 800c7b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	83bb      	strh	r3, [r7, #28]
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	837b      	strh	r3, [r7, #26]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c7be:	2300      	movs	r3, #0
 800c7c0:	843b      	strh	r3, [r7, #32]
 800c7c2:	e0ae      	b.n	800c922 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c7c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7c8:	49a6      	ldr	r1, [pc, #664]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c7ca:	4613      	mov	r3, r2
 800c7cc:	005b      	lsls	r3, r3, #1
 800c7ce:	4413      	add	r3, r2
 800c7d0:	00db      	lsls	r3, r3, #3
 800c7d2:	440b      	add	r3, r1
 800c7d4:	3314      	adds	r3, #20
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c7da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c7de:	2b0a      	cmp	r3, #10
 800c7e0:	d105      	bne.n	800c7ee <etharp_find_entry+0x5e>
 800c7e2:	7dfb      	ldrb	r3, [r7, #23]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d102      	bne.n	800c7ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c7e8:	8c3b      	ldrh	r3, [r7, #32]
 800c7ea:	847b      	strh	r3, [r7, #34]	; 0x22
 800c7ec:	e095      	b.n	800c91a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 8092 	beq.w	800c91a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d009      	beq.n	800c810 <etharp_find_entry+0x80>
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
 800c7fe:	2b01      	cmp	r3, #1
 800c800:	d806      	bhi.n	800c810 <etharp_find_entry+0x80>
 800c802:	4b99      	ldr	r3, [pc, #612]	; (800ca68 <etharp_find_entry+0x2d8>)
 800c804:	f240 1223 	movw	r2, #291	; 0x123
 800c808:	4998      	ldr	r1, [pc, #608]	; (800ca6c <etharp_find_entry+0x2dc>)
 800c80a:	4899      	ldr	r0, [pc, #612]	; (800ca70 <etharp_find_entry+0x2e0>)
 800c80c:	f002 faac 	bl	800ed68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d020      	beq.n	800c858 <etharp_find_entry+0xc8>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6819      	ldr	r1, [r3, #0]
 800c81a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c81e:	4891      	ldr	r0, [pc, #580]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c820:	4613      	mov	r3, r2
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	4413      	add	r3, r2
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	4403      	add	r3, r0
 800c82a:	3304      	adds	r3, #4
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4299      	cmp	r1, r3
 800c830:	d112      	bne.n	800c858 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00c      	beq.n	800c852 <etharp_find_entry+0xc2>
 800c838:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c83c:	4989      	ldr	r1, [pc, #548]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c83e:	4613      	mov	r3, r2
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	4413      	add	r3, r2
 800c844:	00db      	lsls	r3, r3, #3
 800c846:	440b      	add	r3, r1
 800c848:	3308      	adds	r3, #8
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d102      	bne.n	800c858 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c852:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c856:	e100      	b.n	800ca5a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c858:	7dfb      	ldrb	r3, [r7, #23]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d140      	bne.n	800c8e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c85e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c862:	4980      	ldr	r1, [pc, #512]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c864:	4613      	mov	r3, r2
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	4413      	add	r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	440b      	add	r3, r1
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01a      	beq.n	800c8aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c874:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c878:	497a      	ldr	r1, [pc, #488]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c87a:	4613      	mov	r3, r2
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	440b      	add	r3, r1
 800c884:	3312      	adds	r3, #18
 800c886:	881b      	ldrh	r3, [r3, #0]
 800c888:	8bba      	ldrh	r2, [r7, #28]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d845      	bhi.n	800c91a <etharp_find_entry+0x18a>
            old_queue = i;
 800c88e:	8c3b      	ldrh	r3, [r7, #32]
 800c890:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c896:	4973      	ldr	r1, [pc, #460]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c898:	4613      	mov	r3, r2
 800c89a:	005b      	lsls	r3, r3, #1
 800c89c:	4413      	add	r3, r2
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	440b      	add	r3, r1
 800c8a2:	3312      	adds	r3, #18
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	83bb      	strh	r3, [r7, #28]
 800c8a8:	e037      	b.n	800c91a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c8aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8ae:	496d      	ldr	r1, [pc, #436]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	4413      	add	r3, r2
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	440b      	add	r3, r1
 800c8ba:	3312      	adds	r3, #18
 800c8bc:	881b      	ldrh	r3, [r3, #0]
 800c8be:	8b7a      	ldrh	r2, [r7, #26]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d82a      	bhi.n	800c91a <etharp_find_entry+0x18a>
            old_pending = i;
 800c8c4:	8c3b      	ldrh	r3, [r7, #32]
 800c8c6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c8c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8cc:	4965      	ldr	r1, [pc, #404]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c8ce:	4613      	mov	r3, r2
 800c8d0:	005b      	lsls	r3, r3, #1
 800c8d2:	4413      	add	r3, r2
 800c8d4:	00db      	lsls	r3, r3, #3
 800c8d6:	440b      	add	r3, r1
 800c8d8:	3312      	adds	r3, #18
 800c8da:	881b      	ldrh	r3, [r3, #0]
 800c8dc:	837b      	strh	r3, [r7, #26]
 800c8de:	e01c      	b.n	800c91a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d919      	bls.n	800c91a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c8e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c8ea:	495e      	ldr	r1, [pc, #376]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	4413      	add	r3, r2
 800c8f2:	00db      	lsls	r3, r3, #3
 800c8f4:	440b      	add	r3, r1
 800c8f6:	3312      	adds	r3, #18
 800c8f8:	881b      	ldrh	r3, [r3, #0]
 800c8fa:	8b3a      	ldrh	r2, [r7, #24]
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d80c      	bhi.n	800c91a <etharp_find_entry+0x18a>
            old_stable = i;
 800c900:	8c3b      	ldrh	r3, [r7, #32]
 800c902:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c904:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c908:	4956      	ldr	r1, [pc, #344]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c90a:	4613      	mov	r3, r2
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	4413      	add	r3, r2
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	440b      	add	r3, r1
 800c914:	3312      	adds	r3, #18
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c91a:	8c3b      	ldrh	r3, [r7, #32]
 800c91c:	3301      	adds	r3, #1
 800c91e:	b29b      	uxth	r3, r3
 800c920:	843b      	strh	r3, [r7, #32]
 800c922:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c926:	2b09      	cmp	r3, #9
 800c928:	f77f af4c 	ble.w	800c7c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c92c:	7afb      	ldrb	r3, [r7, #11]
 800c92e:	f003 0302 	and.w	r3, r3, #2
 800c932:	2b00      	cmp	r3, #0
 800c934:	d108      	bne.n	800c948 <etharp_find_entry+0x1b8>
 800c936:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c93a:	2b0a      	cmp	r3, #10
 800c93c:	d107      	bne.n	800c94e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c93e:	7afb      	ldrb	r3, [r7, #11]
 800c940:	f003 0301 	and.w	r3, r3, #1
 800c944:	2b00      	cmp	r3, #0
 800c946:	d102      	bne.n	800c94e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c948:	f04f 33ff 	mov.w	r3, #4294967295
 800c94c:	e085      	b.n	800ca5a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c94e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c952:	2b09      	cmp	r3, #9
 800c954:	dc02      	bgt.n	800c95c <etharp_find_entry+0x1cc>
    i = empty;
 800c956:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c958:	843b      	strh	r3, [r7, #32]
 800c95a:	e039      	b.n	800c9d0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c95c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c960:	2b09      	cmp	r3, #9
 800c962:	dc14      	bgt.n	800c98e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c966:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c968:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c96c:	493d      	ldr	r1, [pc, #244]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c96e:	4613      	mov	r3, r2
 800c970:	005b      	lsls	r3, r3, #1
 800c972:	4413      	add	r3, r2
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	440b      	add	r3, r1
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d018      	beq.n	800c9b0 <etharp_find_entry+0x220>
 800c97e:	4b3a      	ldr	r3, [pc, #232]	; (800ca68 <etharp_find_entry+0x2d8>)
 800c980:	f240 126d 	movw	r2, #365	; 0x16d
 800c984:	493b      	ldr	r1, [pc, #236]	; (800ca74 <etharp_find_entry+0x2e4>)
 800c986:	483a      	ldr	r0, [pc, #232]	; (800ca70 <etharp_find_entry+0x2e0>)
 800c988:	f002 f9ee 	bl	800ed68 <iprintf>
 800c98c:	e010      	b.n	800c9b0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c98e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c992:	2b09      	cmp	r3, #9
 800c994:	dc02      	bgt.n	800c99c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c996:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c998:	843b      	strh	r3, [r7, #32]
 800c99a:	e009      	b.n	800c9b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c99c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c9a0:	2b09      	cmp	r3, #9
 800c9a2:	dc02      	bgt.n	800c9aa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c9a4:	8bfb      	ldrh	r3, [r7, #30]
 800c9a6:	843b      	strh	r3, [r7, #32]
 800c9a8:	e002      	b.n	800c9b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c9aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ae:	e054      	b.n	800ca5a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c9b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c9b4:	2b09      	cmp	r3, #9
 800c9b6:	dd06      	ble.n	800c9c6 <etharp_find_entry+0x236>
 800c9b8:	4b2b      	ldr	r3, [pc, #172]	; (800ca68 <etharp_find_entry+0x2d8>)
 800c9ba:	f240 127f 	movw	r2, #383	; 0x17f
 800c9be:	492e      	ldr	r1, [pc, #184]	; (800ca78 <etharp_find_entry+0x2e8>)
 800c9c0:	482b      	ldr	r0, [pc, #172]	; (800ca70 <etharp_find_entry+0x2e0>)
 800c9c2:	f002 f9d1 	bl	800ed68 <iprintf>
    etharp_free_entry(i);
 800c9c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff fe06 	bl	800c5dc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c9d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c9d4:	2b09      	cmp	r3, #9
 800c9d6:	dd06      	ble.n	800c9e6 <etharp_find_entry+0x256>
 800c9d8:	4b23      	ldr	r3, [pc, #140]	; (800ca68 <etharp_find_entry+0x2d8>)
 800c9da:	f240 1283 	movw	r2, #387	; 0x183
 800c9de:	4926      	ldr	r1, [pc, #152]	; (800ca78 <etharp_find_entry+0x2e8>)
 800c9e0:	4823      	ldr	r0, [pc, #140]	; (800ca70 <etharp_find_entry+0x2e0>)
 800c9e2:	f002 f9c1 	bl	800ed68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c9e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c9ea:	491e      	ldr	r1, [pc, #120]	; (800ca64 <etharp_find_entry+0x2d4>)
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	005b      	lsls	r3, r3, #1
 800c9f0:	4413      	add	r3, r2
 800c9f2:	00db      	lsls	r3, r3, #3
 800c9f4:	440b      	add	r3, r1
 800c9f6:	3314      	adds	r3, #20
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d006      	beq.n	800ca0c <etharp_find_entry+0x27c>
 800c9fe:	4b1a      	ldr	r3, [pc, #104]	; (800ca68 <etharp_find_entry+0x2d8>)
 800ca00:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ca04:	491d      	ldr	r1, [pc, #116]	; (800ca7c <etharp_find_entry+0x2ec>)
 800ca06:	481a      	ldr	r0, [pc, #104]	; (800ca70 <etharp_find_entry+0x2e0>)
 800ca08:	f002 f9ae 	bl	800ed68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00b      	beq.n	800ca2a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ca12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6819      	ldr	r1, [r3, #0]
 800ca1a:	4812      	ldr	r0, [pc, #72]	; (800ca64 <etharp_find_entry+0x2d4>)
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	005b      	lsls	r3, r3, #1
 800ca20:	4413      	add	r3, r2
 800ca22:	00db      	lsls	r3, r3, #3
 800ca24:	4403      	add	r3, r0
 800ca26:	3304      	adds	r3, #4
 800ca28:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ca2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca2e:	490d      	ldr	r1, [pc, #52]	; (800ca64 <etharp_find_entry+0x2d4>)
 800ca30:	4613      	mov	r3, r2
 800ca32:	005b      	lsls	r3, r3, #1
 800ca34:	4413      	add	r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	440b      	add	r3, r1
 800ca3a:	3312      	adds	r3, #18
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ca40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ca44:	4907      	ldr	r1, [pc, #28]	; (800ca64 <etharp_find_entry+0x2d4>)
 800ca46:	4613      	mov	r3, r2
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	4413      	add	r3, r2
 800ca4c:	00db      	lsls	r3, r3, #3
 800ca4e:	440b      	add	r3, r1
 800ca50:	3308      	adds	r3, #8
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ca56:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3728      	adds	r7, #40	; 0x28
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	200087cc 	.word	0x200087cc
 800ca68:	08011ec0 	.word	0x08011ec0
 800ca6c:	08011ef8 	.word	0x08011ef8
 800ca70:	08011f38 	.word	0x08011f38
 800ca74:	08011f60 	.word	0x08011f60
 800ca78:	08011f78 	.word	0x08011f78
 800ca7c:	08011f8c 	.word	0x08011f8c

0800ca80 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af02      	add	r7, sp, #8
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ca94:	2b06      	cmp	r3, #6
 800ca96:	d006      	beq.n	800caa6 <etharp_update_arp_entry+0x26>
 800ca98:	4b48      	ldr	r3, [pc, #288]	; (800cbbc <etharp_update_arp_entry+0x13c>)
 800ca9a:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ca9e:	4948      	ldr	r1, [pc, #288]	; (800cbc0 <etharp_update_arp_entry+0x140>)
 800caa0:	4848      	ldr	r0, [pc, #288]	; (800cbc4 <etharp_update_arp_entry+0x144>)
 800caa2:	f002 f961 	bl	800ed68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d012      	beq.n	800cad2 <etharp_update_arp_entry+0x52>
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00e      	beq.n	800cad2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cab4:	68bb      	ldr	r3, [r7, #8]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	68f9      	ldr	r1, [r7, #12]
 800caba:	4618      	mov	r0, r3
 800cabc:	f001 f8fe 	bl	800dcbc <ip4_addr_isbroadcast_u32>
 800cac0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d105      	bne.n	800cad2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800cace:	2be0      	cmp	r3, #224	; 0xe0
 800cad0:	d102      	bne.n	800cad8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800cad2:	f06f 030f 	mvn.w	r3, #15
 800cad6:	e06c      	b.n	800cbb2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800cad8:	78fb      	ldrb	r3, [r7, #3]
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	4619      	mov	r1, r3
 800cade:	68b8      	ldr	r0, [r7, #8]
 800cae0:	f7ff fe56 	bl	800c790 <etharp_find_entry>
 800cae4:	4603      	mov	r3, r0
 800cae6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800cae8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800caec:	2b00      	cmp	r3, #0
 800caee:	da02      	bge.n	800caf6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800caf0:	8afb      	ldrh	r3, [r7, #22]
 800caf2:	b25b      	sxtb	r3, r3
 800caf4:	e05d      	b.n	800cbb2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800caf6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cafa:	4933      	ldr	r1, [pc, #204]	; (800cbc8 <etharp_update_arp_entry+0x148>)
 800cafc:	4613      	mov	r3, r2
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	4413      	add	r3, r2
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	440b      	add	r3, r1
 800cb06:	3314      	adds	r3, #20
 800cb08:	2202      	movs	r2, #2
 800cb0a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800cb0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb10:	492d      	ldr	r1, [pc, #180]	; (800cbc8 <etharp_update_arp_entry+0x148>)
 800cb12:	4613      	mov	r3, r2
 800cb14:	005b      	lsls	r3, r3, #1
 800cb16:	4413      	add	r3, r2
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	440b      	add	r3, r1
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800cb22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb26:	4613      	mov	r3, r2
 800cb28:	005b      	lsls	r3, r3, #1
 800cb2a:	4413      	add	r3, r2
 800cb2c:	00db      	lsls	r3, r3, #3
 800cb2e:	3308      	adds	r3, #8
 800cb30:	4a25      	ldr	r2, [pc, #148]	; (800cbc8 <etharp_update_arp_entry+0x148>)
 800cb32:	4413      	add	r3, r2
 800cb34:	3304      	adds	r3, #4
 800cb36:	2206      	movs	r2, #6
 800cb38:	6879      	ldr	r1, [r7, #4]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f002 f9ef 	bl	800ef1e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800cb40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb44:	4920      	ldr	r1, [pc, #128]	; (800cbc8 <etharp_update_arp_entry+0x148>)
 800cb46:	4613      	mov	r3, r2
 800cb48:	005b      	lsls	r3, r3, #1
 800cb4a:	4413      	add	r3, r2
 800cb4c:	00db      	lsls	r3, r3, #3
 800cb4e:	440b      	add	r3, r1
 800cb50:	3312      	adds	r3, #18
 800cb52:	2200      	movs	r2, #0
 800cb54:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800cb56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb5a:	491b      	ldr	r1, [pc, #108]	; (800cbc8 <etharp_update_arp_entry+0x148>)
 800cb5c:	4613      	mov	r3, r2
 800cb5e:	005b      	lsls	r3, r3, #1
 800cb60:	4413      	add	r3, r2
 800cb62:	00db      	lsls	r3, r3, #3
 800cb64:	440b      	add	r3, r1
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d021      	beq.n	800cbb0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cb6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb70:	4915      	ldr	r1, [pc, #84]	; (800cbc8 <etharp_update_arp_entry+0x148>)
 800cb72:	4613      	mov	r3, r2
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	4413      	add	r3, r2
 800cb78:	00db      	lsls	r3, r3, #3
 800cb7a:	440b      	add	r3, r1
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cb80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cb84:	4910      	ldr	r1, [pc, #64]	; (800cbc8 <etharp_update_arp_entry+0x148>)
 800cb86:	4613      	mov	r3, r2
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	4413      	add	r3, r2
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	440b      	add	r3, r1
 800cb90:	2200      	movs	r2, #0
 800cb92:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cb9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb9e:	9300      	str	r3, [sp, #0]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6939      	ldr	r1, [r7, #16]
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f001 ff97 	bl	800ead8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cbaa:	6938      	ldr	r0, [r7, #16]
 800cbac:	f7f9 fa5e 	bl	800606c <pbuf_free>
  }
  return ERR_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3718      	adds	r7, #24
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	08011ec0 	.word	0x08011ec0
 800cbc0:	08011fb8 	.word	0x08011fb8
 800cbc4:	08011f38 	.word	0x08011f38
 800cbc8:	200087cc 	.word	0x200087cc

0800cbcc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b084      	sub	sp, #16
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	e01e      	b.n	800cc18 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cbda:	4913      	ldr	r1, [pc, #76]	; (800cc28 <etharp_cleanup_netif+0x5c>)
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	005b      	lsls	r3, r3, #1
 800cbe2:	4413      	add	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	440b      	add	r3, r1
 800cbe8:	3314      	adds	r3, #20
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cbee:	7afb      	ldrb	r3, [r7, #11]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00e      	beq.n	800cc12 <etharp_cleanup_netif+0x46>
 800cbf4:	490c      	ldr	r1, [pc, #48]	; (800cc28 <etharp_cleanup_netif+0x5c>)
 800cbf6:	68fa      	ldr	r2, [r7, #12]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	005b      	lsls	r3, r3, #1
 800cbfc:	4413      	add	r3, r2
 800cbfe:	00db      	lsls	r3, r3, #3
 800cc00:	440b      	add	r3, r1
 800cc02:	3308      	adds	r3, #8
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d102      	bne.n	800cc12 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f7ff fce5 	bl	800c5dc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3301      	adds	r3, #1
 800cc16:	60fb      	str	r3, [r7, #12]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2b09      	cmp	r3, #9
 800cc1c:	dddd      	ble.n	800cbda <etharp_cleanup_netif+0xe>
    }
  }
}
 800cc1e:	bf00      	nop
 800cc20:	bf00      	nop
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	200087cc 	.word	0x200087cc

0800cc2c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cc2c:	b5b0      	push	{r4, r5, r7, lr}
 800cc2e:	b08a      	sub	sp, #40	; 0x28
 800cc30:	af04      	add	r7, sp, #16
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d107      	bne.n	800cc4c <etharp_input+0x20>
 800cc3c:	4b3d      	ldr	r3, [pc, #244]	; (800cd34 <etharp_input+0x108>)
 800cc3e:	f240 228a 	movw	r2, #650	; 0x28a
 800cc42:	493d      	ldr	r1, [pc, #244]	; (800cd38 <etharp_input+0x10c>)
 800cc44:	483d      	ldr	r0, [pc, #244]	; (800cd3c <etharp_input+0x110>)
 800cc46:	f002 f88f 	bl	800ed68 <iprintf>
 800cc4a:	e06f      	b.n	800cd2c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc5c:	d10c      	bne.n	800cc78 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cc62:	2b06      	cmp	r3, #6
 800cc64:	d108      	bne.n	800cc78 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cc6a:	2b04      	cmp	r3, #4
 800cc6c:	d104      	bne.n	800cc78 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	885b      	ldrh	r3, [r3, #2]
 800cc72:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cc74:	2b08      	cmp	r3, #8
 800cc76:	d003      	beq.n	800cc80 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f7f9 f9f7 	bl	800606c <pbuf_free>
    return;
 800cc7e:	e055      	b.n	800cd2c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	330e      	adds	r3, #14
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	3318      	adds	r3, #24
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	3304      	adds	r3, #4
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d102      	bne.n	800cca0 <etharp_input+0x74>
    for_us = 0;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	75fb      	strb	r3, [r7, #23]
 800cc9e:	e009      	b.n	800ccb4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	3304      	adds	r3, #4
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	429a      	cmp	r2, r3
 800ccaa:	bf0c      	ite	eq
 800ccac:	2301      	moveq	r3, #1
 800ccae:	2300      	movne	r3, #0
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	f103 0208 	add.w	r2, r3, #8
 800ccba:	7dfb      	ldrb	r3, [r7, #23]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d001      	beq.n	800ccc4 <etharp_input+0x98>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e000      	b.n	800ccc6 <etharp_input+0x9a>
 800ccc4:	2302      	movs	r3, #2
 800ccc6:	f107 010c 	add.w	r1, r7, #12
 800ccca:	6838      	ldr	r0, [r7, #0]
 800cccc:	f7ff fed8 	bl	800ca80 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	88db      	ldrh	r3, [r3, #6]
 800ccd4:	b29b      	uxth	r3, r3
 800ccd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccda:	d003      	beq.n	800cce4 <etharp_input+0xb8>
 800ccdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cce0:	d01e      	beq.n	800cd20 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800cce2:	e020      	b.n	800cd26 <etharp_input+0xfa>
      if (for_us) {
 800cce4:	7dfb      	ldrb	r3, [r7, #23]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d01c      	beq.n	800cd24 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	3208      	adds	r2, #8
        etharp_raw(netif,
 800cd04:	2102      	movs	r1, #2
 800cd06:	9103      	str	r1, [sp, #12]
 800cd08:	f107 010c 	add.w	r1, r7, #12
 800cd0c:	9102      	str	r1, [sp, #8]
 800cd0e:	9201      	str	r2, [sp, #4]
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	462b      	mov	r3, r5
 800cd14:	4622      	mov	r2, r4
 800cd16:	4601      	mov	r1, r0
 800cd18:	6838      	ldr	r0, [r7, #0]
 800cd1a:	f000 faeb 	bl	800d2f4 <etharp_raw>
      break;
 800cd1e:	e001      	b.n	800cd24 <etharp_input+0xf8>
      break;
 800cd20:	bf00      	nop
 800cd22:	e000      	b.n	800cd26 <etharp_input+0xfa>
      break;
 800cd24:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f7f9 f9a0 	bl	800606c <pbuf_free>
}
 800cd2c:	3718      	adds	r7, #24
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bdb0      	pop	{r4, r5, r7, pc}
 800cd32:	bf00      	nop
 800cd34:	08011ec0 	.word	0x08011ec0
 800cd38:	08012010 	.word	0x08012010
 800cd3c:	08011f38 	.word	0x08011f38

0800cd40 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af02      	add	r7, sp, #8
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cd4e:	79fa      	ldrb	r2, [r7, #7]
 800cd50:	4944      	ldr	r1, [pc, #272]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800cd52:	4613      	mov	r3, r2
 800cd54:	005b      	lsls	r3, r3, #1
 800cd56:	4413      	add	r3, r2
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	440b      	add	r3, r1
 800cd5c:	3314      	adds	r3, #20
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d806      	bhi.n	800cd72 <etharp_output_to_arp_index+0x32>
 800cd64:	4b40      	ldr	r3, [pc, #256]	; (800ce68 <etharp_output_to_arp_index+0x128>)
 800cd66:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cd6a:	4940      	ldr	r1, [pc, #256]	; (800ce6c <etharp_output_to_arp_index+0x12c>)
 800cd6c:	4840      	ldr	r0, [pc, #256]	; (800ce70 <etharp_output_to_arp_index+0x130>)
 800cd6e:	f001 fffb 	bl	800ed68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cd72:	79fa      	ldrb	r2, [r7, #7]
 800cd74:	493b      	ldr	r1, [pc, #236]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800cd76:	4613      	mov	r3, r2
 800cd78:	005b      	lsls	r3, r3, #1
 800cd7a:	4413      	add	r3, r2
 800cd7c:	00db      	lsls	r3, r3, #3
 800cd7e:	440b      	add	r3, r1
 800cd80:	3314      	adds	r3, #20
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d153      	bne.n	800ce30 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cd88:	79fa      	ldrb	r2, [r7, #7]
 800cd8a:	4936      	ldr	r1, [pc, #216]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	4413      	add	r3, r2
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	440b      	add	r3, r1
 800cd96:	3312      	adds	r3, #18
 800cd98:	881b      	ldrh	r3, [r3, #0]
 800cd9a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cd9e:	d919      	bls.n	800cdd4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cda0:	79fa      	ldrb	r2, [r7, #7]
 800cda2:	4613      	mov	r3, r2
 800cda4:	005b      	lsls	r3, r3, #1
 800cda6:	4413      	add	r3, r2
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	4a2e      	ldr	r2, [pc, #184]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800cdac:	4413      	add	r3, r2
 800cdae:	3304      	adds	r3, #4
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 fb4c 	bl	800d450 <etharp_request>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d138      	bne.n	800ce30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cdbe:	79fa      	ldrb	r2, [r7, #7]
 800cdc0:	4928      	ldr	r1, [pc, #160]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	005b      	lsls	r3, r3, #1
 800cdc6:	4413      	add	r3, r2
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	440b      	add	r3, r1
 800cdcc:	3314      	adds	r3, #20
 800cdce:	2203      	movs	r2, #3
 800cdd0:	701a      	strb	r2, [r3, #0]
 800cdd2:	e02d      	b.n	800ce30 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cdd4:	79fa      	ldrb	r2, [r7, #7]
 800cdd6:	4923      	ldr	r1, [pc, #140]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800cdd8:	4613      	mov	r3, r2
 800cdda:	005b      	lsls	r3, r3, #1
 800cddc:	4413      	add	r3, r2
 800cdde:	00db      	lsls	r3, r3, #3
 800cde0:	440b      	add	r3, r1
 800cde2:	3312      	adds	r3, #18
 800cde4:	881b      	ldrh	r3, [r3, #0]
 800cde6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cdea:	d321      	bcc.n	800ce30 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cdec:	79fa      	ldrb	r2, [r7, #7]
 800cdee:	4613      	mov	r3, r2
 800cdf0:	005b      	lsls	r3, r3, #1
 800cdf2:	4413      	add	r3, r2
 800cdf4:	00db      	lsls	r3, r3, #3
 800cdf6:	4a1b      	ldr	r2, [pc, #108]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800cdf8:	4413      	add	r3, r2
 800cdfa:	1d19      	adds	r1, r3, #4
 800cdfc:	79fa      	ldrb	r2, [r7, #7]
 800cdfe:	4613      	mov	r3, r2
 800ce00:	005b      	lsls	r3, r3, #1
 800ce02:	4413      	add	r3, r2
 800ce04:	00db      	lsls	r3, r3, #3
 800ce06:	3308      	adds	r3, #8
 800ce08:	4a16      	ldr	r2, [pc, #88]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800ce0a:	4413      	add	r3, r2
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	461a      	mov	r2, r3
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f000 fafb 	bl	800d40c <etharp_request_dst>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d109      	bne.n	800ce30 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ce1c:	79fa      	ldrb	r2, [r7, #7]
 800ce1e:	4911      	ldr	r1, [pc, #68]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800ce20:	4613      	mov	r3, r2
 800ce22:	005b      	lsls	r3, r3, #1
 800ce24:	4413      	add	r3, r2
 800ce26:	00db      	lsls	r3, r3, #3
 800ce28:	440b      	add	r3, r1
 800ce2a:	3314      	adds	r3, #20
 800ce2c:	2203      	movs	r2, #3
 800ce2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ce36:	79fa      	ldrb	r2, [r7, #7]
 800ce38:	4613      	mov	r3, r2
 800ce3a:	005b      	lsls	r3, r3, #1
 800ce3c:	4413      	add	r3, r2
 800ce3e:	00db      	lsls	r3, r3, #3
 800ce40:	3308      	adds	r3, #8
 800ce42:	4a08      	ldr	r2, [pc, #32]	; (800ce64 <etharp_output_to_arp_index+0x124>)
 800ce44:	4413      	add	r3, r2
 800ce46:	3304      	adds	r3, #4
 800ce48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce4c:	9200      	str	r2, [sp, #0]
 800ce4e:	460a      	mov	r2, r1
 800ce50:	68b9      	ldr	r1, [r7, #8]
 800ce52:	68f8      	ldr	r0, [r7, #12]
 800ce54:	f001 fe40 	bl	800ead8 <ethernet_output>
 800ce58:	4603      	mov	r3, r0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	200087cc 	.word	0x200087cc
 800ce68:	08011ec0 	.word	0x08011ec0
 800ce6c:	08012030 	.word	0x08012030
 800ce70:	08011f38 	.word	0x08011f38

0800ce74 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b08a      	sub	sp, #40	; 0x28
 800ce78:	af02      	add	r7, sp, #8
 800ce7a:	60f8      	str	r0, [r7, #12]
 800ce7c:	60b9      	str	r1, [r7, #8]
 800ce7e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d106      	bne.n	800ce98 <etharp_output+0x24>
 800ce8a:	4b73      	ldr	r3, [pc, #460]	; (800d058 <etharp_output+0x1e4>)
 800ce8c:	f240 321e 	movw	r2, #798	; 0x31e
 800ce90:	4972      	ldr	r1, [pc, #456]	; (800d05c <etharp_output+0x1e8>)
 800ce92:	4873      	ldr	r0, [pc, #460]	; (800d060 <etharp_output+0x1ec>)
 800ce94:	f001 ff68 	bl	800ed68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d106      	bne.n	800ceac <etharp_output+0x38>
 800ce9e:	4b6e      	ldr	r3, [pc, #440]	; (800d058 <etharp_output+0x1e4>)
 800cea0:	f240 321f 	movw	r2, #799	; 0x31f
 800cea4:	496f      	ldr	r1, [pc, #444]	; (800d064 <etharp_output+0x1f0>)
 800cea6:	486e      	ldr	r0, [pc, #440]	; (800d060 <etharp_output+0x1ec>)
 800cea8:	f001 ff5e 	bl	800ed68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <etharp_output+0x4c>
 800ceb2:	4b69      	ldr	r3, [pc, #420]	; (800d058 <etharp_output+0x1e4>)
 800ceb4:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ceb8:	496b      	ldr	r1, [pc, #428]	; (800d068 <etharp_output+0x1f4>)
 800ceba:	4869      	ldr	r0, [pc, #420]	; (800d060 <etharp_output+0x1ec>)
 800cebc:	f001 ff54 	bl	800ed68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68f9      	ldr	r1, [r7, #12]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f000 fef8 	bl	800dcbc <ip4_addr_isbroadcast_u32>
 800cecc:	4603      	mov	r3, r0
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d002      	beq.n	800ced8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ced2:	4b66      	ldr	r3, [pc, #408]	; (800d06c <etharp_output+0x1f8>)
 800ced4:	61fb      	str	r3, [r7, #28]
 800ced6:	e0af      	b.n	800d038 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cee0:	2be0      	cmp	r3, #224	; 0xe0
 800cee2:	d118      	bne.n	800cf16 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cee4:	2301      	movs	r3, #1
 800cee6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cee8:	2300      	movs	r3, #0
 800ceea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ceec:	235e      	movs	r3, #94	; 0x5e
 800ceee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	3301      	adds	r3, #1
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cefa:	b2db      	uxtb	r3, r3
 800cefc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	3302      	adds	r3, #2
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	3303      	adds	r3, #3
 800cf0a:	781b      	ldrb	r3, [r3, #0]
 800cf0c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cf0e:	f107 0310 	add.w	r3, r7, #16
 800cf12:	61fb      	str	r3, [r7, #28]
 800cf14:	e090      	b.n	800d038 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3304      	adds	r3, #4
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	405a      	eors	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	3308      	adds	r3, #8
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4013      	ands	r3, r2
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d012      	beq.n	800cf54 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cf34:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d00b      	beq.n	800cf54 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	330c      	adds	r3, #12
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d003      	beq.n	800cf4e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	330c      	adds	r3, #12
 800cf4a:	61bb      	str	r3, [r7, #24]
 800cf4c:	e002      	b.n	800cf54 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cf4e:	f06f 0303 	mvn.w	r3, #3
 800cf52:	e07d      	b.n	800d050 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cf54:	4b46      	ldr	r3, [pc, #280]	; (800d070 <etharp_output+0x1fc>)
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	4619      	mov	r1, r3
 800cf5a:	4a46      	ldr	r2, [pc, #280]	; (800d074 <etharp_output+0x200>)
 800cf5c:	460b      	mov	r3, r1
 800cf5e:	005b      	lsls	r3, r3, #1
 800cf60:	440b      	add	r3, r1
 800cf62:	00db      	lsls	r3, r3, #3
 800cf64:	4413      	add	r3, r2
 800cf66:	3314      	adds	r3, #20
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d925      	bls.n	800cfba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cf6e:	4b40      	ldr	r3, [pc, #256]	; (800d070 <etharp_output+0x1fc>)
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	4619      	mov	r1, r3
 800cf74:	4a3f      	ldr	r2, [pc, #252]	; (800d074 <etharp_output+0x200>)
 800cf76:	460b      	mov	r3, r1
 800cf78:	005b      	lsls	r3, r3, #1
 800cf7a:	440b      	add	r3, r1
 800cf7c:	00db      	lsls	r3, r3, #3
 800cf7e:	4413      	add	r3, r2
 800cf80:	3308      	adds	r3, #8
 800cf82:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d117      	bne.n	800cfba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	4b38      	ldr	r3, [pc, #224]	; (800d070 <etharp_output+0x1fc>)
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	4618      	mov	r0, r3
 800cf94:	4937      	ldr	r1, [pc, #220]	; (800d074 <etharp_output+0x200>)
 800cf96:	4603      	mov	r3, r0
 800cf98:	005b      	lsls	r3, r3, #1
 800cf9a:	4403      	add	r3, r0
 800cf9c:	00db      	lsls	r3, r3, #3
 800cf9e:	440b      	add	r3, r1
 800cfa0:	3304      	adds	r3, #4
 800cfa2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d108      	bne.n	800cfba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cfa8:	4b31      	ldr	r3, [pc, #196]	; (800d070 <etharp_output+0x1fc>)
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	461a      	mov	r2, r3
 800cfae:	68b9      	ldr	r1, [r7, #8]
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f7ff fec5 	bl	800cd40 <etharp_output_to_arp_index>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	e04a      	b.n	800d050 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cfba:	2300      	movs	r3, #0
 800cfbc:	75fb      	strb	r3, [r7, #23]
 800cfbe:	e031      	b.n	800d024 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cfc0:	7dfa      	ldrb	r2, [r7, #23]
 800cfc2:	492c      	ldr	r1, [pc, #176]	; (800d074 <etharp_output+0x200>)
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	005b      	lsls	r3, r3, #1
 800cfc8:	4413      	add	r3, r2
 800cfca:	00db      	lsls	r3, r3, #3
 800cfcc:	440b      	add	r3, r1
 800cfce:	3314      	adds	r3, #20
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d923      	bls.n	800d01e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cfd6:	7dfa      	ldrb	r2, [r7, #23]
 800cfd8:	4926      	ldr	r1, [pc, #152]	; (800d074 <etharp_output+0x200>)
 800cfda:	4613      	mov	r3, r2
 800cfdc:	005b      	lsls	r3, r3, #1
 800cfde:	4413      	add	r3, r2
 800cfe0:	00db      	lsls	r3, r3, #3
 800cfe2:	440b      	add	r3, r1
 800cfe4:	3308      	adds	r3, #8
 800cfe6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d117      	bne.n	800d01e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	6819      	ldr	r1, [r3, #0]
 800cff2:	7dfa      	ldrb	r2, [r7, #23]
 800cff4:	481f      	ldr	r0, [pc, #124]	; (800d074 <etharp_output+0x200>)
 800cff6:	4613      	mov	r3, r2
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4413      	add	r3, r2
 800cffc:	00db      	lsls	r3, r3, #3
 800cffe:	4403      	add	r3, r0
 800d000:	3304      	adds	r3, #4
 800d002:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d004:	4299      	cmp	r1, r3
 800d006:	d10a      	bne.n	800d01e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d008:	4a19      	ldr	r2, [pc, #100]	; (800d070 <etharp_output+0x1fc>)
 800d00a:	7dfb      	ldrb	r3, [r7, #23]
 800d00c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	461a      	mov	r2, r3
 800d012:	68b9      	ldr	r1, [r7, #8]
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f7ff fe93 	bl	800cd40 <etharp_output_to_arp_index>
 800d01a:	4603      	mov	r3, r0
 800d01c:	e018      	b.n	800d050 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d01e:	7dfb      	ldrb	r3, [r7, #23]
 800d020:	3301      	adds	r3, #1
 800d022:	75fb      	strb	r3, [r7, #23]
 800d024:	7dfb      	ldrb	r3, [r7, #23]
 800d026:	2b09      	cmp	r3, #9
 800d028:	d9ca      	bls.n	800cfc0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	69b9      	ldr	r1, [r7, #24]
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f000 f822 	bl	800d078 <etharp_query>
 800d034:	4603      	mov	r3, r0
 800d036:	e00b      	b.n	800d050 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d03e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d042:	9300      	str	r3, [sp, #0]
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	68b9      	ldr	r1, [r7, #8]
 800d048:	68f8      	ldr	r0, [r7, #12]
 800d04a:	f001 fd45 	bl	800ead8 <ethernet_output>
 800d04e:	4603      	mov	r3, r0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3720      	adds	r7, #32
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	08011ec0 	.word	0x08011ec0
 800d05c:	08012010 	.word	0x08012010
 800d060:	08011f38 	.word	0x08011f38
 800d064:	08012060 	.word	0x08012060
 800d068:	08012000 	.word	0x08012000
 800d06c:	0801267c 	.word	0x0801267c
 800d070:	200088bc 	.word	0x200088bc
 800d074:	200087cc 	.word	0x200087cc

0800d078 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b08c      	sub	sp, #48	; 0x30
 800d07c:	af02      	add	r7, sp, #8
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	3326      	adds	r3, #38	; 0x26
 800d088:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d08a:	23ff      	movs	r3, #255	; 0xff
 800d08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d090:	2300      	movs	r3, #0
 800d092:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68f9      	ldr	r1, [r7, #12]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f000 fe0e 	bl	800dcbc <ip4_addr_isbroadcast_u32>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d10c      	bne.n	800d0c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d0ae:	2be0      	cmp	r3, #224	; 0xe0
 800d0b0:	d006      	beq.n	800d0c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d003      	beq.n	800d0c0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d102      	bne.n	800d0c6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d0c0:	f06f 030f 	mvn.w	r3, #15
 800d0c4:	e101      	b.n	800d2ca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d0c6:	68fa      	ldr	r2, [r7, #12]
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	68b8      	ldr	r0, [r7, #8]
 800d0cc:	f7ff fb60 	bl	800c790 <etharp_find_entry>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d0d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	da02      	bge.n	800d0e2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d0dc:	8a7b      	ldrh	r3, [r7, #18]
 800d0de:	b25b      	sxtb	r3, r3
 800d0e0:	e0f3      	b.n	800d2ca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d0e2:	8a7b      	ldrh	r3, [r7, #18]
 800d0e4:	2b7e      	cmp	r3, #126	; 0x7e
 800d0e6:	d906      	bls.n	800d0f6 <etharp_query+0x7e>
 800d0e8:	4b7a      	ldr	r3, [pc, #488]	; (800d2d4 <etharp_query+0x25c>)
 800d0ea:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d0ee:	497a      	ldr	r1, [pc, #488]	; (800d2d8 <etharp_query+0x260>)
 800d0f0:	487a      	ldr	r0, [pc, #488]	; (800d2dc <etharp_query+0x264>)
 800d0f2:	f001 fe39 	bl	800ed68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d0f6:	8a7b      	ldrh	r3, [r7, #18]
 800d0f8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d0fa:	7c7a      	ldrb	r2, [r7, #17]
 800d0fc:	4978      	ldr	r1, [pc, #480]	; (800d2e0 <etharp_query+0x268>)
 800d0fe:	4613      	mov	r3, r2
 800d100:	005b      	lsls	r3, r3, #1
 800d102:	4413      	add	r3, r2
 800d104:	00db      	lsls	r3, r3, #3
 800d106:	440b      	add	r3, r1
 800d108:	3314      	adds	r3, #20
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d115      	bne.n	800d13c <etharp_query+0xc4>
    is_new_entry = 1;
 800d110:	2301      	movs	r3, #1
 800d112:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d114:	7c7a      	ldrb	r2, [r7, #17]
 800d116:	4972      	ldr	r1, [pc, #456]	; (800d2e0 <etharp_query+0x268>)
 800d118:	4613      	mov	r3, r2
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	4413      	add	r3, r2
 800d11e:	00db      	lsls	r3, r3, #3
 800d120:	440b      	add	r3, r1
 800d122:	3314      	adds	r3, #20
 800d124:	2201      	movs	r2, #1
 800d126:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d128:	7c7a      	ldrb	r2, [r7, #17]
 800d12a:	496d      	ldr	r1, [pc, #436]	; (800d2e0 <etharp_query+0x268>)
 800d12c:	4613      	mov	r3, r2
 800d12e:	005b      	lsls	r3, r3, #1
 800d130:	4413      	add	r3, r2
 800d132:	00db      	lsls	r3, r3, #3
 800d134:	440b      	add	r3, r1
 800d136:	3308      	adds	r3, #8
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d13c:	7c7a      	ldrb	r2, [r7, #17]
 800d13e:	4968      	ldr	r1, [pc, #416]	; (800d2e0 <etharp_query+0x268>)
 800d140:	4613      	mov	r3, r2
 800d142:	005b      	lsls	r3, r3, #1
 800d144:	4413      	add	r3, r2
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	440b      	add	r3, r1
 800d14a:	3314      	adds	r3, #20
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d011      	beq.n	800d176 <etharp_query+0xfe>
 800d152:	7c7a      	ldrb	r2, [r7, #17]
 800d154:	4962      	ldr	r1, [pc, #392]	; (800d2e0 <etharp_query+0x268>)
 800d156:	4613      	mov	r3, r2
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	4413      	add	r3, r2
 800d15c:	00db      	lsls	r3, r3, #3
 800d15e:	440b      	add	r3, r1
 800d160:	3314      	adds	r3, #20
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d806      	bhi.n	800d176 <etharp_query+0xfe>
 800d168:	4b5a      	ldr	r3, [pc, #360]	; (800d2d4 <etharp_query+0x25c>)
 800d16a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d16e:	495d      	ldr	r1, [pc, #372]	; (800d2e4 <etharp_query+0x26c>)
 800d170:	485a      	ldr	r0, [pc, #360]	; (800d2dc <etharp_query+0x264>)
 800d172:	f001 fdf9 	bl	800ed68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d176:	6a3b      	ldr	r3, [r7, #32]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d102      	bne.n	800d182 <etharp_query+0x10a>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10c      	bne.n	800d19c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d182:	68b9      	ldr	r1, [r7, #8]
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f000 f963 	bl	800d450 <etharp_request>
 800d18a:	4603      	mov	r3, r0
 800d18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d102      	bne.n	800d19c <etharp_query+0x124>
      return result;
 800d196:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d19a:	e096      	b.n	800d2ca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d106      	bne.n	800d1b0 <etharp_query+0x138>
 800d1a2:	4b4c      	ldr	r3, [pc, #304]	; (800d2d4 <etharp_query+0x25c>)
 800d1a4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d1a8:	494f      	ldr	r1, [pc, #316]	; (800d2e8 <etharp_query+0x270>)
 800d1aa:	484c      	ldr	r0, [pc, #304]	; (800d2dc <etharp_query+0x264>)
 800d1ac:	f001 fddc 	bl	800ed68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d1b0:	7c7a      	ldrb	r2, [r7, #17]
 800d1b2:	494b      	ldr	r1, [pc, #300]	; (800d2e0 <etharp_query+0x268>)
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	4413      	add	r3, r2
 800d1ba:	00db      	lsls	r3, r3, #3
 800d1bc:	440b      	add	r3, r1
 800d1be:	3314      	adds	r3, #20
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d917      	bls.n	800d1f6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d1c6:	4a49      	ldr	r2, [pc, #292]	; (800d2ec <etharp_query+0x274>)
 800d1c8:	7c7b      	ldrb	r3, [r7, #17]
 800d1ca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d1cc:	7c7a      	ldrb	r2, [r7, #17]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	005b      	lsls	r3, r3, #1
 800d1d2:	4413      	add	r3, r2
 800d1d4:	00db      	lsls	r3, r3, #3
 800d1d6:	3308      	adds	r3, #8
 800d1d8:	4a41      	ldr	r2, [pc, #260]	; (800d2e0 <etharp_query+0x268>)
 800d1da:	4413      	add	r3, r2
 800d1dc:	3304      	adds	r3, #4
 800d1de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1e2:	9200      	str	r2, [sp, #0]
 800d1e4:	697a      	ldr	r2, [r7, #20]
 800d1e6:	6879      	ldr	r1, [r7, #4]
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f001 fc75 	bl	800ead8 <ethernet_output>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1f4:	e067      	b.n	800d2c6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d1f6:	7c7a      	ldrb	r2, [r7, #17]
 800d1f8:	4939      	ldr	r1, [pc, #228]	; (800d2e0 <etharp_query+0x268>)
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	005b      	lsls	r3, r3, #1
 800d1fe:	4413      	add	r3, r2
 800d200:	00db      	lsls	r3, r3, #3
 800d202:	440b      	add	r3, r1
 800d204:	3314      	adds	r3, #20
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d15c      	bne.n	800d2c6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d214:	e01c      	b.n	800d250 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	895a      	ldrh	r2, [r3, #10]
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	891b      	ldrh	r3, [r3, #8]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d10a      	bne.n	800d238 <etharp_query+0x1c0>
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d006      	beq.n	800d238 <etharp_query+0x1c0>
 800d22a:	4b2a      	ldr	r3, [pc, #168]	; (800d2d4 <etharp_query+0x25c>)
 800d22c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d230:	492f      	ldr	r1, [pc, #188]	; (800d2f0 <etharp_query+0x278>)
 800d232:	482a      	ldr	r0, [pc, #168]	; (800d2dc <etharp_query+0x264>)
 800d234:	f001 fd98 	bl	800ed68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	7b1b      	ldrb	r3, [r3, #12]
 800d23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d240:	2b00      	cmp	r3, #0
 800d242:	d002      	beq.n	800d24a <etharp_query+0x1d2>
        copy_needed = 1;
 800d244:	2301      	movs	r3, #1
 800d246:	61bb      	str	r3, [r7, #24]
        break;
 800d248:	e005      	b.n	800d256 <etharp_query+0x1de>
      }
      p = p->next;
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1df      	bne.n	800d216 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d007      	beq.n	800d26c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d262:	200e      	movs	r0, #14
 800d264:	f7f9 f96e 	bl	8006544 <pbuf_clone>
 800d268:	61f8      	str	r0, [r7, #28]
 800d26a:	e004      	b.n	800d276 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d270:	69f8      	ldr	r0, [r7, #28]
 800d272:	f7f8 ff9b 	bl	80061ac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d021      	beq.n	800d2c0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d27c:	7c7a      	ldrb	r2, [r7, #17]
 800d27e:	4918      	ldr	r1, [pc, #96]	; (800d2e0 <etharp_query+0x268>)
 800d280:	4613      	mov	r3, r2
 800d282:	005b      	lsls	r3, r3, #1
 800d284:	4413      	add	r3, r2
 800d286:	00db      	lsls	r3, r3, #3
 800d288:	440b      	add	r3, r1
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00a      	beq.n	800d2a6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d290:	7c7a      	ldrb	r2, [r7, #17]
 800d292:	4913      	ldr	r1, [pc, #76]	; (800d2e0 <etharp_query+0x268>)
 800d294:	4613      	mov	r3, r2
 800d296:	005b      	lsls	r3, r3, #1
 800d298:	4413      	add	r3, r2
 800d29a:	00db      	lsls	r3, r3, #3
 800d29c:	440b      	add	r3, r1
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7f8 fee3 	bl	800606c <pbuf_free>
      }
      arp_table[i].q = p;
 800d2a6:	7c7a      	ldrb	r2, [r7, #17]
 800d2a8:	490d      	ldr	r1, [pc, #52]	; (800d2e0 <etharp_query+0x268>)
 800d2aa:	4613      	mov	r3, r2
 800d2ac:	005b      	lsls	r3, r3, #1
 800d2ae:	4413      	add	r3, r2
 800d2b0:	00db      	lsls	r3, r3, #3
 800d2b2:	440b      	add	r3, r1
 800d2b4:	69fa      	ldr	r2, [r7, #28]
 800d2b6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2be:	e002      	b.n	800d2c6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d2c0:	23ff      	movs	r3, #255	; 0xff
 800d2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d2c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3728      	adds	r7, #40	; 0x28
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	08011ec0 	.word	0x08011ec0
 800d2d8:	0801206c 	.word	0x0801206c
 800d2dc:	08011f38 	.word	0x08011f38
 800d2e0:	200087cc 	.word	0x200087cc
 800d2e4:	0801207c 	.word	0x0801207c
 800d2e8:	08012060 	.word	0x08012060
 800d2ec:	200088bc 	.word	0x200088bc
 800d2f0:	080120a4 	.word	0x080120a4

0800d2f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08a      	sub	sp, #40	; 0x28
 800d2f8:	af02      	add	r7, sp, #8
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
 800d300:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d302:	2300      	movs	r3, #0
 800d304:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d106      	bne.n	800d31a <etharp_raw+0x26>
 800d30c:	4b3a      	ldr	r3, [pc, #232]	; (800d3f8 <etharp_raw+0x104>)
 800d30e:	f240 4257 	movw	r2, #1111	; 0x457
 800d312:	493a      	ldr	r1, [pc, #232]	; (800d3fc <etharp_raw+0x108>)
 800d314:	483a      	ldr	r0, [pc, #232]	; (800d400 <etharp_raw+0x10c>)
 800d316:	f001 fd27 	bl	800ed68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d31a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d31e:	211c      	movs	r1, #28
 800d320:	200e      	movs	r0, #14
 800d322:	f7f8 fbbf 	bl	8005aa4 <pbuf_alloc>
 800d326:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d328:	69bb      	ldr	r3, [r7, #24]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d102      	bne.n	800d334 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d32e:	f04f 33ff 	mov.w	r3, #4294967295
 800d332:	e05d      	b.n	800d3f0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d334:	69bb      	ldr	r3, [r7, #24]
 800d336:	895b      	ldrh	r3, [r3, #10]
 800d338:	2b1b      	cmp	r3, #27
 800d33a:	d806      	bhi.n	800d34a <etharp_raw+0x56>
 800d33c:	4b2e      	ldr	r3, [pc, #184]	; (800d3f8 <etharp_raw+0x104>)
 800d33e:	f240 4262 	movw	r2, #1122	; 0x462
 800d342:	4930      	ldr	r1, [pc, #192]	; (800d404 <etharp_raw+0x110>)
 800d344:	482e      	ldr	r0, [pc, #184]	; (800d400 <etharp_raw+0x10c>)
 800d346:	f001 fd0f 	bl	800ed68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d350:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d352:	4618      	mov	r0, r3
 800d354:	f7f7 fb2c 	bl	80049b0 <lwip_htons>
 800d358:	4603      	mov	r3, r0
 800d35a:	461a      	mov	r2, r3
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d366:	2b06      	cmp	r3, #6
 800d368:	d006      	beq.n	800d378 <etharp_raw+0x84>
 800d36a:	4b23      	ldr	r3, [pc, #140]	; (800d3f8 <etharp_raw+0x104>)
 800d36c:	f240 4269 	movw	r2, #1129	; 0x469
 800d370:	4925      	ldr	r1, [pc, #148]	; (800d408 <etharp_raw+0x114>)
 800d372:	4823      	ldr	r0, [pc, #140]	; (800d400 <etharp_raw+0x10c>)
 800d374:	f001 fcf8 	bl	800ed68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	3308      	adds	r3, #8
 800d37c:	2206      	movs	r2, #6
 800d37e:	6839      	ldr	r1, [r7, #0]
 800d380:	4618      	mov	r0, r3
 800d382:	f001 fdcc 	bl	800ef1e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	3312      	adds	r3, #18
 800d38a:	2206      	movs	r2, #6
 800d38c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d38e:	4618      	mov	r0, r3
 800d390:	f001 fdc5 	bl	800ef1e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	330e      	adds	r3, #14
 800d398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d39a:	6812      	ldr	r2, [r2, #0]
 800d39c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	3318      	adds	r3, #24
 800d3a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3a4:	6812      	ldr	r2, [r2, #0]
 800d3a6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	701a      	strb	r2, [r3, #0]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f042 0201 	orr.w	r2, r2, #1
 800d3b4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	f042 0208 	orr.w	r2, r2, #8
 800d3be:	709a      	strb	r2, [r3, #2]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	2206      	movs	r2, #6
 800d3c8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	2204      	movs	r2, #4
 800d3ce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d3d0:	f640 0306 	movw	r3, #2054	; 0x806
 800d3d4:	9300      	str	r3, [sp, #0]
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68ba      	ldr	r2, [r7, #8]
 800d3da:	69b9      	ldr	r1, [r7, #24]
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f001 fb7b 	bl	800ead8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d3e2:	69b8      	ldr	r0, [r7, #24]
 800d3e4:	f7f8 fe42 	bl	800606c <pbuf_free>
  p = NULL;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d3ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3720      	adds	r7, #32
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	08011ec0 	.word	0x08011ec0
 800d3fc:	08012010 	.word	0x08012010
 800d400:	08011f38 	.word	0x08011f38
 800d404:	080120c0 	.word	0x080120c0
 800d408:	080120f4 	.word	0x080120f4

0800d40c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b088      	sub	sp, #32
 800d410:	af04      	add	r7, sp, #16
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d428:	2201      	movs	r2, #1
 800d42a:	9203      	str	r2, [sp, #12]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	9202      	str	r2, [sp, #8]
 800d430:	4a06      	ldr	r2, [pc, #24]	; (800d44c <etharp_request_dst+0x40>)
 800d432:	9201      	str	r2, [sp, #4]
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	4603      	mov	r3, r0
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f7ff ff5a 	bl	800d2f4 <etharp_raw>
 800d440:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	08012684 	.word	0x08012684

0800d450 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b082      	sub	sp, #8
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d45a:	4a05      	ldr	r2, [pc, #20]	; (800d470 <etharp_request+0x20>)
 800d45c:	6839      	ldr	r1, [r7, #0]
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff ffd4 	bl	800d40c <etharp_request_dst>
 800d464:	4603      	mov	r3, r0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
 800d46e:	bf00      	nop
 800d470:	0801267c 	.word	0x0801267c

0800d474 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b08e      	sub	sp, #56	; 0x38
 800d478:	af04      	add	r7, sp, #16
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d47e:	4b79      	ldr	r3, [pc, #484]	; (800d664 <icmp_input+0x1f0>)
 800d480:	689b      	ldr	r3, [r3, #8]
 800d482:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	f003 030f 	and.w	r3, r3, #15
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	b2db      	uxtb	r3, r3
 800d492:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d494:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d496:	2b13      	cmp	r3, #19
 800d498:	f240 80cd 	bls.w	800d636 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	895b      	ldrh	r3, [r3, #10]
 800d4a0:	2b03      	cmp	r3, #3
 800d4a2:	f240 80ca 	bls.w	800d63a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	685b      	ldr	r3, [r3, #4]
 800d4aa:	781b      	ldrb	r3, [r3, #0]
 800d4ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d4b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f000 80b7 	beq.w	800d628 <icmp_input+0x1b4>
 800d4ba:	2b08      	cmp	r3, #8
 800d4bc:	f040 80b7 	bne.w	800d62e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d4c0:	4b69      	ldr	r3, [pc, #420]	; (800d668 <icmp_input+0x1f4>)
 800d4c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d4c4:	4b67      	ldr	r3, [pc, #412]	; (800d664 <icmp_input+0x1f0>)
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4cc:	2be0      	cmp	r3, #224	; 0xe0
 800d4ce:	f000 80bb 	beq.w	800d648 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d4d2:	4b64      	ldr	r3, [pc, #400]	; (800d664 <icmp_input+0x1f0>)
 800d4d4:	695b      	ldr	r3, [r3, #20]
 800d4d6:	4a63      	ldr	r2, [pc, #396]	; (800d664 <icmp_input+0x1f0>)
 800d4d8:	6812      	ldr	r2, [r2, #0]
 800d4da:	4611      	mov	r1, r2
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 fbed 	bl	800dcbc <ip4_addr_isbroadcast_u32>
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	f040 80b1 	bne.w	800d64c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	891b      	ldrh	r3, [r3, #8]
 800d4ee:	2b07      	cmp	r3, #7
 800d4f0:	f240 80a5 	bls.w	800d63e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d4f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4f6:	330e      	adds	r3, #14
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f7f8 fd20 	bl	8005f40 <pbuf_add_header>
 800d500:	4603      	mov	r3, r0
 800d502:	2b00      	cmp	r3, #0
 800d504:	d04b      	beq.n	800d59e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	891a      	ldrh	r2, [r3, #8]
 800d50a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d50c:	4413      	add	r3, r2
 800d50e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	891b      	ldrh	r3, [r3, #8]
 800d514:	8b7a      	ldrh	r2, [r7, #26]
 800d516:	429a      	cmp	r2, r3
 800d518:	f0c0 809a 	bcc.w	800d650 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d51c:	8b7b      	ldrh	r3, [r7, #26]
 800d51e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d522:	4619      	mov	r1, r3
 800d524:	200e      	movs	r0, #14
 800d526:	f7f8 fabd 	bl	8005aa4 <pbuf_alloc>
 800d52a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f000 8090 	beq.w	800d654 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	895b      	ldrh	r3, [r3, #10]
 800d538:	461a      	mov	r2, r3
 800d53a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d53c:	3308      	adds	r3, #8
 800d53e:	429a      	cmp	r2, r3
 800d540:	d203      	bcs.n	800d54a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d542:	6978      	ldr	r0, [r7, #20]
 800d544:	f7f8 fd92 	bl	800606c <pbuf_free>
          goto icmperr;
 800d548:	e085      	b.n	800d656 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d552:	4618      	mov	r0, r3
 800d554:	f001 fce3 	bl	800ef1e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d558:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d55a:	4619      	mov	r1, r3
 800d55c:	6978      	ldr	r0, [r7, #20]
 800d55e:	f7f8 fcff 	bl	8005f60 <pbuf_remove_header>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	d009      	beq.n	800d57c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d568:	4b40      	ldr	r3, [pc, #256]	; (800d66c <icmp_input+0x1f8>)
 800d56a:	22b6      	movs	r2, #182	; 0xb6
 800d56c:	4940      	ldr	r1, [pc, #256]	; (800d670 <icmp_input+0x1fc>)
 800d56e:	4841      	ldr	r0, [pc, #260]	; (800d674 <icmp_input+0x200>)
 800d570:	f001 fbfa 	bl	800ed68 <iprintf>
          pbuf_free(r);
 800d574:	6978      	ldr	r0, [r7, #20]
 800d576:	f7f8 fd79 	bl	800606c <pbuf_free>
          goto icmperr;
 800d57a:	e06c      	b.n	800d656 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d57c:	6879      	ldr	r1, [r7, #4]
 800d57e:	6978      	ldr	r0, [r7, #20]
 800d580:	f7f8 fe9c 	bl	80062bc <pbuf_copy>
 800d584:	4603      	mov	r3, r0
 800d586:	2b00      	cmp	r3, #0
 800d588:	d003      	beq.n	800d592 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d58a:	6978      	ldr	r0, [r7, #20]
 800d58c:	f7f8 fd6e 	bl	800606c <pbuf_free>
          goto icmperr;
 800d590:	e061      	b.n	800d656 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7f8 fd6a 	bl	800606c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	607b      	str	r3, [r7, #4]
 800d59c:	e00f      	b.n	800d5be <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d59e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5a0:	330e      	adds	r3, #14
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f7f8 fcdb 	bl	8005f60 <pbuf_remove_header>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d006      	beq.n	800d5be <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d5b0:	4b2e      	ldr	r3, [pc, #184]	; (800d66c <icmp_input+0x1f8>)
 800d5b2:	22c7      	movs	r2, #199	; 0xc7
 800d5b4:	4930      	ldr	r1, [pc, #192]	; (800d678 <icmp_input+0x204>)
 800d5b6:	482f      	ldr	r0, [pc, #188]	; (800d674 <icmp_input+0x200>)
 800d5b8:	f001 fbd6 	bl	800ed68 <iprintf>
          goto icmperr;
 800d5bc:	e04b      	b.n	800d656 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d5c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7f8 fcb9 	bl	8005f40 <pbuf_add_header>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d12b      	bne.n	800d62c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	681a      	ldr	r2, [r3, #0]
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d5e2:	4b20      	ldr	r3, [pc, #128]	; (800d664 <icmp_input+0x1f0>)
 800d5e4:	691a      	ldr	r2, [r3, #16]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	709a      	strb	r2, [r3, #2]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	22ff      	movs	r2, #255	; 0xff
 800d5fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	729a      	strb	r2, [r3, #10]
 800d606:	2200      	movs	r2, #0
 800d608:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	9302      	str	r3, [sp, #8]
 800d60e:	2301      	movs	r3, #1
 800d610:	9301      	str	r3, [sp, #4]
 800d612:	2300      	movs	r3, #0
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	23ff      	movs	r3, #255	; 0xff
 800d618:	2200      	movs	r2, #0
 800d61a:	69f9      	ldr	r1, [r7, #28]
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 fa75 	bl	800db0c <ip4_output_if>
 800d622:	4603      	mov	r3, r0
 800d624:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d626:	e001      	b.n	800d62c <icmp_input+0x1b8>
      break;
 800d628:	bf00      	nop
 800d62a:	e000      	b.n	800d62e <icmp_input+0x1ba>
      break;
 800d62c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7f8 fd1c 	bl	800606c <pbuf_free>
  return;
 800d634:	e013      	b.n	800d65e <icmp_input+0x1ea>
    goto lenerr;
 800d636:	bf00      	nop
 800d638:	e002      	b.n	800d640 <icmp_input+0x1cc>
    goto lenerr;
 800d63a:	bf00      	nop
 800d63c:	e000      	b.n	800d640 <icmp_input+0x1cc>
        goto lenerr;
 800d63e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7f8 fd13 	bl	800606c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d646:	e00a      	b.n	800d65e <icmp_input+0x1ea>
        goto icmperr;
 800d648:	bf00      	nop
 800d64a:	e004      	b.n	800d656 <icmp_input+0x1e2>
        goto icmperr;
 800d64c:	bf00      	nop
 800d64e:	e002      	b.n	800d656 <icmp_input+0x1e2>
          goto icmperr;
 800d650:	bf00      	nop
 800d652:	e000      	b.n	800d656 <icmp_input+0x1e2>
          goto icmperr;
 800d654:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7f8 fd08 	bl	800606c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d65c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d65e:	3728      	adds	r7, #40	; 0x28
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	200051fc 	.word	0x200051fc
 800d668:	20005210 	.word	0x20005210
 800d66c:	08012138 	.word	0x08012138
 800d670:	08012170 	.word	0x08012170
 800d674:	080121a8 	.word	0x080121a8
 800d678:	080121d0 	.word	0x080121d0

0800d67c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	460b      	mov	r3, r1
 800d686:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d688:	78fb      	ldrb	r3, [r7, #3]
 800d68a:	461a      	mov	r2, r3
 800d68c:	2103      	movs	r1, #3
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 f814 	bl	800d6bc <icmp_send_response>
}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d6a8:	78fb      	ldrb	r3, [r7, #3]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	210b      	movs	r1, #11
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f804 	bl	800d6bc <icmp_send_response>
}
 800d6b4:	bf00      	nop
 800d6b6:	3708      	adds	r7, #8
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08c      	sub	sp, #48	; 0x30
 800d6c0:	af04      	add	r7, sp, #16
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	70fb      	strb	r3, [r7, #3]
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d6cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d6d0:	2124      	movs	r1, #36	; 0x24
 800d6d2:	2022      	movs	r0, #34	; 0x22
 800d6d4:	f7f8 f9e6 	bl	8005aa4 <pbuf_alloc>
 800d6d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d04c      	beq.n	800d77a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	895b      	ldrh	r3, [r3, #10]
 800d6e4:	2b23      	cmp	r3, #35	; 0x23
 800d6e6:	d806      	bhi.n	800d6f6 <icmp_send_response+0x3a>
 800d6e8:	4b26      	ldr	r3, [pc, #152]	; (800d784 <icmp_send_response+0xc8>)
 800d6ea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d6ee:	4926      	ldr	r1, [pc, #152]	; (800d788 <icmp_send_response+0xcc>)
 800d6f0:	4826      	ldr	r0, [pc, #152]	; (800d78c <icmp_send_response+0xd0>)
 800d6f2:	f001 fb39 	bl	800ed68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	78fa      	ldrb	r2, [r7, #3]
 800d706:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	78ba      	ldrb	r2, [r7, #2]
 800d70c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	2200      	movs	r2, #0
 800d712:	711a      	strb	r2, [r3, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	2200      	movs	r2, #0
 800d71c:	719a      	strb	r2, [r3, #6]
 800d71e:	2200      	movs	r2, #0
 800d720:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	f103 0008 	add.w	r0, r3, #8
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	221c      	movs	r2, #28
 800d730:	4619      	mov	r1, r3
 800d732:	f001 fbf4 	bl	800ef1e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	68db      	ldr	r3, [r3, #12]
 800d73a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d73c:	f107 030c 	add.w	r3, r7, #12
 800d740:	4618      	mov	r0, r3
 800d742:	f000 f825 	bl	800d790 <ip4_route>
 800d746:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d011      	beq.n	800d772 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	2200      	movs	r2, #0
 800d752:	709a      	strb	r2, [r3, #2]
 800d754:	2200      	movs	r2, #0
 800d756:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d758:	f107 020c 	add.w	r2, r7, #12
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	9302      	str	r3, [sp, #8]
 800d760:	2301      	movs	r3, #1
 800d762:	9301      	str	r3, [sp, #4]
 800d764:	2300      	movs	r3, #0
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	23ff      	movs	r3, #255	; 0xff
 800d76a:	2100      	movs	r1, #0
 800d76c:	69f8      	ldr	r0, [r7, #28]
 800d76e:	f000 f9cd 	bl	800db0c <ip4_output_if>
  }
  pbuf_free(q);
 800d772:	69f8      	ldr	r0, [r7, #28]
 800d774:	f7f8 fc7a 	bl	800606c <pbuf_free>
 800d778:	e000      	b.n	800d77c <icmp_send_response+0xc0>
    return;
 800d77a:	bf00      	nop
}
 800d77c:	3720      	adds	r7, #32
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	08012138 	.word	0x08012138
 800d788:	08012204 	.word	0x08012204
 800d78c:	080121a8 	.word	0x080121a8

0800d790 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d798:	4b33      	ldr	r3, [pc, #204]	; (800d868 <ip4_route+0xd8>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	60fb      	str	r3, [r7, #12]
 800d79e:	e036      	b.n	800d80e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7a6:	f003 0301 	and.w	r3, r3, #1
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d02b      	beq.n	800d808 <ip4_route+0x78>
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7b6:	089b      	lsrs	r3, r3, #2
 800d7b8:	f003 0301 	and.w	r3, r3, #1
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d022      	beq.n	800d808 <ip4_route+0x78>
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d01d      	beq.n	800d808 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	405a      	eors	r2, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	3308      	adds	r3, #8
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4013      	ands	r3, r2
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d101      	bne.n	800d7e8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	e038      	b.n	800d85a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7ee:	f003 0302 	and.w	r3, r3, #2
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d108      	bne.n	800d808 <ip4_route+0x78>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	330c      	adds	r3, #12
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	429a      	cmp	r2, r3
 800d802:	d101      	bne.n	800d808 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	e028      	b.n	800d85a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	60fb      	str	r3, [r7, #12]
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1c5      	bne.n	800d7a0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d814:	4b15      	ldr	r3, [pc, #84]	; (800d86c <ip4_route+0xdc>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d01a      	beq.n	800d852 <ip4_route+0xc2>
 800d81c:	4b13      	ldr	r3, [pc, #76]	; (800d86c <ip4_route+0xdc>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d012      	beq.n	800d852 <ip4_route+0xc2>
 800d82c:	4b0f      	ldr	r3, [pc, #60]	; (800d86c <ip4_route+0xdc>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d834:	f003 0304 	and.w	r3, r3, #4
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00a      	beq.n	800d852 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d83c:	4b0b      	ldr	r3, [pc, #44]	; (800d86c <ip4_route+0xdc>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	3304      	adds	r3, #4
 800d842:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d844:	2b00      	cmp	r3, #0
 800d846:	d004      	beq.n	800d852 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	2b7f      	cmp	r3, #127	; 0x7f
 800d850:	d101      	bne.n	800d856 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d852:	2300      	movs	r3, #0
 800d854:	e001      	b.n	800d85a <ip4_route+0xca>
  }

  return netif_default;
 800d856:	4b05      	ldr	r3, [pc, #20]	; (800d86c <ip4_route+0xdc>)
 800d858:	681b      	ldr	r3, [r3, #0]
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	20008760 	.word	0x20008760
 800d86c:	20008764 	.word	0x20008764

0800d870 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d87e:	f003 0301 	and.w	r3, r3, #1
 800d882:	b2db      	uxtb	r3, r3
 800d884:	2b00      	cmp	r3, #0
 800d886:	d016      	beq.n	800d8b6 <ip4_input_accept+0x46>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	3304      	adds	r3, #4
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d011      	beq.n	800d8b6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d892:	4b0b      	ldr	r3, [pc, #44]	; (800d8c0 <ip4_input_accept+0x50>)
 800d894:	695a      	ldr	r2, [r3, #20]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	3304      	adds	r3, #4
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d008      	beq.n	800d8b2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d8a0:	4b07      	ldr	r3, [pc, #28]	; (800d8c0 <ip4_input_accept+0x50>)
 800d8a2:	695b      	ldr	r3, [r3, #20]
 800d8a4:	6879      	ldr	r1, [r7, #4]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 fa08 	bl	800dcbc <ip4_addr_isbroadcast_u32>
 800d8ac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d001      	beq.n	800d8b6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e000      	b.n	800d8b8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3708      	adds	r7, #8
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	200051fc 	.word	0x200051fc

0800d8c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	091b      	lsrs	r3, r3, #4
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b04      	cmp	r3, #4
 800d8de:	d004      	beq.n	800d8ea <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7f8 fbc3 	bl	800606c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	e107      	b.n	800dafa <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	f003 030f 	and.w	r3, r3, #15
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	885b      	ldrh	r3, [r3, #2]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	4618      	mov	r0, r3
 800d902:	f7f7 f855 	bl	80049b0 <lwip_htons>
 800d906:	4603      	mov	r3, r0
 800d908:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	891b      	ldrh	r3, [r3, #8]
 800d90e:	89ba      	ldrh	r2, [r7, #12]
 800d910:	429a      	cmp	r2, r3
 800d912:	d204      	bcs.n	800d91e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d914:	89bb      	ldrh	r3, [r7, #12]
 800d916:	4619      	mov	r1, r3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7f8 fa21 	bl	8005d60 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	895b      	ldrh	r3, [r3, #10]
 800d922:	89fa      	ldrh	r2, [r7, #14]
 800d924:	429a      	cmp	r2, r3
 800d926:	d807      	bhi.n	800d938 <ip4_input+0x74>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	891b      	ldrh	r3, [r3, #8]
 800d92c:	89ba      	ldrh	r2, [r7, #12]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d802      	bhi.n	800d938 <ip4_input+0x74>
 800d932:	89fb      	ldrh	r3, [r7, #14]
 800d934:	2b13      	cmp	r3, #19
 800d936:	d804      	bhi.n	800d942 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7f8 fb97 	bl	800606c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d93e:	2300      	movs	r3, #0
 800d940:	e0db      	b.n	800dafa <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	4a6f      	ldr	r2, [pc, #444]	; (800db04 <ip4_input+0x240>)
 800d948:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	4a6d      	ldr	r2, [pc, #436]	; (800db04 <ip4_input+0x240>)
 800d950:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d952:	4b6c      	ldr	r3, [pc, #432]	; (800db04 <ip4_input+0x240>)
 800d954:	695b      	ldr	r3, [r3, #20]
 800d956:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d95a:	2be0      	cmp	r3, #224	; 0xe0
 800d95c:	d112      	bne.n	800d984 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d964:	f003 0301 	and.w	r3, r3, #1
 800d968:	b2db      	uxtb	r3, r3
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d007      	beq.n	800d97e <ip4_input+0xba>
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	3304      	adds	r3, #4
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <ip4_input+0xba>
      netif = inp;
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	613b      	str	r3, [r7, #16]
 800d97c:	e02a      	b.n	800d9d4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d97e:	2300      	movs	r3, #0
 800d980:	613b      	str	r3, [r7, #16]
 800d982:	e027      	b.n	800d9d4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d984:	6838      	ldr	r0, [r7, #0]
 800d986:	f7ff ff73 	bl	800d870 <ip4_input_accept>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d002      	beq.n	800d996 <ip4_input+0xd2>
      netif = inp;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	613b      	str	r3, [r7, #16]
 800d994:	e01e      	b.n	800d9d4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d996:	2300      	movs	r3, #0
 800d998:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d99a:	4b5a      	ldr	r3, [pc, #360]	; (800db04 <ip4_input+0x240>)
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b7f      	cmp	r3, #127	; 0x7f
 800d9a2:	d017      	beq.n	800d9d4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d9a4:	4b58      	ldr	r3, [pc, #352]	; (800db08 <ip4_input+0x244>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	e00e      	b.n	800d9ca <ip4_input+0x106>
          if (netif == inp) {
 800d9ac:	693a      	ldr	r2, [r7, #16]
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d006      	beq.n	800d9c2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d9b4:	6938      	ldr	r0, [r7, #16]
 800d9b6:	f7ff ff5b 	bl	800d870 <ip4_input_accept>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d108      	bne.n	800d9d2 <ip4_input+0x10e>
 800d9c0:	e000      	b.n	800d9c4 <ip4_input+0x100>
            continue;
 800d9c2:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	613b      	str	r3, [r7, #16]
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1ed      	bne.n	800d9ac <ip4_input+0xe8>
 800d9d0:	e000      	b.n	800d9d4 <ip4_input+0x110>
            break;
 800d9d2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d9d4:	4b4b      	ldr	r3, [pc, #300]	; (800db04 <ip4_input+0x240>)
 800d9d6:	691b      	ldr	r3, [r3, #16]
 800d9d8:	6839      	ldr	r1, [r7, #0]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f000 f96e 	bl	800dcbc <ip4_addr_isbroadcast_u32>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d105      	bne.n	800d9f2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d9e6:	4b47      	ldr	r3, [pc, #284]	; (800db04 <ip4_input+0x240>)
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d9ee:	2be0      	cmp	r3, #224	; 0xe0
 800d9f0:	d104      	bne.n	800d9fc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7f8 fb3a 	bl	800606c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	e07e      	b.n	800dafa <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d104      	bne.n	800da0c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7f8 fb32 	bl	800606c <pbuf_free>
    return ERR_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	e076      	b.n	800dafa <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	88db      	ldrh	r3, [r3, #6]
 800da10:	b29b      	uxth	r3, r3
 800da12:	461a      	mov	r2, r3
 800da14:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800da18:	4013      	ands	r3, r2
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00b      	beq.n	800da36 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f000 fc92 	bl	800e348 <ip4_reass>
 800da24:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d101      	bne.n	800da30 <ip4_input+0x16c>
      return ERR_OK;
 800da2c:	2300      	movs	r3, #0
 800da2e:	e064      	b.n	800dafa <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800da36:	4a33      	ldr	r2, [pc, #204]	; (800db04 <ip4_input+0x240>)
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800da3c:	4a31      	ldr	r2, [pc, #196]	; (800db04 <ip4_input+0x240>)
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800da42:	4a30      	ldr	r2, [pc, #192]	; (800db04 <ip4_input+0x240>)
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800da48:	697b      	ldr	r3, [r7, #20]
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	f003 030f 	and.w	r3, r3, #15
 800da50:	b2db      	uxtb	r3, r3
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	b2db      	uxtb	r3, r3
 800da56:	b29a      	uxth	r2, r3
 800da58:	4b2a      	ldr	r3, [pc, #168]	; (800db04 <ip4_input+0x240>)
 800da5a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800da5c:	89fb      	ldrh	r3, [r7, #14]
 800da5e:	4619      	mov	r1, r3
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f7f8 fa7d 	bl	8005f60 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	7a5b      	ldrb	r3, [r3, #9]
 800da6a:	2b11      	cmp	r3, #17
 800da6c:	d006      	beq.n	800da7c <ip4_input+0x1b8>
 800da6e:	2b11      	cmp	r3, #17
 800da70:	dc13      	bgt.n	800da9a <ip4_input+0x1d6>
 800da72:	2b01      	cmp	r3, #1
 800da74:	d00c      	beq.n	800da90 <ip4_input+0x1cc>
 800da76:	2b06      	cmp	r3, #6
 800da78:	d005      	beq.n	800da86 <ip4_input+0x1c2>
 800da7a:	e00e      	b.n	800da9a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7fe f8e6 	bl	800bc50 <udp_input>
        break;
 800da84:	e026      	b.n	800dad4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800da86:	6839      	ldr	r1, [r7, #0]
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7fa f927 	bl	8007cdc <tcp_input>
        break;
 800da8e:	e021      	b.n	800dad4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800da90:	6839      	ldr	r1, [r7, #0]
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff fcee 	bl	800d474 <icmp_input>
        break;
 800da98:	e01c      	b.n	800dad4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800da9a:	4b1a      	ldr	r3, [pc, #104]	; (800db04 <ip4_input+0x240>)
 800da9c:	695b      	ldr	r3, [r3, #20]
 800da9e:	6939      	ldr	r1, [r7, #16]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 f90b 	bl	800dcbc <ip4_addr_isbroadcast_u32>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10f      	bne.n	800dacc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800daac:	4b15      	ldr	r3, [pc, #84]	; (800db04 <ip4_input+0x240>)
 800daae:	695b      	ldr	r3, [r3, #20]
 800dab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dab4:	2be0      	cmp	r3, #224	; 0xe0
 800dab6:	d009      	beq.n	800dacc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dab8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7f8 fac1 	bl	8006046 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dac4:	2102      	movs	r1, #2
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f7ff fdd8 	bl	800d67c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7f8 facd 	bl	800606c <pbuf_free>
        break;
 800dad2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dad4:	4b0b      	ldr	r3, [pc, #44]	; (800db04 <ip4_input+0x240>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dada:	4b0a      	ldr	r3, [pc, #40]	; (800db04 <ip4_input+0x240>)
 800dadc:	2200      	movs	r2, #0
 800dade:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dae0:	4b08      	ldr	r3, [pc, #32]	; (800db04 <ip4_input+0x240>)
 800dae2:	2200      	movs	r2, #0
 800dae4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dae6:	4b07      	ldr	r3, [pc, #28]	; (800db04 <ip4_input+0x240>)
 800dae8:	2200      	movs	r2, #0
 800daea:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800daec:	4b05      	ldr	r3, [pc, #20]	; (800db04 <ip4_input+0x240>)
 800daee:	2200      	movs	r2, #0
 800daf0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800daf2:	4b04      	ldr	r3, [pc, #16]	; (800db04 <ip4_input+0x240>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3718      	adds	r7, #24
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	200051fc 	.word	0x200051fc
 800db08:	20008760 	.word	0x20008760

0800db0c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08a      	sub	sp, #40	; 0x28
 800db10:	af04      	add	r7, sp, #16
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
 800db18:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d009      	beq.n	800db38 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d003      	beq.n	800db32 <ip4_output_if+0x26>
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d102      	bne.n	800db38 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800db32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db34:	3304      	adds	r3, #4
 800db36:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800db38:	78fa      	ldrb	r2, [r7, #3]
 800db3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3c:	9302      	str	r3, [sp, #8]
 800db3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db42:	9301      	str	r3, [sp, #4]
 800db44:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db48:	9300      	str	r3, [sp, #0]
 800db4a:	4613      	mov	r3, r2
 800db4c:	687a      	ldr	r2, [r7, #4]
 800db4e:	6979      	ldr	r1, [r7, #20]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f000 f805 	bl	800db60 <ip4_output_if_src>
 800db56:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b088      	sub	sp, #32
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
 800db6c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	7b9b      	ldrb	r3, [r3, #14]
 800db72:	2b01      	cmp	r3, #1
 800db74:	d006      	beq.n	800db84 <ip4_output_if_src+0x24>
 800db76:	4b4b      	ldr	r3, [pc, #300]	; (800dca4 <ip4_output_if_src+0x144>)
 800db78:	f44f 7255 	mov.w	r2, #852	; 0x354
 800db7c:	494a      	ldr	r1, [pc, #296]	; (800dca8 <ip4_output_if_src+0x148>)
 800db7e:	484b      	ldr	r0, [pc, #300]	; (800dcac <ip4_output_if_src+0x14c>)
 800db80:	f001 f8f2 	bl	800ed68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d060      	beq.n	800dc4c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800db8a:	2314      	movs	r3, #20
 800db8c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800db8e:	2114      	movs	r1, #20
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f7f8 f9d5 	bl	8005f40 <pbuf_add_header>
 800db96:	4603      	mov	r3, r0
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800db9c:	f06f 0301 	mvn.w	r3, #1
 800dba0:	e07c      	b.n	800dc9c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	685b      	ldr	r3, [r3, #4]
 800dba6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	895b      	ldrh	r3, [r3, #10]
 800dbac:	2b13      	cmp	r3, #19
 800dbae:	d806      	bhi.n	800dbbe <ip4_output_if_src+0x5e>
 800dbb0:	4b3c      	ldr	r3, [pc, #240]	; (800dca4 <ip4_output_if_src+0x144>)
 800dbb2:	f44f 7262 	mov.w	r2, #904	; 0x388
 800dbb6:	493e      	ldr	r1, [pc, #248]	; (800dcb0 <ip4_output_if_src+0x150>)
 800dbb8:	483c      	ldr	r0, [pc, #240]	; (800dcac <ip4_output_if_src+0x14c>)
 800dbba:	f001 f8d5 	bl	800ed68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	78fa      	ldrb	r2, [r7, #3]
 800dbc2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dbca:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dbd4:	8b7b      	ldrh	r3, [r7, #26]
 800dbd6:	089b      	lsrs	r3, r3, #2
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dbec:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	891b      	ldrh	r3, [r3, #8]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7f6 fedc 	bl	80049b0 <lwip_htons>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	2200      	movs	r2, #0
 800dc04:	719a      	strb	r2, [r3, #6]
 800dc06:	2200      	movs	r2, #0
 800dc08:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dc0a:	4b2a      	ldr	r3, [pc, #168]	; (800dcb4 <ip4_output_if_src+0x154>)
 800dc0c:	881b      	ldrh	r3, [r3, #0]
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7f6 fece 	bl	80049b0 <lwip_htons>
 800dc14:	4603      	mov	r3, r0
 800dc16:	461a      	mov	r2, r3
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dc1c:	4b25      	ldr	r3, [pc, #148]	; (800dcb4 <ip4_output_if_src+0x154>)
 800dc1e:	881b      	ldrh	r3, [r3, #0]
 800dc20:	3301      	adds	r3, #1
 800dc22:	b29a      	uxth	r2, r3
 800dc24:	4b23      	ldr	r3, [pc, #140]	; (800dcb4 <ip4_output_if_src+0x154>)
 800dc26:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d104      	bne.n	800dc38 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dc2e:	4b22      	ldr	r3, [pc, #136]	; (800dcb8 <ip4_output_if_src+0x158>)
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	60da      	str	r2, [r3, #12]
 800dc36:	e003      	b.n	800dc40 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	69fb      	ldr	r3, [r7, #28]
 800dc3e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	2200      	movs	r2, #0
 800dc44:	729a      	strb	r2, [r3, #10]
 800dc46:	2200      	movs	r2, #0
 800dc48:	72da      	strb	r2, [r3, #11]
 800dc4a:	e00f      	b.n	800dc6c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	895b      	ldrh	r3, [r3, #10]
 800dc50:	2b13      	cmp	r3, #19
 800dc52:	d802      	bhi.n	800dc5a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dc54:	f06f 0301 	mvn.w	r3, #1
 800dc58:	e020      	b.n	800dc9c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dc66:	f107 0314 	add.w	r3, r7, #20
 800dc6a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00c      	beq.n	800dc8e <ip4_output_if_src+0x12e>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	891a      	ldrh	r2, [r3, #8]
 800dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d906      	bls.n	800dc8e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f000 fd53 	bl	800e730 <ip4_frag>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	e006      	b.n	800dc9c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc90:	695b      	ldr	r3, [r3, #20]
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	68f9      	ldr	r1, [r7, #12]
 800dc96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dc98:	4798      	blx	r3
 800dc9a:	4603      	mov	r3, r0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3720      	adds	r7, #32
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	08012230 	.word	0x08012230
 800dca8:	08012264 	.word	0x08012264
 800dcac:	08012270 	.word	0x08012270
 800dcb0:	08012298 	.word	0x08012298
 800dcb4:	200088be 	.word	0x200088be
 800dcb8:	08012678 	.word	0x08012678

0800dcbc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b085      	sub	sp, #20
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcd0:	d002      	beq.n	800dcd8 <ip4_addr_isbroadcast_u32+0x1c>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d101      	bne.n	800dcdc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e02a      	b.n	800dd32 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dce2:	f003 0302 	and.w	r3, r3, #2
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d101      	bne.n	800dcee <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800dcea:	2300      	movs	r3, #0
 800dcec:	e021      	b.n	800dd32 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d101      	bne.n	800dcfe <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e019      	b.n	800dd32 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	3304      	adds	r3, #4
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	405a      	eors	r2, r3
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	3308      	adds	r3, #8
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4013      	ands	r3, r2
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10d      	bne.n	800dd30 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	3308      	adds	r3, #8
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	43da      	mvns	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	3308      	adds	r3, #8
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d101      	bne.n	800dd30 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	e000      	b.n	800dd32 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800dd30:	2300      	movs	r3, #0
  }
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3714      	adds	r7, #20
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr
	...

0800dd40 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800dd46:	2300      	movs	r3, #0
 800dd48:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800dd4a:	4b12      	ldr	r3, [pc, #72]	; (800dd94 <ip_reass_tmr+0x54>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800dd50:	e018      	b.n	800dd84 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	7fdb      	ldrb	r3, [r3, #31]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d00b      	beq.n	800dd72 <ip_reass_tmr+0x32>
      r->timer--;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	7fdb      	ldrb	r3, [r3, #31]
 800dd5e:	3b01      	subs	r3, #1
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	60fb      	str	r3, [r7, #12]
 800dd70:	e008      	b.n	800dd84 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dd7c:	68b9      	ldr	r1, [r7, #8]
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f80a 	bl	800dd98 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1e3      	bne.n	800dd52 <ip_reass_tmr+0x12>
    }
  }
}
 800dd8a:	bf00      	nop
 800dd8c:	bf00      	nop
 800dd8e:	3710      	adds	r7, #16
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	200088c0 	.word	0x200088c0

0800dd98 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800dda2:	2300      	movs	r3, #0
 800dda4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dda6:	683a      	ldr	r2, [r7, #0]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d105      	bne.n	800ddba <ip_reass_free_complete_datagram+0x22>
 800ddae:	4b45      	ldr	r3, [pc, #276]	; (800dec4 <ip_reass_free_complete_datagram+0x12c>)
 800ddb0:	22ab      	movs	r2, #171	; 0xab
 800ddb2:	4945      	ldr	r1, [pc, #276]	; (800dec8 <ip_reass_free_complete_datagram+0x130>)
 800ddb4:	4845      	ldr	r0, [pc, #276]	; (800decc <ip_reass_free_complete_datagram+0x134>)
 800ddb6:	f000 ffd7 	bl	800ed68 <iprintf>
  if (prev != NULL) {
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00a      	beq.n	800ddd6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d005      	beq.n	800ddd6 <ip_reass_free_complete_datagram+0x3e>
 800ddca:	4b3e      	ldr	r3, [pc, #248]	; (800dec4 <ip_reass_free_complete_datagram+0x12c>)
 800ddcc:	22ad      	movs	r2, #173	; 0xad
 800ddce:	4940      	ldr	r1, [pc, #256]	; (800ded0 <ip_reass_free_complete_datagram+0x138>)
 800ddd0:	483e      	ldr	r0, [pc, #248]	; (800decc <ip_reass_free_complete_datagram+0x134>)
 800ddd2:	f000 ffc9 	bl	800ed68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	889b      	ldrh	r3, [r3, #4]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d12a      	bne.n	800de3e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	6858      	ldr	r0, [r3, #4]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	3308      	adds	r3, #8
 800ddfe:	2214      	movs	r2, #20
 800de00:	4619      	mov	r1, r3
 800de02:	f001 f88c 	bl	800ef1e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800de06:	2101      	movs	r1, #1
 800de08:	69b8      	ldr	r0, [r7, #24]
 800de0a:	f7ff fc47 	bl	800d69c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800de0e:	69b8      	ldr	r0, [r7, #24]
 800de10:	f7f8 f9b4 	bl	800617c <pbuf_clen>
 800de14:	4603      	mov	r3, r0
 800de16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800de18:	8bfa      	ldrh	r2, [r7, #30]
 800de1a:	8a7b      	ldrh	r3, [r7, #18]
 800de1c:	4413      	add	r3, r2
 800de1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de22:	db05      	blt.n	800de30 <ip_reass_free_complete_datagram+0x98>
 800de24:	4b27      	ldr	r3, [pc, #156]	; (800dec4 <ip_reass_free_complete_datagram+0x12c>)
 800de26:	22bc      	movs	r2, #188	; 0xbc
 800de28:	492a      	ldr	r1, [pc, #168]	; (800ded4 <ip_reass_free_complete_datagram+0x13c>)
 800de2a:	4828      	ldr	r0, [pc, #160]	; (800decc <ip_reass_free_complete_datagram+0x134>)
 800de2c:	f000 ff9c 	bl	800ed68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800de30:	8bfa      	ldrh	r2, [r7, #30]
 800de32:	8a7b      	ldrh	r3, [r7, #18]
 800de34:	4413      	add	r3, r2
 800de36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800de38:	69b8      	ldr	r0, [r7, #24]
 800de3a:	f7f8 f917 	bl	800606c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800de44:	e01f      	b.n	800de86 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f7f8 f990 	bl	800617c <pbuf_clen>
 800de5c:	4603      	mov	r3, r0
 800de5e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800de60:	8bfa      	ldrh	r2, [r7, #30]
 800de62:	8a7b      	ldrh	r3, [r7, #18]
 800de64:	4413      	add	r3, r2
 800de66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de6a:	db05      	blt.n	800de78 <ip_reass_free_complete_datagram+0xe0>
 800de6c:	4b15      	ldr	r3, [pc, #84]	; (800dec4 <ip_reass_free_complete_datagram+0x12c>)
 800de6e:	22cc      	movs	r2, #204	; 0xcc
 800de70:	4918      	ldr	r1, [pc, #96]	; (800ded4 <ip_reass_free_complete_datagram+0x13c>)
 800de72:	4816      	ldr	r0, [pc, #88]	; (800decc <ip_reass_free_complete_datagram+0x134>)
 800de74:	f000 ff78 	bl	800ed68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800de78:	8bfa      	ldrh	r2, [r7, #30]
 800de7a:	8a7b      	ldrh	r3, [r7, #18]
 800de7c:	4413      	add	r3, r2
 800de7e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f7f8 f8f3 	bl	800606c <pbuf_free>
  while (p != NULL) {
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1dc      	bne.n	800de46 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 f8c2 	bl	800e018 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800de94:	4b10      	ldr	r3, [pc, #64]	; (800ded8 <ip_reass_free_complete_datagram+0x140>)
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	8bfa      	ldrh	r2, [r7, #30]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d905      	bls.n	800deaa <ip_reass_free_complete_datagram+0x112>
 800de9e:	4b09      	ldr	r3, [pc, #36]	; (800dec4 <ip_reass_free_complete_datagram+0x12c>)
 800dea0:	22d2      	movs	r2, #210	; 0xd2
 800dea2:	490e      	ldr	r1, [pc, #56]	; (800dedc <ip_reass_free_complete_datagram+0x144>)
 800dea4:	4809      	ldr	r0, [pc, #36]	; (800decc <ip_reass_free_complete_datagram+0x134>)
 800dea6:	f000 ff5f 	bl	800ed68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800deaa:	4b0b      	ldr	r3, [pc, #44]	; (800ded8 <ip_reass_free_complete_datagram+0x140>)
 800deac:	881a      	ldrh	r2, [r3, #0]
 800deae:	8bfb      	ldrh	r3, [r7, #30]
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	4b08      	ldr	r3, [pc, #32]	; (800ded8 <ip_reass_free_complete_datagram+0x140>)
 800deb6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800deb8:	8bfb      	ldrh	r3, [r7, #30]
}
 800deba:	4618      	mov	r0, r3
 800debc:	3720      	adds	r7, #32
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	080122c8 	.word	0x080122c8
 800dec8:	08012304 	.word	0x08012304
 800decc:	08012310 	.word	0x08012310
 800ded0:	08012338 	.word	0x08012338
 800ded4:	0801234c 	.word	0x0801234c
 800ded8:	200088c4 	.word	0x200088c4
 800dedc:	0801236c 	.word	0x0801236c

0800dee0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08a      	sub	sp, #40	; 0x28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800deea:	2300      	movs	r3, #0
 800deec:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800deee:	2300      	movs	r3, #0
 800def0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800def2:	2300      	movs	r3, #0
 800def4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800defa:	2300      	movs	r3, #0
 800defc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800defe:	4b28      	ldr	r3, [pc, #160]	; (800dfa0 <ip_reass_remove_oldest_datagram+0xc0>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800df04:	e030      	b.n	800df68 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800df06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df08:	695a      	ldr	r2, [r3, #20]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d10c      	bne.n	800df2c <ip_reass_remove_oldest_datagram+0x4c>
 800df12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df14:	699a      	ldr	r2, [r3, #24]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d106      	bne.n	800df2c <ip_reass_remove_oldest_datagram+0x4c>
 800df1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df20:	899a      	ldrh	r2, [r3, #12]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	889b      	ldrh	r3, [r3, #4]
 800df26:	b29b      	uxth	r3, r3
 800df28:	429a      	cmp	r2, r3
 800df2a:	d014      	beq.n	800df56 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	3301      	adds	r3, #1
 800df30:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800df32:	6a3b      	ldr	r3, [r7, #32]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d104      	bne.n	800df42 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800df38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	61bb      	str	r3, [r7, #24]
 800df40:	e009      	b.n	800df56 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800df42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df44:	7fda      	ldrb	r2, [r3, #31]
 800df46:	6a3b      	ldr	r3, [r7, #32]
 800df48:	7fdb      	ldrb	r3, [r3, #31]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d803      	bhi.n	800df56 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800df4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df50:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800df56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df60:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800df62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d1cb      	bne.n	800df06 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800df6e:	6a3b      	ldr	r3, [r7, #32]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d008      	beq.n	800df86 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800df74:	69b9      	ldr	r1, [r7, #24]
 800df76:	6a38      	ldr	r0, [r7, #32]
 800df78:	f7ff ff0e 	bl	800dd98 <ip_reass_free_complete_datagram>
 800df7c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	4413      	add	r3, r2
 800df84:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800df86:	697a      	ldr	r2, [r7, #20]
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	da02      	bge.n	800df94 <ip_reass_remove_oldest_datagram+0xb4>
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	2b01      	cmp	r3, #1
 800df92:	dcac      	bgt.n	800deee <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800df94:	697b      	ldr	r3, [r7, #20]
}
 800df96:	4618      	mov	r0, r3
 800df98:	3728      	adds	r7, #40	; 0x28
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	200088c0 	.word	0x200088c0

0800dfa4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dfae:	2004      	movs	r0, #4
 800dfb0:	f7f7 f976 	bl	80052a0 <memp_malloc>
 800dfb4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d110      	bne.n	800dfde <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff ff8e 	bl	800dee0 <ip_reass_remove_oldest_datagram>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	dc03      	bgt.n	800dfd4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dfcc:	2004      	movs	r0, #4
 800dfce:	f7f7 f967 	bl	80052a0 <memp_malloc>
 800dfd2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	e016      	b.n	800e00c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dfde:	2220      	movs	r2, #32
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f000 ff25 	bl	800ee32 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	220f      	movs	r2, #15
 800dfec:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dfee:	4b09      	ldr	r3, [pc, #36]	; (800e014 <ip_reass_enqueue_new_datagram+0x70>)
 800dff0:	681a      	ldr	r2, [r3, #0]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dff6:	4a07      	ldr	r2, [pc, #28]	; (800e014 <ip_reass_enqueue_new_datagram+0x70>)
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3308      	adds	r3, #8
 800e000:	2214      	movs	r2, #20
 800e002:	6879      	ldr	r1, [r7, #4]
 800e004:	4618      	mov	r0, r3
 800e006:	f000 ff8a 	bl	800ef1e <memcpy>
  return ipr;
 800e00a:	68fb      	ldr	r3, [r7, #12]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	200088c0 	.word	0x200088c0

0800e018 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e022:	4b10      	ldr	r3, [pc, #64]	; (800e064 <ip_reass_dequeue_datagram+0x4c>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d104      	bne.n	800e036 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	4a0c      	ldr	r2, [pc, #48]	; (800e064 <ip_reass_dequeue_datagram+0x4c>)
 800e032:	6013      	str	r3, [r2, #0]
 800e034:	e00d      	b.n	800e052 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d106      	bne.n	800e04a <ip_reass_dequeue_datagram+0x32>
 800e03c:	4b0a      	ldr	r3, [pc, #40]	; (800e068 <ip_reass_dequeue_datagram+0x50>)
 800e03e:	f240 1245 	movw	r2, #325	; 0x145
 800e042:	490a      	ldr	r1, [pc, #40]	; (800e06c <ip_reass_dequeue_datagram+0x54>)
 800e044:	480a      	ldr	r0, [pc, #40]	; (800e070 <ip_reass_dequeue_datagram+0x58>)
 800e046:	f000 fe8f 	bl	800ed68 <iprintf>
    prev->next = ipr->next;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e052:	6879      	ldr	r1, [r7, #4]
 800e054:	2004      	movs	r0, #4
 800e056:	f7f7 f993 	bl	8005380 <memp_free>
}
 800e05a:	bf00      	nop
 800e05c:	3708      	adds	r7, #8
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	200088c0 	.word	0x200088c0
 800e068:	080122c8 	.word	0x080122c8
 800e06c:	08012390 	.word	0x08012390
 800e070:	08012310 	.word	0x08012310

0800e074 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b08c      	sub	sp, #48	; 0x30
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e080:	2300      	movs	r3, #0
 800e082:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e084:	2301      	movs	r3, #1
 800e086:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	885b      	ldrh	r3, [r3, #2]
 800e092:	b29b      	uxth	r3, r3
 800e094:	4618      	mov	r0, r3
 800e096:	f7f6 fc8b 	bl	80049b0 <lwip_htons>
 800e09a:	4603      	mov	r3, r0
 800e09c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	f003 030f 	and.w	r3, r3, #15
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e0ac:	7e7b      	ldrb	r3, [r7, #25]
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	8b7a      	ldrh	r2, [r7, #26]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d202      	bcs.n	800e0bc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e0ba:	e135      	b.n	800e328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e0bc:	7e7b      	ldrb	r3, [r7, #25]
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	8b7a      	ldrh	r2, [r7, #26]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	88db      	ldrh	r3, [r3, #6]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f7f6 fc6f 	bl	80049b0 <lwip_htons>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0d8:	b29b      	uxth	r3, r3
 800e0da:	00db      	lsls	r3, r3, #3
 800e0dc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	701a      	strb	r2, [r3, #0]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	705a      	strb	r2, [r3, #1]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	709a      	strb	r2, [r3, #2]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f8:	8afa      	ldrh	r2, [r7, #22]
 800e0fa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e0fc:	8afa      	ldrh	r2, [r7, #22]
 800e0fe:	8b7b      	ldrh	r3, [r7, #26]
 800e100:	4413      	add	r3, r2
 800e102:	b29a      	uxth	r2, r3
 800e104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e106:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10a:	88db      	ldrh	r3, [r3, #6]
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	8afa      	ldrh	r2, [r7, #22]
 800e110:	429a      	cmp	r2, r3
 800e112:	d902      	bls.n	800e11a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e114:	f04f 33ff 	mov.w	r3, #4294967295
 800e118:	e106      	b.n	800e328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	627b      	str	r3, [r7, #36]	; 0x24
 800e120:	e068      	b.n	800e1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12a:	889b      	ldrh	r3, [r3, #4]
 800e12c:	b29a      	uxth	r2, r3
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	889b      	ldrh	r3, [r3, #4]
 800e132:	b29b      	uxth	r3, r3
 800e134:	429a      	cmp	r2, r3
 800e136:	d235      	bcs.n	800e1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e13c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e140:	2b00      	cmp	r3, #0
 800e142:	d020      	beq.n	800e186 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e146:	889b      	ldrh	r3, [r3, #4]
 800e148:	b29a      	uxth	r2, r3
 800e14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14c:	88db      	ldrh	r3, [r3, #6]
 800e14e:	b29b      	uxth	r3, r3
 800e150:	429a      	cmp	r2, r3
 800e152:	d307      	bcc.n	800e164 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e156:	88db      	ldrh	r3, [r3, #6]
 800e158:	b29a      	uxth	r2, r3
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	889b      	ldrh	r3, [r3, #4]
 800e15e:	b29b      	uxth	r3, r3
 800e160:	429a      	cmp	r2, r3
 800e162:	d902      	bls.n	800e16a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e164:	f04f 33ff 	mov.w	r3, #4294967295
 800e168:	e0de      	b.n	800e328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16c:	68ba      	ldr	r2, [r7, #8]
 800e16e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	88db      	ldrh	r3, [r3, #6]
 800e174:	b29a      	uxth	r2, r3
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	889b      	ldrh	r3, [r3, #4]
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d03d      	beq.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e180:	2300      	movs	r3, #0
 800e182:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e184:	e03a      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e188:	88db      	ldrh	r3, [r3, #6]
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	889b      	ldrh	r3, [r3, #4]
 800e190:	b29b      	uxth	r3, r3
 800e192:	429a      	cmp	r2, r3
 800e194:	d902      	bls.n	800e19c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e196:	f04f 33ff 	mov.w	r3, #4294967295
 800e19a:	e0c5      	b.n	800e328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	605a      	str	r2, [r3, #4]
      break;
 800e1a2:	e02b      	b.n	800e1fc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a6:	889b      	ldrh	r3, [r3, #4]
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	889b      	ldrh	r3, [r3, #4]
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d102      	bne.n	800e1ba <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b8:	e0b6      	b.n	800e328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1bc:	889b      	ldrh	r3, [r3, #4]
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	88db      	ldrh	r3, [r3, #6]
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d202      	bcs.n	800e1d0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e1ce:	e0ab      	b.n	800e328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d009      	beq.n	800e1ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d8:	88db      	ldrh	r3, [r3, #6]
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	889b      	ldrh	r3, [r3, #4]
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	d001      	beq.n	800e1ea <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d193      	bne.n	800e122 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e1fa:	e000      	b.n	800e1fe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e1fc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e200:	2b00      	cmp	r3, #0
 800e202:	d12d      	bne.n	800e260 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e206:	2b00      	cmp	r3, #0
 800e208:	d01c      	beq.n	800e244 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20c:	88db      	ldrh	r3, [r3, #6]
 800e20e:	b29a      	uxth	r2, r3
 800e210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e212:	889b      	ldrh	r3, [r3, #4]
 800e214:	b29b      	uxth	r3, r3
 800e216:	429a      	cmp	r2, r3
 800e218:	d906      	bls.n	800e228 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e21a:	4b45      	ldr	r3, [pc, #276]	; (800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e21c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e220:	4944      	ldr	r1, [pc, #272]	; (800e334 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e222:	4845      	ldr	r0, [pc, #276]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e224:	f000 fda0 	bl	800ed68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e22a:	68ba      	ldr	r2, [r7, #8]
 800e22c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e230:	88db      	ldrh	r3, [r3, #6]
 800e232:	b29a      	uxth	r2, r3
 800e234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e236:	889b      	ldrh	r3, [r3, #4]
 800e238:	b29b      	uxth	r3, r3
 800e23a:	429a      	cmp	r2, r3
 800e23c:	d010      	beq.n	800e260 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	623b      	str	r3, [r7, #32]
 800e242:	e00d      	b.n	800e260 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	685b      	ldr	r3, [r3, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d006      	beq.n	800e25a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e24c:	4b38      	ldr	r3, [pc, #224]	; (800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e24e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e252:	493a      	ldr	r1, [pc, #232]	; (800e33c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e254:	4838      	ldr	r0, [pc, #224]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e256:	f000 fd87 	bl	800ed68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68ba      	ldr	r2, [r7, #8]
 800e25e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d105      	bne.n	800e272 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	7f9b      	ldrb	r3, [r3, #30]
 800e26a:	f003 0301 	and.w	r3, r3, #1
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d059      	beq.n	800e326 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d04f      	beq.n	800e318 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d006      	beq.n	800e28e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	889b      	ldrh	r3, [r3, #4]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d002      	beq.n	800e294 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e28e:	2300      	movs	r3, #0
 800e290:	623b      	str	r3, [r7, #32]
 800e292:	e041      	b.n	800e318 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e29e:	e012      	b.n	800e2c6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a8:	88db      	ldrh	r3, [r3, #6]
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	889b      	ldrh	r3, [r3, #4]
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d002      	beq.n	800e2bc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	623b      	str	r3, [r7, #32]
            break;
 800e2ba:	e007      	b.n	800e2cc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2be:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d1e9      	bne.n	800e2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e2cc:	6a3b      	ldr	r3, [r7, #32]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d022      	beq.n	800e318 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d106      	bne.n	800e2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e2da:	4b15      	ldr	r3, [pc, #84]	; (800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e2dc:	f240 12df 	movw	r2, #479	; 0x1df
 800e2e0:	4917      	ldr	r1, [pc, #92]	; (800e340 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e2e2:	4815      	ldr	r0, [pc, #84]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e2e4:	f000 fd40 	bl	800ed68 <iprintf>
          LWIP_ASSERT("sanity check",
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d106      	bne.n	800e302 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e2f4:	4b0e      	ldr	r3, [pc, #56]	; (800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e2f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e2fa:	4911      	ldr	r1, [pc, #68]	; (800e340 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e2fc:	480e      	ldr	r0, [pc, #56]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e2fe:	f000 fd33 	bl	800ed68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d006      	beq.n	800e318 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e30a:	4b09      	ldr	r3, [pc, #36]	; (800e330 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e30c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e310:	490c      	ldr	r1, [pc, #48]	; (800e344 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e312:	4809      	ldr	r0, [pc, #36]	; (800e338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e314:	f000 fd28 	bl	800ed68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e318:	6a3b      	ldr	r3, [r7, #32]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	bf14      	ite	ne
 800e31e:	2301      	movne	r3, #1
 800e320:	2300      	moveq	r3, #0
 800e322:	b2db      	uxtb	r3, r3
 800e324:	e000      	b.n	800e328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e326:	2300      	movs	r3, #0
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3730      	adds	r7, #48	; 0x30
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	080122c8 	.word	0x080122c8
 800e334:	080123ac 	.word	0x080123ac
 800e338:	08012310 	.word	0x08012310
 800e33c:	080123cc 	.word	0x080123cc
 800e340:	08012404 	.word	0x08012404
 800e344:	08012414 	.word	0x08012414

0800e348 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b08e      	sub	sp, #56	; 0x38
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	f003 030f 	and.w	r3, r3, #15
 800e35e:	b2db      	uxtb	r3, r3
 800e360:	009b      	lsls	r3, r3, #2
 800e362:	b2db      	uxtb	r3, r3
 800e364:	2b14      	cmp	r3, #20
 800e366:	f040 8171 	bne.w	800e64c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36c:	88db      	ldrh	r3, [r3, #6]
 800e36e:	b29b      	uxth	r3, r3
 800e370:	4618      	mov	r0, r3
 800e372:	f7f6 fb1d 	bl	80049b0 <lwip_htons>
 800e376:	4603      	mov	r3, r0
 800e378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e384:	885b      	ldrh	r3, [r3, #2]
 800e386:	b29b      	uxth	r3, r3
 800e388:	4618      	mov	r0, r3
 800e38a:	f7f6 fb11 	bl	80049b0 <lwip_htons>
 800e38e:	4603      	mov	r3, r0
 800e390:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	f003 030f 	and.w	r3, r3, #15
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	009b      	lsls	r3, r3, #2
 800e39e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e3a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	f0c0 8150 	bcc.w	800e650 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e3b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e3b4:	b29b      	uxth	r3, r3
 800e3b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3b8:	1ad3      	subs	r3, r2, r3
 800e3ba:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7f7 fedd 	bl	800617c <pbuf_clen>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e3c6:	4b8c      	ldr	r3, [pc, #560]	; (800e5f8 <ip4_reass+0x2b0>)
 800e3c8:	881b      	ldrh	r3, [r3, #0]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	8c3b      	ldrh	r3, [r7, #32]
 800e3ce:	4413      	add	r3, r2
 800e3d0:	2b0a      	cmp	r3, #10
 800e3d2:	dd10      	ble.n	800e3f6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e3d4:	8c3b      	ldrh	r3, [r7, #32]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e3da:	f7ff fd81 	bl	800dee0 <ip_reass_remove_oldest_datagram>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 8137 	beq.w	800e654 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e3e6:	4b84      	ldr	r3, [pc, #528]	; (800e5f8 <ip4_reass+0x2b0>)
 800e3e8:	881b      	ldrh	r3, [r3, #0]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	8c3b      	ldrh	r3, [r7, #32]
 800e3ee:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e3f0:	2b0a      	cmp	r3, #10
 800e3f2:	f300 812f 	bgt.w	800e654 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e3f6:	4b81      	ldr	r3, [pc, #516]	; (800e5fc <ip4_reass+0x2b4>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	633b      	str	r3, [r7, #48]	; 0x30
 800e3fc:	e015      	b.n	800e42a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e400:	695a      	ldr	r2, [r3, #20]
 800e402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	429a      	cmp	r2, r3
 800e408:	d10c      	bne.n	800e424 <ip4_reass+0xdc>
 800e40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e40c:	699a      	ldr	r2, [r3, #24]
 800e40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e410:	691b      	ldr	r3, [r3, #16]
 800e412:	429a      	cmp	r2, r3
 800e414:	d106      	bne.n	800e424 <ip4_reass+0xdc>
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	899a      	ldrh	r2, [r3, #12]
 800e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41c:	889b      	ldrh	r3, [r3, #4]
 800e41e:	b29b      	uxth	r3, r3
 800e420:	429a      	cmp	r2, r3
 800e422:	d006      	beq.n	800e432 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	633b      	str	r3, [r7, #48]	; 0x30
 800e42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d1e6      	bne.n	800e3fe <ip4_reass+0xb6>
 800e430:	e000      	b.n	800e434 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e432:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e436:	2b00      	cmp	r3, #0
 800e438:	d109      	bne.n	800e44e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e43a:	8c3b      	ldrh	r3, [r7, #32]
 800e43c:	4619      	mov	r1, r3
 800e43e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e440:	f7ff fdb0 	bl	800dfa4 <ip_reass_enqueue_new_datagram>
 800e444:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d11c      	bne.n	800e486 <ip4_reass+0x13e>
      goto nullreturn;
 800e44c:	e105      	b.n	800e65a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e450:	88db      	ldrh	r3, [r3, #6]
 800e452:	b29b      	uxth	r3, r3
 800e454:	4618      	mov	r0, r3
 800e456:	f7f6 faab 	bl	80049b0 <lwip_htons>
 800e45a:	4603      	mov	r3, r0
 800e45c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e460:	2b00      	cmp	r3, #0
 800e462:	d110      	bne.n	800e486 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e466:	89db      	ldrh	r3, [r3, #14]
 800e468:	4618      	mov	r0, r3
 800e46a:	f7f6 faa1 	bl	80049b0 <lwip_htons>
 800e46e:	4603      	mov	r3, r0
 800e470:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e474:	2b00      	cmp	r3, #0
 800e476:	d006      	beq.n	800e486 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47a:	3308      	adds	r3, #8
 800e47c:	2214      	movs	r2, #20
 800e47e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e480:	4618      	mov	r0, r3
 800e482:	f000 fd4c 	bl	800ef1e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e488:	88db      	ldrh	r3, [r3, #6]
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	f003 0320 	and.w	r3, r3, #32
 800e490:	2b00      	cmp	r3, #0
 800e492:	bf0c      	ite	eq
 800e494:	2301      	moveq	r3, #1
 800e496:	2300      	movne	r3, #0
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d00e      	beq.n	800e4c0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e4a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4a6:	4413      	add	r3, r2
 800e4a8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e4aa:	8b7a      	ldrh	r2, [r7, #26]
 800e4ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	f0c0 80a0 	bcc.w	800e5f4 <ip4_reass+0x2ac>
 800e4b4:	8b7b      	ldrh	r3, [r7, #26]
 800e4b6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	f200 809a 	bhi.w	800e5f4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e4c0:	69fa      	ldr	r2, [r7, #28]
 800e4c2:	6879      	ldr	r1, [r7, #4]
 800e4c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4c6:	f7ff fdd5 	bl	800e074 <ip_reass_chain_frag_into_datagram_and_validate>
 800e4ca:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d2:	f000 809b 	beq.w	800e60c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e4d6:	4b48      	ldr	r3, [pc, #288]	; (800e5f8 <ip4_reass+0x2b0>)
 800e4d8:	881a      	ldrh	r2, [r3, #0]
 800e4da:	8c3b      	ldrh	r3, [r7, #32]
 800e4dc:	4413      	add	r3, r2
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	4b45      	ldr	r3, [pc, #276]	; (800e5f8 <ip4_reass+0x2b0>)
 800e4e2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d00d      	beq.n	800e506 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e4ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4ee:	4413      	add	r3, r2
 800e4f0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f4:	8a7a      	ldrh	r2, [r7, #18]
 800e4f6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fa:	7f9b      	ldrb	r3, [r3, #30]
 800e4fc:	f043 0301 	orr.w	r3, r3, #1
 800e500:	b2da      	uxtb	r2, r3
 800e502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e504:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d171      	bne.n	800e5f0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50e:	8b9b      	ldrh	r3, [r3, #28]
 800e510:	3314      	adds	r3, #20
 800e512:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	685b      	ldr	r3, [r3, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e528:	3308      	adds	r3, #8
 800e52a:	2214      	movs	r2, #20
 800e52c:	4619      	mov	r1, r3
 800e52e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e530:	f000 fcf5 	bl	800ef1e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e534:	8a3b      	ldrh	r3, [r7, #16]
 800e536:	4618      	mov	r0, r3
 800e538:	f7f6 fa3a 	bl	80049b0 <lwip_htons>
 800e53c:	4603      	mov	r3, r0
 800e53e:	461a      	mov	r2, r3
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e546:	2200      	movs	r2, #0
 800e548:	719a      	strb	r2, [r3, #6]
 800e54a:	2200      	movs	r2, #0
 800e54c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e550:	2200      	movs	r2, #0
 800e552:	729a      	strb	r2, [r3, #10]
 800e554:	2200      	movs	r2, #0
 800e556:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e55e:	e00d      	b.n	800e57c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e566:	2114      	movs	r1, #20
 800e568:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e56a:	f7f7 fcf9 	bl	8005f60 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e56e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7f7 fe3d 	bl	80061f0 <pbuf_cat>
      r = iprh->next_pbuf;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1ee      	bne.n	800e560 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e582:	4b1e      	ldr	r3, [pc, #120]	; (800e5fc <ip4_reass+0x2b4>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e588:	429a      	cmp	r2, r3
 800e58a:	d102      	bne.n	800e592 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e58c:	2300      	movs	r3, #0
 800e58e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e590:	e010      	b.n	800e5b4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e592:	4b1a      	ldr	r3, [pc, #104]	; (800e5fc <ip4_reass+0x2b4>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e598:	e007      	b.n	800e5aa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d006      	beq.n	800e5b2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1f4      	bne.n	800e59a <ip4_reass+0x252>
 800e5b0:	e000      	b.n	800e5b4 <ip4_reass+0x26c>
          break;
 800e5b2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e5b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5b8:	f7ff fd2e 	bl	800e018 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7f7 fddd 	bl	800617c <pbuf_clen>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e5c6:	4b0c      	ldr	r3, [pc, #48]	; (800e5f8 <ip4_reass+0x2b0>)
 800e5c8:	881b      	ldrh	r3, [r3, #0]
 800e5ca:	8c3a      	ldrh	r2, [r7, #32]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d906      	bls.n	800e5de <ip4_reass+0x296>
 800e5d0:	4b0b      	ldr	r3, [pc, #44]	; (800e600 <ip4_reass+0x2b8>)
 800e5d2:	f240 229b 	movw	r2, #667	; 0x29b
 800e5d6:	490b      	ldr	r1, [pc, #44]	; (800e604 <ip4_reass+0x2bc>)
 800e5d8:	480b      	ldr	r0, [pc, #44]	; (800e608 <ip4_reass+0x2c0>)
 800e5da:	f000 fbc5 	bl	800ed68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e5de:	4b06      	ldr	r3, [pc, #24]	; (800e5f8 <ip4_reass+0x2b0>)
 800e5e0:	881a      	ldrh	r2, [r3, #0]
 800e5e2:	8c3b      	ldrh	r3, [r7, #32]
 800e5e4:	1ad3      	subs	r3, r2, r3
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	4b03      	ldr	r3, [pc, #12]	; (800e5f8 <ip4_reass+0x2b0>)
 800e5ea:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	e038      	b.n	800e662 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	e036      	b.n	800e662 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e5f4:	bf00      	nop
 800e5f6:	e00a      	b.n	800e60e <ip4_reass+0x2c6>
 800e5f8:	200088c4 	.word	0x200088c4
 800e5fc:	200088c0 	.word	0x200088c0
 800e600:	080122c8 	.word	0x080122c8
 800e604:	08012438 	.word	0x08012438
 800e608:	08012310 	.word	0x08012310
    goto nullreturn_ipr;
 800e60c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e610:	2b00      	cmp	r3, #0
 800e612:	d106      	bne.n	800e622 <ip4_reass+0x2da>
 800e614:	4b15      	ldr	r3, [pc, #84]	; (800e66c <ip4_reass+0x324>)
 800e616:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e61a:	4915      	ldr	r1, [pc, #84]	; (800e670 <ip4_reass+0x328>)
 800e61c:	4815      	ldr	r0, [pc, #84]	; (800e674 <ip4_reass+0x32c>)
 800e61e:	f000 fba3 	bl	800ed68 <iprintf>
  if (ipr->p == NULL) {
 800e622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e624:	685b      	ldr	r3, [r3, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d116      	bne.n	800e658 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e62a:	4b13      	ldr	r3, [pc, #76]	; (800e678 <ip4_reass+0x330>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e630:	429a      	cmp	r2, r3
 800e632:	d006      	beq.n	800e642 <ip4_reass+0x2fa>
 800e634:	4b0d      	ldr	r3, [pc, #52]	; (800e66c <ip4_reass+0x324>)
 800e636:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e63a:	4910      	ldr	r1, [pc, #64]	; (800e67c <ip4_reass+0x334>)
 800e63c:	480d      	ldr	r0, [pc, #52]	; (800e674 <ip4_reass+0x32c>)
 800e63e:	f000 fb93 	bl	800ed68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e642:	2100      	movs	r1, #0
 800e644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e646:	f7ff fce7 	bl	800e018 <ip_reass_dequeue_datagram>
 800e64a:	e006      	b.n	800e65a <ip4_reass+0x312>
    goto nullreturn;
 800e64c:	bf00      	nop
 800e64e:	e004      	b.n	800e65a <ip4_reass+0x312>
    goto nullreturn;
 800e650:	bf00      	nop
 800e652:	e002      	b.n	800e65a <ip4_reass+0x312>
      goto nullreturn;
 800e654:	bf00      	nop
 800e656:	e000      	b.n	800e65a <ip4_reass+0x312>
  }

nullreturn:
 800e658:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f7f7 fd06 	bl	800606c <pbuf_free>
  return NULL;
 800e660:	2300      	movs	r3, #0
}
 800e662:	4618      	mov	r0, r3
 800e664:	3738      	adds	r7, #56	; 0x38
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	080122c8 	.word	0x080122c8
 800e670:	08012454 	.word	0x08012454
 800e674:	08012310 	.word	0x08012310
 800e678:	200088c0 	.word	0x200088c0
 800e67c:	08012460 	.word	0x08012460

0800e680 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e684:	2005      	movs	r0, #5
 800e686:	f7f6 fe0b 	bl	80052a0 <memp_malloc>
 800e68a:	4603      	mov	r3, r0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d106      	bne.n	800e6ac <ip_frag_free_pbuf_custom_ref+0x1c>
 800e69e:	4b07      	ldr	r3, [pc, #28]	; (800e6bc <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e6a0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e6a4:	4906      	ldr	r1, [pc, #24]	; (800e6c0 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e6a6:	4807      	ldr	r0, [pc, #28]	; (800e6c4 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e6a8:	f000 fb5e 	bl	800ed68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e6ac:	6879      	ldr	r1, [r7, #4]
 800e6ae:	2005      	movs	r0, #5
 800e6b0:	f7f6 fe66 	bl	8005380 <memp_free>
}
 800e6b4:	bf00      	nop
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	080122c8 	.word	0x080122c8
 800e6c0:	08012480 	.word	0x08012480
 800e6c4:	08012310 	.word	0x08012310

0800e6c8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d106      	bne.n	800e6e8 <ipfrag_free_pbuf_custom+0x20>
 800e6da:	4b11      	ldr	r3, [pc, #68]	; (800e720 <ipfrag_free_pbuf_custom+0x58>)
 800e6dc:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e6e0:	4910      	ldr	r1, [pc, #64]	; (800e724 <ipfrag_free_pbuf_custom+0x5c>)
 800e6e2:	4811      	ldr	r0, [pc, #68]	; (800e728 <ipfrag_free_pbuf_custom+0x60>)
 800e6e4:	f000 fb40 	bl	800ed68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d006      	beq.n	800e6fe <ipfrag_free_pbuf_custom+0x36>
 800e6f0:	4b0b      	ldr	r3, [pc, #44]	; (800e720 <ipfrag_free_pbuf_custom+0x58>)
 800e6f2:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e6f6:	490d      	ldr	r1, [pc, #52]	; (800e72c <ipfrag_free_pbuf_custom+0x64>)
 800e6f8:	480b      	ldr	r0, [pc, #44]	; (800e728 <ipfrag_free_pbuf_custom+0x60>)
 800e6fa:	f000 fb35 	bl	800ed68 <iprintf>
  if (pcr->original != NULL) {
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	695b      	ldr	r3, [r3, #20]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d004      	beq.n	800e710 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7f7 fcae 	bl	800606c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f7ff ffbd 	bl	800e690 <ip_frag_free_pbuf_custom_ref>
}
 800e716:	bf00      	nop
 800e718:	3710      	adds	r7, #16
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}
 800e71e:	bf00      	nop
 800e720:	080122c8 	.word	0x080122c8
 800e724:	0801248c 	.word	0x0801248c
 800e728:	08012310 	.word	0x08012310
 800e72c:	08012498 	.word	0x08012498

0800e730 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b094      	sub	sp, #80	; 0x50
 800e734:	af02      	add	r7, sp, #8
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	60b9      	str	r1, [r7, #8]
 800e73a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e73c:	2300      	movs	r3, #0
 800e73e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e746:	3b14      	subs	r3, #20
 800e748:	2b00      	cmp	r3, #0
 800e74a:	da00      	bge.n	800e74e <ip4_frag+0x1e>
 800e74c:	3307      	adds	r3, #7
 800e74e:	10db      	asrs	r3, r3, #3
 800e750:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e752:	2314      	movs	r3, #20
 800e754:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	685b      	ldr	r3, [r3, #4]
 800e75a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	f003 030f 	and.w	r3, r3, #15
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	009b      	lsls	r3, r3, #2
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	2b14      	cmp	r3, #20
 800e770:	d002      	beq.n	800e778 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e772:	f06f 0305 	mvn.w	r3, #5
 800e776:	e110      	b.n	800e99a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	895b      	ldrh	r3, [r3, #10]
 800e77c:	2b13      	cmp	r3, #19
 800e77e:	d809      	bhi.n	800e794 <ip4_frag+0x64>
 800e780:	4b88      	ldr	r3, [pc, #544]	; (800e9a4 <ip4_frag+0x274>)
 800e782:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e786:	4988      	ldr	r1, [pc, #544]	; (800e9a8 <ip4_frag+0x278>)
 800e788:	4888      	ldr	r0, [pc, #544]	; (800e9ac <ip4_frag+0x27c>)
 800e78a:	f000 faed 	bl	800ed68 <iprintf>
 800e78e:	f06f 0305 	mvn.w	r3, #5
 800e792:	e102      	b.n	800e99a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e796:	88db      	ldrh	r3, [r3, #6]
 800e798:	b29b      	uxth	r3, r3
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7f6 f908 	bl	80049b0 <lwip_htons>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e7a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e7a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e7aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e7ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e7b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	891b      	ldrh	r3, [r3, #8]
 800e7ba:	3b14      	subs	r3, #20
 800e7bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e7c0:	e0e1      	b.n	800e986 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e7c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7c4:	00db      	lsls	r3, r3, #3
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	bf28      	it	cs
 800e7d0:	4613      	movcs	r3, r2
 800e7d2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e7d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e7d8:	2114      	movs	r1, #20
 800e7da:	200e      	movs	r0, #14
 800e7dc:	f7f7 f962 	bl	8005aa4 <pbuf_alloc>
 800e7e0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f000 80d5 	beq.w	800e994 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ec:	895b      	ldrh	r3, [r3, #10]
 800e7ee:	2b13      	cmp	r3, #19
 800e7f0:	d806      	bhi.n	800e800 <ip4_frag+0xd0>
 800e7f2:	4b6c      	ldr	r3, [pc, #432]	; (800e9a4 <ip4_frag+0x274>)
 800e7f4:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e7f8:	496d      	ldr	r1, [pc, #436]	; (800e9b0 <ip4_frag+0x280>)
 800e7fa:	486c      	ldr	r0, [pc, #432]	; (800e9ac <ip4_frag+0x27c>)
 800e7fc:	f000 fab4 	bl	800ed68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e802:	685b      	ldr	r3, [r3, #4]
 800e804:	2214      	movs	r2, #20
 800e806:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e808:	4618      	mov	r0, r3
 800e80a:	f000 fb88 	bl	800ef1e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e814:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e816:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e81a:	e064      	b.n	800e8e6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	895a      	ldrh	r2, [r3, #10]
 800e820:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e822:	1ad3      	subs	r3, r2, r3
 800e824:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	895b      	ldrh	r3, [r3, #10]
 800e82a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d906      	bls.n	800e83e <ip4_frag+0x10e>
 800e830:	4b5c      	ldr	r3, [pc, #368]	; (800e9a4 <ip4_frag+0x274>)
 800e832:	f240 322d 	movw	r2, #813	; 0x32d
 800e836:	495f      	ldr	r1, [pc, #380]	; (800e9b4 <ip4_frag+0x284>)
 800e838:	485c      	ldr	r0, [pc, #368]	; (800e9ac <ip4_frag+0x27c>)
 800e83a:	f000 fa95 	bl	800ed68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e83e:	8bfa      	ldrh	r2, [r7, #30]
 800e840:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e844:	4293      	cmp	r3, r2
 800e846:	bf28      	it	cs
 800e848:	4613      	movcs	r3, r2
 800e84a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e84e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e852:	2b00      	cmp	r3, #0
 800e854:	d105      	bne.n	800e862 <ip4_frag+0x132>
        poff = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	60fb      	str	r3, [r7, #12]
        continue;
 800e860:	e041      	b.n	800e8e6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e862:	f7ff ff0d 	bl	800e680 <ip_frag_alloc_pbuf_custom_ref>
 800e866:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d103      	bne.n	800e876 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e86e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e870:	f7f7 fbfc 	bl	800606c <pbuf_free>
        goto memerr;
 800e874:	e08f      	b.n	800e996 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e876:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e87c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e87e:	4413      	add	r3, r2
 800e880:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e884:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e888:	9201      	str	r2, [sp, #4]
 800e88a:	9300      	str	r3, [sp, #0]
 800e88c:	4603      	mov	r3, r0
 800e88e:	2241      	movs	r2, #65	; 0x41
 800e890:	2000      	movs	r0, #0
 800e892:	f7f7 fa31 	bl	8005cf8 <pbuf_alloced_custom>
 800e896:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d106      	bne.n	800e8ac <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e89e:	69b8      	ldr	r0, [r7, #24]
 800e8a0:	f7ff fef6 	bl	800e690 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e8a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8a6:	f7f7 fbe1 	bl	800606c <pbuf_free>
        goto memerr;
 800e8aa:	e074      	b.n	800e996 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f7f7 fc7d 	bl	80061ac <pbuf_ref>
      pcr->original = p;
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e8b8:	69bb      	ldr	r3, [r7, #24]
 800e8ba:	4a3f      	ldr	r2, [pc, #252]	; (800e9b8 <ip4_frag+0x288>)
 800e8bc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e8be:	6979      	ldr	r1, [r7, #20]
 800e8c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8c2:	f7f7 fc95 	bl	80061f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e8c6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e8ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e8ce:	1ad3      	subs	r3, r2, r3
 800e8d0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e8d4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d004      	beq.n	800e8e6 <ip4_frag+0x1b6>
        poff = 0;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e8e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d196      	bne.n	800e81c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e8ee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e8f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e8f4:	4413      	add	r3, r2
 800e8f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e8fc:	f1a3 0213 	sub.w	r2, r3, #19
 800e900:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e904:	429a      	cmp	r2, r3
 800e906:	bfcc      	ite	gt
 800e908:	2301      	movgt	r3, #1
 800e90a:	2300      	movle	r3, #0
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e910:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e918:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e91a:	6a3b      	ldr	r3, [r7, #32]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d002      	beq.n	800e926 <ip4_frag+0x1f6>
 800e920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e922:	2b00      	cmp	r3, #0
 800e924:	d003      	beq.n	800e92e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e926:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e92c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e92e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e930:	4618      	mov	r0, r3
 800e932:	f7f6 f83d 	bl	80049b0 <lwip_htons>
 800e936:	4603      	mov	r3, r0
 800e938:	461a      	mov	r2, r3
 800e93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e93e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e940:	3314      	adds	r3, #20
 800e942:	b29b      	uxth	r3, r3
 800e944:	4618      	mov	r0, r3
 800e946:	f7f6 f833 	bl	80049b0 <lwip_htons>
 800e94a:	4603      	mov	r3, r0
 800e94c:	461a      	mov	r2, r3
 800e94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e950:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e954:	2200      	movs	r2, #0
 800e956:	729a      	strb	r2, [r3, #10]
 800e958:	2200      	movs	r2, #0
 800e95a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	695b      	ldr	r3, [r3, #20]
 800e960:	687a      	ldr	r2, [r7, #4]
 800e962:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e964:	68b8      	ldr	r0, [r7, #8]
 800e966:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e96a:	f7f7 fb7f 	bl	800606c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e96e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e972:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e974:	1ad3      	subs	r3, r2, r3
 800e976:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e97a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e97e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e980:	4413      	add	r3, r2
 800e982:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e986:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f47f af19 	bne.w	800e7c2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e990:	2300      	movs	r3, #0
 800e992:	e002      	b.n	800e99a <ip4_frag+0x26a>
      goto memerr;
 800e994:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3748      	adds	r7, #72	; 0x48
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
 800e9a2:	bf00      	nop
 800e9a4:	080122c8 	.word	0x080122c8
 800e9a8:	080124a4 	.word	0x080124a4
 800e9ac:	08012310 	.word	0x08012310
 800e9b0:	080124c0 	.word	0x080124c0
 800e9b4:	080124e0 	.word	0x080124e0
 800e9b8:	0800e6c9 	.word	0x0800e6c9

0800e9bc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b086      	sub	sp, #24
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e9c6:	230e      	movs	r3, #14
 800e9c8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	895b      	ldrh	r3, [r3, #10]
 800e9ce:	2b0e      	cmp	r3, #14
 800e9d0:	d96e      	bls.n	800eab0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	7bdb      	ldrb	r3, [r3, #15]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d106      	bne.n	800e9e8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	b2da      	uxtb	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	7b1a      	ldrb	r2, [r3, #12]
 800e9f2:	7b5b      	ldrb	r3, [r3, #13]
 800e9f4:	021b      	lsls	r3, r3, #8
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d023      	beq.n	800ea4e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	2b01      	cmp	r3, #1
 800ea0c:	d10f      	bne.n	800ea2e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	785b      	ldrb	r3, [r3, #1]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d11b      	bne.n	800ea4e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ea1a:	2b5e      	cmp	r3, #94	; 0x5e
 800ea1c:	d117      	bne.n	800ea4e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	7b5b      	ldrb	r3, [r3, #13]
 800ea22:	f043 0310 	orr.w	r3, r3, #16
 800ea26:	b2da      	uxtb	r2, r3
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	735a      	strb	r2, [r3, #13]
 800ea2c:	e00f      	b.n	800ea4e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ea2e:	693b      	ldr	r3, [r7, #16]
 800ea30:	2206      	movs	r2, #6
 800ea32:	4928      	ldr	r1, [pc, #160]	; (800ead4 <ethernet_input+0x118>)
 800ea34:	4618      	mov	r0, r3
 800ea36:	f000 f9ec 	bl	800ee12 <memcmp>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d106      	bne.n	800ea4e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	7b5b      	ldrb	r3, [r3, #13]
 800ea44:	f043 0308 	orr.w	r3, r3, #8
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800ea4e:	89fb      	ldrh	r3, [r7, #14]
 800ea50:	2b08      	cmp	r3, #8
 800ea52:	d003      	beq.n	800ea5c <ethernet_input+0xa0>
 800ea54:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800ea58:	d014      	beq.n	800ea84 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800ea5a:	e032      	b.n	800eac2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea62:	f003 0308 	and.w	r3, r3, #8
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d024      	beq.n	800eab4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ea6a:	8afb      	ldrh	r3, [r7, #22]
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f7f7 fa76 	bl	8005f60 <pbuf_remove_header>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d11e      	bne.n	800eab8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800ea7a:	6839      	ldr	r1, [r7, #0]
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7fe ff21 	bl	800d8c4 <ip4_input>
      break;
 800ea82:	e013      	b.n	800eaac <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea8a:	f003 0308 	and.w	r3, r3, #8
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d014      	beq.n	800eabc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ea92:	8afb      	ldrh	r3, [r7, #22]
 800ea94:	4619      	mov	r1, r3
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f7f7 fa62 	bl	8005f60 <pbuf_remove_header>
 800ea9c:	4603      	mov	r3, r0
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10e      	bne.n	800eac0 <ethernet_input+0x104>
        etharp_input(p, netif);
 800eaa2:	6839      	ldr	r1, [r7, #0]
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f7fe f8c1 	bl	800cc2c <etharp_input>
      break;
 800eaaa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800eaac:	2300      	movs	r3, #0
 800eaae:	e00c      	b.n	800eaca <ethernet_input+0x10e>
    goto free_and_return;
 800eab0:	bf00      	nop
 800eab2:	e006      	b.n	800eac2 <ethernet_input+0x106>
        goto free_and_return;
 800eab4:	bf00      	nop
 800eab6:	e004      	b.n	800eac2 <ethernet_input+0x106>
        goto free_and_return;
 800eab8:	bf00      	nop
 800eaba:	e002      	b.n	800eac2 <ethernet_input+0x106>
        goto free_and_return;
 800eabc:	bf00      	nop
 800eabe:	e000      	b.n	800eac2 <ethernet_input+0x106>
        goto free_and_return;
 800eac0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f7f7 fad2 	bl	800606c <pbuf_free>
  return ERR_OK;
 800eac8:	2300      	movs	r3, #0
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	0801267c 	.word	0x0801267c

0800ead8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
 800eae4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800eae6:	8c3b      	ldrh	r3, [r7, #32]
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7f5 ff61 	bl	80049b0 <lwip_htons>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800eaf2:	210e      	movs	r1, #14
 800eaf4:	68b8      	ldr	r0, [r7, #8]
 800eaf6:	f7f7 fa23 	bl	8005f40 <pbuf_add_header>
 800eafa:	4603      	mov	r3, r0
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d125      	bne.n	800eb4c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	8afa      	ldrh	r2, [r7, #22]
 800eb0a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	2206      	movs	r2, #6
 800eb10:	6839      	ldr	r1, [r7, #0]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 fa03 	bl	800ef1e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	3306      	adds	r3, #6
 800eb1c:	2206      	movs	r2, #6
 800eb1e:	6879      	ldr	r1, [r7, #4]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f000 f9fc 	bl	800ef1e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800eb2c:	2b06      	cmp	r3, #6
 800eb2e:	d006      	beq.n	800eb3e <ethernet_output+0x66>
 800eb30:	4b0a      	ldr	r3, [pc, #40]	; (800eb5c <ethernet_output+0x84>)
 800eb32:	f44f 7299 	mov.w	r2, #306	; 0x132
 800eb36:	490a      	ldr	r1, [pc, #40]	; (800eb60 <ethernet_output+0x88>)
 800eb38:	480a      	ldr	r0, [pc, #40]	; (800eb64 <ethernet_output+0x8c>)
 800eb3a:	f000 f915 	bl	800ed68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	699b      	ldr	r3, [r3, #24]
 800eb42:	68b9      	ldr	r1, [r7, #8]
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	4798      	blx	r3
 800eb48:	4603      	mov	r3, r0
 800eb4a:	e002      	b.n	800eb52 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800eb4c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800eb4e:	f06f 0301 	mvn.w	r3, #1
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3718      	adds	r7, #24
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	080124f0 	.word	0x080124f0
 800eb60:	08012528 	.word	0x08012528
 800eb64:	0801255c 	.word	0x0801255c

0800eb68 <rand>:
 800eb68:	4b16      	ldr	r3, [pc, #88]	; (800ebc4 <rand+0x5c>)
 800eb6a:	b510      	push	{r4, lr}
 800eb6c:	681c      	ldr	r4, [r3, #0]
 800eb6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800eb70:	b9b3      	cbnz	r3, 800eba0 <rand+0x38>
 800eb72:	2018      	movs	r0, #24
 800eb74:	f000 fa4c 	bl	800f010 <malloc>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	6320      	str	r0, [r4, #48]	; 0x30
 800eb7c:	b920      	cbnz	r0, 800eb88 <rand+0x20>
 800eb7e:	4b12      	ldr	r3, [pc, #72]	; (800ebc8 <rand+0x60>)
 800eb80:	4812      	ldr	r0, [pc, #72]	; (800ebcc <rand+0x64>)
 800eb82:	2152      	movs	r1, #82	; 0x52
 800eb84:	f000 f9da 	bl	800ef3c <__assert_func>
 800eb88:	4911      	ldr	r1, [pc, #68]	; (800ebd0 <rand+0x68>)
 800eb8a:	4b12      	ldr	r3, [pc, #72]	; (800ebd4 <rand+0x6c>)
 800eb8c:	e9c0 1300 	strd	r1, r3, [r0]
 800eb90:	4b11      	ldr	r3, [pc, #68]	; (800ebd8 <rand+0x70>)
 800eb92:	6083      	str	r3, [r0, #8]
 800eb94:	230b      	movs	r3, #11
 800eb96:	8183      	strh	r3, [r0, #12]
 800eb98:	2100      	movs	r1, #0
 800eb9a:	2001      	movs	r0, #1
 800eb9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800eba0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800eba2:	480e      	ldr	r0, [pc, #56]	; (800ebdc <rand+0x74>)
 800eba4:	690b      	ldr	r3, [r1, #16]
 800eba6:	694c      	ldr	r4, [r1, #20]
 800eba8:	4a0d      	ldr	r2, [pc, #52]	; (800ebe0 <rand+0x78>)
 800ebaa:	4358      	muls	r0, r3
 800ebac:	fb02 0004 	mla	r0, r2, r4, r0
 800ebb0:	fba3 3202 	umull	r3, r2, r3, r2
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	eb40 0002 	adc.w	r0, r0, r2
 800ebba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ebbe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ebc2:	bd10      	pop	{r4, pc}
 800ebc4:	20000084 	.word	0x20000084
 800ebc8:	0801268a 	.word	0x0801268a
 800ebcc:	080126a1 	.word	0x080126a1
 800ebd0:	abcd330e 	.word	0xabcd330e
 800ebd4:	e66d1234 	.word	0xe66d1234
 800ebd8:	0005deec 	.word	0x0005deec
 800ebdc:	5851f42d 	.word	0x5851f42d
 800ebe0:	4c957f2d 	.word	0x4c957f2d

0800ebe4 <std>:
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	b510      	push	{r4, lr}
 800ebe8:	4604      	mov	r4, r0
 800ebea:	e9c0 3300 	strd	r3, r3, [r0]
 800ebee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ebf2:	6083      	str	r3, [r0, #8]
 800ebf4:	8181      	strh	r1, [r0, #12]
 800ebf6:	6643      	str	r3, [r0, #100]	; 0x64
 800ebf8:	81c2      	strh	r2, [r0, #14]
 800ebfa:	6183      	str	r3, [r0, #24]
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	2208      	movs	r2, #8
 800ec00:	305c      	adds	r0, #92	; 0x5c
 800ec02:	f000 f916 	bl	800ee32 <memset>
 800ec06:	4b0d      	ldr	r3, [pc, #52]	; (800ec3c <std+0x58>)
 800ec08:	6263      	str	r3, [r4, #36]	; 0x24
 800ec0a:	4b0d      	ldr	r3, [pc, #52]	; (800ec40 <std+0x5c>)
 800ec0c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec0e:	4b0d      	ldr	r3, [pc, #52]	; (800ec44 <std+0x60>)
 800ec10:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec12:	4b0d      	ldr	r3, [pc, #52]	; (800ec48 <std+0x64>)
 800ec14:	6323      	str	r3, [r4, #48]	; 0x30
 800ec16:	4b0d      	ldr	r3, [pc, #52]	; (800ec4c <std+0x68>)
 800ec18:	6224      	str	r4, [r4, #32]
 800ec1a:	429c      	cmp	r4, r3
 800ec1c:	d006      	beq.n	800ec2c <std+0x48>
 800ec1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ec22:	4294      	cmp	r4, r2
 800ec24:	d002      	beq.n	800ec2c <std+0x48>
 800ec26:	33d0      	adds	r3, #208	; 0xd0
 800ec28:	429c      	cmp	r4, r3
 800ec2a:	d105      	bne.n	800ec38 <std+0x54>
 800ec2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec34:	f000 b970 	b.w	800ef18 <__retarget_lock_init_recursive>
 800ec38:	bd10      	pop	{r4, pc}
 800ec3a:	bf00      	nop
 800ec3c:	0800ed8d 	.word	0x0800ed8d
 800ec40:	0800edaf 	.word	0x0800edaf
 800ec44:	0800ede7 	.word	0x0800ede7
 800ec48:	0800ee0b 	.word	0x0800ee0b
 800ec4c:	200088c8 	.word	0x200088c8

0800ec50 <stdio_exit_handler>:
 800ec50:	4a02      	ldr	r2, [pc, #8]	; (800ec5c <stdio_exit_handler+0xc>)
 800ec52:	4903      	ldr	r1, [pc, #12]	; (800ec60 <stdio_exit_handler+0x10>)
 800ec54:	4803      	ldr	r0, [pc, #12]	; (800ec64 <stdio_exit_handler+0x14>)
 800ec56:	f000 b869 	b.w	800ed2c <_fwalk_sglue>
 800ec5a:	bf00      	nop
 800ec5c:	2000002c 	.word	0x2000002c
 800ec60:	0800f82d 	.word	0x0800f82d
 800ec64:	20000038 	.word	0x20000038

0800ec68 <cleanup_stdio>:
 800ec68:	6841      	ldr	r1, [r0, #4]
 800ec6a:	4b0c      	ldr	r3, [pc, #48]	; (800ec9c <cleanup_stdio+0x34>)
 800ec6c:	4299      	cmp	r1, r3
 800ec6e:	b510      	push	{r4, lr}
 800ec70:	4604      	mov	r4, r0
 800ec72:	d001      	beq.n	800ec78 <cleanup_stdio+0x10>
 800ec74:	f000 fdda 	bl	800f82c <_fflush_r>
 800ec78:	68a1      	ldr	r1, [r4, #8]
 800ec7a:	4b09      	ldr	r3, [pc, #36]	; (800eca0 <cleanup_stdio+0x38>)
 800ec7c:	4299      	cmp	r1, r3
 800ec7e:	d002      	beq.n	800ec86 <cleanup_stdio+0x1e>
 800ec80:	4620      	mov	r0, r4
 800ec82:	f000 fdd3 	bl	800f82c <_fflush_r>
 800ec86:	68e1      	ldr	r1, [r4, #12]
 800ec88:	4b06      	ldr	r3, [pc, #24]	; (800eca4 <cleanup_stdio+0x3c>)
 800ec8a:	4299      	cmp	r1, r3
 800ec8c:	d004      	beq.n	800ec98 <cleanup_stdio+0x30>
 800ec8e:	4620      	mov	r0, r4
 800ec90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec94:	f000 bdca 	b.w	800f82c <_fflush_r>
 800ec98:	bd10      	pop	{r4, pc}
 800ec9a:	bf00      	nop
 800ec9c:	200088c8 	.word	0x200088c8
 800eca0:	20008930 	.word	0x20008930
 800eca4:	20008998 	.word	0x20008998

0800eca8 <global_stdio_init.part.0>:
 800eca8:	b510      	push	{r4, lr}
 800ecaa:	4b0b      	ldr	r3, [pc, #44]	; (800ecd8 <global_stdio_init.part.0+0x30>)
 800ecac:	4c0b      	ldr	r4, [pc, #44]	; (800ecdc <global_stdio_init.part.0+0x34>)
 800ecae:	4a0c      	ldr	r2, [pc, #48]	; (800ece0 <global_stdio_init.part.0+0x38>)
 800ecb0:	601a      	str	r2, [r3, #0]
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	2104      	movs	r1, #4
 800ecb8:	f7ff ff94 	bl	800ebe4 <std>
 800ecbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	2109      	movs	r1, #9
 800ecc4:	f7ff ff8e 	bl	800ebe4 <std>
 800ecc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800eccc:	2202      	movs	r2, #2
 800ecce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecd2:	2112      	movs	r1, #18
 800ecd4:	f7ff bf86 	b.w	800ebe4 <std>
 800ecd8:	20008a00 	.word	0x20008a00
 800ecdc:	200088c8 	.word	0x200088c8
 800ece0:	0800ec51 	.word	0x0800ec51

0800ece4 <__sfp_lock_acquire>:
 800ece4:	4801      	ldr	r0, [pc, #4]	; (800ecec <__sfp_lock_acquire+0x8>)
 800ece6:	f000 b918 	b.w	800ef1a <__retarget_lock_acquire_recursive>
 800ecea:	bf00      	nop
 800ecec:	20008a09 	.word	0x20008a09

0800ecf0 <__sfp_lock_release>:
 800ecf0:	4801      	ldr	r0, [pc, #4]	; (800ecf8 <__sfp_lock_release+0x8>)
 800ecf2:	f000 b913 	b.w	800ef1c <__retarget_lock_release_recursive>
 800ecf6:	bf00      	nop
 800ecf8:	20008a09 	.word	0x20008a09

0800ecfc <__sinit>:
 800ecfc:	b510      	push	{r4, lr}
 800ecfe:	4604      	mov	r4, r0
 800ed00:	f7ff fff0 	bl	800ece4 <__sfp_lock_acquire>
 800ed04:	6a23      	ldr	r3, [r4, #32]
 800ed06:	b11b      	cbz	r3, 800ed10 <__sinit+0x14>
 800ed08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed0c:	f7ff bff0 	b.w	800ecf0 <__sfp_lock_release>
 800ed10:	4b04      	ldr	r3, [pc, #16]	; (800ed24 <__sinit+0x28>)
 800ed12:	6223      	str	r3, [r4, #32]
 800ed14:	4b04      	ldr	r3, [pc, #16]	; (800ed28 <__sinit+0x2c>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1f5      	bne.n	800ed08 <__sinit+0xc>
 800ed1c:	f7ff ffc4 	bl	800eca8 <global_stdio_init.part.0>
 800ed20:	e7f2      	b.n	800ed08 <__sinit+0xc>
 800ed22:	bf00      	nop
 800ed24:	0800ec69 	.word	0x0800ec69
 800ed28:	20008a00 	.word	0x20008a00

0800ed2c <_fwalk_sglue>:
 800ed2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed30:	4607      	mov	r7, r0
 800ed32:	4688      	mov	r8, r1
 800ed34:	4614      	mov	r4, r2
 800ed36:	2600      	movs	r6, #0
 800ed38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed3c:	f1b9 0901 	subs.w	r9, r9, #1
 800ed40:	d505      	bpl.n	800ed4e <_fwalk_sglue+0x22>
 800ed42:	6824      	ldr	r4, [r4, #0]
 800ed44:	2c00      	cmp	r4, #0
 800ed46:	d1f7      	bne.n	800ed38 <_fwalk_sglue+0xc>
 800ed48:	4630      	mov	r0, r6
 800ed4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed4e:	89ab      	ldrh	r3, [r5, #12]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d907      	bls.n	800ed64 <_fwalk_sglue+0x38>
 800ed54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	d003      	beq.n	800ed64 <_fwalk_sglue+0x38>
 800ed5c:	4629      	mov	r1, r5
 800ed5e:	4638      	mov	r0, r7
 800ed60:	47c0      	blx	r8
 800ed62:	4306      	orrs	r6, r0
 800ed64:	3568      	adds	r5, #104	; 0x68
 800ed66:	e7e9      	b.n	800ed3c <_fwalk_sglue+0x10>

0800ed68 <iprintf>:
 800ed68:	b40f      	push	{r0, r1, r2, r3}
 800ed6a:	b507      	push	{r0, r1, r2, lr}
 800ed6c:	4906      	ldr	r1, [pc, #24]	; (800ed88 <iprintf+0x20>)
 800ed6e:	ab04      	add	r3, sp, #16
 800ed70:	6808      	ldr	r0, [r1, #0]
 800ed72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed76:	6881      	ldr	r1, [r0, #8]
 800ed78:	9301      	str	r3, [sp, #4]
 800ed7a:	f000 fa27 	bl	800f1cc <_vfiprintf_r>
 800ed7e:	b003      	add	sp, #12
 800ed80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed84:	b004      	add	sp, #16
 800ed86:	4770      	bx	lr
 800ed88:	20000084 	.word	0x20000084

0800ed8c <__sread>:
 800ed8c:	b510      	push	{r4, lr}
 800ed8e:	460c      	mov	r4, r1
 800ed90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed94:	f000 f878 	bl	800ee88 <_read_r>
 800ed98:	2800      	cmp	r0, #0
 800ed9a:	bfab      	itete	ge
 800ed9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed9e:	89a3      	ldrhlt	r3, [r4, #12]
 800eda0:	181b      	addge	r3, r3, r0
 800eda2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eda6:	bfac      	ite	ge
 800eda8:	6563      	strge	r3, [r4, #84]	; 0x54
 800edaa:	81a3      	strhlt	r3, [r4, #12]
 800edac:	bd10      	pop	{r4, pc}

0800edae <__swrite>:
 800edae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb2:	461f      	mov	r7, r3
 800edb4:	898b      	ldrh	r3, [r1, #12]
 800edb6:	05db      	lsls	r3, r3, #23
 800edb8:	4605      	mov	r5, r0
 800edba:	460c      	mov	r4, r1
 800edbc:	4616      	mov	r6, r2
 800edbe:	d505      	bpl.n	800edcc <__swrite+0x1e>
 800edc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edc4:	2302      	movs	r3, #2
 800edc6:	2200      	movs	r2, #0
 800edc8:	f000 f84c 	bl	800ee64 <_lseek_r>
 800edcc:	89a3      	ldrh	r3, [r4, #12]
 800edce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800edd6:	81a3      	strh	r3, [r4, #12]
 800edd8:	4632      	mov	r2, r6
 800edda:	463b      	mov	r3, r7
 800eddc:	4628      	mov	r0, r5
 800edde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ede2:	f000 b863 	b.w	800eeac <_write_r>

0800ede6 <__sseek>:
 800ede6:	b510      	push	{r4, lr}
 800ede8:	460c      	mov	r4, r1
 800edea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edee:	f000 f839 	bl	800ee64 <_lseek_r>
 800edf2:	1c43      	adds	r3, r0, #1
 800edf4:	89a3      	ldrh	r3, [r4, #12]
 800edf6:	bf15      	itete	ne
 800edf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800edfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800edfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee02:	81a3      	strheq	r3, [r4, #12]
 800ee04:	bf18      	it	ne
 800ee06:	81a3      	strhne	r3, [r4, #12]
 800ee08:	bd10      	pop	{r4, pc}

0800ee0a <__sclose>:
 800ee0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee0e:	f000 b819 	b.w	800ee44 <_close_r>

0800ee12 <memcmp>:
 800ee12:	b510      	push	{r4, lr}
 800ee14:	3901      	subs	r1, #1
 800ee16:	4402      	add	r2, r0
 800ee18:	4290      	cmp	r0, r2
 800ee1a:	d101      	bne.n	800ee20 <memcmp+0xe>
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	e005      	b.n	800ee2c <memcmp+0x1a>
 800ee20:	7803      	ldrb	r3, [r0, #0]
 800ee22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ee26:	42a3      	cmp	r3, r4
 800ee28:	d001      	beq.n	800ee2e <memcmp+0x1c>
 800ee2a:	1b18      	subs	r0, r3, r4
 800ee2c:	bd10      	pop	{r4, pc}
 800ee2e:	3001      	adds	r0, #1
 800ee30:	e7f2      	b.n	800ee18 <memcmp+0x6>

0800ee32 <memset>:
 800ee32:	4402      	add	r2, r0
 800ee34:	4603      	mov	r3, r0
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d100      	bne.n	800ee3c <memset+0xa>
 800ee3a:	4770      	bx	lr
 800ee3c:	f803 1b01 	strb.w	r1, [r3], #1
 800ee40:	e7f9      	b.n	800ee36 <memset+0x4>
	...

0800ee44 <_close_r>:
 800ee44:	b538      	push	{r3, r4, r5, lr}
 800ee46:	4d06      	ldr	r5, [pc, #24]	; (800ee60 <_close_r+0x1c>)
 800ee48:	2300      	movs	r3, #0
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	4608      	mov	r0, r1
 800ee4e:	602b      	str	r3, [r5, #0]
 800ee50:	f7f1 fea5 	bl	8000b9e <_close>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_close_r+0x1a>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_close_r+0x1a>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	20008a04 	.word	0x20008a04

0800ee64 <_lseek_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d07      	ldr	r5, [pc, #28]	; (800ee84 <_lseek_r+0x20>)
 800ee68:	4604      	mov	r4, r0
 800ee6a:	4608      	mov	r0, r1
 800ee6c:	4611      	mov	r1, r2
 800ee6e:	2200      	movs	r2, #0
 800ee70:	602a      	str	r2, [r5, #0]
 800ee72:	461a      	mov	r2, r3
 800ee74:	f7f1 feba 	bl	8000bec <_lseek>
 800ee78:	1c43      	adds	r3, r0, #1
 800ee7a:	d102      	bne.n	800ee82 <_lseek_r+0x1e>
 800ee7c:	682b      	ldr	r3, [r5, #0]
 800ee7e:	b103      	cbz	r3, 800ee82 <_lseek_r+0x1e>
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	bd38      	pop	{r3, r4, r5, pc}
 800ee84:	20008a04 	.word	0x20008a04

0800ee88 <_read_r>:
 800ee88:	b538      	push	{r3, r4, r5, lr}
 800ee8a:	4d07      	ldr	r5, [pc, #28]	; (800eea8 <_read_r+0x20>)
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	4608      	mov	r0, r1
 800ee90:	4611      	mov	r1, r2
 800ee92:	2200      	movs	r2, #0
 800ee94:	602a      	str	r2, [r5, #0]
 800ee96:	461a      	mov	r2, r3
 800ee98:	f7f1 fe48 	bl	8000b2c <_read>
 800ee9c:	1c43      	adds	r3, r0, #1
 800ee9e:	d102      	bne.n	800eea6 <_read_r+0x1e>
 800eea0:	682b      	ldr	r3, [r5, #0]
 800eea2:	b103      	cbz	r3, 800eea6 <_read_r+0x1e>
 800eea4:	6023      	str	r3, [r4, #0]
 800eea6:	bd38      	pop	{r3, r4, r5, pc}
 800eea8:	20008a04 	.word	0x20008a04

0800eeac <_write_r>:
 800eeac:	b538      	push	{r3, r4, r5, lr}
 800eeae:	4d07      	ldr	r5, [pc, #28]	; (800eecc <_write_r+0x20>)
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	4608      	mov	r0, r1
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	602a      	str	r2, [r5, #0]
 800eeba:	461a      	mov	r2, r3
 800eebc:	f7f1 fe53 	bl	8000b66 <_write>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	d102      	bne.n	800eeca <_write_r+0x1e>
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	b103      	cbz	r3, 800eeca <_write_r+0x1e>
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	bd38      	pop	{r3, r4, r5, pc}
 800eecc:	20008a04 	.word	0x20008a04

0800eed0 <__libc_init_array>:
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	4d0d      	ldr	r5, [pc, #52]	; (800ef08 <__libc_init_array+0x38>)
 800eed4:	4c0d      	ldr	r4, [pc, #52]	; (800ef0c <__libc_init_array+0x3c>)
 800eed6:	1b64      	subs	r4, r4, r5
 800eed8:	10a4      	asrs	r4, r4, #2
 800eeda:	2600      	movs	r6, #0
 800eedc:	42a6      	cmp	r6, r4
 800eede:	d109      	bne.n	800eef4 <__libc_init_array+0x24>
 800eee0:	4d0b      	ldr	r5, [pc, #44]	; (800ef10 <__libc_init_array+0x40>)
 800eee2:	4c0c      	ldr	r4, [pc, #48]	; (800ef14 <__libc_init_array+0x44>)
 800eee4:	f000 fe52 	bl	800fb8c <_init>
 800eee8:	1b64      	subs	r4, r4, r5
 800eeea:	10a4      	asrs	r4, r4, #2
 800eeec:	2600      	movs	r6, #0
 800eeee:	42a6      	cmp	r6, r4
 800eef0:	d105      	bne.n	800eefe <__libc_init_array+0x2e>
 800eef2:	bd70      	pop	{r4, r5, r6, pc}
 800eef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eef8:	4798      	blx	r3
 800eefa:	3601      	adds	r6, #1
 800eefc:	e7ee      	b.n	800eedc <__libc_init_array+0xc>
 800eefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef02:	4798      	blx	r3
 800ef04:	3601      	adds	r6, #1
 800ef06:	e7f2      	b.n	800eeee <__libc_init_array+0x1e>
 800ef08:	08012770 	.word	0x08012770
 800ef0c:	08012770 	.word	0x08012770
 800ef10:	08012770 	.word	0x08012770
 800ef14:	08012774 	.word	0x08012774

0800ef18 <__retarget_lock_init_recursive>:
 800ef18:	4770      	bx	lr

0800ef1a <__retarget_lock_acquire_recursive>:
 800ef1a:	4770      	bx	lr

0800ef1c <__retarget_lock_release_recursive>:
 800ef1c:	4770      	bx	lr

0800ef1e <memcpy>:
 800ef1e:	440a      	add	r2, r1
 800ef20:	4291      	cmp	r1, r2
 800ef22:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef26:	d100      	bne.n	800ef2a <memcpy+0xc>
 800ef28:	4770      	bx	lr
 800ef2a:	b510      	push	{r4, lr}
 800ef2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef34:	4291      	cmp	r1, r2
 800ef36:	d1f9      	bne.n	800ef2c <memcpy+0xe>
 800ef38:	bd10      	pop	{r4, pc}
	...

0800ef3c <__assert_func>:
 800ef3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef3e:	4614      	mov	r4, r2
 800ef40:	461a      	mov	r2, r3
 800ef42:	4b09      	ldr	r3, [pc, #36]	; (800ef68 <__assert_func+0x2c>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4605      	mov	r5, r0
 800ef48:	68d8      	ldr	r0, [r3, #12]
 800ef4a:	b14c      	cbz	r4, 800ef60 <__assert_func+0x24>
 800ef4c:	4b07      	ldr	r3, [pc, #28]	; (800ef6c <__assert_func+0x30>)
 800ef4e:	9100      	str	r1, [sp, #0]
 800ef50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef54:	4906      	ldr	r1, [pc, #24]	; (800ef70 <__assert_func+0x34>)
 800ef56:	462b      	mov	r3, r5
 800ef58:	f000 fc90 	bl	800f87c <fiprintf>
 800ef5c:	f000 fd46 	bl	800f9ec <abort>
 800ef60:	4b04      	ldr	r3, [pc, #16]	; (800ef74 <__assert_func+0x38>)
 800ef62:	461c      	mov	r4, r3
 800ef64:	e7f3      	b.n	800ef4e <__assert_func+0x12>
 800ef66:	bf00      	nop
 800ef68:	20000084 	.word	0x20000084
 800ef6c:	080126f9 	.word	0x080126f9
 800ef70:	08012706 	.word	0x08012706
 800ef74:	08012734 	.word	0x08012734

0800ef78 <_free_r>:
 800ef78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef7a:	2900      	cmp	r1, #0
 800ef7c:	d044      	beq.n	800f008 <_free_r+0x90>
 800ef7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef82:	9001      	str	r0, [sp, #4]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f1a1 0404 	sub.w	r4, r1, #4
 800ef8a:	bfb8      	it	lt
 800ef8c:	18e4      	addlt	r4, r4, r3
 800ef8e:	f000 f8e7 	bl	800f160 <__malloc_lock>
 800ef92:	4a1e      	ldr	r2, [pc, #120]	; (800f00c <_free_r+0x94>)
 800ef94:	9801      	ldr	r0, [sp, #4]
 800ef96:	6813      	ldr	r3, [r2, #0]
 800ef98:	b933      	cbnz	r3, 800efa8 <_free_r+0x30>
 800ef9a:	6063      	str	r3, [r4, #4]
 800ef9c:	6014      	str	r4, [r2, #0]
 800ef9e:	b003      	add	sp, #12
 800efa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efa4:	f000 b8e2 	b.w	800f16c <__malloc_unlock>
 800efa8:	42a3      	cmp	r3, r4
 800efaa:	d908      	bls.n	800efbe <_free_r+0x46>
 800efac:	6825      	ldr	r5, [r4, #0]
 800efae:	1961      	adds	r1, r4, r5
 800efb0:	428b      	cmp	r3, r1
 800efb2:	bf01      	itttt	eq
 800efb4:	6819      	ldreq	r1, [r3, #0]
 800efb6:	685b      	ldreq	r3, [r3, #4]
 800efb8:	1949      	addeq	r1, r1, r5
 800efba:	6021      	streq	r1, [r4, #0]
 800efbc:	e7ed      	b.n	800ef9a <_free_r+0x22>
 800efbe:	461a      	mov	r2, r3
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	b10b      	cbz	r3, 800efc8 <_free_r+0x50>
 800efc4:	42a3      	cmp	r3, r4
 800efc6:	d9fa      	bls.n	800efbe <_free_r+0x46>
 800efc8:	6811      	ldr	r1, [r2, #0]
 800efca:	1855      	adds	r5, r2, r1
 800efcc:	42a5      	cmp	r5, r4
 800efce:	d10b      	bne.n	800efe8 <_free_r+0x70>
 800efd0:	6824      	ldr	r4, [r4, #0]
 800efd2:	4421      	add	r1, r4
 800efd4:	1854      	adds	r4, r2, r1
 800efd6:	42a3      	cmp	r3, r4
 800efd8:	6011      	str	r1, [r2, #0]
 800efda:	d1e0      	bne.n	800ef9e <_free_r+0x26>
 800efdc:	681c      	ldr	r4, [r3, #0]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	6053      	str	r3, [r2, #4]
 800efe2:	440c      	add	r4, r1
 800efe4:	6014      	str	r4, [r2, #0]
 800efe6:	e7da      	b.n	800ef9e <_free_r+0x26>
 800efe8:	d902      	bls.n	800eff0 <_free_r+0x78>
 800efea:	230c      	movs	r3, #12
 800efec:	6003      	str	r3, [r0, #0]
 800efee:	e7d6      	b.n	800ef9e <_free_r+0x26>
 800eff0:	6825      	ldr	r5, [r4, #0]
 800eff2:	1961      	adds	r1, r4, r5
 800eff4:	428b      	cmp	r3, r1
 800eff6:	bf04      	itt	eq
 800eff8:	6819      	ldreq	r1, [r3, #0]
 800effa:	685b      	ldreq	r3, [r3, #4]
 800effc:	6063      	str	r3, [r4, #4]
 800effe:	bf04      	itt	eq
 800f000:	1949      	addeq	r1, r1, r5
 800f002:	6021      	streq	r1, [r4, #0]
 800f004:	6054      	str	r4, [r2, #4]
 800f006:	e7ca      	b.n	800ef9e <_free_r+0x26>
 800f008:	b003      	add	sp, #12
 800f00a:	bd30      	pop	{r4, r5, pc}
 800f00c:	20008a0c 	.word	0x20008a0c

0800f010 <malloc>:
 800f010:	4b02      	ldr	r3, [pc, #8]	; (800f01c <malloc+0xc>)
 800f012:	4601      	mov	r1, r0
 800f014:	6818      	ldr	r0, [r3, #0]
 800f016:	f000 b823 	b.w	800f060 <_malloc_r>
 800f01a:	bf00      	nop
 800f01c:	20000084 	.word	0x20000084

0800f020 <sbrk_aligned>:
 800f020:	b570      	push	{r4, r5, r6, lr}
 800f022:	4e0e      	ldr	r6, [pc, #56]	; (800f05c <sbrk_aligned+0x3c>)
 800f024:	460c      	mov	r4, r1
 800f026:	6831      	ldr	r1, [r6, #0]
 800f028:	4605      	mov	r5, r0
 800f02a:	b911      	cbnz	r1, 800f032 <sbrk_aligned+0x12>
 800f02c:	f000 fcce 	bl	800f9cc <_sbrk_r>
 800f030:	6030      	str	r0, [r6, #0]
 800f032:	4621      	mov	r1, r4
 800f034:	4628      	mov	r0, r5
 800f036:	f000 fcc9 	bl	800f9cc <_sbrk_r>
 800f03a:	1c43      	adds	r3, r0, #1
 800f03c:	d00a      	beq.n	800f054 <sbrk_aligned+0x34>
 800f03e:	1cc4      	adds	r4, r0, #3
 800f040:	f024 0403 	bic.w	r4, r4, #3
 800f044:	42a0      	cmp	r0, r4
 800f046:	d007      	beq.n	800f058 <sbrk_aligned+0x38>
 800f048:	1a21      	subs	r1, r4, r0
 800f04a:	4628      	mov	r0, r5
 800f04c:	f000 fcbe 	bl	800f9cc <_sbrk_r>
 800f050:	3001      	adds	r0, #1
 800f052:	d101      	bne.n	800f058 <sbrk_aligned+0x38>
 800f054:	f04f 34ff 	mov.w	r4, #4294967295
 800f058:	4620      	mov	r0, r4
 800f05a:	bd70      	pop	{r4, r5, r6, pc}
 800f05c:	20008a10 	.word	0x20008a10

0800f060 <_malloc_r>:
 800f060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f064:	1ccd      	adds	r5, r1, #3
 800f066:	f025 0503 	bic.w	r5, r5, #3
 800f06a:	3508      	adds	r5, #8
 800f06c:	2d0c      	cmp	r5, #12
 800f06e:	bf38      	it	cc
 800f070:	250c      	movcc	r5, #12
 800f072:	2d00      	cmp	r5, #0
 800f074:	4607      	mov	r7, r0
 800f076:	db01      	blt.n	800f07c <_malloc_r+0x1c>
 800f078:	42a9      	cmp	r1, r5
 800f07a:	d905      	bls.n	800f088 <_malloc_r+0x28>
 800f07c:	230c      	movs	r3, #12
 800f07e:	603b      	str	r3, [r7, #0]
 800f080:	2600      	movs	r6, #0
 800f082:	4630      	mov	r0, r6
 800f084:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f088:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f15c <_malloc_r+0xfc>
 800f08c:	f000 f868 	bl	800f160 <__malloc_lock>
 800f090:	f8d8 3000 	ldr.w	r3, [r8]
 800f094:	461c      	mov	r4, r3
 800f096:	bb5c      	cbnz	r4, 800f0f0 <_malloc_r+0x90>
 800f098:	4629      	mov	r1, r5
 800f09a:	4638      	mov	r0, r7
 800f09c:	f7ff ffc0 	bl	800f020 <sbrk_aligned>
 800f0a0:	1c43      	adds	r3, r0, #1
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	d155      	bne.n	800f152 <_malloc_r+0xf2>
 800f0a6:	f8d8 4000 	ldr.w	r4, [r8]
 800f0aa:	4626      	mov	r6, r4
 800f0ac:	2e00      	cmp	r6, #0
 800f0ae:	d145      	bne.n	800f13c <_malloc_r+0xdc>
 800f0b0:	2c00      	cmp	r4, #0
 800f0b2:	d048      	beq.n	800f146 <_malloc_r+0xe6>
 800f0b4:	6823      	ldr	r3, [r4, #0]
 800f0b6:	4631      	mov	r1, r6
 800f0b8:	4638      	mov	r0, r7
 800f0ba:	eb04 0903 	add.w	r9, r4, r3
 800f0be:	f000 fc85 	bl	800f9cc <_sbrk_r>
 800f0c2:	4581      	cmp	r9, r0
 800f0c4:	d13f      	bne.n	800f146 <_malloc_r+0xe6>
 800f0c6:	6821      	ldr	r1, [r4, #0]
 800f0c8:	1a6d      	subs	r5, r5, r1
 800f0ca:	4629      	mov	r1, r5
 800f0cc:	4638      	mov	r0, r7
 800f0ce:	f7ff ffa7 	bl	800f020 <sbrk_aligned>
 800f0d2:	3001      	adds	r0, #1
 800f0d4:	d037      	beq.n	800f146 <_malloc_r+0xe6>
 800f0d6:	6823      	ldr	r3, [r4, #0]
 800f0d8:	442b      	add	r3, r5
 800f0da:	6023      	str	r3, [r4, #0]
 800f0dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d038      	beq.n	800f156 <_malloc_r+0xf6>
 800f0e4:	685a      	ldr	r2, [r3, #4]
 800f0e6:	42a2      	cmp	r2, r4
 800f0e8:	d12b      	bne.n	800f142 <_malloc_r+0xe2>
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	605a      	str	r2, [r3, #4]
 800f0ee:	e00f      	b.n	800f110 <_malloc_r+0xb0>
 800f0f0:	6822      	ldr	r2, [r4, #0]
 800f0f2:	1b52      	subs	r2, r2, r5
 800f0f4:	d41f      	bmi.n	800f136 <_malloc_r+0xd6>
 800f0f6:	2a0b      	cmp	r2, #11
 800f0f8:	d917      	bls.n	800f12a <_malloc_r+0xca>
 800f0fa:	1961      	adds	r1, r4, r5
 800f0fc:	42a3      	cmp	r3, r4
 800f0fe:	6025      	str	r5, [r4, #0]
 800f100:	bf18      	it	ne
 800f102:	6059      	strne	r1, [r3, #4]
 800f104:	6863      	ldr	r3, [r4, #4]
 800f106:	bf08      	it	eq
 800f108:	f8c8 1000 	streq.w	r1, [r8]
 800f10c:	5162      	str	r2, [r4, r5]
 800f10e:	604b      	str	r3, [r1, #4]
 800f110:	4638      	mov	r0, r7
 800f112:	f104 060b 	add.w	r6, r4, #11
 800f116:	f000 f829 	bl	800f16c <__malloc_unlock>
 800f11a:	f026 0607 	bic.w	r6, r6, #7
 800f11e:	1d23      	adds	r3, r4, #4
 800f120:	1af2      	subs	r2, r6, r3
 800f122:	d0ae      	beq.n	800f082 <_malloc_r+0x22>
 800f124:	1b9b      	subs	r3, r3, r6
 800f126:	50a3      	str	r3, [r4, r2]
 800f128:	e7ab      	b.n	800f082 <_malloc_r+0x22>
 800f12a:	42a3      	cmp	r3, r4
 800f12c:	6862      	ldr	r2, [r4, #4]
 800f12e:	d1dd      	bne.n	800f0ec <_malloc_r+0x8c>
 800f130:	f8c8 2000 	str.w	r2, [r8]
 800f134:	e7ec      	b.n	800f110 <_malloc_r+0xb0>
 800f136:	4623      	mov	r3, r4
 800f138:	6864      	ldr	r4, [r4, #4]
 800f13a:	e7ac      	b.n	800f096 <_malloc_r+0x36>
 800f13c:	4634      	mov	r4, r6
 800f13e:	6876      	ldr	r6, [r6, #4]
 800f140:	e7b4      	b.n	800f0ac <_malloc_r+0x4c>
 800f142:	4613      	mov	r3, r2
 800f144:	e7cc      	b.n	800f0e0 <_malloc_r+0x80>
 800f146:	230c      	movs	r3, #12
 800f148:	603b      	str	r3, [r7, #0]
 800f14a:	4638      	mov	r0, r7
 800f14c:	f000 f80e 	bl	800f16c <__malloc_unlock>
 800f150:	e797      	b.n	800f082 <_malloc_r+0x22>
 800f152:	6025      	str	r5, [r4, #0]
 800f154:	e7dc      	b.n	800f110 <_malloc_r+0xb0>
 800f156:	605b      	str	r3, [r3, #4]
 800f158:	deff      	udf	#255	; 0xff
 800f15a:	bf00      	nop
 800f15c:	20008a0c 	.word	0x20008a0c

0800f160 <__malloc_lock>:
 800f160:	4801      	ldr	r0, [pc, #4]	; (800f168 <__malloc_lock+0x8>)
 800f162:	f7ff beda 	b.w	800ef1a <__retarget_lock_acquire_recursive>
 800f166:	bf00      	nop
 800f168:	20008a08 	.word	0x20008a08

0800f16c <__malloc_unlock>:
 800f16c:	4801      	ldr	r0, [pc, #4]	; (800f174 <__malloc_unlock+0x8>)
 800f16e:	f7ff bed5 	b.w	800ef1c <__retarget_lock_release_recursive>
 800f172:	bf00      	nop
 800f174:	20008a08 	.word	0x20008a08

0800f178 <__sfputc_r>:
 800f178:	6893      	ldr	r3, [r2, #8]
 800f17a:	3b01      	subs	r3, #1
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	b410      	push	{r4}
 800f180:	6093      	str	r3, [r2, #8]
 800f182:	da08      	bge.n	800f196 <__sfputc_r+0x1e>
 800f184:	6994      	ldr	r4, [r2, #24]
 800f186:	42a3      	cmp	r3, r4
 800f188:	db01      	blt.n	800f18e <__sfputc_r+0x16>
 800f18a:	290a      	cmp	r1, #10
 800f18c:	d103      	bne.n	800f196 <__sfputc_r+0x1e>
 800f18e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f192:	f000 bb85 	b.w	800f8a0 <__swbuf_r>
 800f196:	6813      	ldr	r3, [r2, #0]
 800f198:	1c58      	adds	r0, r3, #1
 800f19a:	6010      	str	r0, [r2, #0]
 800f19c:	7019      	strb	r1, [r3, #0]
 800f19e:	4608      	mov	r0, r1
 800f1a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <__sfputs_r>:
 800f1a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a8:	4606      	mov	r6, r0
 800f1aa:	460f      	mov	r7, r1
 800f1ac:	4614      	mov	r4, r2
 800f1ae:	18d5      	adds	r5, r2, r3
 800f1b0:	42ac      	cmp	r4, r5
 800f1b2:	d101      	bne.n	800f1b8 <__sfputs_r+0x12>
 800f1b4:	2000      	movs	r0, #0
 800f1b6:	e007      	b.n	800f1c8 <__sfputs_r+0x22>
 800f1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1bc:	463a      	mov	r2, r7
 800f1be:	4630      	mov	r0, r6
 800f1c0:	f7ff ffda 	bl	800f178 <__sfputc_r>
 800f1c4:	1c43      	adds	r3, r0, #1
 800f1c6:	d1f3      	bne.n	800f1b0 <__sfputs_r+0xa>
 800f1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f1cc <_vfiprintf_r>:
 800f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1d0:	460d      	mov	r5, r1
 800f1d2:	b09d      	sub	sp, #116	; 0x74
 800f1d4:	4614      	mov	r4, r2
 800f1d6:	4698      	mov	r8, r3
 800f1d8:	4606      	mov	r6, r0
 800f1da:	b118      	cbz	r0, 800f1e4 <_vfiprintf_r+0x18>
 800f1dc:	6a03      	ldr	r3, [r0, #32]
 800f1de:	b90b      	cbnz	r3, 800f1e4 <_vfiprintf_r+0x18>
 800f1e0:	f7ff fd8c 	bl	800ecfc <__sinit>
 800f1e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1e6:	07d9      	lsls	r1, r3, #31
 800f1e8:	d405      	bmi.n	800f1f6 <_vfiprintf_r+0x2a>
 800f1ea:	89ab      	ldrh	r3, [r5, #12]
 800f1ec:	059a      	lsls	r2, r3, #22
 800f1ee:	d402      	bmi.n	800f1f6 <_vfiprintf_r+0x2a>
 800f1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1f2:	f7ff fe92 	bl	800ef1a <__retarget_lock_acquire_recursive>
 800f1f6:	89ab      	ldrh	r3, [r5, #12]
 800f1f8:	071b      	lsls	r3, r3, #28
 800f1fa:	d501      	bpl.n	800f200 <_vfiprintf_r+0x34>
 800f1fc:	692b      	ldr	r3, [r5, #16]
 800f1fe:	b99b      	cbnz	r3, 800f228 <_vfiprintf_r+0x5c>
 800f200:	4629      	mov	r1, r5
 800f202:	4630      	mov	r0, r6
 800f204:	f000 fb8a 	bl	800f91c <__swsetup_r>
 800f208:	b170      	cbz	r0, 800f228 <_vfiprintf_r+0x5c>
 800f20a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f20c:	07dc      	lsls	r4, r3, #31
 800f20e:	d504      	bpl.n	800f21a <_vfiprintf_r+0x4e>
 800f210:	f04f 30ff 	mov.w	r0, #4294967295
 800f214:	b01d      	add	sp, #116	; 0x74
 800f216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f21a:	89ab      	ldrh	r3, [r5, #12]
 800f21c:	0598      	lsls	r0, r3, #22
 800f21e:	d4f7      	bmi.n	800f210 <_vfiprintf_r+0x44>
 800f220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f222:	f7ff fe7b 	bl	800ef1c <__retarget_lock_release_recursive>
 800f226:	e7f3      	b.n	800f210 <_vfiprintf_r+0x44>
 800f228:	2300      	movs	r3, #0
 800f22a:	9309      	str	r3, [sp, #36]	; 0x24
 800f22c:	2320      	movs	r3, #32
 800f22e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f232:	f8cd 800c 	str.w	r8, [sp, #12]
 800f236:	2330      	movs	r3, #48	; 0x30
 800f238:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f3ec <_vfiprintf_r+0x220>
 800f23c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f240:	f04f 0901 	mov.w	r9, #1
 800f244:	4623      	mov	r3, r4
 800f246:	469a      	mov	sl, r3
 800f248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f24c:	b10a      	cbz	r2, 800f252 <_vfiprintf_r+0x86>
 800f24e:	2a25      	cmp	r2, #37	; 0x25
 800f250:	d1f9      	bne.n	800f246 <_vfiprintf_r+0x7a>
 800f252:	ebba 0b04 	subs.w	fp, sl, r4
 800f256:	d00b      	beq.n	800f270 <_vfiprintf_r+0xa4>
 800f258:	465b      	mov	r3, fp
 800f25a:	4622      	mov	r2, r4
 800f25c:	4629      	mov	r1, r5
 800f25e:	4630      	mov	r0, r6
 800f260:	f7ff ffa1 	bl	800f1a6 <__sfputs_r>
 800f264:	3001      	adds	r0, #1
 800f266:	f000 80a9 	beq.w	800f3bc <_vfiprintf_r+0x1f0>
 800f26a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f26c:	445a      	add	r2, fp
 800f26e:	9209      	str	r2, [sp, #36]	; 0x24
 800f270:	f89a 3000 	ldrb.w	r3, [sl]
 800f274:	2b00      	cmp	r3, #0
 800f276:	f000 80a1 	beq.w	800f3bc <_vfiprintf_r+0x1f0>
 800f27a:	2300      	movs	r3, #0
 800f27c:	f04f 32ff 	mov.w	r2, #4294967295
 800f280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f284:	f10a 0a01 	add.w	sl, sl, #1
 800f288:	9304      	str	r3, [sp, #16]
 800f28a:	9307      	str	r3, [sp, #28]
 800f28c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f290:	931a      	str	r3, [sp, #104]	; 0x68
 800f292:	4654      	mov	r4, sl
 800f294:	2205      	movs	r2, #5
 800f296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f29a:	4854      	ldr	r0, [pc, #336]	; (800f3ec <_vfiprintf_r+0x220>)
 800f29c:	f7f0 ffa8 	bl	80001f0 <memchr>
 800f2a0:	9a04      	ldr	r2, [sp, #16]
 800f2a2:	b9d8      	cbnz	r0, 800f2dc <_vfiprintf_r+0x110>
 800f2a4:	06d1      	lsls	r1, r2, #27
 800f2a6:	bf44      	itt	mi
 800f2a8:	2320      	movmi	r3, #32
 800f2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2ae:	0713      	lsls	r3, r2, #28
 800f2b0:	bf44      	itt	mi
 800f2b2:	232b      	movmi	r3, #43	; 0x2b
 800f2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f2bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f2be:	d015      	beq.n	800f2ec <_vfiprintf_r+0x120>
 800f2c0:	9a07      	ldr	r2, [sp, #28]
 800f2c2:	4654      	mov	r4, sl
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	f04f 0c0a 	mov.w	ip, #10
 800f2ca:	4621      	mov	r1, r4
 800f2cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2d0:	3b30      	subs	r3, #48	; 0x30
 800f2d2:	2b09      	cmp	r3, #9
 800f2d4:	d94d      	bls.n	800f372 <_vfiprintf_r+0x1a6>
 800f2d6:	b1b0      	cbz	r0, 800f306 <_vfiprintf_r+0x13a>
 800f2d8:	9207      	str	r2, [sp, #28]
 800f2da:	e014      	b.n	800f306 <_vfiprintf_r+0x13a>
 800f2dc:	eba0 0308 	sub.w	r3, r0, r8
 800f2e0:	fa09 f303 	lsl.w	r3, r9, r3
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	9304      	str	r3, [sp, #16]
 800f2e8:	46a2      	mov	sl, r4
 800f2ea:	e7d2      	b.n	800f292 <_vfiprintf_r+0xc6>
 800f2ec:	9b03      	ldr	r3, [sp, #12]
 800f2ee:	1d19      	adds	r1, r3, #4
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	9103      	str	r1, [sp, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	bfbb      	ittet	lt
 800f2f8:	425b      	neglt	r3, r3
 800f2fa:	f042 0202 	orrlt.w	r2, r2, #2
 800f2fe:	9307      	strge	r3, [sp, #28]
 800f300:	9307      	strlt	r3, [sp, #28]
 800f302:	bfb8      	it	lt
 800f304:	9204      	strlt	r2, [sp, #16]
 800f306:	7823      	ldrb	r3, [r4, #0]
 800f308:	2b2e      	cmp	r3, #46	; 0x2e
 800f30a:	d10c      	bne.n	800f326 <_vfiprintf_r+0x15a>
 800f30c:	7863      	ldrb	r3, [r4, #1]
 800f30e:	2b2a      	cmp	r3, #42	; 0x2a
 800f310:	d134      	bne.n	800f37c <_vfiprintf_r+0x1b0>
 800f312:	9b03      	ldr	r3, [sp, #12]
 800f314:	1d1a      	adds	r2, r3, #4
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	9203      	str	r2, [sp, #12]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	bfb8      	it	lt
 800f31e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f322:	3402      	adds	r4, #2
 800f324:	9305      	str	r3, [sp, #20]
 800f326:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f3fc <_vfiprintf_r+0x230>
 800f32a:	7821      	ldrb	r1, [r4, #0]
 800f32c:	2203      	movs	r2, #3
 800f32e:	4650      	mov	r0, sl
 800f330:	f7f0 ff5e 	bl	80001f0 <memchr>
 800f334:	b138      	cbz	r0, 800f346 <_vfiprintf_r+0x17a>
 800f336:	9b04      	ldr	r3, [sp, #16]
 800f338:	eba0 000a 	sub.w	r0, r0, sl
 800f33c:	2240      	movs	r2, #64	; 0x40
 800f33e:	4082      	lsls	r2, r0
 800f340:	4313      	orrs	r3, r2
 800f342:	3401      	adds	r4, #1
 800f344:	9304      	str	r3, [sp, #16]
 800f346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f34a:	4829      	ldr	r0, [pc, #164]	; (800f3f0 <_vfiprintf_r+0x224>)
 800f34c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f350:	2206      	movs	r2, #6
 800f352:	f7f0 ff4d 	bl	80001f0 <memchr>
 800f356:	2800      	cmp	r0, #0
 800f358:	d03f      	beq.n	800f3da <_vfiprintf_r+0x20e>
 800f35a:	4b26      	ldr	r3, [pc, #152]	; (800f3f4 <_vfiprintf_r+0x228>)
 800f35c:	bb1b      	cbnz	r3, 800f3a6 <_vfiprintf_r+0x1da>
 800f35e:	9b03      	ldr	r3, [sp, #12]
 800f360:	3307      	adds	r3, #7
 800f362:	f023 0307 	bic.w	r3, r3, #7
 800f366:	3308      	adds	r3, #8
 800f368:	9303      	str	r3, [sp, #12]
 800f36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f36c:	443b      	add	r3, r7
 800f36e:	9309      	str	r3, [sp, #36]	; 0x24
 800f370:	e768      	b.n	800f244 <_vfiprintf_r+0x78>
 800f372:	fb0c 3202 	mla	r2, ip, r2, r3
 800f376:	460c      	mov	r4, r1
 800f378:	2001      	movs	r0, #1
 800f37a:	e7a6      	b.n	800f2ca <_vfiprintf_r+0xfe>
 800f37c:	2300      	movs	r3, #0
 800f37e:	3401      	adds	r4, #1
 800f380:	9305      	str	r3, [sp, #20]
 800f382:	4619      	mov	r1, r3
 800f384:	f04f 0c0a 	mov.w	ip, #10
 800f388:	4620      	mov	r0, r4
 800f38a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f38e:	3a30      	subs	r2, #48	; 0x30
 800f390:	2a09      	cmp	r2, #9
 800f392:	d903      	bls.n	800f39c <_vfiprintf_r+0x1d0>
 800f394:	2b00      	cmp	r3, #0
 800f396:	d0c6      	beq.n	800f326 <_vfiprintf_r+0x15a>
 800f398:	9105      	str	r1, [sp, #20]
 800f39a:	e7c4      	b.n	800f326 <_vfiprintf_r+0x15a>
 800f39c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	e7f0      	b.n	800f388 <_vfiprintf_r+0x1bc>
 800f3a6:	ab03      	add	r3, sp, #12
 800f3a8:	9300      	str	r3, [sp, #0]
 800f3aa:	462a      	mov	r2, r5
 800f3ac:	4b12      	ldr	r3, [pc, #72]	; (800f3f8 <_vfiprintf_r+0x22c>)
 800f3ae:	a904      	add	r1, sp, #16
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f3af 8000 	nop.w
 800f3b6:	4607      	mov	r7, r0
 800f3b8:	1c78      	adds	r0, r7, #1
 800f3ba:	d1d6      	bne.n	800f36a <_vfiprintf_r+0x19e>
 800f3bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3be:	07d9      	lsls	r1, r3, #31
 800f3c0:	d405      	bmi.n	800f3ce <_vfiprintf_r+0x202>
 800f3c2:	89ab      	ldrh	r3, [r5, #12]
 800f3c4:	059a      	lsls	r2, r3, #22
 800f3c6:	d402      	bmi.n	800f3ce <_vfiprintf_r+0x202>
 800f3c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3ca:	f7ff fda7 	bl	800ef1c <__retarget_lock_release_recursive>
 800f3ce:	89ab      	ldrh	r3, [r5, #12]
 800f3d0:	065b      	lsls	r3, r3, #25
 800f3d2:	f53f af1d 	bmi.w	800f210 <_vfiprintf_r+0x44>
 800f3d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3d8:	e71c      	b.n	800f214 <_vfiprintf_r+0x48>
 800f3da:	ab03      	add	r3, sp, #12
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	462a      	mov	r2, r5
 800f3e0:	4b05      	ldr	r3, [pc, #20]	; (800f3f8 <_vfiprintf_r+0x22c>)
 800f3e2:	a904      	add	r1, sp, #16
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	f000 f879 	bl	800f4dc <_printf_i>
 800f3ea:	e7e4      	b.n	800f3b6 <_vfiprintf_r+0x1ea>
 800f3ec:	08012735 	.word	0x08012735
 800f3f0:	0801273f 	.word	0x0801273f
 800f3f4:	00000000 	.word	0x00000000
 800f3f8:	0800f1a7 	.word	0x0800f1a7
 800f3fc:	0801273b 	.word	0x0801273b

0800f400 <_printf_common>:
 800f400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f404:	4616      	mov	r6, r2
 800f406:	4699      	mov	r9, r3
 800f408:	688a      	ldr	r2, [r1, #8]
 800f40a:	690b      	ldr	r3, [r1, #16]
 800f40c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f410:	4293      	cmp	r3, r2
 800f412:	bfb8      	it	lt
 800f414:	4613      	movlt	r3, r2
 800f416:	6033      	str	r3, [r6, #0]
 800f418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f41c:	4607      	mov	r7, r0
 800f41e:	460c      	mov	r4, r1
 800f420:	b10a      	cbz	r2, 800f426 <_printf_common+0x26>
 800f422:	3301      	adds	r3, #1
 800f424:	6033      	str	r3, [r6, #0]
 800f426:	6823      	ldr	r3, [r4, #0]
 800f428:	0699      	lsls	r1, r3, #26
 800f42a:	bf42      	ittt	mi
 800f42c:	6833      	ldrmi	r3, [r6, #0]
 800f42e:	3302      	addmi	r3, #2
 800f430:	6033      	strmi	r3, [r6, #0]
 800f432:	6825      	ldr	r5, [r4, #0]
 800f434:	f015 0506 	ands.w	r5, r5, #6
 800f438:	d106      	bne.n	800f448 <_printf_common+0x48>
 800f43a:	f104 0a19 	add.w	sl, r4, #25
 800f43e:	68e3      	ldr	r3, [r4, #12]
 800f440:	6832      	ldr	r2, [r6, #0]
 800f442:	1a9b      	subs	r3, r3, r2
 800f444:	42ab      	cmp	r3, r5
 800f446:	dc26      	bgt.n	800f496 <_printf_common+0x96>
 800f448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f44c:	1e13      	subs	r3, r2, #0
 800f44e:	6822      	ldr	r2, [r4, #0]
 800f450:	bf18      	it	ne
 800f452:	2301      	movne	r3, #1
 800f454:	0692      	lsls	r2, r2, #26
 800f456:	d42b      	bmi.n	800f4b0 <_printf_common+0xb0>
 800f458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f45c:	4649      	mov	r1, r9
 800f45e:	4638      	mov	r0, r7
 800f460:	47c0      	blx	r8
 800f462:	3001      	adds	r0, #1
 800f464:	d01e      	beq.n	800f4a4 <_printf_common+0xa4>
 800f466:	6823      	ldr	r3, [r4, #0]
 800f468:	6922      	ldr	r2, [r4, #16]
 800f46a:	f003 0306 	and.w	r3, r3, #6
 800f46e:	2b04      	cmp	r3, #4
 800f470:	bf02      	ittt	eq
 800f472:	68e5      	ldreq	r5, [r4, #12]
 800f474:	6833      	ldreq	r3, [r6, #0]
 800f476:	1aed      	subeq	r5, r5, r3
 800f478:	68a3      	ldr	r3, [r4, #8]
 800f47a:	bf0c      	ite	eq
 800f47c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f480:	2500      	movne	r5, #0
 800f482:	4293      	cmp	r3, r2
 800f484:	bfc4      	itt	gt
 800f486:	1a9b      	subgt	r3, r3, r2
 800f488:	18ed      	addgt	r5, r5, r3
 800f48a:	2600      	movs	r6, #0
 800f48c:	341a      	adds	r4, #26
 800f48e:	42b5      	cmp	r5, r6
 800f490:	d11a      	bne.n	800f4c8 <_printf_common+0xc8>
 800f492:	2000      	movs	r0, #0
 800f494:	e008      	b.n	800f4a8 <_printf_common+0xa8>
 800f496:	2301      	movs	r3, #1
 800f498:	4652      	mov	r2, sl
 800f49a:	4649      	mov	r1, r9
 800f49c:	4638      	mov	r0, r7
 800f49e:	47c0      	blx	r8
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	d103      	bne.n	800f4ac <_printf_common+0xac>
 800f4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ac:	3501      	adds	r5, #1
 800f4ae:	e7c6      	b.n	800f43e <_printf_common+0x3e>
 800f4b0:	18e1      	adds	r1, r4, r3
 800f4b2:	1c5a      	adds	r2, r3, #1
 800f4b4:	2030      	movs	r0, #48	; 0x30
 800f4b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4ba:	4422      	add	r2, r4
 800f4bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4c4:	3302      	adds	r3, #2
 800f4c6:	e7c7      	b.n	800f458 <_printf_common+0x58>
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	4622      	mov	r2, r4
 800f4cc:	4649      	mov	r1, r9
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	47c0      	blx	r8
 800f4d2:	3001      	adds	r0, #1
 800f4d4:	d0e6      	beq.n	800f4a4 <_printf_common+0xa4>
 800f4d6:	3601      	adds	r6, #1
 800f4d8:	e7d9      	b.n	800f48e <_printf_common+0x8e>
	...

0800f4dc <_printf_i>:
 800f4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4e0:	7e0f      	ldrb	r7, [r1, #24]
 800f4e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4e4:	2f78      	cmp	r7, #120	; 0x78
 800f4e6:	4691      	mov	r9, r2
 800f4e8:	4680      	mov	r8, r0
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	469a      	mov	sl, r3
 800f4ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4f2:	d807      	bhi.n	800f504 <_printf_i+0x28>
 800f4f4:	2f62      	cmp	r7, #98	; 0x62
 800f4f6:	d80a      	bhi.n	800f50e <_printf_i+0x32>
 800f4f8:	2f00      	cmp	r7, #0
 800f4fa:	f000 80d4 	beq.w	800f6a6 <_printf_i+0x1ca>
 800f4fe:	2f58      	cmp	r7, #88	; 0x58
 800f500:	f000 80c0 	beq.w	800f684 <_printf_i+0x1a8>
 800f504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f50c:	e03a      	b.n	800f584 <_printf_i+0xa8>
 800f50e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f512:	2b15      	cmp	r3, #21
 800f514:	d8f6      	bhi.n	800f504 <_printf_i+0x28>
 800f516:	a101      	add	r1, pc, #4	; (adr r1, 800f51c <_printf_i+0x40>)
 800f518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f51c:	0800f575 	.word	0x0800f575
 800f520:	0800f589 	.word	0x0800f589
 800f524:	0800f505 	.word	0x0800f505
 800f528:	0800f505 	.word	0x0800f505
 800f52c:	0800f505 	.word	0x0800f505
 800f530:	0800f505 	.word	0x0800f505
 800f534:	0800f589 	.word	0x0800f589
 800f538:	0800f505 	.word	0x0800f505
 800f53c:	0800f505 	.word	0x0800f505
 800f540:	0800f505 	.word	0x0800f505
 800f544:	0800f505 	.word	0x0800f505
 800f548:	0800f68d 	.word	0x0800f68d
 800f54c:	0800f5b5 	.word	0x0800f5b5
 800f550:	0800f647 	.word	0x0800f647
 800f554:	0800f505 	.word	0x0800f505
 800f558:	0800f505 	.word	0x0800f505
 800f55c:	0800f6af 	.word	0x0800f6af
 800f560:	0800f505 	.word	0x0800f505
 800f564:	0800f5b5 	.word	0x0800f5b5
 800f568:	0800f505 	.word	0x0800f505
 800f56c:	0800f505 	.word	0x0800f505
 800f570:	0800f64f 	.word	0x0800f64f
 800f574:	682b      	ldr	r3, [r5, #0]
 800f576:	1d1a      	adds	r2, r3, #4
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	602a      	str	r2, [r5, #0]
 800f57c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f584:	2301      	movs	r3, #1
 800f586:	e09f      	b.n	800f6c8 <_printf_i+0x1ec>
 800f588:	6820      	ldr	r0, [r4, #0]
 800f58a:	682b      	ldr	r3, [r5, #0]
 800f58c:	0607      	lsls	r7, r0, #24
 800f58e:	f103 0104 	add.w	r1, r3, #4
 800f592:	6029      	str	r1, [r5, #0]
 800f594:	d501      	bpl.n	800f59a <_printf_i+0xbe>
 800f596:	681e      	ldr	r6, [r3, #0]
 800f598:	e003      	b.n	800f5a2 <_printf_i+0xc6>
 800f59a:	0646      	lsls	r6, r0, #25
 800f59c:	d5fb      	bpl.n	800f596 <_printf_i+0xba>
 800f59e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f5a2:	2e00      	cmp	r6, #0
 800f5a4:	da03      	bge.n	800f5ae <_printf_i+0xd2>
 800f5a6:	232d      	movs	r3, #45	; 0x2d
 800f5a8:	4276      	negs	r6, r6
 800f5aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5ae:	485a      	ldr	r0, [pc, #360]	; (800f718 <_printf_i+0x23c>)
 800f5b0:	230a      	movs	r3, #10
 800f5b2:	e012      	b.n	800f5da <_printf_i+0xfe>
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	6820      	ldr	r0, [r4, #0]
 800f5b8:	1d19      	adds	r1, r3, #4
 800f5ba:	6029      	str	r1, [r5, #0]
 800f5bc:	0605      	lsls	r5, r0, #24
 800f5be:	d501      	bpl.n	800f5c4 <_printf_i+0xe8>
 800f5c0:	681e      	ldr	r6, [r3, #0]
 800f5c2:	e002      	b.n	800f5ca <_printf_i+0xee>
 800f5c4:	0641      	lsls	r1, r0, #25
 800f5c6:	d5fb      	bpl.n	800f5c0 <_printf_i+0xe4>
 800f5c8:	881e      	ldrh	r6, [r3, #0]
 800f5ca:	4853      	ldr	r0, [pc, #332]	; (800f718 <_printf_i+0x23c>)
 800f5cc:	2f6f      	cmp	r7, #111	; 0x6f
 800f5ce:	bf0c      	ite	eq
 800f5d0:	2308      	moveq	r3, #8
 800f5d2:	230a      	movne	r3, #10
 800f5d4:	2100      	movs	r1, #0
 800f5d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5da:	6865      	ldr	r5, [r4, #4]
 800f5dc:	60a5      	str	r5, [r4, #8]
 800f5de:	2d00      	cmp	r5, #0
 800f5e0:	bfa2      	ittt	ge
 800f5e2:	6821      	ldrge	r1, [r4, #0]
 800f5e4:	f021 0104 	bicge.w	r1, r1, #4
 800f5e8:	6021      	strge	r1, [r4, #0]
 800f5ea:	b90e      	cbnz	r6, 800f5f0 <_printf_i+0x114>
 800f5ec:	2d00      	cmp	r5, #0
 800f5ee:	d04b      	beq.n	800f688 <_printf_i+0x1ac>
 800f5f0:	4615      	mov	r5, r2
 800f5f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5f6:	fb03 6711 	mls	r7, r3, r1, r6
 800f5fa:	5dc7      	ldrb	r7, [r0, r7]
 800f5fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f600:	4637      	mov	r7, r6
 800f602:	42bb      	cmp	r3, r7
 800f604:	460e      	mov	r6, r1
 800f606:	d9f4      	bls.n	800f5f2 <_printf_i+0x116>
 800f608:	2b08      	cmp	r3, #8
 800f60a:	d10b      	bne.n	800f624 <_printf_i+0x148>
 800f60c:	6823      	ldr	r3, [r4, #0]
 800f60e:	07de      	lsls	r6, r3, #31
 800f610:	d508      	bpl.n	800f624 <_printf_i+0x148>
 800f612:	6923      	ldr	r3, [r4, #16]
 800f614:	6861      	ldr	r1, [r4, #4]
 800f616:	4299      	cmp	r1, r3
 800f618:	bfde      	ittt	le
 800f61a:	2330      	movle	r3, #48	; 0x30
 800f61c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f620:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f624:	1b52      	subs	r2, r2, r5
 800f626:	6122      	str	r2, [r4, #16]
 800f628:	f8cd a000 	str.w	sl, [sp]
 800f62c:	464b      	mov	r3, r9
 800f62e:	aa03      	add	r2, sp, #12
 800f630:	4621      	mov	r1, r4
 800f632:	4640      	mov	r0, r8
 800f634:	f7ff fee4 	bl	800f400 <_printf_common>
 800f638:	3001      	adds	r0, #1
 800f63a:	d14a      	bne.n	800f6d2 <_printf_i+0x1f6>
 800f63c:	f04f 30ff 	mov.w	r0, #4294967295
 800f640:	b004      	add	sp, #16
 800f642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f646:	6823      	ldr	r3, [r4, #0]
 800f648:	f043 0320 	orr.w	r3, r3, #32
 800f64c:	6023      	str	r3, [r4, #0]
 800f64e:	4833      	ldr	r0, [pc, #204]	; (800f71c <_printf_i+0x240>)
 800f650:	2778      	movs	r7, #120	; 0x78
 800f652:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f656:	6823      	ldr	r3, [r4, #0]
 800f658:	6829      	ldr	r1, [r5, #0]
 800f65a:	061f      	lsls	r7, r3, #24
 800f65c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f660:	d402      	bmi.n	800f668 <_printf_i+0x18c>
 800f662:	065f      	lsls	r7, r3, #25
 800f664:	bf48      	it	mi
 800f666:	b2b6      	uxthmi	r6, r6
 800f668:	07df      	lsls	r7, r3, #31
 800f66a:	bf48      	it	mi
 800f66c:	f043 0320 	orrmi.w	r3, r3, #32
 800f670:	6029      	str	r1, [r5, #0]
 800f672:	bf48      	it	mi
 800f674:	6023      	strmi	r3, [r4, #0]
 800f676:	b91e      	cbnz	r6, 800f680 <_printf_i+0x1a4>
 800f678:	6823      	ldr	r3, [r4, #0]
 800f67a:	f023 0320 	bic.w	r3, r3, #32
 800f67e:	6023      	str	r3, [r4, #0]
 800f680:	2310      	movs	r3, #16
 800f682:	e7a7      	b.n	800f5d4 <_printf_i+0xf8>
 800f684:	4824      	ldr	r0, [pc, #144]	; (800f718 <_printf_i+0x23c>)
 800f686:	e7e4      	b.n	800f652 <_printf_i+0x176>
 800f688:	4615      	mov	r5, r2
 800f68a:	e7bd      	b.n	800f608 <_printf_i+0x12c>
 800f68c:	682b      	ldr	r3, [r5, #0]
 800f68e:	6826      	ldr	r6, [r4, #0]
 800f690:	6961      	ldr	r1, [r4, #20]
 800f692:	1d18      	adds	r0, r3, #4
 800f694:	6028      	str	r0, [r5, #0]
 800f696:	0635      	lsls	r5, r6, #24
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	d501      	bpl.n	800f6a0 <_printf_i+0x1c4>
 800f69c:	6019      	str	r1, [r3, #0]
 800f69e:	e002      	b.n	800f6a6 <_printf_i+0x1ca>
 800f6a0:	0670      	lsls	r0, r6, #25
 800f6a2:	d5fb      	bpl.n	800f69c <_printf_i+0x1c0>
 800f6a4:	8019      	strh	r1, [r3, #0]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	6123      	str	r3, [r4, #16]
 800f6aa:	4615      	mov	r5, r2
 800f6ac:	e7bc      	b.n	800f628 <_printf_i+0x14c>
 800f6ae:	682b      	ldr	r3, [r5, #0]
 800f6b0:	1d1a      	adds	r2, r3, #4
 800f6b2:	602a      	str	r2, [r5, #0]
 800f6b4:	681d      	ldr	r5, [r3, #0]
 800f6b6:	6862      	ldr	r2, [r4, #4]
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	f7f0 fd98 	bl	80001f0 <memchr>
 800f6c0:	b108      	cbz	r0, 800f6c6 <_printf_i+0x1ea>
 800f6c2:	1b40      	subs	r0, r0, r5
 800f6c4:	6060      	str	r0, [r4, #4]
 800f6c6:	6863      	ldr	r3, [r4, #4]
 800f6c8:	6123      	str	r3, [r4, #16]
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6d0:	e7aa      	b.n	800f628 <_printf_i+0x14c>
 800f6d2:	6923      	ldr	r3, [r4, #16]
 800f6d4:	462a      	mov	r2, r5
 800f6d6:	4649      	mov	r1, r9
 800f6d8:	4640      	mov	r0, r8
 800f6da:	47d0      	blx	sl
 800f6dc:	3001      	adds	r0, #1
 800f6de:	d0ad      	beq.n	800f63c <_printf_i+0x160>
 800f6e0:	6823      	ldr	r3, [r4, #0]
 800f6e2:	079b      	lsls	r3, r3, #30
 800f6e4:	d413      	bmi.n	800f70e <_printf_i+0x232>
 800f6e6:	68e0      	ldr	r0, [r4, #12]
 800f6e8:	9b03      	ldr	r3, [sp, #12]
 800f6ea:	4298      	cmp	r0, r3
 800f6ec:	bfb8      	it	lt
 800f6ee:	4618      	movlt	r0, r3
 800f6f0:	e7a6      	b.n	800f640 <_printf_i+0x164>
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	4632      	mov	r2, r6
 800f6f6:	4649      	mov	r1, r9
 800f6f8:	4640      	mov	r0, r8
 800f6fa:	47d0      	blx	sl
 800f6fc:	3001      	adds	r0, #1
 800f6fe:	d09d      	beq.n	800f63c <_printf_i+0x160>
 800f700:	3501      	adds	r5, #1
 800f702:	68e3      	ldr	r3, [r4, #12]
 800f704:	9903      	ldr	r1, [sp, #12]
 800f706:	1a5b      	subs	r3, r3, r1
 800f708:	42ab      	cmp	r3, r5
 800f70a:	dcf2      	bgt.n	800f6f2 <_printf_i+0x216>
 800f70c:	e7eb      	b.n	800f6e6 <_printf_i+0x20a>
 800f70e:	2500      	movs	r5, #0
 800f710:	f104 0619 	add.w	r6, r4, #25
 800f714:	e7f5      	b.n	800f702 <_printf_i+0x226>
 800f716:	bf00      	nop
 800f718:	08012746 	.word	0x08012746
 800f71c:	08012757 	.word	0x08012757

0800f720 <__sflush_r>:
 800f720:	898a      	ldrh	r2, [r1, #12]
 800f722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f726:	4605      	mov	r5, r0
 800f728:	0710      	lsls	r0, r2, #28
 800f72a:	460c      	mov	r4, r1
 800f72c:	d458      	bmi.n	800f7e0 <__sflush_r+0xc0>
 800f72e:	684b      	ldr	r3, [r1, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	dc05      	bgt.n	800f740 <__sflush_r+0x20>
 800f734:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f736:	2b00      	cmp	r3, #0
 800f738:	dc02      	bgt.n	800f740 <__sflush_r+0x20>
 800f73a:	2000      	movs	r0, #0
 800f73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f742:	2e00      	cmp	r6, #0
 800f744:	d0f9      	beq.n	800f73a <__sflush_r+0x1a>
 800f746:	2300      	movs	r3, #0
 800f748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f74c:	682f      	ldr	r7, [r5, #0]
 800f74e:	6a21      	ldr	r1, [r4, #32]
 800f750:	602b      	str	r3, [r5, #0]
 800f752:	d032      	beq.n	800f7ba <__sflush_r+0x9a>
 800f754:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f756:	89a3      	ldrh	r3, [r4, #12]
 800f758:	075a      	lsls	r2, r3, #29
 800f75a:	d505      	bpl.n	800f768 <__sflush_r+0x48>
 800f75c:	6863      	ldr	r3, [r4, #4]
 800f75e:	1ac0      	subs	r0, r0, r3
 800f760:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f762:	b10b      	cbz	r3, 800f768 <__sflush_r+0x48>
 800f764:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f766:	1ac0      	subs	r0, r0, r3
 800f768:	2300      	movs	r3, #0
 800f76a:	4602      	mov	r2, r0
 800f76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f76e:	6a21      	ldr	r1, [r4, #32]
 800f770:	4628      	mov	r0, r5
 800f772:	47b0      	blx	r6
 800f774:	1c43      	adds	r3, r0, #1
 800f776:	89a3      	ldrh	r3, [r4, #12]
 800f778:	d106      	bne.n	800f788 <__sflush_r+0x68>
 800f77a:	6829      	ldr	r1, [r5, #0]
 800f77c:	291d      	cmp	r1, #29
 800f77e:	d82b      	bhi.n	800f7d8 <__sflush_r+0xb8>
 800f780:	4a29      	ldr	r2, [pc, #164]	; (800f828 <__sflush_r+0x108>)
 800f782:	410a      	asrs	r2, r1
 800f784:	07d6      	lsls	r6, r2, #31
 800f786:	d427      	bmi.n	800f7d8 <__sflush_r+0xb8>
 800f788:	2200      	movs	r2, #0
 800f78a:	6062      	str	r2, [r4, #4]
 800f78c:	04d9      	lsls	r1, r3, #19
 800f78e:	6922      	ldr	r2, [r4, #16]
 800f790:	6022      	str	r2, [r4, #0]
 800f792:	d504      	bpl.n	800f79e <__sflush_r+0x7e>
 800f794:	1c42      	adds	r2, r0, #1
 800f796:	d101      	bne.n	800f79c <__sflush_r+0x7c>
 800f798:	682b      	ldr	r3, [r5, #0]
 800f79a:	b903      	cbnz	r3, 800f79e <__sflush_r+0x7e>
 800f79c:	6560      	str	r0, [r4, #84]	; 0x54
 800f79e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7a0:	602f      	str	r7, [r5, #0]
 800f7a2:	2900      	cmp	r1, #0
 800f7a4:	d0c9      	beq.n	800f73a <__sflush_r+0x1a>
 800f7a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7aa:	4299      	cmp	r1, r3
 800f7ac:	d002      	beq.n	800f7b4 <__sflush_r+0x94>
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	f7ff fbe2 	bl	800ef78 <_free_r>
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	6360      	str	r0, [r4, #52]	; 0x34
 800f7b8:	e7c0      	b.n	800f73c <__sflush_r+0x1c>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	4628      	mov	r0, r5
 800f7be:	47b0      	blx	r6
 800f7c0:	1c41      	adds	r1, r0, #1
 800f7c2:	d1c8      	bne.n	800f756 <__sflush_r+0x36>
 800f7c4:	682b      	ldr	r3, [r5, #0]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d0c5      	beq.n	800f756 <__sflush_r+0x36>
 800f7ca:	2b1d      	cmp	r3, #29
 800f7cc:	d001      	beq.n	800f7d2 <__sflush_r+0xb2>
 800f7ce:	2b16      	cmp	r3, #22
 800f7d0:	d101      	bne.n	800f7d6 <__sflush_r+0xb6>
 800f7d2:	602f      	str	r7, [r5, #0]
 800f7d4:	e7b1      	b.n	800f73a <__sflush_r+0x1a>
 800f7d6:	89a3      	ldrh	r3, [r4, #12]
 800f7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7dc:	81a3      	strh	r3, [r4, #12]
 800f7de:	e7ad      	b.n	800f73c <__sflush_r+0x1c>
 800f7e0:	690f      	ldr	r7, [r1, #16]
 800f7e2:	2f00      	cmp	r7, #0
 800f7e4:	d0a9      	beq.n	800f73a <__sflush_r+0x1a>
 800f7e6:	0793      	lsls	r3, r2, #30
 800f7e8:	680e      	ldr	r6, [r1, #0]
 800f7ea:	bf08      	it	eq
 800f7ec:	694b      	ldreq	r3, [r1, #20]
 800f7ee:	600f      	str	r7, [r1, #0]
 800f7f0:	bf18      	it	ne
 800f7f2:	2300      	movne	r3, #0
 800f7f4:	eba6 0807 	sub.w	r8, r6, r7
 800f7f8:	608b      	str	r3, [r1, #8]
 800f7fa:	f1b8 0f00 	cmp.w	r8, #0
 800f7fe:	dd9c      	ble.n	800f73a <__sflush_r+0x1a>
 800f800:	6a21      	ldr	r1, [r4, #32]
 800f802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f804:	4643      	mov	r3, r8
 800f806:	463a      	mov	r2, r7
 800f808:	4628      	mov	r0, r5
 800f80a:	47b0      	blx	r6
 800f80c:	2800      	cmp	r0, #0
 800f80e:	dc06      	bgt.n	800f81e <__sflush_r+0xfe>
 800f810:	89a3      	ldrh	r3, [r4, #12]
 800f812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f816:	81a3      	strh	r3, [r4, #12]
 800f818:	f04f 30ff 	mov.w	r0, #4294967295
 800f81c:	e78e      	b.n	800f73c <__sflush_r+0x1c>
 800f81e:	4407      	add	r7, r0
 800f820:	eba8 0800 	sub.w	r8, r8, r0
 800f824:	e7e9      	b.n	800f7fa <__sflush_r+0xda>
 800f826:	bf00      	nop
 800f828:	dfbffffe 	.word	0xdfbffffe

0800f82c <_fflush_r>:
 800f82c:	b538      	push	{r3, r4, r5, lr}
 800f82e:	690b      	ldr	r3, [r1, #16]
 800f830:	4605      	mov	r5, r0
 800f832:	460c      	mov	r4, r1
 800f834:	b913      	cbnz	r3, 800f83c <_fflush_r+0x10>
 800f836:	2500      	movs	r5, #0
 800f838:	4628      	mov	r0, r5
 800f83a:	bd38      	pop	{r3, r4, r5, pc}
 800f83c:	b118      	cbz	r0, 800f846 <_fflush_r+0x1a>
 800f83e:	6a03      	ldr	r3, [r0, #32]
 800f840:	b90b      	cbnz	r3, 800f846 <_fflush_r+0x1a>
 800f842:	f7ff fa5b 	bl	800ecfc <__sinit>
 800f846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d0f3      	beq.n	800f836 <_fflush_r+0xa>
 800f84e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f850:	07d0      	lsls	r0, r2, #31
 800f852:	d404      	bmi.n	800f85e <_fflush_r+0x32>
 800f854:	0599      	lsls	r1, r3, #22
 800f856:	d402      	bmi.n	800f85e <_fflush_r+0x32>
 800f858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f85a:	f7ff fb5e 	bl	800ef1a <__retarget_lock_acquire_recursive>
 800f85e:	4628      	mov	r0, r5
 800f860:	4621      	mov	r1, r4
 800f862:	f7ff ff5d 	bl	800f720 <__sflush_r>
 800f866:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f868:	07da      	lsls	r2, r3, #31
 800f86a:	4605      	mov	r5, r0
 800f86c:	d4e4      	bmi.n	800f838 <_fflush_r+0xc>
 800f86e:	89a3      	ldrh	r3, [r4, #12]
 800f870:	059b      	lsls	r3, r3, #22
 800f872:	d4e1      	bmi.n	800f838 <_fflush_r+0xc>
 800f874:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f876:	f7ff fb51 	bl	800ef1c <__retarget_lock_release_recursive>
 800f87a:	e7dd      	b.n	800f838 <_fflush_r+0xc>

0800f87c <fiprintf>:
 800f87c:	b40e      	push	{r1, r2, r3}
 800f87e:	b503      	push	{r0, r1, lr}
 800f880:	4601      	mov	r1, r0
 800f882:	ab03      	add	r3, sp, #12
 800f884:	4805      	ldr	r0, [pc, #20]	; (800f89c <fiprintf+0x20>)
 800f886:	f853 2b04 	ldr.w	r2, [r3], #4
 800f88a:	6800      	ldr	r0, [r0, #0]
 800f88c:	9301      	str	r3, [sp, #4]
 800f88e:	f7ff fc9d 	bl	800f1cc <_vfiprintf_r>
 800f892:	b002      	add	sp, #8
 800f894:	f85d eb04 	ldr.w	lr, [sp], #4
 800f898:	b003      	add	sp, #12
 800f89a:	4770      	bx	lr
 800f89c:	20000084 	.word	0x20000084

0800f8a0 <__swbuf_r>:
 800f8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8a2:	460e      	mov	r6, r1
 800f8a4:	4614      	mov	r4, r2
 800f8a6:	4605      	mov	r5, r0
 800f8a8:	b118      	cbz	r0, 800f8b2 <__swbuf_r+0x12>
 800f8aa:	6a03      	ldr	r3, [r0, #32]
 800f8ac:	b90b      	cbnz	r3, 800f8b2 <__swbuf_r+0x12>
 800f8ae:	f7ff fa25 	bl	800ecfc <__sinit>
 800f8b2:	69a3      	ldr	r3, [r4, #24]
 800f8b4:	60a3      	str	r3, [r4, #8]
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	071a      	lsls	r2, r3, #28
 800f8ba:	d525      	bpl.n	800f908 <__swbuf_r+0x68>
 800f8bc:	6923      	ldr	r3, [r4, #16]
 800f8be:	b31b      	cbz	r3, 800f908 <__swbuf_r+0x68>
 800f8c0:	6823      	ldr	r3, [r4, #0]
 800f8c2:	6922      	ldr	r2, [r4, #16]
 800f8c4:	1a98      	subs	r0, r3, r2
 800f8c6:	6963      	ldr	r3, [r4, #20]
 800f8c8:	b2f6      	uxtb	r6, r6
 800f8ca:	4283      	cmp	r3, r0
 800f8cc:	4637      	mov	r7, r6
 800f8ce:	dc04      	bgt.n	800f8da <__swbuf_r+0x3a>
 800f8d0:	4621      	mov	r1, r4
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	f7ff ffaa 	bl	800f82c <_fflush_r>
 800f8d8:	b9e0      	cbnz	r0, 800f914 <__swbuf_r+0x74>
 800f8da:	68a3      	ldr	r3, [r4, #8]
 800f8dc:	3b01      	subs	r3, #1
 800f8de:	60a3      	str	r3, [r4, #8]
 800f8e0:	6823      	ldr	r3, [r4, #0]
 800f8e2:	1c5a      	adds	r2, r3, #1
 800f8e4:	6022      	str	r2, [r4, #0]
 800f8e6:	701e      	strb	r6, [r3, #0]
 800f8e8:	6962      	ldr	r2, [r4, #20]
 800f8ea:	1c43      	adds	r3, r0, #1
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d004      	beq.n	800f8fa <__swbuf_r+0x5a>
 800f8f0:	89a3      	ldrh	r3, [r4, #12]
 800f8f2:	07db      	lsls	r3, r3, #31
 800f8f4:	d506      	bpl.n	800f904 <__swbuf_r+0x64>
 800f8f6:	2e0a      	cmp	r6, #10
 800f8f8:	d104      	bne.n	800f904 <__swbuf_r+0x64>
 800f8fa:	4621      	mov	r1, r4
 800f8fc:	4628      	mov	r0, r5
 800f8fe:	f7ff ff95 	bl	800f82c <_fflush_r>
 800f902:	b938      	cbnz	r0, 800f914 <__swbuf_r+0x74>
 800f904:	4638      	mov	r0, r7
 800f906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f908:	4621      	mov	r1, r4
 800f90a:	4628      	mov	r0, r5
 800f90c:	f000 f806 	bl	800f91c <__swsetup_r>
 800f910:	2800      	cmp	r0, #0
 800f912:	d0d5      	beq.n	800f8c0 <__swbuf_r+0x20>
 800f914:	f04f 37ff 	mov.w	r7, #4294967295
 800f918:	e7f4      	b.n	800f904 <__swbuf_r+0x64>
	...

0800f91c <__swsetup_r>:
 800f91c:	b538      	push	{r3, r4, r5, lr}
 800f91e:	4b2a      	ldr	r3, [pc, #168]	; (800f9c8 <__swsetup_r+0xac>)
 800f920:	4605      	mov	r5, r0
 800f922:	6818      	ldr	r0, [r3, #0]
 800f924:	460c      	mov	r4, r1
 800f926:	b118      	cbz	r0, 800f930 <__swsetup_r+0x14>
 800f928:	6a03      	ldr	r3, [r0, #32]
 800f92a:	b90b      	cbnz	r3, 800f930 <__swsetup_r+0x14>
 800f92c:	f7ff f9e6 	bl	800ecfc <__sinit>
 800f930:	89a3      	ldrh	r3, [r4, #12]
 800f932:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f936:	0718      	lsls	r0, r3, #28
 800f938:	d422      	bmi.n	800f980 <__swsetup_r+0x64>
 800f93a:	06d9      	lsls	r1, r3, #27
 800f93c:	d407      	bmi.n	800f94e <__swsetup_r+0x32>
 800f93e:	2309      	movs	r3, #9
 800f940:	602b      	str	r3, [r5, #0]
 800f942:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f946:	81a3      	strh	r3, [r4, #12]
 800f948:	f04f 30ff 	mov.w	r0, #4294967295
 800f94c:	e034      	b.n	800f9b8 <__swsetup_r+0x9c>
 800f94e:	0758      	lsls	r0, r3, #29
 800f950:	d512      	bpl.n	800f978 <__swsetup_r+0x5c>
 800f952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f954:	b141      	cbz	r1, 800f968 <__swsetup_r+0x4c>
 800f956:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f95a:	4299      	cmp	r1, r3
 800f95c:	d002      	beq.n	800f964 <__swsetup_r+0x48>
 800f95e:	4628      	mov	r0, r5
 800f960:	f7ff fb0a 	bl	800ef78 <_free_r>
 800f964:	2300      	movs	r3, #0
 800f966:	6363      	str	r3, [r4, #52]	; 0x34
 800f968:	89a3      	ldrh	r3, [r4, #12]
 800f96a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f96e:	81a3      	strh	r3, [r4, #12]
 800f970:	2300      	movs	r3, #0
 800f972:	6063      	str	r3, [r4, #4]
 800f974:	6923      	ldr	r3, [r4, #16]
 800f976:	6023      	str	r3, [r4, #0]
 800f978:	89a3      	ldrh	r3, [r4, #12]
 800f97a:	f043 0308 	orr.w	r3, r3, #8
 800f97e:	81a3      	strh	r3, [r4, #12]
 800f980:	6923      	ldr	r3, [r4, #16]
 800f982:	b94b      	cbnz	r3, 800f998 <__swsetup_r+0x7c>
 800f984:	89a3      	ldrh	r3, [r4, #12]
 800f986:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f98a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f98e:	d003      	beq.n	800f998 <__swsetup_r+0x7c>
 800f990:	4621      	mov	r1, r4
 800f992:	4628      	mov	r0, r5
 800f994:	f000 f857 	bl	800fa46 <__smakebuf_r>
 800f998:	89a0      	ldrh	r0, [r4, #12]
 800f99a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f99e:	f010 0301 	ands.w	r3, r0, #1
 800f9a2:	d00a      	beq.n	800f9ba <__swsetup_r+0x9e>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	60a3      	str	r3, [r4, #8]
 800f9a8:	6963      	ldr	r3, [r4, #20]
 800f9aa:	425b      	negs	r3, r3
 800f9ac:	61a3      	str	r3, [r4, #24]
 800f9ae:	6923      	ldr	r3, [r4, #16]
 800f9b0:	b943      	cbnz	r3, 800f9c4 <__swsetup_r+0xa8>
 800f9b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f9b6:	d1c4      	bne.n	800f942 <__swsetup_r+0x26>
 800f9b8:	bd38      	pop	{r3, r4, r5, pc}
 800f9ba:	0781      	lsls	r1, r0, #30
 800f9bc:	bf58      	it	pl
 800f9be:	6963      	ldrpl	r3, [r4, #20]
 800f9c0:	60a3      	str	r3, [r4, #8]
 800f9c2:	e7f4      	b.n	800f9ae <__swsetup_r+0x92>
 800f9c4:	2000      	movs	r0, #0
 800f9c6:	e7f7      	b.n	800f9b8 <__swsetup_r+0x9c>
 800f9c8:	20000084 	.word	0x20000084

0800f9cc <_sbrk_r>:
 800f9cc:	b538      	push	{r3, r4, r5, lr}
 800f9ce:	4d06      	ldr	r5, [pc, #24]	; (800f9e8 <_sbrk_r+0x1c>)
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	4604      	mov	r4, r0
 800f9d4:	4608      	mov	r0, r1
 800f9d6:	602b      	str	r3, [r5, #0]
 800f9d8:	f7f1 f916 	bl	8000c08 <_sbrk>
 800f9dc:	1c43      	adds	r3, r0, #1
 800f9de:	d102      	bne.n	800f9e6 <_sbrk_r+0x1a>
 800f9e0:	682b      	ldr	r3, [r5, #0]
 800f9e2:	b103      	cbz	r3, 800f9e6 <_sbrk_r+0x1a>
 800f9e4:	6023      	str	r3, [r4, #0]
 800f9e6:	bd38      	pop	{r3, r4, r5, pc}
 800f9e8:	20008a04 	.word	0x20008a04

0800f9ec <abort>:
 800f9ec:	b508      	push	{r3, lr}
 800f9ee:	2006      	movs	r0, #6
 800f9f0:	f000 f88e 	bl	800fb10 <raise>
 800f9f4:	2001      	movs	r0, #1
 800f9f6:	f7f1 f88f 	bl	8000b18 <_exit>

0800f9fa <__swhatbuf_r>:
 800f9fa:	b570      	push	{r4, r5, r6, lr}
 800f9fc:	460c      	mov	r4, r1
 800f9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa02:	2900      	cmp	r1, #0
 800fa04:	b096      	sub	sp, #88	; 0x58
 800fa06:	4615      	mov	r5, r2
 800fa08:	461e      	mov	r6, r3
 800fa0a:	da0d      	bge.n	800fa28 <__swhatbuf_r+0x2e>
 800fa0c:	89a3      	ldrh	r3, [r4, #12]
 800fa0e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fa12:	f04f 0100 	mov.w	r1, #0
 800fa16:	bf0c      	ite	eq
 800fa18:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fa1c:	2340      	movne	r3, #64	; 0x40
 800fa1e:	2000      	movs	r0, #0
 800fa20:	6031      	str	r1, [r6, #0]
 800fa22:	602b      	str	r3, [r5, #0]
 800fa24:	b016      	add	sp, #88	; 0x58
 800fa26:	bd70      	pop	{r4, r5, r6, pc}
 800fa28:	466a      	mov	r2, sp
 800fa2a:	f000 f879 	bl	800fb20 <_fstat_r>
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	dbec      	blt.n	800fa0c <__swhatbuf_r+0x12>
 800fa32:	9901      	ldr	r1, [sp, #4]
 800fa34:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fa38:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fa3c:	4259      	negs	r1, r3
 800fa3e:	4159      	adcs	r1, r3
 800fa40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa44:	e7eb      	b.n	800fa1e <__swhatbuf_r+0x24>

0800fa46 <__smakebuf_r>:
 800fa46:	898b      	ldrh	r3, [r1, #12]
 800fa48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa4a:	079d      	lsls	r5, r3, #30
 800fa4c:	4606      	mov	r6, r0
 800fa4e:	460c      	mov	r4, r1
 800fa50:	d507      	bpl.n	800fa62 <__smakebuf_r+0x1c>
 800fa52:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa56:	6023      	str	r3, [r4, #0]
 800fa58:	6123      	str	r3, [r4, #16]
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	6163      	str	r3, [r4, #20]
 800fa5e:	b002      	add	sp, #8
 800fa60:	bd70      	pop	{r4, r5, r6, pc}
 800fa62:	ab01      	add	r3, sp, #4
 800fa64:	466a      	mov	r2, sp
 800fa66:	f7ff ffc8 	bl	800f9fa <__swhatbuf_r>
 800fa6a:	9900      	ldr	r1, [sp, #0]
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	4630      	mov	r0, r6
 800fa70:	f7ff faf6 	bl	800f060 <_malloc_r>
 800fa74:	b948      	cbnz	r0, 800fa8a <__smakebuf_r+0x44>
 800fa76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa7a:	059a      	lsls	r2, r3, #22
 800fa7c:	d4ef      	bmi.n	800fa5e <__smakebuf_r+0x18>
 800fa7e:	f023 0303 	bic.w	r3, r3, #3
 800fa82:	f043 0302 	orr.w	r3, r3, #2
 800fa86:	81a3      	strh	r3, [r4, #12]
 800fa88:	e7e3      	b.n	800fa52 <__smakebuf_r+0xc>
 800fa8a:	89a3      	ldrh	r3, [r4, #12]
 800fa8c:	6020      	str	r0, [r4, #0]
 800fa8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa92:	81a3      	strh	r3, [r4, #12]
 800fa94:	9b00      	ldr	r3, [sp, #0]
 800fa96:	6163      	str	r3, [r4, #20]
 800fa98:	9b01      	ldr	r3, [sp, #4]
 800fa9a:	6120      	str	r0, [r4, #16]
 800fa9c:	b15b      	cbz	r3, 800fab6 <__smakebuf_r+0x70>
 800fa9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800faa2:	4630      	mov	r0, r6
 800faa4:	f000 f84e 	bl	800fb44 <_isatty_r>
 800faa8:	b128      	cbz	r0, 800fab6 <__smakebuf_r+0x70>
 800faaa:	89a3      	ldrh	r3, [r4, #12]
 800faac:	f023 0303 	bic.w	r3, r3, #3
 800fab0:	f043 0301 	orr.w	r3, r3, #1
 800fab4:	81a3      	strh	r3, [r4, #12]
 800fab6:	89a3      	ldrh	r3, [r4, #12]
 800fab8:	431d      	orrs	r5, r3
 800faba:	81a5      	strh	r5, [r4, #12]
 800fabc:	e7cf      	b.n	800fa5e <__smakebuf_r+0x18>

0800fabe <_raise_r>:
 800fabe:	291f      	cmp	r1, #31
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4604      	mov	r4, r0
 800fac4:	460d      	mov	r5, r1
 800fac6:	d904      	bls.n	800fad2 <_raise_r+0x14>
 800fac8:	2316      	movs	r3, #22
 800faca:	6003      	str	r3, [r0, #0]
 800facc:	f04f 30ff 	mov.w	r0, #4294967295
 800fad0:	bd38      	pop	{r3, r4, r5, pc}
 800fad2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fad4:	b112      	cbz	r2, 800fadc <_raise_r+0x1e>
 800fad6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fada:	b94b      	cbnz	r3, 800faf0 <_raise_r+0x32>
 800fadc:	4620      	mov	r0, r4
 800fade:	f000 f853 	bl	800fb88 <_getpid_r>
 800fae2:	462a      	mov	r2, r5
 800fae4:	4601      	mov	r1, r0
 800fae6:	4620      	mov	r0, r4
 800fae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800faec:	f000 b83a 	b.w	800fb64 <_kill_r>
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d00a      	beq.n	800fb0a <_raise_r+0x4c>
 800faf4:	1c59      	adds	r1, r3, #1
 800faf6:	d103      	bne.n	800fb00 <_raise_r+0x42>
 800faf8:	2316      	movs	r3, #22
 800fafa:	6003      	str	r3, [r0, #0]
 800fafc:	2001      	movs	r0, #1
 800fafe:	e7e7      	b.n	800fad0 <_raise_r+0x12>
 800fb00:	2400      	movs	r4, #0
 800fb02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fb06:	4628      	mov	r0, r5
 800fb08:	4798      	blx	r3
 800fb0a:	2000      	movs	r0, #0
 800fb0c:	e7e0      	b.n	800fad0 <_raise_r+0x12>
	...

0800fb10 <raise>:
 800fb10:	4b02      	ldr	r3, [pc, #8]	; (800fb1c <raise+0xc>)
 800fb12:	4601      	mov	r1, r0
 800fb14:	6818      	ldr	r0, [r3, #0]
 800fb16:	f7ff bfd2 	b.w	800fabe <_raise_r>
 800fb1a:	bf00      	nop
 800fb1c:	20000084 	.word	0x20000084

0800fb20 <_fstat_r>:
 800fb20:	b538      	push	{r3, r4, r5, lr}
 800fb22:	4d07      	ldr	r5, [pc, #28]	; (800fb40 <_fstat_r+0x20>)
 800fb24:	2300      	movs	r3, #0
 800fb26:	4604      	mov	r4, r0
 800fb28:	4608      	mov	r0, r1
 800fb2a:	4611      	mov	r1, r2
 800fb2c:	602b      	str	r3, [r5, #0]
 800fb2e:	f7f1 f842 	bl	8000bb6 <_fstat>
 800fb32:	1c43      	adds	r3, r0, #1
 800fb34:	d102      	bne.n	800fb3c <_fstat_r+0x1c>
 800fb36:	682b      	ldr	r3, [r5, #0]
 800fb38:	b103      	cbz	r3, 800fb3c <_fstat_r+0x1c>
 800fb3a:	6023      	str	r3, [r4, #0]
 800fb3c:	bd38      	pop	{r3, r4, r5, pc}
 800fb3e:	bf00      	nop
 800fb40:	20008a04 	.word	0x20008a04

0800fb44 <_isatty_r>:
 800fb44:	b538      	push	{r3, r4, r5, lr}
 800fb46:	4d06      	ldr	r5, [pc, #24]	; (800fb60 <_isatty_r+0x1c>)
 800fb48:	2300      	movs	r3, #0
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	4608      	mov	r0, r1
 800fb4e:	602b      	str	r3, [r5, #0]
 800fb50:	f7f1 f841 	bl	8000bd6 <_isatty>
 800fb54:	1c43      	adds	r3, r0, #1
 800fb56:	d102      	bne.n	800fb5e <_isatty_r+0x1a>
 800fb58:	682b      	ldr	r3, [r5, #0]
 800fb5a:	b103      	cbz	r3, 800fb5e <_isatty_r+0x1a>
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	bd38      	pop	{r3, r4, r5, pc}
 800fb60:	20008a04 	.word	0x20008a04

0800fb64 <_kill_r>:
 800fb64:	b538      	push	{r3, r4, r5, lr}
 800fb66:	4d07      	ldr	r5, [pc, #28]	; (800fb84 <_kill_r+0x20>)
 800fb68:	2300      	movs	r3, #0
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	4608      	mov	r0, r1
 800fb6e:	4611      	mov	r1, r2
 800fb70:	602b      	str	r3, [r5, #0]
 800fb72:	f7f0 ffbf 	bl	8000af4 <_kill>
 800fb76:	1c43      	adds	r3, r0, #1
 800fb78:	d102      	bne.n	800fb80 <_kill_r+0x1c>
 800fb7a:	682b      	ldr	r3, [r5, #0]
 800fb7c:	b103      	cbz	r3, 800fb80 <_kill_r+0x1c>
 800fb7e:	6023      	str	r3, [r4, #0]
 800fb80:	bd38      	pop	{r3, r4, r5, pc}
 800fb82:	bf00      	nop
 800fb84:	20008a04 	.word	0x20008a04

0800fb88 <_getpid_r>:
 800fb88:	f7f0 bfac 	b.w	8000ae4 <_getpid>

0800fb8c <_init>:
 800fb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb8e:	bf00      	nop
 800fb90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb92:	bc08      	pop	{r3}
 800fb94:	469e      	mov	lr, r3
 800fb96:	4770      	bx	lr

0800fb98 <_fini>:
 800fb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb9a:	bf00      	nop
 800fb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb9e:	bc08      	pop	{r3}
 800fba0:	469e      	mov	lr, r3
 800fba2:	4770      	bx	lr
