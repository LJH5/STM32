
F446ZE_LED_On.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007168  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08007318  08007318  00008318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a0  080076a0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080076a0  080076a0  000086a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076a8  080076a8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a8  080076a8  000086a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076ac  080076ac  000086ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080076b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000920  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000af4  20000af4  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001396f  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000254c  00000000  00000000  0001cb73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  0001f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8e  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cd0  00000000  00000000  00020fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130fc  00000000  00000000  00046c76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c51  00000000  00000000  00059d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e9c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ab4  00000000  00000000  0013ea08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001444bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007300 	.word	0x08007300

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08007300 	.word	0x08007300

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__io_putchar>:
static void MX_ETH_Init(void);
static void MX_USART3_UART_Init(void);
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4803      	ldr	r0, [pc, #12]	@ (8000ed8 <__io_putchar+0x20>)
 8000eca:	f002 fee1 	bl	8003c90 <HAL_UART_Transmit>
    return ch;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000460 	.word	0x20000460

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee0:	f000 fdb0 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee4:	f000 f834 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f000 f992 	bl	8001210 <MX_GPIO_Init>
  MX_ETH_Init();
 8000eec:	f000 f89a 	bl	8001024 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ef0:	f000 f936 	bl	8001160 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ef4:	f000 f95e 	bl	80011b4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8000ef8:	f000 f8e2 	bl	80010c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2101      	movs	r1, #1
 8000f00:	4811      	ldr	r0, [pc, #68]	@ (8000f48 <main+0x6c>)
 8000f02:	f001 fc1b 	bl	800273c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	480f      	ldr	r0, [pc, #60]	@ (8000f48 <main+0x6c>)
 8000f0c:	f001 fc16 	bl	800273c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f16:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <main+0x6c>)
 8000f18:	f001 fc10 	bl	800273c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim1);
 8000f1c:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <main+0x70>)
 8000f1e:	f002 fa41 	bl	80033a4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2101      	movs	r1, #1
 8000f26:	4808      	ldr	r0, [pc, #32]	@ (8000f48 <main+0x6c>)
 8000f28:	f001 fc08 	bl	800273c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2180      	movs	r1, #128	@ 0x80
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <main+0x6c>)
 8000f32:	f001 fc03 	bl	800273c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <main+0x6c>)
 8000f3e:	f001 fbfd 	bl	800273c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000f42:	bf00      	nop
 8000f44:	e7ed      	b.n	8000f22 <main+0x46>
 8000f46:	bf00      	nop
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	20000418 	.word	0x20000418

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	@ 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	@ 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 faad 	bl	80054be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b28      	ldr	r3, [pc, #160]	@ (800101c <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	4a27      	ldr	r2, [pc, #156]	@ (800101c <SystemClock_Config+0xcc>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f84:	4b25      	ldr	r3, [pc, #148]	@ (800101c <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b22      	ldr	r3, [pc, #136]	@ (8001020 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a21      	ldr	r2, [pc, #132]	@ (8001020 <SystemClock_Config+0xd0>)
 8000f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001020 <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2301      	movs	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fb0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fc4:	23a8      	movs	r3, #168	@ 0xa8
 8000fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd0:	f107 0320 	add.w	r3, r7, #32
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 fcfd 	bl	80029d4 <HAL_RCC_OscConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe0:	f000 fa2e 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ff4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2105      	movs	r1, #5
 8001002:	4618      	mov	r0, r3
 8001004:	f001 ff5e 	bl	8002ec4 <HAL_RCC_ClockConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800100e:	f000 fa17 	bl	8001440 <Error_Handler>
  }
}
 8001012:	bf00      	nop
 8001014:	3750      	adds	r7, #80	@ 0x50
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001028:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <MX_ETH_Init+0x84>)
 800102a:	4a20      	ldr	r2, [pc, #128]	@ (80010ac <MX_ETH_Init+0x88>)
 800102c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800102e:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <MX_ETH_Init+0x8c>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001034:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <MX_ETH_Init+0x8c>)
 8001036:	2280      	movs	r2, #128	@ 0x80
 8001038:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800103a:	4b1d      	ldr	r3, [pc, #116]	@ (80010b0 <MX_ETH_Init+0x8c>)
 800103c:	22e1      	movs	r2, #225	@ 0xe1
 800103e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <MX_ETH_Init+0x8c>)
 8001042:	2200      	movs	r2, #0
 8001044:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001046:	4b1a      	ldr	r3, [pc, #104]	@ (80010b0 <MX_ETH_Init+0x8c>)
 8001048:	2200      	movs	r2, #0
 800104a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <MX_ETH_Init+0x8c>)
 800104e:	2200      	movs	r2, #0
 8001050:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_ETH_Init+0x84>)
 8001054:	4a16      	ldr	r2, [pc, #88]	@ (80010b0 <MX_ETH_Init+0x8c>)
 8001056:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <MX_ETH_Init+0x84>)
 800105a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800105e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_ETH_Init+0x84>)
 8001062:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <MX_ETH_Init+0x90>)
 8001064:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <MX_ETH_Init+0x84>)
 8001068:	4a13      	ldr	r2, [pc, #76]	@ (80010b8 <MX_ETH_Init+0x94>)
 800106a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_ETH_Init+0x84>)
 800106e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001072:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <MX_ETH_Init+0x84>)
 8001076:	f000 fe8d 	bl	8001d94 <HAL_ETH_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001080:	f000 f9de 	bl	8001440 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001084:	2238      	movs	r2, #56	@ 0x38
 8001086:	2100      	movs	r1, #0
 8001088:	480c      	ldr	r0, [pc, #48]	@ (80010bc <MX_ETH_Init+0x98>)
 800108a:	f004 fa18 	bl	80054be <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800108e:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <MX_ETH_Init+0x98>)
 8001090:	2221      	movs	r2, #33	@ 0x21
 8001092:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001094:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <MX_ETH_Init+0x98>)
 8001096:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800109a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <MX_ETH_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000368 	.word	0x20000368
 80010ac:	40028000 	.word	0x40028000
 80010b0:	20000998 	.word	0x20000998
 80010b4:	200002c8 	.word	0x200002c8
 80010b8:	20000228 	.word	0x20000228
 80010bc:	200001f0 	.word	0x200001f0

080010c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <MX_TIM1_Init+0x98>)
 80010de:	4a1f      	ldr	r2, [pc, #124]	@ (800115c <MX_TIM1_Init+0x9c>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 80010e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <MX_TIM1_Init+0x98>)
 80010e4:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80010e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001158 <MX_TIM1_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80010f0:	4b19      	ldr	r3, [pc, #100]	@ (8001158 <MX_TIM1_Init+0x98>)
 80010f2:	2263      	movs	r2, #99	@ 0x63
 80010f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <MX_TIM1_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <MX_TIM1_Init+0x98>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001102:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <MX_TIM1_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001108:	4813      	ldr	r0, [pc, #76]	@ (8001158 <MX_TIM1_Init+0x98>)
 800110a:	f002 f8fb 	bl	8003304 <HAL_TIM_Base_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001114:	f000 f994 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800111e:	f107 0308 	add.w	r3, r7, #8
 8001122:	4619      	mov	r1, r3
 8001124:	480c      	ldr	r0, [pc, #48]	@ (8001158 <MX_TIM1_Init+0x98>)
 8001126:	f002 fa9d 	bl	8003664 <HAL_TIM_ConfigClockSource>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001130:	f000 f986 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001134:	2300      	movs	r3, #0
 8001136:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800113c:	463b      	mov	r3, r7
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	@ (8001158 <MX_TIM1_Init+0x98>)
 8001142:	f002 fcc5 	bl	8003ad0 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800114c:	f000 f978 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000418 	.word	0x20000418
 800115c:	40010000 	.word	0x40010000

08001160 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_USART3_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <MX_USART3_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <MX_USART3_UART_Init+0x4c>)
 800116c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001170:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_USART3_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_USART3_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <MX_USART3_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_USART3_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <MX_USART3_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_USART3_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	@ (80011ac <MX_USART3_UART_Init+0x4c>)
 8001198:	f002 fd2a 	bl	8003bf0 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f94d 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000460 	.word	0x20000460
 80011b0:	40004800 	.word	0x40004800

080011b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80011be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c8:	2202      	movs	r2, #2
 80011ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011da:	2201      	movs	r2, #1
 80011dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f8:	f001 fadd 	bl	80027b6 <HAL_PCD_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001202:	f000 f91d 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200004a8 	.word	0x200004a8

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	4b50      	ldr	r3, [pc, #320]	@ (800136c <MX_GPIO_Init+0x15c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a4f      	ldr	r2, [pc, #316]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b4d      	ldr	r3, [pc, #308]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	4b49      	ldr	r3, [pc, #292]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a48      	ldr	r2, [pc, #288]	@ (800136c <MX_GPIO_Init+0x15c>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b46      	ldr	r3, [pc, #280]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b42      	ldr	r3, [pc, #264]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a41      	ldr	r2, [pc, #260]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b3f      	ldr	r3, [pc, #252]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a3a      	ldr	r2, [pc, #232]	@ (800136c <MX_GPIO_Init+0x15c>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b38      	ldr	r3, [pc, #224]	@ (800136c <MX_GPIO_Init+0x15c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b34      	ldr	r3, [pc, #208]	@ (800136c <MX_GPIO_Init+0x15c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a33      	ldr	r2, [pc, #204]	@ (800136c <MX_GPIO_Init+0x15c>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b31      	ldr	r3, [pc, #196]	@ (800136c <MX_GPIO_Init+0x15c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <MX_GPIO_Init+0x15c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a2c      	ldr	r2, [pc, #176]	@ (800136c <MX_GPIO_Init+0x15c>)
 80012bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b2a      	ldr	r3, [pc, #168]	@ (800136c <MX_GPIO_Init+0x15c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80012d4:	4826      	ldr	r0, [pc, #152]	@ (8001370 <MX_GPIO_Init+0x160>)
 80012d6:	f001 fa31 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2140      	movs	r1, #64	@ 0x40
 80012de:	4825      	ldr	r0, [pc, #148]	@ (8001374 <MX_GPIO_Init+0x164>)
 80012e0:	f001 fa2c 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	481f      	ldr	r0, [pc, #124]	@ (8001378 <MX_GPIO_Init+0x168>)
 80012fc:	f001 f872 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001300:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001304:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001306:	2301      	movs	r3, #1
 8001308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	4815      	ldr	r0, [pc, #84]	@ (8001370 <MX_GPIO_Init+0x160>)
 800131a:	f001 f863 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800131e:	2340      	movs	r3, #64	@ 0x40
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	480f      	ldr	r0, [pc, #60]	@ (8001374 <MX_GPIO_Init+0x164>)
 8001336:	f001 f855 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800133a:	2380      	movs	r3, #128	@ 0x80
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4809      	ldr	r0, [pc, #36]	@ (8001374 <MX_GPIO_Init+0x164>)
 800134e:	f001 f849 	bl	80023e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2028      	movs	r0, #40	@ 0x28
 8001358:	f000 fce5 	bl	8001d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800135c:	2028      	movs	r0, #40	@ 0x28
 800135e:	f000 fcfe 	bl	8001d5e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001362:	bf00      	nop
 8001364:	3730      	adds	r7, #48	@ 0x30
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40020400 	.word	0x40020400
 8001374:	40021800 	.word	0x40021800
 8001378:	40020800 	.word	0x40020800

0800137c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	cnt++;
 8001384:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	4a25      	ldr	r2, [pc, #148]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800138c:	6013      	str	r3, [r2, #0]
	is_10ms = true;
 800138e:	4b25      	ldr	r3, [pc, #148]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
	if (cnt % 2 == 0)
 8001394:	4b22      	ldr	r3, [pc, #136]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		is_20ms = true;
 80013a0:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	701a      	strb	r2, [r3, #0]
	}
	if (cnt % 5 == 0)
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80013ac:	fb83 2301 	smull	r2, r3, r3, r1
 80013b0:	105a      	asrs	r2, r3, #1
 80013b2:	17cb      	asrs	r3, r1, #31
 80013b4:	1ad2      	subs	r2, r2, r3
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	1aca      	subs	r2, r1, r3
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		is_50ms = true;
 80013c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	701a      	strb	r2, [r3, #0]
	}
	if (cnt % 10 == 0)
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013ca:	6819      	ldr	r1, [r3, #0]
 80013cc:	4b17      	ldr	r3, [pc, #92]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80013ce:	fb83 2301 	smull	r2, r3, r3, r1
 80013d2:	109a      	asrs	r2, r3, #2
 80013d4:	17cb      	asrs	r3, r1, #31
 80013d6:	1ad2      	subs	r2, r2, r3
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	1aca      	subs	r2, r1, r3
 80013e2:	2a00      	cmp	r2, #0
 80013e4:	d102      	bne.n	80013ec <HAL_TIM_PeriodElapsedCallback+0x70>
	{
		is_100ms = true;
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
	}
	if (cnt % 25 == 0)
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80013f2:	fb83 2301 	smull	r2, r3, r3, r1
 80013f6:	10da      	asrs	r2, r3, #3
 80013f8:	17cb      	asrs	r3, r1, #31
 80013fa:	1ad2      	subs	r2, r2, r3
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	009a      	lsls	r2, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	1aca      	subs	r2, r1, r3
 8001408:	2a00      	cmp	r2, #0
 800140a:	d102      	bne.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x96>
	{
		is_250ms = true;
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
	}
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2000098c 	.word	0x2000098c
 8001424:	20000990 	.word	0x20000990
 8001428:	20000991 	.word	0x20000991
 800142c:	66666667 	.word	0x66666667
 8001430:	20000992 	.word	0x20000992
 8001434:	20000993 	.word	0x20000993
 8001438:	51eb851f 	.word	0x51eb851f
 800143c:	20000994 	.word	0x20000994

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <Error_Handler+0x8>

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <HAL_MspInit+0x4c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <HAL_MspInit+0x4c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001460:	6453      	str	r3, [r2, #68]	@ 0x44
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <HAL_MspInit+0x4c>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	4a08      	ldr	r2, [pc, #32]	@ (8001498 <HAL_MspInit+0x4c>)
 8001478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147c:	6413      	str	r3, [r2, #64]	@ 0x40
 800147e:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001486:	603b      	str	r3, [r7, #0]
 8001488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800

0800149c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08e      	sub	sp, #56	@ 0x38
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a55      	ldr	r2, [pc, #340]	@ (8001610 <HAL_ETH_MspInit+0x174>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	f040 80a4 	bne.w	8001608 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
 80014c4:	4b53      	ldr	r3, [pc, #332]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c8:	4a52      	ldr	r2, [pc, #328]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 80014ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d0:	4b50      	ldr	r3, [pc, #320]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d8:	623b      	str	r3, [r7, #32]
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	2300      	movs	r3, #0
 80014de:	61fb      	str	r3, [r7, #28]
 80014e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 80014e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ec:	4b49      	ldr	r3, [pc, #292]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014f4:	61fb      	str	r3, [r7, #28]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	2300      	movs	r3, #0
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	4b45      	ldr	r3, [pc, #276]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001500:	4a44      	ldr	r2, [pc, #272]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 8001502:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001506:	6313      	str	r3, [r2, #48]	@ 0x30
 8001508:	4b42      	ldr	r3, [pc, #264]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001510:	61bb      	str	r3, [r7, #24]
 8001512:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	4b3e      	ldr	r3, [pc, #248]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151c:	4a3d      	ldr	r2, [pc, #244]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6313      	str	r3, [r2, #48]	@ 0x30
 8001524:	4b3b      	ldr	r3, [pc, #236]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	2300      	movs	r3, #0
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001538:	4a36      	ldr	r2, [pc, #216]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001540:	4b34      	ldr	r3, [pc, #208]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4b30      	ldr	r3, [pc, #192]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 8001552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001554:	4a2f      	ldr	r2, [pc, #188]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	6313      	str	r3, [r2, #48]	@ 0x30
 800155c:	4b2d      	ldr	r3, [pc, #180]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 800155e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b29      	ldr	r3, [pc, #164]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	4a28      	ldr	r2, [pc, #160]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 8001572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001576:	6313      	str	r3, [r2, #48]	@ 0x30
 8001578:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <HAL_ETH_MspInit+0x178>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001584:	2332      	movs	r3, #50	@ 0x32
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001594:	230b      	movs	r3, #11
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	481e      	ldr	r0, [pc, #120]	@ (8001618 <HAL_ETH_MspInit+0x17c>)
 80015a0:	f000 ff20 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015a4:	2386      	movs	r3, #134	@ 0x86
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b4:	230b      	movs	r3, #11
 80015b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4817      	ldr	r0, [pc, #92]	@ (800161c <HAL_ETH_MspInit+0x180>)
 80015c0:	f000 ff10 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	2303      	movs	r3, #3
 80015d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015d6:	230b      	movs	r3, #11
 80015d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	480f      	ldr	r0, [pc, #60]	@ (8001620 <HAL_ETH_MspInit+0x184>)
 80015e2:	f000 feff 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015e6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f8:	230b      	movs	r3, #11
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4808      	ldr	r0, [pc, #32]	@ (8001624 <HAL_ETH_MspInit+0x188>)
 8001604:	f000 feee 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3738      	adds	r7, #56	@ 0x38
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40028000 	.word	0x40028000
 8001614:	40023800 	.word	0x40023800
 8001618:	40020800 	.word	0x40020800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020400 	.word	0x40020400
 8001624:	40021800 	.word	0x40021800

08001628 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0e      	ldr	r2, [pc, #56]	@ (8001670 <HAL_TIM_Base_MspInit+0x48>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d115      	bne.n	8001666 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	4a0c      	ldr	r2, [pc, #48]	@ (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6453      	str	r3, [r2, #68]	@ 0x44
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_TIM_Base_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2019      	movs	r0, #25
 800165c:	f000 fb63 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001660:	2019      	movs	r0, #25
 8001662:	f000 fb7c 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40010000 	.word	0x40010000
 8001674:	40023800 	.word	0x40023800

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a19      	ldr	r2, [pc, #100]	@ (80016fc <HAL_UART_MspInit+0x84>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d12c      	bne.n	80016f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <HAL_UART_MspInit+0x88>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	4a17      	ldr	r2, [pc, #92]	@ (8001700 <HAL_UART_MspInit+0x88>)
 80016a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_UART_MspInit+0x88>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <HAL_UART_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a10      	ldr	r2, [pc, #64]	@ (8001700 <HAL_UART_MspInit+0x88>)
 80016c0:	f043 0308 	orr.w	r3, r3, #8
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <HAL_UART_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016d2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e4:	2307      	movs	r3, #7
 80016e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <HAL_UART_MspInit+0x8c>)
 80016f0:	f000 fe78 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3728      	adds	r7, #40	@ 0x28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40004800 	.word	0x40004800
 8001700:	40023800 	.word	0x40023800
 8001704:	40020c00 	.word	0x40020c00

08001708 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001728:	d13f      	bne.n	80017aa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b21      	ldr	r3, [pc, #132]	@ (80017b4 <HAL_PCD_MspInit+0xac>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a20      	ldr	r2, [pc, #128]	@ (80017b4 <HAL_PCD_MspInit+0xac>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <HAL_PCD_MspInit+0xac>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001746:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001758:	230a      	movs	r3, #10
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	4815      	ldr	r0, [pc, #84]	@ (80017b8 <HAL_PCD_MspInit+0xb0>)
 8001764:	f000 fe3e 	bl	80023e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001768:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	480e      	ldr	r0, [pc, #56]	@ (80017b8 <HAL_PCD_MspInit+0xb0>)
 800177e:	f000 fe31 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <HAL_PCD_MspInit+0xac>)
 8001784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001786:	4a0b      	ldr	r2, [pc, #44]	@ (80017b4 <HAL_PCD_MspInit+0xac>)
 8001788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178c:	6353      	str	r3, [r2, #52]	@ 0x34
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_PCD_MspInit+0xac>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_PCD_MspInit+0xac>)
 8001798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179c:	6453      	str	r3, [r2, #68]	@ 0x44
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_PCD_MspInit+0xac>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3728      	adds	r7, #40	@ 0x28
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000

080017bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <NMI_Handler+0x4>

080017c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <MemManage_Handler+0x4>

080017d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001812:	f000 f969 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001822:	f001 fe2f 	bl	8003484 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000418 	.word	0x20000418

08001830 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001834:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001838:	f000 ff9a 	bl	8002770 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return 1;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_kill>:

int _kill(int pid, int sig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800185a:	f003 fe83 	bl	8005564 <__errno>
 800185e:	4603      	mov	r3, r0
 8001860:	2216      	movs	r2, #22
 8001862:	601a      	str	r2, [r3, #0]
  return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_exit>:

void _exit (int status)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ffe7 	bl	8001850 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001882:	bf00      	nop
 8001884:	e7fd      	b.n	8001882 <_exit+0x12>

08001886 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b086      	sub	sp, #24
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	e00a      	b.n	80018ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001898:	f3af 8000 	nop.w
 800189c:	4601      	mov	r1, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	60ba      	str	r2, [r7, #8]
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3301      	adds	r3, #1
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dbf0      	blt.n	8001898 <_read+0x12>
  }

  return len;
 80018b6:	687b      	ldr	r3, [r7, #4]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e009      	b.n	80018e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	60ba      	str	r2, [r7, #8]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff faec 	bl	8000eb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dbf1      	blt.n	80018d2 <_write+0x12>
  }
  return len;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_close>:

int _close(int file)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001920:	605a      	str	r2, [r3, #4]
  return 0;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <_isatty>:

int _isatty(int file)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	@ (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f003 fde8 	bl	8005564 <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	@ (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20030000 	.word	0x20030000
 80019c0:	00000400 	.word	0x00000400
 80019c4:	200009a0 	.word	0x200009a0
 80019c8:	20000af8 	.word	0x20000af8

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019f4:	f7ff ffea 	bl	80019cc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f8:	480c      	ldr	r0, [pc, #48]	@ (8001a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019fa:	490d      	ldr	r1, [pc, #52]	@ (8001a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a00:	e002      	b.n	8001a08 <LoopCopyDataInit>

08001a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a06:	3304      	adds	r3, #4

08001a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a0c:	d3f9      	bcc.n	8001a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a10:	4c0a      	ldr	r4, [pc, #40]	@ (8001a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a14:	e001      	b.n	8001a1a <LoopFillZerobss>

08001a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a18:	3204      	adds	r2, #4

08001a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a1c:	d3fb      	bcc.n	8001a16 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f003 fda7 	bl	8005570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a22:	f7ff fa5b 	bl	8000edc <main>
  bx  lr    
 8001a26:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a34:	080076b0 	.word	0x080076b0
  ldr r2, =_sbss
 8001a38:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a3c:	20000af4 	.word	0x20000af4

08001a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a48:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <HAL_Init+0x40>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <HAL_Init+0x40>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	@ (8001a84 <HAL_Init+0x40>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f94f 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fce8 	bl	800144c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f967 	bl	8001d7a <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f92f 	bl	8001d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	@ (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	@ (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	200009a4 	.word	0x200009a4

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200009a4 	.word	0x200009a4

08001b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff ffee 	bl	8001b10 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b42:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <HAL_Delay+0x44>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	@ (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	@ (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	@ (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	@ 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f7ff ff8e 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	@ (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff29 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d38:	f7ff ff3e 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7ff ff8e 	bl	8001c64 <NVIC_EncodePriority>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff5d 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff31 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffa2 	bl	8001ccc <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e06c      	b.n	8001e80 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d106      	bne.n	8001dbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2223      	movs	r2, #35	@ 0x23
 8001db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff fb6f 	bl	800149c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <HAL_ETH_Init+0xf4>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	4a30      	ldr	r2, [pc, #192]	@ (8001e88 <HAL_ETH_Init+0xf4>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dce:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <HAL_ETH_Init+0xf4>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001dda:	4b2c      	ldr	r3, [pc, #176]	@ (8001e8c <HAL_ETH_Init+0xf8>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a2b      	ldr	r2, [pc, #172]	@ (8001e8c <HAL_ETH_Init+0xf8>)
 8001de0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001de4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001de6:	4b29      	ldr	r3, [pc, #164]	@ (8001e8c <HAL_ETH_Init+0xf8>)
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4927      	ldr	r1, [pc, #156]	@ (8001e8c <HAL_ETH_Init+0xf8>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001df4:	4b25      	ldr	r3, [pc, #148]	@ (8001e8c <HAL_ETH_Init+0xf8>)
 8001df6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e10:	f7ff fe7e 	bl	8001b10 <HAL_GetTick>
 8001e14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e16:	e011      	b.n	8001e3c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001e18:	f7ff fe7a 	bl	8001b10 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e26:	d909      	bls.n	8001e3c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	22e0      	movs	r2, #224	@ 0xe0
 8001e34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e021      	b.n	8001e80 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1e4      	bne.n	8001e18 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f958 	bl	8002104 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f9ff 	bl	8002258 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 fa55 	bl	800230a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	461a      	mov	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f9bd 	bl	80021e8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2210      	movs	r2, #16
 8001e7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800

08001e90 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4b51      	ldr	r3, [pc, #324]	@ (8001fec <ETH_SetMACConfig+0x15c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	7c1b      	ldrb	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d102      	bne.n	8001eb8 <ETH_SetMACConfig+0x28>
 8001eb2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001eb6:	e000      	b.n	8001eba <ETH_SetMACConfig+0x2a>
 8001eb8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	7c5b      	ldrb	r3, [r3, #17]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <ETH_SetMACConfig+0x38>
 8001ec2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ec6:	e000      	b.n	8001eca <ETH_SetMACConfig+0x3a>
 8001ec8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ed0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	7fdb      	ldrb	r3, [r3, #31]
 8001ed6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ed8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ede:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	7f92      	ldrb	r2, [r2, #30]
 8001ee4:	2a00      	cmp	r2, #0
 8001ee6:	d102      	bne.n	8001eee <ETH_SetMACConfig+0x5e>
 8001ee8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eec:	e000      	b.n	8001ef0 <ETH_SetMACConfig+0x60>
 8001eee:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ef0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	7f1b      	ldrb	r3, [r3, #28]
 8001ef6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001efe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d102      	bne.n	8001f18 <ETH_SetMACConfig+0x88>
 8001f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f16:	e000      	b.n	8001f1a <ETH_SetMACConfig+0x8a>
 8001f18:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	7bdb      	ldrb	r3, [r3, #15]
 8001f20:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f22:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f30:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f32:	4313      	orrs	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff fdec 	bl	8001b28 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	d101      	bne.n	8001f7e <ETH_SetMACConfig+0xee>
 8001f7a:	2280      	movs	r2, #128	@ 0x80
 8001f7c:	e000      	b.n	8001f80 <ETH_SetMACConfig+0xf0>
 8001f7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f80:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f8e:	2a01      	cmp	r2, #1
 8001f90:	d101      	bne.n	8001f96 <ETH_SetMACConfig+0x106>
 8001f92:	2208      	movs	r2, #8
 8001f94:	e000      	b.n	8001f98 <ETH_SetMACConfig+0x108>
 8001f96:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f98:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001fa0:	2a01      	cmp	r2, #1
 8001fa2:	d101      	bne.n	8001fa8 <ETH_SetMACConfig+0x118>
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	e000      	b.n	8001faa <ETH_SetMACConfig+0x11a>
 8001fa8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001faa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001fb2:	2a01      	cmp	r2, #1
 8001fb4:	d101      	bne.n	8001fba <ETH_SetMACConfig+0x12a>
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	e000      	b.n	8001fbc <ETH_SetMACConfig+0x12c>
 8001fba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7ff fda7 	bl	8001b28 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	619a      	str	r2, [r3, #24]
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	ff20810f 	.word	0xff20810f

08001ff0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <ETH_SetDMAConfig+0x110>)
 800200a:	4013      	ands	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	7b1b      	ldrb	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <ETH_SetDMAConfig+0x2c>
 8002016:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800201a:	e000      	b.n	800201e <ETH_SetDMAConfig+0x2e>
 800201c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7b5b      	ldrb	r3, [r3, #13]
 8002022:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002024:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	7f52      	ldrb	r2, [r2, #29]
 800202a:	2a00      	cmp	r2, #0
 800202c:	d102      	bne.n	8002034 <ETH_SetDMAConfig+0x44>
 800202e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002032:	e000      	b.n	8002036 <ETH_SetDMAConfig+0x46>
 8002034:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002036:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	7b9b      	ldrb	r3, [r3, #14]
 800203c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800203e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002044:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	7f1b      	ldrb	r3, [r3, #28]
 800204a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800204c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	7f9b      	ldrb	r3, [r3, #30]
 8002052:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002054:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800205a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002062:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002064:	4313      	orrs	r3, r2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002074:	461a      	mov	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002086:	2001      	movs	r0, #1
 8002088:	f7ff fd4e 	bl	8001b28 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002094:	461a      	mov	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff fd1f 	bl	8001b28 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	f8de3f23 	.word	0xf8de3f23

08002104 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0a6      	sub	sp, #152	@ 0x98
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002118:	2300      	movs	r3, #0
 800211a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002122:	2301      	movs	r3, #1
 8002124:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002140:	2300      	movs	r3, #0
 8002142:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800214a:	2300      	movs	r3, #0
 800214c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002166:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800216a:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800216c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002170:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002178:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff fe86 	bl	8001e90 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002184:	2301      	movs	r3, #1
 8002186:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002188:	2301      	movs	r3, #1
 800218a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800218c:	2301      	movs	r3, #1
 800218e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021aa:	2301      	movs	r3, #1
 80021ac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021b0:	2301      	movs	r3, #1
 80021b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021b8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021be:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021c6:	2301      	movs	r3, #1
 80021c8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021d4:	f107 0308 	add.w	r3, r7, #8
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff ff08 	bl	8001ff0 <ETH_SetDMAConfig>
}
 80021e0:	bf00      	nop
 80021e2:	3798      	adds	r7, #152	@ 0x98
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3305      	adds	r3, #5
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	3204      	adds	r2, #4
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <ETH_MACAddressConfig+0x68>)
 800220a:	4413      	add	r3, r2
 800220c:	461a      	mov	r2, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3303      	adds	r3, #3
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	061a      	lsls	r2, r3, #24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3302      	adds	r3, #2
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3301      	adds	r3, #1
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	4313      	orrs	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <ETH_MACAddressConfig+0x6c>)
 800223a:	4413      	add	r3, r2
 800223c:	461a      	mov	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	bf00      	nop
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40028040 	.word	0x40028040
 8002254:	40028044 	.word	0x40028044

08002258 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e03e      	b.n	80022e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68d9      	ldr	r1, [r3, #12]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2200      	movs	r2, #0
 8002282:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2200      	movs	r2, #0
 800228e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	3206      	adds	r2, #6
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d80c      	bhi.n	80022c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68d9      	ldr	r1, [r3, #12]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	461a      	mov	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	e004      	b.n	80022d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	3301      	adds	r3, #1
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d9bd      	bls.n	8002266 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022fc:	611a      	str	r2, [r3, #16]
}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	e046      	b.n	80023a6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2200      	movs	r2, #0
 8002346:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2200      	movs	r2, #0
 800234c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002354:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 800235c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800236a:	68b9      	ldr	r1, [r7, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	3212      	adds	r2, #18
 8002372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d80c      	bhi.n	8002396 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6919      	ldr	r1, [r3, #16]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	e004      	b.n	80023a0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3301      	adds	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d9b5      	bls.n	8002318 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d6:	60da      	str	r2, [r3, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	@ 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e177      	b.n	80026f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 8166 	bne.w	80026ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d005      	beq.n	8002436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	2b02      	cmp	r3, #2
 8002434:	d130      	bne.n	8002498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 0201 	and.w	r2, r3, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d017      	beq.n	80024d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d123      	bne.n	8002528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80c0 	beq.w	80026ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b66      	ldr	r3, [pc, #408]	@ (8002708 <HAL_GPIO_Init+0x324>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002572:	4a65      	ldr	r2, [pc, #404]	@ (8002708 <HAL_GPIO_Init+0x324>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002578:	6453      	str	r3, [r2, #68]	@ 0x44
 800257a:	4b63      	ldr	r3, [pc, #396]	@ (8002708 <HAL_GPIO_Init+0x324>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002586:	4a61      	ldr	r2, [pc, #388]	@ (800270c <HAL_GPIO_Init+0x328>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a58      	ldr	r2, [pc, #352]	@ (8002710 <HAL_GPIO_Init+0x32c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d037      	beq.n	8002622 <HAL_GPIO_Init+0x23e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a57      	ldr	r2, [pc, #348]	@ (8002714 <HAL_GPIO_Init+0x330>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d031      	beq.n	800261e <HAL_GPIO_Init+0x23a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a56      	ldr	r2, [pc, #344]	@ (8002718 <HAL_GPIO_Init+0x334>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02b      	beq.n	800261a <HAL_GPIO_Init+0x236>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a55      	ldr	r2, [pc, #340]	@ (800271c <HAL_GPIO_Init+0x338>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d025      	beq.n	8002616 <HAL_GPIO_Init+0x232>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a54      	ldr	r2, [pc, #336]	@ (8002720 <HAL_GPIO_Init+0x33c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01f      	beq.n	8002612 <HAL_GPIO_Init+0x22e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a53      	ldr	r2, [pc, #332]	@ (8002724 <HAL_GPIO_Init+0x340>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d019      	beq.n	800260e <HAL_GPIO_Init+0x22a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a52      	ldr	r2, [pc, #328]	@ (8002728 <HAL_GPIO_Init+0x344>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_GPIO_Init+0x226>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a51      	ldr	r2, [pc, #324]	@ (800272c <HAL_GPIO_Init+0x348>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00d      	beq.n	8002606 <HAL_GPIO_Init+0x222>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a50      	ldr	r2, [pc, #320]	@ (8002730 <HAL_GPIO_Init+0x34c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <HAL_GPIO_Init+0x21e>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002734 <HAL_GPIO_Init+0x350>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_GPIO_Init+0x21a>
 80025fa:	2309      	movs	r3, #9
 80025fc:	e012      	b.n	8002624 <HAL_GPIO_Init+0x240>
 80025fe:	230a      	movs	r3, #10
 8002600:	e010      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002602:	2308      	movs	r3, #8
 8002604:	e00e      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002606:	2307      	movs	r3, #7
 8002608:	e00c      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800260a:	2306      	movs	r3, #6
 800260c:	e00a      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800260e:	2305      	movs	r3, #5
 8002610:	e008      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002612:	2304      	movs	r3, #4
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002616:	2303      	movs	r3, #3
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x240>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x240>
 8002622:	2300      	movs	r3, #0
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4093      	lsls	r3, r2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002634:	4935      	ldr	r1, [pc, #212]	@ (800270c <HAL_GPIO_Init+0x328>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002642:	4b3d      	ldr	r3, [pc, #244]	@ (8002738 <HAL_GPIO_Init+0x354>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002666:	4a34      	ldr	r2, [pc, #208]	@ (8002738 <HAL_GPIO_Init+0x354>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800266c:	4b32      	ldr	r3, [pc, #200]	@ (8002738 <HAL_GPIO_Init+0x354>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002690:	4a29      	ldr	r2, [pc, #164]	@ (8002738 <HAL_GPIO_Init+0x354>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002696:	4b28      	ldr	r3, [pc, #160]	@ (8002738 <HAL_GPIO_Init+0x354>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002738 <HAL_GPIO_Init+0x354>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <HAL_GPIO_Init+0x354>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026e4:	4a14      	ldr	r2, [pc, #80]	@ (8002738 <HAL_GPIO_Init+0x354>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	f67f ae84 	bls.w	8002400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40021400 	.word	0x40021400
 8002728:	40021800 	.word	0x40021800
 800272c:	40021c00 	.word	0x40021c00
 8002730:	40022000 	.word	0x40022000
 8002734:	40022400 	.word	0x40022400
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800277a:	4b08      	ldr	r3, [pc, #32]	@ (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	88fb      	ldrh	r3, [r7, #6]
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002786:	4a05      	ldr	r2, [pc, #20]	@ (800279c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f806 	bl	80027a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40013c00 	.word	0x40013c00

080027a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af02      	add	r7, sp, #8
 80027bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e101      	b.n	80029cc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe ff90 	bl	8001708 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2203      	movs	r2, #3
 80027ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027f6:	d102      	bne.n	80027fe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f001 fe64 	bl	80044d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7c1a      	ldrb	r2, [r3, #16]
 8002810:	f88d 2000 	strb.w	r2, [sp]
 8002814:	3304      	adds	r3, #4
 8002816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002818:	f001 fdf6 	bl	8004408 <USB_CoreInit>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e0ce      	b.n	80029cc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f001 fe5c 	bl	80044f2 <USB_SetCurrentMode>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0bf      	b.n	80029cc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]
 8002850:	e04a      	b.n	80028e8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002852:	7bfa      	ldrb	r2, [r7, #15]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	3315      	adds	r3, #21
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3314      	adds	r3, #20
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	b298      	uxth	r0, r3
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	4413      	add	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	440b      	add	r3, r1
 800288c:	332e      	adds	r3, #46	@ 0x2e
 800288e:	4602      	mov	r2, r0
 8002890:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002892:	7bfa      	ldrb	r2, [r7, #15]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	3318      	adds	r3, #24
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	331c      	adds	r3, #28
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028ba:	7bfa      	ldrb	r2, [r7, #15]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3320      	adds	r3, #32
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	3324      	adds	r3, #36	@ 0x24
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	3301      	adds	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	791b      	ldrb	r3, [r3, #4]
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d3af      	bcc.n	8002852 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	73fb      	strb	r3, [r7, #15]
 80028f6:	e044      	b.n	8002982 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002920:	7bfa      	ldrb	r2, [r7, #15]
 8002922:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002924:	7bfa      	ldrb	r2, [r7, #15]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	3301      	adds	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	791b      	ldrb	r3, [r3, #4]
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3b5      	bcc.n	80028f8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	7c1a      	ldrb	r2, [r3, #16]
 8002994:	f88d 2000 	strb.w	r2, [sp]
 8002998:	3304      	adds	r3, #4
 800299a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299c:	f001 fdf6 	bl	800458c <USB_DevInit>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2202      	movs	r2, #2
 80029aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e00c      	b.n	80029cc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 ffbe 	bl	8004946 <USB_DevDisconnect>

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e267      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d075      	beq.n	8002ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029f2:	4b88      	ldr	r3, [pc, #544]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d00c      	beq.n	8002a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fe:	4b85      	ldr	r3, [pc, #532]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d112      	bne.n	8002a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0a:	4b82      	ldr	r3, [pc, #520]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a16:	d10b      	bne.n	8002a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a18:	4b7e      	ldr	r3, [pc, #504]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d05b      	beq.n	8002adc <HAL_RCC_OscConfig+0x108>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d157      	bne.n	8002adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e242      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a38:	d106      	bne.n	8002a48 <HAL_RCC_OscConfig+0x74>
 8002a3a:	4b76      	ldr	r3, [pc, #472]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a75      	ldr	r2, [pc, #468]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e01d      	b.n	8002a84 <HAL_RCC_OscConfig+0xb0>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x98>
 8002a52:	4b70      	ldr	r3, [pc, #448]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a6f      	ldr	r2, [pc, #444]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a6c      	ldr	r2, [pc, #432]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0xb0>
 8002a6c:	4b69      	ldr	r3, [pc, #420]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a68      	ldr	r2, [pc, #416]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b66      	ldr	r3, [pc, #408]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a65      	ldr	r2, [pc, #404]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d013      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7ff f840 	bl	8001b10 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a94:	f7ff f83c 	bl	8001b10 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	@ 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e207      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0xc0>
 8002ab2:	e014      	b.n	8002ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff f82c 	bl	8001b10 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002abc:	f7ff f828 	bl	8001b10 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	@ 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1f3      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ace:	4b51      	ldr	r3, [pc, #324]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f0      	bne.n	8002abc <HAL_RCC_OscConfig+0xe8>
 8002ada:	e000      	b.n	8002ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d063      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002aea:	4b4a      	ldr	r3, [pc, #296]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d11c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b02:	4b44      	ldr	r3, [pc, #272]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d116      	bne.n	8002b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0e:	4b41      	ldr	r3, [pc, #260]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d005      	beq.n	8002b26 <HAL_RCC_OscConfig+0x152>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1c7      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b26:	4b3b      	ldr	r3, [pc, #236]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4937      	ldr	r1, [pc, #220]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3a:	e03a      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d020      	beq.n	8002b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b44:	4b34      	ldr	r3, [pc, #208]	@ (8002c18 <HAL_RCC_OscConfig+0x244>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe ffe1 	bl	8001b10 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b52:	f7fe ffdd 	bl	8001b10 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e1a8      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b64:	4b2b      	ldr	r3, [pc, #172]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	4b28      	ldr	r3, [pc, #160]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4925      	ldr	r1, [pc, #148]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	e015      	b.n	8002bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b86:	4b24      	ldr	r3, [pc, #144]	@ (8002c18 <HAL_RCC_OscConfig+0x244>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe ffc0 	bl	8001b10 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe ffbc 	bl	8001b10 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e187      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d036      	beq.n	8002c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc6:	4b15      	ldr	r3, [pc, #84]	@ (8002c1c <HAL_RCC_OscConfig+0x248>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe ffa0 	bl	8001b10 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe ff9c 	bl	8001b10 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e167      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_RCC_OscConfig+0x240>)
 8002be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x200>
 8002bf2:	e01b      	b.n	8002c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf4:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <HAL_RCC_OscConfig+0x248>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe ff89 	bl	8001b10 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c00:	e00e      	b.n	8002c20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c02:	f7fe ff85 	bl	8001b10 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d907      	bls.n	8002c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e150      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
 8002c14:	40023800 	.word	0x40023800
 8002c18:	42470000 	.word	0x42470000
 8002c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	4b88      	ldr	r3, [pc, #544]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1ea      	bne.n	8002c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 8097 	beq.w	8002d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3e:	4b81      	ldr	r3, [pc, #516]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10f      	bne.n	8002c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	4a7c      	ldr	r2, [pc, #496]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c66:	2301      	movs	r3, #1
 8002c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6a:	4b77      	ldr	r3, [pc, #476]	@ (8002e48 <HAL_RCC_OscConfig+0x474>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d118      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c76:	4b74      	ldr	r3, [pc, #464]	@ (8002e48 <HAL_RCC_OscConfig+0x474>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a73      	ldr	r2, [pc, #460]	@ (8002e48 <HAL_RCC_OscConfig+0x474>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c82:	f7fe ff45 	bl	8001b10 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7fe ff41 	bl	8001b10 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e10c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002e48 <HAL_RCC_OscConfig+0x474>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x2ea>
 8002cb0:	4b64      	ldr	r3, [pc, #400]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb4:	4a63      	ldr	r2, [pc, #396]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cbc:	e01c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x324>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	2b05      	cmp	r3, #5
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x30c>
 8002cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cca:	4a5e      	ldr	r2, [pc, #376]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	f043 0304 	orr.w	r3, r3, #4
 8002cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x324>
 8002ce0:	4b58      	ldr	r3, [pc, #352]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce4:	4a57      	ldr	r2, [pc, #348]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cec:	4b55      	ldr	r3, [pc, #340]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf0:	4a54      	ldr	r2, [pc, #336]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	f023 0304 	bic.w	r3, r3, #4
 8002cf6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d00:	f7fe ff06 	bl	8001b10 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d08:	f7fe ff02 	bl	8001b10 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e0cb      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1e:	4b49      	ldr	r3, [pc, #292]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0ee      	beq.n	8002d08 <HAL_RCC_OscConfig+0x334>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fef0 	bl	8001b10 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d32:	e00a      	b.n	8002d4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d34:	f7fe feec 	bl	8001b10 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e0b5      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1ee      	bne.n	8002d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d5c:	4b39      	ldr	r3, [pc, #228]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	4a38      	ldr	r2, [pc, #224]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80a1 	beq.w	8002eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d72:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d05c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d141      	bne.n	8002e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	4b31      	ldr	r3, [pc, #196]	@ (8002e4c <HAL_RCC_OscConfig+0x478>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fec0 	bl	8001b10 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d94:	f7fe febc 	bl	8001b10 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e087      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da6:	4b27      	ldr	r3, [pc, #156]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	019b      	lsls	r3, r3, #6
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc8:	085b      	lsrs	r3, r3, #1
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	491b      	ldr	r1, [pc, #108]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_RCC_OscConfig+0x478>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7fe fe95 	bl	8001b10 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe fe91 	bl	8001b10 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e05c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x416>
 8002e08:	e054      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <HAL_RCC_OscConfig+0x478>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fe7e 	bl	8001b10 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe fe7a 	bl	8001b10 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e045      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_OscConfig+0x470>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x444>
 8002e36:	e03d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e038      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec0 <HAL_RCC_OscConfig+0x4ec>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d028      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d121      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d11a      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d111      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3718      	adds	r7, #24
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800

08002ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0cc      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b68      	ldr	r3, [pc, #416]	@ (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d90c      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b65      	ldr	r3, [pc, #404]	@ (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b63      	ldr	r3, [pc, #396]	@ (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0b8      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d020      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f18:	4b59      	ldr	r3, [pc, #356]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a58      	ldr	r2, [pc, #352]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f30:	4b53      	ldr	r3, [pc, #332]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	4a52      	ldr	r2, [pc, #328]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3c:	4b50      	ldr	r3, [pc, #320]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	494d      	ldr	r1, [pc, #308]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d044      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4b47      	ldr	r3, [pc, #284]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d119      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e07f      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d003      	beq.n	8002f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f82:	4b3f      	ldr	r3, [pc, #252]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e06f      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f92:	4b3b      	ldr	r3, [pc, #236]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e067      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fa2:	4b37      	ldr	r3, [pc, #220]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f023 0203 	bic.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4934      	ldr	r1, [pc, #208]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb4:	f7fe fdac 	bl	8001b10 <HAL_GetTick>
 8002fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbc:	f7fe fda8 	bl	8001b10 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e04f      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 020c 	and.w	r2, r3, #12
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d1eb      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe4:	4b25      	ldr	r3, [pc, #148]	@ (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 030f 	and.w	r3, r3, #15
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d20c      	bcs.n	800300c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff2:	4b22      	ldr	r3, [pc, #136]	@ (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b20      	ldr	r3, [pc, #128]	@ (800307c <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e032      	b.n	8003072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003018:	4b19      	ldr	r3, [pc, #100]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4916      	ldr	r1, [pc, #88]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003036:	4b12      	ldr	r3, [pc, #72]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	490e      	ldr	r1, [pc, #56]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800304a:	f000 f821 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 800304e:	4602      	mov	r2, r0
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	490a      	ldr	r1, [pc, #40]	@ (8003084 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	5ccb      	ldrb	r3, [r1, r3]
 800305e:	fa22 f303 	lsr.w	r3, r2, r3
 8003062:	4a09      	ldr	r2, [pc, #36]	@ (8003088 <HAL_RCC_ClockConfig+0x1c4>)
 8003064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003066:	4b09      	ldr	r3, [pc, #36]	@ (800308c <HAL_RCC_ClockConfig+0x1c8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fd0c 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40023c00 	.word	0x40023c00
 8003080:	40023800 	.word	0x40023800
 8003084:	08007318 	.word	0x08007318
 8003088:	20000000 	.word	0x20000000
 800308c:	20000004 	.word	0x20000004

08003090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003094:	b094      	sub	sp, #80	@ 0x50
 8003096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	647b      	str	r3, [r7, #68]	@ 0x44
 800309c:	2300      	movs	r3, #0
 800309e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030a0:	2300      	movs	r3, #0
 80030a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a8:	4b79      	ldr	r3, [pc, #484]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x200>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 030c 	and.w	r3, r3, #12
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d00d      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0x40>
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	f200 80e1 	bhi.w	800327c <HAL_RCC_GetSysClockFreq+0x1ec>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d002      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x34>
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d003      	beq.n	80030ca <HAL_RCC_GetSysClockFreq+0x3a>
 80030c2:	e0db      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c4:	4b73      	ldr	r3, [pc, #460]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x204>)
 80030c6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80030c8:	e0db      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ca:	4b73      	ldr	r3, [pc, #460]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x208>)
 80030cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030ce:	e0d8      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x200>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030da:	4b6d      	ldr	r3, [pc, #436]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x200>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d063      	beq.n	80031ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	099b      	lsrs	r3, r3, #6
 80030ec:	2200      	movs	r2, #0
 80030ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80030fa:	2300      	movs	r3, #0
 80030fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80030fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003102:	4622      	mov	r2, r4
 8003104:	462b      	mov	r3, r5
 8003106:	f04f 0000 	mov.w	r0, #0
 800310a:	f04f 0100 	mov.w	r1, #0
 800310e:	0159      	lsls	r1, r3, #5
 8003110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003114:	0150      	lsls	r0, r2, #5
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4621      	mov	r1, r4
 800311c:	1a51      	subs	r1, r2, r1
 800311e:	6139      	str	r1, [r7, #16]
 8003120:	4629      	mov	r1, r5
 8003122:	eb63 0301 	sbc.w	r3, r3, r1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003134:	4659      	mov	r1, fp
 8003136:	018b      	lsls	r3, r1, #6
 8003138:	4651      	mov	r1, sl
 800313a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313e:	4651      	mov	r1, sl
 8003140:	018a      	lsls	r2, r1, #6
 8003142:	4651      	mov	r1, sl
 8003144:	ebb2 0801 	subs.w	r8, r2, r1
 8003148:	4659      	mov	r1, fp
 800314a:	eb63 0901 	sbc.w	r9, r3, r1
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800315a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800315e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003162:	4690      	mov	r8, r2
 8003164:	4699      	mov	r9, r3
 8003166:	4623      	mov	r3, r4
 8003168:	eb18 0303 	adds.w	r3, r8, r3
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	462b      	mov	r3, r5
 8003170:	eb49 0303 	adc.w	r3, r9, r3
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003182:	4629      	mov	r1, r5
 8003184:	024b      	lsls	r3, r1, #9
 8003186:	4621      	mov	r1, r4
 8003188:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800318c:	4621      	mov	r1, r4
 800318e:	024a      	lsls	r2, r1, #9
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003196:	2200      	movs	r2, #0
 8003198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800319a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800319c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031a0:	f7fd fd12 	bl	8000bc8 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4613      	mov	r3, r2
 80031aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ac:	e058      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031ae:	4b38      	ldr	r3, [pc, #224]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x200>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	099b      	lsrs	r3, r3, #6
 80031b4:	2200      	movs	r2, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	4611      	mov	r1, r2
 80031ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031be:	623b      	str	r3, [r7, #32]
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c8:	4642      	mov	r2, r8
 80031ca:	464b      	mov	r3, r9
 80031cc:	f04f 0000 	mov.w	r0, #0
 80031d0:	f04f 0100 	mov.w	r1, #0
 80031d4:	0159      	lsls	r1, r3, #5
 80031d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031da:	0150      	lsls	r0, r2, #5
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4641      	mov	r1, r8
 80031e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80031e6:	4649      	mov	r1, r9
 80031e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003200:	ebb2 040a 	subs.w	r4, r2, sl
 8003204:	eb63 050b 	sbc.w	r5, r3, fp
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	00eb      	lsls	r3, r5, #3
 8003212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003216:	00e2      	lsls	r2, r4, #3
 8003218:	4614      	mov	r4, r2
 800321a:	461d      	mov	r5, r3
 800321c:	4643      	mov	r3, r8
 800321e:	18e3      	adds	r3, r4, r3
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	464b      	mov	r3, r9
 8003224:	eb45 0303 	adc.w	r3, r5, r3
 8003228:	607b      	str	r3, [r7, #4]
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003236:	4629      	mov	r1, r5
 8003238:	028b      	lsls	r3, r1, #10
 800323a:	4621      	mov	r1, r4
 800323c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003240:	4621      	mov	r1, r4
 8003242:	028a      	lsls	r2, r1, #10
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800324a:	2200      	movs	r2, #0
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	61fa      	str	r2, [r7, #28]
 8003250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003254:	f7fd fcb8 	bl	8000bc8 <__aeabi_uldivmod>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4613      	mov	r3, r2
 800325e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003260:	4b0b      	ldr	r3, [pc, #44]	@ (8003290 <HAL_RCC_GetSysClockFreq+0x200>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	3301      	adds	r3, #1
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003270:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003274:	fbb2 f3f3 	udiv	r3, r2, r3
 8003278:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800327a:	e002      	b.n	8003282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800327c:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <HAL_RCC_GetSysClockFreq+0x204>)
 800327e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003284:	4618      	mov	r0, r3
 8003286:	3750      	adds	r7, #80	@ 0x50
 8003288:	46bd      	mov	sp, r7
 800328a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	00f42400 	.word	0x00f42400
 8003298:	007a1200 	.word	0x007a1200

0800329c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032a0:	4b03      	ldr	r3, [pc, #12]	@ (80032b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80032a2:	681b      	ldr	r3, [r3, #0]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000000 	.word	0x20000000

080032b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b8:	f7ff fff0 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032bc:	4602      	mov	r2, r0
 80032be:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0a9b      	lsrs	r3, r3, #10
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	4903      	ldr	r1, [pc, #12]	@ (80032d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ca:	5ccb      	ldrb	r3, [r1, r3]
 80032cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	08007328 	.word	0x08007328

080032dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032e0:	f7ff ffdc 	bl	800329c <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0b5b      	lsrs	r3, r3, #13
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4903      	ldr	r1, [pc, #12]	@ (8003300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40023800 	.word	0x40023800
 8003300:	08007328 	.word	0x08007328

08003304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e041      	b.n	800339a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe f97c 	bl	8001628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3304      	adds	r3, #4
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f000 fa7e 	bl	8003844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e04e      	b.n	800345a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a23      	ldr	r2, [pc, #140]	@ (8003468 <HAL_TIM_Base_Start_IT+0xc4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d022      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e6:	d01d      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1f      	ldr	r2, [pc, #124]	@ (800346c <HAL_TIM_Base_Start_IT+0xc8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d018      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <HAL_TIM_Base_Start_IT+0xcc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <HAL_TIM_Base_Start_IT+0xd0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00e      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <HAL_TIM_Base_Start_IT+0xd4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d009      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a19      	ldr	r2, [pc, #100]	@ (800347c <HAL_TIM_Base_Start_IT+0xd8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d004      	beq.n	8003424 <HAL_TIM_Base_Start_IT+0x80>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a18      	ldr	r2, [pc, #96]	@ (8003480 <HAL_TIM_Base_Start_IT+0xdc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d111      	bne.n	8003448 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b06      	cmp	r3, #6
 8003434:	d010      	beq.n	8003458 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 0201 	orr.w	r2, r2, #1
 8003444:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003446:	e007      	b.n	8003458 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40010000 	.word	0x40010000
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800
 8003474:	40000c00 	.word	0x40000c00
 8003478:	40010400 	.word	0x40010400
 800347c:	40014000 	.word	0x40014000
 8003480:	40001800 	.word	0x40001800

08003484 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d020      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d01b      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f06f 0202 	mvn.w	r2, #2
 80034b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f999 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80034d4:	e005      	b.n	80034e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f98b 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 f99c 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d020      	beq.n	8003534 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d01b      	beq.n	8003534 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0204 	mvn.w	r2, #4
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2202      	movs	r2, #2
 800350a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f973 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 8003520:	e005      	b.n	800352e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f965 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f976 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d020      	beq.n	8003580 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0208 	mvn.w	r2, #8
 8003550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2204      	movs	r2, #4
 8003556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f94d 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 800356c:	e005      	b.n	800357a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f93f 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f950 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d020      	beq.n	80035cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01b      	beq.n	80035cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f06f 0210 	mvn.w	r2, #16
 800359c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2208      	movs	r2, #8
 80035a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f927 	bl	8003806 <HAL_TIM_IC_CaptureCallback>
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f919 	bl	80037f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f92a 	bl	800381a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f06f 0201 	mvn.w	r2, #1
 80035e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fd fec6 	bl	800137c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800360c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 fae4 	bl	8003bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00c      	beq.n	8003638 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003624:	2b00      	cmp	r3, #0
 8003626:	d007      	beq.n	8003638 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8fb 	bl	800382e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00c      	beq.n	800365c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d007      	beq.n	800365c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0220 	mvn.w	r2, #32
 8003654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fab6 	bl	8003bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_TIM_ConfigClockSource+0x1c>
 800367c:	2302      	movs	r3, #2
 800367e:	e0b4      	b.n	80037ea <HAL_TIM_ConfigClockSource+0x186>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800369e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b8:	d03e      	beq.n	8003738 <HAL_TIM_ConfigClockSource+0xd4>
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036be:	f200 8087 	bhi.w	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c6:	f000 8086 	beq.w	80037d6 <HAL_TIM_ConfigClockSource+0x172>
 80036ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036ce:	d87f      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d0:	2b70      	cmp	r3, #112	@ 0x70
 80036d2:	d01a      	beq.n	800370a <HAL_TIM_ConfigClockSource+0xa6>
 80036d4:	2b70      	cmp	r3, #112	@ 0x70
 80036d6:	d87b      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036d8:	2b60      	cmp	r3, #96	@ 0x60
 80036da:	d050      	beq.n	800377e <HAL_TIM_ConfigClockSource+0x11a>
 80036dc:	2b60      	cmp	r3, #96	@ 0x60
 80036de:	d877      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e0:	2b50      	cmp	r3, #80	@ 0x50
 80036e2:	d03c      	beq.n	800375e <HAL_TIM_ConfigClockSource+0xfa>
 80036e4:	2b50      	cmp	r3, #80	@ 0x50
 80036e6:	d873      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036e8:	2b40      	cmp	r3, #64	@ 0x40
 80036ea:	d058      	beq.n	800379e <HAL_TIM_ConfigClockSource+0x13a>
 80036ec:	2b40      	cmp	r3, #64	@ 0x40
 80036ee:	d86f      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f0:	2b30      	cmp	r3, #48	@ 0x30
 80036f2:	d064      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 80036f4:	2b30      	cmp	r3, #48	@ 0x30
 80036f6:	d86b      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d060      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d867      	bhi.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003700:	2b00      	cmp	r3, #0
 8003702:	d05c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 8003704:	2b10      	cmp	r3, #16
 8003706:	d05a      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x15a>
 8003708:	e062      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800371a:	f000 f9b9 	bl	8003a90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800372c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	609a      	str	r2, [r3, #8]
      break;
 8003736:	e04f      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003748:	f000 f9a2 	bl	8003a90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800375a:	609a      	str	r2, [r3, #8]
      break;
 800375c:	e03c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800376a:	461a      	mov	r2, r3
 800376c:	f000 f916 	bl	800399c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2150      	movs	r1, #80	@ 0x50
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f96f 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 800377c:	e02c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800378a:	461a      	mov	r2, r3
 800378c:	f000 f935 	bl	80039fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2160      	movs	r1, #96	@ 0x60
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f95f 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 800379c:	e01c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037aa:	461a      	mov	r2, r3
 80037ac:	f000 f8f6 	bl	800399c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2140      	movs	r1, #64	@ 0x40
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f94f 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 80037bc:	e00c      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4619      	mov	r1, r3
 80037c8:	4610      	mov	r0, r2
 80037ca:	f000 f946 	bl	8003a5a <TIM_ITRx_SetConfig>
      break;
 80037ce:	e003      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e000      	b.n	80037d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80037d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a46      	ldr	r2, [pc, #280]	@ (8003970 <TIM_Base_SetConfig+0x12c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003862:	d00f      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a43      	ldr	r2, [pc, #268]	@ (8003974 <TIM_Base_SetConfig+0x130>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a42      	ldr	r2, [pc, #264]	@ (8003978 <TIM_Base_SetConfig+0x134>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a41      	ldr	r2, [pc, #260]	@ (800397c <TIM_Base_SetConfig+0x138>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x40>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a40      	ldr	r2, [pc, #256]	@ (8003980 <TIM_Base_SetConfig+0x13c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a35      	ldr	r2, [pc, #212]	@ (8003970 <TIM_Base_SetConfig+0x12c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d02b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d027      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a32      	ldr	r2, [pc, #200]	@ (8003974 <TIM_Base_SetConfig+0x130>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d023      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a31      	ldr	r2, [pc, #196]	@ (8003978 <TIM_Base_SetConfig+0x134>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a30      	ldr	r2, [pc, #192]	@ (800397c <TIM_Base_SetConfig+0x138>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003980 <TIM_Base_SetConfig+0x13c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d017      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003984 <TIM_Base_SetConfig+0x140>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003988 <TIM_Base_SetConfig+0x144>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00f      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a2c      	ldr	r2, [pc, #176]	@ (800398c <TIM_Base_SetConfig+0x148>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003990 <TIM_Base_SetConfig+0x14c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d007      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003994 <TIM_Base_SetConfig+0x150>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d003      	beq.n	80038f6 <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a29      	ldr	r2, [pc, #164]	@ (8003998 <TIM_Base_SetConfig+0x154>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d108      	bne.n	8003908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a10      	ldr	r2, [pc, #64]	@ (8003970 <TIM_Base_SetConfig+0x12c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0xf8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a12      	ldr	r2, [pc, #72]	@ (8003980 <TIM_Base_SetConfig+0x13c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d103      	bne.n	8003944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f023 0201 	bic.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	611a      	str	r2, [r3, #16]
  }
}
 8003962:	bf00      	nop
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40010000 	.word	0x40010000
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800
 800397c:	40000c00 	.word	0x40000c00
 8003980:	40010400 	.word	0x40010400
 8003984:	40014000 	.word	0x40014000
 8003988:	40014400 	.word	0x40014400
 800398c:	40014800 	.word	0x40014800
 8003990:	40001800 	.word	0x40001800
 8003994:	40001c00 	.word	0x40001c00
 8003998:	40002000 	.word	0x40002000

0800399c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0201 	bic.w	r2, r3, #1
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f023 030a 	bic.w	r3, r3, #10
 80039d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	621a      	str	r2, [r3, #32]
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b087      	sub	sp, #28
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	60b9      	str	r1, [r7, #8]
 8003a04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	f023 0210 	bic.w	r2, r3, #16
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	031b      	lsls	r3, r3, #12
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b085      	sub	sp, #20
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f043 0307 	orr.w	r3, r3, #7
 8003a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e05a      	b.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a21      	ldr	r2, [pc, #132]	@ (8003bac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d022      	beq.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b34:	d01d      	beq.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d018      	beq.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a17      	ldr	r2, [pc, #92]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a15      	ldr	r2, [pc, #84]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d10c      	bne.n	8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	40000400 	.word	0x40000400
 8003bb4:	40000800 	.word	0x40000800
 8003bb8:	40000c00 	.word	0x40000c00
 8003bbc:	40010400 	.word	0x40010400
 8003bc0:	40014000 	.word	0x40014000
 8003bc4:	40001800 	.word	0x40001800

08003bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e042      	b.n	8003c88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd fd2e 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	@ 0x24
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 f973 	bl	8003f20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695a      	ldr	r2, [r3, #20]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	@ 0x28
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d175      	bne.n	8003d9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_UART_Transmit+0x2c>
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e06e      	b.n	8003d9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2221      	movs	r2, #33	@ 0x21
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cce:	f7fd ff1f 	bl	8001b10 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	88fa      	ldrh	r2, [r7, #6]
 8003cde:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ce8:	d108      	bne.n	8003cfc <HAL_UART_Transmit+0x6c>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e003      	b.n	8003d04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d04:	e02e      	b.n	8003d64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	@ 0x80
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 f848 	bl	8003da6 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e03a      	b.n	8003d9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10b      	bne.n	8003d46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	3302      	adds	r3, #2
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	e007      	b.n	8003d56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	3301      	adds	r3, #1
 8003d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1cb      	bne.n	8003d06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	2140      	movs	r1, #64	@ 0x40
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f814 	bl	8003da6 <UART_WaitOnFlagUntilTimeout>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d005      	beq.n	8003d90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e006      	b.n	8003d9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e000      	b.n	8003d9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d9c:	2302      	movs	r3, #2
  }
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db6:	e03b      	b.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d037      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dc0:	f7fd fea6 	bl	8001b10 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d302      	bcc.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e03a      	b.n	8003e50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d023      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b80      	cmp	r3, #128	@ 0x80
 8003dec:	d020      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b40      	cmp	r3, #64	@ 0x40
 8003df2:	d01d      	beq.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0308 	and.w	r3, r3, #8
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d116      	bne.n	8003e30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f81d 	bl	8003e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2208      	movs	r2, #8
 8003e22:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e00f      	b.n	8003e50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d0b4      	beq.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b095      	sub	sp, #84	@ 0x54
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	330c      	adds	r3, #12
 8003e66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e6a:	e853 3f00 	ldrex	r3, [r3]
 8003e6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e80:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e88:	e841 2300 	strex	r3, r2, [r1]
 8003e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	e853 3f00 	ldrex	r3, [r3]
 8003ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e5      	bne.n	8003e94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d119      	bne.n	8003f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	f023 0310 	bic.w	r3, r3, #16
 8003ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ef0:	61ba      	str	r2, [r7, #24]
 8003ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6979      	ldr	r1, [r7, #20]
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	613b      	str	r3, [r7, #16]
   return(result);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f12:	bf00      	nop
 8003f14:	3754      	adds	r7, #84	@ 0x54
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f24:	b0c0      	sub	sp, #256	@ 0x100
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3c:	68d9      	ldr	r1, [r3, #12]
 8003f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	ea40 0301 	orr.w	r3, r0, r1
 8003f48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f78:	f021 010c 	bic.w	r1, r1, #12
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f86:	430b      	orrs	r3, r1
 8003f88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9a:	6999      	ldr	r1, [r3, #24]
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	ea40 0301 	orr.w	r3, r0, r1
 8003fa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4b8f      	ldr	r3, [pc, #572]	@ (80041ec <UART_SetConfig+0x2cc>)
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d005      	beq.n	8003fc0 <UART_SetConfig+0xa0>
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b8d      	ldr	r3, [pc, #564]	@ (80041f0 <UART_SetConfig+0x2d0>)
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d104      	bne.n	8003fca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fc0:	f7ff f98c 	bl	80032dc <HAL_RCC_GetPCLK2Freq>
 8003fc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fc8:	e003      	b.n	8003fd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fca:	f7ff f973 	bl	80032b4 <HAL_RCC_GetPCLK1Freq>
 8003fce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fdc:	f040 810c 	bne.w	80041f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	1891      	adds	r1, r2, r2
 8003ff8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ffa:	415b      	adcs	r3, r3
 8003ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ffe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004002:	4621      	mov	r1, r4
 8004004:	eb12 0801 	adds.w	r8, r2, r1
 8004008:	4629      	mov	r1, r5
 800400a:	eb43 0901 	adc.w	r9, r3, r1
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800401a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800401e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004022:	4690      	mov	r8, r2
 8004024:	4699      	mov	r9, r3
 8004026:	4623      	mov	r3, r4
 8004028:	eb18 0303 	adds.w	r3, r8, r3
 800402c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004030:	462b      	mov	r3, r5
 8004032:	eb49 0303 	adc.w	r3, r9, r3
 8004036:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004046:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800404a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800404e:	460b      	mov	r3, r1
 8004050:	18db      	adds	r3, r3, r3
 8004052:	653b      	str	r3, [r7, #80]	@ 0x50
 8004054:	4613      	mov	r3, r2
 8004056:	eb42 0303 	adc.w	r3, r2, r3
 800405a:	657b      	str	r3, [r7, #84]	@ 0x54
 800405c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004060:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004064:	f7fc fdb0 	bl	8000bc8 <__aeabi_uldivmod>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4b61      	ldr	r3, [pc, #388]	@ (80041f4 <UART_SetConfig+0x2d4>)
 800406e:	fba3 2302 	umull	r2, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	011c      	lsls	r4, r3, #4
 8004076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004080:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004084:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	1891      	adds	r1, r2, r2
 800408e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004090:	415b      	adcs	r3, r3
 8004092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004094:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004098:	4641      	mov	r1, r8
 800409a:	eb12 0a01 	adds.w	sl, r2, r1
 800409e:	4649      	mov	r1, r9
 80040a0:	eb43 0b01 	adc.w	fp, r3, r1
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040b8:	4692      	mov	sl, r2
 80040ba:	469b      	mov	fp, r3
 80040bc:	4643      	mov	r3, r8
 80040be:	eb1a 0303 	adds.w	r3, sl, r3
 80040c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040c6:	464b      	mov	r3, r9
 80040c8:	eb4b 0303 	adc.w	r3, fp, r3
 80040cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040e4:	460b      	mov	r3, r1
 80040e6:	18db      	adds	r3, r3, r3
 80040e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80040ea:	4613      	mov	r3, r2
 80040ec:	eb42 0303 	adc.w	r3, r2, r3
 80040f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040fa:	f7fc fd65 	bl	8000bc8 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4611      	mov	r1, r2
 8004104:	4b3b      	ldr	r3, [pc, #236]	@ (80041f4 <UART_SetConfig+0x2d4>)
 8004106:	fba3 2301 	umull	r2, r3, r3, r1
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	2264      	movs	r2, #100	@ 0x64
 800410e:	fb02 f303 	mul.w	r3, r2, r3
 8004112:	1acb      	subs	r3, r1, r3
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800411a:	4b36      	ldr	r3, [pc, #216]	@ (80041f4 <UART_SetConfig+0x2d4>)
 800411c:	fba3 2302 	umull	r2, r3, r3, r2
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004128:	441c      	add	r4, r3
 800412a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800412e:	2200      	movs	r2, #0
 8004130:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004134:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004138:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800413c:	4642      	mov	r2, r8
 800413e:	464b      	mov	r3, r9
 8004140:	1891      	adds	r1, r2, r2
 8004142:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004144:	415b      	adcs	r3, r3
 8004146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004148:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800414c:	4641      	mov	r1, r8
 800414e:	1851      	adds	r1, r2, r1
 8004150:	6339      	str	r1, [r7, #48]	@ 0x30
 8004152:	4649      	mov	r1, r9
 8004154:	414b      	adcs	r3, r1
 8004156:	637b      	str	r3, [r7, #52]	@ 0x34
 8004158:	f04f 0200 	mov.w	r2, #0
 800415c:	f04f 0300 	mov.w	r3, #0
 8004160:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004164:	4659      	mov	r1, fp
 8004166:	00cb      	lsls	r3, r1, #3
 8004168:	4651      	mov	r1, sl
 800416a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800416e:	4651      	mov	r1, sl
 8004170:	00ca      	lsls	r2, r1, #3
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	4603      	mov	r3, r0
 8004178:	4642      	mov	r2, r8
 800417a:	189b      	adds	r3, r3, r2
 800417c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004180:	464b      	mov	r3, r9
 8004182:	460a      	mov	r2, r1
 8004184:	eb42 0303 	adc.w	r3, r2, r3
 8004188:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004198:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800419c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041a0:	460b      	mov	r3, r1
 80041a2:	18db      	adds	r3, r3, r3
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a6:	4613      	mov	r3, r2
 80041a8:	eb42 0303 	adc.w	r3, r2, r3
 80041ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041b6:	f7fc fd07 	bl	8000bc8 <__aeabi_uldivmod>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <UART_SetConfig+0x2d4>)
 80041c0:	fba3 1302 	umull	r1, r3, r3, r2
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	2164      	movs	r1, #100	@ 0x64
 80041c8:	fb01 f303 	mul.w	r3, r1, r3
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	3332      	adds	r3, #50	@ 0x32
 80041d2:	4a08      	ldr	r2, [pc, #32]	@ (80041f4 <UART_SetConfig+0x2d4>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	f003 0207 	and.w	r2, r3, #7
 80041de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4422      	add	r2, r4
 80041e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041e8:	e106      	b.n	80043f8 <UART_SetConfig+0x4d8>
 80041ea:	bf00      	nop
 80041ec:	40011000 	.word	0x40011000
 80041f0:	40011400 	.word	0x40011400
 80041f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004202:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004206:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800420a:	4642      	mov	r2, r8
 800420c:	464b      	mov	r3, r9
 800420e:	1891      	adds	r1, r2, r2
 8004210:	6239      	str	r1, [r7, #32]
 8004212:	415b      	adcs	r3, r3
 8004214:	627b      	str	r3, [r7, #36]	@ 0x24
 8004216:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800421a:	4641      	mov	r1, r8
 800421c:	1854      	adds	r4, r2, r1
 800421e:	4649      	mov	r1, r9
 8004220:	eb43 0501 	adc.w	r5, r3, r1
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	00eb      	lsls	r3, r5, #3
 800422e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004232:	00e2      	lsls	r2, r4, #3
 8004234:	4614      	mov	r4, r2
 8004236:	461d      	mov	r5, r3
 8004238:	4643      	mov	r3, r8
 800423a:	18e3      	adds	r3, r4, r3
 800423c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004240:	464b      	mov	r3, r9
 8004242:	eb45 0303 	adc.w	r3, r5, r3
 8004246:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004256:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004266:	4629      	mov	r1, r5
 8004268:	008b      	lsls	r3, r1, #2
 800426a:	4621      	mov	r1, r4
 800426c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004270:	4621      	mov	r1, r4
 8004272:	008a      	lsls	r2, r1, #2
 8004274:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004278:	f7fc fca6 	bl	8000bc8 <__aeabi_uldivmod>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4b60      	ldr	r3, [pc, #384]	@ (8004404 <UART_SetConfig+0x4e4>)
 8004282:	fba3 2302 	umull	r2, r3, r3, r2
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	011c      	lsls	r4, r3, #4
 800428a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004294:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004298:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	61b9      	str	r1, [r7, #24]
 80042a4:	415b      	adcs	r3, r3
 80042a6:	61fb      	str	r3, [r7, #28]
 80042a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042ac:	4641      	mov	r1, r8
 80042ae:	1851      	adds	r1, r2, r1
 80042b0:	6139      	str	r1, [r7, #16]
 80042b2:	4649      	mov	r1, r9
 80042b4:	414b      	adcs	r3, r1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042c4:	4659      	mov	r1, fp
 80042c6:	00cb      	lsls	r3, r1, #3
 80042c8:	4651      	mov	r1, sl
 80042ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ce:	4651      	mov	r1, sl
 80042d0:	00ca      	lsls	r2, r1, #3
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	4642      	mov	r2, r8
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042e0:	464b      	mov	r3, r9
 80042e2:	460a      	mov	r2, r1
 80042e4:	eb42 0303 	adc.w	r3, r2, r3
 80042e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004304:	4649      	mov	r1, r9
 8004306:	008b      	lsls	r3, r1, #2
 8004308:	4641      	mov	r1, r8
 800430a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800430e:	4641      	mov	r1, r8
 8004310:	008a      	lsls	r2, r1, #2
 8004312:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004316:	f7fc fc57 	bl	8000bc8 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4611      	mov	r1, r2
 8004320:	4b38      	ldr	r3, [pc, #224]	@ (8004404 <UART_SetConfig+0x4e4>)
 8004322:	fba3 2301 	umull	r2, r3, r3, r1
 8004326:	095b      	lsrs	r3, r3, #5
 8004328:	2264      	movs	r2, #100	@ 0x64
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	1acb      	subs	r3, r1, r3
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	3332      	adds	r3, #50	@ 0x32
 8004334:	4a33      	ldr	r2, [pc, #204]	@ (8004404 <UART_SetConfig+0x4e4>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004340:	441c      	add	r4, r3
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	673b      	str	r3, [r7, #112]	@ 0x70
 800434a:	677a      	str	r2, [r7, #116]	@ 0x74
 800434c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004350:	4642      	mov	r2, r8
 8004352:	464b      	mov	r3, r9
 8004354:	1891      	adds	r1, r2, r2
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	415b      	adcs	r3, r3
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004360:	4641      	mov	r1, r8
 8004362:	1851      	adds	r1, r2, r1
 8004364:	6039      	str	r1, [r7, #0]
 8004366:	4649      	mov	r1, r9
 8004368:	414b      	adcs	r3, r1
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004378:	4659      	mov	r1, fp
 800437a:	00cb      	lsls	r3, r1, #3
 800437c:	4651      	mov	r1, sl
 800437e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004382:	4651      	mov	r1, sl
 8004384:	00ca      	lsls	r2, r1, #3
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	4603      	mov	r3, r0
 800438c:	4642      	mov	r2, r8
 800438e:	189b      	adds	r3, r3, r2
 8004390:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004392:	464b      	mov	r3, r9
 8004394:	460a      	mov	r2, r1
 8004396:	eb42 0303 	adc.w	r3, r2, r3
 800439a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80043a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043b4:	4649      	mov	r1, r9
 80043b6:	008b      	lsls	r3, r1, #2
 80043b8:	4641      	mov	r1, r8
 80043ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043be:	4641      	mov	r1, r8
 80043c0:	008a      	lsls	r2, r1, #2
 80043c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043c6:	f7fc fbff 	bl	8000bc8 <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <UART_SetConfig+0x4e4>)
 80043d0:	fba3 1302 	umull	r1, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	2164      	movs	r1, #100	@ 0x64
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	3332      	adds	r3, #50	@ 0x32
 80043e2:	4a08      	ldr	r2, [pc, #32]	@ (8004404 <UART_SetConfig+0x4e4>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 020f 	and.w	r2, r3, #15
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4422      	add	r2, r4
 80043f6:	609a      	str	r2, [r3, #8]
}
 80043f8:	bf00      	nop
 80043fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043fe:	46bd      	mov	sp, r7
 8004400:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004404:	51eb851f 	.word	0x51eb851f

08004408 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004408:	b084      	sub	sp, #16
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	f107 001c 	add.w	r0, r7, #28
 8004416:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800441a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800441e:	2b01      	cmp	r3, #1
 8004420:	d123      	bne.n	800446a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004426:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800444a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800444e:	2b01      	cmp	r3, #1
 8004450:	d105      	bne.n	800445e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 faa0 	bl	80049a4 <USB_CoreReset>
 8004464:	4603      	mov	r3, r0
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	e01b      	b.n	80044a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa94 	bl	80049a4 <USB_CoreReset>
 800447c:	4603      	mov	r3, r0
 800447e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004480:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004484:	2b00      	cmp	r3, #0
 8004486:	d106      	bne.n	8004496 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800448c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	639a      	str	r2, [r3, #56]	@ 0x38
 8004494:	e005      	b.n	80044a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044a2:	7fbb      	ldrb	r3, [r7, #30]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d10b      	bne.n	80044c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f043 0206 	orr.w	r2, r3, #6
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044cc:	b004      	add	sp, #16
 80044ce:	4770      	bx	lr

080044d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 0201 	bic.w	r2, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	460b      	mov	r3, r1
 80044fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	2b01      	cmp	r3, #1
 8004512:	d115      	bne.n	8004540 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004520:	200a      	movs	r0, #10
 8004522:	f7fd fb01 	bl	8001b28 <HAL_Delay>
      ms += 10U;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	330a      	adds	r3, #10
 800452a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fa2b 	bl	8004988 <USB_GetMode>
 8004532:	4603      	mov	r3, r0
 8004534:	2b01      	cmp	r3, #1
 8004536:	d01e      	beq.n	8004576 <USB_SetCurrentMode+0x84>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2bc7      	cmp	r3, #199	@ 0xc7
 800453c:	d9f0      	bls.n	8004520 <USB_SetCurrentMode+0x2e>
 800453e:	e01a      	b.n	8004576 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d115      	bne.n	8004572 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004552:	200a      	movs	r0, #10
 8004554:	f7fd fae8 	bl	8001b28 <HAL_Delay>
      ms += 10U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	330a      	adds	r3, #10
 800455c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 fa12 	bl	8004988 <USB_GetMode>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <USB_SetCurrentMode+0x84>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2bc7      	cmp	r3, #199	@ 0xc7
 800456e:	d9f0      	bls.n	8004552 <USB_SetCurrentMode+0x60>
 8004570:	e001      	b.n	8004576 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e005      	b.n	8004582 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2bc8      	cmp	r3, #200	@ 0xc8
 800457a:	d101      	bne.n	8004580 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800458c:	b084      	sub	sp, #16
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800459a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e009      	b.n	80045c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	3340      	adds	r3, #64	@ 0x40
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	2200      	movs	r2, #0
 80045b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	3301      	adds	r3, #1
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b0e      	cmp	r3, #14
 80045c4:	d9f2      	bls.n	80045ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11c      	bne.n	8004608 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	639a      	str	r2, [r3, #56]	@ 0x38
 8004606:	e00b      	b.n	8004620 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004626:	461a      	mov	r2, r3
 8004628:	2300      	movs	r3, #0
 800462a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800462c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004630:	2b01      	cmp	r3, #1
 8004632:	d10d      	bne.n	8004650 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004638:	2b00      	cmp	r3, #0
 800463a:	d104      	bne.n	8004646 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800463c:	2100      	movs	r1, #0
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f968 	bl	8004914 <USB_SetDevSpeed>
 8004644:	e008      	b.n	8004658 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004646:	2101      	movs	r1, #1
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f963 	bl	8004914 <USB_SetDevSpeed>
 800464e:	e003      	b.n	8004658 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004650:	2103      	movs	r1, #3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f95e 	bl	8004914 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004658:	2110      	movs	r1, #16
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f8fa 	bl	8004854 <USB_FlushTxFifo>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f924 	bl	80048b8 <USB_FlushRxFifo>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004680:	461a      	mov	r2, r3
 8004682:	2300      	movs	r3, #0
 8004684:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468c:	461a      	mov	r2, r3
 800468e:	2300      	movs	r3, #0
 8004690:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004698:	461a      	mov	r2, r3
 800469a:	2300      	movs	r3, #0
 800469c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	e043      	b.n	800472c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	015a      	lsls	r2, r3, #5
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4413      	add	r3, r2
 80046ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046ba:	d118      	bne.n	80046ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ce:	461a      	mov	r2, r3
 80046d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e013      	b.n	8004700 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e4:	461a      	mov	r2, r3
 80046e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	e008      	b.n	8004700 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	015a      	lsls	r2, r3, #5
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fa:	461a      	mov	r2, r3
 80046fc:	2300      	movs	r3, #0
 80046fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470c:	461a      	mov	r2, r3
 800470e:	2300      	movs	r3, #0
 8004710:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800471e:	461a      	mov	r2, r3
 8004720:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004724:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3301      	adds	r3, #1
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004730:	461a      	mov	r2, r3
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4293      	cmp	r3, r2
 8004736:	d3b5      	bcc.n	80046a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004738:	2300      	movs	r3, #0
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	e043      	b.n	80047c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004750:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004754:	d118      	bne.n	8004788 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004768:	461a      	mov	r2, r3
 800476a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	e013      	b.n	800479a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800477e:	461a      	mov	r2, r3
 8004780:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e008      	b.n	800479a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004794:	461a      	mov	r2, r3
 8004796:	2300      	movs	r3, #0
 8004798:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047a6:	461a      	mov	r2, r3
 80047a8:	2300      	movs	r3, #0
 80047aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	3301      	adds	r3, #1
 80047c4:	613b      	str	r3, [r7, #16]
 80047c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ca:	461a      	mov	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d3b5      	bcc.n	800473e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f043 0210 	orr.w	r2, r3, #16
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <USB_DevInit+0x2c4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004814:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f043 0208 	orr.w	r2, r3, #8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004828:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800482c:	2b01      	cmp	r3, #1
 800482e:	d107      	bne.n	8004840 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004840:	7dfb      	ldrb	r3, [r7, #23]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800484c:	b004      	add	sp, #16
 800484e:	4770      	bx	lr
 8004850:	803c3800 	.word	0x803c3800

08004854 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800486e:	d901      	bls.n	8004874 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e01b      	b.n	80048ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	daf2      	bge.n	8004862 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	019b      	lsls	r3, r3, #6
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3301      	adds	r3, #1
 8004890:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004898:	d901      	bls.n	800489e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e006      	b.n	80048ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b20      	cmp	r3, #32
 80048a8:	d0f0      	beq.n	800488c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3301      	adds	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048d0:	d901      	bls.n	80048d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e018      	b.n	8004908 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	daf2      	bge.n	80048c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2210      	movs	r2, #16
 80048e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048f4:	d901      	bls.n	80048fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e006      	b.n	8004908 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0310 	and.w	r3, r3, #16
 8004902:	2b10      	cmp	r3, #16
 8004904:	d0f0      	beq.n	80048e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3714      	adds	r7, #20
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004946:	b480      	push	{r7}
 8004948:	b085      	sub	sp, #20
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004960:	f023 0303 	bic.w	r3, r3, #3
 8004964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	695b      	ldr	r3, [r3, #20]
 8004994:	f003 0301 	and.w	r3, r3, #1
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049bc:	d901      	bls.n	80049c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e01b      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	daf2      	bge.n	80049b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049e6:	d901      	bls.n	80049ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e006      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d0f0      	beq.n	80049da <USB_CoreReset+0x36>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <__cvt>:
 8004a06:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a0a:	ec57 6b10 	vmov	r6, r7, d0
 8004a0e:	2f00      	cmp	r7, #0
 8004a10:	460c      	mov	r4, r1
 8004a12:	4619      	mov	r1, r3
 8004a14:	463b      	mov	r3, r7
 8004a16:	bfbb      	ittet	lt
 8004a18:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004a1c:	461f      	movlt	r7, r3
 8004a1e:	2300      	movge	r3, #0
 8004a20:	232d      	movlt	r3, #45	@ 0x2d
 8004a22:	700b      	strb	r3, [r1, #0]
 8004a24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a26:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004a2a:	4691      	mov	r9, r2
 8004a2c:	f023 0820 	bic.w	r8, r3, #32
 8004a30:	bfbc      	itt	lt
 8004a32:	4632      	movlt	r2, r6
 8004a34:	4616      	movlt	r6, r2
 8004a36:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a3a:	d005      	beq.n	8004a48 <__cvt+0x42>
 8004a3c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a40:	d100      	bne.n	8004a44 <__cvt+0x3e>
 8004a42:	3401      	adds	r4, #1
 8004a44:	2102      	movs	r1, #2
 8004a46:	e000      	b.n	8004a4a <__cvt+0x44>
 8004a48:	2103      	movs	r1, #3
 8004a4a:	ab03      	add	r3, sp, #12
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	ab02      	add	r3, sp, #8
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	ec47 6b10 	vmov	d0, r6, r7
 8004a56:	4653      	mov	r3, sl
 8004a58:	4622      	mov	r2, r4
 8004a5a:	f000 fe39 	bl	80056d0 <_dtoa_r>
 8004a5e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a62:	4605      	mov	r5, r0
 8004a64:	d119      	bne.n	8004a9a <__cvt+0x94>
 8004a66:	f019 0f01 	tst.w	r9, #1
 8004a6a:	d00e      	beq.n	8004a8a <__cvt+0x84>
 8004a6c:	eb00 0904 	add.w	r9, r0, r4
 8004a70:	2200      	movs	r2, #0
 8004a72:	2300      	movs	r3, #0
 8004a74:	4630      	mov	r0, r6
 8004a76:	4639      	mov	r1, r7
 8004a78:	f7fc f836 	bl	8000ae8 <__aeabi_dcmpeq>
 8004a7c:	b108      	cbz	r0, 8004a82 <__cvt+0x7c>
 8004a7e:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a82:	2230      	movs	r2, #48	@ 0x30
 8004a84:	9b03      	ldr	r3, [sp, #12]
 8004a86:	454b      	cmp	r3, r9
 8004a88:	d31e      	bcc.n	8004ac8 <__cvt+0xc2>
 8004a8a:	9b03      	ldr	r3, [sp, #12]
 8004a8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a8e:	1b5b      	subs	r3, r3, r5
 8004a90:	4628      	mov	r0, r5
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	b004      	add	sp, #16
 8004a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a9a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a9e:	eb00 0904 	add.w	r9, r0, r4
 8004aa2:	d1e5      	bne.n	8004a70 <__cvt+0x6a>
 8004aa4:	7803      	ldrb	r3, [r0, #0]
 8004aa6:	2b30      	cmp	r3, #48	@ 0x30
 8004aa8:	d10a      	bne.n	8004ac0 <__cvt+0xba>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2300      	movs	r3, #0
 8004aae:	4630      	mov	r0, r6
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	f7fc f819 	bl	8000ae8 <__aeabi_dcmpeq>
 8004ab6:	b918      	cbnz	r0, 8004ac0 <__cvt+0xba>
 8004ab8:	f1c4 0401 	rsb	r4, r4, #1
 8004abc:	f8ca 4000 	str.w	r4, [sl]
 8004ac0:	f8da 3000 	ldr.w	r3, [sl]
 8004ac4:	4499      	add	r9, r3
 8004ac6:	e7d3      	b.n	8004a70 <__cvt+0x6a>
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	9103      	str	r1, [sp, #12]
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e7d9      	b.n	8004a84 <__cvt+0x7e>

08004ad0 <__exponent>:
 8004ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ad2:	2900      	cmp	r1, #0
 8004ad4:	bfba      	itte	lt
 8004ad6:	4249      	neglt	r1, r1
 8004ad8:	232d      	movlt	r3, #45	@ 0x2d
 8004ada:	232b      	movge	r3, #43	@ 0x2b
 8004adc:	2909      	cmp	r1, #9
 8004ade:	7002      	strb	r2, [r0, #0]
 8004ae0:	7043      	strb	r3, [r0, #1]
 8004ae2:	dd29      	ble.n	8004b38 <__exponent+0x68>
 8004ae4:	f10d 0307 	add.w	r3, sp, #7
 8004ae8:	461d      	mov	r5, r3
 8004aea:	270a      	movs	r7, #10
 8004aec:	461a      	mov	r2, r3
 8004aee:	fbb1 f6f7 	udiv	r6, r1, r7
 8004af2:	fb07 1416 	mls	r4, r7, r6, r1
 8004af6:	3430      	adds	r4, #48	@ 0x30
 8004af8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004afc:	460c      	mov	r4, r1
 8004afe:	2c63      	cmp	r4, #99	@ 0x63
 8004b00:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b04:	4631      	mov	r1, r6
 8004b06:	dcf1      	bgt.n	8004aec <__exponent+0x1c>
 8004b08:	3130      	adds	r1, #48	@ 0x30
 8004b0a:	1e94      	subs	r4, r2, #2
 8004b0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b10:	1c41      	adds	r1, r0, #1
 8004b12:	4623      	mov	r3, r4
 8004b14:	42ab      	cmp	r3, r5
 8004b16:	d30a      	bcc.n	8004b2e <__exponent+0x5e>
 8004b18:	f10d 0309 	add.w	r3, sp, #9
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	42ac      	cmp	r4, r5
 8004b20:	bf88      	it	hi
 8004b22:	2300      	movhi	r3, #0
 8004b24:	3302      	adds	r3, #2
 8004b26:	4403      	add	r3, r0
 8004b28:	1a18      	subs	r0, r3, r0
 8004b2a:	b003      	add	sp, #12
 8004b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b2e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b32:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b36:	e7ed      	b.n	8004b14 <__exponent+0x44>
 8004b38:	2330      	movs	r3, #48	@ 0x30
 8004b3a:	3130      	adds	r1, #48	@ 0x30
 8004b3c:	7083      	strb	r3, [r0, #2]
 8004b3e:	70c1      	strb	r1, [r0, #3]
 8004b40:	1d03      	adds	r3, r0, #4
 8004b42:	e7f1      	b.n	8004b28 <__exponent+0x58>

08004b44 <_printf_float>:
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	b08d      	sub	sp, #52	@ 0x34
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004b50:	4616      	mov	r6, r2
 8004b52:	461f      	mov	r7, r3
 8004b54:	4605      	mov	r5, r0
 8004b56:	f000 fcbb 	bl	80054d0 <_localeconv_r>
 8004b5a:	6803      	ldr	r3, [r0, #0]
 8004b5c:	9304      	str	r3, [sp, #16]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fb fb96 	bl	8000290 <strlen>
 8004b64:	2300      	movs	r3, #0
 8004b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b68:	f8d8 3000 	ldr.w	r3, [r8]
 8004b6c:	9005      	str	r0, [sp, #20]
 8004b6e:	3307      	adds	r3, #7
 8004b70:	f023 0307 	bic.w	r3, r3, #7
 8004b74:	f103 0208 	add.w	r2, r3, #8
 8004b78:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b7c:	f8d4 b000 	ldr.w	fp, [r4]
 8004b80:	f8c8 2000 	str.w	r2, [r8]
 8004b84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b88:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b8c:	9307      	str	r3, [sp, #28]
 8004b8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b92:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b9a:	4b9c      	ldr	r3, [pc, #624]	@ (8004e0c <_printf_float+0x2c8>)
 8004b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba0:	f7fb ffd4 	bl	8000b4c <__aeabi_dcmpun>
 8004ba4:	bb70      	cbnz	r0, 8004c04 <_printf_float+0xc0>
 8004ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004baa:	4b98      	ldr	r3, [pc, #608]	@ (8004e0c <_printf_float+0x2c8>)
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb0:	f7fb ffae 	bl	8000b10 <__aeabi_dcmple>
 8004bb4:	bb30      	cbnz	r0, 8004c04 <_printf_float+0xc0>
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4640      	mov	r0, r8
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	f7fb ff9d 	bl	8000afc <__aeabi_dcmplt>
 8004bc2:	b110      	cbz	r0, 8004bca <_printf_float+0x86>
 8004bc4:	232d      	movs	r3, #45	@ 0x2d
 8004bc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bca:	4a91      	ldr	r2, [pc, #580]	@ (8004e10 <_printf_float+0x2cc>)
 8004bcc:	4b91      	ldr	r3, [pc, #580]	@ (8004e14 <_printf_float+0x2d0>)
 8004bce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004bd2:	bf94      	ite	ls
 8004bd4:	4690      	movls	r8, r2
 8004bd6:	4698      	movhi	r8, r3
 8004bd8:	2303      	movs	r3, #3
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	f02b 0304 	bic.w	r3, fp, #4
 8004be0:	6023      	str	r3, [r4, #0]
 8004be2:	f04f 0900 	mov.w	r9, #0
 8004be6:	9700      	str	r7, [sp, #0]
 8004be8:	4633      	mov	r3, r6
 8004bea:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004bec:	4621      	mov	r1, r4
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f000 f9d2 	bl	8004f98 <_printf_common>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f040 808d 	bne.w	8004d14 <_printf_float+0x1d0>
 8004bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8004bfe:	b00d      	add	sp, #52	@ 0x34
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	4640      	mov	r0, r8
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	f7fb ff9e 	bl	8000b4c <__aeabi_dcmpun>
 8004c10:	b140      	cbz	r0, 8004c24 <_printf_float+0xe0>
 8004c12:	464b      	mov	r3, r9
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bfbc      	itt	lt
 8004c18:	232d      	movlt	r3, #45	@ 0x2d
 8004c1a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c1e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e18 <_printf_float+0x2d4>)
 8004c20:	4b7e      	ldr	r3, [pc, #504]	@ (8004e1c <_printf_float+0x2d8>)
 8004c22:	e7d4      	b.n	8004bce <_printf_float+0x8a>
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004c2a:	9206      	str	r2, [sp, #24]
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	d13b      	bne.n	8004ca8 <_printf_float+0x164>
 8004c30:	2306      	movs	r3, #6
 8004c32:	6063      	str	r3, [r4, #4]
 8004c34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6022      	str	r2, [r4, #0]
 8004c3c:	9303      	str	r3, [sp, #12]
 8004c3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004c40:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004c44:	ab09      	add	r3, sp, #36	@ 0x24
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	6861      	ldr	r1, [r4, #4]
 8004c4a:	ec49 8b10 	vmov	d0, r8, r9
 8004c4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004c52:	4628      	mov	r0, r5
 8004c54:	f7ff fed7 	bl	8004a06 <__cvt>
 8004c58:	9b06      	ldr	r3, [sp, #24]
 8004c5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c5c:	2b47      	cmp	r3, #71	@ 0x47
 8004c5e:	4680      	mov	r8, r0
 8004c60:	d129      	bne.n	8004cb6 <_printf_float+0x172>
 8004c62:	1cc8      	adds	r0, r1, #3
 8004c64:	db02      	blt.n	8004c6c <_printf_float+0x128>
 8004c66:	6863      	ldr	r3, [r4, #4]
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	dd41      	ble.n	8004cf0 <_printf_float+0x1ac>
 8004c6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c70:	fa5f fa8a 	uxtb.w	sl, sl
 8004c74:	3901      	subs	r1, #1
 8004c76:	4652      	mov	r2, sl
 8004c78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c7e:	f7ff ff27 	bl	8004ad0 <__exponent>
 8004c82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c84:	1813      	adds	r3, r2, r0
 8004c86:	2a01      	cmp	r2, #1
 8004c88:	4681      	mov	r9, r0
 8004c8a:	6123      	str	r3, [r4, #16]
 8004c8c:	dc02      	bgt.n	8004c94 <_printf_float+0x150>
 8004c8e:	6822      	ldr	r2, [r4, #0]
 8004c90:	07d2      	lsls	r2, r2, #31
 8004c92:	d501      	bpl.n	8004c98 <_printf_float+0x154>
 8004c94:	3301      	adds	r3, #1
 8004c96:	6123      	str	r3, [r4, #16]
 8004c98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0a2      	beq.n	8004be6 <_printf_float+0xa2>
 8004ca0:	232d      	movs	r3, #45	@ 0x2d
 8004ca2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ca6:	e79e      	b.n	8004be6 <_printf_float+0xa2>
 8004ca8:	9a06      	ldr	r2, [sp, #24]
 8004caa:	2a47      	cmp	r2, #71	@ 0x47
 8004cac:	d1c2      	bne.n	8004c34 <_printf_float+0xf0>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1c0      	bne.n	8004c34 <_printf_float+0xf0>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e7bd      	b.n	8004c32 <_printf_float+0xee>
 8004cb6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cba:	d9db      	bls.n	8004c74 <_printf_float+0x130>
 8004cbc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004cc0:	d118      	bne.n	8004cf4 <_printf_float+0x1b0>
 8004cc2:	2900      	cmp	r1, #0
 8004cc4:	6863      	ldr	r3, [r4, #4]
 8004cc6:	dd0b      	ble.n	8004ce0 <_printf_float+0x19c>
 8004cc8:	6121      	str	r1, [r4, #16]
 8004cca:	b913      	cbnz	r3, 8004cd2 <_printf_float+0x18e>
 8004ccc:	6822      	ldr	r2, [r4, #0]
 8004cce:	07d0      	lsls	r0, r2, #31
 8004cd0:	d502      	bpl.n	8004cd8 <_printf_float+0x194>
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	440b      	add	r3, r1
 8004cd6:	6123      	str	r3, [r4, #16]
 8004cd8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004cda:	f04f 0900 	mov.w	r9, #0
 8004cde:	e7db      	b.n	8004c98 <_printf_float+0x154>
 8004ce0:	b913      	cbnz	r3, 8004ce8 <_printf_float+0x1a4>
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	07d2      	lsls	r2, r2, #31
 8004ce6:	d501      	bpl.n	8004cec <_printf_float+0x1a8>
 8004ce8:	3302      	adds	r3, #2
 8004cea:	e7f4      	b.n	8004cd6 <_printf_float+0x192>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e7f2      	b.n	8004cd6 <_printf_float+0x192>
 8004cf0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004cf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	db05      	blt.n	8004d06 <_printf_float+0x1c2>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	6121      	str	r1, [r4, #16]
 8004cfe:	07d8      	lsls	r0, r3, #31
 8004d00:	d5ea      	bpl.n	8004cd8 <_printf_float+0x194>
 8004d02:	1c4b      	adds	r3, r1, #1
 8004d04:	e7e7      	b.n	8004cd6 <_printf_float+0x192>
 8004d06:	2900      	cmp	r1, #0
 8004d08:	bfd4      	ite	le
 8004d0a:	f1c1 0202 	rsble	r2, r1, #2
 8004d0e:	2201      	movgt	r2, #1
 8004d10:	4413      	add	r3, r2
 8004d12:	e7e0      	b.n	8004cd6 <_printf_float+0x192>
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	055a      	lsls	r2, r3, #21
 8004d18:	d407      	bmi.n	8004d2a <_printf_float+0x1e6>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	4631      	mov	r1, r6
 8004d20:	4628      	mov	r0, r5
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	d12b      	bne.n	8004d80 <_printf_float+0x23c>
 8004d28:	e767      	b.n	8004bfa <_printf_float+0xb6>
 8004d2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d2e:	f240 80dd 	bls.w	8004eec <_printf_float+0x3a8>
 8004d32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d36:	2200      	movs	r2, #0
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f7fb fed5 	bl	8000ae8 <__aeabi_dcmpeq>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d033      	beq.n	8004daa <_printf_float+0x266>
 8004d42:	4a37      	ldr	r2, [pc, #220]	@ (8004e20 <_printf_float+0x2dc>)
 8004d44:	2301      	movs	r3, #1
 8004d46:	4631      	mov	r1, r6
 8004d48:	4628      	mov	r0, r5
 8004d4a:	47b8      	blx	r7
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	f43f af54 	beq.w	8004bfa <_printf_float+0xb6>
 8004d52:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004d56:	4543      	cmp	r3, r8
 8004d58:	db02      	blt.n	8004d60 <_printf_float+0x21c>
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	07d8      	lsls	r0, r3, #31
 8004d5e:	d50f      	bpl.n	8004d80 <_printf_float+0x23c>
 8004d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f af45 	beq.w	8004bfa <_printf_float+0xb6>
 8004d70:	f04f 0900 	mov.w	r9, #0
 8004d74:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d78:	f104 0a1a 	add.w	sl, r4, #26
 8004d7c:	45c8      	cmp	r8, r9
 8004d7e:	dc09      	bgt.n	8004d94 <_printf_float+0x250>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	079b      	lsls	r3, r3, #30
 8004d84:	f100 8103 	bmi.w	8004f8e <_printf_float+0x44a>
 8004d88:	68e0      	ldr	r0, [r4, #12]
 8004d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d8c:	4298      	cmp	r0, r3
 8004d8e:	bfb8      	it	lt
 8004d90:	4618      	movlt	r0, r3
 8004d92:	e734      	b.n	8004bfe <_printf_float+0xba>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4652      	mov	r2, sl
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f af2b 	beq.w	8004bfa <_printf_float+0xb6>
 8004da4:	f109 0901 	add.w	r9, r9, #1
 8004da8:	e7e8      	b.n	8004d7c <_printf_float+0x238>
 8004daa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	dc39      	bgt.n	8004e24 <_printf_float+0x2e0>
 8004db0:	4a1b      	ldr	r2, [pc, #108]	@ (8004e20 <_printf_float+0x2dc>)
 8004db2:	2301      	movs	r3, #1
 8004db4:	4631      	mov	r1, r6
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	3001      	adds	r0, #1
 8004dbc:	f43f af1d 	beq.w	8004bfa <_printf_float+0xb6>
 8004dc0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004dc4:	ea59 0303 	orrs.w	r3, r9, r3
 8004dc8:	d102      	bne.n	8004dd0 <_printf_float+0x28c>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	07d9      	lsls	r1, r3, #31
 8004dce:	d5d7      	bpl.n	8004d80 <_printf_float+0x23c>
 8004dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f af0d 	beq.w	8004bfa <_printf_float+0xb6>
 8004de0:	f04f 0a00 	mov.w	sl, #0
 8004de4:	f104 0b1a 	add.w	fp, r4, #26
 8004de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dea:	425b      	negs	r3, r3
 8004dec:	4553      	cmp	r3, sl
 8004dee:	dc01      	bgt.n	8004df4 <_printf_float+0x2b0>
 8004df0:	464b      	mov	r3, r9
 8004df2:	e793      	b.n	8004d1c <_printf_float+0x1d8>
 8004df4:	2301      	movs	r3, #1
 8004df6:	465a      	mov	r2, fp
 8004df8:	4631      	mov	r1, r6
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	47b8      	blx	r7
 8004dfe:	3001      	adds	r0, #1
 8004e00:	f43f aefb 	beq.w	8004bfa <_printf_float+0xb6>
 8004e04:	f10a 0a01 	add.w	sl, sl, #1
 8004e08:	e7ee      	b.n	8004de8 <_printf_float+0x2a4>
 8004e0a:	bf00      	nop
 8004e0c:	7fefffff 	.word	0x7fefffff
 8004e10:	08007330 	.word	0x08007330
 8004e14:	08007334 	.word	0x08007334
 8004e18:	08007338 	.word	0x08007338
 8004e1c:	0800733c 	.word	0x0800733c
 8004e20:	08007340 	.word	0x08007340
 8004e24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e2a:	4553      	cmp	r3, sl
 8004e2c:	bfa8      	it	ge
 8004e2e:	4653      	movge	r3, sl
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	4699      	mov	r9, r3
 8004e34:	dc36      	bgt.n	8004ea4 <_printf_float+0x360>
 8004e36:	f04f 0b00 	mov.w	fp, #0
 8004e3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e3e:	f104 021a 	add.w	r2, r4, #26
 8004e42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e44:	9306      	str	r3, [sp, #24]
 8004e46:	eba3 0309 	sub.w	r3, r3, r9
 8004e4a:	455b      	cmp	r3, fp
 8004e4c:	dc31      	bgt.n	8004eb2 <_printf_float+0x36e>
 8004e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e50:	459a      	cmp	sl, r3
 8004e52:	dc3a      	bgt.n	8004eca <_printf_float+0x386>
 8004e54:	6823      	ldr	r3, [r4, #0]
 8004e56:	07da      	lsls	r2, r3, #31
 8004e58:	d437      	bmi.n	8004eca <_printf_float+0x386>
 8004e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e5c:	ebaa 0903 	sub.w	r9, sl, r3
 8004e60:	9b06      	ldr	r3, [sp, #24]
 8004e62:	ebaa 0303 	sub.w	r3, sl, r3
 8004e66:	4599      	cmp	r9, r3
 8004e68:	bfa8      	it	ge
 8004e6a:	4699      	movge	r9, r3
 8004e6c:	f1b9 0f00 	cmp.w	r9, #0
 8004e70:	dc33      	bgt.n	8004eda <_printf_float+0x396>
 8004e72:	f04f 0800 	mov.w	r8, #0
 8004e76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e7a:	f104 0b1a 	add.w	fp, r4, #26
 8004e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e80:	ebaa 0303 	sub.w	r3, sl, r3
 8004e84:	eba3 0309 	sub.w	r3, r3, r9
 8004e88:	4543      	cmp	r3, r8
 8004e8a:	f77f af79 	ble.w	8004d80 <_printf_float+0x23c>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	465a      	mov	r2, fp
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	f43f aeae 	beq.w	8004bfa <_printf_float+0xb6>
 8004e9e:	f108 0801 	add.w	r8, r8, #1
 8004ea2:	e7ec      	b.n	8004e7e <_printf_float+0x33a>
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	d1c2      	bne.n	8004e36 <_printf_float+0x2f2>
 8004eb0:	e6a3      	b.n	8004bfa <_printf_float+0xb6>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	4631      	mov	r1, r6
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	9206      	str	r2, [sp, #24]
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f43f ae9c 	beq.w	8004bfa <_printf_float+0xb6>
 8004ec2:	9a06      	ldr	r2, [sp, #24]
 8004ec4:	f10b 0b01 	add.w	fp, fp, #1
 8004ec8:	e7bb      	b.n	8004e42 <_printf_float+0x2fe>
 8004eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ece:	4631      	mov	r1, r6
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	47b8      	blx	r7
 8004ed4:	3001      	adds	r0, #1
 8004ed6:	d1c0      	bne.n	8004e5a <_printf_float+0x316>
 8004ed8:	e68f      	b.n	8004bfa <_printf_float+0xb6>
 8004eda:	9a06      	ldr	r2, [sp, #24]
 8004edc:	464b      	mov	r3, r9
 8004ede:	4442      	add	r2, r8
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	47b8      	blx	r7
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d1c3      	bne.n	8004e72 <_printf_float+0x32e>
 8004eea:	e686      	b.n	8004bfa <_printf_float+0xb6>
 8004eec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ef0:	f1ba 0f01 	cmp.w	sl, #1
 8004ef4:	dc01      	bgt.n	8004efa <_printf_float+0x3b6>
 8004ef6:	07db      	lsls	r3, r3, #31
 8004ef8:	d536      	bpl.n	8004f68 <_printf_float+0x424>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4642      	mov	r2, r8
 8004efe:	4631      	mov	r1, r6
 8004f00:	4628      	mov	r0, r5
 8004f02:	47b8      	blx	r7
 8004f04:	3001      	adds	r0, #1
 8004f06:	f43f ae78 	beq.w	8004bfa <_printf_float+0xb6>
 8004f0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	47b8      	blx	r7
 8004f14:	3001      	adds	r0, #1
 8004f16:	f43f ae70 	beq.w	8004bfa <_printf_float+0xb6>
 8004f1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2300      	movs	r3, #0
 8004f22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f26:	f7fb fddf 	bl	8000ae8 <__aeabi_dcmpeq>
 8004f2a:	b9c0      	cbnz	r0, 8004f5e <_printf_float+0x41a>
 8004f2c:	4653      	mov	r3, sl
 8004f2e:	f108 0201 	add.w	r2, r8, #1
 8004f32:	4631      	mov	r1, r6
 8004f34:	4628      	mov	r0, r5
 8004f36:	47b8      	blx	r7
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d10c      	bne.n	8004f56 <_printf_float+0x412>
 8004f3c:	e65d      	b.n	8004bfa <_printf_float+0xb6>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	465a      	mov	r2, fp
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b8      	blx	r7
 8004f48:	3001      	adds	r0, #1
 8004f4a:	f43f ae56 	beq.w	8004bfa <_printf_float+0xb6>
 8004f4e:	f108 0801 	add.w	r8, r8, #1
 8004f52:	45d0      	cmp	r8, sl
 8004f54:	dbf3      	blt.n	8004f3e <_printf_float+0x3fa>
 8004f56:	464b      	mov	r3, r9
 8004f58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f5c:	e6df      	b.n	8004d1e <_printf_float+0x1da>
 8004f5e:	f04f 0800 	mov.w	r8, #0
 8004f62:	f104 0b1a 	add.w	fp, r4, #26
 8004f66:	e7f4      	b.n	8004f52 <_printf_float+0x40e>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4642      	mov	r2, r8
 8004f6c:	e7e1      	b.n	8004f32 <_printf_float+0x3ee>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	464a      	mov	r2, r9
 8004f72:	4631      	mov	r1, r6
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b8      	blx	r7
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f ae3e 	beq.w	8004bfa <_printf_float+0xb6>
 8004f7e:	f108 0801 	add.w	r8, r8, #1
 8004f82:	68e3      	ldr	r3, [r4, #12]
 8004f84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f86:	1a5b      	subs	r3, r3, r1
 8004f88:	4543      	cmp	r3, r8
 8004f8a:	dcf0      	bgt.n	8004f6e <_printf_float+0x42a>
 8004f8c:	e6fc      	b.n	8004d88 <_printf_float+0x244>
 8004f8e:	f04f 0800 	mov.w	r8, #0
 8004f92:	f104 0919 	add.w	r9, r4, #25
 8004f96:	e7f4      	b.n	8004f82 <_printf_float+0x43e>

08004f98 <_printf_common>:
 8004f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9c:	4616      	mov	r6, r2
 8004f9e:	4698      	mov	r8, r3
 8004fa0:	688a      	ldr	r2, [r1, #8]
 8004fa2:	690b      	ldr	r3, [r1, #16]
 8004fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	bfb8      	it	lt
 8004fac:	4613      	movlt	r3, r2
 8004fae:	6033      	str	r3, [r6, #0]
 8004fb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	b10a      	cbz	r2, 8004fbe <_printf_common+0x26>
 8004fba:	3301      	adds	r3, #1
 8004fbc:	6033      	str	r3, [r6, #0]
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	0699      	lsls	r1, r3, #26
 8004fc2:	bf42      	ittt	mi
 8004fc4:	6833      	ldrmi	r3, [r6, #0]
 8004fc6:	3302      	addmi	r3, #2
 8004fc8:	6033      	strmi	r3, [r6, #0]
 8004fca:	6825      	ldr	r5, [r4, #0]
 8004fcc:	f015 0506 	ands.w	r5, r5, #6
 8004fd0:	d106      	bne.n	8004fe0 <_printf_common+0x48>
 8004fd2:	f104 0a19 	add.w	sl, r4, #25
 8004fd6:	68e3      	ldr	r3, [r4, #12]
 8004fd8:	6832      	ldr	r2, [r6, #0]
 8004fda:	1a9b      	subs	r3, r3, r2
 8004fdc:	42ab      	cmp	r3, r5
 8004fde:	dc26      	bgt.n	800502e <_printf_common+0x96>
 8004fe0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fe4:	6822      	ldr	r2, [r4, #0]
 8004fe6:	3b00      	subs	r3, #0
 8004fe8:	bf18      	it	ne
 8004fea:	2301      	movne	r3, #1
 8004fec:	0692      	lsls	r2, r2, #26
 8004fee:	d42b      	bmi.n	8005048 <_printf_common+0xb0>
 8004ff0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	47c8      	blx	r9
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	d01e      	beq.n	800503c <_printf_common+0xa4>
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	6922      	ldr	r2, [r4, #16]
 8005002:	f003 0306 	and.w	r3, r3, #6
 8005006:	2b04      	cmp	r3, #4
 8005008:	bf02      	ittt	eq
 800500a:	68e5      	ldreq	r5, [r4, #12]
 800500c:	6833      	ldreq	r3, [r6, #0]
 800500e:	1aed      	subeq	r5, r5, r3
 8005010:	68a3      	ldr	r3, [r4, #8]
 8005012:	bf0c      	ite	eq
 8005014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005018:	2500      	movne	r5, #0
 800501a:	4293      	cmp	r3, r2
 800501c:	bfc4      	itt	gt
 800501e:	1a9b      	subgt	r3, r3, r2
 8005020:	18ed      	addgt	r5, r5, r3
 8005022:	2600      	movs	r6, #0
 8005024:	341a      	adds	r4, #26
 8005026:	42b5      	cmp	r5, r6
 8005028:	d11a      	bne.n	8005060 <_printf_common+0xc8>
 800502a:	2000      	movs	r0, #0
 800502c:	e008      	b.n	8005040 <_printf_common+0xa8>
 800502e:	2301      	movs	r3, #1
 8005030:	4652      	mov	r2, sl
 8005032:	4641      	mov	r1, r8
 8005034:	4638      	mov	r0, r7
 8005036:	47c8      	blx	r9
 8005038:	3001      	adds	r0, #1
 800503a:	d103      	bne.n	8005044 <_printf_common+0xac>
 800503c:	f04f 30ff 	mov.w	r0, #4294967295
 8005040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005044:	3501      	adds	r5, #1
 8005046:	e7c6      	b.n	8004fd6 <_printf_common+0x3e>
 8005048:	18e1      	adds	r1, r4, r3
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	2030      	movs	r0, #48	@ 0x30
 800504e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005052:	4422      	add	r2, r4
 8005054:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005058:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800505c:	3302      	adds	r3, #2
 800505e:	e7c7      	b.n	8004ff0 <_printf_common+0x58>
 8005060:	2301      	movs	r3, #1
 8005062:	4622      	mov	r2, r4
 8005064:	4641      	mov	r1, r8
 8005066:	4638      	mov	r0, r7
 8005068:	47c8      	blx	r9
 800506a:	3001      	adds	r0, #1
 800506c:	d0e6      	beq.n	800503c <_printf_common+0xa4>
 800506e:	3601      	adds	r6, #1
 8005070:	e7d9      	b.n	8005026 <_printf_common+0x8e>
	...

08005074 <_printf_i>:
 8005074:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005078:	7e0f      	ldrb	r7, [r1, #24]
 800507a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800507c:	2f78      	cmp	r7, #120	@ 0x78
 800507e:	4691      	mov	r9, r2
 8005080:	4680      	mov	r8, r0
 8005082:	460c      	mov	r4, r1
 8005084:	469a      	mov	sl, r3
 8005086:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800508a:	d807      	bhi.n	800509c <_printf_i+0x28>
 800508c:	2f62      	cmp	r7, #98	@ 0x62
 800508e:	d80a      	bhi.n	80050a6 <_printf_i+0x32>
 8005090:	2f00      	cmp	r7, #0
 8005092:	f000 80d2 	beq.w	800523a <_printf_i+0x1c6>
 8005096:	2f58      	cmp	r7, #88	@ 0x58
 8005098:	f000 80b9 	beq.w	800520e <_printf_i+0x19a>
 800509c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050a4:	e03a      	b.n	800511c <_printf_i+0xa8>
 80050a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050aa:	2b15      	cmp	r3, #21
 80050ac:	d8f6      	bhi.n	800509c <_printf_i+0x28>
 80050ae:	a101      	add	r1, pc, #4	@ (adr r1, 80050b4 <_printf_i+0x40>)
 80050b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050b4:	0800510d 	.word	0x0800510d
 80050b8:	08005121 	.word	0x08005121
 80050bc:	0800509d 	.word	0x0800509d
 80050c0:	0800509d 	.word	0x0800509d
 80050c4:	0800509d 	.word	0x0800509d
 80050c8:	0800509d 	.word	0x0800509d
 80050cc:	08005121 	.word	0x08005121
 80050d0:	0800509d 	.word	0x0800509d
 80050d4:	0800509d 	.word	0x0800509d
 80050d8:	0800509d 	.word	0x0800509d
 80050dc:	0800509d 	.word	0x0800509d
 80050e0:	08005221 	.word	0x08005221
 80050e4:	0800514b 	.word	0x0800514b
 80050e8:	080051db 	.word	0x080051db
 80050ec:	0800509d 	.word	0x0800509d
 80050f0:	0800509d 	.word	0x0800509d
 80050f4:	08005243 	.word	0x08005243
 80050f8:	0800509d 	.word	0x0800509d
 80050fc:	0800514b 	.word	0x0800514b
 8005100:	0800509d 	.word	0x0800509d
 8005104:	0800509d 	.word	0x0800509d
 8005108:	080051e3 	.word	0x080051e3
 800510c:	6833      	ldr	r3, [r6, #0]
 800510e:	1d1a      	adds	r2, r3, #4
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6032      	str	r2, [r6, #0]
 8005114:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005118:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800511c:	2301      	movs	r3, #1
 800511e:	e09d      	b.n	800525c <_printf_i+0x1e8>
 8005120:	6833      	ldr	r3, [r6, #0]
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	1d19      	adds	r1, r3, #4
 8005126:	6031      	str	r1, [r6, #0]
 8005128:	0606      	lsls	r6, r0, #24
 800512a:	d501      	bpl.n	8005130 <_printf_i+0xbc>
 800512c:	681d      	ldr	r5, [r3, #0]
 800512e:	e003      	b.n	8005138 <_printf_i+0xc4>
 8005130:	0645      	lsls	r5, r0, #25
 8005132:	d5fb      	bpl.n	800512c <_printf_i+0xb8>
 8005134:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005138:	2d00      	cmp	r5, #0
 800513a:	da03      	bge.n	8005144 <_printf_i+0xd0>
 800513c:	232d      	movs	r3, #45	@ 0x2d
 800513e:	426d      	negs	r5, r5
 8005140:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005144:	4859      	ldr	r0, [pc, #356]	@ (80052ac <_printf_i+0x238>)
 8005146:	230a      	movs	r3, #10
 8005148:	e011      	b.n	800516e <_printf_i+0xfa>
 800514a:	6821      	ldr	r1, [r4, #0]
 800514c:	6833      	ldr	r3, [r6, #0]
 800514e:	0608      	lsls	r0, r1, #24
 8005150:	f853 5b04 	ldr.w	r5, [r3], #4
 8005154:	d402      	bmi.n	800515c <_printf_i+0xe8>
 8005156:	0649      	lsls	r1, r1, #25
 8005158:	bf48      	it	mi
 800515a:	b2ad      	uxthmi	r5, r5
 800515c:	2f6f      	cmp	r7, #111	@ 0x6f
 800515e:	4853      	ldr	r0, [pc, #332]	@ (80052ac <_printf_i+0x238>)
 8005160:	6033      	str	r3, [r6, #0]
 8005162:	bf14      	ite	ne
 8005164:	230a      	movne	r3, #10
 8005166:	2308      	moveq	r3, #8
 8005168:	2100      	movs	r1, #0
 800516a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800516e:	6866      	ldr	r6, [r4, #4]
 8005170:	60a6      	str	r6, [r4, #8]
 8005172:	2e00      	cmp	r6, #0
 8005174:	bfa2      	ittt	ge
 8005176:	6821      	ldrge	r1, [r4, #0]
 8005178:	f021 0104 	bicge.w	r1, r1, #4
 800517c:	6021      	strge	r1, [r4, #0]
 800517e:	b90d      	cbnz	r5, 8005184 <_printf_i+0x110>
 8005180:	2e00      	cmp	r6, #0
 8005182:	d04b      	beq.n	800521c <_printf_i+0x1a8>
 8005184:	4616      	mov	r6, r2
 8005186:	fbb5 f1f3 	udiv	r1, r5, r3
 800518a:	fb03 5711 	mls	r7, r3, r1, r5
 800518e:	5dc7      	ldrb	r7, [r0, r7]
 8005190:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005194:	462f      	mov	r7, r5
 8005196:	42bb      	cmp	r3, r7
 8005198:	460d      	mov	r5, r1
 800519a:	d9f4      	bls.n	8005186 <_printf_i+0x112>
 800519c:	2b08      	cmp	r3, #8
 800519e:	d10b      	bne.n	80051b8 <_printf_i+0x144>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	07df      	lsls	r7, r3, #31
 80051a4:	d508      	bpl.n	80051b8 <_printf_i+0x144>
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	6861      	ldr	r1, [r4, #4]
 80051aa:	4299      	cmp	r1, r3
 80051ac:	bfde      	ittt	le
 80051ae:	2330      	movle	r3, #48	@ 0x30
 80051b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051b8:	1b92      	subs	r2, r2, r6
 80051ba:	6122      	str	r2, [r4, #16]
 80051bc:	f8cd a000 	str.w	sl, [sp]
 80051c0:	464b      	mov	r3, r9
 80051c2:	aa03      	add	r2, sp, #12
 80051c4:	4621      	mov	r1, r4
 80051c6:	4640      	mov	r0, r8
 80051c8:	f7ff fee6 	bl	8004f98 <_printf_common>
 80051cc:	3001      	adds	r0, #1
 80051ce:	d14a      	bne.n	8005266 <_printf_i+0x1f2>
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	b004      	add	sp, #16
 80051d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	f043 0320 	orr.w	r3, r3, #32
 80051e0:	6023      	str	r3, [r4, #0]
 80051e2:	4833      	ldr	r0, [pc, #204]	@ (80052b0 <_printf_i+0x23c>)
 80051e4:	2778      	movs	r7, #120	@ 0x78
 80051e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	6831      	ldr	r1, [r6, #0]
 80051ee:	061f      	lsls	r7, r3, #24
 80051f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80051f4:	d402      	bmi.n	80051fc <_printf_i+0x188>
 80051f6:	065f      	lsls	r7, r3, #25
 80051f8:	bf48      	it	mi
 80051fa:	b2ad      	uxthmi	r5, r5
 80051fc:	6031      	str	r1, [r6, #0]
 80051fe:	07d9      	lsls	r1, r3, #31
 8005200:	bf44      	itt	mi
 8005202:	f043 0320 	orrmi.w	r3, r3, #32
 8005206:	6023      	strmi	r3, [r4, #0]
 8005208:	b11d      	cbz	r5, 8005212 <_printf_i+0x19e>
 800520a:	2310      	movs	r3, #16
 800520c:	e7ac      	b.n	8005168 <_printf_i+0xf4>
 800520e:	4827      	ldr	r0, [pc, #156]	@ (80052ac <_printf_i+0x238>)
 8005210:	e7e9      	b.n	80051e6 <_printf_i+0x172>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	f023 0320 	bic.w	r3, r3, #32
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	e7f6      	b.n	800520a <_printf_i+0x196>
 800521c:	4616      	mov	r6, r2
 800521e:	e7bd      	b.n	800519c <_printf_i+0x128>
 8005220:	6833      	ldr	r3, [r6, #0]
 8005222:	6825      	ldr	r5, [r4, #0]
 8005224:	6961      	ldr	r1, [r4, #20]
 8005226:	1d18      	adds	r0, r3, #4
 8005228:	6030      	str	r0, [r6, #0]
 800522a:	062e      	lsls	r6, r5, #24
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	d501      	bpl.n	8005234 <_printf_i+0x1c0>
 8005230:	6019      	str	r1, [r3, #0]
 8005232:	e002      	b.n	800523a <_printf_i+0x1c6>
 8005234:	0668      	lsls	r0, r5, #25
 8005236:	d5fb      	bpl.n	8005230 <_printf_i+0x1bc>
 8005238:	8019      	strh	r1, [r3, #0]
 800523a:	2300      	movs	r3, #0
 800523c:	6123      	str	r3, [r4, #16]
 800523e:	4616      	mov	r6, r2
 8005240:	e7bc      	b.n	80051bc <_printf_i+0x148>
 8005242:	6833      	ldr	r3, [r6, #0]
 8005244:	1d1a      	adds	r2, r3, #4
 8005246:	6032      	str	r2, [r6, #0]
 8005248:	681e      	ldr	r6, [r3, #0]
 800524a:	6862      	ldr	r2, [r4, #4]
 800524c:	2100      	movs	r1, #0
 800524e:	4630      	mov	r0, r6
 8005250:	f7fa ffce 	bl	80001f0 <memchr>
 8005254:	b108      	cbz	r0, 800525a <_printf_i+0x1e6>
 8005256:	1b80      	subs	r0, r0, r6
 8005258:	6060      	str	r0, [r4, #4]
 800525a:	6863      	ldr	r3, [r4, #4]
 800525c:	6123      	str	r3, [r4, #16]
 800525e:	2300      	movs	r3, #0
 8005260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005264:	e7aa      	b.n	80051bc <_printf_i+0x148>
 8005266:	6923      	ldr	r3, [r4, #16]
 8005268:	4632      	mov	r2, r6
 800526a:	4649      	mov	r1, r9
 800526c:	4640      	mov	r0, r8
 800526e:	47d0      	blx	sl
 8005270:	3001      	adds	r0, #1
 8005272:	d0ad      	beq.n	80051d0 <_printf_i+0x15c>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	079b      	lsls	r3, r3, #30
 8005278:	d413      	bmi.n	80052a2 <_printf_i+0x22e>
 800527a:	68e0      	ldr	r0, [r4, #12]
 800527c:	9b03      	ldr	r3, [sp, #12]
 800527e:	4298      	cmp	r0, r3
 8005280:	bfb8      	it	lt
 8005282:	4618      	movlt	r0, r3
 8005284:	e7a6      	b.n	80051d4 <_printf_i+0x160>
 8005286:	2301      	movs	r3, #1
 8005288:	4632      	mov	r2, r6
 800528a:	4649      	mov	r1, r9
 800528c:	4640      	mov	r0, r8
 800528e:	47d0      	blx	sl
 8005290:	3001      	adds	r0, #1
 8005292:	d09d      	beq.n	80051d0 <_printf_i+0x15c>
 8005294:	3501      	adds	r5, #1
 8005296:	68e3      	ldr	r3, [r4, #12]
 8005298:	9903      	ldr	r1, [sp, #12]
 800529a:	1a5b      	subs	r3, r3, r1
 800529c:	42ab      	cmp	r3, r5
 800529e:	dcf2      	bgt.n	8005286 <_printf_i+0x212>
 80052a0:	e7eb      	b.n	800527a <_printf_i+0x206>
 80052a2:	2500      	movs	r5, #0
 80052a4:	f104 0619 	add.w	r6, r4, #25
 80052a8:	e7f5      	b.n	8005296 <_printf_i+0x222>
 80052aa:	bf00      	nop
 80052ac:	08007342 	.word	0x08007342
 80052b0:	08007353 	.word	0x08007353

080052b4 <std>:
 80052b4:	2300      	movs	r3, #0
 80052b6:	b510      	push	{r4, lr}
 80052b8:	4604      	mov	r4, r0
 80052ba:	e9c0 3300 	strd	r3, r3, [r0]
 80052be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052c2:	6083      	str	r3, [r0, #8]
 80052c4:	8181      	strh	r1, [r0, #12]
 80052c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80052c8:	81c2      	strh	r2, [r0, #14]
 80052ca:	6183      	str	r3, [r0, #24]
 80052cc:	4619      	mov	r1, r3
 80052ce:	2208      	movs	r2, #8
 80052d0:	305c      	adds	r0, #92	@ 0x5c
 80052d2:	f000 f8f4 	bl	80054be <memset>
 80052d6:	4b0d      	ldr	r3, [pc, #52]	@ (800530c <std+0x58>)
 80052d8:	6263      	str	r3, [r4, #36]	@ 0x24
 80052da:	4b0d      	ldr	r3, [pc, #52]	@ (8005310 <std+0x5c>)
 80052dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052de:	4b0d      	ldr	r3, [pc, #52]	@ (8005314 <std+0x60>)
 80052e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005318 <std+0x64>)
 80052e4:	6323      	str	r3, [r4, #48]	@ 0x30
 80052e6:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <std+0x68>)
 80052e8:	6224      	str	r4, [r4, #32]
 80052ea:	429c      	cmp	r4, r3
 80052ec:	d006      	beq.n	80052fc <std+0x48>
 80052ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052f2:	4294      	cmp	r4, r2
 80052f4:	d002      	beq.n	80052fc <std+0x48>
 80052f6:	33d0      	adds	r3, #208	@ 0xd0
 80052f8:	429c      	cmp	r4, r3
 80052fa:	d105      	bne.n	8005308 <std+0x54>
 80052fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005304:	f000 b958 	b.w	80055b8 <__retarget_lock_init_recursive>
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop
 800530c:	08005439 	.word	0x08005439
 8005310:	0800545b 	.word	0x0800545b
 8005314:	08005493 	.word	0x08005493
 8005318:	080054b7 	.word	0x080054b7
 800531c:	200009a8 	.word	0x200009a8

08005320 <stdio_exit_handler>:
 8005320:	4a02      	ldr	r2, [pc, #8]	@ (800532c <stdio_exit_handler+0xc>)
 8005322:	4903      	ldr	r1, [pc, #12]	@ (8005330 <stdio_exit_handler+0x10>)
 8005324:	4803      	ldr	r0, [pc, #12]	@ (8005334 <stdio_exit_handler+0x14>)
 8005326:	f000 b869 	b.w	80053fc <_fwalk_sglue>
 800532a:	bf00      	nop
 800532c:	2000000c 	.word	0x2000000c
 8005330:	08006c65 	.word	0x08006c65
 8005334:	2000001c 	.word	0x2000001c

08005338 <cleanup_stdio>:
 8005338:	6841      	ldr	r1, [r0, #4]
 800533a:	4b0c      	ldr	r3, [pc, #48]	@ (800536c <cleanup_stdio+0x34>)
 800533c:	4299      	cmp	r1, r3
 800533e:	b510      	push	{r4, lr}
 8005340:	4604      	mov	r4, r0
 8005342:	d001      	beq.n	8005348 <cleanup_stdio+0x10>
 8005344:	f001 fc8e 	bl	8006c64 <_fflush_r>
 8005348:	68a1      	ldr	r1, [r4, #8]
 800534a:	4b09      	ldr	r3, [pc, #36]	@ (8005370 <cleanup_stdio+0x38>)
 800534c:	4299      	cmp	r1, r3
 800534e:	d002      	beq.n	8005356 <cleanup_stdio+0x1e>
 8005350:	4620      	mov	r0, r4
 8005352:	f001 fc87 	bl	8006c64 <_fflush_r>
 8005356:	68e1      	ldr	r1, [r4, #12]
 8005358:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <cleanup_stdio+0x3c>)
 800535a:	4299      	cmp	r1, r3
 800535c:	d004      	beq.n	8005368 <cleanup_stdio+0x30>
 800535e:	4620      	mov	r0, r4
 8005360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005364:	f001 bc7e 	b.w	8006c64 <_fflush_r>
 8005368:	bd10      	pop	{r4, pc}
 800536a:	bf00      	nop
 800536c:	200009a8 	.word	0x200009a8
 8005370:	20000a10 	.word	0x20000a10
 8005374:	20000a78 	.word	0x20000a78

08005378 <global_stdio_init.part.0>:
 8005378:	b510      	push	{r4, lr}
 800537a:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <global_stdio_init.part.0+0x30>)
 800537c:	4c0b      	ldr	r4, [pc, #44]	@ (80053ac <global_stdio_init.part.0+0x34>)
 800537e:	4a0c      	ldr	r2, [pc, #48]	@ (80053b0 <global_stdio_init.part.0+0x38>)
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	4620      	mov	r0, r4
 8005384:	2200      	movs	r2, #0
 8005386:	2104      	movs	r1, #4
 8005388:	f7ff ff94 	bl	80052b4 <std>
 800538c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005390:	2201      	movs	r2, #1
 8005392:	2109      	movs	r1, #9
 8005394:	f7ff ff8e 	bl	80052b4 <std>
 8005398:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800539c:	2202      	movs	r2, #2
 800539e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a2:	2112      	movs	r1, #18
 80053a4:	f7ff bf86 	b.w	80052b4 <std>
 80053a8:	20000ae0 	.word	0x20000ae0
 80053ac:	200009a8 	.word	0x200009a8
 80053b0:	08005321 	.word	0x08005321

080053b4 <__sfp_lock_acquire>:
 80053b4:	4801      	ldr	r0, [pc, #4]	@ (80053bc <__sfp_lock_acquire+0x8>)
 80053b6:	f000 b900 	b.w	80055ba <__retarget_lock_acquire_recursive>
 80053ba:	bf00      	nop
 80053bc:	20000ae9 	.word	0x20000ae9

080053c0 <__sfp_lock_release>:
 80053c0:	4801      	ldr	r0, [pc, #4]	@ (80053c8 <__sfp_lock_release+0x8>)
 80053c2:	f000 b8fb 	b.w	80055bc <__retarget_lock_release_recursive>
 80053c6:	bf00      	nop
 80053c8:	20000ae9 	.word	0x20000ae9

080053cc <__sinit>:
 80053cc:	b510      	push	{r4, lr}
 80053ce:	4604      	mov	r4, r0
 80053d0:	f7ff fff0 	bl	80053b4 <__sfp_lock_acquire>
 80053d4:	6a23      	ldr	r3, [r4, #32]
 80053d6:	b11b      	cbz	r3, 80053e0 <__sinit+0x14>
 80053d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053dc:	f7ff bff0 	b.w	80053c0 <__sfp_lock_release>
 80053e0:	4b04      	ldr	r3, [pc, #16]	@ (80053f4 <__sinit+0x28>)
 80053e2:	6223      	str	r3, [r4, #32]
 80053e4:	4b04      	ldr	r3, [pc, #16]	@ (80053f8 <__sinit+0x2c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f5      	bne.n	80053d8 <__sinit+0xc>
 80053ec:	f7ff ffc4 	bl	8005378 <global_stdio_init.part.0>
 80053f0:	e7f2      	b.n	80053d8 <__sinit+0xc>
 80053f2:	bf00      	nop
 80053f4:	08005339 	.word	0x08005339
 80053f8:	20000ae0 	.word	0x20000ae0

080053fc <_fwalk_sglue>:
 80053fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005400:	4607      	mov	r7, r0
 8005402:	4688      	mov	r8, r1
 8005404:	4614      	mov	r4, r2
 8005406:	2600      	movs	r6, #0
 8005408:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800540c:	f1b9 0901 	subs.w	r9, r9, #1
 8005410:	d505      	bpl.n	800541e <_fwalk_sglue+0x22>
 8005412:	6824      	ldr	r4, [r4, #0]
 8005414:	2c00      	cmp	r4, #0
 8005416:	d1f7      	bne.n	8005408 <_fwalk_sglue+0xc>
 8005418:	4630      	mov	r0, r6
 800541a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800541e:	89ab      	ldrh	r3, [r5, #12]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d907      	bls.n	8005434 <_fwalk_sglue+0x38>
 8005424:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005428:	3301      	adds	r3, #1
 800542a:	d003      	beq.n	8005434 <_fwalk_sglue+0x38>
 800542c:	4629      	mov	r1, r5
 800542e:	4638      	mov	r0, r7
 8005430:	47c0      	blx	r8
 8005432:	4306      	orrs	r6, r0
 8005434:	3568      	adds	r5, #104	@ 0x68
 8005436:	e7e9      	b.n	800540c <_fwalk_sglue+0x10>

08005438 <__sread>:
 8005438:	b510      	push	{r4, lr}
 800543a:	460c      	mov	r4, r1
 800543c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005440:	f000 f86c 	bl	800551c <_read_r>
 8005444:	2800      	cmp	r0, #0
 8005446:	bfab      	itete	ge
 8005448:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800544a:	89a3      	ldrhlt	r3, [r4, #12]
 800544c:	181b      	addge	r3, r3, r0
 800544e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005452:	bfac      	ite	ge
 8005454:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005456:	81a3      	strhlt	r3, [r4, #12]
 8005458:	bd10      	pop	{r4, pc}

0800545a <__swrite>:
 800545a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545e:	461f      	mov	r7, r3
 8005460:	898b      	ldrh	r3, [r1, #12]
 8005462:	05db      	lsls	r3, r3, #23
 8005464:	4605      	mov	r5, r0
 8005466:	460c      	mov	r4, r1
 8005468:	4616      	mov	r6, r2
 800546a:	d505      	bpl.n	8005478 <__swrite+0x1e>
 800546c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005470:	2302      	movs	r3, #2
 8005472:	2200      	movs	r2, #0
 8005474:	f000 f840 	bl	80054f8 <_lseek_r>
 8005478:	89a3      	ldrh	r3, [r4, #12]
 800547a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800547e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005482:	81a3      	strh	r3, [r4, #12]
 8005484:	4632      	mov	r2, r6
 8005486:	463b      	mov	r3, r7
 8005488:	4628      	mov	r0, r5
 800548a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800548e:	f000 b857 	b.w	8005540 <_write_r>

08005492 <__sseek>:
 8005492:	b510      	push	{r4, lr}
 8005494:	460c      	mov	r4, r1
 8005496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800549a:	f000 f82d 	bl	80054f8 <_lseek_r>
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	bf15      	itete	ne
 80054a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054ae:	81a3      	strheq	r3, [r4, #12]
 80054b0:	bf18      	it	ne
 80054b2:	81a3      	strhne	r3, [r4, #12]
 80054b4:	bd10      	pop	{r4, pc}

080054b6 <__sclose>:
 80054b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ba:	f000 b80d 	b.w	80054d8 <_close_r>

080054be <memset>:
 80054be:	4402      	add	r2, r0
 80054c0:	4603      	mov	r3, r0
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d100      	bne.n	80054c8 <memset+0xa>
 80054c6:	4770      	bx	lr
 80054c8:	f803 1b01 	strb.w	r1, [r3], #1
 80054cc:	e7f9      	b.n	80054c2 <memset+0x4>
	...

080054d0 <_localeconv_r>:
 80054d0:	4800      	ldr	r0, [pc, #0]	@ (80054d4 <_localeconv_r+0x4>)
 80054d2:	4770      	bx	lr
 80054d4:	20000158 	.word	0x20000158

080054d8 <_close_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d06      	ldr	r5, [pc, #24]	@ (80054f4 <_close_r+0x1c>)
 80054dc:	2300      	movs	r3, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	f7fc fa08 	bl	80018f8 <_close>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_close_r+0x1a>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_close_r+0x1a>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20000ae4 	.word	0x20000ae4

080054f8 <_lseek_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	@ (8005518 <_lseek_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fc fa1d 	bl	8001946 <_lseek>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_lseek_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_lseek_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000ae4 	.word	0x20000ae4

0800551c <_read_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4d07      	ldr	r5, [pc, #28]	@ (800553c <_read_r+0x20>)
 8005520:	4604      	mov	r4, r0
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	2200      	movs	r2, #0
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fc f9ab 	bl	8001886 <_read>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_read_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_read_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20000ae4 	.word	0x20000ae4

08005540 <_write_r>:
 8005540:	b538      	push	{r3, r4, r5, lr}
 8005542:	4d07      	ldr	r5, [pc, #28]	@ (8005560 <_write_r+0x20>)
 8005544:	4604      	mov	r4, r0
 8005546:	4608      	mov	r0, r1
 8005548:	4611      	mov	r1, r2
 800554a:	2200      	movs	r2, #0
 800554c:	602a      	str	r2, [r5, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	f7fc f9b6 	bl	80018c0 <_write>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d102      	bne.n	800555e <_write_r+0x1e>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b103      	cbz	r3, 800555e <_write_r+0x1e>
 800555c:	6023      	str	r3, [r4, #0]
 800555e:	bd38      	pop	{r3, r4, r5, pc}
 8005560:	20000ae4 	.word	0x20000ae4

08005564 <__errno>:
 8005564:	4b01      	ldr	r3, [pc, #4]	@ (800556c <__errno+0x8>)
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20000018 	.word	0x20000018

08005570 <__libc_init_array>:
 8005570:	b570      	push	{r4, r5, r6, lr}
 8005572:	4d0d      	ldr	r5, [pc, #52]	@ (80055a8 <__libc_init_array+0x38>)
 8005574:	4c0d      	ldr	r4, [pc, #52]	@ (80055ac <__libc_init_array+0x3c>)
 8005576:	1b64      	subs	r4, r4, r5
 8005578:	10a4      	asrs	r4, r4, #2
 800557a:	2600      	movs	r6, #0
 800557c:	42a6      	cmp	r6, r4
 800557e:	d109      	bne.n	8005594 <__libc_init_array+0x24>
 8005580:	4d0b      	ldr	r5, [pc, #44]	@ (80055b0 <__libc_init_array+0x40>)
 8005582:	4c0c      	ldr	r4, [pc, #48]	@ (80055b4 <__libc_init_array+0x44>)
 8005584:	f001 febc 	bl	8007300 <_init>
 8005588:	1b64      	subs	r4, r4, r5
 800558a:	10a4      	asrs	r4, r4, #2
 800558c:	2600      	movs	r6, #0
 800558e:	42a6      	cmp	r6, r4
 8005590:	d105      	bne.n	800559e <__libc_init_array+0x2e>
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	f855 3b04 	ldr.w	r3, [r5], #4
 8005598:	4798      	blx	r3
 800559a:	3601      	adds	r6, #1
 800559c:	e7ee      	b.n	800557c <__libc_init_array+0xc>
 800559e:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a2:	4798      	blx	r3
 80055a4:	3601      	adds	r6, #1
 80055a6:	e7f2      	b.n	800558e <__libc_init_array+0x1e>
 80055a8:	080076a8 	.word	0x080076a8
 80055ac:	080076a8 	.word	0x080076a8
 80055b0:	080076a8 	.word	0x080076a8
 80055b4:	080076ac 	.word	0x080076ac

080055b8 <__retarget_lock_init_recursive>:
 80055b8:	4770      	bx	lr

080055ba <__retarget_lock_acquire_recursive>:
 80055ba:	4770      	bx	lr

080055bc <__retarget_lock_release_recursive>:
 80055bc:	4770      	bx	lr

080055be <quorem>:
 80055be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c2:	6903      	ldr	r3, [r0, #16]
 80055c4:	690c      	ldr	r4, [r1, #16]
 80055c6:	42a3      	cmp	r3, r4
 80055c8:	4607      	mov	r7, r0
 80055ca:	db7e      	blt.n	80056ca <quorem+0x10c>
 80055cc:	3c01      	subs	r4, #1
 80055ce:	f101 0814 	add.w	r8, r1, #20
 80055d2:	00a3      	lsls	r3, r4, #2
 80055d4:	f100 0514 	add.w	r5, r0, #20
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055de:	9301      	str	r3, [sp, #4]
 80055e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055e8:	3301      	adds	r3, #1
 80055ea:	429a      	cmp	r2, r3
 80055ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80055f4:	d32e      	bcc.n	8005654 <quorem+0x96>
 80055f6:	f04f 0a00 	mov.w	sl, #0
 80055fa:	46c4      	mov	ip, r8
 80055fc:	46ae      	mov	lr, r5
 80055fe:	46d3      	mov	fp, sl
 8005600:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005604:	b298      	uxth	r0, r3
 8005606:	fb06 a000 	mla	r0, r6, r0, sl
 800560a:	0c02      	lsrs	r2, r0, #16
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	fb06 2303 	mla	r3, r6, r3, r2
 8005612:	f8de 2000 	ldr.w	r2, [lr]
 8005616:	b280      	uxth	r0, r0
 8005618:	b292      	uxth	r2, r2
 800561a:	1a12      	subs	r2, r2, r0
 800561c:	445a      	add	r2, fp
 800561e:	f8de 0000 	ldr.w	r0, [lr]
 8005622:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005626:	b29b      	uxth	r3, r3
 8005628:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800562c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005630:	b292      	uxth	r2, r2
 8005632:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005636:	45e1      	cmp	r9, ip
 8005638:	f84e 2b04 	str.w	r2, [lr], #4
 800563c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005640:	d2de      	bcs.n	8005600 <quorem+0x42>
 8005642:	9b00      	ldr	r3, [sp, #0]
 8005644:	58eb      	ldr	r3, [r5, r3]
 8005646:	b92b      	cbnz	r3, 8005654 <quorem+0x96>
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	3b04      	subs	r3, #4
 800564c:	429d      	cmp	r5, r3
 800564e:	461a      	mov	r2, r3
 8005650:	d32f      	bcc.n	80056b2 <quorem+0xf4>
 8005652:	613c      	str	r4, [r7, #16]
 8005654:	4638      	mov	r0, r7
 8005656:	f001 f979 	bl	800694c <__mcmp>
 800565a:	2800      	cmp	r0, #0
 800565c:	db25      	blt.n	80056aa <quorem+0xec>
 800565e:	4629      	mov	r1, r5
 8005660:	2000      	movs	r0, #0
 8005662:	f858 2b04 	ldr.w	r2, [r8], #4
 8005666:	f8d1 c000 	ldr.w	ip, [r1]
 800566a:	fa1f fe82 	uxth.w	lr, r2
 800566e:	fa1f f38c 	uxth.w	r3, ip
 8005672:	eba3 030e 	sub.w	r3, r3, lr
 8005676:	4403      	add	r3, r0
 8005678:	0c12      	lsrs	r2, r2, #16
 800567a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800567e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005682:	b29b      	uxth	r3, r3
 8005684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005688:	45c1      	cmp	r9, r8
 800568a:	f841 3b04 	str.w	r3, [r1], #4
 800568e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005692:	d2e6      	bcs.n	8005662 <quorem+0xa4>
 8005694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005698:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800569c:	b922      	cbnz	r2, 80056a8 <quorem+0xea>
 800569e:	3b04      	subs	r3, #4
 80056a0:	429d      	cmp	r5, r3
 80056a2:	461a      	mov	r2, r3
 80056a4:	d30b      	bcc.n	80056be <quorem+0x100>
 80056a6:	613c      	str	r4, [r7, #16]
 80056a8:	3601      	adds	r6, #1
 80056aa:	4630      	mov	r0, r6
 80056ac:	b003      	add	sp, #12
 80056ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b2:	6812      	ldr	r2, [r2, #0]
 80056b4:	3b04      	subs	r3, #4
 80056b6:	2a00      	cmp	r2, #0
 80056b8:	d1cb      	bne.n	8005652 <quorem+0x94>
 80056ba:	3c01      	subs	r4, #1
 80056bc:	e7c6      	b.n	800564c <quorem+0x8e>
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	3b04      	subs	r3, #4
 80056c2:	2a00      	cmp	r2, #0
 80056c4:	d1ef      	bne.n	80056a6 <quorem+0xe8>
 80056c6:	3c01      	subs	r4, #1
 80056c8:	e7ea      	b.n	80056a0 <quorem+0xe2>
 80056ca:	2000      	movs	r0, #0
 80056cc:	e7ee      	b.n	80056ac <quorem+0xee>
	...

080056d0 <_dtoa_r>:
 80056d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d4:	69c7      	ldr	r7, [r0, #28]
 80056d6:	b099      	sub	sp, #100	@ 0x64
 80056d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056dc:	ec55 4b10 	vmov	r4, r5, d0
 80056e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80056e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80056e4:	4683      	mov	fp, r0
 80056e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80056e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056ea:	b97f      	cbnz	r7, 800570c <_dtoa_r+0x3c>
 80056ec:	2010      	movs	r0, #16
 80056ee:	f000 fdfd 	bl	80062ec <malloc>
 80056f2:	4602      	mov	r2, r0
 80056f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80056f8:	b920      	cbnz	r0, 8005704 <_dtoa_r+0x34>
 80056fa:	4ba7      	ldr	r3, [pc, #668]	@ (8005998 <_dtoa_r+0x2c8>)
 80056fc:	21ef      	movs	r1, #239	@ 0xef
 80056fe:	48a7      	ldr	r0, [pc, #668]	@ (800599c <_dtoa_r+0x2cc>)
 8005700:	f001 faf6 	bl	8006cf0 <__assert_func>
 8005704:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005708:	6007      	str	r7, [r0, #0]
 800570a:	60c7      	str	r7, [r0, #12]
 800570c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005710:	6819      	ldr	r1, [r3, #0]
 8005712:	b159      	cbz	r1, 800572c <_dtoa_r+0x5c>
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	604a      	str	r2, [r1, #4]
 8005718:	2301      	movs	r3, #1
 800571a:	4093      	lsls	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
 800571e:	4658      	mov	r0, fp
 8005720:	f000 feda 	bl	80064d8 <_Bfree>
 8005724:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	1e2b      	subs	r3, r5, #0
 800572e:	bfb9      	ittee	lt
 8005730:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005734:	9303      	strlt	r3, [sp, #12]
 8005736:	2300      	movge	r3, #0
 8005738:	6033      	strge	r3, [r6, #0]
 800573a:	9f03      	ldr	r7, [sp, #12]
 800573c:	4b98      	ldr	r3, [pc, #608]	@ (80059a0 <_dtoa_r+0x2d0>)
 800573e:	bfbc      	itt	lt
 8005740:	2201      	movlt	r2, #1
 8005742:	6032      	strlt	r2, [r6, #0]
 8005744:	43bb      	bics	r3, r7
 8005746:	d112      	bne.n	800576e <_dtoa_r+0x9e>
 8005748:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800574a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800574e:	6013      	str	r3, [r2, #0]
 8005750:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005754:	4323      	orrs	r3, r4
 8005756:	f000 854d 	beq.w	80061f4 <_dtoa_r+0xb24>
 800575a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800575c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80059b4 <_dtoa_r+0x2e4>
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 854f 	beq.w	8006204 <_dtoa_r+0xb34>
 8005766:	f10a 0303 	add.w	r3, sl, #3
 800576a:	f000 bd49 	b.w	8006200 <_dtoa_r+0xb30>
 800576e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005772:	2200      	movs	r2, #0
 8005774:	ec51 0b17 	vmov	r0, r1, d7
 8005778:	2300      	movs	r3, #0
 800577a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800577e:	f7fb f9b3 	bl	8000ae8 <__aeabi_dcmpeq>
 8005782:	4680      	mov	r8, r0
 8005784:	b158      	cbz	r0, 800579e <_dtoa_r+0xce>
 8005786:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005788:	2301      	movs	r3, #1
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800578e:	b113      	cbz	r3, 8005796 <_dtoa_r+0xc6>
 8005790:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005792:	4b84      	ldr	r3, [pc, #528]	@ (80059a4 <_dtoa_r+0x2d4>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80059b8 <_dtoa_r+0x2e8>
 800579a:	f000 bd33 	b.w	8006204 <_dtoa_r+0xb34>
 800579e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80057a2:	aa16      	add	r2, sp, #88	@ 0x58
 80057a4:	a917      	add	r1, sp, #92	@ 0x5c
 80057a6:	4658      	mov	r0, fp
 80057a8:	f001 f980 	bl	8006aac <__d2b>
 80057ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80057b0:	4681      	mov	r9, r0
 80057b2:	2e00      	cmp	r6, #0
 80057b4:	d077      	beq.n	80058a6 <_dtoa_r+0x1d6>
 80057b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80057bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057d0:	4619      	mov	r1, r3
 80057d2:	2200      	movs	r2, #0
 80057d4:	4b74      	ldr	r3, [pc, #464]	@ (80059a8 <_dtoa_r+0x2d8>)
 80057d6:	f7fa fd67 	bl	80002a8 <__aeabi_dsub>
 80057da:	a369      	add	r3, pc, #420	@ (adr r3, 8005980 <_dtoa_r+0x2b0>)
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f7fa ff1a 	bl	8000618 <__aeabi_dmul>
 80057e4:	a368      	add	r3, pc, #416	@ (adr r3, 8005988 <_dtoa_r+0x2b8>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f7fa fd5f 	bl	80002ac <__adddf3>
 80057ee:	4604      	mov	r4, r0
 80057f0:	4630      	mov	r0, r6
 80057f2:	460d      	mov	r5, r1
 80057f4:	f7fa fea6 	bl	8000544 <__aeabi_i2d>
 80057f8:	a365      	add	r3, pc, #404	@ (adr r3, 8005990 <_dtoa_r+0x2c0>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f7fa ff0b 	bl	8000618 <__aeabi_dmul>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4620      	mov	r0, r4
 8005808:	4629      	mov	r1, r5
 800580a:	f7fa fd4f 	bl	80002ac <__adddf3>
 800580e:	4604      	mov	r4, r0
 8005810:	460d      	mov	r5, r1
 8005812:	f7fb f9b1 	bl	8000b78 <__aeabi_d2iz>
 8005816:	2200      	movs	r2, #0
 8005818:	4607      	mov	r7, r0
 800581a:	2300      	movs	r3, #0
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fb f96c 	bl	8000afc <__aeabi_dcmplt>
 8005824:	b140      	cbz	r0, 8005838 <_dtoa_r+0x168>
 8005826:	4638      	mov	r0, r7
 8005828:	f7fa fe8c 	bl	8000544 <__aeabi_i2d>
 800582c:	4622      	mov	r2, r4
 800582e:	462b      	mov	r3, r5
 8005830:	f7fb f95a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005834:	b900      	cbnz	r0, 8005838 <_dtoa_r+0x168>
 8005836:	3f01      	subs	r7, #1
 8005838:	2f16      	cmp	r7, #22
 800583a:	d851      	bhi.n	80058e0 <_dtoa_r+0x210>
 800583c:	4b5b      	ldr	r3, [pc, #364]	@ (80059ac <_dtoa_r+0x2dc>)
 800583e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800584a:	f7fb f957 	bl	8000afc <__aeabi_dcmplt>
 800584e:	2800      	cmp	r0, #0
 8005850:	d048      	beq.n	80058e4 <_dtoa_r+0x214>
 8005852:	3f01      	subs	r7, #1
 8005854:	2300      	movs	r3, #0
 8005856:	9312      	str	r3, [sp, #72]	@ 0x48
 8005858:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800585a:	1b9b      	subs	r3, r3, r6
 800585c:	1e5a      	subs	r2, r3, #1
 800585e:	bf44      	itt	mi
 8005860:	f1c3 0801 	rsbmi	r8, r3, #1
 8005864:	2300      	movmi	r3, #0
 8005866:	9208      	str	r2, [sp, #32]
 8005868:	bf54      	ite	pl
 800586a:	f04f 0800 	movpl.w	r8, #0
 800586e:	9308      	strmi	r3, [sp, #32]
 8005870:	2f00      	cmp	r7, #0
 8005872:	db39      	blt.n	80058e8 <_dtoa_r+0x218>
 8005874:	9b08      	ldr	r3, [sp, #32]
 8005876:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005878:	443b      	add	r3, r7
 800587a:	9308      	str	r3, [sp, #32]
 800587c:	2300      	movs	r3, #0
 800587e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005882:	2b09      	cmp	r3, #9
 8005884:	d864      	bhi.n	8005950 <_dtoa_r+0x280>
 8005886:	2b05      	cmp	r3, #5
 8005888:	bfc4      	itt	gt
 800588a:	3b04      	subgt	r3, #4
 800588c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800588e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005890:	f1a3 0302 	sub.w	r3, r3, #2
 8005894:	bfcc      	ite	gt
 8005896:	2400      	movgt	r4, #0
 8005898:	2401      	movle	r4, #1
 800589a:	2b03      	cmp	r3, #3
 800589c:	d863      	bhi.n	8005966 <_dtoa_r+0x296>
 800589e:	e8df f003 	tbb	[pc, r3]
 80058a2:	372a      	.short	0x372a
 80058a4:	5535      	.short	0x5535
 80058a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80058aa:	441e      	add	r6, r3
 80058ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	bfc1      	itttt	gt
 80058b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058b8:	409f      	lslgt	r7, r3
 80058ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058c2:	bfd6      	itet	le
 80058c4:	f1c3 0320 	rsble	r3, r3, #32
 80058c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80058cc:	fa04 f003 	lslle.w	r0, r4, r3
 80058d0:	f7fa fe28 	bl	8000524 <__aeabi_ui2d>
 80058d4:	2201      	movs	r2, #1
 80058d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058da:	3e01      	subs	r6, #1
 80058dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80058de:	e777      	b.n	80057d0 <_dtoa_r+0x100>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e7b8      	b.n	8005856 <_dtoa_r+0x186>
 80058e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80058e6:	e7b7      	b.n	8005858 <_dtoa_r+0x188>
 80058e8:	427b      	negs	r3, r7
 80058ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80058ec:	2300      	movs	r3, #0
 80058ee:	eba8 0807 	sub.w	r8, r8, r7
 80058f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058f4:	e7c4      	b.n	8005880 <_dtoa_r+0x1b0>
 80058f6:	2300      	movs	r3, #0
 80058f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dc35      	bgt.n	800596c <_dtoa_r+0x29c>
 8005900:	2301      	movs	r3, #1
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	9307      	str	r3, [sp, #28]
 8005906:	461a      	mov	r2, r3
 8005908:	920e      	str	r2, [sp, #56]	@ 0x38
 800590a:	e00b      	b.n	8005924 <_dtoa_r+0x254>
 800590c:	2301      	movs	r3, #1
 800590e:	e7f3      	b.n	80058f8 <_dtoa_r+0x228>
 8005910:	2300      	movs	r3, #0
 8005912:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005916:	18fb      	adds	r3, r7, r3
 8005918:	9300      	str	r3, [sp, #0]
 800591a:	3301      	adds	r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	9307      	str	r3, [sp, #28]
 8005920:	bfb8      	it	lt
 8005922:	2301      	movlt	r3, #1
 8005924:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005928:	2100      	movs	r1, #0
 800592a:	2204      	movs	r2, #4
 800592c:	f102 0514 	add.w	r5, r2, #20
 8005930:	429d      	cmp	r5, r3
 8005932:	d91f      	bls.n	8005974 <_dtoa_r+0x2a4>
 8005934:	6041      	str	r1, [r0, #4]
 8005936:	4658      	mov	r0, fp
 8005938:	f000 fd8e 	bl	8006458 <_Balloc>
 800593c:	4682      	mov	sl, r0
 800593e:	2800      	cmp	r0, #0
 8005940:	d13c      	bne.n	80059bc <_dtoa_r+0x2ec>
 8005942:	4b1b      	ldr	r3, [pc, #108]	@ (80059b0 <_dtoa_r+0x2e0>)
 8005944:	4602      	mov	r2, r0
 8005946:	f240 11af 	movw	r1, #431	@ 0x1af
 800594a:	e6d8      	b.n	80056fe <_dtoa_r+0x2e>
 800594c:	2301      	movs	r3, #1
 800594e:	e7e0      	b.n	8005912 <_dtoa_r+0x242>
 8005950:	2401      	movs	r4, #1
 8005952:	2300      	movs	r3, #0
 8005954:	9309      	str	r3, [sp, #36]	@ 0x24
 8005956:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005958:	f04f 33ff 	mov.w	r3, #4294967295
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	9307      	str	r3, [sp, #28]
 8005960:	2200      	movs	r2, #0
 8005962:	2312      	movs	r3, #18
 8005964:	e7d0      	b.n	8005908 <_dtoa_r+0x238>
 8005966:	2301      	movs	r3, #1
 8005968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800596a:	e7f5      	b.n	8005958 <_dtoa_r+0x288>
 800596c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	9307      	str	r3, [sp, #28]
 8005972:	e7d7      	b.n	8005924 <_dtoa_r+0x254>
 8005974:	3101      	adds	r1, #1
 8005976:	0052      	lsls	r2, r2, #1
 8005978:	e7d8      	b.n	800592c <_dtoa_r+0x25c>
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w
 8005980:	636f4361 	.word	0x636f4361
 8005984:	3fd287a7 	.word	0x3fd287a7
 8005988:	8b60c8b3 	.word	0x8b60c8b3
 800598c:	3fc68a28 	.word	0x3fc68a28
 8005990:	509f79fb 	.word	0x509f79fb
 8005994:	3fd34413 	.word	0x3fd34413
 8005998:	08007371 	.word	0x08007371
 800599c:	08007388 	.word	0x08007388
 80059a0:	7ff00000 	.word	0x7ff00000
 80059a4:	08007341 	.word	0x08007341
 80059a8:	3ff80000 	.word	0x3ff80000
 80059ac:	08007480 	.word	0x08007480
 80059b0:	080073e0 	.word	0x080073e0
 80059b4:	0800736d 	.word	0x0800736d
 80059b8:	08007340 	.word	0x08007340
 80059bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059c0:	6018      	str	r0, [r3, #0]
 80059c2:	9b07      	ldr	r3, [sp, #28]
 80059c4:	2b0e      	cmp	r3, #14
 80059c6:	f200 80a4 	bhi.w	8005b12 <_dtoa_r+0x442>
 80059ca:	2c00      	cmp	r4, #0
 80059cc:	f000 80a1 	beq.w	8005b12 <_dtoa_r+0x442>
 80059d0:	2f00      	cmp	r7, #0
 80059d2:	dd33      	ble.n	8005a3c <_dtoa_r+0x36c>
 80059d4:	4bad      	ldr	r3, [pc, #692]	@ (8005c8c <_dtoa_r+0x5bc>)
 80059d6:	f007 020f 	and.w	r2, r7, #15
 80059da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059de:	ed93 7b00 	vldr	d7, [r3]
 80059e2:	05f8      	lsls	r0, r7, #23
 80059e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059ec:	d516      	bpl.n	8005a1c <_dtoa_r+0x34c>
 80059ee:	4ba8      	ldr	r3, [pc, #672]	@ (8005c90 <_dtoa_r+0x5c0>)
 80059f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059f8:	f7fa ff38 	bl	800086c <__aeabi_ddiv>
 80059fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a00:	f004 040f 	and.w	r4, r4, #15
 8005a04:	2603      	movs	r6, #3
 8005a06:	4da2      	ldr	r5, [pc, #648]	@ (8005c90 <_dtoa_r+0x5c0>)
 8005a08:	b954      	cbnz	r4, 8005a20 <_dtoa_r+0x350>
 8005a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a12:	f7fa ff2b 	bl	800086c <__aeabi_ddiv>
 8005a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a1a:	e028      	b.n	8005a6e <_dtoa_r+0x39e>
 8005a1c:	2602      	movs	r6, #2
 8005a1e:	e7f2      	b.n	8005a06 <_dtoa_r+0x336>
 8005a20:	07e1      	lsls	r1, r4, #31
 8005a22:	d508      	bpl.n	8005a36 <_dtoa_r+0x366>
 8005a24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a2c:	f7fa fdf4 	bl	8000618 <__aeabi_dmul>
 8005a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a34:	3601      	adds	r6, #1
 8005a36:	1064      	asrs	r4, r4, #1
 8005a38:	3508      	adds	r5, #8
 8005a3a:	e7e5      	b.n	8005a08 <_dtoa_r+0x338>
 8005a3c:	f000 80d2 	beq.w	8005be4 <_dtoa_r+0x514>
 8005a40:	427c      	negs	r4, r7
 8005a42:	4b92      	ldr	r3, [pc, #584]	@ (8005c8c <_dtoa_r+0x5bc>)
 8005a44:	4d92      	ldr	r5, [pc, #584]	@ (8005c90 <_dtoa_r+0x5c0>)
 8005a46:	f004 020f 	and.w	r2, r4, #15
 8005a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a56:	f7fa fddf 	bl	8000618 <__aeabi_dmul>
 8005a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a5e:	1124      	asrs	r4, r4, #4
 8005a60:	2300      	movs	r3, #0
 8005a62:	2602      	movs	r6, #2
 8005a64:	2c00      	cmp	r4, #0
 8005a66:	f040 80b2 	bne.w	8005bce <_dtoa_r+0x4fe>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1d3      	bne.n	8005a16 <_dtoa_r+0x346>
 8005a6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 80b7 	beq.w	8005be8 <_dtoa_r+0x518>
 8005a7a:	4b86      	ldr	r3, [pc, #536]	@ (8005c94 <_dtoa_r+0x5c4>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4620      	mov	r0, r4
 8005a80:	4629      	mov	r1, r5
 8005a82:	f7fb f83b 	bl	8000afc <__aeabi_dcmplt>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f000 80ae 	beq.w	8005be8 <_dtoa_r+0x518>
 8005a8c:	9b07      	ldr	r3, [sp, #28]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80aa 	beq.w	8005be8 <_dtoa_r+0x518>
 8005a94:	9b00      	ldr	r3, [sp, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	dd37      	ble.n	8005b0a <_dtoa_r+0x43a>
 8005a9a:	1e7b      	subs	r3, r7, #1
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	4b7d      	ldr	r3, [pc, #500]	@ (8005c98 <_dtoa_r+0x5c8>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7fa fdb7 	bl	8000618 <__aeabi_dmul>
 8005aaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aae:	9c00      	ldr	r4, [sp, #0]
 8005ab0:	3601      	adds	r6, #1
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7fa fd46 	bl	8000544 <__aeabi_i2d>
 8005ab8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005abc:	f7fa fdac 	bl	8000618 <__aeabi_dmul>
 8005ac0:	4b76      	ldr	r3, [pc, #472]	@ (8005c9c <_dtoa_r+0x5cc>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f7fa fbf2 	bl	80002ac <__adddf3>
 8005ac8:	4605      	mov	r5, r0
 8005aca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ace:	2c00      	cmp	r4, #0
 8005ad0:	f040 808d 	bne.w	8005bee <_dtoa_r+0x51e>
 8005ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ad8:	4b71      	ldr	r3, [pc, #452]	@ (8005ca0 <_dtoa_r+0x5d0>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	f7fa fbe4 	bl	80002a8 <__aeabi_dsub>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ae8:	462a      	mov	r2, r5
 8005aea:	4633      	mov	r3, r6
 8005aec:	f7fb f824 	bl	8000b38 <__aeabi_dcmpgt>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f040 828b 	bne.w	800600c <_dtoa_r+0x93c>
 8005af6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005afa:	462a      	mov	r2, r5
 8005afc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b00:	f7fa fffc 	bl	8000afc <__aeabi_dcmplt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f040 8128 	bne.w	8005d5a <_dtoa_r+0x68a>
 8005b0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f2c0 815a 	blt.w	8005dce <_dtoa_r+0x6fe>
 8005b1a:	2f0e      	cmp	r7, #14
 8005b1c:	f300 8157 	bgt.w	8005dce <_dtoa_r+0x6fe>
 8005b20:	4b5a      	ldr	r3, [pc, #360]	@ (8005c8c <_dtoa_r+0x5bc>)
 8005b22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b26:	ed93 7b00 	vldr	d7, [r3]
 8005b2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	ed8d 7b00 	vstr	d7, [sp]
 8005b32:	da03      	bge.n	8005b3c <_dtoa_r+0x46c>
 8005b34:	9b07      	ldr	r3, [sp, #28]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	f340 8101 	ble.w	8005d3e <_dtoa_r+0x66e>
 8005b3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b40:	4656      	mov	r6, sl
 8005b42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa fe8f 	bl	800086c <__aeabi_ddiv>
 8005b4e:	f7fb f813 	bl	8000b78 <__aeabi_d2iz>
 8005b52:	4680      	mov	r8, r0
 8005b54:	f7fa fcf6 	bl	8000544 <__aeabi_i2d>
 8005b58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b5c:	f7fa fd5c 	bl	8000618 <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4620      	mov	r0, r4
 8005b66:	4629      	mov	r1, r5
 8005b68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b6c:	f7fa fb9c 	bl	80002a8 <__aeabi_dsub>
 8005b70:	f806 4b01 	strb.w	r4, [r6], #1
 8005b74:	9d07      	ldr	r5, [sp, #28]
 8005b76:	eba6 040a 	sub.w	r4, r6, sl
 8005b7a:	42a5      	cmp	r5, r4
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	f040 8117 	bne.w	8005db2 <_dtoa_r+0x6e2>
 8005b84:	f7fa fb92 	bl	80002ac <__adddf3>
 8005b88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	460d      	mov	r5, r1
 8005b90:	f7fa ffd2 	bl	8000b38 <__aeabi_dcmpgt>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	f040 80f9 	bne.w	8005d8c <_dtoa_r+0x6bc>
 8005b9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	f7fa ffa1 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ba6:	b118      	cbz	r0, 8005bb0 <_dtoa_r+0x4e0>
 8005ba8:	f018 0f01 	tst.w	r8, #1
 8005bac:	f040 80ee 	bne.w	8005d8c <_dtoa_r+0x6bc>
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4658      	mov	r0, fp
 8005bb4:	f000 fc90 	bl	80064d8 <_Bfree>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	7033      	strb	r3, [r6, #0]
 8005bbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005bbe:	3701      	adds	r7, #1
 8005bc0:	601f      	str	r7, [r3, #0]
 8005bc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 831d 	beq.w	8006204 <_dtoa_r+0xb34>
 8005bca:	601e      	str	r6, [r3, #0]
 8005bcc:	e31a      	b.n	8006204 <_dtoa_r+0xb34>
 8005bce:	07e2      	lsls	r2, r4, #31
 8005bd0:	d505      	bpl.n	8005bde <_dtoa_r+0x50e>
 8005bd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bd6:	f7fa fd1f 	bl	8000618 <__aeabi_dmul>
 8005bda:	3601      	adds	r6, #1
 8005bdc:	2301      	movs	r3, #1
 8005bde:	1064      	asrs	r4, r4, #1
 8005be0:	3508      	adds	r5, #8
 8005be2:	e73f      	b.n	8005a64 <_dtoa_r+0x394>
 8005be4:	2602      	movs	r6, #2
 8005be6:	e742      	b.n	8005a6e <_dtoa_r+0x39e>
 8005be8:	9c07      	ldr	r4, [sp, #28]
 8005bea:	9704      	str	r7, [sp, #16]
 8005bec:	e761      	b.n	8005ab2 <_dtoa_r+0x3e2>
 8005bee:	4b27      	ldr	r3, [pc, #156]	@ (8005c8c <_dtoa_r+0x5bc>)
 8005bf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bfa:	4454      	add	r4, sl
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	d053      	beq.n	8005ca8 <_dtoa_r+0x5d8>
 8005c00:	4928      	ldr	r1, [pc, #160]	@ (8005ca4 <_dtoa_r+0x5d4>)
 8005c02:	2000      	movs	r0, #0
 8005c04:	f7fa fe32 	bl	800086c <__aeabi_ddiv>
 8005c08:	4633      	mov	r3, r6
 8005c0a:	462a      	mov	r2, r5
 8005c0c:	f7fa fb4c 	bl	80002a8 <__aeabi_dsub>
 8005c10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c14:	4656      	mov	r6, sl
 8005c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c1a:	f7fa ffad 	bl	8000b78 <__aeabi_d2iz>
 8005c1e:	4605      	mov	r5, r0
 8005c20:	f7fa fc90 	bl	8000544 <__aeabi_i2d>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2c:	f7fa fb3c 	bl	80002a8 <__aeabi_dsub>
 8005c30:	3530      	adds	r5, #48	@ 0x30
 8005c32:	4602      	mov	r2, r0
 8005c34:	460b      	mov	r3, r1
 8005c36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c3a:	f806 5b01 	strb.w	r5, [r6], #1
 8005c3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c42:	f7fa ff5b 	bl	8000afc <__aeabi_dcmplt>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d171      	bne.n	8005d2e <_dtoa_r+0x65e>
 8005c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c4e:	4911      	ldr	r1, [pc, #68]	@ (8005c94 <_dtoa_r+0x5c4>)
 8005c50:	2000      	movs	r0, #0
 8005c52:	f7fa fb29 	bl	80002a8 <__aeabi_dsub>
 8005c56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c5a:	f7fa ff4f 	bl	8000afc <__aeabi_dcmplt>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f040 8095 	bne.w	8005d8e <_dtoa_r+0x6be>
 8005c64:	42a6      	cmp	r6, r4
 8005c66:	f43f af50 	beq.w	8005b0a <_dtoa_r+0x43a>
 8005c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c98 <_dtoa_r+0x5c8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	f7fa fcd1 	bl	8000618 <__aeabi_dmul>
 8005c76:	4b08      	ldr	r3, [pc, #32]	@ (8005c98 <_dtoa_r+0x5c8>)
 8005c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c82:	f7fa fcc9 	bl	8000618 <__aeabi_dmul>
 8005c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c8a:	e7c4      	b.n	8005c16 <_dtoa_r+0x546>
 8005c8c:	08007480 	.word	0x08007480
 8005c90:	08007458 	.word	0x08007458
 8005c94:	3ff00000 	.word	0x3ff00000
 8005c98:	40240000 	.word	0x40240000
 8005c9c:	401c0000 	.word	0x401c0000
 8005ca0:	40140000 	.word	0x40140000
 8005ca4:	3fe00000 	.word	0x3fe00000
 8005ca8:	4631      	mov	r1, r6
 8005caa:	4628      	mov	r0, r5
 8005cac:	f7fa fcb4 	bl	8000618 <__aeabi_dmul>
 8005cb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8005cb6:	4656      	mov	r6, sl
 8005cb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cbc:	f7fa ff5c 	bl	8000b78 <__aeabi_d2iz>
 8005cc0:	4605      	mov	r5, r0
 8005cc2:	f7fa fc3f 	bl	8000544 <__aeabi_i2d>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cce:	f7fa faeb 	bl	80002a8 <__aeabi_dsub>
 8005cd2:	3530      	adds	r5, #48	@ 0x30
 8005cd4:	f806 5b01 	strb.w	r5, [r6], #1
 8005cd8:	4602      	mov	r2, r0
 8005cda:	460b      	mov	r3, r1
 8005cdc:	42a6      	cmp	r6, r4
 8005cde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	d124      	bne.n	8005d32 <_dtoa_r+0x662>
 8005ce8:	4bac      	ldr	r3, [pc, #688]	@ (8005f9c <_dtoa_r+0x8cc>)
 8005cea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005cee:	f7fa fadd 	bl	80002ac <__adddf3>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cfa:	f7fa ff1d 	bl	8000b38 <__aeabi_dcmpgt>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d145      	bne.n	8005d8e <_dtoa_r+0x6be>
 8005d02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d06:	49a5      	ldr	r1, [pc, #660]	@ (8005f9c <_dtoa_r+0x8cc>)
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f7fa facd 	bl	80002a8 <__aeabi_dsub>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d16:	f7fa fef1 	bl	8000afc <__aeabi_dcmplt>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f43f aef5 	beq.w	8005b0a <_dtoa_r+0x43a>
 8005d20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005d22:	1e73      	subs	r3, r6, #1
 8005d24:	9315      	str	r3, [sp, #84]	@ 0x54
 8005d26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d2a:	2b30      	cmp	r3, #48	@ 0x30
 8005d2c:	d0f8      	beq.n	8005d20 <_dtoa_r+0x650>
 8005d2e:	9f04      	ldr	r7, [sp, #16]
 8005d30:	e73e      	b.n	8005bb0 <_dtoa_r+0x4e0>
 8005d32:	4b9b      	ldr	r3, [pc, #620]	@ (8005fa0 <_dtoa_r+0x8d0>)
 8005d34:	f7fa fc70 	bl	8000618 <__aeabi_dmul>
 8005d38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d3c:	e7bc      	b.n	8005cb8 <_dtoa_r+0x5e8>
 8005d3e:	d10c      	bne.n	8005d5a <_dtoa_r+0x68a>
 8005d40:	4b98      	ldr	r3, [pc, #608]	@ (8005fa4 <_dtoa_r+0x8d4>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d48:	f7fa fc66 	bl	8000618 <__aeabi_dmul>
 8005d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d50:	f7fa fee8 	bl	8000b24 <__aeabi_dcmpge>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	f000 8157 	beq.w	8006008 <_dtoa_r+0x938>
 8005d5a:	2400      	movs	r4, #0
 8005d5c:	4625      	mov	r5, r4
 8005d5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d60:	43db      	mvns	r3, r3
 8005d62:	9304      	str	r3, [sp, #16]
 8005d64:	4656      	mov	r6, sl
 8005d66:	2700      	movs	r7, #0
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4658      	mov	r0, fp
 8005d6c:	f000 fbb4 	bl	80064d8 <_Bfree>
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	d0dc      	beq.n	8005d2e <_dtoa_r+0x65e>
 8005d74:	b12f      	cbz	r7, 8005d82 <_dtoa_r+0x6b2>
 8005d76:	42af      	cmp	r7, r5
 8005d78:	d003      	beq.n	8005d82 <_dtoa_r+0x6b2>
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	4658      	mov	r0, fp
 8005d7e:	f000 fbab 	bl	80064d8 <_Bfree>
 8005d82:	4629      	mov	r1, r5
 8005d84:	4658      	mov	r0, fp
 8005d86:	f000 fba7 	bl	80064d8 <_Bfree>
 8005d8a:	e7d0      	b.n	8005d2e <_dtoa_r+0x65e>
 8005d8c:	9704      	str	r7, [sp, #16]
 8005d8e:	4633      	mov	r3, r6
 8005d90:	461e      	mov	r6, r3
 8005d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d96:	2a39      	cmp	r2, #57	@ 0x39
 8005d98:	d107      	bne.n	8005daa <_dtoa_r+0x6da>
 8005d9a:	459a      	cmp	sl, r3
 8005d9c:	d1f8      	bne.n	8005d90 <_dtoa_r+0x6c0>
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	3201      	adds	r2, #1
 8005da2:	9204      	str	r2, [sp, #16]
 8005da4:	2230      	movs	r2, #48	@ 0x30
 8005da6:	f88a 2000 	strb.w	r2, [sl]
 8005daa:	781a      	ldrb	r2, [r3, #0]
 8005dac:	3201      	adds	r2, #1
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e7bd      	b.n	8005d2e <_dtoa_r+0x65e>
 8005db2:	4b7b      	ldr	r3, [pc, #492]	@ (8005fa0 <_dtoa_r+0x8d0>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	f7fa fc2f 	bl	8000618 <__aeabi_dmul>
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	460d      	mov	r5, r1
 8005dc2:	f7fa fe91 	bl	8000ae8 <__aeabi_dcmpeq>
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f43f aebb 	beq.w	8005b42 <_dtoa_r+0x472>
 8005dcc:	e6f0      	b.n	8005bb0 <_dtoa_r+0x4e0>
 8005dce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005dd0:	2a00      	cmp	r2, #0
 8005dd2:	f000 80db 	beq.w	8005f8c <_dtoa_r+0x8bc>
 8005dd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dd8:	2a01      	cmp	r2, #1
 8005dda:	f300 80bf 	bgt.w	8005f5c <_dtoa_r+0x88c>
 8005dde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	f000 80b7 	beq.w	8005f54 <_dtoa_r+0x884>
 8005de6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005dec:	4646      	mov	r6, r8
 8005dee:	9a08      	ldr	r2, [sp, #32]
 8005df0:	2101      	movs	r1, #1
 8005df2:	441a      	add	r2, r3
 8005df4:	4658      	mov	r0, fp
 8005df6:	4498      	add	r8, r3
 8005df8:	9208      	str	r2, [sp, #32]
 8005dfa:	f000 fc21 	bl	8006640 <__i2b>
 8005dfe:	4605      	mov	r5, r0
 8005e00:	b15e      	cbz	r6, 8005e1a <_dtoa_r+0x74a>
 8005e02:	9b08      	ldr	r3, [sp, #32]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	dd08      	ble.n	8005e1a <_dtoa_r+0x74a>
 8005e08:	42b3      	cmp	r3, r6
 8005e0a:	9a08      	ldr	r2, [sp, #32]
 8005e0c:	bfa8      	it	ge
 8005e0e:	4633      	movge	r3, r6
 8005e10:	eba8 0803 	sub.w	r8, r8, r3
 8005e14:	1af6      	subs	r6, r6, r3
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	9308      	str	r3, [sp, #32]
 8005e1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e1c:	b1f3      	cbz	r3, 8005e5c <_dtoa_r+0x78c>
 8005e1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80b7 	beq.w	8005f94 <_dtoa_r+0x8c4>
 8005e26:	b18c      	cbz	r4, 8005e4c <_dtoa_r+0x77c>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4658      	mov	r0, fp
 8005e2e:	f000 fcc7 	bl	80067c0 <__pow5mult>
 8005e32:	464a      	mov	r2, r9
 8005e34:	4601      	mov	r1, r0
 8005e36:	4605      	mov	r5, r0
 8005e38:	4658      	mov	r0, fp
 8005e3a:	f000 fc17 	bl	800666c <__multiply>
 8005e3e:	4649      	mov	r1, r9
 8005e40:	9004      	str	r0, [sp, #16]
 8005e42:	4658      	mov	r0, fp
 8005e44:	f000 fb48 	bl	80064d8 <_Bfree>
 8005e48:	9b04      	ldr	r3, [sp, #16]
 8005e4a:	4699      	mov	r9, r3
 8005e4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e4e:	1b1a      	subs	r2, r3, r4
 8005e50:	d004      	beq.n	8005e5c <_dtoa_r+0x78c>
 8005e52:	4649      	mov	r1, r9
 8005e54:	4658      	mov	r0, fp
 8005e56:	f000 fcb3 	bl	80067c0 <__pow5mult>
 8005e5a:	4681      	mov	r9, r0
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	4658      	mov	r0, fp
 8005e60:	f000 fbee 	bl	8006640 <__i2b>
 8005e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e66:	4604      	mov	r4, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 81cf 	beq.w	800620c <_dtoa_r+0xb3c>
 8005e6e:	461a      	mov	r2, r3
 8005e70:	4601      	mov	r1, r0
 8005e72:	4658      	mov	r0, fp
 8005e74:	f000 fca4 	bl	80067c0 <__pow5mult>
 8005e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	f300 8095 	bgt.w	8005fac <_dtoa_r+0x8dc>
 8005e82:	9b02      	ldr	r3, [sp, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f040 8087 	bne.w	8005f98 <_dtoa_r+0x8c8>
 8005e8a:	9b03      	ldr	r3, [sp, #12]
 8005e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f040 8089 	bne.w	8005fa8 <_dtoa_r+0x8d8>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e9c:	0d1b      	lsrs	r3, r3, #20
 8005e9e:	051b      	lsls	r3, r3, #20
 8005ea0:	b12b      	cbz	r3, 8005eae <_dtoa_r+0x7de>
 8005ea2:	9b08      	ldr	r3, [sp, #32]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	9308      	str	r3, [sp, #32]
 8005ea8:	f108 0801 	add.w	r8, r8, #1
 8005eac:	2301      	movs	r3, #1
 8005eae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 81b0 	beq.w	8006218 <_dtoa_r+0xb48>
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ebe:	6918      	ldr	r0, [r3, #16]
 8005ec0:	f000 fb72 	bl	80065a8 <__hi0bits>
 8005ec4:	f1c0 0020 	rsb	r0, r0, #32
 8005ec8:	9b08      	ldr	r3, [sp, #32]
 8005eca:	4418      	add	r0, r3
 8005ecc:	f010 001f 	ands.w	r0, r0, #31
 8005ed0:	d077      	beq.n	8005fc2 <_dtoa_r+0x8f2>
 8005ed2:	f1c0 0320 	rsb	r3, r0, #32
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	dd6b      	ble.n	8005fb2 <_dtoa_r+0x8e2>
 8005eda:	9b08      	ldr	r3, [sp, #32]
 8005edc:	f1c0 001c 	rsb	r0, r0, #28
 8005ee0:	4403      	add	r3, r0
 8005ee2:	4480      	add	r8, r0
 8005ee4:	4406      	add	r6, r0
 8005ee6:	9308      	str	r3, [sp, #32]
 8005ee8:	f1b8 0f00 	cmp.w	r8, #0
 8005eec:	dd05      	ble.n	8005efa <_dtoa_r+0x82a>
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	4658      	mov	r0, fp
 8005ef4:	f000 fcbe 	bl	8006874 <__lshift>
 8005ef8:	4681      	mov	r9, r0
 8005efa:	9b08      	ldr	r3, [sp, #32]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	dd05      	ble.n	8005f0c <_dtoa_r+0x83c>
 8005f00:	4621      	mov	r1, r4
 8005f02:	461a      	mov	r2, r3
 8005f04:	4658      	mov	r0, fp
 8005f06:	f000 fcb5 	bl	8006874 <__lshift>
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d059      	beq.n	8005fc6 <_dtoa_r+0x8f6>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4648      	mov	r0, r9
 8005f16:	f000 fd19 	bl	800694c <__mcmp>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	da53      	bge.n	8005fc6 <_dtoa_r+0x8f6>
 8005f1e:	1e7b      	subs	r3, r7, #1
 8005f20:	9304      	str	r3, [sp, #16]
 8005f22:	4649      	mov	r1, r9
 8005f24:	2300      	movs	r3, #0
 8005f26:	220a      	movs	r2, #10
 8005f28:	4658      	mov	r0, fp
 8005f2a:	f000 faf7 	bl	800651c <__multadd>
 8005f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f30:	4681      	mov	r9, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 8172 	beq.w	800621c <_dtoa_r+0xb4c>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	220a      	movs	r2, #10
 8005f3e:	4658      	mov	r0, fp
 8005f40:	f000 faec 	bl	800651c <__multadd>
 8005f44:	9b00      	ldr	r3, [sp, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	4605      	mov	r5, r0
 8005f4a:	dc67      	bgt.n	800601c <_dtoa_r+0x94c>
 8005f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	dc41      	bgt.n	8005fd6 <_dtoa_r+0x906>
 8005f52:	e063      	b.n	800601c <_dtoa_r+0x94c>
 8005f54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f5a:	e746      	b.n	8005dea <_dtoa_r+0x71a>
 8005f5c:	9b07      	ldr	r3, [sp, #28]
 8005f5e:	1e5c      	subs	r4, r3, #1
 8005f60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f62:	42a3      	cmp	r3, r4
 8005f64:	bfbf      	itttt	lt
 8005f66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f6c:	1ae3      	sublt	r3, r4, r3
 8005f6e:	bfb4      	ite	lt
 8005f70:	18d2      	addlt	r2, r2, r3
 8005f72:	1b1c      	subge	r4, r3, r4
 8005f74:	9b07      	ldr	r3, [sp, #28]
 8005f76:	bfbc      	itt	lt
 8005f78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f7a:	2400      	movlt	r4, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bfb5      	itete	lt
 8005f80:	eba8 0603 	sublt.w	r6, r8, r3
 8005f84:	9b07      	ldrge	r3, [sp, #28]
 8005f86:	2300      	movlt	r3, #0
 8005f88:	4646      	movge	r6, r8
 8005f8a:	e730      	b.n	8005dee <_dtoa_r+0x71e>
 8005f8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f90:	4646      	mov	r6, r8
 8005f92:	e735      	b.n	8005e00 <_dtoa_r+0x730>
 8005f94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f96:	e75c      	b.n	8005e52 <_dtoa_r+0x782>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e788      	b.n	8005eae <_dtoa_r+0x7de>
 8005f9c:	3fe00000 	.word	0x3fe00000
 8005fa0:	40240000 	.word	0x40240000
 8005fa4:	40140000 	.word	0x40140000
 8005fa8:	9b02      	ldr	r3, [sp, #8]
 8005faa:	e780      	b.n	8005eae <_dtoa_r+0x7de>
 8005fac:	2300      	movs	r3, #0
 8005fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fb0:	e782      	b.n	8005eb8 <_dtoa_r+0x7e8>
 8005fb2:	d099      	beq.n	8005ee8 <_dtoa_r+0x818>
 8005fb4:	9a08      	ldr	r2, [sp, #32]
 8005fb6:	331c      	adds	r3, #28
 8005fb8:	441a      	add	r2, r3
 8005fba:	4498      	add	r8, r3
 8005fbc:	441e      	add	r6, r3
 8005fbe:	9208      	str	r2, [sp, #32]
 8005fc0:	e792      	b.n	8005ee8 <_dtoa_r+0x818>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	e7f6      	b.n	8005fb4 <_dtoa_r+0x8e4>
 8005fc6:	9b07      	ldr	r3, [sp, #28]
 8005fc8:	9704      	str	r7, [sp, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	dc20      	bgt.n	8006010 <_dtoa_r+0x940>
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	dd1e      	ble.n	8006014 <_dtoa_r+0x944>
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f aec0 	bne.w	8005d5e <_dtoa_r+0x68e>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	2205      	movs	r2, #5
 8005fe2:	4658      	mov	r0, fp
 8005fe4:	f000 fa9a 	bl	800651c <__multadd>
 8005fe8:	4601      	mov	r1, r0
 8005fea:	4604      	mov	r4, r0
 8005fec:	4648      	mov	r0, r9
 8005fee:	f000 fcad 	bl	800694c <__mcmp>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	f77f aeb3 	ble.w	8005d5e <_dtoa_r+0x68e>
 8005ff8:	4656      	mov	r6, sl
 8005ffa:	2331      	movs	r3, #49	@ 0x31
 8005ffc:	f806 3b01 	strb.w	r3, [r6], #1
 8006000:	9b04      	ldr	r3, [sp, #16]
 8006002:	3301      	adds	r3, #1
 8006004:	9304      	str	r3, [sp, #16]
 8006006:	e6ae      	b.n	8005d66 <_dtoa_r+0x696>
 8006008:	9c07      	ldr	r4, [sp, #28]
 800600a:	9704      	str	r7, [sp, #16]
 800600c:	4625      	mov	r5, r4
 800600e:	e7f3      	b.n	8005ff8 <_dtoa_r+0x928>
 8006010:	9b07      	ldr	r3, [sp, #28]
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8104 	beq.w	8006224 <_dtoa_r+0xb54>
 800601c:	2e00      	cmp	r6, #0
 800601e:	dd05      	ble.n	800602c <_dtoa_r+0x95c>
 8006020:	4629      	mov	r1, r5
 8006022:	4632      	mov	r2, r6
 8006024:	4658      	mov	r0, fp
 8006026:	f000 fc25 	bl	8006874 <__lshift>
 800602a:	4605      	mov	r5, r0
 800602c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d05a      	beq.n	80060e8 <_dtoa_r+0xa18>
 8006032:	6869      	ldr	r1, [r5, #4]
 8006034:	4658      	mov	r0, fp
 8006036:	f000 fa0f 	bl	8006458 <_Balloc>
 800603a:	4606      	mov	r6, r0
 800603c:	b928      	cbnz	r0, 800604a <_dtoa_r+0x97a>
 800603e:	4b84      	ldr	r3, [pc, #528]	@ (8006250 <_dtoa_r+0xb80>)
 8006040:	4602      	mov	r2, r0
 8006042:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006046:	f7ff bb5a 	b.w	80056fe <_dtoa_r+0x2e>
 800604a:	692a      	ldr	r2, [r5, #16]
 800604c:	3202      	adds	r2, #2
 800604e:	0092      	lsls	r2, r2, #2
 8006050:	f105 010c 	add.w	r1, r5, #12
 8006054:	300c      	adds	r0, #12
 8006056:	f000 fe3d 	bl	8006cd4 <memcpy>
 800605a:	2201      	movs	r2, #1
 800605c:	4631      	mov	r1, r6
 800605e:	4658      	mov	r0, fp
 8006060:	f000 fc08 	bl	8006874 <__lshift>
 8006064:	f10a 0301 	add.w	r3, sl, #1
 8006068:	9307      	str	r3, [sp, #28]
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	4453      	add	r3, sl
 800606e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	462f      	mov	r7, r5
 8006078:	930a      	str	r3, [sp, #40]	@ 0x28
 800607a:	4605      	mov	r5, r0
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	4621      	mov	r1, r4
 8006080:	3b01      	subs	r3, #1
 8006082:	4648      	mov	r0, r9
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	f7ff fa9a 	bl	80055be <quorem>
 800608a:	4639      	mov	r1, r7
 800608c:	9002      	str	r0, [sp, #8]
 800608e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006092:	4648      	mov	r0, r9
 8006094:	f000 fc5a 	bl	800694c <__mcmp>
 8006098:	462a      	mov	r2, r5
 800609a:	9008      	str	r0, [sp, #32]
 800609c:	4621      	mov	r1, r4
 800609e:	4658      	mov	r0, fp
 80060a0:	f000 fc70 	bl	8006984 <__mdiff>
 80060a4:	68c2      	ldr	r2, [r0, #12]
 80060a6:	4606      	mov	r6, r0
 80060a8:	bb02      	cbnz	r2, 80060ec <_dtoa_r+0xa1c>
 80060aa:	4601      	mov	r1, r0
 80060ac:	4648      	mov	r0, r9
 80060ae:	f000 fc4d 	bl	800694c <__mcmp>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4631      	mov	r1, r6
 80060b6:	4658      	mov	r0, fp
 80060b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80060ba:	f000 fa0d 	bl	80064d8 <_Bfree>
 80060be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060c2:	9e07      	ldr	r6, [sp, #28]
 80060c4:	ea43 0102 	orr.w	r1, r3, r2
 80060c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ca:	4319      	orrs	r1, r3
 80060cc:	d110      	bne.n	80060f0 <_dtoa_r+0xa20>
 80060ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060d2:	d029      	beq.n	8006128 <_dtoa_r+0xa58>
 80060d4:	9b08      	ldr	r3, [sp, #32]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	dd02      	ble.n	80060e0 <_dtoa_r+0xa10>
 80060da:	9b02      	ldr	r3, [sp, #8]
 80060dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80060e0:	9b00      	ldr	r3, [sp, #0]
 80060e2:	f883 8000 	strb.w	r8, [r3]
 80060e6:	e63f      	b.n	8005d68 <_dtoa_r+0x698>
 80060e8:	4628      	mov	r0, r5
 80060ea:	e7bb      	b.n	8006064 <_dtoa_r+0x994>
 80060ec:	2201      	movs	r2, #1
 80060ee:	e7e1      	b.n	80060b4 <_dtoa_r+0x9e4>
 80060f0:	9b08      	ldr	r3, [sp, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	db04      	blt.n	8006100 <_dtoa_r+0xa30>
 80060f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060f8:	430b      	orrs	r3, r1
 80060fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060fc:	430b      	orrs	r3, r1
 80060fe:	d120      	bne.n	8006142 <_dtoa_r+0xa72>
 8006100:	2a00      	cmp	r2, #0
 8006102:	dded      	ble.n	80060e0 <_dtoa_r+0xa10>
 8006104:	4649      	mov	r1, r9
 8006106:	2201      	movs	r2, #1
 8006108:	4658      	mov	r0, fp
 800610a:	f000 fbb3 	bl	8006874 <__lshift>
 800610e:	4621      	mov	r1, r4
 8006110:	4681      	mov	r9, r0
 8006112:	f000 fc1b 	bl	800694c <__mcmp>
 8006116:	2800      	cmp	r0, #0
 8006118:	dc03      	bgt.n	8006122 <_dtoa_r+0xa52>
 800611a:	d1e1      	bne.n	80060e0 <_dtoa_r+0xa10>
 800611c:	f018 0f01 	tst.w	r8, #1
 8006120:	d0de      	beq.n	80060e0 <_dtoa_r+0xa10>
 8006122:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006126:	d1d8      	bne.n	80060da <_dtoa_r+0xa0a>
 8006128:	9a00      	ldr	r2, [sp, #0]
 800612a:	2339      	movs	r3, #57	@ 0x39
 800612c:	7013      	strb	r3, [r2, #0]
 800612e:	4633      	mov	r3, r6
 8006130:	461e      	mov	r6, r3
 8006132:	3b01      	subs	r3, #1
 8006134:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006138:	2a39      	cmp	r2, #57	@ 0x39
 800613a:	d052      	beq.n	80061e2 <_dtoa_r+0xb12>
 800613c:	3201      	adds	r2, #1
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e612      	b.n	8005d68 <_dtoa_r+0x698>
 8006142:	2a00      	cmp	r2, #0
 8006144:	dd07      	ble.n	8006156 <_dtoa_r+0xa86>
 8006146:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800614a:	d0ed      	beq.n	8006128 <_dtoa_r+0xa58>
 800614c:	9a00      	ldr	r2, [sp, #0]
 800614e:	f108 0301 	add.w	r3, r8, #1
 8006152:	7013      	strb	r3, [r2, #0]
 8006154:	e608      	b.n	8005d68 <_dtoa_r+0x698>
 8006156:	9b07      	ldr	r3, [sp, #28]
 8006158:	9a07      	ldr	r2, [sp, #28]
 800615a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800615e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006160:	4293      	cmp	r3, r2
 8006162:	d028      	beq.n	80061b6 <_dtoa_r+0xae6>
 8006164:	4649      	mov	r1, r9
 8006166:	2300      	movs	r3, #0
 8006168:	220a      	movs	r2, #10
 800616a:	4658      	mov	r0, fp
 800616c:	f000 f9d6 	bl	800651c <__multadd>
 8006170:	42af      	cmp	r7, r5
 8006172:	4681      	mov	r9, r0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	f04f 020a 	mov.w	r2, #10
 800617c:	4639      	mov	r1, r7
 800617e:	4658      	mov	r0, fp
 8006180:	d107      	bne.n	8006192 <_dtoa_r+0xac2>
 8006182:	f000 f9cb 	bl	800651c <__multadd>
 8006186:	4607      	mov	r7, r0
 8006188:	4605      	mov	r5, r0
 800618a:	9b07      	ldr	r3, [sp, #28]
 800618c:	3301      	adds	r3, #1
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	e774      	b.n	800607c <_dtoa_r+0x9ac>
 8006192:	f000 f9c3 	bl	800651c <__multadd>
 8006196:	4629      	mov	r1, r5
 8006198:	4607      	mov	r7, r0
 800619a:	2300      	movs	r3, #0
 800619c:	220a      	movs	r2, #10
 800619e:	4658      	mov	r0, fp
 80061a0:	f000 f9bc 	bl	800651c <__multadd>
 80061a4:	4605      	mov	r5, r0
 80061a6:	e7f0      	b.n	800618a <_dtoa_r+0xaba>
 80061a8:	9b00      	ldr	r3, [sp, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bfcc      	ite	gt
 80061ae:	461e      	movgt	r6, r3
 80061b0:	2601      	movle	r6, #1
 80061b2:	4456      	add	r6, sl
 80061b4:	2700      	movs	r7, #0
 80061b6:	4649      	mov	r1, r9
 80061b8:	2201      	movs	r2, #1
 80061ba:	4658      	mov	r0, fp
 80061bc:	f000 fb5a 	bl	8006874 <__lshift>
 80061c0:	4621      	mov	r1, r4
 80061c2:	4681      	mov	r9, r0
 80061c4:	f000 fbc2 	bl	800694c <__mcmp>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	dcb0      	bgt.n	800612e <_dtoa_r+0xa5e>
 80061cc:	d102      	bne.n	80061d4 <_dtoa_r+0xb04>
 80061ce:	f018 0f01 	tst.w	r8, #1
 80061d2:	d1ac      	bne.n	800612e <_dtoa_r+0xa5e>
 80061d4:	4633      	mov	r3, r6
 80061d6:	461e      	mov	r6, r3
 80061d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061dc:	2a30      	cmp	r2, #48	@ 0x30
 80061de:	d0fa      	beq.n	80061d6 <_dtoa_r+0xb06>
 80061e0:	e5c2      	b.n	8005d68 <_dtoa_r+0x698>
 80061e2:	459a      	cmp	sl, r3
 80061e4:	d1a4      	bne.n	8006130 <_dtoa_r+0xa60>
 80061e6:	9b04      	ldr	r3, [sp, #16]
 80061e8:	3301      	adds	r3, #1
 80061ea:	9304      	str	r3, [sp, #16]
 80061ec:	2331      	movs	r3, #49	@ 0x31
 80061ee:	f88a 3000 	strb.w	r3, [sl]
 80061f2:	e5b9      	b.n	8005d68 <_dtoa_r+0x698>
 80061f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006254 <_dtoa_r+0xb84>
 80061fa:	b11b      	cbz	r3, 8006204 <_dtoa_r+0xb34>
 80061fc:	f10a 0308 	add.w	r3, sl, #8
 8006200:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	4650      	mov	r0, sl
 8006206:	b019      	add	sp, #100	@ 0x64
 8006208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800620e:	2b01      	cmp	r3, #1
 8006210:	f77f ae37 	ble.w	8005e82 <_dtoa_r+0x7b2>
 8006214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006216:	930a      	str	r3, [sp, #40]	@ 0x28
 8006218:	2001      	movs	r0, #1
 800621a:	e655      	b.n	8005ec8 <_dtoa_r+0x7f8>
 800621c:	9b00      	ldr	r3, [sp, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f77f aed6 	ble.w	8005fd0 <_dtoa_r+0x900>
 8006224:	4656      	mov	r6, sl
 8006226:	4621      	mov	r1, r4
 8006228:	4648      	mov	r0, r9
 800622a:	f7ff f9c8 	bl	80055be <quorem>
 800622e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006232:	f806 8b01 	strb.w	r8, [r6], #1
 8006236:	9b00      	ldr	r3, [sp, #0]
 8006238:	eba6 020a 	sub.w	r2, r6, sl
 800623c:	4293      	cmp	r3, r2
 800623e:	ddb3      	ble.n	80061a8 <_dtoa_r+0xad8>
 8006240:	4649      	mov	r1, r9
 8006242:	2300      	movs	r3, #0
 8006244:	220a      	movs	r2, #10
 8006246:	4658      	mov	r0, fp
 8006248:	f000 f968 	bl	800651c <__multadd>
 800624c:	4681      	mov	r9, r0
 800624e:	e7ea      	b.n	8006226 <_dtoa_r+0xb56>
 8006250:	080073e0 	.word	0x080073e0
 8006254:	08007364 	.word	0x08007364

08006258 <_free_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4605      	mov	r5, r0
 800625c:	2900      	cmp	r1, #0
 800625e:	d041      	beq.n	80062e4 <_free_r+0x8c>
 8006260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006264:	1f0c      	subs	r4, r1, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	bfb8      	it	lt
 800626a:	18e4      	addlt	r4, r4, r3
 800626c:	f000 f8e8 	bl	8006440 <__malloc_lock>
 8006270:	4a1d      	ldr	r2, [pc, #116]	@ (80062e8 <_free_r+0x90>)
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	b933      	cbnz	r3, 8006284 <_free_r+0x2c>
 8006276:	6063      	str	r3, [r4, #4]
 8006278:	6014      	str	r4, [r2, #0]
 800627a:	4628      	mov	r0, r5
 800627c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006280:	f000 b8e4 	b.w	800644c <__malloc_unlock>
 8006284:	42a3      	cmp	r3, r4
 8006286:	d908      	bls.n	800629a <_free_r+0x42>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	1821      	adds	r1, r4, r0
 800628c:	428b      	cmp	r3, r1
 800628e:	bf01      	itttt	eq
 8006290:	6819      	ldreq	r1, [r3, #0]
 8006292:	685b      	ldreq	r3, [r3, #4]
 8006294:	1809      	addeq	r1, r1, r0
 8006296:	6021      	streq	r1, [r4, #0]
 8006298:	e7ed      	b.n	8006276 <_free_r+0x1e>
 800629a:	461a      	mov	r2, r3
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b10b      	cbz	r3, 80062a4 <_free_r+0x4c>
 80062a0:	42a3      	cmp	r3, r4
 80062a2:	d9fa      	bls.n	800629a <_free_r+0x42>
 80062a4:	6811      	ldr	r1, [r2, #0]
 80062a6:	1850      	adds	r0, r2, r1
 80062a8:	42a0      	cmp	r0, r4
 80062aa:	d10b      	bne.n	80062c4 <_free_r+0x6c>
 80062ac:	6820      	ldr	r0, [r4, #0]
 80062ae:	4401      	add	r1, r0
 80062b0:	1850      	adds	r0, r2, r1
 80062b2:	4283      	cmp	r3, r0
 80062b4:	6011      	str	r1, [r2, #0]
 80062b6:	d1e0      	bne.n	800627a <_free_r+0x22>
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	6053      	str	r3, [r2, #4]
 80062be:	4408      	add	r0, r1
 80062c0:	6010      	str	r0, [r2, #0]
 80062c2:	e7da      	b.n	800627a <_free_r+0x22>
 80062c4:	d902      	bls.n	80062cc <_free_r+0x74>
 80062c6:	230c      	movs	r3, #12
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	e7d6      	b.n	800627a <_free_r+0x22>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	1821      	adds	r1, r4, r0
 80062d0:	428b      	cmp	r3, r1
 80062d2:	bf04      	itt	eq
 80062d4:	6819      	ldreq	r1, [r3, #0]
 80062d6:	685b      	ldreq	r3, [r3, #4]
 80062d8:	6063      	str	r3, [r4, #4]
 80062da:	bf04      	itt	eq
 80062dc:	1809      	addeq	r1, r1, r0
 80062de:	6021      	streq	r1, [r4, #0]
 80062e0:	6054      	str	r4, [r2, #4]
 80062e2:	e7ca      	b.n	800627a <_free_r+0x22>
 80062e4:	bd38      	pop	{r3, r4, r5, pc}
 80062e6:	bf00      	nop
 80062e8:	20000af0 	.word	0x20000af0

080062ec <malloc>:
 80062ec:	4b02      	ldr	r3, [pc, #8]	@ (80062f8 <malloc+0xc>)
 80062ee:	4601      	mov	r1, r0
 80062f0:	6818      	ldr	r0, [r3, #0]
 80062f2:	f000 b825 	b.w	8006340 <_malloc_r>
 80062f6:	bf00      	nop
 80062f8:	20000018 	.word	0x20000018

080062fc <sbrk_aligned>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4e0f      	ldr	r6, [pc, #60]	@ (800633c <sbrk_aligned+0x40>)
 8006300:	460c      	mov	r4, r1
 8006302:	6831      	ldr	r1, [r6, #0]
 8006304:	4605      	mov	r5, r0
 8006306:	b911      	cbnz	r1, 800630e <sbrk_aligned+0x12>
 8006308:	f000 fcd4 	bl	8006cb4 <_sbrk_r>
 800630c:	6030      	str	r0, [r6, #0]
 800630e:	4621      	mov	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f000 fccf 	bl	8006cb4 <_sbrk_r>
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	d103      	bne.n	8006322 <sbrk_aligned+0x26>
 800631a:	f04f 34ff 	mov.w	r4, #4294967295
 800631e:	4620      	mov	r0, r4
 8006320:	bd70      	pop	{r4, r5, r6, pc}
 8006322:	1cc4      	adds	r4, r0, #3
 8006324:	f024 0403 	bic.w	r4, r4, #3
 8006328:	42a0      	cmp	r0, r4
 800632a:	d0f8      	beq.n	800631e <sbrk_aligned+0x22>
 800632c:	1a21      	subs	r1, r4, r0
 800632e:	4628      	mov	r0, r5
 8006330:	f000 fcc0 	bl	8006cb4 <_sbrk_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d1f2      	bne.n	800631e <sbrk_aligned+0x22>
 8006338:	e7ef      	b.n	800631a <sbrk_aligned+0x1e>
 800633a:	bf00      	nop
 800633c:	20000aec 	.word	0x20000aec

08006340 <_malloc_r>:
 8006340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006344:	1ccd      	adds	r5, r1, #3
 8006346:	f025 0503 	bic.w	r5, r5, #3
 800634a:	3508      	adds	r5, #8
 800634c:	2d0c      	cmp	r5, #12
 800634e:	bf38      	it	cc
 8006350:	250c      	movcc	r5, #12
 8006352:	2d00      	cmp	r5, #0
 8006354:	4606      	mov	r6, r0
 8006356:	db01      	blt.n	800635c <_malloc_r+0x1c>
 8006358:	42a9      	cmp	r1, r5
 800635a:	d904      	bls.n	8006366 <_malloc_r+0x26>
 800635c:	230c      	movs	r3, #12
 800635e:	6033      	str	r3, [r6, #0]
 8006360:	2000      	movs	r0, #0
 8006362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006366:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800643c <_malloc_r+0xfc>
 800636a:	f000 f869 	bl	8006440 <__malloc_lock>
 800636e:	f8d8 3000 	ldr.w	r3, [r8]
 8006372:	461c      	mov	r4, r3
 8006374:	bb44      	cbnz	r4, 80063c8 <_malloc_r+0x88>
 8006376:	4629      	mov	r1, r5
 8006378:	4630      	mov	r0, r6
 800637a:	f7ff ffbf 	bl	80062fc <sbrk_aligned>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	4604      	mov	r4, r0
 8006382:	d158      	bne.n	8006436 <_malloc_r+0xf6>
 8006384:	f8d8 4000 	ldr.w	r4, [r8]
 8006388:	4627      	mov	r7, r4
 800638a:	2f00      	cmp	r7, #0
 800638c:	d143      	bne.n	8006416 <_malloc_r+0xd6>
 800638e:	2c00      	cmp	r4, #0
 8006390:	d04b      	beq.n	800642a <_malloc_r+0xea>
 8006392:	6823      	ldr	r3, [r4, #0]
 8006394:	4639      	mov	r1, r7
 8006396:	4630      	mov	r0, r6
 8006398:	eb04 0903 	add.w	r9, r4, r3
 800639c:	f000 fc8a 	bl	8006cb4 <_sbrk_r>
 80063a0:	4581      	cmp	r9, r0
 80063a2:	d142      	bne.n	800642a <_malloc_r+0xea>
 80063a4:	6821      	ldr	r1, [r4, #0]
 80063a6:	1a6d      	subs	r5, r5, r1
 80063a8:	4629      	mov	r1, r5
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff ffa6 	bl	80062fc <sbrk_aligned>
 80063b0:	3001      	adds	r0, #1
 80063b2:	d03a      	beq.n	800642a <_malloc_r+0xea>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	442b      	add	r3, r5
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	f8d8 3000 	ldr.w	r3, [r8]
 80063be:	685a      	ldr	r2, [r3, #4]
 80063c0:	bb62      	cbnz	r2, 800641c <_malloc_r+0xdc>
 80063c2:	f8c8 7000 	str.w	r7, [r8]
 80063c6:	e00f      	b.n	80063e8 <_malloc_r+0xa8>
 80063c8:	6822      	ldr	r2, [r4, #0]
 80063ca:	1b52      	subs	r2, r2, r5
 80063cc:	d420      	bmi.n	8006410 <_malloc_r+0xd0>
 80063ce:	2a0b      	cmp	r2, #11
 80063d0:	d917      	bls.n	8006402 <_malloc_r+0xc2>
 80063d2:	1961      	adds	r1, r4, r5
 80063d4:	42a3      	cmp	r3, r4
 80063d6:	6025      	str	r5, [r4, #0]
 80063d8:	bf18      	it	ne
 80063da:	6059      	strne	r1, [r3, #4]
 80063dc:	6863      	ldr	r3, [r4, #4]
 80063de:	bf08      	it	eq
 80063e0:	f8c8 1000 	streq.w	r1, [r8]
 80063e4:	5162      	str	r2, [r4, r5]
 80063e6:	604b      	str	r3, [r1, #4]
 80063e8:	4630      	mov	r0, r6
 80063ea:	f000 f82f 	bl	800644c <__malloc_unlock>
 80063ee:	f104 000b 	add.w	r0, r4, #11
 80063f2:	1d23      	adds	r3, r4, #4
 80063f4:	f020 0007 	bic.w	r0, r0, #7
 80063f8:	1ac2      	subs	r2, r0, r3
 80063fa:	bf1c      	itt	ne
 80063fc:	1a1b      	subne	r3, r3, r0
 80063fe:	50a3      	strne	r3, [r4, r2]
 8006400:	e7af      	b.n	8006362 <_malloc_r+0x22>
 8006402:	6862      	ldr	r2, [r4, #4]
 8006404:	42a3      	cmp	r3, r4
 8006406:	bf0c      	ite	eq
 8006408:	f8c8 2000 	streq.w	r2, [r8]
 800640c:	605a      	strne	r2, [r3, #4]
 800640e:	e7eb      	b.n	80063e8 <_malloc_r+0xa8>
 8006410:	4623      	mov	r3, r4
 8006412:	6864      	ldr	r4, [r4, #4]
 8006414:	e7ae      	b.n	8006374 <_malloc_r+0x34>
 8006416:	463c      	mov	r4, r7
 8006418:	687f      	ldr	r7, [r7, #4]
 800641a:	e7b6      	b.n	800638a <_malloc_r+0x4a>
 800641c:	461a      	mov	r2, r3
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	42a3      	cmp	r3, r4
 8006422:	d1fb      	bne.n	800641c <_malloc_r+0xdc>
 8006424:	2300      	movs	r3, #0
 8006426:	6053      	str	r3, [r2, #4]
 8006428:	e7de      	b.n	80063e8 <_malloc_r+0xa8>
 800642a:	230c      	movs	r3, #12
 800642c:	6033      	str	r3, [r6, #0]
 800642e:	4630      	mov	r0, r6
 8006430:	f000 f80c 	bl	800644c <__malloc_unlock>
 8006434:	e794      	b.n	8006360 <_malloc_r+0x20>
 8006436:	6005      	str	r5, [r0, #0]
 8006438:	e7d6      	b.n	80063e8 <_malloc_r+0xa8>
 800643a:	bf00      	nop
 800643c:	20000af0 	.word	0x20000af0

08006440 <__malloc_lock>:
 8006440:	4801      	ldr	r0, [pc, #4]	@ (8006448 <__malloc_lock+0x8>)
 8006442:	f7ff b8ba 	b.w	80055ba <__retarget_lock_acquire_recursive>
 8006446:	bf00      	nop
 8006448:	20000ae8 	.word	0x20000ae8

0800644c <__malloc_unlock>:
 800644c:	4801      	ldr	r0, [pc, #4]	@ (8006454 <__malloc_unlock+0x8>)
 800644e:	f7ff b8b5 	b.w	80055bc <__retarget_lock_release_recursive>
 8006452:	bf00      	nop
 8006454:	20000ae8 	.word	0x20000ae8

08006458 <_Balloc>:
 8006458:	b570      	push	{r4, r5, r6, lr}
 800645a:	69c6      	ldr	r6, [r0, #28]
 800645c:	4604      	mov	r4, r0
 800645e:	460d      	mov	r5, r1
 8006460:	b976      	cbnz	r6, 8006480 <_Balloc+0x28>
 8006462:	2010      	movs	r0, #16
 8006464:	f7ff ff42 	bl	80062ec <malloc>
 8006468:	4602      	mov	r2, r0
 800646a:	61e0      	str	r0, [r4, #28]
 800646c:	b920      	cbnz	r0, 8006478 <_Balloc+0x20>
 800646e:	4b18      	ldr	r3, [pc, #96]	@ (80064d0 <_Balloc+0x78>)
 8006470:	4818      	ldr	r0, [pc, #96]	@ (80064d4 <_Balloc+0x7c>)
 8006472:	216b      	movs	r1, #107	@ 0x6b
 8006474:	f000 fc3c 	bl	8006cf0 <__assert_func>
 8006478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800647c:	6006      	str	r6, [r0, #0]
 800647e:	60c6      	str	r6, [r0, #12]
 8006480:	69e6      	ldr	r6, [r4, #28]
 8006482:	68f3      	ldr	r3, [r6, #12]
 8006484:	b183      	cbz	r3, 80064a8 <_Balloc+0x50>
 8006486:	69e3      	ldr	r3, [r4, #28]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800648e:	b9b8      	cbnz	r0, 80064c0 <_Balloc+0x68>
 8006490:	2101      	movs	r1, #1
 8006492:	fa01 f605 	lsl.w	r6, r1, r5
 8006496:	1d72      	adds	r2, r6, #5
 8006498:	0092      	lsls	r2, r2, #2
 800649a:	4620      	mov	r0, r4
 800649c:	f000 fc46 	bl	8006d2c <_calloc_r>
 80064a0:	b160      	cbz	r0, 80064bc <_Balloc+0x64>
 80064a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064a6:	e00e      	b.n	80064c6 <_Balloc+0x6e>
 80064a8:	2221      	movs	r2, #33	@ 0x21
 80064aa:	2104      	movs	r1, #4
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 fc3d 	bl	8006d2c <_calloc_r>
 80064b2:	69e3      	ldr	r3, [r4, #28]
 80064b4:	60f0      	str	r0, [r6, #12]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e4      	bne.n	8006486 <_Balloc+0x2e>
 80064bc:	2000      	movs	r0, #0
 80064be:	bd70      	pop	{r4, r5, r6, pc}
 80064c0:	6802      	ldr	r2, [r0, #0]
 80064c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064c6:	2300      	movs	r3, #0
 80064c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064cc:	e7f7      	b.n	80064be <_Balloc+0x66>
 80064ce:	bf00      	nop
 80064d0:	08007371 	.word	0x08007371
 80064d4:	080073f1 	.word	0x080073f1

080064d8 <_Bfree>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	69c6      	ldr	r6, [r0, #28]
 80064dc:	4605      	mov	r5, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	b976      	cbnz	r6, 8006500 <_Bfree+0x28>
 80064e2:	2010      	movs	r0, #16
 80064e4:	f7ff ff02 	bl	80062ec <malloc>
 80064e8:	4602      	mov	r2, r0
 80064ea:	61e8      	str	r0, [r5, #28]
 80064ec:	b920      	cbnz	r0, 80064f8 <_Bfree+0x20>
 80064ee:	4b09      	ldr	r3, [pc, #36]	@ (8006514 <_Bfree+0x3c>)
 80064f0:	4809      	ldr	r0, [pc, #36]	@ (8006518 <_Bfree+0x40>)
 80064f2:	218f      	movs	r1, #143	@ 0x8f
 80064f4:	f000 fbfc 	bl	8006cf0 <__assert_func>
 80064f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064fc:	6006      	str	r6, [r0, #0]
 80064fe:	60c6      	str	r6, [r0, #12]
 8006500:	b13c      	cbz	r4, 8006512 <_Bfree+0x3a>
 8006502:	69eb      	ldr	r3, [r5, #28]
 8006504:	6862      	ldr	r2, [r4, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800650c:	6021      	str	r1, [r4, #0]
 800650e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	08007371 	.word	0x08007371
 8006518:	080073f1 	.word	0x080073f1

0800651c <__multadd>:
 800651c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006520:	690d      	ldr	r5, [r1, #16]
 8006522:	4607      	mov	r7, r0
 8006524:	460c      	mov	r4, r1
 8006526:	461e      	mov	r6, r3
 8006528:	f101 0c14 	add.w	ip, r1, #20
 800652c:	2000      	movs	r0, #0
 800652e:	f8dc 3000 	ldr.w	r3, [ip]
 8006532:	b299      	uxth	r1, r3
 8006534:	fb02 6101 	mla	r1, r2, r1, r6
 8006538:	0c1e      	lsrs	r6, r3, #16
 800653a:	0c0b      	lsrs	r3, r1, #16
 800653c:	fb02 3306 	mla	r3, r2, r6, r3
 8006540:	b289      	uxth	r1, r1
 8006542:	3001      	adds	r0, #1
 8006544:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006548:	4285      	cmp	r5, r0
 800654a:	f84c 1b04 	str.w	r1, [ip], #4
 800654e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006552:	dcec      	bgt.n	800652e <__multadd+0x12>
 8006554:	b30e      	cbz	r6, 800659a <__multadd+0x7e>
 8006556:	68a3      	ldr	r3, [r4, #8]
 8006558:	42ab      	cmp	r3, r5
 800655a:	dc19      	bgt.n	8006590 <__multadd+0x74>
 800655c:	6861      	ldr	r1, [r4, #4]
 800655e:	4638      	mov	r0, r7
 8006560:	3101      	adds	r1, #1
 8006562:	f7ff ff79 	bl	8006458 <_Balloc>
 8006566:	4680      	mov	r8, r0
 8006568:	b928      	cbnz	r0, 8006576 <__multadd+0x5a>
 800656a:	4602      	mov	r2, r0
 800656c:	4b0c      	ldr	r3, [pc, #48]	@ (80065a0 <__multadd+0x84>)
 800656e:	480d      	ldr	r0, [pc, #52]	@ (80065a4 <__multadd+0x88>)
 8006570:	21ba      	movs	r1, #186	@ 0xba
 8006572:	f000 fbbd 	bl	8006cf0 <__assert_func>
 8006576:	6922      	ldr	r2, [r4, #16]
 8006578:	3202      	adds	r2, #2
 800657a:	f104 010c 	add.w	r1, r4, #12
 800657e:	0092      	lsls	r2, r2, #2
 8006580:	300c      	adds	r0, #12
 8006582:	f000 fba7 	bl	8006cd4 <memcpy>
 8006586:	4621      	mov	r1, r4
 8006588:	4638      	mov	r0, r7
 800658a:	f7ff ffa5 	bl	80064d8 <_Bfree>
 800658e:	4644      	mov	r4, r8
 8006590:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006594:	3501      	adds	r5, #1
 8006596:	615e      	str	r6, [r3, #20]
 8006598:	6125      	str	r5, [r4, #16]
 800659a:	4620      	mov	r0, r4
 800659c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065a0:	080073e0 	.word	0x080073e0
 80065a4:	080073f1 	.word	0x080073f1

080065a8 <__hi0bits>:
 80065a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065ac:	4603      	mov	r3, r0
 80065ae:	bf36      	itet	cc
 80065b0:	0403      	lslcc	r3, r0, #16
 80065b2:	2000      	movcs	r0, #0
 80065b4:	2010      	movcc	r0, #16
 80065b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ba:	bf3c      	itt	cc
 80065bc:	021b      	lslcc	r3, r3, #8
 80065be:	3008      	addcc	r0, #8
 80065c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065c4:	bf3c      	itt	cc
 80065c6:	011b      	lslcc	r3, r3, #4
 80065c8:	3004      	addcc	r0, #4
 80065ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ce:	bf3c      	itt	cc
 80065d0:	009b      	lslcc	r3, r3, #2
 80065d2:	3002      	addcc	r0, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	db05      	blt.n	80065e4 <__hi0bits+0x3c>
 80065d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065dc:	f100 0001 	add.w	r0, r0, #1
 80065e0:	bf08      	it	eq
 80065e2:	2020      	moveq	r0, #32
 80065e4:	4770      	bx	lr

080065e6 <__lo0bits>:
 80065e6:	6803      	ldr	r3, [r0, #0]
 80065e8:	4602      	mov	r2, r0
 80065ea:	f013 0007 	ands.w	r0, r3, #7
 80065ee:	d00b      	beq.n	8006608 <__lo0bits+0x22>
 80065f0:	07d9      	lsls	r1, r3, #31
 80065f2:	d421      	bmi.n	8006638 <__lo0bits+0x52>
 80065f4:	0798      	lsls	r0, r3, #30
 80065f6:	bf49      	itett	mi
 80065f8:	085b      	lsrmi	r3, r3, #1
 80065fa:	089b      	lsrpl	r3, r3, #2
 80065fc:	2001      	movmi	r0, #1
 80065fe:	6013      	strmi	r3, [r2, #0]
 8006600:	bf5c      	itt	pl
 8006602:	6013      	strpl	r3, [r2, #0]
 8006604:	2002      	movpl	r0, #2
 8006606:	4770      	bx	lr
 8006608:	b299      	uxth	r1, r3
 800660a:	b909      	cbnz	r1, 8006610 <__lo0bits+0x2a>
 800660c:	0c1b      	lsrs	r3, r3, #16
 800660e:	2010      	movs	r0, #16
 8006610:	b2d9      	uxtb	r1, r3
 8006612:	b909      	cbnz	r1, 8006618 <__lo0bits+0x32>
 8006614:	3008      	adds	r0, #8
 8006616:	0a1b      	lsrs	r3, r3, #8
 8006618:	0719      	lsls	r1, r3, #28
 800661a:	bf04      	itt	eq
 800661c:	091b      	lsreq	r3, r3, #4
 800661e:	3004      	addeq	r0, #4
 8006620:	0799      	lsls	r1, r3, #30
 8006622:	bf04      	itt	eq
 8006624:	089b      	lsreq	r3, r3, #2
 8006626:	3002      	addeq	r0, #2
 8006628:	07d9      	lsls	r1, r3, #31
 800662a:	d403      	bmi.n	8006634 <__lo0bits+0x4e>
 800662c:	085b      	lsrs	r3, r3, #1
 800662e:	f100 0001 	add.w	r0, r0, #1
 8006632:	d003      	beq.n	800663c <__lo0bits+0x56>
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	4770      	bx	lr
 8006638:	2000      	movs	r0, #0
 800663a:	4770      	bx	lr
 800663c:	2020      	movs	r0, #32
 800663e:	4770      	bx	lr

08006640 <__i2b>:
 8006640:	b510      	push	{r4, lr}
 8006642:	460c      	mov	r4, r1
 8006644:	2101      	movs	r1, #1
 8006646:	f7ff ff07 	bl	8006458 <_Balloc>
 800664a:	4602      	mov	r2, r0
 800664c:	b928      	cbnz	r0, 800665a <__i2b+0x1a>
 800664e:	4b05      	ldr	r3, [pc, #20]	@ (8006664 <__i2b+0x24>)
 8006650:	4805      	ldr	r0, [pc, #20]	@ (8006668 <__i2b+0x28>)
 8006652:	f240 1145 	movw	r1, #325	@ 0x145
 8006656:	f000 fb4b 	bl	8006cf0 <__assert_func>
 800665a:	2301      	movs	r3, #1
 800665c:	6144      	str	r4, [r0, #20]
 800665e:	6103      	str	r3, [r0, #16]
 8006660:	bd10      	pop	{r4, pc}
 8006662:	bf00      	nop
 8006664:	080073e0 	.word	0x080073e0
 8006668:	080073f1 	.word	0x080073f1

0800666c <__multiply>:
 800666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006670:	4614      	mov	r4, r2
 8006672:	690a      	ldr	r2, [r1, #16]
 8006674:	6923      	ldr	r3, [r4, #16]
 8006676:	429a      	cmp	r2, r3
 8006678:	bfa8      	it	ge
 800667a:	4623      	movge	r3, r4
 800667c:	460f      	mov	r7, r1
 800667e:	bfa4      	itt	ge
 8006680:	460c      	movge	r4, r1
 8006682:	461f      	movge	r7, r3
 8006684:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006688:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800668c:	68a3      	ldr	r3, [r4, #8]
 800668e:	6861      	ldr	r1, [r4, #4]
 8006690:	eb0a 0609 	add.w	r6, sl, r9
 8006694:	42b3      	cmp	r3, r6
 8006696:	b085      	sub	sp, #20
 8006698:	bfb8      	it	lt
 800669a:	3101      	addlt	r1, #1
 800669c:	f7ff fedc 	bl	8006458 <_Balloc>
 80066a0:	b930      	cbnz	r0, 80066b0 <__multiply+0x44>
 80066a2:	4602      	mov	r2, r0
 80066a4:	4b44      	ldr	r3, [pc, #272]	@ (80067b8 <__multiply+0x14c>)
 80066a6:	4845      	ldr	r0, [pc, #276]	@ (80067bc <__multiply+0x150>)
 80066a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066ac:	f000 fb20 	bl	8006cf0 <__assert_func>
 80066b0:	f100 0514 	add.w	r5, r0, #20
 80066b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066b8:	462b      	mov	r3, r5
 80066ba:	2200      	movs	r2, #0
 80066bc:	4543      	cmp	r3, r8
 80066be:	d321      	bcc.n	8006704 <__multiply+0x98>
 80066c0:	f107 0114 	add.w	r1, r7, #20
 80066c4:	f104 0214 	add.w	r2, r4, #20
 80066c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80066cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80066d0:	9302      	str	r3, [sp, #8]
 80066d2:	1b13      	subs	r3, r2, r4
 80066d4:	3b15      	subs	r3, #21
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	3304      	adds	r3, #4
 80066dc:	f104 0715 	add.w	r7, r4, #21
 80066e0:	42ba      	cmp	r2, r7
 80066e2:	bf38      	it	cc
 80066e4:	2304      	movcc	r3, #4
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	9b02      	ldr	r3, [sp, #8]
 80066ea:	9103      	str	r1, [sp, #12]
 80066ec:	428b      	cmp	r3, r1
 80066ee:	d80c      	bhi.n	800670a <__multiply+0x9e>
 80066f0:	2e00      	cmp	r6, #0
 80066f2:	dd03      	ble.n	80066fc <__multiply+0x90>
 80066f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d05b      	beq.n	80067b4 <__multiply+0x148>
 80066fc:	6106      	str	r6, [r0, #16]
 80066fe:	b005      	add	sp, #20
 8006700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006704:	f843 2b04 	str.w	r2, [r3], #4
 8006708:	e7d8      	b.n	80066bc <__multiply+0x50>
 800670a:	f8b1 a000 	ldrh.w	sl, [r1]
 800670e:	f1ba 0f00 	cmp.w	sl, #0
 8006712:	d024      	beq.n	800675e <__multiply+0xf2>
 8006714:	f104 0e14 	add.w	lr, r4, #20
 8006718:	46a9      	mov	r9, r5
 800671a:	f04f 0c00 	mov.w	ip, #0
 800671e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006722:	f8d9 3000 	ldr.w	r3, [r9]
 8006726:	fa1f fb87 	uxth.w	fp, r7
 800672a:	b29b      	uxth	r3, r3
 800672c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006730:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006734:	f8d9 7000 	ldr.w	r7, [r9]
 8006738:	4463      	add	r3, ip
 800673a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800673e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006742:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006746:	b29b      	uxth	r3, r3
 8006748:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800674c:	4572      	cmp	r2, lr
 800674e:	f849 3b04 	str.w	r3, [r9], #4
 8006752:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006756:	d8e2      	bhi.n	800671e <__multiply+0xb2>
 8006758:	9b01      	ldr	r3, [sp, #4]
 800675a:	f845 c003 	str.w	ip, [r5, r3]
 800675e:	9b03      	ldr	r3, [sp, #12]
 8006760:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006764:	3104      	adds	r1, #4
 8006766:	f1b9 0f00 	cmp.w	r9, #0
 800676a:	d021      	beq.n	80067b0 <__multiply+0x144>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	f104 0c14 	add.w	ip, r4, #20
 8006772:	46ae      	mov	lr, r5
 8006774:	f04f 0a00 	mov.w	sl, #0
 8006778:	f8bc b000 	ldrh.w	fp, [ip]
 800677c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006780:	fb09 770b 	mla	r7, r9, fp, r7
 8006784:	4457      	add	r7, sl
 8006786:	b29b      	uxth	r3, r3
 8006788:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800678c:	f84e 3b04 	str.w	r3, [lr], #4
 8006790:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006794:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006798:	f8be 3000 	ldrh.w	r3, [lr]
 800679c:	fb09 330a 	mla	r3, r9, sl, r3
 80067a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80067a4:	4562      	cmp	r2, ip
 80067a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067aa:	d8e5      	bhi.n	8006778 <__multiply+0x10c>
 80067ac:	9f01      	ldr	r7, [sp, #4]
 80067ae:	51eb      	str	r3, [r5, r7]
 80067b0:	3504      	adds	r5, #4
 80067b2:	e799      	b.n	80066e8 <__multiply+0x7c>
 80067b4:	3e01      	subs	r6, #1
 80067b6:	e79b      	b.n	80066f0 <__multiply+0x84>
 80067b8:	080073e0 	.word	0x080073e0
 80067bc:	080073f1 	.word	0x080073f1

080067c0 <__pow5mult>:
 80067c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c4:	4615      	mov	r5, r2
 80067c6:	f012 0203 	ands.w	r2, r2, #3
 80067ca:	4607      	mov	r7, r0
 80067cc:	460e      	mov	r6, r1
 80067ce:	d007      	beq.n	80067e0 <__pow5mult+0x20>
 80067d0:	4c25      	ldr	r4, [pc, #148]	@ (8006868 <__pow5mult+0xa8>)
 80067d2:	3a01      	subs	r2, #1
 80067d4:	2300      	movs	r3, #0
 80067d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067da:	f7ff fe9f 	bl	800651c <__multadd>
 80067de:	4606      	mov	r6, r0
 80067e0:	10ad      	asrs	r5, r5, #2
 80067e2:	d03d      	beq.n	8006860 <__pow5mult+0xa0>
 80067e4:	69fc      	ldr	r4, [r7, #28]
 80067e6:	b97c      	cbnz	r4, 8006808 <__pow5mult+0x48>
 80067e8:	2010      	movs	r0, #16
 80067ea:	f7ff fd7f 	bl	80062ec <malloc>
 80067ee:	4602      	mov	r2, r0
 80067f0:	61f8      	str	r0, [r7, #28]
 80067f2:	b928      	cbnz	r0, 8006800 <__pow5mult+0x40>
 80067f4:	4b1d      	ldr	r3, [pc, #116]	@ (800686c <__pow5mult+0xac>)
 80067f6:	481e      	ldr	r0, [pc, #120]	@ (8006870 <__pow5mult+0xb0>)
 80067f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067fc:	f000 fa78 	bl	8006cf0 <__assert_func>
 8006800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006804:	6004      	str	r4, [r0, #0]
 8006806:	60c4      	str	r4, [r0, #12]
 8006808:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800680c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006810:	b94c      	cbnz	r4, 8006826 <__pow5mult+0x66>
 8006812:	f240 2171 	movw	r1, #625	@ 0x271
 8006816:	4638      	mov	r0, r7
 8006818:	f7ff ff12 	bl	8006640 <__i2b>
 800681c:	2300      	movs	r3, #0
 800681e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006822:	4604      	mov	r4, r0
 8006824:	6003      	str	r3, [r0, #0]
 8006826:	f04f 0900 	mov.w	r9, #0
 800682a:	07eb      	lsls	r3, r5, #31
 800682c:	d50a      	bpl.n	8006844 <__pow5mult+0x84>
 800682e:	4631      	mov	r1, r6
 8006830:	4622      	mov	r2, r4
 8006832:	4638      	mov	r0, r7
 8006834:	f7ff ff1a 	bl	800666c <__multiply>
 8006838:	4631      	mov	r1, r6
 800683a:	4680      	mov	r8, r0
 800683c:	4638      	mov	r0, r7
 800683e:	f7ff fe4b 	bl	80064d8 <_Bfree>
 8006842:	4646      	mov	r6, r8
 8006844:	106d      	asrs	r5, r5, #1
 8006846:	d00b      	beq.n	8006860 <__pow5mult+0xa0>
 8006848:	6820      	ldr	r0, [r4, #0]
 800684a:	b938      	cbnz	r0, 800685c <__pow5mult+0x9c>
 800684c:	4622      	mov	r2, r4
 800684e:	4621      	mov	r1, r4
 8006850:	4638      	mov	r0, r7
 8006852:	f7ff ff0b 	bl	800666c <__multiply>
 8006856:	6020      	str	r0, [r4, #0]
 8006858:	f8c0 9000 	str.w	r9, [r0]
 800685c:	4604      	mov	r4, r0
 800685e:	e7e4      	b.n	800682a <__pow5mult+0x6a>
 8006860:	4630      	mov	r0, r6
 8006862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006866:	bf00      	nop
 8006868:	0800744c 	.word	0x0800744c
 800686c:	08007371 	.word	0x08007371
 8006870:	080073f1 	.word	0x080073f1

08006874 <__lshift>:
 8006874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006878:	460c      	mov	r4, r1
 800687a:	6849      	ldr	r1, [r1, #4]
 800687c:	6923      	ldr	r3, [r4, #16]
 800687e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	4607      	mov	r7, r0
 8006886:	4691      	mov	r9, r2
 8006888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800688c:	f108 0601 	add.w	r6, r8, #1
 8006890:	42b3      	cmp	r3, r6
 8006892:	db0b      	blt.n	80068ac <__lshift+0x38>
 8006894:	4638      	mov	r0, r7
 8006896:	f7ff fddf 	bl	8006458 <_Balloc>
 800689a:	4605      	mov	r5, r0
 800689c:	b948      	cbnz	r0, 80068b2 <__lshift+0x3e>
 800689e:	4602      	mov	r2, r0
 80068a0:	4b28      	ldr	r3, [pc, #160]	@ (8006944 <__lshift+0xd0>)
 80068a2:	4829      	ldr	r0, [pc, #164]	@ (8006948 <__lshift+0xd4>)
 80068a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068a8:	f000 fa22 	bl	8006cf0 <__assert_func>
 80068ac:	3101      	adds	r1, #1
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	e7ee      	b.n	8006890 <__lshift+0x1c>
 80068b2:	2300      	movs	r3, #0
 80068b4:	f100 0114 	add.w	r1, r0, #20
 80068b8:	f100 0210 	add.w	r2, r0, #16
 80068bc:	4618      	mov	r0, r3
 80068be:	4553      	cmp	r3, sl
 80068c0:	db33      	blt.n	800692a <__lshift+0xb6>
 80068c2:	6920      	ldr	r0, [r4, #16]
 80068c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068c8:	f104 0314 	add.w	r3, r4, #20
 80068cc:	f019 091f 	ands.w	r9, r9, #31
 80068d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068d8:	d02b      	beq.n	8006932 <__lshift+0xbe>
 80068da:	f1c9 0e20 	rsb	lr, r9, #32
 80068de:	468a      	mov	sl, r1
 80068e0:	2200      	movs	r2, #0
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	fa00 f009 	lsl.w	r0, r0, r9
 80068e8:	4310      	orrs	r0, r2
 80068ea:	f84a 0b04 	str.w	r0, [sl], #4
 80068ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f2:	459c      	cmp	ip, r3
 80068f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80068f8:	d8f3      	bhi.n	80068e2 <__lshift+0x6e>
 80068fa:	ebac 0304 	sub.w	r3, ip, r4
 80068fe:	3b15      	subs	r3, #21
 8006900:	f023 0303 	bic.w	r3, r3, #3
 8006904:	3304      	adds	r3, #4
 8006906:	f104 0015 	add.w	r0, r4, #21
 800690a:	4584      	cmp	ip, r0
 800690c:	bf38      	it	cc
 800690e:	2304      	movcc	r3, #4
 8006910:	50ca      	str	r2, [r1, r3]
 8006912:	b10a      	cbz	r2, 8006918 <__lshift+0xa4>
 8006914:	f108 0602 	add.w	r6, r8, #2
 8006918:	3e01      	subs	r6, #1
 800691a:	4638      	mov	r0, r7
 800691c:	612e      	str	r6, [r5, #16]
 800691e:	4621      	mov	r1, r4
 8006920:	f7ff fdda 	bl	80064d8 <_Bfree>
 8006924:	4628      	mov	r0, r5
 8006926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692a:	f842 0f04 	str.w	r0, [r2, #4]!
 800692e:	3301      	adds	r3, #1
 8006930:	e7c5      	b.n	80068be <__lshift+0x4a>
 8006932:	3904      	subs	r1, #4
 8006934:	f853 2b04 	ldr.w	r2, [r3], #4
 8006938:	f841 2f04 	str.w	r2, [r1, #4]!
 800693c:	459c      	cmp	ip, r3
 800693e:	d8f9      	bhi.n	8006934 <__lshift+0xc0>
 8006940:	e7ea      	b.n	8006918 <__lshift+0xa4>
 8006942:	bf00      	nop
 8006944:	080073e0 	.word	0x080073e0
 8006948:	080073f1 	.word	0x080073f1

0800694c <__mcmp>:
 800694c:	690a      	ldr	r2, [r1, #16]
 800694e:	4603      	mov	r3, r0
 8006950:	6900      	ldr	r0, [r0, #16]
 8006952:	1a80      	subs	r0, r0, r2
 8006954:	b530      	push	{r4, r5, lr}
 8006956:	d10e      	bne.n	8006976 <__mcmp+0x2a>
 8006958:	3314      	adds	r3, #20
 800695a:	3114      	adds	r1, #20
 800695c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006960:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006964:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006968:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800696c:	4295      	cmp	r5, r2
 800696e:	d003      	beq.n	8006978 <__mcmp+0x2c>
 8006970:	d205      	bcs.n	800697e <__mcmp+0x32>
 8006972:	f04f 30ff 	mov.w	r0, #4294967295
 8006976:	bd30      	pop	{r4, r5, pc}
 8006978:	42a3      	cmp	r3, r4
 800697a:	d3f3      	bcc.n	8006964 <__mcmp+0x18>
 800697c:	e7fb      	b.n	8006976 <__mcmp+0x2a>
 800697e:	2001      	movs	r0, #1
 8006980:	e7f9      	b.n	8006976 <__mcmp+0x2a>
	...

08006984 <__mdiff>:
 8006984:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006988:	4689      	mov	r9, r1
 800698a:	4606      	mov	r6, r0
 800698c:	4611      	mov	r1, r2
 800698e:	4648      	mov	r0, r9
 8006990:	4614      	mov	r4, r2
 8006992:	f7ff ffdb 	bl	800694c <__mcmp>
 8006996:	1e05      	subs	r5, r0, #0
 8006998:	d112      	bne.n	80069c0 <__mdiff+0x3c>
 800699a:	4629      	mov	r1, r5
 800699c:	4630      	mov	r0, r6
 800699e:	f7ff fd5b 	bl	8006458 <_Balloc>
 80069a2:	4602      	mov	r2, r0
 80069a4:	b928      	cbnz	r0, 80069b2 <__mdiff+0x2e>
 80069a6:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa4 <__mdiff+0x120>)
 80069a8:	f240 2137 	movw	r1, #567	@ 0x237
 80069ac:	483e      	ldr	r0, [pc, #248]	@ (8006aa8 <__mdiff+0x124>)
 80069ae:	f000 f99f 	bl	8006cf0 <__assert_func>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069b8:	4610      	mov	r0, r2
 80069ba:	b003      	add	sp, #12
 80069bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c0:	bfbc      	itt	lt
 80069c2:	464b      	movlt	r3, r9
 80069c4:	46a1      	movlt	r9, r4
 80069c6:	4630      	mov	r0, r6
 80069c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069cc:	bfba      	itte	lt
 80069ce:	461c      	movlt	r4, r3
 80069d0:	2501      	movlt	r5, #1
 80069d2:	2500      	movge	r5, #0
 80069d4:	f7ff fd40 	bl	8006458 <_Balloc>
 80069d8:	4602      	mov	r2, r0
 80069da:	b918      	cbnz	r0, 80069e4 <__mdiff+0x60>
 80069dc:	4b31      	ldr	r3, [pc, #196]	@ (8006aa4 <__mdiff+0x120>)
 80069de:	f240 2145 	movw	r1, #581	@ 0x245
 80069e2:	e7e3      	b.n	80069ac <__mdiff+0x28>
 80069e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069e8:	6926      	ldr	r6, [r4, #16]
 80069ea:	60c5      	str	r5, [r0, #12]
 80069ec:	f109 0310 	add.w	r3, r9, #16
 80069f0:	f109 0514 	add.w	r5, r9, #20
 80069f4:	f104 0e14 	add.w	lr, r4, #20
 80069f8:	f100 0b14 	add.w	fp, r0, #20
 80069fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	46d9      	mov	r9, fp
 8006a08:	f04f 0c00 	mov.w	ip, #0
 8006a0c:	9b01      	ldr	r3, [sp, #4]
 8006a0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a16:	9301      	str	r3, [sp, #4]
 8006a18:	fa1f f38a 	uxth.w	r3, sl
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	b283      	uxth	r3, r0
 8006a20:	1acb      	subs	r3, r1, r3
 8006a22:	0c00      	lsrs	r0, r0, #16
 8006a24:	4463      	add	r3, ip
 8006a26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a34:	4576      	cmp	r6, lr
 8006a36:	f849 3b04 	str.w	r3, [r9], #4
 8006a3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a3e:	d8e5      	bhi.n	8006a0c <__mdiff+0x88>
 8006a40:	1b33      	subs	r3, r6, r4
 8006a42:	3b15      	subs	r3, #21
 8006a44:	f023 0303 	bic.w	r3, r3, #3
 8006a48:	3415      	adds	r4, #21
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	42a6      	cmp	r6, r4
 8006a4e:	bf38      	it	cc
 8006a50:	2304      	movcc	r3, #4
 8006a52:	441d      	add	r5, r3
 8006a54:	445b      	add	r3, fp
 8006a56:	461e      	mov	r6, r3
 8006a58:	462c      	mov	r4, r5
 8006a5a:	4544      	cmp	r4, r8
 8006a5c:	d30e      	bcc.n	8006a7c <__mdiff+0xf8>
 8006a5e:	f108 0103 	add.w	r1, r8, #3
 8006a62:	1b49      	subs	r1, r1, r5
 8006a64:	f021 0103 	bic.w	r1, r1, #3
 8006a68:	3d03      	subs	r5, #3
 8006a6a:	45a8      	cmp	r8, r5
 8006a6c:	bf38      	it	cc
 8006a6e:	2100      	movcc	r1, #0
 8006a70:	440b      	add	r3, r1
 8006a72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a76:	b191      	cbz	r1, 8006a9e <__mdiff+0x11a>
 8006a78:	6117      	str	r7, [r2, #16]
 8006a7a:	e79d      	b.n	80069b8 <__mdiff+0x34>
 8006a7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a80:	46e6      	mov	lr, ip
 8006a82:	0c08      	lsrs	r0, r1, #16
 8006a84:	fa1c fc81 	uxtah	ip, ip, r1
 8006a88:	4471      	add	r1, lr
 8006a8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a8e:	b289      	uxth	r1, r1
 8006a90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a94:	f846 1b04 	str.w	r1, [r6], #4
 8006a98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a9c:	e7dd      	b.n	8006a5a <__mdiff+0xd6>
 8006a9e:	3f01      	subs	r7, #1
 8006aa0:	e7e7      	b.n	8006a72 <__mdiff+0xee>
 8006aa2:	bf00      	nop
 8006aa4:	080073e0 	.word	0x080073e0
 8006aa8:	080073f1 	.word	0x080073f1

08006aac <__d2b>:
 8006aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ab0:	460f      	mov	r7, r1
 8006ab2:	2101      	movs	r1, #1
 8006ab4:	ec59 8b10 	vmov	r8, r9, d0
 8006ab8:	4616      	mov	r6, r2
 8006aba:	f7ff fccd 	bl	8006458 <_Balloc>
 8006abe:	4604      	mov	r4, r0
 8006ac0:	b930      	cbnz	r0, 8006ad0 <__d2b+0x24>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4b23      	ldr	r3, [pc, #140]	@ (8006b54 <__d2b+0xa8>)
 8006ac6:	4824      	ldr	r0, [pc, #144]	@ (8006b58 <__d2b+0xac>)
 8006ac8:	f240 310f 	movw	r1, #783	@ 0x30f
 8006acc:	f000 f910 	bl	8006cf0 <__assert_func>
 8006ad0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ad4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ad8:	b10d      	cbz	r5, 8006ade <__d2b+0x32>
 8006ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ae4:	d023      	beq.n	8006b2e <__d2b+0x82>
 8006ae6:	4668      	mov	r0, sp
 8006ae8:	9300      	str	r3, [sp, #0]
 8006aea:	f7ff fd7c 	bl	80065e6 <__lo0bits>
 8006aee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006af2:	b1d0      	cbz	r0, 8006b2a <__d2b+0x7e>
 8006af4:	f1c0 0320 	rsb	r3, r0, #32
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	430b      	orrs	r3, r1
 8006afe:	40c2      	lsrs	r2, r0
 8006b00:	6163      	str	r3, [r4, #20]
 8006b02:	9201      	str	r2, [sp, #4]
 8006b04:	9b01      	ldr	r3, [sp, #4]
 8006b06:	61a3      	str	r3, [r4, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	bf0c      	ite	eq
 8006b0c:	2201      	moveq	r2, #1
 8006b0e:	2202      	movne	r2, #2
 8006b10:	6122      	str	r2, [r4, #16]
 8006b12:	b1a5      	cbz	r5, 8006b3e <__d2b+0x92>
 8006b14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b18:	4405      	add	r5, r0
 8006b1a:	603d      	str	r5, [r7, #0]
 8006b1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b20:	6030      	str	r0, [r6, #0]
 8006b22:	4620      	mov	r0, r4
 8006b24:	b003      	add	sp, #12
 8006b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b2a:	6161      	str	r1, [r4, #20]
 8006b2c:	e7ea      	b.n	8006b04 <__d2b+0x58>
 8006b2e:	a801      	add	r0, sp, #4
 8006b30:	f7ff fd59 	bl	80065e6 <__lo0bits>
 8006b34:	9b01      	ldr	r3, [sp, #4]
 8006b36:	6163      	str	r3, [r4, #20]
 8006b38:	3020      	adds	r0, #32
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	e7e8      	b.n	8006b10 <__d2b+0x64>
 8006b3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b46:	6038      	str	r0, [r7, #0]
 8006b48:	6918      	ldr	r0, [r3, #16]
 8006b4a:	f7ff fd2d 	bl	80065a8 <__hi0bits>
 8006b4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b52:	e7e5      	b.n	8006b20 <__d2b+0x74>
 8006b54:	080073e0 	.word	0x080073e0
 8006b58:	080073f1 	.word	0x080073f1

08006b5c <__sflush_r>:
 8006b5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b64:	0716      	lsls	r6, r2, #28
 8006b66:	4605      	mov	r5, r0
 8006b68:	460c      	mov	r4, r1
 8006b6a:	d454      	bmi.n	8006c16 <__sflush_r+0xba>
 8006b6c:	684b      	ldr	r3, [r1, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	dc02      	bgt.n	8006b78 <__sflush_r+0x1c>
 8006b72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	dd48      	ble.n	8006c0a <__sflush_r+0xae>
 8006b78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	d045      	beq.n	8006c0a <__sflush_r+0xae>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b84:	682f      	ldr	r7, [r5, #0]
 8006b86:	6a21      	ldr	r1, [r4, #32]
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	d030      	beq.n	8006bee <__sflush_r+0x92>
 8006b8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b8e:	89a3      	ldrh	r3, [r4, #12]
 8006b90:	0759      	lsls	r1, r3, #29
 8006b92:	d505      	bpl.n	8006ba0 <__sflush_r+0x44>
 8006b94:	6863      	ldr	r3, [r4, #4]
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b9a:	b10b      	cbz	r3, 8006ba0 <__sflush_r+0x44>
 8006b9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b9e:	1ad2      	subs	r2, r2, r3
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ba4:	6a21      	ldr	r1, [r4, #32]
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	47b0      	blx	r6
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	d106      	bne.n	8006bbe <__sflush_r+0x62>
 8006bb0:	6829      	ldr	r1, [r5, #0]
 8006bb2:	291d      	cmp	r1, #29
 8006bb4:	d82b      	bhi.n	8006c0e <__sflush_r+0xb2>
 8006bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8006c60 <__sflush_r+0x104>)
 8006bb8:	410a      	asrs	r2, r1
 8006bba:	07d6      	lsls	r6, r2, #31
 8006bbc:	d427      	bmi.n	8006c0e <__sflush_r+0xb2>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	6062      	str	r2, [r4, #4]
 8006bc2:	04d9      	lsls	r1, r3, #19
 8006bc4:	6922      	ldr	r2, [r4, #16]
 8006bc6:	6022      	str	r2, [r4, #0]
 8006bc8:	d504      	bpl.n	8006bd4 <__sflush_r+0x78>
 8006bca:	1c42      	adds	r2, r0, #1
 8006bcc:	d101      	bne.n	8006bd2 <__sflush_r+0x76>
 8006bce:	682b      	ldr	r3, [r5, #0]
 8006bd0:	b903      	cbnz	r3, 8006bd4 <__sflush_r+0x78>
 8006bd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bd6:	602f      	str	r7, [r5, #0]
 8006bd8:	b1b9      	cbz	r1, 8006c0a <__sflush_r+0xae>
 8006bda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bde:	4299      	cmp	r1, r3
 8006be0:	d002      	beq.n	8006be8 <__sflush_r+0x8c>
 8006be2:	4628      	mov	r0, r5
 8006be4:	f7ff fb38 	bl	8006258 <_free_r>
 8006be8:	2300      	movs	r3, #0
 8006bea:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bec:	e00d      	b.n	8006c0a <__sflush_r+0xae>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	47b0      	blx	r6
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	1c50      	adds	r0, r2, #1
 8006bf8:	d1c9      	bne.n	8006b8e <__sflush_r+0x32>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d0c6      	beq.n	8006b8e <__sflush_r+0x32>
 8006c00:	2b1d      	cmp	r3, #29
 8006c02:	d001      	beq.n	8006c08 <__sflush_r+0xac>
 8006c04:	2b16      	cmp	r3, #22
 8006c06:	d11e      	bne.n	8006c46 <__sflush_r+0xea>
 8006c08:	602f      	str	r7, [r5, #0]
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	e022      	b.n	8006c54 <__sflush_r+0xf8>
 8006c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c12:	b21b      	sxth	r3, r3
 8006c14:	e01b      	b.n	8006c4e <__sflush_r+0xf2>
 8006c16:	690f      	ldr	r7, [r1, #16]
 8006c18:	2f00      	cmp	r7, #0
 8006c1a:	d0f6      	beq.n	8006c0a <__sflush_r+0xae>
 8006c1c:	0793      	lsls	r3, r2, #30
 8006c1e:	680e      	ldr	r6, [r1, #0]
 8006c20:	bf08      	it	eq
 8006c22:	694b      	ldreq	r3, [r1, #20]
 8006c24:	600f      	str	r7, [r1, #0]
 8006c26:	bf18      	it	ne
 8006c28:	2300      	movne	r3, #0
 8006c2a:	eba6 0807 	sub.w	r8, r6, r7
 8006c2e:	608b      	str	r3, [r1, #8]
 8006c30:	f1b8 0f00 	cmp.w	r8, #0
 8006c34:	dde9      	ble.n	8006c0a <__sflush_r+0xae>
 8006c36:	6a21      	ldr	r1, [r4, #32]
 8006c38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c3a:	4643      	mov	r3, r8
 8006c3c:	463a      	mov	r2, r7
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b0      	blx	r6
 8006c42:	2800      	cmp	r0, #0
 8006c44:	dc08      	bgt.n	8006c58 <__sflush_r+0xfc>
 8006c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	f04f 30ff 	mov.w	r0, #4294967295
 8006c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c58:	4407      	add	r7, r0
 8006c5a:	eba8 0800 	sub.w	r8, r8, r0
 8006c5e:	e7e7      	b.n	8006c30 <__sflush_r+0xd4>
 8006c60:	dfbffffe 	.word	0xdfbffffe

08006c64 <_fflush_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	690b      	ldr	r3, [r1, #16]
 8006c68:	4605      	mov	r5, r0
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	b913      	cbnz	r3, 8006c74 <_fflush_r+0x10>
 8006c6e:	2500      	movs	r5, #0
 8006c70:	4628      	mov	r0, r5
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	b118      	cbz	r0, 8006c7e <_fflush_r+0x1a>
 8006c76:	6a03      	ldr	r3, [r0, #32]
 8006c78:	b90b      	cbnz	r3, 8006c7e <_fflush_r+0x1a>
 8006c7a:	f7fe fba7 	bl	80053cc <__sinit>
 8006c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d0f3      	beq.n	8006c6e <_fflush_r+0xa>
 8006c86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c88:	07d0      	lsls	r0, r2, #31
 8006c8a:	d404      	bmi.n	8006c96 <_fflush_r+0x32>
 8006c8c:	0599      	lsls	r1, r3, #22
 8006c8e:	d402      	bmi.n	8006c96 <_fflush_r+0x32>
 8006c90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c92:	f7fe fc92 	bl	80055ba <__retarget_lock_acquire_recursive>
 8006c96:	4628      	mov	r0, r5
 8006c98:	4621      	mov	r1, r4
 8006c9a:	f7ff ff5f 	bl	8006b5c <__sflush_r>
 8006c9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ca0:	07da      	lsls	r2, r3, #31
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	d4e4      	bmi.n	8006c70 <_fflush_r+0xc>
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	059b      	lsls	r3, r3, #22
 8006caa:	d4e1      	bmi.n	8006c70 <_fflush_r+0xc>
 8006cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cae:	f7fe fc85 	bl	80055bc <__retarget_lock_release_recursive>
 8006cb2:	e7dd      	b.n	8006c70 <_fflush_r+0xc>

08006cb4 <_sbrk_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4d06      	ldr	r5, [pc, #24]	@ (8006cd0 <_sbrk_r+0x1c>)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4604      	mov	r4, r0
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	f7fa fe4e 	bl	8001960 <_sbrk>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_sbrk_r+0x1a>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_sbrk_r+0x1a>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	20000ae4 	.word	0x20000ae4

08006cd4 <memcpy>:
 8006cd4:	440a      	add	r2, r1
 8006cd6:	4291      	cmp	r1, r2
 8006cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cdc:	d100      	bne.n	8006ce0 <memcpy+0xc>
 8006cde:	4770      	bx	lr
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cea:	4291      	cmp	r1, r2
 8006cec:	d1f9      	bne.n	8006ce2 <memcpy+0xe>
 8006cee:	bd10      	pop	{r4, pc}

08006cf0 <__assert_func>:
 8006cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cf2:	4614      	mov	r4, r2
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	4b09      	ldr	r3, [pc, #36]	@ (8006d1c <__assert_func+0x2c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4605      	mov	r5, r0
 8006cfc:	68d8      	ldr	r0, [r3, #12]
 8006cfe:	b954      	cbnz	r4, 8006d16 <__assert_func+0x26>
 8006d00:	4b07      	ldr	r3, [pc, #28]	@ (8006d20 <__assert_func+0x30>)
 8006d02:	461c      	mov	r4, r3
 8006d04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d08:	9100      	str	r1, [sp, #0]
 8006d0a:	462b      	mov	r3, r5
 8006d0c:	4905      	ldr	r1, [pc, #20]	@ (8006d24 <__assert_func+0x34>)
 8006d0e:	f000 f841 	bl	8006d94 <fiprintf>
 8006d12:	f000 f851 	bl	8006db8 <abort>
 8006d16:	4b04      	ldr	r3, [pc, #16]	@ (8006d28 <__assert_func+0x38>)
 8006d18:	e7f4      	b.n	8006d04 <__assert_func+0x14>
 8006d1a:	bf00      	nop
 8006d1c:	20000018 	.word	0x20000018
 8006d20:	0800758d 	.word	0x0800758d
 8006d24:	0800755f 	.word	0x0800755f
 8006d28:	08007552 	.word	0x08007552

08006d2c <_calloc_r>:
 8006d2c:	b570      	push	{r4, r5, r6, lr}
 8006d2e:	fba1 5402 	umull	r5, r4, r1, r2
 8006d32:	b93c      	cbnz	r4, 8006d44 <_calloc_r+0x18>
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7ff fb03 	bl	8006340 <_malloc_r>
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	b928      	cbnz	r0, 8006d4a <_calloc_r+0x1e>
 8006d3e:	2600      	movs	r6, #0
 8006d40:	4630      	mov	r0, r6
 8006d42:	bd70      	pop	{r4, r5, r6, pc}
 8006d44:	220c      	movs	r2, #12
 8006d46:	6002      	str	r2, [r0, #0]
 8006d48:	e7f9      	b.n	8006d3e <_calloc_r+0x12>
 8006d4a:	462a      	mov	r2, r5
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	f7fe fbb6 	bl	80054be <memset>
 8006d52:	e7f5      	b.n	8006d40 <_calloc_r+0x14>

08006d54 <__ascii_mbtowc>:
 8006d54:	b082      	sub	sp, #8
 8006d56:	b901      	cbnz	r1, 8006d5a <__ascii_mbtowc+0x6>
 8006d58:	a901      	add	r1, sp, #4
 8006d5a:	b142      	cbz	r2, 8006d6e <__ascii_mbtowc+0x1a>
 8006d5c:	b14b      	cbz	r3, 8006d72 <__ascii_mbtowc+0x1e>
 8006d5e:	7813      	ldrb	r3, [r2, #0]
 8006d60:	600b      	str	r3, [r1, #0]
 8006d62:	7812      	ldrb	r2, [r2, #0]
 8006d64:	1e10      	subs	r0, r2, #0
 8006d66:	bf18      	it	ne
 8006d68:	2001      	movne	r0, #1
 8006d6a:	b002      	add	sp, #8
 8006d6c:	4770      	bx	lr
 8006d6e:	4610      	mov	r0, r2
 8006d70:	e7fb      	b.n	8006d6a <__ascii_mbtowc+0x16>
 8006d72:	f06f 0001 	mvn.w	r0, #1
 8006d76:	e7f8      	b.n	8006d6a <__ascii_mbtowc+0x16>

08006d78 <__ascii_wctomb>:
 8006d78:	4603      	mov	r3, r0
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	b141      	cbz	r1, 8006d90 <__ascii_wctomb+0x18>
 8006d7e:	2aff      	cmp	r2, #255	@ 0xff
 8006d80:	d904      	bls.n	8006d8c <__ascii_wctomb+0x14>
 8006d82:	228a      	movs	r2, #138	@ 0x8a
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8a:	4770      	bx	lr
 8006d8c:	700a      	strb	r2, [r1, #0]
 8006d8e:	2001      	movs	r0, #1
 8006d90:	4770      	bx	lr
	...

08006d94 <fiprintf>:
 8006d94:	b40e      	push	{r1, r2, r3}
 8006d96:	b503      	push	{r0, r1, lr}
 8006d98:	4601      	mov	r1, r0
 8006d9a:	ab03      	add	r3, sp, #12
 8006d9c:	4805      	ldr	r0, [pc, #20]	@ (8006db4 <fiprintf+0x20>)
 8006d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da2:	6800      	ldr	r0, [r0, #0]
 8006da4:	9301      	str	r3, [sp, #4]
 8006da6:	f000 f837 	bl	8006e18 <_vfiprintf_r>
 8006daa:	b002      	add	sp, #8
 8006dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db0:	b003      	add	sp, #12
 8006db2:	4770      	bx	lr
 8006db4:	20000018 	.word	0x20000018

08006db8 <abort>:
 8006db8:	b508      	push	{r3, lr}
 8006dba:	2006      	movs	r0, #6
 8006dbc:	f000 fa00 	bl	80071c0 <raise>
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	f7fa fd55 	bl	8001870 <_exit>

08006dc6 <__sfputc_r>:
 8006dc6:	6893      	ldr	r3, [r2, #8]
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	b410      	push	{r4}
 8006dce:	6093      	str	r3, [r2, #8]
 8006dd0:	da08      	bge.n	8006de4 <__sfputc_r+0x1e>
 8006dd2:	6994      	ldr	r4, [r2, #24]
 8006dd4:	42a3      	cmp	r3, r4
 8006dd6:	db01      	blt.n	8006ddc <__sfputc_r+0x16>
 8006dd8:	290a      	cmp	r1, #10
 8006dda:	d103      	bne.n	8006de4 <__sfputc_r+0x1e>
 8006ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de0:	f000 b932 	b.w	8007048 <__swbuf_r>
 8006de4:	6813      	ldr	r3, [r2, #0]
 8006de6:	1c58      	adds	r0, r3, #1
 8006de8:	6010      	str	r0, [r2, #0]
 8006dea:	7019      	strb	r1, [r3, #0]
 8006dec:	4608      	mov	r0, r1
 8006dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <__sfputs_r>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	4606      	mov	r6, r0
 8006df8:	460f      	mov	r7, r1
 8006dfa:	4614      	mov	r4, r2
 8006dfc:	18d5      	adds	r5, r2, r3
 8006dfe:	42ac      	cmp	r4, r5
 8006e00:	d101      	bne.n	8006e06 <__sfputs_r+0x12>
 8006e02:	2000      	movs	r0, #0
 8006e04:	e007      	b.n	8006e16 <__sfputs_r+0x22>
 8006e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0a:	463a      	mov	r2, r7
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f7ff ffda 	bl	8006dc6 <__sfputc_r>
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	d1f3      	bne.n	8006dfe <__sfputs_r+0xa>
 8006e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e18 <_vfiprintf_r>:
 8006e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e1c:	460d      	mov	r5, r1
 8006e1e:	b09d      	sub	sp, #116	@ 0x74
 8006e20:	4614      	mov	r4, r2
 8006e22:	4698      	mov	r8, r3
 8006e24:	4606      	mov	r6, r0
 8006e26:	b118      	cbz	r0, 8006e30 <_vfiprintf_r+0x18>
 8006e28:	6a03      	ldr	r3, [r0, #32]
 8006e2a:	b90b      	cbnz	r3, 8006e30 <_vfiprintf_r+0x18>
 8006e2c:	f7fe face 	bl	80053cc <__sinit>
 8006e30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e32:	07d9      	lsls	r1, r3, #31
 8006e34:	d405      	bmi.n	8006e42 <_vfiprintf_r+0x2a>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	059a      	lsls	r2, r3, #22
 8006e3a:	d402      	bmi.n	8006e42 <_vfiprintf_r+0x2a>
 8006e3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e3e:	f7fe fbbc 	bl	80055ba <__retarget_lock_acquire_recursive>
 8006e42:	89ab      	ldrh	r3, [r5, #12]
 8006e44:	071b      	lsls	r3, r3, #28
 8006e46:	d501      	bpl.n	8006e4c <_vfiprintf_r+0x34>
 8006e48:	692b      	ldr	r3, [r5, #16]
 8006e4a:	b99b      	cbnz	r3, 8006e74 <_vfiprintf_r+0x5c>
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f000 f938 	bl	80070c4 <__swsetup_r>
 8006e54:	b170      	cbz	r0, 8006e74 <_vfiprintf_r+0x5c>
 8006e56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e58:	07dc      	lsls	r4, r3, #31
 8006e5a:	d504      	bpl.n	8006e66 <_vfiprintf_r+0x4e>
 8006e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e60:	b01d      	add	sp, #116	@ 0x74
 8006e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e66:	89ab      	ldrh	r3, [r5, #12]
 8006e68:	0598      	lsls	r0, r3, #22
 8006e6a:	d4f7      	bmi.n	8006e5c <_vfiprintf_r+0x44>
 8006e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e6e:	f7fe fba5 	bl	80055bc <__retarget_lock_release_recursive>
 8006e72:	e7f3      	b.n	8006e5c <_vfiprintf_r+0x44>
 8006e74:	2300      	movs	r3, #0
 8006e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e78:	2320      	movs	r3, #32
 8006e7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e82:	2330      	movs	r3, #48	@ 0x30
 8006e84:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007034 <_vfiprintf_r+0x21c>
 8006e88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e8c:	f04f 0901 	mov.w	r9, #1
 8006e90:	4623      	mov	r3, r4
 8006e92:	469a      	mov	sl, r3
 8006e94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e98:	b10a      	cbz	r2, 8006e9e <_vfiprintf_r+0x86>
 8006e9a:	2a25      	cmp	r2, #37	@ 0x25
 8006e9c:	d1f9      	bne.n	8006e92 <_vfiprintf_r+0x7a>
 8006e9e:	ebba 0b04 	subs.w	fp, sl, r4
 8006ea2:	d00b      	beq.n	8006ebc <_vfiprintf_r+0xa4>
 8006ea4:	465b      	mov	r3, fp
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7ff ffa2 	bl	8006df4 <__sfputs_r>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	f000 80a7 	beq.w	8007004 <_vfiprintf_r+0x1ec>
 8006eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eb8:	445a      	add	r2, fp
 8006eba:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 809f 	beq.w	8007004 <_vfiprintf_r+0x1ec>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8006ecc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed0:	f10a 0a01 	add.w	sl, sl, #1
 8006ed4:	9304      	str	r3, [sp, #16]
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006edc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ede:	4654      	mov	r4, sl
 8006ee0:	2205      	movs	r2, #5
 8006ee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ee6:	4853      	ldr	r0, [pc, #332]	@ (8007034 <_vfiprintf_r+0x21c>)
 8006ee8:	f7f9 f982 	bl	80001f0 <memchr>
 8006eec:	9a04      	ldr	r2, [sp, #16]
 8006eee:	b9d8      	cbnz	r0, 8006f28 <_vfiprintf_r+0x110>
 8006ef0:	06d1      	lsls	r1, r2, #27
 8006ef2:	bf44      	itt	mi
 8006ef4:	2320      	movmi	r3, #32
 8006ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006efa:	0713      	lsls	r3, r2, #28
 8006efc:	bf44      	itt	mi
 8006efe:	232b      	movmi	r3, #43	@ 0x2b
 8006f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f04:	f89a 3000 	ldrb.w	r3, [sl]
 8006f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f0a:	d015      	beq.n	8006f38 <_vfiprintf_r+0x120>
 8006f0c:	9a07      	ldr	r2, [sp, #28]
 8006f0e:	4654      	mov	r4, sl
 8006f10:	2000      	movs	r0, #0
 8006f12:	f04f 0c0a 	mov.w	ip, #10
 8006f16:	4621      	mov	r1, r4
 8006f18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f1c:	3b30      	subs	r3, #48	@ 0x30
 8006f1e:	2b09      	cmp	r3, #9
 8006f20:	d94b      	bls.n	8006fba <_vfiprintf_r+0x1a2>
 8006f22:	b1b0      	cbz	r0, 8006f52 <_vfiprintf_r+0x13a>
 8006f24:	9207      	str	r2, [sp, #28]
 8006f26:	e014      	b.n	8006f52 <_vfiprintf_r+0x13a>
 8006f28:	eba0 0308 	sub.w	r3, r0, r8
 8006f2c:	fa09 f303 	lsl.w	r3, r9, r3
 8006f30:	4313      	orrs	r3, r2
 8006f32:	9304      	str	r3, [sp, #16]
 8006f34:	46a2      	mov	sl, r4
 8006f36:	e7d2      	b.n	8006ede <_vfiprintf_r+0xc6>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	1d19      	adds	r1, r3, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	9103      	str	r1, [sp, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bfbb      	ittet	lt
 8006f44:	425b      	neglt	r3, r3
 8006f46:	f042 0202 	orrlt.w	r2, r2, #2
 8006f4a:	9307      	strge	r3, [sp, #28]
 8006f4c:	9307      	strlt	r3, [sp, #28]
 8006f4e:	bfb8      	it	lt
 8006f50:	9204      	strlt	r2, [sp, #16]
 8006f52:	7823      	ldrb	r3, [r4, #0]
 8006f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f56:	d10a      	bne.n	8006f6e <_vfiprintf_r+0x156>
 8006f58:	7863      	ldrb	r3, [r4, #1]
 8006f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f5c:	d132      	bne.n	8006fc4 <_vfiprintf_r+0x1ac>
 8006f5e:	9b03      	ldr	r3, [sp, #12]
 8006f60:	1d1a      	adds	r2, r3, #4
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	9203      	str	r2, [sp, #12]
 8006f66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f6a:	3402      	adds	r4, #2
 8006f6c:	9305      	str	r3, [sp, #20]
 8006f6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007044 <_vfiprintf_r+0x22c>
 8006f72:	7821      	ldrb	r1, [r4, #0]
 8006f74:	2203      	movs	r2, #3
 8006f76:	4650      	mov	r0, sl
 8006f78:	f7f9 f93a 	bl	80001f0 <memchr>
 8006f7c:	b138      	cbz	r0, 8006f8e <_vfiprintf_r+0x176>
 8006f7e:	9b04      	ldr	r3, [sp, #16]
 8006f80:	eba0 000a 	sub.w	r0, r0, sl
 8006f84:	2240      	movs	r2, #64	@ 0x40
 8006f86:	4082      	lsls	r2, r0
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	3401      	adds	r4, #1
 8006f8c:	9304      	str	r3, [sp, #16]
 8006f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f92:	4829      	ldr	r0, [pc, #164]	@ (8007038 <_vfiprintf_r+0x220>)
 8006f94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f98:	2206      	movs	r2, #6
 8006f9a:	f7f9 f929 	bl	80001f0 <memchr>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d03f      	beq.n	8007022 <_vfiprintf_r+0x20a>
 8006fa2:	4b26      	ldr	r3, [pc, #152]	@ (800703c <_vfiprintf_r+0x224>)
 8006fa4:	bb1b      	cbnz	r3, 8006fee <_vfiprintf_r+0x1d6>
 8006fa6:	9b03      	ldr	r3, [sp, #12]
 8006fa8:	3307      	adds	r3, #7
 8006faa:	f023 0307 	bic.w	r3, r3, #7
 8006fae:	3308      	adds	r3, #8
 8006fb0:	9303      	str	r3, [sp, #12]
 8006fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb4:	443b      	add	r3, r7
 8006fb6:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fb8:	e76a      	b.n	8006e90 <_vfiprintf_r+0x78>
 8006fba:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	e7a8      	b.n	8006f16 <_vfiprintf_r+0xfe>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	3401      	adds	r4, #1
 8006fc8:	9305      	str	r3, [sp, #20]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	f04f 0c0a 	mov.w	ip, #10
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fd6:	3a30      	subs	r2, #48	@ 0x30
 8006fd8:	2a09      	cmp	r2, #9
 8006fda:	d903      	bls.n	8006fe4 <_vfiprintf_r+0x1cc>
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0c6      	beq.n	8006f6e <_vfiprintf_r+0x156>
 8006fe0:	9105      	str	r1, [sp, #20]
 8006fe2:	e7c4      	b.n	8006f6e <_vfiprintf_r+0x156>
 8006fe4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe8:	4604      	mov	r4, r0
 8006fea:	2301      	movs	r3, #1
 8006fec:	e7f0      	b.n	8006fd0 <_vfiprintf_r+0x1b8>
 8006fee:	ab03      	add	r3, sp, #12
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	462a      	mov	r2, r5
 8006ff4:	4b12      	ldr	r3, [pc, #72]	@ (8007040 <_vfiprintf_r+0x228>)
 8006ff6:	a904      	add	r1, sp, #16
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	f7fd fda3 	bl	8004b44 <_printf_float>
 8006ffe:	4607      	mov	r7, r0
 8007000:	1c78      	adds	r0, r7, #1
 8007002:	d1d6      	bne.n	8006fb2 <_vfiprintf_r+0x19a>
 8007004:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007006:	07d9      	lsls	r1, r3, #31
 8007008:	d405      	bmi.n	8007016 <_vfiprintf_r+0x1fe>
 800700a:	89ab      	ldrh	r3, [r5, #12]
 800700c:	059a      	lsls	r2, r3, #22
 800700e:	d402      	bmi.n	8007016 <_vfiprintf_r+0x1fe>
 8007010:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007012:	f7fe fad3 	bl	80055bc <__retarget_lock_release_recursive>
 8007016:	89ab      	ldrh	r3, [r5, #12]
 8007018:	065b      	lsls	r3, r3, #25
 800701a:	f53f af1f 	bmi.w	8006e5c <_vfiprintf_r+0x44>
 800701e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007020:	e71e      	b.n	8006e60 <_vfiprintf_r+0x48>
 8007022:	ab03      	add	r3, sp, #12
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	462a      	mov	r2, r5
 8007028:	4b05      	ldr	r3, [pc, #20]	@ (8007040 <_vfiprintf_r+0x228>)
 800702a:	a904      	add	r1, sp, #16
 800702c:	4630      	mov	r0, r6
 800702e:	f7fe f821 	bl	8005074 <_printf_i>
 8007032:	e7e4      	b.n	8006ffe <_vfiprintf_r+0x1e6>
 8007034:	0800768f 	.word	0x0800768f
 8007038:	08007699 	.word	0x08007699
 800703c:	08004b45 	.word	0x08004b45
 8007040:	08006df5 	.word	0x08006df5
 8007044:	08007695 	.word	0x08007695

08007048 <__swbuf_r>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	460e      	mov	r6, r1
 800704c:	4614      	mov	r4, r2
 800704e:	4605      	mov	r5, r0
 8007050:	b118      	cbz	r0, 800705a <__swbuf_r+0x12>
 8007052:	6a03      	ldr	r3, [r0, #32]
 8007054:	b90b      	cbnz	r3, 800705a <__swbuf_r+0x12>
 8007056:	f7fe f9b9 	bl	80053cc <__sinit>
 800705a:	69a3      	ldr	r3, [r4, #24]
 800705c:	60a3      	str	r3, [r4, #8]
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	071a      	lsls	r2, r3, #28
 8007062:	d501      	bpl.n	8007068 <__swbuf_r+0x20>
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	b943      	cbnz	r3, 800707a <__swbuf_r+0x32>
 8007068:	4621      	mov	r1, r4
 800706a:	4628      	mov	r0, r5
 800706c:	f000 f82a 	bl	80070c4 <__swsetup_r>
 8007070:	b118      	cbz	r0, 800707a <__swbuf_r+0x32>
 8007072:	f04f 37ff 	mov.w	r7, #4294967295
 8007076:	4638      	mov	r0, r7
 8007078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	6922      	ldr	r2, [r4, #16]
 800707e:	1a98      	subs	r0, r3, r2
 8007080:	6963      	ldr	r3, [r4, #20]
 8007082:	b2f6      	uxtb	r6, r6
 8007084:	4283      	cmp	r3, r0
 8007086:	4637      	mov	r7, r6
 8007088:	dc05      	bgt.n	8007096 <__swbuf_r+0x4e>
 800708a:	4621      	mov	r1, r4
 800708c:	4628      	mov	r0, r5
 800708e:	f7ff fde9 	bl	8006c64 <_fflush_r>
 8007092:	2800      	cmp	r0, #0
 8007094:	d1ed      	bne.n	8007072 <__swbuf_r+0x2a>
 8007096:	68a3      	ldr	r3, [r4, #8]
 8007098:	3b01      	subs	r3, #1
 800709a:	60a3      	str	r3, [r4, #8]
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	6022      	str	r2, [r4, #0]
 80070a2:	701e      	strb	r6, [r3, #0]
 80070a4:	6962      	ldr	r2, [r4, #20]
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d004      	beq.n	80070b6 <__swbuf_r+0x6e>
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	07db      	lsls	r3, r3, #31
 80070b0:	d5e1      	bpl.n	8007076 <__swbuf_r+0x2e>
 80070b2:	2e0a      	cmp	r6, #10
 80070b4:	d1df      	bne.n	8007076 <__swbuf_r+0x2e>
 80070b6:	4621      	mov	r1, r4
 80070b8:	4628      	mov	r0, r5
 80070ba:	f7ff fdd3 	bl	8006c64 <_fflush_r>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d0d9      	beq.n	8007076 <__swbuf_r+0x2e>
 80070c2:	e7d6      	b.n	8007072 <__swbuf_r+0x2a>

080070c4 <__swsetup_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	4b29      	ldr	r3, [pc, #164]	@ (800716c <__swsetup_r+0xa8>)
 80070c8:	4605      	mov	r5, r0
 80070ca:	6818      	ldr	r0, [r3, #0]
 80070cc:	460c      	mov	r4, r1
 80070ce:	b118      	cbz	r0, 80070d8 <__swsetup_r+0x14>
 80070d0:	6a03      	ldr	r3, [r0, #32]
 80070d2:	b90b      	cbnz	r3, 80070d8 <__swsetup_r+0x14>
 80070d4:	f7fe f97a 	bl	80053cc <__sinit>
 80070d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070dc:	0719      	lsls	r1, r3, #28
 80070de:	d422      	bmi.n	8007126 <__swsetup_r+0x62>
 80070e0:	06da      	lsls	r2, r3, #27
 80070e2:	d407      	bmi.n	80070f4 <__swsetup_r+0x30>
 80070e4:	2209      	movs	r2, #9
 80070e6:	602a      	str	r2, [r5, #0]
 80070e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070ec:	81a3      	strh	r3, [r4, #12]
 80070ee:	f04f 30ff 	mov.w	r0, #4294967295
 80070f2:	e033      	b.n	800715c <__swsetup_r+0x98>
 80070f4:	0758      	lsls	r0, r3, #29
 80070f6:	d512      	bpl.n	800711e <__swsetup_r+0x5a>
 80070f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070fa:	b141      	cbz	r1, 800710e <__swsetup_r+0x4a>
 80070fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007100:	4299      	cmp	r1, r3
 8007102:	d002      	beq.n	800710a <__swsetup_r+0x46>
 8007104:	4628      	mov	r0, r5
 8007106:	f7ff f8a7 	bl	8006258 <_free_r>
 800710a:	2300      	movs	r3, #0
 800710c:	6363      	str	r3, [r4, #52]	@ 0x34
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007114:	81a3      	strh	r3, [r4, #12]
 8007116:	2300      	movs	r3, #0
 8007118:	6063      	str	r3, [r4, #4]
 800711a:	6923      	ldr	r3, [r4, #16]
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	89a3      	ldrh	r3, [r4, #12]
 8007120:	f043 0308 	orr.w	r3, r3, #8
 8007124:	81a3      	strh	r3, [r4, #12]
 8007126:	6923      	ldr	r3, [r4, #16]
 8007128:	b94b      	cbnz	r3, 800713e <__swsetup_r+0x7a>
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007134:	d003      	beq.n	800713e <__swsetup_r+0x7a>
 8007136:	4621      	mov	r1, r4
 8007138:	4628      	mov	r0, r5
 800713a:	f000 f883 	bl	8007244 <__smakebuf_r>
 800713e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007142:	f013 0201 	ands.w	r2, r3, #1
 8007146:	d00a      	beq.n	800715e <__swsetup_r+0x9a>
 8007148:	2200      	movs	r2, #0
 800714a:	60a2      	str	r2, [r4, #8]
 800714c:	6962      	ldr	r2, [r4, #20]
 800714e:	4252      	negs	r2, r2
 8007150:	61a2      	str	r2, [r4, #24]
 8007152:	6922      	ldr	r2, [r4, #16]
 8007154:	b942      	cbnz	r2, 8007168 <__swsetup_r+0xa4>
 8007156:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800715a:	d1c5      	bne.n	80070e8 <__swsetup_r+0x24>
 800715c:	bd38      	pop	{r3, r4, r5, pc}
 800715e:	0799      	lsls	r1, r3, #30
 8007160:	bf58      	it	pl
 8007162:	6962      	ldrpl	r2, [r4, #20]
 8007164:	60a2      	str	r2, [r4, #8]
 8007166:	e7f4      	b.n	8007152 <__swsetup_r+0x8e>
 8007168:	2000      	movs	r0, #0
 800716a:	e7f7      	b.n	800715c <__swsetup_r+0x98>
 800716c:	20000018 	.word	0x20000018

08007170 <_raise_r>:
 8007170:	291f      	cmp	r1, #31
 8007172:	b538      	push	{r3, r4, r5, lr}
 8007174:	4605      	mov	r5, r0
 8007176:	460c      	mov	r4, r1
 8007178:	d904      	bls.n	8007184 <_raise_r+0x14>
 800717a:	2316      	movs	r3, #22
 800717c:	6003      	str	r3, [r0, #0]
 800717e:	f04f 30ff 	mov.w	r0, #4294967295
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007186:	b112      	cbz	r2, 800718e <_raise_r+0x1e>
 8007188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800718c:	b94b      	cbnz	r3, 80071a2 <_raise_r+0x32>
 800718e:	4628      	mov	r0, r5
 8007190:	f000 f830 	bl	80071f4 <_getpid_r>
 8007194:	4622      	mov	r2, r4
 8007196:	4601      	mov	r1, r0
 8007198:	4628      	mov	r0, r5
 800719a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800719e:	f000 b817 	b.w	80071d0 <_kill_r>
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d00a      	beq.n	80071bc <_raise_r+0x4c>
 80071a6:	1c59      	adds	r1, r3, #1
 80071a8:	d103      	bne.n	80071b2 <_raise_r+0x42>
 80071aa:	2316      	movs	r3, #22
 80071ac:	6003      	str	r3, [r0, #0]
 80071ae:	2001      	movs	r0, #1
 80071b0:	e7e7      	b.n	8007182 <_raise_r+0x12>
 80071b2:	2100      	movs	r1, #0
 80071b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071b8:	4620      	mov	r0, r4
 80071ba:	4798      	blx	r3
 80071bc:	2000      	movs	r0, #0
 80071be:	e7e0      	b.n	8007182 <_raise_r+0x12>

080071c0 <raise>:
 80071c0:	4b02      	ldr	r3, [pc, #8]	@ (80071cc <raise+0xc>)
 80071c2:	4601      	mov	r1, r0
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	f7ff bfd3 	b.w	8007170 <_raise_r>
 80071ca:	bf00      	nop
 80071cc:	20000018 	.word	0x20000018

080071d0 <_kill_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4d07      	ldr	r5, [pc, #28]	@ (80071f0 <_kill_r+0x20>)
 80071d4:	2300      	movs	r3, #0
 80071d6:	4604      	mov	r4, r0
 80071d8:	4608      	mov	r0, r1
 80071da:	4611      	mov	r1, r2
 80071dc:	602b      	str	r3, [r5, #0]
 80071de:	f7fa fb37 	bl	8001850 <_kill>
 80071e2:	1c43      	adds	r3, r0, #1
 80071e4:	d102      	bne.n	80071ec <_kill_r+0x1c>
 80071e6:	682b      	ldr	r3, [r5, #0]
 80071e8:	b103      	cbz	r3, 80071ec <_kill_r+0x1c>
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	bd38      	pop	{r3, r4, r5, pc}
 80071ee:	bf00      	nop
 80071f0:	20000ae4 	.word	0x20000ae4

080071f4 <_getpid_r>:
 80071f4:	f7fa bb24 	b.w	8001840 <_getpid>

080071f8 <__swhatbuf_r>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	460c      	mov	r4, r1
 80071fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007200:	2900      	cmp	r1, #0
 8007202:	b096      	sub	sp, #88	@ 0x58
 8007204:	4615      	mov	r5, r2
 8007206:	461e      	mov	r6, r3
 8007208:	da0d      	bge.n	8007226 <__swhatbuf_r+0x2e>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007210:	f04f 0100 	mov.w	r1, #0
 8007214:	bf14      	ite	ne
 8007216:	2340      	movne	r3, #64	@ 0x40
 8007218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800721c:	2000      	movs	r0, #0
 800721e:	6031      	str	r1, [r6, #0]
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	b016      	add	sp, #88	@ 0x58
 8007224:	bd70      	pop	{r4, r5, r6, pc}
 8007226:	466a      	mov	r2, sp
 8007228:	f000 f848 	bl	80072bc <_fstat_r>
 800722c:	2800      	cmp	r0, #0
 800722e:	dbec      	blt.n	800720a <__swhatbuf_r+0x12>
 8007230:	9901      	ldr	r1, [sp, #4]
 8007232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800723a:	4259      	negs	r1, r3
 800723c:	4159      	adcs	r1, r3
 800723e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007242:	e7eb      	b.n	800721c <__swhatbuf_r+0x24>

08007244 <__smakebuf_r>:
 8007244:	898b      	ldrh	r3, [r1, #12]
 8007246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007248:	079d      	lsls	r5, r3, #30
 800724a:	4606      	mov	r6, r0
 800724c:	460c      	mov	r4, r1
 800724e:	d507      	bpl.n	8007260 <__smakebuf_r+0x1c>
 8007250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	6123      	str	r3, [r4, #16]
 8007258:	2301      	movs	r3, #1
 800725a:	6163      	str	r3, [r4, #20]
 800725c:	b003      	add	sp, #12
 800725e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007260:	ab01      	add	r3, sp, #4
 8007262:	466a      	mov	r2, sp
 8007264:	f7ff ffc8 	bl	80071f8 <__swhatbuf_r>
 8007268:	9f00      	ldr	r7, [sp, #0]
 800726a:	4605      	mov	r5, r0
 800726c:	4639      	mov	r1, r7
 800726e:	4630      	mov	r0, r6
 8007270:	f7ff f866 	bl	8006340 <_malloc_r>
 8007274:	b948      	cbnz	r0, 800728a <__smakebuf_r+0x46>
 8007276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727a:	059a      	lsls	r2, r3, #22
 800727c:	d4ee      	bmi.n	800725c <__smakebuf_r+0x18>
 800727e:	f023 0303 	bic.w	r3, r3, #3
 8007282:	f043 0302 	orr.w	r3, r3, #2
 8007286:	81a3      	strh	r3, [r4, #12]
 8007288:	e7e2      	b.n	8007250 <__smakebuf_r+0xc>
 800728a:	89a3      	ldrh	r3, [r4, #12]
 800728c:	6020      	str	r0, [r4, #0]
 800728e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	9b01      	ldr	r3, [sp, #4]
 8007296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800729a:	b15b      	cbz	r3, 80072b4 <__smakebuf_r+0x70>
 800729c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072a0:	4630      	mov	r0, r6
 80072a2:	f000 f81d 	bl	80072e0 <_isatty_r>
 80072a6:	b128      	cbz	r0, 80072b4 <__smakebuf_r+0x70>
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	f023 0303 	bic.w	r3, r3, #3
 80072ae:	f043 0301 	orr.w	r3, r3, #1
 80072b2:	81a3      	strh	r3, [r4, #12]
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	431d      	orrs	r5, r3
 80072b8:	81a5      	strh	r5, [r4, #12]
 80072ba:	e7cf      	b.n	800725c <__smakebuf_r+0x18>

080072bc <_fstat_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	@ (80072dc <_fstat_r+0x20>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	f7fa fb21 	bl	8001910 <_fstat>
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	d102      	bne.n	80072d8 <_fstat_r+0x1c>
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	b103      	cbz	r3, 80072d8 <_fstat_r+0x1c>
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
 80072da:	bf00      	nop
 80072dc:	20000ae4 	.word	0x20000ae4

080072e0 <_isatty_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d06      	ldr	r5, [pc, #24]	@ (80072fc <_isatty_r+0x1c>)
 80072e4:	2300      	movs	r3, #0
 80072e6:	4604      	mov	r4, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	f7fa fb20 	bl	8001930 <_isatty>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d102      	bne.n	80072fa <_isatty_r+0x1a>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b103      	cbz	r3, 80072fa <_isatty_r+0x1a>
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	20000ae4 	.word	0x20000ae4

08007300 <_init>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	bf00      	nop
 8007304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007306:	bc08      	pop	{r3}
 8007308:	469e      	mov	lr, r3
 800730a:	4770      	bx	lr

0800730c <_fini>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	bf00      	nop
 8007310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007312:	bc08      	pop	{r3}
 8007314:	469e      	mov	lr, r3
 8007316:	4770      	bx	lr
