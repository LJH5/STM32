
test_7_TCP_echo_server_with_lwIP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001252c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fcc  080126dc  080126dc  000226dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080156a8  080156a8  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  080156a8  080156a8  000256a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080156b0  080156b0  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080156b0  080156b0  000256b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080156b4  080156b4  000256b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080156b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          000089dc  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008a68  20008a68  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020683  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000058f4  00000000  00000000  00050782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001810  00000000  00000000  00056078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001336  00000000  00000000  00057888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003103e  00000000  00000000  00058bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000296a9  00000000  00000000  00089bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eea2c  00000000  00000000  000b32a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006b8c  00000000  00000000  001a1cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  001a8860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080126c4 	.word	0x080126c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	080126c4 	.word	0x080126c4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fede 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f80e 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f8ce 	bl	8000738 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800059c:	f000 f874 	bl	8000688 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a0:	f000 f89c 	bl	80006dc <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005a4:	f003 fe82 	bl	80042ac <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  tcp_echoserver_init();
 80005a8:	f000 fb4a 	bl	8000c40 <tcp_echoserver_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	MX_LWIP_Process();
 80005ac:	f003 fed0 	bl	8004350 <MX_LWIP_Process>
 80005b0:	e7fc      	b.n	80005ac <main+0x20>
	...

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f011 f9d1 	bl	801196a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b28      	ldr	r3, [pc, #160]	; (8000680 <SystemClock_Config+0xcc>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <SystemClock_Config+0xcc>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b22      	ldr	r3, [pc, #136]	; (8000684 <SystemClock_Config+0xd0>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <SystemClock_Config+0xd0>)
 80005fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000610:	2301      	movs	r3, #1
 8000612:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000614:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061a:	2302      	movs	r3, #2
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000624:	2304      	movs	r3, #4
 8000626:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000628:	23a8      	movs	r3, #168	; 0xa8
 800062a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062c:	2302      	movs	r3, #2
 800062e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000630:	2307      	movs	r3, #7
 8000632:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fbdb 	bl	8002df4 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000644:	f000 f926 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000654:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2105      	movs	r1, #5
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fe3c 	bl	80032e4 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000672:	f000 f90f 	bl	8000894 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART3_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 8000694:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART3_UART_Init+0x4c>)
 80006c0:	f003 f830 	bl	8003724 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f8e3 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000a8 	.word	0x200000a8
 80006d8:	40004800 	.word	0x40004800

080006dc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000702:	2201      	movs	r2, #1
 8000704:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000714:	2201      	movs	r2, #1
 8000716:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000720:	f002 fa59 	bl	8002bd6 <HAL_PCD_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800072a:	f000 f8b3 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000f0 	.word	0x200000f0

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08c      	sub	sp, #48	; 0x30
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	4b4c      	ldr	r3, [pc, #304]	; (8000884 <MX_GPIO_Init+0x14c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a4b      	ldr	r2, [pc, #300]	; (8000884 <MX_GPIO_Init+0x14c>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b49      	ldr	r3, [pc, #292]	; (8000884 <MX_GPIO_Init+0x14c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	4b45      	ldr	r3, [pc, #276]	; (8000884 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a44      	ldr	r2, [pc, #272]	; (8000884 <MX_GPIO_Init+0x14c>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b42      	ldr	r3, [pc, #264]	; (8000884 <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a3d      	ldr	r2, [pc, #244]	; (8000884 <MX_GPIO_Init+0x14c>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b37      	ldr	r3, [pc, #220]	; (8000884 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a36      	ldr	r2, [pc, #216]	; (8000884 <MX_GPIO_Init+0x14c>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b34      	ldr	r3, [pc, #208]	; (8000884 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b30      	ldr	r3, [pc, #192]	; (8000884 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a2f      	ldr	r2, [pc, #188]	; (8000884 <MX_GPIO_Init+0x14c>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b29      	ldr	r3, [pc, #164]	; (8000884 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a28      	ldr	r2, [pc, #160]	; (8000884 <MX_GPIO_Init+0x14c>)
 80007e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007fc:	4822      	ldr	r0, [pc, #136]	; (8000888 <MX_GPIO_Init+0x150>)
 80007fe:	f002 f9d1 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	4821      	ldr	r0, [pc, #132]	; (800088c <MX_GPIO_Init+0x154>)
 8000808:	f002 f9cc 	bl	8002ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800080c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000812:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	481b      	ldr	r0, [pc, #108]	; (8000890 <MX_GPIO_Init+0x158>)
 8000824:	f002 f812 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000828:	f244 0381 	movw	r3, #16513	; 0x4081
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_GPIO_Init+0x150>)
 8000842:	f002 f803 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	480b      	ldr	r0, [pc, #44]	; (800088c <MX_GPIO_Init+0x154>)
 800085e:	f001 fff5 	bl	800284c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_GPIO_Init+0x154>)
 8000876:	f001 ffe9 	bl	800284c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087a:	bf00      	nop
 800087c:	3730      	adds	r7, #48	; 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	40020400 	.word	0x40020400
 800088c:	40021800 	.word	0x40021800
 8000890:	40020800 	.word	0x40020800

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	; (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	; 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a19      	ldr	r2, [pc, #100]	; (8000974 <HAL_UART_MspInit+0x84>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d12c      	bne.n	800096c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x88>)
 800091c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a10      	ldr	r2, [pc, #64]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_UART_MspInit+0x88>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800094a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800095c:	2307      	movs	r3, #7
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_UART_MspInit+0x8c>)
 8000968:	f001 ff70 	bl	800284c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40004800 	.word	0x40004800
 8000978:	40023800 	.word	0x40023800
 800097c:	40020c00 	.word	0x40020c00

08000980 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009a0:	d13f      	bne.n	8000a22 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <HAL_PCD_MspInit+0xac>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a20      	ldr	r2, [pc, #128]	; (8000a2c <HAL_PCD_MspInit+0xac>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <HAL_PCD_MspInit+0xac>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009be:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d0:	230a      	movs	r3, #10
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4815      	ldr	r0, [pc, #84]	; (8000a30 <HAL_PCD_MspInit+0xb0>)
 80009dc:	f001 ff36 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	480e      	ldr	r0, [pc, #56]	; (8000a30 <HAL_PCD_MspInit+0xb0>)
 80009f6:	f001 ff29 	bl	800284c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_PCD_MspInit+0xac>)
 80009fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <HAL_PCD_MspInit+0xac>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6353      	str	r3, [r2, #52]	; 0x34
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_PCD_MspInit+0xac>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_PCD_MspInit+0xac>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_PCD_MspInit+0xac>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a38:	e7fe      	b.n	8000a38 <NMI_Handler+0x4>

08000a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <MemManage_Handler+0x4>

08000a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <BusFault_Handler+0x4>

08000a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <UsageFault_Handler+0x4>

08000a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 fcb8 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return 1;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_kill>:

int _kill(int pid, int sig)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <_kill+0x20>)
 8000aa4:	2216      	movs	r2, #22
 8000aa6:	601a      	str	r2, [r3, #0]
  return -1;
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	20008a58 	.word	0x20008a58

08000abc <_exit>:

void _exit (int status)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff ffe5 	bl	8000a98 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ace:	e7fe      	b.n	8000ace <_exit+0x12>

08000ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
  }

  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
  }
  return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d205      	bcs.n	8000be8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <_sbrk+0x6c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	371c      	adds	r7, #28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	20030000 	.word	0x20030000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	200005d4 	.word	0x200005d4
 8000c14:	20008a68 	.word	0x20008a68
 8000c18:	20008a58 	.word	0x20008a58

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <tcp_echoserver_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_echoserver_init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 8000c46:	f007 f901 	bl	8007e4c <tcp_new>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <tcp_echoserver_init+0x6c>)
 8000c4e:	6013      	str	r3, [r2, #0]

  ip_addr_t myIPADDR;
  IP_ADDR4(&myIPADDR, 192, 168, 1, 194);
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <tcp_echoserver_init+0x70>)
 8000c52:	603b      	str	r3, [r7, #0]

  if (tcp_echoserver_pcb != NULL)
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <tcp_echoserver_init+0x6c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d022      	beq.n	8000ca2 <tcp_echoserver_init+0x62>
  {
    err_t err;
    
    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, &myIPADDR, 7);
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <tcp_echoserver_init+0x6c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4639      	mov	r1, r7
 8000c62:	2207      	movs	r2, #7
 8000c64:	4618      	mov	r0, r3
 8000c66:	f006 f84d 	bl	8006d04 <tcp_bind>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
    
    if (err == ERR_OK)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10f      	bne.n	8000c96 <tcp_echoserver_init+0x56>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <tcp_echoserver_init+0x6c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	21ff      	movs	r1, #255	; 0xff
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f006 f8f9 	bl	8006e74 <tcp_listen_with_backlog>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <tcp_echoserver_init+0x6c>)
 8000c86:	6013      	str	r3, [r2, #0]
      
      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_echoserver_accept);
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <tcp_echoserver_init+0x6c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4909      	ldr	r1, [pc, #36]	; (8000cb4 <tcp_echoserver_init+0x74>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f007 f95c 	bl	8007f4c <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8000c94:	e005      	b.n	8000ca2 <tcp_echoserver_init+0x62>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <tcp_echoserver_init+0x6c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f004 fc0b 	bl	80054b8 <memp_free>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200005d8 	.word	0x200005d8
 8000cb0:	c201a8c0 	.word	0xc201a8c0
 8000cb4:	08000cb9 	.word	0x08000cb9

08000cb8 <tcp_echoserver_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used 
  * @retval err_t: error status
  */
static err_t tcp_echoserver_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	68b8      	ldr	r0, [r7, #8]
 8000cca:	f006 fecd 	bl	8007a68 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 8000cce:	200c      	movs	r0, #12
 8000cd0:	f004 f9f2 	bl	80050b8 <mem_malloc>
 8000cd4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d01f      	beq.n	8000d1c <tcp_echoserver_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	2200      	movs	r2, #0
 8000cec:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
    
    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000cf4:	6939      	ldr	r1, [r7, #16]
 8000cf6:	68b8      	ldr	r0, [r7, #8]
 8000cf8:	f007 f8b0 	bl	8007e5c <tcp_arg>
    
    /* initialize lwip tcp_recv callback function for newpcb  */ 
    tcp_recv(newpcb, tcp_echoserver_recv);
 8000cfc:	490d      	ldr	r1, [pc, #52]	; (8000d34 <tcp_echoserver_accept+0x7c>)
 8000cfe:	68b8      	ldr	r0, [r7, #8]
 8000d00:	f007 f8be 	bl	8007e80 <tcp_recv>
    
    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_echoserver_error);
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <tcp_echoserver_accept+0x80>)
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f007 f8fe 	bl	8007f08 <tcp_err>
    
    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_echoserver_poll, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	490b      	ldr	r1, [pc, #44]	; (8000d3c <tcp_echoserver_accept+0x84>)
 8000d10:	68b8      	ldr	r0, [r7, #8]
 8000d12:	f007 f933 	bl	8007f7c <tcp_poll>
    
    ret_err = ERR_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	75fb      	strb	r3, [r7, #23]
 8000d1a:	e005      	b.n	8000d28 <tcp_echoserver_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_echoserver_connection_close(newpcb, es);
 8000d1c:	6939      	ldr	r1, [r7, #16]
 8000d1e:	68b8      	ldr	r0, [r7, #8]
 8000d20:	f000 f965 	bl	8000fee <tcp_echoserver_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000d24:	23ff      	movs	r3, #255	; 0xff
 8000d26:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;  
 8000d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08000d41 	.word	0x08000d41
 8000d38:	08000e75 	.word	0x08000e75
 8000d3c:	08000e99 	.word	0x08000e99

08000d40 <tcp_echoserver_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_echoserver_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b088      	sub	sp, #32
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <tcp_echoserver_recv+0x20>
 8000d54:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <tcp_echoserver_recv+0x124>)
 8000d56:	22b0      	movs	r2, #176	; 0xb0
 8000d58:	4943      	ldr	r1, [pc, #268]	; (8000e68 <tcp_echoserver_recv+0x128>)
 8000d5a:	4844      	ldr	r0, [pc, #272]	; (8000e6c <tcp_echoserver_recv+0x12c>)
 8000d5c:	f010 fda0 	bl	80118a0 <iprintf>
  
  es = (struct tcp_echoserver_struct *)arg;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	61bb      	str	r3, [r7, #24]
  
  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d116      	bne.n	8000d98 <tcp_echoserver_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d104      	bne.n	8000d82 <tcp_echoserver_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_echoserver_connection_close(tpcb, es);
 8000d78:	69b9      	ldr	r1, [r7, #24]
 8000d7a:	68b8      	ldr	r0, [r7, #8]
 8000d7c:	f000 f937 	bl	8000fee <tcp_echoserver_connection_close>
 8000d80:	e007      	b.n	8000d92 <tcp_echoserver_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000d82:	493b      	ldr	r1, [pc, #236]	; (8000e70 <tcp_echoserver_recv+0x130>)
 8000d84:	68b8      	ldr	r0, [r7, #8]
 8000d86:	f007 f89d 	bl	8007ec4 <tcp_sent>
      
      /* send remaining data*/
      tcp_echoserver_send(tpcb, es);
 8000d8a:	69b9      	ldr	r1, [r7, #24]
 8000d8c:	68b8      	ldr	r0, [r7, #8]
 8000d8e:	f000 f8db 	bl	8000f48 <tcp_echoserver_send>
    }
    ret_err = ERR_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	77fb      	strb	r3, [r7, #31]
 8000d96:	e05f      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }   
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000d98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00b      	beq.n	8000db8 <tcp_echoserver_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d005      	beq.n	8000db2 <tcp_echoserver_recv+0x72>
    {
      es->p = NULL;
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f005 fa05 	bl	80061bc <pbuf_free>
    }
    ret_err = err;
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	77fb      	strb	r3, [r7, #31]
 8000db6:	e04f      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d110      	bne.n	8000de2 <tcp_echoserver_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	701a      	strb	r2, [r3, #0]
    
    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]
    
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000dcc:	4928      	ldr	r1, [pc, #160]	; (8000e70 <tcp_echoserver_recv+0x130>)
 8000dce:	68b8      	ldr	r0, [r7, #8]
 8000dd0:	f007 f878 	bl	8007ec4 <tcp_sent>
    
    /* send back the received data (echo) */
    tcp_echoserver_send(tpcb, es);
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	68b8      	ldr	r0, [r7, #8]
 8000dd8:	f000 f8b6 	bl	8000f48 <tcp_echoserver_send>
    
    ret_err = ERR_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	77fb      	strb	r3, [r7, #31]
 8000de0:	e03a      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d115      	bne.n	8000e16 <tcp_echoserver_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d107      	bne.n	8000e02 <tcp_echoserver_recv+0xc2>
    {
      es->p = p;
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	609a      	str	r2, [r3, #8]
  
      /* send back received data */
      tcp_echoserver_send(tpcb, es);
 8000df8:	69b9      	ldr	r1, [r7, #24]
 8000dfa:	68b8      	ldr	r0, [r7, #8]
 8000dfc:	f000 f8a4 	bl	8000f48 <tcp_echoserver_send>
 8000e00:	e006      	b.n	8000e10 <tcp_echoserver_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f005 faee 	bl	80063ec <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	77fb      	strb	r3, [r7, #31]
 8000e14:	e020      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d10e      	bne.n	8000e3c <tcp_echoserver_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	891b      	ldrh	r3, [r3, #8]
 8000e22:	4619      	mov	r1, r3
 8000e24:	68b8      	ldr	r0, [r7, #8]
 8000e26:	f006 f93b 	bl	80070a0 <tcp_recved>
    es->p = NULL;
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f005 f9c3 	bl	80061bc <pbuf_free>
    ret_err = ERR_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	77fb      	strb	r3, [r7, #31]
 8000e3a:	e00d      	b.n	8000e58 <tcp_echoserver_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	891b      	ldrh	r3, [r3, #8]
 8000e40:	4619      	mov	r1, r3
 8000e42:	68b8      	ldr	r0, [r7, #8]
 8000e44:	f006 f92c 	bl	80070a0 <tcp_recved>
    es->p = NULL;
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f005 f9b4 	bl	80061bc <pbuf_free>
    ret_err = ERR_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000e58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3720      	adds	r7, #32
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	080126dc 	.word	0x080126dc
 8000e68:	080126fc 	.word	0x080126fc
 8000e6c:	08012708 	.word	0x08012708
 8000e70:	08000ef9 	.word	0x08000ef9

08000e74 <tcp_echoserver_error>:
  * @param  arg: pointer on argument parameter 
  * @param  err: not used
  * @retval None
  */
static void tcp_echoserver_error(void *arg, err_t err)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <tcp_echoserver_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f003 ffae 	bl	8004dec <mem_free>
  }
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <tcp_echoserver_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_echoserver_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d017      	beq.n	8000edc <tcp_echoserver_poll+0x44>
  {
    if (es->p != NULL)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d008      	beq.n	8000ec6 <tcp_echoserver_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_echoserver_sent);
 8000eb4:	490f      	ldr	r1, [pc, #60]	; (8000ef4 <tcp_echoserver_poll+0x5c>)
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f007 f804 	bl	8007ec4 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_echoserver_send(tpcb, es);
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6838      	ldr	r0, [r7, #0]
 8000ec0:	f000 f842 	bl	8000f48 <tcp_echoserver_send>
 8000ec4:	e007      	b.n	8000ed6 <tcp_echoserver_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d103      	bne.n	8000ed6 <tcp_echoserver_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_echoserver_connection_close(tpcb, es);
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	f000 f88c 	bl	8000fee <tcp_echoserver_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
 8000eda:	e004      	b.n	8000ee6 <tcp_echoserver_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000edc:	6838      	ldr	r0, [r7, #0]
 8000ede:	f005 ff05 	bl	8006cec <tcp_abort>
    ret_err = ERR_ABRT;
 8000ee2:	23f3      	movs	r3, #243	; 0xf3
 8000ee4:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08000ef9 	.word	0x08000ef9

08000ef8 <tcp_echoserver_sent>:
  *         is received from remote host for sent data) 
  * @param  None
  * @retval None
  */
static err_t tcp_echoserver_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	4613      	mov	r3, r2
 8000f04:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	705a      	strb	r2, [r3, #1]
  
  if(es->p != NULL)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d008      	beq.n	8000f2a <tcp_echoserver_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_echoserver_sent);
 8000f18:	490a      	ldr	r1, [pc, #40]	; (8000f44 <tcp_echoserver_sent+0x4c>)
 8000f1a:	68b8      	ldr	r0, [r7, #8]
 8000f1c:	f006 ffd2 	bl	8007ec4 <tcp_sent>
    tcp_echoserver_send(tpcb, es);
 8000f20:	6979      	ldr	r1, [r7, #20]
 8000f22:	68b8      	ldr	r0, [r7, #8]
 8000f24:	f000 f810 	bl	8000f48 <tcp_echoserver_send>
 8000f28:	e007      	b.n	8000f3a <tcp_echoserver_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d103      	bne.n	8000f3a <tcp_echoserver_sent+0x42>
      tcp_echoserver_connection_close(tpcb, es);
 8000f32:	6979      	ldr	r1, [r7, #20]
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f000 f85a 	bl	8000fee <tcp_echoserver_connection_close>
  }
  return ERR_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	08000ef9 	.word	0x08000ef9

08000f48 <tcp_echoserver_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	75fb      	strb	r3, [r7, #23]
 
  while ((wr_err == ERR_OK) &&
 8000f56:	e036      	b.n	8000fc6 <tcp_echoserver_send+0x7e>
         (es->p != NULL) && 
         (es->p->len <= tcp_sndbuf(tpcb)))
  {
    
    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	6859      	ldr	r1, [r3, #4]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	895a      	ldrh	r2, [r3, #10]
 8000f66:	2301      	movs	r3, #1
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f009 feb9 	bl	800ace0 <tcp_write>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	75fb      	strb	r3, [r7, #23]
    
    if (wr_err == ERR_OK)
 8000f72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d11d      	bne.n	8000fb6 <tcp_echoserver_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	895b      	ldrh	r3, [r3, #10]
 8000f7e:	81fb      	strh	r3, [r7, #14]
     
      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	609a      	str	r2, [r3, #8]
      
      if(es->p != NULL)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <tcp_echoserver_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f005 f9b1 	bl	80062fc <pbuf_ref>
      
     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000f9a:	6938      	ldr	r0, [r7, #16]
 8000f9c:	f005 f90e 	bl	80061bc <pbuf_free>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000fa4:	7b7b      	ldrb	r3, [r7, #13]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f7      	beq.n	8000f9a <tcp_echoserver_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000faa:	89fb      	ldrh	r3, [r7, #14]
 8000fac:	4619      	mov	r1, r3
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f006 f876 	bl	80070a0 <tcp_recved>
 8000fb4:	e007      	b.n	8000fc6 <tcp_echoserver_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbe:	d102      	bne.n	8000fc6 <tcp_echoserver_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	609a      	str	r2, [r3, #8]
         (es->p != NULL) && 
 8000fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10b      	bne.n	8000fe6 <tcp_echoserver_send+0x9e>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <tcp_echoserver_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	895a      	ldrh	r2, [r3, #10]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) && 
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d9b8      	bls.n	8000f58 <tcp_echoserver_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <tcp_echoserver_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_echoserver_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
  
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f006 ff2e 	bl	8007e5c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001000:	2100      	movs	r1, #0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f006 ff5e 	bl	8007ec4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001008:	2100      	movs	r1, #0
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f006 ff38 	bl	8007e80 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f006 ff78 	bl	8007f08 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	2100      	movs	r1, #0
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f006 ffad 	bl	8007f7c <tcp_poll>
  
  /* delete es structure */
  if (es != NULL)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <tcp_echoserver_connection_close+0x40>
  {
    mem_free(es);
 8001028:	6838      	ldr	r0, [r7, #0]
 800102a:	f003 fedf 	bl	8004dec <mem_free>
  }  
  
  /* close tcp connection */
  tcp_close(tpcb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f005 fd72 	bl	8006b18 <tcp_close>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001040:	f7ff fdec 	bl	8000c1c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800106a:	f010 fccd 	bl	8011a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fa8d 	bl	800058c <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001074:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001080:	080156b8 	.word	0x080156b8
  ldr r2, =_sbss
 8001084:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001088:	20008a68 	.word	0x20008a68

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>

0800108e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <LAN8742_RegisterBusIO+0x28>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d007      	beq.n	80010b6 <LAN8742_RegisterBusIO+0x28>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <LAN8742_RegisterBusIO+0x28>
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e014      	b.n	80010e6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d17c      	bne.n	800120c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2220      	movs	r2, #32
 8001124:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e01c      	b.n	8001166 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f107 0208 	add.w	r2, r7, #8
 8001134:	2112      	movs	r1, #18
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	4798      	blx	r3
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	da03      	bge.n	8001148 <LAN8742_Init+0x56>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001140:	f06f 0304 	mvn.w	r3, #4
 8001144:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001146:	e00b      	b.n	8001160 <LAN8742_Init+0x6e>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	429a      	cmp	r2, r3
 8001152:	d105      	bne.n	8001160 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	697a      	ldr	r2, [r7, #20]
 8001158:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
         break;
 800115e:	e005      	b.n	800116c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b1f      	cmp	r3, #31
 800116a:	d9df      	bls.n	800112c <LAN8742_Init+0x3a>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b1f      	cmp	r3, #31
 8001172:	d902      	bls.n	800117a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001174:	f06f 0302 	mvn.w	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d145      	bne.n	800120c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6810      	ldr	r0, [r2, #0]
 8001188:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800118c:	2100      	movs	r1, #0
 800118e:	4798      	blx	r3
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	db37      	blt.n	8001206 <LAN8742_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	6810      	ldr	r0, [r2, #0]
 800119e:	f107 0208 	add.w	r2, r7, #8
 80011a2:	2100      	movs	r1, #0
 80011a4:	4798      	blx	r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db28      	blt.n	80011fe <LAN8742_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4798      	blx	r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occurred */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011b6:	e01c      	b.n	80011f2 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4798      	blx	r3
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011ca:	d80e      	bhi.n	80011ea <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6810      	ldr	r0, [r2, #0]
 80011d4:	f107 0208 	add.w	r2, r7, #8
 80011d8:	2100      	movs	r1, #0
 80011da:	4798      	blx	r3
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da07      	bge.n	80011f2 <LAN8742_Init+0x100>
               {
                 status = LAN8742_STATUS_READ_ERROR;
 80011e2:	f06f 0304 	mvn.w	r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
                 break;
 80011e8:	e010      	b.n	800120c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80011ea:	f06f 0301 	mvn.w	r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
               break;
 80011f0:	e00c      	b.n	800120c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1dd      	bne.n	80011b8 <LAN8742_Init+0xc6>
 80011fc:	e006      	b.n	800120c <LAN8742_Init+0x11a>
             }
           }
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80011fe:	f06f 0304 	mvn.w	r3, #4
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	e002      	b.n	800120c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001206:	f06f 0303 	mvn.w	r3, #3
 800120a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == LAN8742_STATUS_OK)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d112      	bne.n	8001238 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4798      	blx	r3
 8001218:	4603      	mov	r3, r0
 800121a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800121c:	bf00      	nop
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4798      	blx	r3
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001230:	d9f5      	bls.n	800121e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001238:	693b      	ldr	r3, [r7, #16]
 }
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b084      	sub	sp, #16
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6810      	ldr	r0, [r2, #0]
 8001256:	f107 020c 	add.w	r2, r7, #12
 800125a:	2101      	movs	r1, #1
 800125c:	4798      	blx	r3
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	da02      	bge.n	800126a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001264:	f06f 0304 	mvn.w	r3, #4
 8001268:	e06e      	b.n	8001348 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6810      	ldr	r0, [r2, #0]
 8001272:	f107 020c 	add.w	r2, r7, #12
 8001276:	2101      	movs	r1, #1
 8001278:	4798      	blx	r3
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	da02      	bge.n	8001286 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001280:	f06f 0304 	mvn.w	r3, #4
 8001284:	e060      	b.n	8001348 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001290:	2301      	movs	r3, #1
 8001292:	e059      	b.n	8001348 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	6810      	ldr	r0, [r2, #0]
 800129c:	f107 020c 	add.w	r2, r7, #12
 80012a0:	2100      	movs	r1, #0
 80012a2:	4798      	blx	r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da02      	bge.n	80012b0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012aa:	f06f 0304 	mvn.w	r3, #4
 80012ae:	e04b      	b.n	8001348 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d11b      	bne.n	80012f2 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <LAN8742_GetLinkState+0x90>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012ce:	2302      	movs	r3, #2
 80012d0:	e03a      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012dc:	2303      	movs	r3, #3
 80012de:	e033      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012ea:	2304      	movs	r3, #4
 80012ec:	e02c      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012ee:	2305      	movs	r3, #5
 80012f0:	e02a      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	f107 020c 	add.w	r2, r7, #12
 80012fe:	211f      	movs	r1, #31
 8001300:	4798      	blx	r3
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	da02      	bge.n	800130e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001308:	f06f 0304 	mvn.w	r3, #4
 800130c:	e01c      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001318:	2306      	movs	r3, #6
 800131a:	e015      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 031c 	and.w	r3, r3, #28
 8001322:	2b18      	cmp	r3, #24
 8001324:	d101      	bne.n	800132a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001326:	2302      	movs	r3, #2
 8001328:	e00e      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f003 031c 	and.w	r3, r3, #28
 8001330:	2b08      	cmp	r3, #8
 8001332:	d101      	bne.n	8001338 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001334:	2303      	movs	r3, #3
 8001336:	e007      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f003 031c 	and.w	r3, r3, #28
 800133e:	2b14      	cmp	r3, #20
 8001340:	d101      	bne.n	8001346 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001342:	2304      	movs	r3, #4
 8001344:	e000      	b.n	8001348 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001346:	2305      	movs	r3, #5
    }
  }
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <HAL_Init+0x40>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800135e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <HAL_Init+0x40>)
 8001366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x40>)
 8001372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f931 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	2000      	movs	r0, #0
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fa8c 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023c00 	.word	0x40023c00

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f93b 	bl	800162e <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f911 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008
 8001418:	200005dc 	.word	0x200005dc

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	200005dc 	.word	0x200005dc

08001434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff47 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff5c 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff8e 	bl	8001534 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5d 	bl	80014e0 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffb0 	bl	800159c <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e06c      	b.n	8001734 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001660:	2b00      	cmp	r3, #0
 8001662:	d106      	bne.n	8001672 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2223      	movs	r2, #35	; 0x23
 8001668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f003 f82b 	bl	80046c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_ETH_Init+0xf4>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a30      	ldr	r2, [pc, #192]	; (800173c <HAL_ETH_Init+0xf4>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_ETH_Init+0xf4>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800168e:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <HAL_ETH_Init+0xf8>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4a2b      	ldr	r2, [pc, #172]	; (8001740 <HAL_ETH_Init+0xf8>)
 8001694:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001698:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_ETH_Init+0xf8>)
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4927      	ldr	r1, [pc, #156]	; (8001740 <HAL_ETH_Init+0xf8>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_ETH_Init+0xf8>)
 80016aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016c4:	f7ff feaa 	bl	800141c <HAL_GetTick>
 80016c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016ca:	e011      	b.n	80016f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016cc:	f7ff fea6 	bl	800141c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016da:	d909      	bls.n	80016f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2204      	movs	r2, #4
 80016e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	22e0      	movs	r2, #224	; 0xe0
 80016e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e021      	b.n	8001734 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1e4      	bne.n	80016cc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 fdfc 	bl	8002300 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 fea3 	bl	8002454 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fef9 	bl	8002506 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	461a      	mov	r2, r3
 800171a:	2100      	movs	r1, #0
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 fe61 	bl	80023e4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2210      	movs	r2, #16
 800172e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40013800 	.word	0x40013800

08001744 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001752:	2b10      	cmp	r3, #16
 8001754:	d150      	bne.n	80017f8 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2223      	movs	r2, #35	; 0x23
 800175a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2204      	movs	r2, #4
 8001762:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f9fd 	bl	8001b64 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0208 	orr.w	r2, r2, #8
 8001778:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff fe56 	bl	8001434 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 0204 	orr.w	r2, r2, #4
 800179e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff fe43 	bl	8001434 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 fc42 	bl	8002040 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017d2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ea:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2223      	movs	r2, #35	; 0x23
 80017f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001810:	2b23      	cmp	r3, #35	; 0x23
 8001812:	d14a      	bne.n	80018aa <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2223      	movs	r2, #35	; 0x23
 8001818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800182e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001832:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	f023 0302 	bic.w	r3, r3, #2
 8001846:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800184a:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0204 	bic.w	r2, r2, #4
 800185a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001864:	2001      	movs	r0, #1
 8001866:	f7ff fde5 	bl	8001434 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fbe4 	bl	8002040 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 0208 	bic.w	r2, r2, #8
 8001886:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fdcf 	bl	8001434 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2210      	movs	r2, #16
 80018a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
  }
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07c      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018e0:	2b23      	cmp	r3, #35	; 0x23
 80018e2:	d176      	bne.n	80019d2 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80018e4:	2200      	movs	r2, #0
 80018e6:	68b9      	ldr	r1, [r7, #8]
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 fe79 	bl	80025e0 <ETH_Prepare_Tx_Descriptors>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	f043 0202 	orr.w	r2, r3, #2
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e065      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8001908:	f3bf 8f4f 	dsb	sy
}
 800190c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3206      	adds	r2, #6
 8001916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192a:	2b03      	cmp	r3, #3
 800192c:	d904      	bls.n	8001938 <HAL_ETH_Transmit+0x84>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	1f1a      	subs	r2, r3, #4
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	3106      	adds	r1, #6
 8001944:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001948:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800194c:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800194e:	f7ff fd65 	bl	800141c <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001954:	e037      	b.n	80019c6 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d011      	beq.n	800198c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800196e:	f043 0208 	orr.w	r2, r3, #8
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001980:	695a      	ldr	r2, [r3, #20]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e023      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001992:	d018      	beq.n	80019c6 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001994:	f7ff fd42 	bl	800141c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d302      	bcc.n	80019aa <HAL_ETH_Transmit+0xf6>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b0:	f043 0204 	orr.w	r2, r3, #4
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80019c0:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e006      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	dbc3      	blt.n	8001956 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
  }
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fa:	f043 0201 	orr.w	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0a8      	b.n	8001b5a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a0e:	2b23      	cmp	r3, #35	; 0x23
 8001a10:	d001      	beq.n	8001a16 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0a1      	b.n	8001b5a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	3212      	adds	r2, #18
 8001a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a26:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a2c:	f1c3 0304 	rsb	r3, r3, #4
 8001a30:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a32:	e06a      	b.n	8001b0a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d007      	beq.n	8001a50 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	69da      	ldr	r2, [r3, #28]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d103      	bne.n	8001a64 <HAL_ETH_ReadData+0x88>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d040      	beq.n	8001ae6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00c      	beq.n	8001aa8 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	0c1b      	lsrs	r3, r3, #16
 8001a94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001a98:	3b04      	subs	r3, #4
 8001a9a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f002 ffcf 	bl	8004a68 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	441a      	add	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d902      	bls.n	8001af8 <HAL_ETH_ReadData+0x11c>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b04      	subs	r3, #4
 8001af6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	3212      	adds	r2, #18
 8001afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b02:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db06      	blt.n	8001b20 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d202      	bcs.n	8001b20 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d089      	beq.n	8001a34 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	441a      	add	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f815 	bl	8001b64 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69fa      	ldr	r2, [r7, #28]
 8001b3e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e000      	b.n	8001b5a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001b70:	2301      	movs	r3, #1
 8001b72:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b78:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69fa      	ldr	r2, [r7, #28]
 8001b7e:	3212      	adds	r2, #18
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b8a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001b8c:	e03d      	b.n	8001c0a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d112      	bne.n	8001bbc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 ff34 	bl	8004a08 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	74fb      	strb	r3, [r7, #19]
 8001baa:	e007      	b.n	8001bbc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001bbc:	7cfb      	ldrb	r3, [r7, #19]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d023      	beq.n	8001c0a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	4a24      	ldr	r2, [pc, #144]	; (8001c60 <ETH_UpdateDescriptor+0xfc>)
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	e003      	b.n	8001bda <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001bd8:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d902      	bls.n	8001bf8 <ETH_UpdateDescriptor+0x94>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b04      	subs	r3, #4
 8001bf6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	3212      	adds	r2, #18
 8001bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c02:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <ETH_UpdateDescriptor+0xb2>
 8001c10:	7cfb      	ldrb	r3, [r7, #19]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1bb      	bne.n	8001b8e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d01a      	beq.n	8001c56 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	3301      	adds	r3, #1
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001c2a:	f3bf 8f5f 	dmb	sy
}
 8001c2e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6919      	ldr	r1, [r3, #16]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	18ca      	adds	r2, r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c48:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	80004600 	.word	0x80004600

08001c64 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
 8001c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 031c 	and.w	r3, r3, #28
 8001c80:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	02db      	lsls	r3, r3, #11
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	019b      	lsls	r3, r3, #6
 8001c92:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f023 0302 	bic.w	r3, r3, #2
 8001ca2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001cb4:	f7ff fbb2 	bl	800141c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cba:	e00d      	b.n	8001cd8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001cbc:	f7ff fbae 	bl	800141c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cca:	d301      	bcc.n	8001cd0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e010      	b.n	8001cf2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ec      	bne.n	8001cbc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 031c 	and.w	r3, r3, #28
 8001d16:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	02db      	lsls	r3, r3, #11
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	019b      	lsls	r3, r3, #6
 8001d28:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d54:	f7ff fb62 	bl	800141c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d5a:	e00d      	b.n	8001d78 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d5c:	f7ff fb5e 	bl	800141c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d301      	bcc.n	8001d70 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e009      	b.n	8001d84 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1ec      	bne.n	8001d5c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0d9      	b.n	8001f54 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bf14      	ite	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	2300      	moveq	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	461a      	mov	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf0c      	ite	eq
 8001dd8:	2301      	moveq	r3, #1
 8001dda:	2300      	movne	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bf14      	ite	ne
 8001df4:	2301      	movne	r3, #1
 8001df6:	2300      	moveq	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	bf0c      	ite	eq
 8001e0e:	2301      	moveq	r3, #1
 8001e10:	2300      	movne	r3, #0
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf14      	ite	ne
 8001e92:	2301      	movne	r3, #1
 8001e94:	2300      	moveq	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	bf14      	ite	ne
 8001f44:	2301      	movne	r3, #1
 8001f46:	2300      	moveq	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e00b      	b.n	8001f8c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d105      	bne.n	8001f8a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f7e:	6839      	ldr	r1, [r7, #0]
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f883 	bl	800208c <ETH_SetMACConfig>

    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
  }
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 031c 	bic.w	r3, r3, #28
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fac:	f001 fb86 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 8001fb0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_ETH_SetMDIOClockRange+0x98>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d908      	bls.n	8001fcc <HAL_ETH_SetMDIOClockRange+0x38>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d804      	bhi.n	8001fcc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	e027      	b.n	800201c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d908      	bls.n	8001fe6 <HAL_ETH_SetMDIOClockRange+0x52>
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4a17      	ldr	r2, [pc, #92]	; (8002034 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d204      	bcs.n	8001fe6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f043 030c 	orr.w	r3, r3, #12
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	e01a      	b.n	800201c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4a12      	ldr	r2, [pc, #72]	; (8002034 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d303      	bcc.n	8001ff6 <HAL_ETH_SetMDIOClockRange+0x62>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d911      	bls.n	800201a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d908      	bls.n	8002010 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d804      	bhi.n	8002010 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	e005      	b.n	800201c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f043 0310 	orr.w	r3, r3, #16
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	e000      	b.n	800201c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800201a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	611a      	str	r2, [r3, #16]
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	01312cff 	.word	0x01312cff
 8002030:	02160ebf 	.word	0x02160ebf
 8002034:	03938700 	.word	0x03938700
 8002038:	05f5e0ff 	.word	0x05f5e0ff
 800203c:	08f0d17f 	.word	0x08f0d17f

08002040 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6812      	ldr	r2, [r2, #0]
 800205a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800205e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002062:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff f9df 	bl	8001434 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002080:	6193      	str	r3, [r2, #24]
}
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <ETH_SetMACConfig+0x15c>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	7c1b      	ldrb	r3, [r3, #16]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <ETH_SetMACConfig+0x28>
 80020ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020b2:	e000      	b.n	80020b6 <ETH_SetMACConfig+0x2a>
 80020b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	7c5b      	ldrb	r3, [r3, #17]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <ETH_SetMACConfig+0x38>
 80020be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020c2:	e000      	b.n	80020c6 <ETH_SetMACConfig+0x3a>
 80020c4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	7fdb      	ldrb	r3, [r3, #31]
 80020d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	7f92      	ldrb	r2, [r2, #30]
 80020e0:	2a00      	cmp	r2, #0
 80020e2:	d102      	bne.n	80020ea <ETH_SetMACConfig+0x5e>
 80020e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020e8:	e000      	b.n	80020ec <ETH_SetMACConfig+0x60>
 80020ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80020ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	7f1b      	ldrb	r3, [r3, #28]
 80020f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80020fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	791b      	ldrb	r3, [r3, #4]
 8002100:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002102:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	f892 2020 	ldrb.w	r2, [r2, #32]
 800210a:	2a00      	cmp	r2, #0
 800210c:	d102      	bne.n	8002114 <ETH_SetMACConfig+0x88>
 800210e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002112:	e000      	b.n	8002116 <ETH_SetMACConfig+0x8a>
 8002114:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002116:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	7bdb      	ldrb	r3, [r3, #15]
 800211c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800211e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002124:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800212c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800212e:	4313      	orrs	r3, r2
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002146:	2001      	movs	r0, #1
 8002148:	f7ff f974 	bl	8001434 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002172:	2a00      	cmp	r2, #0
 8002174:	d101      	bne.n	800217a <ETH_SetMACConfig+0xee>
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	e000      	b.n	800217c <ETH_SetMACConfig+0xf0>
 800217a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002182:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800218a:	2a01      	cmp	r2, #1
 800218c:	d101      	bne.n	8002192 <ETH_SetMACConfig+0x106>
 800218e:	2208      	movs	r2, #8
 8002190:	e000      	b.n	8002194 <ETH_SetMACConfig+0x108>
 8002192:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002194:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800219c:	2a01      	cmp	r2, #1
 800219e:	d101      	bne.n	80021a4 <ETH_SetMACConfig+0x118>
 80021a0:	2204      	movs	r2, #4
 80021a2:	e000      	b.n	80021a6 <ETH_SetMACConfig+0x11a>
 80021a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80021ae:	2a01      	cmp	r2, #1
 80021b0:	d101      	bne.n	80021b6 <ETH_SetMACConfig+0x12a>
 80021b2:	2202      	movs	r2, #2
 80021b4:	e000      	b.n	80021b8 <ETH_SetMACConfig+0x12c>
 80021b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021b8:	4313      	orrs	r3, r2
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021d0:	2001      	movs	r0, #1
 80021d2:	f7ff f92f 	bl	8001434 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	619a      	str	r2, [r3, #24]
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	ff20810f 	.word	0xff20810f

080021ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4b3d      	ldr	r3, [pc, #244]	; (80022fc <ETH_SetDMAConfig+0x110>)
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	7b1b      	ldrb	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <ETH_SetDMAConfig+0x2c>
 8002212:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002216:	e000      	b.n	800221a <ETH_SetDMAConfig+0x2e>
 8002218:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7b5b      	ldrb	r3, [r3, #13]
 800221e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002220:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	7f52      	ldrb	r2, [r2, #29]
 8002226:	2a00      	cmp	r2, #0
 8002228:	d102      	bne.n	8002230 <ETH_SetDMAConfig+0x44>
 800222a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800222e:	e000      	b.n	8002232 <ETH_SetDMAConfig+0x46>
 8002230:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002232:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	7b9b      	ldrb	r3, [r3, #14]
 8002238:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800223a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002240:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	7f1b      	ldrb	r3, [r3, #28]
 8002246:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002248:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	7f9b      	ldrb	r3, [r3, #30]
 800224e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002250:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002256:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800225e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002260:	4313      	orrs	r3, r2
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002282:	2001      	movs	r0, #1
 8002284:	f7ff f8d6 	bl	8001434 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002290:	461a      	mov	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	791b      	ldrb	r3, [r3, #4]
 800229a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80022a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80022b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6812      	ldr	r2, [r2, #0]
 80022ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e0:	2001      	movs	r0, #1
 80022e2:	f7ff f8a7 	bl	8001434 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ee:	461a      	mov	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	f8de3f23 	.word	0xf8de3f23

08002300 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b0a6      	sub	sp, #152	; 0x98
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002314:	2300      	movs	r3, #0
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800231e:	2301      	movs	r3, #1
 8002320:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800233c:	2300      	movs	r3, #0
 800233e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002346:	2300      	movs	r3, #0
 8002348:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002366:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002374:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002378:	4619      	mov	r1, r3
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fe86 	bl	800208c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002380:	2301      	movs	r3, #1
 8002382:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002384:	2301      	movs	r3, #1
 8002386:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800238e:	2301      	movs	r3, #1
 8002390:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023a6:	2301      	movs	r3, #1
 80023a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023ac:	2301      	movs	r3, #1
 80023ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4619      	mov	r1, r3
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ff08 	bl	80021ec <ETH_SetDMAConfig>
}
 80023dc:	bf00      	nop
 80023de:	3798      	adds	r7, #152	; 0x98
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3305      	adds	r3, #5
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	3204      	adds	r2, #4
 80023fc:	7812      	ldrb	r2, [r2, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <ETH_MACAddressConfig+0x68>)
 8002406:	4413      	add	r3, r2
 8002408:	461a      	mov	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3303      	adds	r3, #3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	061a      	lsls	r2, r3, #24
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3302      	adds	r3, #2
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	041b      	lsls	r3, r3, #16
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3301      	adds	r3, #1
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	021b      	lsls	r3, r3, #8
 8002428:	4313      	orrs	r3, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <ETH_MACAddressConfig+0x6c>)
 8002436:	4413      	add	r3, r2
 8002438:	461a      	mov	r2, r3
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	6013      	str	r3, [r2, #0]
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40028040 	.word	0x40028040
 8002450:	40028044 	.word	0x40028044

08002454 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e03e      	b.n	80024e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68d9      	ldr	r1, [r3, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800248c:	68b9      	ldr	r1, [r7, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	3206      	adds	r2, #6
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d80c      	bhi.n	80024c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68d9      	ldr	r1, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	e004      	b.n	80024ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	461a      	mov	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	3301      	adds	r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d9bd      	bls.n	8002462 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024f8:	611a      	str	r2, [r3, #16]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002506:	b480      	push	{r7}
 8002508:	b085      	sub	sp, #20
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	e046      	b.n	80025a2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6919      	ldr	r1, [r3, #16]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002550:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002558:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002566:	68b9      	ldr	r1, [r7, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	3212      	adds	r2, #18
 800256e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d80c      	bhi.n	8002592 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6919      	ldr	r1, [r3, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	440b      	add	r3, r1
 800258a:	461a      	mov	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60da      	str	r2, [r3, #12]
 8002590:	e004      	b.n	800259c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d9b5      	bls.n	8002514 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d2:	60da      	str	r2, [r3, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b08d      	sub	sp, #52	; 0x34
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	3318      	adds	r3, #24
 80025f0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800261e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002622:	d007      	beq.n	8002634 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	3304      	adds	r3, #4
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002634:	2302      	movs	r3, #2
 8002636:	e103      	b.n	8002840 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	3301      	adds	r3, #1
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	461a      	mov	r2, r3
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002650:	f023 031f 	bic.w	r3, r3, #31
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	6852      	ldr	r2, [r2, #4]
 8002658:	431a      	orrs	r2, r3
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d008      	beq.n	800267c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	431a      	orrs	r2, r3
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	431a      	orrs	r2, r3
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80026be:	f3bf 8f5f 	dmb	sy
}
 80026c2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80026d0:	e084      	b.n	80027dc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e005      	b.n	80026fe <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	3301      	adds	r3, #1
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002706:	2b03      	cmp	r3, #3
 8002708:	d902      	bls.n	8002710 <ETH_Prepare_Tx_Descriptors+0x130>
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	3b04      	subs	r3, #4
 800270e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002718:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800272e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002732:	d007      	beq.n	8002744 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002738:	3304      	adds	r3, #4
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d029      	beq.n	8002798 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002750:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002752:	2300      	movs	r3, #0
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
 8002756:	e019      	b.n	800278c <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002758:	f3bf 8f5f 	dmb	sy
}
 800275c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	3301      	adds	r3, #1
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002772:	2b03      	cmp	r3, #3
 8002774:	d902      	bls.n	800277c <ETH_Prepare_Tx_Descriptors+0x19c>
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	3b04      	subs	r3, #4
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002784:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	3301      	adds	r3, #1
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
 800278c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	429a      	cmp	r2, r3
 8002792:	d3e1      	bcc.n	8002758 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002794:	2302      	movs	r3, #2
 8002796:	e053      	b.n	8002840 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	3301      	adds	r3, #1
 800279c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80027b6:	f023 031f 	bic.w	r3, r3, #31
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	6852      	ldr	r2, [r2, #4]
 80027be:	431a      	orrs	r2, r3
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	3301      	adds	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80027ca:	f3bf 8f5f 	dmb	sy
}
 80027ce:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f47f af76 	bne.w	80026d2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80027f4:	6a3b      	ldr	r3, [r7, #32]
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e005      	b.n	8002806 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002816:	6979      	ldr	r1, [r7, #20]
 8002818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281a:	3304      	adds	r3, #4
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002826:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002828:	b672      	cpsid	i
}
 800282a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	4413      	add	r3, r2
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800283a:	b662      	cpsie	i
}
 800283c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3734      	adds	r7, #52	; 0x34
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
 8002866:	e177      	b.n	8002b58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002868:	2201      	movs	r2, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	429a      	cmp	r2, r3
 8002882:	f040 8166 	bne.w	8002b52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d005      	beq.n	800289e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289a:	2b02      	cmp	r3, #2
 800289c:	d130      	bne.n	8002900 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d4:	2201      	movs	r2, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 0201 	and.w	r2, r3, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d017      	beq.n	800293c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4313      	orrs	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d123      	bne.n	8002990 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	08da      	lsrs	r2, r3, #3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3208      	adds	r2, #8
 8002950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002954:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	220f      	movs	r2, #15
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	08da      	lsrs	r2, r3, #3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3208      	adds	r2, #8
 800298a:	69b9      	ldr	r1, [r7, #24]
 800298c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	2203      	movs	r2, #3
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4013      	ands	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0203 	and.w	r2, r3, #3
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80c0 	beq.w	8002b52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	4b66      	ldr	r3, [pc, #408]	; (8002b70 <HAL_GPIO_Init+0x324>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	4a65      	ldr	r2, [pc, #404]	; (8002b70 <HAL_GPIO_Init+0x324>)
 80029dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e0:	6453      	str	r3, [r2, #68]	; 0x44
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_GPIO_Init+0x324>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ee:	4a61      	ldr	r2, [pc, #388]	; (8002b74 <HAL_GPIO_Init+0x328>)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3302      	adds	r3, #2
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a58      	ldr	r2, [pc, #352]	; (8002b78 <HAL_GPIO_Init+0x32c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d037      	beq.n	8002a8a <HAL_GPIO_Init+0x23e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a57      	ldr	r2, [pc, #348]	; (8002b7c <HAL_GPIO_Init+0x330>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d031      	beq.n	8002a86 <HAL_GPIO_Init+0x23a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a56      	ldr	r2, [pc, #344]	; (8002b80 <HAL_GPIO_Init+0x334>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d02b      	beq.n	8002a82 <HAL_GPIO_Init+0x236>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a55      	ldr	r2, [pc, #340]	; (8002b84 <HAL_GPIO_Init+0x338>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d025      	beq.n	8002a7e <HAL_GPIO_Init+0x232>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a54      	ldr	r2, [pc, #336]	; (8002b88 <HAL_GPIO_Init+0x33c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01f      	beq.n	8002a7a <HAL_GPIO_Init+0x22e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a53      	ldr	r2, [pc, #332]	; (8002b8c <HAL_GPIO_Init+0x340>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d019      	beq.n	8002a76 <HAL_GPIO_Init+0x22a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a52      	ldr	r2, [pc, #328]	; (8002b90 <HAL_GPIO_Init+0x344>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_GPIO_Init+0x226>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a51      	ldr	r2, [pc, #324]	; (8002b94 <HAL_GPIO_Init+0x348>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00d      	beq.n	8002a6e <HAL_GPIO_Init+0x222>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a50      	ldr	r2, [pc, #320]	; (8002b98 <HAL_GPIO_Init+0x34c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <HAL_GPIO_Init+0x21e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4f      	ldr	r2, [pc, #316]	; (8002b9c <HAL_GPIO_Init+0x350>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x21a>
 8002a62:	2309      	movs	r3, #9
 8002a64:	e012      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a66:	230a      	movs	r3, #10
 8002a68:	e010      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	e00e      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a6e:	2307      	movs	r3, #7
 8002a70:	e00c      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a72:	2306      	movs	r3, #6
 8002a74:	e00a      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a76:	2305      	movs	r3, #5
 8002a78:	e008      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e006      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e004      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e002      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_GPIO_Init+0x240>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	f002 0203 	and.w	r2, r2, #3
 8002a92:	0092      	lsls	r2, r2, #2
 8002a94:	4093      	lsls	r3, r2
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a9c:	4935      	ldr	r1, [pc, #212]	; (8002b74 <HAL_GPIO_Init+0x328>)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <HAL_GPIO_Init+0x354>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ace:	4a34      	ldr	r2, [pc, #208]	; (8002ba0 <HAL_GPIO_Init+0x354>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad4:	4b32      	ldr	r3, [pc, #200]	; (8002ba0 <HAL_GPIO_Init+0x354>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	43db      	mvns	r3, r3
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af8:	4a29      	ldr	r2, [pc, #164]	; (8002ba0 <HAL_GPIO_Init+0x354>)
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002afe:	4b28      	ldr	r3, [pc, #160]	; (8002ba0 <HAL_GPIO_Init+0x354>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b22:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <HAL_GPIO_Init+0x354>)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	; (8002ba0 <HAL_GPIO_Init+0x354>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b4c:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_GPIO_Init+0x354>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b0f      	cmp	r3, #15
 8002b5c:	f67f ae84 	bls.w	8002868 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	3724      	adds	r7, #36	; 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40013800 	.word	0x40013800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40020c00 	.word	0x40020c00
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40021400 	.word	0x40021400
 8002b90:	40021800 	.word	0x40021800
 8002b94:	40021c00 	.word	0x40021c00
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40022400 	.word	0x40022400
 8002ba0:	40013c00 	.word	0x40013c00

08002ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	807b      	strh	r3, [r7, #2]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bb4:	787b      	ldrb	r3, [r7, #1]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bc0:	e003      	b.n	8002bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bc2:	887b      	ldrh	r3, [r7, #2]
 8002bc4:	041a      	lsls	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	619a      	str	r2, [r3, #24]
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af02      	add	r7, sp, #8
 8002bdc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e101      	b.n	8002dec <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fd febc 	bl	8000980 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c16:	d102      	bne.n	8002c1e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f001 f8a6 	bl	8003d74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7c1a      	ldrb	r2, [r3, #16]
 8002c30:	f88d 2000 	strb.w	r2, [sp]
 8002c34:	3304      	adds	r3, #4
 8002c36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c38:	f001 f838 	bl	8003cac <USB_CoreInit>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0ce      	b.n	8002dec <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f001 f89e 	bl	8003d96 <USB_SetCurrentMode>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0bf      	b.n	8002dec <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	73fb      	strb	r3, [r7, #15]
 8002c70:	e04a      	b.n	8002d08 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3315      	adds	r3, #21
 8002c82:	2201      	movs	r2, #1
 8002c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3314      	adds	r3, #20
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c9a:	7bfa      	ldrb	r2, [r7, #15]
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	b298      	uxth	r0, r3
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	332e      	adds	r3, #46	; 0x2e
 8002cae:	4602      	mov	r2, r0
 8002cb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cb2:	7bfa      	ldrb	r2, [r7, #15]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3318      	adds	r3, #24
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cc6:	7bfa      	ldrb	r2, [r7, #15]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	331c      	adds	r3, #28
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3320      	adds	r3, #32
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cee:	7bfa      	ldrb	r2, [r7, #15]
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3324      	adds	r3, #36	; 0x24
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	3301      	adds	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	791b      	ldrb	r3, [r3, #4]
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3af      	bcc.n	8002c72 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
 8002d16:	e044      	b.n	8002da2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	4413      	add	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d5a:	7bfa      	ldrb	r2, [r7, #15]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	73fb      	strb	r3, [r7, #15]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	791b      	ldrb	r3, [r3, #4]
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d3b5      	bcc.n	8002d18 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7c1a      	ldrb	r2, [r3, #16]
 8002db4:	f88d 2000 	strb.w	r2, [sp]
 8002db8:	3304      	adds	r3, #4
 8002dba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dbc:	f001 f838 	bl	8003e30 <USB_DevInit>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00c      	b.n	8002dec <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 fa00 	bl	80041ea <USB_DevDisconnect>

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e267      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d075      	beq.n	8002efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e12:	4b88      	ldr	r3, [pc, #544]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d00c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e1e:	4b85      	ldr	r3, [pc, #532]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	d112      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2a:	4b82      	ldr	r3, [pc, #520]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e36:	d10b      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	4b7e      	ldr	r3, [pc, #504]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d05b      	beq.n	8002efc <HAL_RCC_OscConfig+0x108>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d157      	bne.n	8002efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e242      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e58:	d106      	bne.n	8002e68 <HAL_RCC_OscConfig+0x74>
 8002e5a:	4b76      	ldr	r3, [pc, #472]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a75      	ldr	r2, [pc, #468]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e01d      	b.n	8002ea4 <HAL_RCC_OscConfig+0xb0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x98>
 8002e72:	4b70      	ldr	r3, [pc, #448]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6f      	ldr	r2, [pc, #444]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a6c      	ldr	r2, [pc, #432]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xb0>
 8002e8c:	4b69      	ldr	r3, [pc, #420]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a68      	ldr	r2, [pc, #416]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	4b66      	ldr	r3, [pc, #408]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a65      	ldr	r2, [pc, #404]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe fab6 	bl	800141c <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fab2 	bl	800141c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e207      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xc0>
 8002ed2:	e014      	b.n	8002efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe faa2 	bl	800141c <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002edc:	f7fe fa9e 	bl	800141c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	; 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e1f3      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eee:	4b51      	ldr	r3, [pc, #324]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0xe8>
 8002efa:	e000      	b.n	8002efe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d063      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f16:	4b47      	ldr	r3, [pc, #284]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d11c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f22:	4b44      	ldr	r3, [pc, #272]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d116      	bne.n	8002f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	4b41      	ldr	r3, [pc, #260]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_RCC_OscConfig+0x152>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1c7      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f46:	4b3b      	ldr	r3, [pc, #236]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4937      	ldr	r1, [pc, #220]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	e03a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f64:	4b34      	ldr	r3, [pc, #208]	; (8003038 <HAL_RCC_OscConfig+0x244>)
 8002f66:	2201      	movs	r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6a:	f7fe fa57 	bl	800141c <HAL_GetTick>
 8002f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f70:	e008      	b.n	8002f84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f72:	f7fe fa53 	bl	800141c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e1a8      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d0f0      	beq.n	8002f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f90:	4b28      	ldr	r3, [pc, #160]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4925      	ldr	r1, [pc, #148]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]
 8002fa4:	e015      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <HAL_RCC_OscConfig+0x244>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fa36 	bl	800141c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fa32 	bl	800141c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e187      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fc6:	4b1b      	ldr	r3, [pc, #108]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d036      	beq.n	800304c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_RCC_OscConfig+0x248>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe fa16 	bl	800141c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff4:	f7fe fa12 	bl	800141c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e167      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_OscConfig+0x240>)
 8003008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0f0      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x200>
 8003012:	e01b      	b.n	800304c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003014:	4b09      	ldr	r3, [pc, #36]	; (800303c <HAL_RCC_OscConfig+0x248>)
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe f9ff 	bl	800141c <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003020:	e00e      	b.n	8003040 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003022:	f7fe f9fb 	bl	800141c <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d907      	bls.n	8003040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e150      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
 8003034:	40023800 	.word	0x40023800
 8003038:	42470000 	.word	0x42470000
 800303c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	4b88      	ldr	r3, [pc, #544]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1ea      	bne.n	8003022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8097 	beq.w	8003188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800305e:	4b81      	ldr	r3, [pc, #516]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	4b7d      	ldr	r3, [pc, #500]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	4a7c      	ldr	r2, [pc, #496]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003078:	6413      	str	r3, [r2, #64]	; 0x40
 800307a:	4b7a      	ldr	r3, [pc, #488]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308a:	4b77      	ldr	r3, [pc, #476]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003096:	4b74      	ldr	r3, [pc, #464]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a73      	ldr	r2, [pc, #460]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 800309c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a2:	f7fe f9bb 	bl	800141c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030aa:	f7fe f9b7 	bl	800141c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e10c      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030bc:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x474>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x2ea>
 80030d0:	4b64      	ldr	r3, [pc, #400]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a63      	ldr	r2, [pc, #396]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	e01c      	b.n	8003118 <HAL_RCC_OscConfig+0x324>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2b05      	cmp	r3, #5
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x30c>
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	4a5e      	ldr	r2, [pc, #376]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030ec:	f043 0304 	orr.w	r3, r3, #4
 80030f0:	6713      	str	r3, [r2, #112]	; 0x70
 80030f2:	4b5c      	ldr	r3, [pc, #368]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a5b      	ldr	r2, [pc, #364]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6713      	str	r3, [r2, #112]	; 0x70
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0x324>
 8003100:	4b58      	ldr	r3, [pc, #352]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a57      	ldr	r2, [pc, #348]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	4b55      	ldr	r3, [pc, #340]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a54      	ldr	r2, [pc, #336]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003112:	f023 0304 	bic.w	r3, r3, #4
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe f97c 	bl	800141c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe f978 	bl	800141c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	; 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0cb      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313e:	4b49      	ldr	r3, [pc, #292]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ee      	beq.n	8003128 <HAL_RCC_OscConfig+0x334>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fe f966 	bl	800141c <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe f962 	bl	800141c <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0b5      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ee      	bne.n	8003154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7dfb      	ldrb	r3, [r7, #23]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b39      	ldr	r3, [pc, #228]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	4a38      	ldr	r2, [pc, #224]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003186:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a1 	beq.w	80032d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003192:	4b34      	ldr	r3, [pc, #208]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b08      	cmp	r3, #8
 800319c:	d05c      	beq.n	8003258 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d141      	bne.n	800322a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe f936 	bl	800141c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe f932 	bl	800141c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e087      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b27      	ldr	r3, [pc, #156]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	019b      	lsls	r3, r3, #6
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	3b01      	subs	r3, #1
 80031ec:	041b      	lsls	r3, r3, #16
 80031ee:	431a      	orrs	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	491b      	ldr	r1, [pc, #108]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCC_OscConfig+0x478>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe f90b 	bl	800141c <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe f907 	bl	800141c <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e05c      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x416>
 8003228:	e054      	b.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <HAL_RCC_OscConfig+0x478>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe f8f4 	bl	800141c <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe f8f0 	bl	800141c <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e045      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_RCC_OscConfig+0x470>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x444>
 8003256:	e03d      	b.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d107      	bne.n	8003270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e038      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
 8003264:	40023800 	.word	0x40023800
 8003268:	40007000 	.word	0x40007000
 800326c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_OscConfig+0x4ec>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d028      	beq.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003288:	429a      	cmp	r2, r3
 800328a:	d121      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	429a      	cmp	r2, r3
 8003298:	d11a      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032a0:	4013      	ands	r3, r2
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d111      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	3b01      	subs	r3, #1
 80032ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800

080032e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e0cc      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f8:	4b68      	ldr	r3, [pc, #416]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d90c      	bls.n	8003320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003306:	4b65      	ldr	r3, [pc, #404]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800330e:	4b63      	ldr	r3, [pc, #396]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	429a      	cmp	r2, r3
 800331a:	d001      	beq.n	8003320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0b8      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003338:	4b59      	ldr	r3, [pc, #356]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a58      	ldr	r2, [pc, #352]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003342:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003350:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	4a52      	ldr	r2, [pc, #328]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800335a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b50      	ldr	r3, [pc, #320]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	494d      	ldr	r1, [pc, #308]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	d044      	beq.n	8003404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d107      	bne.n	8003392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003382:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d119      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e07f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a2:	4b3f      	ldr	r3, [pc, #252]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e06f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b2:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e067      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c2:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f023 0203 	bic.w	r2, r3, #3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	4934      	ldr	r1, [pc, #208]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fe f822 	bl	800141c <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	e00a      	b.n	80033f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033dc:	f7fe f81e 	bl	800141c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e04f      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 020c 	and.w	r2, r3, #12
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	429a      	cmp	r2, r3
 8003402:	d1eb      	bne.n	80033dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003404:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d20c      	bcs.n	800342c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b22      	ldr	r3, [pc, #136]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e032      	b.n	8003492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003438:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4916      	ldr	r1, [pc, #88]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	4313      	orrs	r3, r2
 8003448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003456:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	490e      	ldr	r1, [pc, #56]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800346a:	f000 f821 	bl	80034b0 <HAL_RCC_GetSysClockFreq>
 800346e:	4602      	mov	r2, r0
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	091b      	lsrs	r3, r3, #4
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	490a      	ldr	r1, [pc, #40]	; (80034a4 <HAL_RCC_ClockConfig+0x1c0>)
 800347c:	5ccb      	ldrb	r3, [r1, r3]
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003486:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_ClockConfig+0x1c8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd ff82 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	40023c00 	.word	0x40023c00
 80034a0:	40023800 	.word	0x40023800
 80034a4:	080154b0 	.word	0x080154b0
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000004 	.word	0x20000004

080034b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b4:	b094      	sub	sp, #80	; 0x50
 80034b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	647b      	str	r3, [r7, #68]	; 0x44
 80034bc:	2300      	movs	r3, #0
 80034be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c0:	2300      	movs	r3, #0
 80034c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c8:	4b79      	ldr	r3, [pc, #484]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 030c 	and.w	r3, r3, #12
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d00d      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x40>
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	f200 80e1 	bhi.w	800369c <HAL_RCC_GetSysClockFreq+0x1ec>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x34>
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d003      	beq.n	80034ea <HAL_RCC_GetSysClockFreq+0x3a>
 80034e2:	e0db      	b.n	800369c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b73      	ldr	r3, [pc, #460]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034e8:	e0db      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ea:	4b73      	ldr	r3, [pc, #460]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ee:	e0d8      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f0:	4b6f      	ldr	r3, [pc, #444]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fa:	4b6d      	ldr	r3, [pc, #436]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d063      	beq.n	80035ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003506:	4b6a      	ldr	r3, [pc, #424]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	2200      	movs	r2, #0
 800350e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003510:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
 800351a:	2300      	movs	r3, #0
 800351c:	637b      	str	r3, [r7, #52]	; 0x34
 800351e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003522:	4622      	mov	r2, r4
 8003524:	462b      	mov	r3, r5
 8003526:	f04f 0000 	mov.w	r0, #0
 800352a:	f04f 0100 	mov.w	r1, #0
 800352e:	0159      	lsls	r1, r3, #5
 8003530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003534:	0150      	lsls	r0, r2, #5
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4621      	mov	r1, r4
 800353c:	1a51      	subs	r1, r2, r1
 800353e:	6139      	str	r1, [r7, #16]
 8003540:	4629      	mov	r1, r5
 8003542:	eb63 0301 	sbc.w	r3, r3, r1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003554:	4659      	mov	r1, fp
 8003556:	018b      	lsls	r3, r1, #6
 8003558:	4651      	mov	r1, sl
 800355a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800355e:	4651      	mov	r1, sl
 8003560:	018a      	lsls	r2, r1, #6
 8003562:	4651      	mov	r1, sl
 8003564:	ebb2 0801 	subs.w	r8, r2, r1
 8003568:	4659      	mov	r1, fp
 800356a:	eb63 0901 	sbc.w	r9, r3, r1
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800357a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800357e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003582:	4690      	mov	r8, r2
 8003584:	4699      	mov	r9, r3
 8003586:	4623      	mov	r3, r4
 8003588:	eb18 0303 	adds.w	r3, r8, r3
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	462b      	mov	r3, r5
 8003590:	eb49 0303 	adc.w	r3, r9, r3
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035a2:	4629      	mov	r1, r5
 80035a4:	024b      	lsls	r3, r1, #9
 80035a6:	4621      	mov	r1, r4
 80035a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035ac:	4621      	mov	r1, r4
 80035ae:	024a      	lsls	r2, r1, #9
 80035b0:	4610      	mov	r0, r2
 80035b2:	4619      	mov	r1, r3
 80035b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035c0:	f7fc fe66 	bl	8000290 <__aeabi_uldivmod>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4613      	mov	r3, r2
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	e058      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ce:	4b38      	ldr	r3, [pc, #224]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	2200      	movs	r2, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	4611      	mov	r1, r2
 80035da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035de:	623b      	str	r3, [r7, #32]
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035e8:	4642      	mov	r2, r8
 80035ea:	464b      	mov	r3, r9
 80035ec:	f04f 0000 	mov.w	r0, #0
 80035f0:	f04f 0100 	mov.w	r1, #0
 80035f4:	0159      	lsls	r1, r3, #5
 80035f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fa:	0150      	lsls	r0, r2, #5
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4641      	mov	r1, r8
 8003602:	ebb2 0a01 	subs.w	sl, r2, r1
 8003606:	4649      	mov	r1, r9
 8003608:	eb63 0b01 	sbc.w	fp, r3, r1
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003618:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800361c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003620:	ebb2 040a 	subs.w	r4, r2, sl
 8003624:	eb63 050b 	sbc.w	r5, r3, fp
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	00eb      	lsls	r3, r5, #3
 8003632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003636:	00e2      	lsls	r2, r4, #3
 8003638:	4614      	mov	r4, r2
 800363a:	461d      	mov	r5, r3
 800363c:	4643      	mov	r3, r8
 800363e:	18e3      	adds	r3, r4, r3
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	464b      	mov	r3, r9
 8003644:	eb45 0303 	adc.w	r3, r5, r3
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003656:	4629      	mov	r1, r5
 8003658:	028b      	lsls	r3, r1, #10
 800365a:	4621      	mov	r1, r4
 800365c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003660:	4621      	mov	r1, r4
 8003662:	028a      	lsls	r2, r1, #10
 8003664:	4610      	mov	r0, r2
 8003666:	4619      	mov	r1, r3
 8003668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366a:	2200      	movs	r2, #0
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	61fa      	str	r2, [r7, #28]
 8003670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003674:	f7fc fe0c 	bl	8000290 <__aeabi_uldivmod>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4613      	mov	r3, r2
 800367e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	3301      	adds	r3, #1
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003690:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800369a:	e002      	b.n	80036a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800369e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3750      	adds	r7, #80	; 0x50
 80036a8:	46bd      	mov	sp, r7
 80036aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	00f42400 	.word	0x00f42400
 80036b8:	007a1200 	.word	0x007a1200

080036bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000000 	.word	0x20000000

080036d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036d8:	f7ff fff0 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	0a9b      	lsrs	r3, r3, #10
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	4903      	ldr	r1, [pc, #12]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ea:	5ccb      	ldrb	r3, [r1, r3]
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40023800 	.word	0x40023800
 80036f8:	080154c0 	.word	0x080154c0

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003700:	f7ff ffdc 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	0b5b      	lsrs	r3, r3, #13
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4903      	ldr	r1, [pc, #12]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003718:	4618      	mov	r0, r3
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40023800 	.word	0x40023800
 8003720:	080154c0 	.word	0x080154c0

08003724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e042      	b.n	80037bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d106      	bne.n	8003750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd f8d0 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2224      	movs	r2, #36	; 0x24
 8003754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f82b 	bl	80037c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800377c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800378c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800379c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c8:	b0c0      	sub	sp, #256	; 0x100
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	68d9      	ldr	r1, [r3, #12]
 80037e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	ea40 0301 	orr.w	r3, r0, r1
 80037ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	431a      	orrs	r2, r3
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	431a      	orrs	r2, r3
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800381c:	f021 010c 	bic.w	r1, r1, #12
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800382a:	430b      	orrs	r3, r1
 800382c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800382e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800383a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383e:	6999      	ldr	r1, [r3, #24]
 8003840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	ea40 0301 	orr.w	r3, r0, r1
 800384a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4b8f      	ldr	r3, [pc, #572]	; (8003a90 <UART_SetConfig+0x2cc>)
 8003854:	429a      	cmp	r2, r3
 8003856:	d005      	beq.n	8003864 <UART_SetConfig+0xa0>
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b8d      	ldr	r3, [pc, #564]	; (8003a94 <UART_SetConfig+0x2d0>)
 8003860:	429a      	cmp	r2, r3
 8003862:	d104      	bne.n	800386e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003864:	f7ff ff4a 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8003868:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800386c:	e003      	b.n	8003876 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800386e:	f7ff ff31 	bl	80036d4 <HAL_RCC_GetPCLK1Freq>
 8003872:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003880:	f040 810c 	bne.w	8003a9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800388e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003892:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003896:	4622      	mov	r2, r4
 8003898:	462b      	mov	r3, r5
 800389a:	1891      	adds	r1, r2, r2
 800389c:	65b9      	str	r1, [r7, #88]	; 0x58
 800389e:	415b      	adcs	r3, r3
 80038a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038a6:	4621      	mov	r1, r4
 80038a8:	eb12 0801 	adds.w	r8, r2, r1
 80038ac:	4629      	mov	r1, r5
 80038ae:	eb43 0901 	adc.w	r9, r3, r1
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c6:	4690      	mov	r8, r2
 80038c8:	4699      	mov	r9, r3
 80038ca:	4623      	mov	r3, r4
 80038cc:	eb18 0303 	adds.w	r3, r8, r3
 80038d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038d4:	462b      	mov	r3, r5
 80038d6:	eb49 0303 	adc.w	r3, r9, r3
 80038da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80038ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80038ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038f2:	460b      	mov	r3, r1
 80038f4:	18db      	adds	r3, r3, r3
 80038f6:	653b      	str	r3, [r7, #80]	; 0x50
 80038f8:	4613      	mov	r3, r2
 80038fa:	eb42 0303 	adc.w	r3, r2, r3
 80038fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003900:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003904:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003908:	f7fc fcc2 	bl	8000290 <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4b61      	ldr	r3, [pc, #388]	; (8003a98 <UART_SetConfig+0x2d4>)
 8003912:	fba3 2302 	umull	r2, r3, r3, r2
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	011c      	lsls	r4, r3, #4
 800391a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003924:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003928:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	1891      	adds	r1, r2, r2
 8003932:	64b9      	str	r1, [r7, #72]	; 0x48
 8003934:	415b      	adcs	r3, r3
 8003936:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003938:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800393c:	4641      	mov	r1, r8
 800393e:	eb12 0a01 	adds.w	sl, r2, r1
 8003942:	4649      	mov	r1, r9
 8003944:	eb43 0b01 	adc.w	fp, r3, r1
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003954:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003958:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800395c:	4692      	mov	sl, r2
 800395e:	469b      	mov	fp, r3
 8003960:	4643      	mov	r3, r8
 8003962:	eb1a 0303 	adds.w	r3, sl, r3
 8003966:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800396a:	464b      	mov	r3, r9
 800396c:	eb4b 0303 	adc.w	r3, fp, r3
 8003970:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003980:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003984:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003988:	460b      	mov	r3, r1
 800398a:	18db      	adds	r3, r3, r3
 800398c:	643b      	str	r3, [r7, #64]	; 0x40
 800398e:	4613      	mov	r3, r2
 8003990:	eb42 0303 	adc.w	r3, r2, r3
 8003994:	647b      	str	r3, [r7, #68]	; 0x44
 8003996:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800399a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800399e:	f7fc fc77 	bl	8000290 <__aeabi_uldivmod>
 80039a2:	4602      	mov	r2, r0
 80039a4:	460b      	mov	r3, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <UART_SetConfig+0x2d4>)
 80039aa:	fba3 2301 	umull	r2, r3, r3, r1
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2264      	movs	r2, #100	; 0x64
 80039b2:	fb02 f303 	mul.w	r3, r2, r3
 80039b6:	1acb      	subs	r3, r1, r3
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039be:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <UART_SetConfig+0x2d4>)
 80039c0:	fba3 2302 	umull	r2, r3, r3, r2
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039cc:	441c      	add	r4, r3
 80039ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80039e8:	415b      	adcs	r3, r3
 80039ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039f0:	4641      	mov	r1, r8
 80039f2:	1851      	adds	r1, r2, r1
 80039f4:	6339      	str	r1, [r7, #48]	; 0x30
 80039f6:	4649      	mov	r1, r9
 80039f8:	414b      	adcs	r3, r1
 80039fa:	637b      	str	r3, [r7, #52]	; 0x34
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a08:	4659      	mov	r1, fp
 8003a0a:	00cb      	lsls	r3, r1, #3
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a12:	4651      	mov	r1, sl
 8003a14:	00ca      	lsls	r2, r1, #3
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4642      	mov	r2, r8
 8003a1e:	189b      	adds	r3, r3, r2
 8003a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a24:	464b      	mov	r3, r9
 8003a26:	460a      	mov	r2, r1
 8003a28:	eb42 0303 	adc.w	r3, r2, r3
 8003a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a44:	460b      	mov	r3, r1
 8003a46:	18db      	adds	r3, r3, r3
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	eb42 0303 	adc.w	r3, r2, r3
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a5a:	f7fc fc19 	bl	8000290 <__aeabi_uldivmod>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <UART_SetConfig+0x2d4>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2164      	movs	r1, #100	; 0x64
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	3332      	adds	r3, #50	; 0x32
 8003a76:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <UART_SetConfig+0x2d4>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	f003 0207 	and.w	r2, r3, #7
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4422      	add	r2, r4
 8003a8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a8c:	e106      	b.n	8003c9c <UART_SetConfig+0x4d8>
 8003a8e:	bf00      	nop
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40011400 	.word	0x40011400
 8003a98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003aa6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003aaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003aae:	4642      	mov	r2, r8
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	1891      	adds	r1, r2, r2
 8003ab4:	6239      	str	r1, [r7, #32]
 8003ab6:	415b      	adcs	r3, r3
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003abe:	4641      	mov	r1, r8
 8003ac0:	1854      	adds	r4, r2, r1
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	eb43 0501 	adc.w	r5, r3, r1
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	00eb      	lsls	r3, r5, #3
 8003ad2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad6:	00e2      	lsls	r2, r4, #3
 8003ad8:	4614      	mov	r4, r2
 8003ada:	461d      	mov	r5, r3
 8003adc:	4643      	mov	r3, r8
 8003ade:	18e3      	adds	r3, r4, r3
 8003ae0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ae4:	464b      	mov	r3, r9
 8003ae6:	eb45 0303 	adc.w	r3, r5, r3
 8003aea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b0a:	4629      	mov	r1, r5
 8003b0c:	008b      	lsls	r3, r1, #2
 8003b0e:	4621      	mov	r1, r4
 8003b10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b14:	4621      	mov	r1, r4
 8003b16:	008a      	lsls	r2, r1, #2
 8003b18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b1c:	f7fc fbb8 	bl	8000290 <__aeabi_uldivmod>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4b60      	ldr	r3, [pc, #384]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003b26:	fba3 2302 	umull	r2, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	011c      	lsls	r4, r3, #4
 8003b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b40:	4642      	mov	r2, r8
 8003b42:	464b      	mov	r3, r9
 8003b44:	1891      	adds	r1, r2, r2
 8003b46:	61b9      	str	r1, [r7, #24]
 8003b48:	415b      	adcs	r3, r3
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b50:	4641      	mov	r1, r8
 8003b52:	1851      	adds	r1, r2, r1
 8003b54:	6139      	str	r1, [r7, #16]
 8003b56:	4649      	mov	r1, r9
 8003b58:	414b      	adcs	r3, r1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b68:	4659      	mov	r1, fp
 8003b6a:	00cb      	lsls	r3, r1, #3
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b72:	4651      	mov	r1, sl
 8003b74:	00ca      	lsls	r2, r1, #3
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b84:	464b      	mov	r3, r9
 8003b86:	460a      	mov	r2, r1
 8003b88:	eb42 0303 	adc.w	r3, r2, r3
 8003b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ba8:	4649      	mov	r1, r9
 8003baa:	008b      	lsls	r3, r1, #2
 8003bac:	4641      	mov	r1, r8
 8003bae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	008a      	lsls	r2, r1, #2
 8003bb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003bba:	f7fc fb69 	bl	8000290 <__aeabi_uldivmod>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4b38      	ldr	r3, [pc, #224]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2264      	movs	r2, #100	; 0x64
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	1acb      	subs	r3, r1, r3
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	3332      	adds	r3, #50	; 0x32
 8003bd8:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003bda:	fba2 2303 	umull	r2, r3, r2, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be4:	441c      	add	r4, r3
 8003be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bea:	2200      	movs	r2, #0
 8003bec:	673b      	str	r3, [r7, #112]	; 0x70
 8003bee:	677a      	str	r2, [r7, #116]	; 0x74
 8003bf0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	1891      	adds	r1, r2, r2
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	415b      	adcs	r3, r3
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c04:	4641      	mov	r1, r8
 8003c06:	1851      	adds	r1, r2, r1
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	00cb      	lsls	r3, r1, #3
 8003c20:	4651      	mov	r1, sl
 8003c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c26:	4651      	mov	r1, sl
 8003c28:	00ca      	lsls	r2, r1, #3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4642      	mov	r2, r8
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c36:	464b      	mov	r3, r9
 8003c38:	460a      	mov	r2, r1
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	663b      	str	r3, [r7, #96]	; 0x60
 8003c4a:	667a      	str	r2, [r7, #100]	; 0x64
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c58:	4649      	mov	r1, r9
 8003c5a:	008b      	lsls	r3, r1, #2
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c62:	4641      	mov	r1, r8
 8003c64:	008a      	lsls	r2, r1, #2
 8003c66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c6a:	f7fc fb11 	bl	8000290 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4b0d      	ldr	r3, [pc, #52]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003c74:	fba3 1302 	umull	r1, r3, r3, r2
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	2164      	movs	r1, #100	; 0x64
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	3332      	adds	r3, #50	; 0x32
 8003c86:	4a08      	ldr	r2, [pc, #32]	; (8003ca8 <UART_SetConfig+0x4e4>)
 8003c88:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	f003 020f 	and.w	r2, r3, #15
 8003c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4422      	add	r2, r4
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ca8:	51eb851f 	.word	0x51eb851f

08003cac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cac:	b084      	sub	sp, #16
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	f107 001c 	add.w	r0, r7, #28
 8003cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003cbe:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d123      	bne.n	8003d0e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003cee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 faa0 	bl	8004248 <USB_CoreReset>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e01b      	b.n	8003d46 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fa94 	bl	8004248 <USB_CoreReset>
 8003d20:	4603      	mov	r3, r0
 8003d22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003d24:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	639a      	str	r2, [r3, #56]	; 0x38
 8003d38:	e005      	b.n	8003d46 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003d46:	7fbb      	ldrb	r3, [r7, #30]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10b      	bne.n	8003d64 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f043 0206 	orr.w	r2, r3, #6
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f043 0220 	orr.w	r2, r3, #32
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d70:	b004      	add	sp, #16
 8003d72:	4770      	bx	lr

08003d74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 0201 	bic.w	r2, r3, #1
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d115      	bne.n	8003de4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003dc4:	200a      	movs	r0, #10
 8003dc6:	f7fd fb35 	bl	8001434 <HAL_Delay>
      ms += 10U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	330a      	adds	r3, #10
 8003dce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fa2b 	bl	800422c <USB_GetMode>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d01e      	beq.n	8003e1a <USB_SetCurrentMode+0x84>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2bc7      	cmp	r3, #199	; 0xc7
 8003de0:	d9f0      	bls.n	8003dc4 <USB_SetCurrentMode+0x2e>
 8003de2:	e01a      	b.n	8003e1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d115      	bne.n	8003e16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003df6:	200a      	movs	r0, #10
 8003df8:	f7fd fb1c 	bl	8001434 <HAL_Delay>
      ms += 10U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	330a      	adds	r3, #10
 8003e00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa12 	bl	800422c <USB_GetMode>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <USB_SetCurrentMode+0x84>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2bc7      	cmp	r3, #199	; 0xc7
 8003e12:	d9f0      	bls.n	8003df6 <USB_SetCurrentMode+0x60>
 8003e14:	e001      	b.n	8003e1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e005      	b.n	8003e26 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2bc8      	cmp	r3, #200	; 0xc8
 8003e1e:	d101      	bne.n	8003e24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
	...

08003e30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e30:	b084      	sub	sp, #16
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
 8003e4e:	e009      	b.n	8003e64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	3340      	adds	r3, #64	; 0x40
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3301      	adds	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	2b0e      	cmp	r3, #14
 8003e68:	d9f2      	bls.n	8003e50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e6a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d11c      	bne.n	8003eac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e80:	f043 0302 	orr.w	r3, r3, #2
 8003e84:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
 8003eaa:	e00b      	b.n	8003ec4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ed0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d10d      	bne.n	8003ef4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f968 	bl	80041b8 <USB_SetDevSpeed>
 8003ee8:	e008      	b.n	8003efc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003eea:	2101      	movs	r1, #1
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f963 	bl	80041b8 <USB_SetDevSpeed>
 8003ef2:	e003      	b.n	8003efc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ef4:	2103      	movs	r1, #3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f95e 	bl	80041b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003efc:	2110      	movs	r1, #16
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f8fa 	bl	80040f8 <USB_FlushTxFifo>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f924 	bl	800415c <USB_FlushRxFifo>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	461a      	mov	r2, r3
 8003f26:	2300      	movs	r3, #0
 8003f28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f30:	461a      	mov	r2, r3
 8003f32:	2300      	movs	r3, #0
 8003f34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e043      	b.n	8003fd0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f5e:	d118      	bne.n	8003f92 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f72:	461a      	mov	r2, r3
 8003f74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e013      	b.n	8003fa4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	e008      	b.n	8003fa4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d3b5      	bcc.n	8003f48 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	e043      	b.n	800406a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff8:	d118      	bne.n	800402c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004012:	6013      	str	r3, [r2, #0]
 8004014:	e013      	b.n	800403e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	461a      	mov	r2, r3
 8004024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e008      	b.n	800403e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004038:	461a      	mov	r2, r3
 800403a:	2300      	movs	r3, #0
 800403c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404a:	461a      	mov	r2, r3
 800404c:	2300      	movs	r3, #0
 800404e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	461a      	mov	r2, r3
 800405e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004062:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	3301      	adds	r3, #1
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800406e:	461a      	mov	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4293      	cmp	r3, r2
 8004074:	d3b5      	bcc.n	8003fe2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004084:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004088:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004096:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f043 0210 	orr.w	r2, r3, #16
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <USB_DevInit+0x2c4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80040b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	f043 0208 	orr.w	r2, r3, #8
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80040cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d107      	bne.n	80040e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040f0:	b004      	add	sp, #16
 80040f2:	4770      	bx	lr
 80040f4:	803c3800 	.word	0x803c3800

080040f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3301      	adds	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004112:	d901      	bls.n	8004118 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e01b      	b.n	8004150 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	daf2      	bge.n	8004106 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	019b      	lsls	r3, r3, #6
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	3301      	adds	r3, #1
 8004134:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800413c:	d901      	bls.n	8004142 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e006      	b.n	8004150 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b20      	cmp	r3, #32
 800414c:	d0f0      	beq.n	8004130 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004174:	d901      	bls.n	800417a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e018      	b.n	80041ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	2b00      	cmp	r3, #0
 8004180:	daf2      	bge.n	8004168 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2210      	movs	r2, #16
 800418a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004198:	d901      	bls.n	800419e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e006      	b.n	80041ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d0f0      	beq.n	800418c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	68f9      	ldr	r1, [r7, #12]
 80041d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d8:	4313      	orrs	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b085      	sub	sp, #20
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004204:	f023 0303 	bic.w	r3, r3, #3
 8004208:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004218:	f043 0302 	orr.w	r3, r3, #2
 800421c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	f003 0301 	and.w	r3, r3, #1
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004260:	d901      	bls.n	8004266 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e01b      	b.n	800429e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	daf2      	bge.n	8004254 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f043 0201 	orr.w	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3301      	adds	r3, #1
 8004282:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800428a:	d901      	bls.n	8004290 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e006      	b.n	800429e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d0f0      	beq.n	800427e <USB_CoreReset+0x36>

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80042b2:	f000 fc47 	bl	8004b44 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80042b6:	4b12      	ldr	r3, [pc, #72]	; (8004300 <MX_LWIP_Init+0x54>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80042bc:	4b11      	ldr	r3, [pc, #68]	; (8004304 <MX_LWIP_Init+0x58>)
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <MX_LWIP_Init+0x5c>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80042c8:	4b10      	ldr	r3, [pc, #64]	; (800430c <MX_LWIP_Init+0x60>)
 80042ca:	9302      	str	r3, [sp, #8]
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <MX_LWIP_Init+0x64>)
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	2300      	movs	r3, #0
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <MX_LWIP_Init+0x5c>)
 80042d6:	4a0b      	ldr	r2, [pc, #44]	; (8004304 <MX_LWIP_Init+0x58>)
 80042d8:	4909      	ldr	r1, [pc, #36]	; (8004300 <MX_LWIP_Init+0x54>)
 80042da:	480e      	ldr	r0, [pc, #56]	; (8004314 <MX_LWIP_Init+0x68>)
 80042dc:	f001 f91e 	bl	800551c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80042e0:	480c      	ldr	r0, [pc, #48]	; (8004314 <MX_LWIP_Init+0x68>)
 80042e2:	f001 fad5 	bl	8005890 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80042e6:	480b      	ldr	r0, [pc, #44]	; (8004314 <MX_LWIP_Init+0x68>)
 80042e8:	f001 fae2 	bl	80058b0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80042ec:	490a      	ldr	r1, [pc, #40]	; (8004318 <MX_LWIP_Init+0x6c>)
 80042ee:	4809      	ldr	r0, [pc, #36]	; (8004314 <MX_LWIP_Init+0x68>)
 80042f0:	f001 fbe4 	bl	8005abc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80042f4:	4807      	ldr	r0, [pc, #28]	; (8004314 <MX_LWIP_Init+0x68>)
 80042f6:	f009 fbd5 	bl	800daa4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80042fa:	bf00      	nop
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	2000061c 	.word	0x2000061c
 8004304:	20000620 	.word	0x20000620
 8004308:	20000624 	.word	0x20000624
 800430c:	080114f5 	.word	0x080114f5
 8004310:	08004629 	.word	0x08004629
 8004314:	200005e4 	.word	0x200005e4
 8004318:	0800436d 	.word	0x0800436d

0800431c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004324:	f7fd f87a 	bl	800141c <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <Ethernet_Link_Periodic_Handle+0x30>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b63      	cmp	r3, #99	; 0x63
 8004332:	d907      	bls.n	8004344 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004334:	f7fd f872 	bl	800141c <HAL_GetTick>
 8004338:	4603      	mov	r3, r0
 800433a:	4a04      	ldr	r2, [pc, #16]	; (800434c <Ethernet_Link_Periodic_Handle+0x30>)
 800433c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fad6 	bl	80048f0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	200005e0 	.word	0x200005e0

08004350 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004354:	4804      	ldr	r0, [pc, #16]	; (8004368 <MX_LWIP_Process+0x18>)
 8004356:	f000 f947 	bl	80045e8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800435a:	f008 fb29 	bl	800c9b0 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800435e:	4802      	ldr	r0, [pc, #8]	; (8004368 <MX_LWIP_Process+0x18>)
 8004360:	f7ff ffdc 	bl	800431c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004364:	bf00      	nop
 8004366:	bd80      	pop	{r7, pc}
 8004368:	200005e4 	.word	0x200005e4

0800436c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800438c:	4b40      	ldr	r3, [pc, #256]	; (8004490 <low_level_init+0x110>)
 800438e:	4a41      	ldr	r2, [pc, #260]	; (8004494 <low_level_init+0x114>)
 8004390:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004392:	2300      	movs	r3, #0
 8004394:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800439a:	23e1      	movs	r3, #225	; 0xe1
 800439c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800439e:	2300      	movs	r3, #0
 80043a0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80043a2:	2300      	movs	r3, #0
 80043a4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80043a6:	2300      	movs	r3, #0
 80043a8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80043aa:	4a39      	ldr	r2, [pc, #228]	; (8004490 <low_level_init+0x110>)
 80043ac:	f107 0308 	add.w	r3, r7, #8
 80043b0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80043b2:	4b37      	ldr	r3, [pc, #220]	; (8004490 <low_level_init+0x110>)
 80043b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80043b8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80043ba:	4b35      	ldr	r3, [pc, #212]	; (8004490 <low_level_init+0x110>)
 80043bc:	4a36      	ldr	r2, [pc, #216]	; (8004498 <low_level_init+0x118>)
 80043be:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80043c0:	4b33      	ldr	r3, [pc, #204]	; (8004490 <low_level_init+0x110>)
 80043c2:	4a36      	ldr	r2, [pc, #216]	; (800449c <low_level_init+0x11c>)
 80043c4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80043c6:	4b32      	ldr	r3, [pc, #200]	; (8004490 <low_level_init+0x110>)
 80043c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80043cc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80043ce:	4830      	ldr	r0, [pc, #192]	; (8004490 <low_level_init+0x110>)
 80043d0:	f7fd f93a 	bl	8001648 <HAL_ETH_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80043d8:	2238      	movs	r2, #56	; 0x38
 80043da:	2100      	movs	r1, #0
 80043dc:	4830      	ldr	r0, [pc, #192]	; (80044a0 <low_level_init+0x120>)
 80043de:	f00d fac4 	bl	801196a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80043e2:	4b2f      	ldr	r3, [pc, #188]	; (80044a0 <low_level_init+0x120>)
 80043e4:	2221      	movs	r2, #33	; 0x21
 80043e6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80043e8:	4b2d      	ldr	r3, [pc, #180]	; (80044a0 <low_level_init+0x120>)
 80043ea:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80043ee:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <low_level_init+0x120>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80043f6:	482b      	ldr	r0, [pc, #172]	; (80044a4 <low_level_init+0x124>)
 80043f8:	f000 ff58 	bl	80052ac <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2206      	movs	r2, #6
 8004400:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004404:	4b22      	ldr	r3, [pc, #136]	; (8004490 <low_level_init+0x110>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004410:	4b1f      	ldr	r3, [pc, #124]	; (8004490 <low_level_init+0x110>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	785a      	ldrb	r2, [r3, #1]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800441c:	4b1c      	ldr	r3, [pc, #112]	; (8004490 <low_level_init+0x110>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	789a      	ldrb	r2, [r3, #2]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004428:	4b19      	ldr	r3, [pc, #100]	; (8004490 <low_level_init+0x110>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	78da      	ldrb	r2, [r3, #3]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <low_level_init+0x110>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	791a      	ldrb	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004440:	4b13      	ldr	r3, [pc, #76]	; (8004490 <low_level_init+0x110>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	795a      	ldrb	r2, [r3, #5]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004452:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800445a:	f043 030a 	orr.w	r3, r3, #10
 800445e:	b2da      	uxtb	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004466:	4910      	ldr	r1, [pc, #64]	; (80044a8 <low_level_init+0x128>)
 8004468:	4810      	ldr	r0, [pc, #64]	; (80044ac <low_level_init+0x12c>)
 800446a:	f7fc fe10 	bl	800108e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800446e:	480f      	ldr	r0, [pc, #60]	; (80044ac <low_level_init+0x12c>)
 8004470:	f7fc fe3f 	bl	80010f2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fa38 	bl	80048f0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004480:	e001      	b.n	8004486 <low_level_init+0x106>
    Error_Handler();
 8004482:	f7fc fa07 	bl	8000894 <Error_Handler>
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	200050f4 	.word	0x200050f4
 8004494:	40028000 	.word	0x40028000
 8004498:	20005054 	.word	0x20005054
 800449c:	20004fb4 	.word	0x20004fb4
 80044a0:	200051a4 	.word	0x200051a4
 80044a4:	080154c8 	.word	0x080154c8
 80044a8:	2000000c 	.word	0x2000000c
 80044ac:	200051dc 	.word	0x200051dc

080044b0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b092      	sub	sp, #72	; 0x48
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80044c8:	f107 030c 	add.w	r3, r7, #12
 80044cc:	2230      	movs	r2, #48	; 0x30
 80044ce:	2100      	movs	r1, #0
 80044d0:	4618      	mov	r0, r3
 80044d2:	f00d fa4a 	bl	801196a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	2230      	movs	r2, #48	; 0x30
 80044dc:	2100      	movs	r1, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	f00d fa43 	bl	801196a <memset>

  for(q = p; q != NULL; q = q->next)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	643b      	str	r3, [r7, #64]	; 0x40
 80044e8:	e045      	b.n	8004576 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80044ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d902      	bls.n	80044f6 <low_level_output+0x46>
      return ERR_IF;
 80044f0:	f06f 030b 	mvn.w	r3, #11
 80044f4:	e055      	b.n	80045a2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80044f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f8:	6859      	ldr	r1, [r3, #4]
 80044fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044fc:	4613      	mov	r3, r2
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	3348      	adds	r3, #72	; 0x48
 8004506:	443b      	add	r3, r7
 8004508:	3b3c      	subs	r3, #60	; 0x3c
 800450a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450e:	895b      	ldrh	r3, [r3, #10]
 8004510:	4619      	mov	r1, r3
 8004512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	3348      	adds	r3, #72	; 0x48
 800451e:	443b      	add	r3, r7
 8004520:	3b38      	subs	r3, #56	; 0x38
 8004522:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004526:	2b00      	cmp	r3, #0
 8004528:	d011      	beq.n	800454e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800452a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800452c:	1e5a      	subs	r2, r3, #1
 800452e:	f107 000c 	add.w	r0, r7, #12
 8004532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004534:	460b      	mov	r3, r1
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	440b      	add	r3, r1
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	18c1      	adds	r1, r0, r3
 800453e:	4613      	mov	r3, r2
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	4413      	add	r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	3348      	adds	r3, #72	; 0x48
 8004548:	443b      	add	r3, r7
 800454a:	3b34      	subs	r3, #52	; 0x34
 800454c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800454e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004556:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004558:	4613      	mov	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	3348      	adds	r3, #72	; 0x48
 8004562:	443b      	add	r3, r7
 8004564:	3b34      	subs	r3, #52	; 0x34
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
    }

    i++;
 800456a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800456c:	3301      	adds	r3, #1
 800456e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	643b      	str	r3, [r7, #64]	; 0x40
 8004576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1b6      	bne.n	80044ea <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	891b      	ldrh	r3, [r3, #8]
 8004580:	461a      	mov	r2, r3
 8004582:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <low_level_output+0xfc>)
 8004584:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004586:	4a09      	ldr	r2, [pc, #36]	; (80045ac <low_level_output+0xfc>)
 8004588:	f107 030c 	add.w	r3, r7, #12
 800458c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800458e:	4a07      	ldr	r2, [pc, #28]	; (80045ac <low_level_output+0xfc>)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004594:	2214      	movs	r2, #20
 8004596:	4905      	ldr	r1, [pc, #20]	; (80045ac <low_level_output+0xfc>)
 8004598:	4805      	ldr	r0, [pc, #20]	; (80045b0 <low_level_output+0x100>)
 800459a:	f7fd f98b 	bl	80018b4 <HAL_ETH_Transmit>

  return errval;
 800459e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3748      	adds	r7, #72	; 0x48
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	200051a4 	.word	0x200051a4
 80045b0:	200050f4 	.word	0x200050f4

080045b4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <low_level_input+0x2c>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80045c8:	f107 030c 	add.w	r3, r7, #12
 80045cc:	4619      	mov	r1, r3
 80045ce:	4805      	ldr	r0, [pc, #20]	; (80045e4 <low_level_input+0x30>)
 80045d0:	f7fd fa04 	bl	80019dc <HAL_ETH_ReadData>
  }

  return p;
 80045d4:	68fb      	ldr	r3, [r7, #12]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20004fb0 	.word	0x20004fb0
 80045e4:	200050f4 	.word	0x200050f4

080045e8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f7ff ffdd 	bl	80045b4 <low_level_input>
 80045fa:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	4798      	blx	r3
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f001 fdd2 	bl	80061bc <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d1ea      	bne.n	80045f4 <ethernetif_input+0xc>
}
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <ethernetif_init+0x1c>
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <ethernetif_init+0x48>)
 8004638:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800463c:	490d      	ldr	r1, [pc, #52]	; (8004674 <ethernetif_init+0x4c>)
 800463e:	480e      	ldr	r0, [pc, #56]	; (8004678 <ethernetif_init+0x50>)
 8004640:	f00d f92e 	bl	80118a0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2273      	movs	r2, #115	; 0x73
 8004648:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2274      	movs	r2, #116	; 0x74
 8004650:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a09      	ldr	r2, [pc, #36]	; (800467c <ethernetif_init+0x54>)
 8004658:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a08      	ldr	r2, [pc, #32]	; (8004680 <ethernetif_init+0x58>)
 800465e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff fe8d 	bl	8004380 <low_level_init>

  return ERR_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	08012730 	.word	0x08012730
 8004674:	0801274c 	.word	0x0801274c
 8004678:	0801275c 	.word	0x0801275c
 800467c:	0800f971 	.word	0x0800f971
 8004680:	080044b1 	.word	0x080044b1

08004684 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	4807      	ldr	r0, [pc, #28]	; (80046b0 <pbuf_free_custom+0x2c>)
 8004694:	f000 feec 	bl	8005470 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <pbuf_free_custom+0x30>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d102      	bne.n	80046a6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80046a0:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <pbuf_free_custom+0x30>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
  }
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	080154c8 	.word	0x080154c8
 80046b4:	20004fb0 	.word	0x20004fb0

080046b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80046bc:	f7fc feae 	bl	800141c <HAL_GetTick>
 80046c0:	4603      	mov	r3, r0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08e      	sub	sp, #56	; 0x38
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a55      	ldr	r2, [pc, #340]	; (800483c <HAL_ETH_MspInit+0x174>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	f040 80a4 	bne.w	8004834 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80046ec:	2300      	movs	r3, #0
 80046ee:	623b      	str	r3, [r7, #32]
 80046f0:	4b53      	ldr	r3, [pc, #332]	; (8004840 <HAL_ETH_MspInit+0x178>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	4a52      	ldr	r2, [pc, #328]	; (8004840 <HAL_ETH_MspInit+0x178>)
 80046f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046fa:	6313      	str	r3, [r2, #48]	; 0x30
 80046fc:	4b50      	ldr	r3, [pc, #320]	; (8004840 <HAL_ETH_MspInit+0x178>)
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004704:	623b      	str	r3, [r7, #32]
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]
 800470c:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	4a4b      	ldr	r2, [pc, #300]	; (8004840 <HAL_ETH_MspInit+0x178>)
 8004712:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004716:	6313      	str	r3, [r2, #48]	; 0x30
 8004718:	4b49      	ldr	r3, [pc, #292]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004720:	61fb      	str	r3, [r7, #28]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	2300      	movs	r3, #0
 8004726:	61bb      	str	r3, [r7, #24]
 8004728:	4b45      	ldr	r3, [pc, #276]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	4a44      	ldr	r2, [pc, #272]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800472e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004732:	6313      	str	r3, [r2, #48]	; 0x30
 8004734:	4b42      	ldr	r3, [pc, #264]	; (8004840 <HAL_ETH_MspInit+0x178>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	4b3e      	ldr	r3, [pc, #248]	; (8004840 <HAL_ETH_MspInit+0x178>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	4a3d      	ldr	r2, [pc, #244]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	6313      	str	r3, [r2, #48]	; 0x30
 8004750:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <HAL_ETH_MspInit+0x178>)
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	4b37      	ldr	r3, [pc, #220]	; (8004840 <HAL_ETH_MspInit+0x178>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004764:	4a36      	ldr	r2, [pc, #216]	; (8004840 <HAL_ETH_MspInit+0x178>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6313      	str	r3, [r2, #48]	; 0x30
 800476c:	4b34      	ldr	r3, [pc, #208]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004778:	2300      	movs	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	4b30      	ldr	r3, [pc, #192]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	4a2f      	ldr	r2, [pc, #188]	; (8004840 <HAL_ETH_MspInit+0x178>)
 8004782:	f043 0302 	orr.w	r3, r3, #2
 8004786:	6313      	str	r3, [r2, #48]	; 0x30
 8004788:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]
 8004798:	4b29      	ldr	r3, [pc, #164]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	4a28      	ldr	r2, [pc, #160]	; (8004840 <HAL_ETH_MspInit+0x178>)
 800479e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047a2:	6313      	str	r3, [r2, #48]	; 0x30
 80047a4:	4b26      	ldr	r3, [pc, #152]	; (8004840 <HAL_ETH_MspInit+0x178>)
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80047b0:	2332      	movs	r3, #50	; 0x32
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b4:	2302      	movs	r3, #2
 80047b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047bc:	2303      	movs	r3, #3
 80047be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047c0:	230b      	movs	r3, #11
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c8:	4619      	mov	r1, r3
 80047ca:	481e      	ldr	r0, [pc, #120]	; (8004844 <HAL_ETH_MspInit+0x17c>)
 80047cc:	f7fe f83e 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80047d0:	2386      	movs	r3, #134	; 0x86
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d4:	2302      	movs	r3, #2
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047dc:	2303      	movs	r3, #3
 80047de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047e0:	230b      	movs	r3, #11
 80047e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e8:	4619      	mov	r1, r3
 80047ea:	4817      	ldr	r0, [pc, #92]	; (8004848 <HAL_ETH_MspInit+0x180>)
 80047ec:	f7fe f82e 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80047f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f6:	2302      	movs	r3, #2
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fe:	2303      	movs	r3, #3
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004802:	230b      	movs	r3, #11
 8004804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800480a:	4619      	mov	r1, r3
 800480c:	480f      	ldr	r0, [pc, #60]	; (800484c <HAL_ETH_MspInit+0x184>)
 800480e:	f7fe f81d 	bl	800284c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004812:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004820:	2303      	movs	r3, #3
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004824:	230b      	movs	r3, #11
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800482c:	4619      	mov	r1, r3
 800482e:	4808      	ldr	r0, [pc, #32]	; (8004850 <HAL_ETH_MspInit+0x188>)
 8004830:	f7fe f80c 	bl	800284c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004834:	bf00      	nop
 8004836:	3738      	adds	r7, #56	; 0x38
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40028000 	.word	0x40028000
 8004840:	40023800 	.word	0x40023800
 8004844:	40020800 	.word	0x40020800
 8004848:	40020000 	.word	0x40020000
 800484c:	40020400 	.word	0x40020400
 8004850:	40021800 	.word	0x40021800

08004854 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004858:	4802      	ldr	r0, [pc, #8]	; (8004864 <ETH_PHY_IO_Init+0x10>)
 800485a:	f7fd fb9b 	bl	8001f94 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	200050f4 	.word	0x200050f4

08004868 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return 0;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	4807      	ldr	r0, [pc, #28]	; (80048a8 <ETH_PHY_IO_ReadReg+0x30>)
 800488c:	f7fd f9ea 	bl	8001c64 <HAL_ETH_ReadPHYRegister>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	e000      	b.n	800489e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	200050f4 	.word	0x200050f4

080048ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	68f9      	ldr	r1, [r7, #12]
 80048be:	4807      	ldr	r0, [pc, #28]	; (80048dc <ETH_PHY_IO_WriteReg+0x30>)
 80048c0:	f7fd fa1b 	bl	8001cfa <HAL_ETH_WritePHYRegister>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80048ca:	f04f 33ff 	mov.w	r3, #4294967295
 80048ce:	e000      	b.n	80048d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	200050f4 	.word	0x200050f4

080048e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80048e4:	f7fc fd9a 	bl	800141c <HAL_GetTick>
 80048e8:	4603      	mov	r3, r0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b0a0      	sub	sp, #128	; 0x80
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	2264      	movs	r2, #100	; 0x64
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f00d f832 	bl	801196a <memset>
  int32_t PHYLinkState = 0;
 8004906:	2300      	movs	r3, #0
 8004908:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800490e:	2300      	movs	r3, #0
 8004910:	67bb      	str	r3, [r7, #120]	; 0x78
 8004912:	2300      	movs	r3, #0
 8004914:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004916:	483a      	ldr	r0, [pc, #232]	; (8004a00 <ethernet_link_check_state+0x110>)
 8004918:	f7fc fc93 	bl	8001242 <LAN8742_GetLinkState>
 800491c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00c      	beq.n	800494a <ethernet_link_check_state+0x5a>
 8004930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004932:	2b01      	cmp	r3, #1
 8004934:	dc09      	bgt.n	800494a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004936:	4833      	ldr	r0, [pc, #204]	; (8004a04 <ethernet_link_check_state+0x114>)
 8004938:	f7fc ff63 	bl	8001802 <HAL_ETH_Stop>
    netif_set_down(netif);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f001 f823 	bl	8005988 <netif_set_down>
    netif_set_link_down(netif);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f001 f88a 	bl	8005a5c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004948:	e055      	b.n	80049f6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d14e      	bne.n	80049f6 <ethernet_link_check_state+0x106>
 8004958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800495a:	2b01      	cmp	r3, #1
 800495c:	dd4b      	ble.n	80049f6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800495e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004960:	3b02      	subs	r3, #2
 8004962:	2b03      	cmp	r3, #3
 8004964:	d82a      	bhi.n	80049bc <ethernet_link_check_state+0xcc>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <ethernet_link_check_state+0x7c>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	0800497d 	.word	0x0800497d
 8004970:	0800498f 	.word	0x0800498f
 8004974:	0800499f 	.word	0x0800499f
 8004978:	080049af 	.word	0x080049af
      duplex = ETH_FULLDUPLEX_MODE;
 800497c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004980:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004982:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004986:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004988:	2301      	movs	r3, #1
 800498a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800498c:	e017      	b.n	80049be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800498e:	2300      	movs	r3, #0
 8004990:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004992:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004996:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004998:	2301      	movs	r3, #1
 800499a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800499c:	e00f      	b.n	80049be <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800499e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049a2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80049a4:	2300      	movs	r3, #0
 80049a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80049a8:	2301      	movs	r3, #1
 80049aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80049ac:	e007      	b.n	80049be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80049b2:	2300      	movs	r3, #0
 80049b4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80049ba:	e000      	b.n	80049be <ethernet_link_check_state+0xce>
      break;
 80049bc:	bf00      	nop
    if(linkchanged)
 80049be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d018      	beq.n	80049f6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	4619      	mov	r1, r3
 80049ca:	480e      	ldr	r0, [pc, #56]	; (8004a04 <ethernet_link_check_state+0x114>)
 80049cc:	f7fd f9de 	bl	8001d8c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80049d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049d2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80049d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049d6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80049d8:	f107 030c 	add.w	r3, r7, #12
 80049dc:	4619      	mov	r1, r3
 80049de:	4809      	ldr	r0, [pc, #36]	; (8004a04 <ethernet_link_check_state+0x114>)
 80049e0:	f7fd fabe 	bl	8001f60 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80049e4:	4807      	ldr	r0, [pc, #28]	; (8004a04 <ethernet_link_check_state+0x114>)
 80049e6:	f7fc fead 	bl	8001744 <HAL_ETH_Start>
      netif_set_up(netif);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 ff60 	bl	80058b0 <netif_set_up>
      netif_set_link_up(netif);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 fffb 	bl	80059ec <netif_set_link_up>
}
 80049f6:	bf00      	nop
 80049f8:	3780      	adds	r7, #128	; 0x80
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	200051dc 	.word	0x200051dc
 8004a04:	200050f4 	.word	0x200050f4

08004a08 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af02      	add	r7, sp, #8
 8004a0e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004a10:	4812      	ldr	r0, [pc, #72]	; (8004a5c <HAL_ETH_RxAllocateCallback+0x54>)
 8004a12:	f000 fcbf 	bl	8005394 <memp_malloc_pool>
 8004a16:	60f8      	str	r0, [r7, #12]
  if (p)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d014      	beq.n	8004a48 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f103 0220 	add.w	r2, r3, #32
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4a0d      	ldr	r2, [pc, #52]	; (8004a60 <HAL_ETH_RxAllocateCallback+0x58>)
 8004a2c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004a36:	9201      	str	r2, [sp, #4]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2241      	movs	r2, #65	; 0x41
 8004a3e:	2100      	movs	r1, #0
 8004a40:	2000      	movs	r0, #0
 8004a42:	f001 fa01 	bl	8005e48 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004a46:	e005      	b.n	8004a54 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_ETH_RxAllocateCallback+0x5c>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
}
 8004a54:	bf00      	nop
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	080154c8 	.word	0x080154c8
 8004a60:	08004685 	.word	0x08004685
 8004a64:	20004fb0 	.word	0x20004fb0

08004a68 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	3b20      	subs	r3, #32
 8004a86:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	2200      	movs	r2, #0
 8004a92:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	887a      	ldrh	r2, [r7, #2]
 8004a98:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d103      	bne.n	8004aaa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	e003      	b.n	8004ab2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69fa      	ldr	r2, [r7, #28]
 8004ab0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	61fb      	str	r3, [r7, #28]
 8004abe:	e009      	b.n	8004ad4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	891a      	ldrh	r2, [r3, #8]
 8004ac4:	887b      	ldrh	r3, [r7, #2]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	61fb      	str	r3, [r7, #28]
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f2      	bne.n	8004ac0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004ada:	bf00      	nop
 8004adc:	bf00      	nop
 8004ade:	3724      	adds	r7, #36	; 0x24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	b21a      	sxth	r2, r3
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	0a1b      	lsrs	r3, r3, #8
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	b21b      	sxth	r3, r3
 8004b00:	4313      	orrs	r3, r2
 8004b02:	b21b      	sxth	r3, r3
 8004b04:	b29b      	uxth	r3, r3
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	061a      	lsls	r2, r3, #24
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0e1b      	lsrs	r3, r3, #24
 8004b36:	4313      	orrs	r3, r2
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004b4e:	f000 f8d5 	bl	8004cfc <mem_init>
  memp_init();
 8004b52:	f000 fbdb 	bl	800530c <memp_init>
  pbuf_init();
  netif_init();
 8004b56:	f000 fcd9 	bl	800550c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004b5a:	f007 ff6b 	bl	800ca34 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004b5e:	f001 fdcb 	bl	80066f8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004b62:	f007 fedd 	bl	800c920 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
	...

08004b70 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <ptr_to_mem+0x20>)
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	4413      	add	r3, r2
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20005868 	.word	0x20005868

08004b94 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <mem_to_ptr+0x20>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	b29b      	uxth	r3, r3
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20005868 	.word	0x20005868

08004bb8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8004bb8:	b590      	push	{r4, r7, lr}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8004bc0:	4b45      	ldr	r3, [pc, #276]	; (8004cd8 <plug_holes+0x120>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d206      	bcs.n	8004bd8 <plug_holes+0x20>
 8004bca:	4b44      	ldr	r3, [pc, #272]	; (8004cdc <plug_holes+0x124>)
 8004bcc:	f240 12df 	movw	r2, #479	; 0x1df
 8004bd0:	4943      	ldr	r1, [pc, #268]	; (8004ce0 <plug_holes+0x128>)
 8004bd2:	4844      	ldr	r0, [pc, #272]	; (8004ce4 <plug_holes+0x12c>)
 8004bd4:	f00c fe64 	bl	80118a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8004bd8:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <plug_holes+0x130>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d306      	bcc.n	8004bf0 <plug_holes+0x38>
 8004be2:	4b3e      	ldr	r3, [pc, #248]	; (8004cdc <plug_holes+0x124>)
 8004be4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004be8:	4940      	ldr	r1, [pc, #256]	; (8004cec <plug_holes+0x134>)
 8004bea:	483e      	ldr	r0, [pc, #248]	; (8004ce4 <plug_holes+0x12c>)
 8004bec:	f00c fe58 	bl	80118a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	791b      	ldrb	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d006      	beq.n	8004c06 <plug_holes+0x4e>
 8004bf8:	4b38      	ldr	r3, [pc, #224]	; (8004cdc <plug_holes+0x124>)
 8004bfa:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004bfe:	493c      	ldr	r1, [pc, #240]	; (8004cf0 <plug_holes+0x138>)
 8004c00:	4838      	ldr	r0, [pc, #224]	; (8004ce4 <plug_holes+0x12c>)
 8004c02:	f00c fe4d 	bl	80118a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c0e:	d906      	bls.n	8004c1e <plug_holes+0x66>
 8004c10:	4b32      	ldr	r3, [pc, #200]	; (8004cdc <plug_holes+0x124>)
 8004c12:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004c16:	4937      	ldr	r1, [pc, #220]	; (8004cf4 <plug_holes+0x13c>)
 8004c18:	4832      	ldr	r0, [pc, #200]	; (8004ce4 <plug_holes+0x12c>)
 8004c1a:	f00c fe41 	bl	80118a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff ffa4 	bl	8004b70 <ptr_to_mem>
 8004c28:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d024      	beq.n	8004c7c <plug_holes+0xc4>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	791b      	ldrb	r3, [r3, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d120      	bne.n	8004c7c <plug_holes+0xc4>
 8004c3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ce8 <plug_holes+0x130>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d01b      	beq.n	8004c7c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004c44:	4b2c      	ldr	r3, [pc, #176]	; (8004cf8 <plug_holes+0x140>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d102      	bne.n	8004c54 <plug_holes+0x9c>
      lfree = mem;
 8004c4e:	4a2a      	ldr	r2, [pc, #168]	; (8004cf8 <plug_holes+0x140>)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	881a      	ldrh	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004c64:	d00a      	beq.n	8004c7c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff ff80 	bl	8004b70 <ptr_to_mem>
 8004c70:	4604      	mov	r4, r0
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff ff8e 	bl	8004b94 <mem_to_ptr>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	885b      	ldrh	r3, [r3, #2]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff ff75 	bl	8004b70 <ptr_to_mem>
 8004c86:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d01f      	beq.n	8004cd0 <plug_holes+0x118>
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	791b      	ldrb	r3, [r3, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d11b      	bne.n	8004cd0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <plug_holes+0x140>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d102      	bne.n	8004ca8 <plug_holes+0xf0>
      lfree = pmem;
 8004ca2:	4a15      	ldr	r2, [pc, #84]	; (8004cf8 <plug_holes+0x140>)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	881b      	ldrh	r3, [r3, #0]
 8004cb4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004cb8:	d00a      	beq.n	8004cd0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ff56 	bl	8004b70 <ptr_to_mem>
 8004cc4:	4604      	mov	r4, r0
 8004cc6:	68b8      	ldr	r0, [r7, #8]
 8004cc8:	f7ff ff64 	bl	8004b94 <mem_to_ptr>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd90      	pop	{r4, r7, pc}
 8004cd8:	20005868 	.word	0x20005868
 8004cdc:	08012784 	.word	0x08012784
 8004ce0:	080127b4 	.word	0x080127b4
 8004ce4:	080127cc 	.word	0x080127cc
 8004ce8:	2000586c 	.word	0x2000586c
 8004cec:	080127f4 	.word	0x080127f4
 8004cf0:	08012810 	.word	0x08012810
 8004cf4:	0801282c 	.word	0x0801282c
 8004cf8:	20005870 	.word	0x20005870

08004cfc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004d02:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <mem_init+0x68>)
 8004d04:	3303      	adds	r3, #3
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4b16      	ldr	r3, [pc, #88]	; (8004d68 <mem_init+0x6c>)
 8004d0e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004d10:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <mem_init+0x6c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004d1c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004d2a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004d2e:	f7ff ff1f 	bl	8004b70 <ptr_to_mem>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4a0d      	ldr	r2, [pc, #52]	; (8004d6c <mem_init+0x70>)
 8004d36:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004d38:	4b0c      	ldr	r3, [pc, #48]	; (8004d6c <mem_init+0x70>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <mem_init+0x70>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004d48:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <mem_init+0x70>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004d52:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <mem_init+0x6c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a05      	ldr	r2, [pc, #20]	; (8004d70 <mem_init+0x74>)
 8004d5a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20005214 	.word	0x20005214
 8004d68:	20005868 	.word	0x20005868
 8004d6c:	2000586c 	.word	0x2000586c
 8004d70:	20005870 	.word	0x20005870

08004d74 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff ff09 	bl	8004b94 <mem_to_ptr>
 8004d82:	4603      	mov	r3, r0
 8004d84:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fef0 	bl	8004b70 <ptr_to_mem>
 8004d90:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	885b      	ldrh	r3, [r3, #2]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff feea 	bl	8004b70 <ptr_to_mem>
 8004d9c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004da6:	d818      	bhi.n	8004dda <mem_link_valid+0x66>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	885b      	ldrh	r3, [r3, #2]
 8004dac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004db0:	d813      	bhi.n	8004dda <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004db6:	8afa      	ldrh	r2, [r7, #22]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d004      	beq.n	8004dc6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	8afa      	ldrh	r2, [r7, #22]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d109      	bne.n	8004dda <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004dc6:	4b08      	ldr	r3, [pc, #32]	; (8004de8 <mem_link_valid+0x74>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d006      	beq.n	8004dde <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	885b      	ldrh	r3, [r3, #2]
 8004dd4:	8afa      	ldrh	r2, [r7, #22]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d001      	beq.n	8004dde <mem_link_valid+0x6a>
    return 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e000      	b.n	8004de0 <mem_link_valid+0x6c>
  }
  return 1;
 8004dde:	2301      	movs	r3, #1
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	2000586c 	.word	0x2000586c

08004dec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d04c      	beq.n	8004e94 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <mem_free+0xb0>)
 8004e06:	f240 2273 	movw	r2, #627	; 0x273
 8004e0a:	4925      	ldr	r1, [pc, #148]	; (8004ea0 <mem_free+0xb4>)
 8004e0c:	4825      	ldr	r0, [pc, #148]	; (8004ea4 <mem_free+0xb8>)
 8004e0e:	f00c fd47 	bl	80118a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004e12:	e040      	b.n	8004e96 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3b08      	subs	r3, #8
 8004e18:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <mem_free+0xbc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d306      	bcc.n	8004e32 <mem_free+0x46>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f103 020c 	add.w	r2, r3, #12
 8004e2a:	4b20      	ldr	r3, [pc, #128]	; (8004eac <mem_free+0xc0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d907      	bls.n	8004e42 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004e32:	4b1a      	ldr	r3, [pc, #104]	; (8004e9c <mem_free+0xb0>)
 8004e34:	f240 227f 	movw	r2, #639	; 0x27f
 8004e38:	491d      	ldr	r1, [pc, #116]	; (8004eb0 <mem_free+0xc4>)
 8004e3a:	481a      	ldr	r0, [pc, #104]	; (8004ea4 <mem_free+0xb8>)
 8004e3c:	f00c fd30 	bl	80118a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004e40:	e029      	b.n	8004e96 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	791b      	ldrb	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d107      	bne.n	8004e5a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004e4a:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <mem_free+0xb0>)
 8004e4c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004e50:	4918      	ldr	r1, [pc, #96]	; (8004eb4 <mem_free+0xc8>)
 8004e52:	4814      	ldr	r0, [pc, #80]	; (8004ea4 <mem_free+0xb8>)
 8004e54:	f00c fd24 	bl	80118a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004e58:	e01d      	b.n	8004e96 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff ff8a 	bl	8004d74 <mem_link_valid>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d107      	bne.n	8004e76 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004e66:	4b0d      	ldr	r3, [pc, #52]	; (8004e9c <mem_free+0xb0>)
 8004e68:	f240 2295 	movw	r2, #661	; 0x295
 8004e6c:	4912      	ldr	r1, [pc, #72]	; (8004eb8 <mem_free+0xcc>)
 8004e6e:	480d      	ldr	r0, [pc, #52]	; (8004ea4 <mem_free+0xb8>)
 8004e70:	f00c fd16 	bl	80118a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004e74:	e00f      	b.n	8004e96 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004e7c:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <mem_free+0xd0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d202      	bcs.n	8004e8c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004e86:	4a0d      	ldr	r2, [pc, #52]	; (8004ebc <mem_free+0xd0>)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff fe93 	bl	8004bb8 <plug_holes>
 8004e92:	e000      	b.n	8004e96 <mem_free+0xaa>
    return;
 8004e94:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	08012784 	.word	0x08012784
 8004ea0:	08012858 	.word	0x08012858
 8004ea4:	080127cc 	.word	0x080127cc
 8004ea8:	20005868 	.word	0x20005868
 8004eac:	2000586c 	.word	0x2000586c
 8004eb0:	0801287c 	.word	0x0801287c
 8004eb4:	08012898 	.word	0x08012898
 8004eb8:	080128c0 	.word	0x080128c0
 8004ebc:	20005870 	.word	0x20005870

08004ec0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004ecc:	887b      	ldrh	r3, [r7, #2]
 8004ece:	3303      	adds	r3, #3
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f023 0303 	bic.w	r3, r3, #3
 8004ed6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004ed8:	8bfb      	ldrh	r3, [r7, #30]
 8004eda:	2b0b      	cmp	r3, #11
 8004edc:	d801      	bhi.n	8004ee2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004ede:	230c      	movs	r3, #12
 8004ee0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004ee2:	8bfb      	ldrh	r3, [r7, #30]
 8004ee4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ee8:	d803      	bhi.n	8004ef2 <mem_trim+0x32>
 8004eea:	8bfa      	ldrh	r2, [r7, #30]
 8004eec:	887b      	ldrh	r3, [r7, #2]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d201      	bcs.n	8004ef6 <mem_trim+0x36>
    return NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e0cc      	b.n	8005090 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004ef6:	4b68      	ldr	r3, [pc, #416]	; (8005098 <mem_trim+0x1d8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d304      	bcc.n	8004f0a <mem_trim+0x4a>
 8004f00:	4b66      	ldr	r3, [pc, #408]	; (800509c <mem_trim+0x1dc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d306      	bcc.n	8004f18 <mem_trim+0x58>
 8004f0a:	4b65      	ldr	r3, [pc, #404]	; (80050a0 <mem_trim+0x1e0>)
 8004f0c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004f10:	4964      	ldr	r1, [pc, #400]	; (80050a4 <mem_trim+0x1e4>)
 8004f12:	4865      	ldr	r0, [pc, #404]	; (80050a8 <mem_trim+0x1e8>)
 8004f14:	f00c fcc4 	bl	80118a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004f18:	4b5f      	ldr	r3, [pc, #380]	; (8005098 <mem_trim+0x1d8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d304      	bcc.n	8004f2c <mem_trim+0x6c>
 8004f22:	4b5e      	ldr	r3, [pc, #376]	; (800509c <mem_trim+0x1dc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d301      	bcc.n	8004f30 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	e0af      	b.n	8005090 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3b08      	subs	r3, #8
 8004f34:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004f36:	69b8      	ldr	r0, [r7, #24]
 8004f38:	f7ff fe2c 	bl	8004b94 <mem_to_ptr>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	881a      	ldrh	r2, [r3, #0]
 8004f44:	8afb      	ldrh	r3, [r7, #22]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b08      	subs	r3, #8
 8004f4c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004f4e:	8bfa      	ldrh	r2, [r7, #30]
 8004f50:	8abb      	ldrh	r3, [r7, #20]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d906      	bls.n	8004f64 <mem_trim+0xa4>
 8004f56:	4b52      	ldr	r3, [pc, #328]	; (80050a0 <mem_trim+0x1e0>)
 8004f58:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004f5c:	4953      	ldr	r1, [pc, #332]	; (80050ac <mem_trim+0x1ec>)
 8004f5e:	4852      	ldr	r0, [pc, #328]	; (80050a8 <mem_trim+0x1e8>)
 8004f60:	f00c fc9e 	bl	80118a0 <iprintf>
  if (newsize > size) {
 8004f64:	8bfa      	ldrh	r2, [r7, #30]
 8004f66:	8abb      	ldrh	r3, [r7, #20]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d901      	bls.n	8004f70 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e08f      	b.n	8005090 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004f70:	8bfa      	ldrh	r2, [r7, #30]
 8004f72:	8abb      	ldrh	r3, [r7, #20]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d101      	bne.n	8004f7c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	e089      	b.n	8005090 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff fdf5 	bl	8004b70 <ptr_to_mem>
 8004f86:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	791b      	ldrb	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d13f      	bne.n	8005010 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	881b      	ldrh	r3, [r3, #0]
 8004f94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004f98:	d106      	bne.n	8004fa8 <mem_trim+0xe8>
 8004f9a:	4b41      	ldr	r3, [pc, #260]	; (80050a0 <mem_trim+0x1e0>)
 8004f9c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004fa0:	4943      	ldr	r1, [pc, #268]	; (80050b0 <mem_trim+0x1f0>)
 8004fa2:	4841      	ldr	r0, [pc, #260]	; (80050a8 <mem_trim+0x1e8>)
 8004fa4:	f00c fc7c 	bl	80118a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004fae:	8afa      	ldrh	r2, [r7, #22]
 8004fb0:	8bfb      	ldrh	r3, [r7, #30]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3308      	adds	r3, #8
 8004fb8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004fba:	4b3e      	ldr	r3, [pc, #248]	; (80050b4 <mem_trim+0x1f4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d106      	bne.n	8004fd2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004fc4:	89fb      	ldrh	r3, [r7, #14]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7ff fdd2 	bl	8004b70 <ptr_to_mem>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4a39      	ldr	r2, [pc, #228]	; (80050b4 <mem_trim+0x1f4>)
 8004fd0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004fd2:	89fb      	ldrh	r3, [r7, #14]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fdcb 	bl	8004b70 <ptr_to_mem>
 8004fda:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	89ba      	ldrh	r2, [r7, #12]
 8004fe6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	8afa      	ldrh	r2, [r7, #22]
 8004fec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	89fa      	ldrh	r2, [r7, #14]
 8004ff2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004ffc:	d047      	beq.n	800508e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff fdb4 	bl	8004b70 <ptr_to_mem>
 8005008:	4602      	mov	r2, r0
 800500a:	89fb      	ldrh	r3, [r7, #14]
 800500c:	8053      	strh	r3, [r2, #2]
 800500e:	e03e      	b.n	800508e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005010:	8bfb      	ldrh	r3, [r7, #30]
 8005012:	f103 0214 	add.w	r2, r3, #20
 8005016:	8abb      	ldrh	r3, [r7, #20]
 8005018:	429a      	cmp	r2, r3
 800501a:	d838      	bhi.n	800508e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800501c:	8afa      	ldrh	r2, [r7, #22]
 800501e:	8bfb      	ldrh	r3, [r7, #30]
 8005020:	4413      	add	r3, r2
 8005022:	b29b      	uxth	r3, r3
 8005024:	3308      	adds	r3, #8
 8005026:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005030:	d106      	bne.n	8005040 <mem_trim+0x180>
 8005032:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <mem_trim+0x1e0>)
 8005034:	f240 3216 	movw	r2, #790	; 0x316
 8005038:	491d      	ldr	r1, [pc, #116]	; (80050b0 <mem_trim+0x1f0>)
 800503a:	481b      	ldr	r0, [pc, #108]	; (80050a8 <mem_trim+0x1e8>)
 800503c:	f00c fc30 	bl	80118a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005040:	89fb      	ldrh	r3, [r7, #14]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fd94 	bl	8004b70 <ptr_to_mem>
 8005048:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <mem_trim+0x1f4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	429a      	cmp	r2, r3
 8005052:	d202      	bcs.n	800505a <mem_trim+0x19a>
      lfree = mem2;
 8005054:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <mem_trim+0x1f4>)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2200      	movs	r2, #0
 800505e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	881a      	ldrh	r2, [r3, #0]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	8afa      	ldrh	r2, [r7, #22]
 800506c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	89fa      	ldrh	r2, [r7, #14]
 8005072:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800507c:	d007      	beq.n	800508e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fd74 	bl	8004b70 <ptr_to_mem>
 8005088:	4602      	mov	r2, r0
 800508a:	89fb      	ldrh	r3, [r7, #14]
 800508c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800508e:	687b      	ldr	r3, [r7, #4]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20005868 	.word	0x20005868
 800509c:	2000586c 	.word	0x2000586c
 80050a0:	08012784 	.word	0x08012784
 80050a4:	080128f4 	.word	0x080128f4
 80050a8:	080127cc 	.word	0x080127cc
 80050ac:	0801290c 	.word	0x0801290c
 80050b0:	0801292c 	.word	0x0801292c
 80050b4:	20005870 	.word	0x20005870

080050b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <mem_malloc+0x14>
    return NULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	e0d9      	b.n	8005280 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80050cc:	88fb      	ldrh	r3, [r7, #6]
 80050ce:	3303      	adds	r3, #3
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80050d8:	8bbb      	ldrh	r3, [r7, #28]
 80050da:	2b0b      	cmp	r3, #11
 80050dc:	d801      	bhi.n	80050e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80050de:	230c      	movs	r3, #12
 80050e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80050e2:	8bbb      	ldrh	r3, [r7, #28]
 80050e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80050e8:	d803      	bhi.n	80050f2 <mem_malloc+0x3a>
 80050ea:	8bba      	ldrh	r2, [r7, #28]
 80050ec:	88fb      	ldrh	r3, [r7, #6]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d201      	bcs.n	80050f6 <mem_malloc+0x3e>
    return NULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e0c4      	b.n	8005280 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80050f6:	4b64      	ldr	r3, [pc, #400]	; (8005288 <mem_malloc+0x1d0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fd4a 	bl	8004b94 <mem_to_ptr>
 8005100:	4603      	mov	r3, r0
 8005102:	83fb      	strh	r3, [r7, #30]
 8005104:	e0b4      	b.n	8005270 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005106:	8bfb      	ldrh	r3, [r7, #30]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fd31 	bl	8004b70 <ptr_to_mem>
 800510e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	791b      	ldrb	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f040 80a4 	bne.w	8005262 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	8bfb      	ldrh	r3, [r7, #30]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	f1a3 0208 	sub.w	r2, r3, #8
 8005128:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800512a:	429a      	cmp	r2, r3
 800512c:	f0c0 8099 	bcc.w	8005262 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	8bfb      	ldrh	r3, [r7, #30]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f1a3 0208 	sub.w	r2, r3, #8
 800513e:	8bbb      	ldrh	r3, [r7, #28]
 8005140:	3314      	adds	r3, #20
 8005142:	429a      	cmp	r2, r3
 8005144:	d333      	bcc.n	80051ae <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005146:	8bfa      	ldrh	r2, [r7, #30]
 8005148:	8bbb      	ldrh	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	b29b      	uxth	r3, r3
 800514e:	3308      	adds	r3, #8
 8005150:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005152:	8a7b      	ldrh	r3, [r7, #18]
 8005154:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005158:	d106      	bne.n	8005168 <mem_malloc+0xb0>
 800515a:	4b4c      	ldr	r3, [pc, #304]	; (800528c <mem_malloc+0x1d4>)
 800515c:	f240 3287 	movw	r2, #903	; 0x387
 8005160:	494b      	ldr	r1, [pc, #300]	; (8005290 <mem_malloc+0x1d8>)
 8005162:	484c      	ldr	r0, [pc, #304]	; (8005294 <mem_malloc+0x1dc>)
 8005164:	f00c fb9c 	bl	80118a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005168:	8a7b      	ldrh	r3, [r7, #18]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fd00 	bl	8004b70 <ptr_to_mem>
 8005170:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	881a      	ldrh	r2, [r3, #0]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8bfa      	ldrh	r2, [r7, #30]
 8005184:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	8a7a      	ldrh	r2, [r7, #18]
 800518a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2201      	movs	r2, #1
 8005190:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800519a:	d00b      	beq.n	80051b4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	881b      	ldrh	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fce5 	bl	8004b70 <ptr_to_mem>
 80051a6:	4602      	mov	r2, r0
 80051a8:	8a7b      	ldrh	r3, [r7, #18]
 80051aa:	8053      	strh	r3, [r2, #2]
 80051ac:	e002      	b.n	80051b4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2201      	movs	r2, #1
 80051b2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80051b4:	4b34      	ldr	r3, [pc, #208]	; (8005288 <mem_malloc+0x1d0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d127      	bne.n	800520e <mem_malloc+0x156>
          struct mem *cur = lfree;
 80051be:	4b32      	ldr	r3, [pc, #200]	; (8005288 <mem_malloc+0x1d0>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80051c4:	e005      	b.n	80051d2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	881b      	ldrh	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff fcd0 	bl	8004b70 <ptr_to_mem>
 80051d0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	791b      	ldrb	r3, [r3, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d004      	beq.n	80051e4 <mem_malloc+0x12c>
 80051da:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <mem_malloc+0x1e0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d1f0      	bne.n	80051c6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80051e4:	4a28      	ldr	r2, [pc, #160]	; (8005288 <mem_malloc+0x1d0>)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80051ea:	4b27      	ldr	r3, [pc, #156]	; (8005288 <mem_malloc+0x1d0>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	4b2a      	ldr	r3, [pc, #168]	; (8005298 <mem_malloc+0x1e0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d00b      	beq.n	800520e <mem_malloc+0x156>
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <mem_malloc+0x1d0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	791b      	ldrb	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d006      	beq.n	800520e <mem_malloc+0x156>
 8005200:	4b22      	ldr	r3, [pc, #136]	; (800528c <mem_malloc+0x1d4>)
 8005202:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005206:	4925      	ldr	r1, [pc, #148]	; (800529c <mem_malloc+0x1e4>)
 8005208:	4822      	ldr	r0, [pc, #136]	; (8005294 <mem_malloc+0x1dc>)
 800520a:	f00c fb49 	bl	80118a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800520e:	8bba      	ldrh	r2, [r7, #28]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	4413      	add	r3, r2
 8005214:	3308      	adds	r3, #8
 8005216:	4a20      	ldr	r2, [pc, #128]	; (8005298 <mem_malloc+0x1e0>)
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	4293      	cmp	r3, r2
 800521c:	d906      	bls.n	800522c <mem_malloc+0x174>
 800521e:	4b1b      	ldr	r3, [pc, #108]	; (800528c <mem_malloc+0x1d4>)
 8005220:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005224:	491e      	ldr	r1, [pc, #120]	; (80052a0 <mem_malloc+0x1e8>)
 8005226:	481b      	ldr	r0, [pc, #108]	; (8005294 <mem_malloc+0x1dc>)
 8005228:	f00c fb3a 	bl	80118a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d006      	beq.n	8005244 <mem_malloc+0x18c>
 8005236:	4b15      	ldr	r3, [pc, #84]	; (800528c <mem_malloc+0x1d4>)
 8005238:	f240 32bb 	movw	r2, #955	; 0x3bb
 800523c:	4919      	ldr	r1, [pc, #100]	; (80052a4 <mem_malloc+0x1ec>)
 800523e:	4815      	ldr	r0, [pc, #84]	; (8005294 <mem_malloc+0x1dc>)
 8005240:	f00c fb2e 	bl	80118a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d006      	beq.n	800525c <mem_malloc+0x1a4>
 800524e:	4b0f      	ldr	r3, [pc, #60]	; (800528c <mem_malloc+0x1d4>)
 8005250:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005254:	4914      	ldr	r1, [pc, #80]	; (80052a8 <mem_malloc+0x1f0>)
 8005256:	480f      	ldr	r0, [pc, #60]	; (8005294 <mem_malloc+0x1dc>)
 8005258:	f00c fb22 	bl	80118a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3308      	adds	r3, #8
 8005260:	e00e      	b.n	8005280 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005262:	8bfb      	ldrh	r3, [r7, #30]
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fc83 	bl	8004b70 <ptr_to_mem>
 800526a:	4603      	mov	r3, r0
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005270:	8bfa      	ldrh	r2, [r7, #30]
 8005272:	8bbb      	ldrh	r3, [r7, #28]
 8005274:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005278:	429a      	cmp	r2, r3
 800527a:	f4ff af44 	bcc.w	8005106 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3720      	adds	r7, #32
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20005870 	.word	0x20005870
 800528c:	08012784 	.word	0x08012784
 8005290:	0801292c 	.word	0x0801292c
 8005294:	080127cc 	.word	0x080127cc
 8005298:	2000586c 	.word	0x2000586c
 800529c:	08012940 	.word	0x08012940
 80052a0:	0801295c 	.word	0x0801295c
 80052a4:	0801298c 	.word	0x0801298c
 80052a8:	080129bc 	.word	0x080129bc

080052ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	3303      	adds	r3, #3
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e011      	b.n	80052f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	881b      	ldrh	r3, [r3, #0]
 80052e4:	461a      	mov	r2, r3
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4413      	add	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	885b      	ldrh	r3, [r3, #2]
 80052f6:	461a      	mov	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4293      	cmp	r3, r2
 80052fc:	dbe7      	blt.n	80052ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80052fe:	bf00      	nop
 8005300:	bf00      	nop
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005312:	2300      	movs	r3, #0
 8005314:	80fb      	strh	r3, [r7, #6]
 8005316:	e009      	b.n	800532c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <memp_init+0x30>)
 800531c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff ffc3 	bl	80052ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	3301      	adds	r3, #1
 800532a:	80fb      	strh	r3, [r7, #6]
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	2b08      	cmp	r3, #8
 8005330:	d9f2      	bls.n	8005318 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005332:	bf00      	nop
 8005334:	bf00      	nop
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	08015540 	.word	0x08015540

08005340 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d012      	beq.n	800537c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d006      	beq.n	8005378 <do_memp_malloc_pool+0x38>
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <do_memp_malloc_pool+0x48>)
 800536c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005370:	4906      	ldr	r1, [pc, #24]	; (800538c <do_memp_malloc_pool+0x4c>)
 8005372:	4807      	ldr	r0, [pc, #28]	; (8005390 <do_memp_malloc_pool+0x50>)
 8005374:	f00c fa94 	bl	80118a0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	e000      	b.n	800537e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	080129e0 	.word	0x080129e0
 800538c:	08012a10 	.word	0x08012a10
 8005390:	08012a34 	.word	0x08012a34

08005394 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b082      	sub	sp, #8
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <memp_malloc_pool+0x1c>
 80053a2:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <memp_malloc_pool+0x38>)
 80053a4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80053a8:	4909      	ldr	r1, [pc, #36]	; (80053d0 <memp_malloc_pool+0x3c>)
 80053aa:	480a      	ldr	r0, [pc, #40]	; (80053d4 <memp_malloc_pool+0x40>)
 80053ac:	f00c fa78 	bl	80118a0 <iprintf>
  if (desc == NULL) {
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <memp_malloc_pool+0x26>
    return NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	e003      	b.n	80053c2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7ff ffc0 	bl	8005340 <do_memp_malloc_pool>
 80053c0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	080129e0 	.word	0x080129e0
 80053d0:	08012a5c 	.word	0x08012a5c
 80053d4:	08012a34 	.word	0x08012a34

080053d8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d908      	bls.n	80053fa <memp_malloc+0x22>
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <memp_malloc+0x3c>)
 80053ea:	f240 1257 	movw	r2, #343	; 0x157
 80053ee:	490a      	ldr	r1, [pc, #40]	; (8005418 <memp_malloc+0x40>)
 80053f0:	480a      	ldr	r0, [pc, #40]	; (800541c <memp_malloc+0x44>)
 80053f2:	f00c fa55 	bl	80118a0 <iprintf>
 80053f6:	2300      	movs	r3, #0
 80053f8:	e008      	b.n	800540c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	4a08      	ldr	r2, [pc, #32]	; (8005420 <memp_malloc+0x48>)
 80053fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff ff9c 	bl	8005340 <do_memp_malloc_pool>
 8005408:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800540a:	68fb      	ldr	r3, [r7, #12]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	080129e0 	.word	0x080129e0
 8005418:	08012a70 	.word	0x08012a70
 800541c:	08012a34 	.word	0x08012a34
 8005420:	08015540 	.word	0x08015540

08005424 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d006      	beq.n	8005446 <do_memp_free_pool+0x22>
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <do_memp_free_pool+0x40>)
 800543a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800543e:	490a      	ldr	r1, [pc, #40]	; (8005468 <do_memp_free_pool+0x44>)
 8005440:	480a      	ldr	r0, [pc, #40]	; (800546c <do_memp_free_pool+0x48>)
 8005442:	f00c fa2d 	bl	80118a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800545c:	bf00      	nop
 800545e:	3710      	adds	r7, #16
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	080129e0 	.word	0x080129e0
 8005468:	08012a90 	.word	0x08012a90
 800546c:	08012a34 	.word	0x08012a34

08005470 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <memp_free_pool+0x1e>
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <memp_free_pool+0x3c>)
 8005482:	f240 1295 	movw	r2, #405	; 0x195
 8005486:	490a      	ldr	r1, [pc, #40]	; (80054b0 <memp_free_pool+0x40>)
 8005488:	480a      	ldr	r0, [pc, #40]	; (80054b4 <memp_free_pool+0x44>)
 800548a:	f00c fa09 	bl	80118a0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d007      	beq.n	80054a4 <memp_free_pool+0x34>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800549a:	6839      	ldr	r1, [r7, #0]
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff ffc1 	bl	8005424 <do_memp_free_pool>
 80054a2:	e000      	b.n	80054a6 <memp_free_pool+0x36>
    return;
 80054a4:	bf00      	nop
}
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	080129e0 	.word	0x080129e0
 80054b0:	08012a5c 	.word	0x08012a5c
 80054b4:	08012a34 	.word	0x08012a34

080054b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	4603      	mov	r3, r0
 80054c0:	6039      	str	r1, [r7, #0]
 80054c2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d907      	bls.n	80054da <memp_free+0x22>
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <memp_free+0x44>)
 80054cc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80054d0:	490b      	ldr	r1, [pc, #44]	; (8005500 <memp_free+0x48>)
 80054d2:	480c      	ldr	r0, [pc, #48]	; (8005504 <memp_free+0x4c>)
 80054d4:	f00c f9e4 	bl	80118a0 <iprintf>
 80054d8:	e00c      	b.n	80054f4 <memp_free+0x3c>

  if (mem == NULL) {
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	4a09      	ldr	r2, [pc, #36]	; (8005508 <memp_free+0x50>)
 80054e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e8:	6839      	ldr	r1, [r7, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff ff9a 	bl	8005424 <do_memp_free_pool>
 80054f0:	e000      	b.n	80054f4 <memp_free+0x3c>
    return;
 80054f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	080129e0 	.word	0x080129e0
 8005500:	08012ab0 	.word	0x08012ab0
 8005504:	08012a34 	.word	0x08012a34
 8005508:	08015540 	.word	0x08015540

0800550c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005510:	bf00      	nop
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <netif_add+0x26>
 8005530:	4b5b      	ldr	r3, [pc, #364]	; (80056a0 <netif_add+0x184>)
 8005532:	f240 1227 	movw	r2, #295	; 0x127
 8005536:	495b      	ldr	r1, [pc, #364]	; (80056a4 <netif_add+0x188>)
 8005538:	485b      	ldr	r0, [pc, #364]	; (80056a8 <netif_add+0x18c>)
 800553a:	f00c f9b1 	bl	80118a0 <iprintf>
 800553e:	2300      	movs	r3, #0
 8005540:	e0a9      	b.n	8005696 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d108      	bne.n	800555a <netif_add+0x3e>
 8005548:	4b55      	ldr	r3, [pc, #340]	; (80056a0 <netif_add+0x184>)
 800554a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800554e:	4957      	ldr	r1, [pc, #348]	; (80056ac <netif_add+0x190>)
 8005550:	4855      	ldr	r0, [pc, #340]	; (80056a8 <netif_add+0x18c>)
 8005552:	f00c f9a5 	bl	80118a0 <iprintf>
 8005556:	2300      	movs	r3, #0
 8005558:	e09d      	b.n	8005696 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005560:	4b53      	ldr	r3, [pc, #332]	; (80056b0 <netif_add+0x194>)
 8005562:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800556a:	4b51      	ldr	r3, [pc, #324]	; (80056b0 <netif_add+0x194>)
 800556c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005574:	4b4e      	ldr	r3, [pc, #312]	; (80056b0 <netif_add+0x194>)
 8005576:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a49      	ldr	r2, [pc, #292]	; (80056b4 <netif_add+0x198>)
 800558e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3324      	adds	r3, #36	; 0x24
 80055a2:	2204      	movs	r2, #4
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f00c f9df 	bl	801196a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a3a      	ldr	r2, [r7, #32]
 80055b6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80055b8:	4b3f      	ldr	r3, [pc, #252]	; (80056b8 <netif_add+0x19c>)
 80055ba:	781a      	ldrb	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f914 	bl	80057fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	4798      	blx	r3
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <netif_add+0xc8>
    return NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	e058      	b.n	8005696 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055ea:	2bff      	cmp	r3, #255	; 0xff
 80055ec:	d103      	bne.n	80055f6 <netif_add+0xda>
        netif->num = 0;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80055fa:	4b30      	ldr	r3, [pc, #192]	; (80056bc <netif_add+0x1a0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e02b      	b.n	800565a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	429a      	cmp	r2, r3
 8005608:	d106      	bne.n	8005618 <netif_add+0xfc>
 800560a:	4b25      	ldr	r3, [pc, #148]	; (80056a0 <netif_add+0x184>)
 800560c:	f240 128b 	movw	r2, #395	; 0x18b
 8005610:	492b      	ldr	r1, [pc, #172]	; (80056c0 <netif_add+0x1a4>)
 8005612:	4825      	ldr	r0, [pc, #148]	; (80056a8 <netif_add+0x18c>)
 8005614:	f00c f944 	bl	80118a0 <iprintf>
        num_netifs++;
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	3301      	adds	r3, #1
 800561c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2bff      	cmp	r3, #255	; 0xff
 8005622:	dd06      	ble.n	8005632 <netif_add+0x116>
 8005624:	4b1e      	ldr	r3, [pc, #120]	; (80056a0 <netif_add+0x184>)
 8005626:	f240 128d 	movw	r2, #397	; 0x18d
 800562a:	4926      	ldr	r1, [pc, #152]	; (80056c4 <netif_add+0x1a8>)
 800562c:	481e      	ldr	r0, [pc, #120]	; (80056a8 <netif_add+0x18c>)
 800562e:	f00c f937 	bl	80118a0 <iprintf>
        if (netif2->num == netif->num) {
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800563e:	429a      	cmp	r2, r3
 8005640:	d108      	bne.n	8005654 <netif_add+0x138>
          netif->num++;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005648:	3301      	adds	r3, #1
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8005652:	e005      	b.n	8005660 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1d0      	bne.n	8005602 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1be      	bne.n	80055e4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800566c:	2bfe      	cmp	r3, #254	; 0xfe
 800566e:	d103      	bne.n	8005678 <netif_add+0x15c>
    netif_num = 0;
 8005670:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <netif_add+0x19c>)
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e006      	b.n	8005686 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800567e:	3301      	adds	r3, #1
 8005680:	b2da      	uxtb	r2, r3
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <netif_add+0x19c>)
 8005684:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005686:	4b0d      	ldr	r3, [pc, #52]	; (80056bc <netif_add+0x1a0>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800568e:	4a0b      	ldr	r2, [pc, #44]	; (80056bc <netif_add+0x1a0>)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	08012acc 	.word	0x08012acc
 80056a4:	08012b60 	.word	0x08012b60
 80056a8:	08012b1c 	.word	0x08012b1c
 80056ac:	08012b7c 	.word	0x08012b7c
 80056b0:	080155b4 	.word	0x080155b4
 80056b4:	08005adf 	.word	0x08005adf
 80056b8:	20008788 	.word	0x20008788
 80056bc:	20008780 	.word	0x20008780
 80056c0:	08012ba0 	.word	0x08012ba0
 80056c4:	08012bb4 	.word	0x08012bb4

080056c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f002 fdf7 	bl	80082c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80056da:	6839      	ldr	r1, [r7, #0]
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f007 fe35 	bl	800d34c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
	...

080056ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <netif_do_set_ipaddr+0x20>
 80056fe:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <netif_do_set_ipaddr+0x88>)
 8005700:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005704:	491c      	ldr	r1, [pc, #112]	; (8005778 <netif_do_set_ipaddr+0x8c>)
 8005706:	481d      	ldr	r0, [pc, #116]	; (800577c <netif_do_set_ipaddr+0x90>)
 8005708:	f00c f8ca 	bl	80118a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <netif_do_set_ipaddr+0x34>
 8005712:	4b18      	ldr	r3, [pc, #96]	; (8005774 <netif_do_set_ipaddr+0x88>)
 8005714:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005718:	4917      	ldr	r1, [pc, #92]	; (8005778 <netif_do_set_ipaddr+0x8c>)
 800571a:	4818      	ldr	r0, [pc, #96]	; (800577c <netif_do_set_ipaddr+0x90>)
 800571c:	f00c f8c0 	bl	80118a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3304      	adds	r3, #4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d01c      	beq.n	8005768 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	3304      	adds	r3, #4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800573e:	f107 0314 	add.w	r3, r7, #20
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff ffbf 	bl	80056c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <netif_do_set_ipaddr+0x6a>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	e000      	b.n	8005758 <netif_do_set_ipaddr+0x6c>
 8005756:	2300      	movs	r3, #0
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800575c:	2101      	movs	r1, #1
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f8d2 	bl	8005908 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	08012acc 	.word	0x08012acc
 8005778:	08012be4 	.word	0x08012be4
 800577c:	08012b1c 	.word	0x08012b1c

08005780 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3308      	adds	r3, #8
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d00a      	beq.n	80057b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <netif_do_set_netmask+0x26>
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	e000      	b.n	80057a8 <netif_do_set_netmask+0x28>
 80057a6:	2300      	movs	r3, #0
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	330c      	adds	r3, #12
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d00a      	beq.n	80057ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <netif_do_set_gw+0x26>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	e000      	b.n	80057e6 <netif_do_set_gw+0x28>
 80057e4:	2300      	movs	r3, #0
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800580a:	2300      	movs	r3, #0
 800580c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005818:	4b1c      	ldr	r3, [pc, #112]	; (800588c <netif_set_addr+0x90>)
 800581a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005822:	4b1a      	ldr	r3, [pc, #104]	; (800588c <netif_set_addr+0x90>)
 8005824:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800582c:	4b17      	ldr	r3, [pc, #92]	; (800588c <netif_set_addr+0x90>)
 800582e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <netif_set_addr+0x42>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <netif_set_addr+0x46>
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <netif_set_addr+0x48>
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d006      	beq.n	800585a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800584c:	f107 0310 	add.w	r3, r7, #16
 8005850:	461a      	mov	r2, r3
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff ff49 	bl	80056ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	6879      	ldr	r1, [r7, #4]
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7ff ff8e 	bl	8005780 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f7ff ffa8 	bl	80057be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005874:	f107 0310 	add.w	r3, r7, #16
 8005878:	461a      	mov	r2, r3
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7ff ff35 	bl	80056ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005882:	bf00      	nop
 8005884:	3720      	adds	r7, #32
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	080155b4 	.word	0x080155b4

08005890 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005898:	4a04      	ldr	r2, [pc, #16]	; (80058ac <netif_set_default+0x1c>)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20008784 	.word	0x20008784

080058b0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <netif_set_up+0x1e>
 80058be:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <netif_set_up+0x4c>)
 80058c0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80058c4:	490e      	ldr	r1, [pc, #56]	; (8005900 <netif_set_up+0x50>)
 80058c6:	480f      	ldr	r0, [pc, #60]	; (8005904 <netif_set_up+0x54>)
 80058c8:	f00b ffea 	bl	80118a0 <iprintf>
 80058cc:	e013      	b.n	80058f6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10c      	bne.n	80058f6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80058ee:	2103      	movs	r1, #3
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f809 	bl	8005908 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	08012acc 	.word	0x08012acc
 8005900:	08012c54 	.word	0x08012c54
 8005904:	08012b1c 	.word	0x08012b1c

08005908 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <netif_issue_reports+0x20>
 800591a:	4b18      	ldr	r3, [pc, #96]	; (800597c <netif_issue_reports+0x74>)
 800591c:	f240 326d 	movw	r2, #877	; 0x36d
 8005920:	4917      	ldr	r1, [pc, #92]	; (8005980 <netif_issue_reports+0x78>)
 8005922:	4818      	ldr	r0, [pc, #96]	; (8005984 <netif_issue_reports+0x7c>)
 8005924:	f00b ffbc 	bl	80118a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01e      	beq.n	8005974 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800593c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005940:	2b00      	cmp	r3, #0
 8005942:	d017      	beq.n	8005974 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d013      	beq.n	8005976 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	3304      	adds	r3, #4
 8005952:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00e      	beq.n	8005976 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3304      	adds	r3, #4
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f00a faed 	bl	800ff4c <etharp_request>
 8005972:	e000      	b.n	8005976 <netif_issue_reports+0x6e>
    return;
 8005974:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	08012acc 	.word	0x08012acc
 8005980:	08012c70 	.word	0x08012c70
 8005984:	08012b1c 	.word	0x08012b1c

08005988 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d107      	bne.n	80059a6 <netif_set_down+0x1e>
 8005996:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <netif_set_down+0x58>)
 8005998:	f240 329b 	movw	r2, #923	; 0x39b
 800599c:	4911      	ldr	r1, [pc, #68]	; (80059e4 <netif_set_down+0x5c>)
 800599e:	4812      	ldr	r0, [pc, #72]	; (80059e8 <netif_set_down+0x60>)
 80059a0:	f00b ff7e 	bl	80118a0 <iprintf>
 80059a4:	e019      	b.n	80059da <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059ac:	f003 0301 	and.w	r3, r3, #1
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d012      	beq.n	80059da <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80059cc:	f003 0308 	and.w	r3, r3, #8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f009 fe73 	bl	800f6c0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	08012acc 	.word	0x08012acc
 80059e4:	08012c94 	.word	0x08012c94
 80059e8:	08012b1c 	.word	0x08012b1c

080059ec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <netif_set_link_up+0x1e>
 80059fa:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <netif_set_link_up+0x64>)
 80059fc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8005a00:	4914      	ldr	r1, [pc, #80]	; (8005a54 <netif_set_link_up+0x68>)
 8005a02:	4815      	ldr	r0, [pc, #84]	; (8005a58 <netif_set_link_up+0x6c>)
 8005a04:	f00b ff4c 	bl	80118a0 <iprintf>
 8005a08:	e01e      	b.n	8005a48 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d117      	bne.n	8005a48 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a1e:	f043 0304 	orr.w	r3, r3, #4
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f008 f8b8 	bl	800dba0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005a30:	2103      	movs	r1, #3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff ff68 	bl	8005908 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d003      	beq.n	8005a48 <netif_set_link_up+0x5c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	08012acc 	.word	0x08012acc
 8005a54:	08012cb4 	.word	0x08012cb4
 8005a58:	08012b1c 	.word	0x08012b1c

08005a5c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d107      	bne.n	8005a7a <netif_set_link_down+0x1e>
 8005a6a:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <netif_set_link_down+0x54>)
 8005a6c:	f240 4206 	movw	r2, #1030	; 0x406
 8005a70:	4910      	ldr	r1, [pc, #64]	; (8005ab4 <netif_set_link_down+0x58>)
 8005a72:	4811      	ldr	r0, [pc, #68]	; (8005ab8 <netif_set_link_down+0x5c>)
 8005a74:	f00b ff14 	bl	80118a0 <iprintf>
 8005a78:	e017      	b.n	8005aaa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d010      	beq.n	8005aaa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a8e:	f023 0304 	bic.w	r3, r3, #4
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <netif_set_link_down+0x4e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	08012acc 	.word	0x08012acc
 8005ab4:	08012cd8 	.word	0x08012cd8
 8005ab8:	08012b1c 	.word	0x08012b1c

08005abc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	61da      	str	r2, [r3, #28]
  }
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b085      	sub	sp, #20
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8005aea:	f06f 030b 	mvn.w	r3, #11
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8005b06:	79fb      	ldrb	r3, [r7, #7]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d013      	beq.n	8005b34 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <netif_get_by_index+0x48>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	e00c      	b.n	8005b2e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	79fa      	ldrb	r2, [r7, #7]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d101      	bne.n	8005b28 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	e006      	b.n	8005b36 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ef      	bne.n	8005b14 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20008780 	.word	0x20008780

08005b48 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <pbuf_free_ooseq+0x38>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <pbuf_free_ooseq+0x3c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	607b      	str	r3, [r7, #4]
 8005b5a:	e00a      	b.n	8005b72 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f002 fbed 	bl	8008344 <tcp_free_ooseq>
      return;
 8005b6a:	e005      	b.n	8005b78 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	607b      	str	r3, [r7, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1f1      	bne.n	8005b5c <pbuf_free_ooseq+0x14>
    }
  }
}
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20008789 	.word	0x20008789
 8005b84:	20008798 	.word	0x20008798

08005b88 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005b8c:	4b03      	ldr	r3, [pc, #12]	; (8005b9c <pbuf_pool_is_empty+0x14>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005b92:	bf00      	nop
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	20008789 	.word	0x20008789

08005ba0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4611      	mov	r1, r2
 8005bac:	461a      	mov	r2, r3
 8005bae:	460b      	mov	r3, r1
 8005bb0:	80fb      	strh	r3, [r7, #6]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	88ba      	ldrh	r2, [r7, #4]
 8005bcc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8005bce:	8b3b      	ldrh	r3, [r7, #24]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	7f3a      	ldrb	r2, [r7, #28]
 8005bda:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	73da      	strb	r2, [r3, #15]
}
 8005be8:	bf00      	nop
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08c      	sub	sp, #48	; 0x30
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	71fb      	strb	r3, [r7, #7]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	80bb      	strh	r3, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8005c0a:	887b      	ldrh	r3, [r7, #2]
 8005c0c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005c10:	d07f      	beq.n	8005d12 <pbuf_alloc+0x11e>
 8005c12:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005c16:	f300 80c8 	bgt.w	8005daa <pbuf_alloc+0x1b6>
 8005c1a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005c1e:	d010      	beq.n	8005c42 <pbuf_alloc+0x4e>
 8005c20:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005c24:	f300 80c1 	bgt.w	8005daa <pbuf_alloc+0x1b6>
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d002      	beq.n	8005c32 <pbuf_alloc+0x3e>
 8005c2c:	2b41      	cmp	r3, #65	; 0x41
 8005c2e:	f040 80bc 	bne.w	8005daa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005c32:	887a      	ldrh	r2, [r7, #2]
 8005c34:	88bb      	ldrh	r3, [r7, #4]
 8005c36:	4619      	mov	r1, r3
 8005c38:	2000      	movs	r0, #0
 8005c3a:	f000 f8d1 	bl	8005de0 <pbuf_alloc_reference>
 8005c3e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8005c40:	e0bd      	b.n	8005dbe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005c4a:	88bb      	ldrh	r3, [r7, #4]
 8005c4c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8005c4e:	2008      	movs	r0, #8
 8005c50:	f7ff fbc2 	bl	80053d8 <memp_malloc>
 8005c54:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d109      	bne.n	8005c70 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005c5c:	f7ff ff94 	bl	8005b88 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d002      	beq.n	8005c6c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005c66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c68:	f000 faa8 	bl	80061bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e0a7      	b.n	8005dc0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005c70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c72:	3303      	adds	r3, #3
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	f023 0303 	bic.w	r3, r3, #3
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	8b7a      	ldrh	r2, [r7, #26]
 8005c84:	4293      	cmp	r3, r2
 8005c86:	bf28      	it	cs
 8005c88:	4613      	movcs	r3, r2
 8005c8a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005c8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c8e:	3310      	adds	r3, #16
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	4413      	add	r3, r2
 8005c94:	3303      	adds	r3, #3
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	89f9      	ldrh	r1, [r7, #14]
 8005c9e:	8b7a      	ldrh	r2, [r7, #26]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9301      	str	r3, [sp, #4]
 8005ca4:	887b      	ldrh	r3, [r7, #2]
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4601      	mov	r1, r0
 8005cac:	6938      	ldr	r0, [r7, #16]
 8005cae:	f7ff ff77 	bl	8005ba0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d006      	beq.n	8005ccc <pbuf_alloc+0xd8>
 8005cbe:	4b42      	ldr	r3, [pc, #264]	; (8005dc8 <pbuf_alloc+0x1d4>)
 8005cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cc4:	4941      	ldr	r1, [pc, #260]	; (8005dcc <pbuf_alloc+0x1d8>)
 8005cc6:	4842      	ldr	r0, [pc, #264]	; (8005dd0 <pbuf_alloc+0x1dc>)
 8005cc8:	f00b fdea 	bl	80118a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8005ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005cce:	3303      	adds	r3, #3
 8005cd0:	f023 0303 	bic.w	r3, r3, #3
 8005cd4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8005cd8:	d106      	bne.n	8005ce8 <pbuf_alloc+0xf4>
 8005cda:	4b3b      	ldr	r3, [pc, #236]	; (8005dc8 <pbuf_alloc+0x1d4>)
 8005cdc:	f44f 7281 	mov.w	r2, #258	; 0x102
 8005ce0:	493c      	ldr	r1, [pc, #240]	; (8005dd4 <pbuf_alloc+0x1e0>)
 8005ce2:	483b      	ldr	r0, [pc, #236]	; (8005dd0 <pbuf_alloc+0x1dc>)
 8005ce4:	f00b fddc 	bl	80118a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf2:	e002      	b.n	8005cfa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8005cfe:	8b7a      	ldrh	r2, [r7, #26]
 8005d00:	89fb      	ldrh	r3, [r7, #14]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8005d06:	2300      	movs	r3, #0
 8005d08:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8005d0a:	8b7b      	ldrh	r3, [r7, #26]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d19e      	bne.n	8005c4e <pbuf_alloc+0x5a>
      break;
 8005d10:	e055      	b.n	8005dbe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8005d12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d14:	3303      	adds	r3, #3
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f023 0303 	bic.w	r3, r3, #3
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	88bb      	ldrh	r3, [r7, #4]
 8005d20:	3303      	adds	r3, #3
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	f023 0303 	bic.w	r3, r3, #3
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	4413      	add	r3, r2
 8005d2c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8005d2e:	8b3b      	ldrh	r3, [r7, #24]
 8005d30:	3310      	adds	r3, #16
 8005d32:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005d34:	8b3a      	ldrh	r2, [r7, #24]
 8005d36:	88bb      	ldrh	r3, [r7, #4]
 8005d38:	3303      	adds	r3, #3
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d306      	bcc.n	8005d50 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005d42:	8afa      	ldrh	r2, [r7, #22]
 8005d44:	88bb      	ldrh	r3, [r7, #4]
 8005d46:	3303      	adds	r3, #3
 8005d48:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d201      	bcs.n	8005d54 <pbuf_alloc+0x160>
        return NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	e035      	b.n	8005dc0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005d54:	8afb      	ldrh	r3, [r7, #22]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff f9ae 	bl	80050b8 <mem_malloc>
 8005d5c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <pbuf_alloc+0x174>
        return NULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e02b      	b.n	8005dc0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005d68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d6a:	3310      	adds	r3, #16
 8005d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6e:	4413      	add	r3, r2
 8005d70:	3303      	adds	r3, #3
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	4618      	mov	r0, r3
 8005d78:	88b9      	ldrh	r1, [r7, #4]
 8005d7a:	88ba      	ldrh	r2, [r7, #4]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	887b      	ldrh	r3, [r7, #2]
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	460b      	mov	r3, r1
 8005d86:	4601      	mov	r1, r0
 8005d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d8a:	f7ff ff09 	bl	8005ba0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d010      	beq.n	8005dbc <pbuf_alloc+0x1c8>
 8005d9a:	4b0b      	ldr	r3, [pc, #44]	; (8005dc8 <pbuf_alloc+0x1d4>)
 8005d9c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8005da0:	490d      	ldr	r1, [pc, #52]	; (8005dd8 <pbuf_alloc+0x1e4>)
 8005da2:	480b      	ldr	r0, [pc, #44]	; (8005dd0 <pbuf_alloc+0x1dc>)
 8005da4:	f00b fd7c 	bl	80118a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005da8:	e008      	b.n	8005dbc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005daa:	4b07      	ldr	r3, [pc, #28]	; (8005dc8 <pbuf_alloc+0x1d4>)
 8005dac:	f240 1227 	movw	r2, #295	; 0x127
 8005db0:	490a      	ldr	r1, [pc, #40]	; (8005ddc <pbuf_alloc+0x1e8>)
 8005db2:	4807      	ldr	r0, [pc, #28]	; (8005dd0 <pbuf_alloc+0x1dc>)
 8005db4:	f00b fd74 	bl	80118a0 <iprintf>
      return NULL;
 8005db8:	2300      	movs	r3, #0
 8005dba:	e001      	b.n	8005dc0 <pbuf_alloc+0x1cc>
      break;
 8005dbc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3728      	adds	r7, #40	; 0x28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	08012cfc 	.word	0x08012cfc
 8005dcc:	08012d2c 	.word	0x08012d2c
 8005dd0:	08012d5c 	.word	0x08012d5c
 8005dd4:	08012d84 	.word	0x08012d84
 8005dd8:	08012db8 	.word	0x08012db8
 8005ddc:	08012de4 	.word	0x08012de4

08005de0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	460b      	mov	r3, r1
 8005dea:	807b      	strh	r3, [r7, #2]
 8005dec:	4613      	mov	r3, r2
 8005dee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005df0:	883b      	ldrh	r3, [r7, #0]
 8005df2:	2b41      	cmp	r3, #65	; 0x41
 8005df4:	d009      	beq.n	8005e0a <pbuf_alloc_reference+0x2a>
 8005df6:	883b      	ldrh	r3, [r7, #0]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d006      	beq.n	8005e0a <pbuf_alloc_reference+0x2a>
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <pbuf_alloc_reference+0x5c>)
 8005dfe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005e02:	490f      	ldr	r1, [pc, #60]	; (8005e40 <pbuf_alloc_reference+0x60>)
 8005e04:	480f      	ldr	r0, [pc, #60]	; (8005e44 <pbuf_alloc_reference+0x64>)
 8005e06:	f00b fd4b 	bl	80118a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8005e0a:	2007      	movs	r0, #7
 8005e0c:	f7ff fae4 	bl	80053d8 <memp_malloc>
 8005e10:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	e00b      	b.n	8005e34 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005e1c:	8879      	ldrh	r1, [r7, #2]
 8005e1e:	887a      	ldrh	r2, [r7, #2]
 8005e20:	2300      	movs	r3, #0
 8005e22:	9301      	str	r3, [sp, #4]
 8005e24:	883b      	ldrh	r3, [r7, #0]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f7ff feb7 	bl	8005ba0 <pbuf_init_alloced_pbuf>
  return p;
 8005e32:	68fb      	ldr	r3, [r7, #12]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	08012cfc 	.word	0x08012cfc
 8005e40:	08012e00 	.word	0x08012e00
 8005e44:	08012d5c 	.word	0x08012d5c

08005e48 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	607b      	str	r3, [r7, #4]
 8005e50:	4603      	mov	r3, r0
 8005e52:	73fb      	strb	r3, [r7, #15]
 8005e54:	460b      	mov	r3, r1
 8005e56:	81bb      	strh	r3, [r7, #12]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005e60:	8a7b      	ldrh	r3, [r7, #18]
 8005e62:	3303      	adds	r3, #3
 8005e64:	f023 0203 	bic.w	r2, r3, #3
 8005e68:	89bb      	ldrh	r3, [r7, #12]
 8005e6a:	441a      	add	r2, r3
 8005e6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d901      	bls.n	8005e76 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	e018      	b.n	8005ea8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d007      	beq.n	8005e8c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005e7c:	8a7b      	ldrh	r3, [r7, #18]
 8005e7e:	3303      	adds	r3, #3
 8005e80:	f023 0303 	bic.w	r3, r3, #3
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	4413      	add	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e001      	b.n	8005e90 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	89b9      	ldrh	r1, [r7, #12]
 8005e94:	89ba      	ldrh	r2, [r7, #12]
 8005e96:	2302      	movs	r3, #2
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	897b      	ldrh	r3, [r7, #10]
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	6979      	ldr	r1, [r7, #20]
 8005ea2:	f7ff fe7d 	bl	8005ba0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005ea6:	687b      	ldr	r3, [r7, #4]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	460b      	mov	r3, r1
 8005eba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d106      	bne.n	8005ed0 <pbuf_realloc+0x20>
 8005ec2:	4b3a      	ldr	r3, [pc, #232]	; (8005fac <pbuf_realloc+0xfc>)
 8005ec4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8005ec8:	4939      	ldr	r1, [pc, #228]	; (8005fb0 <pbuf_realloc+0x100>)
 8005eca:	483a      	ldr	r0, [pc, #232]	; (8005fb4 <pbuf_realloc+0x104>)
 8005ecc:	f00b fce8 	bl	80118a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	891b      	ldrh	r3, [r3, #8]
 8005ed4:	887a      	ldrh	r2, [r7, #2]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d263      	bcs.n	8005fa2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	891a      	ldrh	r2, [r3, #8]
 8005ede:	887b      	ldrh	r3, [r7, #2]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005ee4:	887b      	ldrh	r3, [r7, #2]
 8005ee6:	817b      	strh	r3, [r7, #10]
  q = p;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005eec:	e018      	b.n	8005f20 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	895b      	ldrh	r3, [r3, #10]
 8005ef2:	897a      	ldrh	r2, [r7, #10]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	891a      	ldrh	r2, [r3, #8]
 8005efc:	893b      	ldrh	r3, [r7, #8]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	b29a      	uxth	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <pbuf_realloc+0x70>
 8005f12:	4b26      	ldr	r3, [pc, #152]	; (8005fac <pbuf_realloc+0xfc>)
 8005f14:	f240 12af 	movw	r2, #431	; 0x1af
 8005f18:	4927      	ldr	r1, [pc, #156]	; (8005fb8 <pbuf_realloc+0x108>)
 8005f1a:	4826      	ldr	r0, [pc, #152]	; (8005fb4 <pbuf_realloc+0x104>)
 8005f1c:	f00b fcc0 	bl	80118a0 <iprintf>
  while (rem_len > q->len) {
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	895b      	ldrh	r3, [r3, #10]
 8005f24:	897a      	ldrh	r2, [r7, #10]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d8e1      	bhi.n	8005eee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	7b1b      	ldrb	r3, [r3, #12]
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d121      	bne.n	8005f7a <pbuf_realloc+0xca>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	895b      	ldrh	r3, [r3, #10]
 8005f3a:	897a      	ldrh	r2, [r7, #10]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d01c      	beq.n	8005f7a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	7b5b      	ldrb	r3, [r3, #13]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d116      	bne.n	8005f7a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	897b      	ldrh	r3, [r7, #10]
 8005f58:	4413      	add	r3, r2
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7fe ffae 	bl	8004ec0 <mem_trim>
 8005f64:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <pbuf_realloc+0xca>
 8005f6c:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <pbuf_realloc+0xfc>)
 8005f6e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005f72:	4912      	ldr	r1, [pc, #72]	; (8005fbc <pbuf_realloc+0x10c>)
 8005f74:	480f      	ldr	r0, [pc, #60]	; (8005fb4 <pbuf_realloc+0x104>)
 8005f76:	f00b fc93 	bl	80118a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	897a      	ldrh	r2, [r7, #10]
 8005f7e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	895a      	ldrh	r2, [r3, #10]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f911 	bl	80061bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e000      	b.n	8005fa4 <pbuf_realloc+0xf4>
    return;
 8005fa2:	bf00      	nop

}
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	08012cfc 	.word	0x08012cfc
 8005fb0:	08012e14 	.word	0x08012e14
 8005fb4:	08012d5c 	.word	0x08012d5c
 8005fb8:	08012e2c 	.word	0x08012e2c
 8005fbc:	08012e44 	.word	0x08012e44

08005fc0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <pbuf_add_header_impl+0x22>
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <pbuf_add_header_impl+0xc4>)
 8005fd6:	f240 12df 	movw	r2, #479	; 0x1df
 8005fda:	492b      	ldr	r1, [pc, #172]	; (8006088 <pbuf_add_header_impl+0xc8>)
 8005fdc:	482b      	ldr	r0, [pc, #172]	; (800608c <pbuf_add_header_impl+0xcc>)
 8005fde:	f00b fc5f 	bl	80118a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <pbuf_add_header_impl+0x30>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fee:	d301      	bcc.n	8005ff4 <pbuf_add_header_impl+0x34>
    return 1;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e043      	b.n	800607c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <pbuf_add_header_impl+0x3e>
    return 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e03e      	b.n	800607c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	891a      	ldrh	r2, [r3, #8]
 8006006:	8a7b      	ldrh	r3, [r7, #18]
 8006008:	4413      	add	r3, r2
 800600a:	b29b      	uxth	r3, r3
 800600c:	8a7a      	ldrh	r2, [r7, #18]
 800600e:	429a      	cmp	r2, r3
 8006010:	d901      	bls.n	8006016 <pbuf_add_header_impl+0x56>
    return 1;
 8006012:	2301      	movs	r3, #1
 8006014:	e032      	b.n	800607c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	7b1b      	ldrb	r3, [r3, #12]
 800601a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800601c:	8a3b      	ldrh	r3, [r7, #16]
 800601e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	425b      	negs	r3, r3
 800602e:	4413      	add	r3, r2
 8006030:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	3310      	adds	r3, #16
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	429a      	cmp	r2, r3
 800603a:	d20d      	bcs.n	8006058 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800603c:	2301      	movs	r3, #1
 800603e:	e01d      	b.n	800607c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006040:	79fb      	ldrb	r3, [r7, #7]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d006      	beq.n	8006054 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	425b      	negs	r3, r3
 800604e:	4413      	add	r3, r2
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	e001      	b.n	8006058 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006054:	2301      	movs	r3, #1
 8006056:	e011      	b.n	800607c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	895a      	ldrh	r2, [r3, #10]
 8006062:	8a7b      	ldrh	r3, [r7, #18]
 8006064:	4413      	add	r3, r2
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	891a      	ldrh	r2, [r3, #8]
 8006070:	8a7b      	ldrh	r3, [r7, #18]
 8006072:	4413      	add	r3, r2
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	811a      	strh	r2, [r3, #8]


  return 0;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	08012cfc 	.word	0x08012cfc
 8006088:	08012e60 	.word	0x08012e60
 800608c:	08012d5c 	.word	0x08012d5c

08006090 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800609a:	2200      	movs	r2, #0
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff ff8e 	bl	8005fc0 <pbuf_add_header_impl>
 80060a4:	4603      	mov	r3, r0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <pbuf_remove_header+0x1e>
 80060c0:	4b20      	ldr	r3, [pc, #128]	; (8006144 <pbuf_remove_header+0x94>)
 80060c2:	f240 224b 	movw	r2, #587	; 0x24b
 80060c6:	4920      	ldr	r1, [pc, #128]	; (8006148 <pbuf_remove_header+0x98>)
 80060c8:	4820      	ldr	r0, [pc, #128]	; (800614c <pbuf_remove_header+0x9c>)
 80060ca:	f00b fbe9 	bl	80118a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <pbuf_remove_header+0x2c>
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060da:	d301      	bcc.n	80060e0 <pbuf_remove_header+0x30>
    return 1;
 80060dc:	2301      	movs	r3, #1
 80060de:	e02c      	b.n	800613a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <pbuf_remove_header+0x3a>
    return 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e027      	b.n	800613a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	895b      	ldrh	r3, [r3, #10]
 80060f2:	89fa      	ldrh	r2, [r7, #14]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d908      	bls.n	800610a <pbuf_remove_header+0x5a>
 80060f8:	4b12      	ldr	r3, [pc, #72]	; (8006144 <pbuf_remove_header+0x94>)
 80060fa:	f240 2255 	movw	r2, #597	; 0x255
 80060fe:	4914      	ldr	r1, [pc, #80]	; (8006150 <pbuf_remove_header+0xa0>)
 8006100:	4812      	ldr	r0, [pc, #72]	; (800614c <pbuf_remove_header+0x9c>)
 8006102:	f00b fbcd 	bl	80118a0 <iprintf>
 8006106:	2301      	movs	r3, #1
 8006108:	e017      	b.n	800613a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	441a      	add	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	895a      	ldrh	r2, [r3, #10]
 8006120:	89fb      	ldrh	r3, [r7, #14]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	b29a      	uxth	r2, r3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	891a      	ldrh	r2, [r3, #8]
 800612e:	89fb      	ldrh	r3, [r7, #14]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	08012cfc 	.word	0x08012cfc
 8006148:	08012e60 	.word	0x08012e60
 800614c:	08012d5c 	.word	0x08012d5c
 8006150:	08012e6c 	.word	0x08012e6c

08006154 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	460b      	mov	r3, r1
 800615e:	807b      	strh	r3, [r7, #2]
 8006160:	4613      	mov	r3, r2
 8006162:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006164:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006168:	2b00      	cmp	r3, #0
 800616a:	da08      	bge.n	800617e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800616c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006170:	425b      	negs	r3, r3
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ff9b 	bl	80060b0 <pbuf_remove_header>
 800617a:	4603      	mov	r3, r0
 800617c:	e007      	b.n	800618e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800617e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006182:	787a      	ldrb	r2, [r7, #1]
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff ff1a 	bl	8005fc0 <pbuf_add_header_impl>
 800618c:	4603      	mov	r3, r0
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	460b      	mov	r3, r1
 80061a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80061a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ffd2 	bl	8006154 <pbuf_header_impl>
 80061b0:	4603      	mov	r3, r0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d106      	bne.n	80061de <pbuf_free+0x22>
 80061d0:	4b38      	ldr	r3, [pc, #224]	; (80062b4 <pbuf_free+0xf8>)
 80061d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80061d6:	4938      	ldr	r1, [pc, #224]	; (80062b8 <pbuf_free+0xfc>)
 80061d8:	4838      	ldr	r0, [pc, #224]	; (80062bc <pbuf_free+0x100>)
 80061da:	f00b fb61 	bl	80118a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80061de:	2300      	movs	r3, #0
 80061e0:	e063      	b.n	80062aa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80061e6:	e05c      	b.n	80062a2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	7b9b      	ldrb	r3, [r3, #14]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <pbuf_free+0x42>
 80061f0:	4b30      	ldr	r3, [pc, #192]	; (80062b4 <pbuf_free+0xf8>)
 80061f2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80061f6:	4932      	ldr	r1, [pc, #200]	; (80062c0 <pbuf_free+0x104>)
 80061f8:	4830      	ldr	r0, [pc, #192]	; (80062bc <pbuf_free+0x100>)
 80061fa:	f00b fb51 	bl	80118a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	7b9b      	ldrb	r3, [r3, #14]
 8006202:	3b01      	subs	r3, #1
 8006204:	b2da      	uxtb	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	739a      	strb	r2, [r3, #14]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	7b9b      	ldrb	r3, [r3, #14]
 800620e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006210:	7dbb      	ldrb	r3, [r7, #22]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d143      	bne.n	800629e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7b1b      	ldrb	r3, [r3, #12]
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	7b5b      	ldrb	r3, [r3, #13]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d011      	beq.n	8006256 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <pbuf_free+0x90>
 800623e:	4b1d      	ldr	r3, [pc, #116]	; (80062b4 <pbuf_free+0xf8>)
 8006240:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006244:	491f      	ldr	r1, [pc, #124]	; (80062c4 <pbuf_free+0x108>)
 8006246:	481d      	ldr	r0, [pc, #116]	; (80062bc <pbuf_free+0x100>)
 8006248:	f00b fb2a 	bl	80118a0 <iprintf>
        pc->custom_free_function(p);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
 8006254:	e01d      	b.n	8006292 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d104      	bne.n	8006266 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	2008      	movs	r0, #8
 8006260:	f7ff f92a 	bl	80054b8 <memp_free>
 8006264:	e015      	b.n	8006292 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d104      	bne.n	8006276 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	2007      	movs	r0, #7
 8006270:	f7ff f922 	bl	80054b8 <memp_free>
 8006274:	e00d      	b.n	8006292 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d103      	bne.n	8006284 <pbuf_free+0xc8>
          mem_free(p);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7fe fdb5 	bl	8004dec <mem_free>
 8006282:	e006      	b.n	8006292 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <pbuf_free+0xf8>)
 8006286:	f240 320f 	movw	r2, #783	; 0x30f
 800628a:	490f      	ldr	r1, [pc, #60]	; (80062c8 <pbuf_free+0x10c>)
 800628c:	480b      	ldr	r0, [pc, #44]	; (80062bc <pbuf_free+0x100>)
 800628e:	f00b fb07 	bl	80118a0 <iprintf>
        }
      }
      count++;
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	3301      	adds	r3, #1
 8006296:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	e001      	b.n	80062a2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d19f      	bne.n	80061e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80062a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	08012cfc 	.word	0x08012cfc
 80062b8:	08012e60 	.word	0x08012e60
 80062bc:	08012d5c 	.word	0x08012d5c
 80062c0:	08012e8c 	.word	0x08012e8c
 80062c4:	08012ea4 	.word	0x08012ea4
 80062c8:	08012ec8 	.word	0x08012ec8

080062cc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80062d8:	e005      	b.n	80062e6 <pbuf_clen+0x1a>
    ++len;
 80062da:	89fb      	ldrh	r3, [r7, #14]
 80062dc:	3301      	adds	r3, #1
 80062de:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1f6      	bne.n	80062da <pbuf_clen+0xe>
  }
  return len;
 80062ec:	89fb      	ldrh	r3, [r7, #14]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
	...

080062fc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d010      	beq.n	800632c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	7b9b      	ldrb	r3, [r3, #14]
 800630e:	3301      	adds	r3, #1
 8006310:	b2da      	uxtb	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	7b9b      	ldrb	r3, [r3, #14]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <pbuf_ref+0x30>
 800631e:	4b05      	ldr	r3, [pc, #20]	; (8006334 <pbuf_ref+0x38>)
 8006320:	f240 3242 	movw	r2, #834	; 0x342
 8006324:	4904      	ldr	r1, [pc, #16]	; (8006338 <pbuf_ref+0x3c>)
 8006326:	4805      	ldr	r0, [pc, #20]	; (800633c <pbuf_ref+0x40>)
 8006328:	f00b faba 	bl	80118a0 <iprintf>
  }
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	08012cfc 	.word	0x08012cfc
 8006338:	08012edc 	.word	0x08012edc
 800633c:	08012d5c 	.word	0x08012d5c

08006340 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <pbuf_cat+0x16>
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d107      	bne.n	8006366 <pbuf_cat+0x26>
 8006356:	4b20      	ldr	r3, [pc, #128]	; (80063d8 <pbuf_cat+0x98>)
 8006358:	f240 3259 	movw	r2, #857	; 0x359
 800635c:	491f      	ldr	r1, [pc, #124]	; (80063dc <pbuf_cat+0x9c>)
 800635e:	4820      	ldr	r0, [pc, #128]	; (80063e0 <pbuf_cat+0xa0>)
 8006360:	f00b fa9e 	bl	80118a0 <iprintf>
 8006364:	e034      	b.n	80063d0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e00a      	b.n	8006382 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	891a      	ldrh	r2, [r3, #8]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	891b      	ldrh	r3, [r3, #8]
 8006374:	4413      	add	r3, r2
 8006376:	b29a      	uxth	r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	891a      	ldrh	r2, [r3, #8]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	895b      	ldrh	r3, [r3, #10]
 8006392:	429a      	cmp	r2, r3
 8006394:	d006      	beq.n	80063a4 <pbuf_cat+0x64>
 8006396:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <pbuf_cat+0x98>)
 8006398:	f240 3262 	movw	r2, #866	; 0x362
 800639c:	4911      	ldr	r1, [pc, #68]	; (80063e4 <pbuf_cat+0xa4>)
 800639e:	4810      	ldr	r0, [pc, #64]	; (80063e0 <pbuf_cat+0xa0>)
 80063a0:	f00b fa7e 	bl	80118a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d006      	beq.n	80063ba <pbuf_cat+0x7a>
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <pbuf_cat+0x98>)
 80063ae:	f240 3263 	movw	r2, #867	; 0x363
 80063b2:	490d      	ldr	r1, [pc, #52]	; (80063e8 <pbuf_cat+0xa8>)
 80063b4:	480a      	ldr	r0, [pc, #40]	; (80063e0 <pbuf_cat+0xa0>)
 80063b6:	f00b fa73 	bl	80118a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	891a      	ldrh	r2, [r3, #8]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	891b      	ldrh	r3, [r3, #8]
 80063c2:	4413      	add	r3, r2
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	08012cfc 	.word	0x08012cfc
 80063dc:	08012ef0 	.word	0x08012ef0
 80063e0:	08012d5c 	.word	0x08012d5c
 80063e4:	08012f28 	.word	0x08012f28
 80063e8:	08012f58 	.word	0x08012f58

080063ec <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff ffa1 	bl	8006340 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80063fe:	6838      	ldr	r0, [r7, #0]
 8006400:	f7ff ff7c 	bl	80062fc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	2300      	movs	r3, #0
 800641c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <pbuf_copy+0x2a>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <pbuf_copy+0x2a>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	891a      	ldrh	r2, [r3, #8]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	891b      	ldrh	r3, [r3, #8]
 8006432:	429a      	cmp	r2, r3
 8006434:	d209      	bcs.n	800644a <pbuf_copy+0x3e>
 8006436:	4b57      	ldr	r3, [pc, #348]	; (8006594 <pbuf_copy+0x188>)
 8006438:	f240 32c9 	movw	r2, #969	; 0x3c9
 800643c:	4956      	ldr	r1, [pc, #344]	; (8006598 <pbuf_copy+0x18c>)
 800643e:	4857      	ldr	r0, [pc, #348]	; (800659c <pbuf_copy+0x190>)
 8006440:	f00b fa2e 	bl	80118a0 <iprintf>
 8006444:	f06f 030f 	mvn.w	r3, #15
 8006448:	e09f      	b.n	800658a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	895b      	ldrh	r3, [r3, #10]
 800644e:	461a      	mov	r2, r3
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	1ad2      	subs	r2, r2, r3
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	895b      	ldrh	r3, [r3, #10]
 8006458:	4619      	mov	r1, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1acb      	subs	r3, r1, r3
 800645e:	429a      	cmp	r2, r3
 8006460:	d306      	bcc.n	8006470 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	895b      	ldrh	r3, [r3, #10]
 8006466:	461a      	mov	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e005      	b.n	800647c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	895b      	ldrh	r3, [r3, #10]
 8006474:	461a      	mov	r2, r3
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	18d0      	adds	r0, r2, r3
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	4413      	add	r3, r2
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4619      	mov	r1, r3
 8006490:	f00b fae1 	bl	8011a56 <memcpy>
    offset_to += len;
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4413      	add	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800649c:	693a      	ldr	r2, [r7, #16]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4413      	add	r3, r2
 80064a2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	895b      	ldrh	r3, [r3, #10]
 80064a8:	461a      	mov	r2, r3
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d906      	bls.n	80064be <pbuf_copy+0xb2>
 80064b0:	4b38      	ldr	r3, [pc, #224]	; (8006594 <pbuf_copy+0x188>)
 80064b2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80064b6:	493a      	ldr	r1, [pc, #232]	; (80065a0 <pbuf_copy+0x194>)
 80064b8:	4838      	ldr	r0, [pc, #224]	; (800659c <pbuf_copy+0x190>)
 80064ba:	f00b f9f1 	bl	80118a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	895b      	ldrh	r3, [r3, #10]
 80064c2:	461a      	mov	r2, r3
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d906      	bls.n	80064d8 <pbuf_copy+0xcc>
 80064ca:	4b32      	ldr	r3, [pc, #200]	; (8006594 <pbuf_copy+0x188>)
 80064cc:	f240 32da 	movw	r2, #986	; 0x3da
 80064d0:	4934      	ldr	r1, [pc, #208]	; (80065a4 <pbuf_copy+0x198>)
 80064d2:	4832      	ldr	r0, [pc, #200]	; (800659c <pbuf_copy+0x190>)
 80064d4:	f00b f9e4 	bl	80118a0 <iprintf>
    if (offset_from >= p_from->len) {
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	895b      	ldrh	r3, [r3, #10]
 80064dc:	461a      	mov	r2, r3
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d304      	bcc.n	80064ee <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	895b      	ldrh	r3, [r3, #10]
 80064f2:	461a      	mov	r2, r3
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d114      	bne.n	8006524 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10c      	bne.n	8006524 <pbuf_copy+0x118>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <pbuf_copy+0x118>
 8006510:	4b20      	ldr	r3, [pc, #128]	; (8006594 <pbuf_copy+0x188>)
 8006512:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006516:	4924      	ldr	r1, [pc, #144]	; (80065a8 <pbuf_copy+0x19c>)
 8006518:	4820      	ldr	r0, [pc, #128]	; (800659c <pbuf_copy+0x190>)
 800651a:	f00b f9c1 	bl	80118a0 <iprintf>
 800651e:	f06f 030f 	mvn.w	r3, #15
 8006522:	e032      	b.n	800658a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d013      	beq.n	8006552 <pbuf_copy+0x146>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	895a      	ldrh	r2, [r3, #10]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	891b      	ldrh	r3, [r3, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	d10d      	bne.n	8006552 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <pbuf_copy+0x146>
 800653e:	4b15      	ldr	r3, [pc, #84]	; (8006594 <pbuf_copy+0x188>)
 8006540:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006544:	4919      	ldr	r1, [pc, #100]	; (80065ac <pbuf_copy+0x1a0>)
 8006546:	4815      	ldr	r0, [pc, #84]	; (800659c <pbuf_copy+0x190>)
 8006548:	f00b f9aa 	bl	80118a0 <iprintf>
 800654c:	f06f 0305 	mvn.w	r3, #5
 8006550:	e01b      	b.n	800658a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d013      	beq.n	8006580 <pbuf_copy+0x174>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	895a      	ldrh	r2, [r3, #10]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	891b      	ldrh	r3, [r3, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d10d      	bne.n	8006580 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d009      	beq.n	8006580 <pbuf_copy+0x174>
 800656c:	4b09      	ldr	r3, [pc, #36]	; (8006594 <pbuf_copy+0x188>)
 800656e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006572:	490e      	ldr	r1, [pc, #56]	; (80065ac <pbuf_copy+0x1a0>)
 8006574:	4809      	ldr	r0, [pc, #36]	; (800659c <pbuf_copy+0x190>)
 8006576:	f00b f993 	bl	80118a0 <iprintf>
 800657a:	f06f 0305 	mvn.w	r3, #5
 800657e:	e004      	b.n	800658a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	f47f af61 	bne.w	800644a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3718      	adds	r7, #24
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	08012cfc 	.word	0x08012cfc
 8006598:	08012fa4 	.word	0x08012fa4
 800659c:	08012d5c 	.word	0x08012d5c
 80065a0:	08012fd4 	.word	0x08012fd4
 80065a4:	08012fec 	.word	0x08012fec
 80065a8:	08013008 	.word	0x08013008
 80065ac:	08013018 	.word	0x08013018

080065b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b088      	sub	sp, #32
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	4611      	mov	r1, r2
 80065bc:	461a      	mov	r2, r3
 80065be:	460b      	mov	r3, r1
 80065c0:	80fb      	strh	r3, [r7, #6]
 80065c2:	4613      	mov	r3, r2
 80065c4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80065ca:	2300      	movs	r3, #0
 80065cc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d108      	bne.n	80065e6 <pbuf_copy_partial+0x36>
 80065d4:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <pbuf_copy_partial+0xd4>)
 80065d6:	f240 420a 	movw	r2, #1034	; 0x40a
 80065da:	492b      	ldr	r1, [pc, #172]	; (8006688 <pbuf_copy_partial+0xd8>)
 80065dc:	482b      	ldr	r0, [pc, #172]	; (800668c <pbuf_copy_partial+0xdc>)
 80065de:	f00b f95f 	bl	80118a0 <iprintf>
 80065e2:	2300      	movs	r3, #0
 80065e4:	e04a      	b.n	800667c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d108      	bne.n	80065fe <pbuf_copy_partial+0x4e>
 80065ec:	4b25      	ldr	r3, [pc, #148]	; (8006684 <pbuf_copy_partial+0xd4>)
 80065ee:	f240 420b 	movw	r2, #1035	; 0x40b
 80065f2:	4927      	ldr	r1, [pc, #156]	; (8006690 <pbuf_copy_partial+0xe0>)
 80065f4:	4825      	ldr	r0, [pc, #148]	; (800668c <pbuf_copy_partial+0xdc>)
 80065f6:	f00b f953 	bl	80118a0 <iprintf>
 80065fa:	2300      	movs	r3, #0
 80065fc:	e03e      	b.n	800667c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	e034      	b.n	800666e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006604:	88bb      	ldrh	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <pbuf_copy_partial+0x70>
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	895b      	ldrh	r3, [r3, #10]
 800660e:	88ba      	ldrh	r2, [r7, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d305      	bcc.n	8006620 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	895b      	ldrh	r3, [r3, #10]
 8006618:	88ba      	ldrh	r2, [r7, #4]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	80bb      	strh	r3, [r7, #4]
 800661e:	e023      	b.n	8006668 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	895a      	ldrh	r2, [r3, #10]
 8006624:	88bb      	ldrh	r3, [r7, #4]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800662a:	8b3a      	ldrh	r2, [r7, #24]
 800662c:	88fb      	ldrh	r3, [r7, #6]
 800662e:	429a      	cmp	r2, r3
 8006630:	d901      	bls.n	8006636 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006632:	88fb      	ldrh	r3, [r7, #6]
 8006634:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006636:	8b7b      	ldrh	r3, [r7, #26]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	18d0      	adds	r0, r2, r3
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	88bb      	ldrh	r3, [r7, #4]
 8006642:	4413      	add	r3, r2
 8006644:	8b3a      	ldrh	r2, [r7, #24]
 8006646:	4619      	mov	r1, r3
 8006648:	f00b fa05 	bl	8011a56 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800664c:	8afa      	ldrh	r2, [r7, #22]
 800664e:	8b3b      	ldrh	r3, [r7, #24]
 8006650:	4413      	add	r3, r2
 8006652:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006654:	8b7a      	ldrh	r2, [r7, #26]
 8006656:	8b3b      	ldrh	r3, [r7, #24]
 8006658:	4413      	add	r3, r2
 800665a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800665c:	88fa      	ldrh	r2, [r7, #6]
 800665e:	8b3b      	ldrh	r3, [r7, #24]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <pbuf_copy_partial+0xca>
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1c4      	bne.n	8006604 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800667a:	8afb      	ldrh	r3, [r7, #22]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	08012cfc 	.word	0x08012cfc
 8006688:	08013044 	.word	0x08013044
 800668c:	08012d5c 	.word	0x08012d5c
 8006690:	08013064 	.word	0x08013064

08006694 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	4603      	mov	r3, r0
 800669c:	603a      	str	r2, [r7, #0]
 800669e:	71fb      	strb	r3, [r7, #7]
 80066a0:	460b      	mov	r3, r1
 80066a2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	8919      	ldrh	r1, [r3, #8]
 80066a8:	88ba      	ldrh	r2, [r7, #4]
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff faa1 	bl	8005bf4 <pbuf_alloc>
 80066b2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d101      	bne.n	80066be <pbuf_clone+0x2a>
    return NULL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e011      	b.n	80066e2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff fea3 	bl	800640c <pbuf_copy>
 80066c6:	4603      	mov	r3, r0
 80066c8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80066ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d006      	beq.n	80066e0 <pbuf_clone+0x4c>
 80066d2:	4b06      	ldr	r3, [pc, #24]	; (80066ec <pbuf_clone+0x58>)
 80066d4:	f240 5224 	movw	r2, #1316	; 0x524
 80066d8:	4905      	ldr	r1, [pc, #20]	; (80066f0 <pbuf_clone+0x5c>)
 80066da:	4806      	ldr	r0, [pc, #24]	; (80066f4 <pbuf_clone+0x60>)
 80066dc:	f00b f8e0 	bl	80118a0 <iprintf>
  return q;
 80066e0:	68fb      	ldr	r3, [r7, #12]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	08012cfc 	.word	0x08012cfc
 80066f0:	08013170 	.word	0x08013170
 80066f4:	08012d5c 	.word	0x08012d5c

080066f8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80066fc:	f00a ffd0 	bl	80116a0 <rand>
 8006700:	4603      	mov	r3, r0
 8006702:	b29b      	uxth	r3, r3
 8006704:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006708:	b29b      	uxth	r3, r3
 800670a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800670e:	b29a      	uxth	r2, r3
 8006710:	4b01      	ldr	r3, [pc, #4]	; (8006718 <tcp_init+0x20>)
 8006712:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006714:	bf00      	nop
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000020 	.word	0x20000020

0800671c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	7d1b      	ldrb	r3, [r3, #20]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d105      	bne.n	8006738 <tcp_free+0x1c>
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <tcp_free+0x2c>)
 800672e:	22d4      	movs	r2, #212	; 0xd4
 8006730:	4906      	ldr	r1, [pc, #24]	; (800674c <tcp_free+0x30>)
 8006732:	4807      	ldr	r0, [pc, #28]	; (8006750 <tcp_free+0x34>)
 8006734:	f00b f8b4 	bl	80118a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	2001      	movs	r0, #1
 800673c:	f7fe febc 	bl	80054b8 <memp_free>
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	080131fc 	.word	0x080131fc
 800674c:	0801322c 	.word	0x0801322c
 8006750:	08013240 	.word	0x08013240

08006754 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	7d1b      	ldrb	r3, [r3, #20]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d105      	bne.n	8006770 <tcp_free_listen+0x1c>
 8006764:	4b06      	ldr	r3, [pc, #24]	; (8006780 <tcp_free_listen+0x2c>)
 8006766:	22df      	movs	r2, #223	; 0xdf
 8006768:	4906      	ldr	r1, [pc, #24]	; (8006784 <tcp_free_listen+0x30>)
 800676a:	4807      	ldr	r0, [pc, #28]	; (8006788 <tcp_free_listen+0x34>)
 800676c:	f00b f898 	bl	80118a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	2002      	movs	r0, #2
 8006774:	f7fe fea0 	bl	80054b8 <memp_free>
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	080131fc 	.word	0x080131fc
 8006784:	08013268 	.word	0x08013268
 8006788:	08013240 	.word	0x08013240

0800678c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006790:	f001 f85c 	bl	800784c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <tcp_tmr+0x28>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	b2da      	uxtb	r2, r3
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <tcp_tmr+0x28>)
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <tcp_tmr+0x28>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80067ac:	f000 fd0e 	bl	80071cc <tcp_slowtmr>
  }
}
 80067b0:	bf00      	nop
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	200087a1 	.word	0x200087a1

080067b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <tcp_remove_listener+0x1c>
 80067c8:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <tcp_remove_listener+0x48>)
 80067ca:	22ff      	movs	r2, #255	; 0xff
 80067cc:	490d      	ldr	r1, [pc, #52]	; (8006804 <tcp_remove_listener+0x4c>)
 80067ce:	480e      	ldr	r0, [pc, #56]	; (8006808 <tcp_remove_listener+0x50>)
 80067d0:	f00b f866 	bl	80118a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	e00a      	b.n	80067f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d102      	bne.n	80067ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f1      	bne.n	80067da <tcp_remove_listener+0x22>
    }
  }
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	080131fc 	.word	0x080131fc
 8006804:	08013284 	.word	0x08013284
 8006808:	08013240 	.word	0x08013240

0800680c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <tcp_listen_closed+0x1c>
 800681a:	4b14      	ldr	r3, [pc, #80]	; (800686c <tcp_listen_closed+0x60>)
 800681c:	f240 1211 	movw	r2, #273	; 0x111
 8006820:	4913      	ldr	r1, [pc, #76]	; (8006870 <tcp_listen_closed+0x64>)
 8006822:	4814      	ldr	r0, [pc, #80]	; (8006874 <tcp_listen_closed+0x68>)
 8006824:	f00b f83c 	bl	80118a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	7d1b      	ldrb	r3, [r3, #20]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d006      	beq.n	800683e <tcp_listen_closed+0x32>
 8006830:	4b0e      	ldr	r3, [pc, #56]	; (800686c <tcp_listen_closed+0x60>)
 8006832:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006836:	4910      	ldr	r1, [pc, #64]	; (8006878 <tcp_listen_closed+0x6c>)
 8006838:	480e      	ldr	r0, [pc, #56]	; (8006874 <tcp_listen_closed+0x68>)
 800683a:	f00b f831 	bl	80118a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800683e:	2301      	movs	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	e00b      	b.n	800685c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006844:	4a0d      	ldr	r2, [pc, #52]	; (800687c <tcp_listen_closed+0x70>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff ffb1 	bl	80067b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3301      	adds	r3, #1
 800685a:	60fb      	str	r3, [r7, #12]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b03      	cmp	r3, #3
 8006860:	d9f0      	bls.n	8006844 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	080131fc 	.word	0x080131fc
 8006870:	080132ac 	.word	0x080132ac
 8006874:	08013240 	.word	0x08013240
 8006878:	080132b8 	.word	0x080132b8
 800687c:	0801557c 	.word	0x0801557c

08006880 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006880:	b5b0      	push	{r4, r5, r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af04      	add	r7, sp, #16
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <tcp_close_shutdown+0x20>
 8006892:	4b63      	ldr	r3, [pc, #396]	; (8006a20 <tcp_close_shutdown+0x1a0>)
 8006894:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006898:	4962      	ldr	r1, [pc, #392]	; (8006a24 <tcp_close_shutdown+0x1a4>)
 800689a:	4863      	ldr	r0, [pc, #396]	; (8006a28 <tcp_close_shutdown+0x1a8>)
 800689c:	f00b f800 	bl	80118a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d066      	beq.n	8006974 <tcp_close_shutdown+0xf4>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7d1b      	ldrb	r3, [r3, #20]
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d003      	beq.n	80068b6 <tcp_close_shutdown+0x36>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7d1b      	ldrb	r3, [r3, #20]
 80068b2:	2b07      	cmp	r3, #7
 80068b4:	d15e      	bne.n	8006974 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d104      	bne.n	80068c8 <tcp_close_shutdown+0x48>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80068c6:	d055      	beq.n	8006974 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	8b5b      	ldrh	r3, [r3, #26]
 80068cc:	f003 0310 	and.w	r3, r3, #16
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d106      	bne.n	80068e2 <tcp_close_shutdown+0x62>
 80068d4:	4b52      	ldr	r3, [pc, #328]	; (8006a20 <tcp_close_shutdown+0x1a0>)
 80068d6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80068da:	4954      	ldr	r1, [pc, #336]	; (8006a2c <tcp_close_shutdown+0x1ac>)
 80068dc:	4852      	ldr	r0, [pc, #328]	; (8006a28 <tcp_close_shutdown+0x1a8>)
 80068de:	f00a ffdf 	bl	80118a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80068ea:	687d      	ldr	r5, [r7, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3304      	adds	r3, #4
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	8ad2      	ldrh	r2, [r2, #22]
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	8b09      	ldrh	r1, [r1, #24]
 80068f8:	9102      	str	r1, [sp, #8]
 80068fa:	9201      	str	r2, [sp, #4]
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	462b      	mov	r3, r5
 8006900:	4622      	mov	r2, r4
 8006902:	4601      	mov	r1, r0
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f005 fd89 	bl	800c41c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f001 fb66 	bl	8007fdc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006910:	4b47      	ldr	r3, [pc, #284]	; (8006a30 <tcp_close_shutdown+0x1b0>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d105      	bne.n	8006926 <tcp_close_shutdown+0xa6>
 800691a:	4b45      	ldr	r3, [pc, #276]	; (8006a30 <tcp_close_shutdown+0x1b0>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	4a43      	ldr	r2, [pc, #268]	; (8006a30 <tcp_close_shutdown+0x1b0>)
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	e013      	b.n	800694e <tcp_close_shutdown+0xce>
 8006926:	4b42      	ldr	r3, [pc, #264]	; (8006a30 <tcp_close_shutdown+0x1b0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e00c      	b.n	8006948 <tcp_close_shutdown+0xc8>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d104      	bne.n	8006942 <tcp_close_shutdown+0xc2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	60da      	str	r2, [r3, #12]
 8006940:	e005      	b.n	800694e <tcp_close_shutdown+0xce>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1ef      	bne.n	800692e <tcp_close_shutdown+0xae>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	60da      	str	r2, [r3, #12]
 8006954:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <tcp_close_shutdown+0x1b4>)
 8006956:	2201      	movs	r2, #1
 8006958:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800695a:	4b37      	ldr	r3, [pc, #220]	; (8006a38 <tcp_close_shutdown+0x1b8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	429a      	cmp	r2, r3
 8006962:	d102      	bne.n	800696a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006964:	f003 fffe 	bl	800a964 <tcp_trigger_input_pcb_close>
 8006968:	e002      	b.n	8006970 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fed6 	bl	800671c <tcp_free>
      }
      return ERR_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	e050      	b.n	8006a16 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7d1b      	ldrb	r3, [r3, #20]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d03b      	beq.n	80069f4 <tcp_close_shutdown+0x174>
 800697c:	2b02      	cmp	r3, #2
 800697e:	dc44      	bgt.n	8006a0a <tcp_close_shutdown+0x18a>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <tcp_close_shutdown+0x10a>
 8006984:	2b01      	cmp	r3, #1
 8006986:	d02a      	beq.n	80069de <tcp_close_shutdown+0x15e>
 8006988:	e03f      	b.n	8006a0a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8adb      	ldrh	r3, [r3, #22]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d021      	beq.n	80069d6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006992:	4b2a      	ldr	r3, [pc, #168]	; (8006a3c <tcp_close_shutdown+0x1bc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d105      	bne.n	80069a8 <tcp_close_shutdown+0x128>
 800699c:	4b27      	ldr	r3, [pc, #156]	; (8006a3c <tcp_close_shutdown+0x1bc>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	4a26      	ldr	r2, [pc, #152]	; (8006a3c <tcp_close_shutdown+0x1bc>)
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e013      	b.n	80069d0 <tcp_close_shutdown+0x150>
 80069a8:	4b24      	ldr	r3, [pc, #144]	; (8006a3c <tcp_close_shutdown+0x1bc>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	60bb      	str	r3, [r7, #8]
 80069ae:	e00c      	b.n	80069ca <tcp_close_shutdown+0x14a>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d104      	bne.n	80069c4 <tcp_close_shutdown+0x144>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68da      	ldr	r2, [r3, #12]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	e005      	b.n	80069d0 <tcp_close_shutdown+0x150>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1ef      	bne.n	80069b0 <tcp_close_shutdown+0x130>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff fea0 	bl	800671c <tcp_free>
      break;
 80069dc:	e01a      	b.n	8006a14 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff ff14 	bl	800680c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4816      	ldr	r0, [pc, #88]	; (8006a40 <tcp_close_shutdown+0x1c0>)
 80069e8:	f001 fb48 	bl	800807c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7ff feb1 	bl	8006754 <tcp_free_listen>
      break;
 80069f2:	e00f      	b.n	8006a14 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	480e      	ldr	r0, [pc, #56]	; (8006a30 <tcp_close_shutdown+0x1b0>)
 80069f8:	f001 fb40 	bl	800807c <tcp_pcb_remove>
 80069fc:	4b0d      	ldr	r3, [pc, #52]	; (8006a34 <tcp_close_shutdown+0x1b4>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff fe8a 	bl	800671c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8006a08:	e004      	b.n	8006a14 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f81a 	bl	8006a44 <tcp_close_shutdown_fin>
 8006a10:	4603      	mov	r3, r0
 8006a12:	e000      	b.n	8006a16 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	080131fc 	.word	0x080131fc
 8006a24:	080132d0 	.word	0x080132d0
 8006a28:	08013240 	.word	0x08013240
 8006a2c:	080132f0 	.word	0x080132f0
 8006a30:	20008798 	.word	0x20008798
 8006a34:	200087a0 	.word	0x200087a0
 8006a38:	200087d8 	.word	0x200087d8
 8006a3c:	20008790 	.word	0x20008790
 8006a40:	20008794 	.word	0x20008794

08006a44 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d106      	bne.n	8006a60 <tcp_close_shutdown_fin+0x1c>
 8006a52:	4b2e      	ldr	r3, [pc, #184]	; (8006b0c <tcp_close_shutdown_fin+0xc8>)
 8006a54:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006a58:	492d      	ldr	r1, [pc, #180]	; (8006b10 <tcp_close_shutdown_fin+0xcc>)
 8006a5a:	482e      	ldr	r0, [pc, #184]	; (8006b14 <tcp_close_shutdown_fin+0xd0>)
 8006a5c:	f00a ff20 	bl	80118a0 <iprintf>

  switch (pcb->state) {
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	7d1b      	ldrb	r3, [r3, #20]
 8006a64:	2b07      	cmp	r3, #7
 8006a66:	d020      	beq.n	8006aaa <tcp_close_shutdown_fin+0x66>
 8006a68:	2b07      	cmp	r3, #7
 8006a6a:	dc2b      	bgt.n	8006ac4 <tcp_close_shutdown_fin+0x80>
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d002      	beq.n	8006a76 <tcp_close_shutdown_fin+0x32>
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d00d      	beq.n	8006a90 <tcp_close_shutdown_fin+0x4c>
 8006a74:	e026      	b.n	8006ac4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f004 fdde 	bl	800b638 <tcp_send_fin>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d11f      	bne.n	8006ac8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2205      	movs	r2, #5
 8006a8c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006a8e:	e01b      	b.n	8006ac8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f004 fdd1 	bl	800b638 <tcp_send_fin>
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d114      	bne.n	8006acc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2205      	movs	r2, #5
 8006aa6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006aa8:	e010      	b.n	8006acc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f004 fdc4 	bl	800b638 <tcp_send_fin>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d109      	bne.n	8006ad0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2209      	movs	r2, #9
 8006ac0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006ac2:	e005      	b.n	8006ad0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e01c      	b.n	8006b02 <tcp_close_shutdown_fin+0xbe>
      break;
 8006ac8:	bf00      	nop
 8006aca:	e002      	b.n	8006ad2 <tcp_close_shutdown_fin+0x8e>
      break;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <tcp_close_shutdown_fin+0x8e>
      break;
 8006ad0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d103      	bne.n	8006ae2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f004 feea 	bl	800b8b4 <tcp_output>
 8006ae0:	e00d      	b.n	8006afe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aea:	d108      	bne.n	8006afe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	8b5b      	ldrh	r3, [r3, #26]
 8006af0:	f043 0308 	orr.w	r3, r3, #8
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e001      	b.n	8006b02 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8006afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	080131fc 	.word	0x080131fc
 8006b10:	080132ac 	.word	0x080132ac
 8006b14:	08013240 	.word	0x08013240

08006b18 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <tcp_close+0x22>
 8006b26:	4b0f      	ldr	r3, [pc, #60]	; (8006b64 <tcp_close+0x4c>)
 8006b28:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006b2c:	490e      	ldr	r1, [pc, #56]	; (8006b68 <tcp_close+0x50>)
 8006b2e:	480f      	ldr	r0, [pc, #60]	; (8006b6c <tcp_close+0x54>)
 8006b30:	f00a feb6 	bl	80118a0 <iprintf>
 8006b34:	f06f 030f 	mvn.w	r3, #15
 8006b38:	e00f      	b.n	8006b5a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	7d1b      	ldrb	r3, [r3, #20]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d006      	beq.n	8006b50 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8b5b      	ldrh	r3, [r3, #26]
 8006b46:	f043 0310 	orr.w	r3, r3, #16
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006b50:	2101      	movs	r1, #1
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff fe94 	bl	8006880 <tcp_close_shutdown>
 8006b58:	4603      	mov	r3, r0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	080131fc 	.word	0x080131fc
 8006b68:	0801330c 	.word	0x0801330c
 8006b6c:	08013240 	.word	0x08013240

08006b70 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08e      	sub	sp, #56	; 0x38
 8006b74:	af04      	add	r7, sp, #16
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d107      	bne.n	8006b90 <tcp_abandon+0x20>
 8006b80:	4b52      	ldr	r3, [pc, #328]	; (8006ccc <tcp_abandon+0x15c>)
 8006b82:	f240 223d 	movw	r2, #573	; 0x23d
 8006b86:	4952      	ldr	r1, [pc, #328]	; (8006cd0 <tcp_abandon+0x160>)
 8006b88:	4852      	ldr	r0, [pc, #328]	; (8006cd4 <tcp_abandon+0x164>)
 8006b8a:	f00a fe89 	bl	80118a0 <iprintf>
 8006b8e:	e099      	b.n	8006cc4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	7d1b      	ldrb	r3, [r3, #20]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d106      	bne.n	8006ba6 <tcp_abandon+0x36>
 8006b98:	4b4c      	ldr	r3, [pc, #304]	; (8006ccc <tcp_abandon+0x15c>)
 8006b9a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8006b9e:	494e      	ldr	r1, [pc, #312]	; (8006cd8 <tcp_abandon+0x168>)
 8006ba0:	484c      	ldr	r0, [pc, #304]	; (8006cd4 <tcp_abandon+0x164>)
 8006ba2:	f00a fe7d 	bl	80118a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	7d1b      	ldrb	r3, [r3, #20]
 8006baa:	2b0a      	cmp	r3, #10
 8006bac:	d107      	bne.n	8006bbe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	484a      	ldr	r0, [pc, #296]	; (8006cdc <tcp_abandon+0x16c>)
 8006bb2:	f001 fa63 	bl	800807c <tcp_pcb_remove>
    tcp_free(pcb);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7ff fdb0 	bl	800671c <tcp_free>
 8006bbc:	e082      	b.n	8006cc4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	7d1b      	ldrb	r3, [r3, #20]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d126      	bne.n	8006c36 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8adb      	ldrh	r3, [r3, #22]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d02e      	beq.n	8006c4e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006bf0:	4b3b      	ldr	r3, [pc, #236]	; (8006ce0 <tcp_abandon+0x170>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d105      	bne.n	8006c06 <tcp_abandon+0x96>
 8006bfa:	4b39      	ldr	r3, [pc, #228]	; (8006ce0 <tcp_abandon+0x170>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	4a37      	ldr	r2, [pc, #220]	; (8006ce0 <tcp_abandon+0x170>)
 8006c02:	6013      	str	r3, [r2, #0]
 8006c04:	e013      	b.n	8006c2e <tcp_abandon+0xbe>
 8006c06:	4b36      	ldr	r3, [pc, #216]	; (8006ce0 <tcp_abandon+0x170>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	e00c      	b.n	8006c28 <tcp_abandon+0xb8>
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d104      	bne.n	8006c22 <tcp_abandon+0xb2>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	60da      	str	r2, [r3, #12]
 8006c20:	e005      	b.n	8006c2e <tcp_abandon+0xbe>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1ef      	bne.n	8006c0e <tcp_abandon+0x9e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	60da      	str	r2, [r3, #12]
 8006c34:	e00b      	b.n	8006c4e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	8adb      	ldrh	r3, [r3, #22]
 8006c3e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4828      	ldr	r0, [pc, #160]	; (8006ce4 <tcp_abandon+0x174>)
 8006c44:	f001 fa1a 	bl	800807c <tcp_pcb_remove>
 8006c48:	4b27      	ldr	r3, [pc, #156]	; (8006ce8 <tcp_abandon+0x178>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fed6 	bl	8007a0c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d004      	beq.n	8006c72 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fecd 	bl	8007a0c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d004      	beq.n	8006c84 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fec4 	bl	8007a0c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00e      	beq.n	8006ca8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	8b12      	ldrh	r2, [r2, #24]
 8006c94:	9202      	str	r2, [sp, #8]
 8006c96:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006c98:	9201      	str	r2, [sp, #4]
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f005 fbba 	bl	800c41c <tcp_rst>
    }
    last_state = pcb->state;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	7d1b      	ldrb	r3, [r3, #20]
 8006cac:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff fd34 	bl	800671c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <tcp_abandon+0x154>
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f06f 010c 	mvn.w	r1, #12
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	4798      	blx	r3
  }
}
 8006cc4:	3728      	adds	r7, #40	; 0x28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	080131fc 	.word	0x080131fc
 8006cd0:	08013340 	.word	0x08013340
 8006cd4:	08013240 	.word	0x08013240
 8006cd8:	0801335c 	.word	0x0801335c
 8006cdc:	2000879c 	.word	0x2000879c
 8006ce0:	20008790 	.word	0x20008790
 8006ce4:	20008798 	.word	0x20008798
 8006ce8:	200087a0 	.word	0x200087a0

08006cec <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff ff3a 	bl	8006b70 <tcp_abandon>
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8006d12:	2304      	movs	r3, #4
 8006d14:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d101      	bne.n	8006d20 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8006d1c:	4b3e      	ldr	r3, [pc, #248]	; (8006e18 <tcp_bind+0x114>)
 8006d1e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <tcp_bind+0x36>
 8006d26:	4b3d      	ldr	r3, [pc, #244]	; (8006e1c <tcp_bind+0x118>)
 8006d28:	f240 22a9 	movw	r2, #681	; 0x2a9
 8006d2c:	493c      	ldr	r1, [pc, #240]	; (8006e20 <tcp_bind+0x11c>)
 8006d2e:	483d      	ldr	r0, [pc, #244]	; (8006e24 <tcp_bind+0x120>)
 8006d30:	f00a fdb6 	bl	80118a0 <iprintf>
 8006d34:	f06f 030f 	mvn.w	r3, #15
 8006d38:	e06a      	b.n	8006e10 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	7d1b      	ldrb	r3, [r3, #20]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <tcp_bind+0x52>
 8006d42:	4b36      	ldr	r3, [pc, #216]	; (8006e1c <tcp_bind+0x118>)
 8006d44:	f240 22ab 	movw	r2, #683	; 0x2ab
 8006d48:	4937      	ldr	r1, [pc, #220]	; (8006e28 <tcp_bind+0x124>)
 8006d4a:	4836      	ldr	r0, [pc, #216]	; (8006e24 <tcp_bind+0x120>)
 8006d4c:	f00a fda8 	bl	80118a0 <iprintf>
 8006d50:	f06f 0305 	mvn.w	r3, #5
 8006d54:	e05c      	b.n	8006e10 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d109      	bne.n	8006d70 <tcp_bind+0x6c>
    port = tcp_new_port();
 8006d5c:	f000 f9f0 	bl	8007140 <tcp_new_port>
 8006d60:	4603      	mov	r3, r0
 8006d62:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8006d64:	88fb      	ldrh	r3, [r7, #6]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d135      	bne.n	8006dd6 <tcp_bind+0xd2>
      return ERR_BUF;
 8006d6a:	f06f 0301 	mvn.w	r3, #1
 8006d6e:	e04f      	b.n	8006e10 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8006d70:	2300      	movs	r3, #0
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	e02b      	b.n	8006dce <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006d76:	4a2d      	ldr	r2, [pc, #180]	; (8006e2c <tcp_bind+0x128>)
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	e01e      	b.n	8006dc2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	8adb      	ldrh	r3, [r3, #22]
 8006d88:	88fa      	ldrh	r2, [r7, #6]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d116      	bne.n	8006dbc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8006d8e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d010      	beq.n	8006db6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00c      	beq.n	8006db6 <tcp_bind+0xb2>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d009      	beq.n	8006db6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d102      	bne.n	8006dbc <tcp_bind+0xb8>
              return ERR_USE;
 8006db6:	f06f 0307 	mvn.w	r3, #7
 8006dba:	e029      	b.n	8006e10 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1dd      	bne.n	8006d84 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	69fa      	ldr	r2, [r7, #28]
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	dbcf      	blt.n	8006d76 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00c      	beq.n	8006df6 <tcp_bind+0xf2>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d008      	beq.n	8006df6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <tcp_bind+0xec>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	e000      	b.n	8006df2 <tcp_bind+0xee>
 8006df0:	2300      	movs	r3, #0
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	88fa      	ldrh	r2, [r7, #6]
 8006dfa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <tcp_bind+0x12c>)
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	60da      	str	r2, [r3, #12]
 8006e04:	4a0a      	ldr	r2, [pc, #40]	; (8006e30 <tcp_bind+0x12c>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	f005 fcc9 	bl	800c7a0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3720      	adds	r7, #32
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	080155b4 	.word	0x080155b4
 8006e1c:	080131fc 	.word	0x080131fc
 8006e20:	08013390 	.word	0x08013390
 8006e24:	08013240 	.word	0x08013240
 8006e28:	080133a8 	.word	0x080133a8
 8006e2c:	0801557c 	.word	0x0801557c
 8006e30:	20008790 	.word	0x20008790

08006e34 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d106      	bne.n	8006e56 <tcp_accept_null+0x22>
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <tcp_accept_null+0x34>)
 8006e4a:	f240 320f 	movw	r2, #783	; 0x30f
 8006e4e:	4907      	ldr	r1, [pc, #28]	; (8006e6c <tcp_accept_null+0x38>)
 8006e50:	4807      	ldr	r0, [pc, #28]	; (8006e70 <tcp_accept_null+0x3c>)
 8006e52:	f00a fd25 	bl	80118a0 <iprintf>

  tcp_abort(pcb);
 8006e56:	68b8      	ldr	r0, [r7, #8]
 8006e58:	f7ff ff48 	bl	8006cec <tcp_abort>

  return ERR_ABRT;
 8006e5c:	f06f 030c 	mvn.w	r3, #12
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	080131fc 	.word	0x080131fc
 8006e6c:	080133d0 	.word	0x080133d0
 8006e70:	08013240 	.word	0x08013240

08006e74 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	2200      	movs	r2, #0
 8006e84:	4619      	mov	r1, r3
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f806 	bl	8006e98 <tcp_listen_with_backlog_and_err>
 8006e8c:	4603      	mov	r3, r0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d109      	bne.n	8006ec4 <tcp_listen_with_backlog_and_err+0x2c>
 8006eb0:	4b47      	ldr	r3, [pc, #284]	; (8006fd0 <tcp_listen_with_backlog_and_err+0x138>)
 8006eb2:	f240 3259 	movw	r2, #857	; 0x359
 8006eb6:	4947      	ldr	r1, [pc, #284]	; (8006fd4 <tcp_listen_with_backlog_and_err+0x13c>)
 8006eb8:	4847      	ldr	r0, [pc, #284]	; (8006fd8 <tcp_listen_with_backlog_and_err+0x140>)
 8006eba:	f00a fcf1 	bl	80118a0 <iprintf>
 8006ebe:	23f0      	movs	r3, #240	; 0xf0
 8006ec0:	76fb      	strb	r3, [r7, #27]
 8006ec2:	e079      	b.n	8006fb8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	7d1b      	ldrb	r3, [r3, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d009      	beq.n	8006ee0 <tcp_listen_with_backlog_and_err+0x48>
 8006ecc:	4b40      	ldr	r3, [pc, #256]	; (8006fd0 <tcp_listen_with_backlog_and_err+0x138>)
 8006ece:	f240 325a 	movw	r2, #858	; 0x35a
 8006ed2:	4942      	ldr	r1, [pc, #264]	; (8006fdc <tcp_listen_with_backlog_and_err+0x144>)
 8006ed4:	4840      	ldr	r0, [pc, #256]	; (8006fd8 <tcp_listen_with_backlog_and_err+0x140>)
 8006ed6:	f00a fce3 	bl	80118a0 <iprintf>
 8006eda:	23f1      	movs	r3, #241	; 0xf1
 8006edc:	76fb      	strb	r3, [r7, #27]
 8006ede:	e06b      	b.n	8006fb8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	7d1b      	ldrb	r3, [r3, #20]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d104      	bne.n	8006ef2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8006eec:	23f7      	movs	r3, #247	; 0xf7
 8006eee:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006ef0:	e062      	b.n	8006fb8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8006ef2:	2002      	movs	r0, #2
 8006ef4:	f7fe fa70 	bl	80053d8 <memp_malloc>
 8006ef8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8006f00:	23ff      	movs	r3, #255	; 0xff
 8006f02:	76fb      	strb	r3, [r7, #27]
    goto done;
 8006f04:	e058      	b.n	8006fb8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	691a      	ldr	r2, [r3, #16]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	8ada      	ldrh	r2, [r3, #22]
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	7d5a      	ldrb	r2, [r3, #21]
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	7a5a      	ldrb	r2, [r3, #9]
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	7ada      	ldrb	r2, [r3, #11]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	7a9a      	ldrb	r2, [r3, #10]
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	8adb      	ldrh	r3, [r3, #22]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d021      	beq.n	8006f96 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8006f52:	4b23      	ldr	r3, [pc, #140]	; (8006fe0 <tcp_listen_with_backlog_and_err+0x148>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d105      	bne.n	8006f68 <tcp_listen_with_backlog_and_err+0xd0>
 8006f5c:	4b20      	ldr	r3, [pc, #128]	; (8006fe0 <tcp_listen_with_backlog_and_err+0x148>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	4a1f      	ldr	r2, [pc, #124]	; (8006fe0 <tcp_listen_with_backlog_and_err+0x148>)
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e013      	b.n	8006f90 <tcp_listen_with_backlog_and_err+0xf8>
 8006f68:	4b1d      	ldr	r3, [pc, #116]	; (8006fe0 <tcp_listen_with_backlog_and_err+0x148>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	617b      	str	r3, [r7, #20]
 8006f6e:	e00c      	b.n	8006f8a <tcp_listen_with_backlog_and_err+0xf2>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d104      	bne.n	8006f84 <tcp_listen_with_backlog_and_err+0xec>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	e005      	b.n	8006f90 <tcp_listen_with_backlog_and_err+0xf8>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1ef      	bne.n	8006f70 <tcp_listen_with_backlog_and_err+0xd8>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8006f96:	68f8      	ldr	r0, [r7, #12]
 8006f98:	f7ff fbc0 	bl	800671c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	4a11      	ldr	r2, [pc, #68]	; (8006fe4 <tcp_listen_with_backlog_and_err+0x14c>)
 8006fa0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8006fa2:	4b11      	ldr	r3, [pc, #68]	; (8006fe8 <tcp_listen_with_backlog_and_err+0x150>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	4a0f      	ldr	r2, [pc, #60]	; (8006fe8 <tcp_listen_with_backlog_and_err+0x150>)
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	f005 fbf6 	bl	800c7a0 <tcp_timer_needed>
  res = ERR_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7efa      	ldrb	r2, [r7, #27]
 8006fc2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8006fc4:	69fb      	ldr	r3, [r7, #28]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3720      	adds	r7, #32
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	080131fc 	.word	0x080131fc
 8006fd4:	080133f0 	.word	0x080133f0
 8006fd8:	08013240 	.word	0x08013240
 8006fdc:	08013420 	.word	0x08013420
 8006fe0:	20008790 	.word	0x20008790
 8006fe4:	08006e35 	.word	0x08006e35
 8006fe8:	20008794 	.word	0x20008794

08006fec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <tcp_update_rcv_ann_wnd+0x1c>
 8006ffa:	4b25      	ldr	r3, [pc, #148]	; (8007090 <tcp_update_rcv_ann_wnd+0xa4>)
 8006ffc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007000:	4924      	ldr	r1, [pc, #144]	; (8007094 <tcp_update_rcv_ann_wnd+0xa8>)
 8007002:	4825      	ldr	r0, [pc, #148]	; (8007098 <tcp_update_rcv_ann_wnd+0xac>)
 8007004:	f00a fc4c 	bl	80118a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007010:	4413      	add	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800701c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007020:	bf28      	it	cs
 8007022:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007026:	b292      	uxth	r2, r2
 8007028:	4413      	add	r3, r2
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	db08      	blt.n	8007044 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	e020      	b.n	8007086 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	dd03      	ble.n	800705a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007058:	e014      	b.n	8007084 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800706c:	d306      	bcc.n	800707c <tcp_update_rcv_ann_wnd+0x90>
 800706e:	4b08      	ldr	r3, [pc, #32]	; (8007090 <tcp_update_rcv_ann_wnd+0xa4>)
 8007070:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007074:	4909      	ldr	r1, [pc, #36]	; (800709c <tcp_update_rcv_ann_wnd+0xb0>)
 8007076:	4808      	ldr	r0, [pc, #32]	; (8007098 <tcp_update_rcv_ann_wnd+0xac>)
 8007078:	f00a fc12 	bl	80118a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	b29a      	uxth	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007084:	2300      	movs	r3, #0
  }
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	080131fc 	.word	0x080131fc
 8007094:	08013458 	.word	0x08013458
 8007098:	08013240 	.word	0x08013240
 800709c:	0801347c 	.word	0x0801347c

080070a0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d107      	bne.n	80070c2 <tcp_recved+0x22>
 80070b2:	4b1f      	ldr	r3, [pc, #124]	; (8007130 <tcp_recved+0x90>)
 80070b4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80070b8:	491e      	ldr	r1, [pc, #120]	; (8007134 <tcp_recved+0x94>)
 80070ba:	481f      	ldr	r0, [pc, #124]	; (8007138 <tcp_recved+0x98>)
 80070bc:	f00a fbf0 	bl	80118a0 <iprintf>
 80070c0:	e032      	b.n	8007128 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7d1b      	ldrb	r3, [r3, #20]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d106      	bne.n	80070d8 <tcp_recved+0x38>
 80070ca:	4b19      	ldr	r3, [pc, #100]	; (8007130 <tcp_recved+0x90>)
 80070cc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80070d0:	491a      	ldr	r1, [pc, #104]	; (800713c <tcp_recved+0x9c>)
 80070d2:	4819      	ldr	r0, [pc, #100]	; (8007138 <tcp_recved+0x98>)
 80070d4:	f00a fbe4 	bl	80118a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80070dc:	887b      	ldrh	r3, [r7, #2]
 80070de:	4413      	add	r3, r2
 80070e0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80070e2:	89fb      	ldrh	r3, [r7, #14]
 80070e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80070e8:	d804      	bhi.n	80070f4 <tcp_recved+0x54>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ee:	89fa      	ldrh	r2, [r7, #14]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d204      	bcs.n	80070fe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80070fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80070fc:	e002      	b.n	8007104 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	89fa      	ldrh	r2, [r7, #14]
 8007102:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff ff71 	bl	8006fec <tcp_update_rcv_ann_wnd>
 800710a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007112:	d309      	bcc.n	8007128 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	8b5b      	ldrh	r3, [r3, #26]
 8007118:	f043 0302 	orr.w	r3, r3, #2
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f004 fbc6 	bl	800b8b4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	080131fc 	.word	0x080131fc
 8007134:	08013498 	.word	0x08013498
 8007138:	08013240 	.word	0x08013240
 800713c:	080134b0 	.word	0x080134b0

08007140 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800714a:	4b1e      	ldr	r3, [pc, #120]	; (80071c4 <tcp_new_port+0x84>)
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <tcp_new_port+0x84>)
 8007154:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8007156:	4b1b      	ldr	r3, [pc, #108]	; (80071c4 <tcp_new_port+0x84>)
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800715e:	4293      	cmp	r3, r2
 8007160:	d103      	bne.n	800716a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8007162:	4b18      	ldr	r3, [pc, #96]	; (80071c4 <tcp_new_port+0x84>)
 8007164:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007168:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800716a:	2300      	movs	r3, #0
 800716c:	71fb      	strb	r3, [r7, #7]
 800716e:	e01e      	b.n	80071ae <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007170:	79fb      	ldrb	r3, [r7, #7]
 8007172:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <tcp_new_port+0x88>)
 8007174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	e011      	b.n	80071a2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	8ada      	ldrh	r2, [r3, #22]
 8007182:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <tcp_new_port+0x84>)
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d108      	bne.n	800719c <tcp_new_port+0x5c>
        n++;
 800718a:	88bb      	ldrh	r3, [r7, #4]
 800718c:	3301      	adds	r3, #1
 800718e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8007190:	88bb      	ldrh	r3, [r7, #4]
 8007192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007196:	d3d8      	bcc.n	800714a <tcp_new_port+0xa>
          return 0;
 8007198:	2300      	movs	r3, #0
 800719a:	e00d      	b.n	80071b8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1ea      	bne.n	800717e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80071a8:	79fb      	ldrb	r3, [r7, #7]
 80071aa:	3301      	adds	r3, #1
 80071ac:	71fb      	strb	r3, [r7, #7]
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d9dd      	bls.n	8007170 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80071b4:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <tcp_new_port+0x84>)
 80071b6:	881b      	ldrh	r3, [r3, #0]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	20000020 	.word	0x20000020
 80071c8:	0801557c 	.word	0x0801557c

080071cc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80071cc:	b5b0      	push	{r4, r5, r7, lr}
 80071ce:	b090      	sub	sp, #64	; 0x40
 80071d0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80071d8:	4b94      	ldr	r3, [pc, #592]	; (800742c <tcp_slowtmr+0x260>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3301      	adds	r3, #1
 80071de:	4a93      	ldr	r2, [pc, #588]	; (800742c <tcp_slowtmr+0x260>)
 80071e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80071e2:	4b93      	ldr	r3, [pc, #588]	; (8007430 <tcp_slowtmr+0x264>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	3301      	adds	r3, #1
 80071e8:	b2da      	uxtb	r2, r3
 80071ea:	4b91      	ldr	r3, [pc, #580]	; (8007430 <tcp_slowtmr+0x264>)
 80071ec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80071f2:	4b90      	ldr	r3, [pc, #576]	; (8007434 <tcp_slowtmr+0x268>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80071f8:	e29f      	b.n	800773a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	7d1b      	ldrb	r3, [r3, #20]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <tcp_slowtmr+0x44>
 8007202:	4b8d      	ldr	r3, [pc, #564]	; (8007438 <tcp_slowtmr+0x26c>)
 8007204:	f240 42be 	movw	r2, #1214	; 0x4be
 8007208:	498c      	ldr	r1, [pc, #560]	; (800743c <tcp_slowtmr+0x270>)
 800720a:	488d      	ldr	r0, [pc, #564]	; (8007440 <tcp_slowtmr+0x274>)
 800720c:	f00a fb48 	bl	80118a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007212:	7d1b      	ldrb	r3, [r3, #20]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d106      	bne.n	8007226 <tcp_slowtmr+0x5a>
 8007218:	4b87      	ldr	r3, [pc, #540]	; (8007438 <tcp_slowtmr+0x26c>)
 800721a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800721e:	4989      	ldr	r1, [pc, #548]	; (8007444 <tcp_slowtmr+0x278>)
 8007220:	4887      	ldr	r0, [pc, #540]	; (8007440 <tcp_slowtmr+0x274>)
 8007222:	f00a fb3d 	bl	80118a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	7d1b      	ldrb	r3, [r3, #20]
 800722a:	2b0a      	cmp	r3, #10
 800722c:	d106      	bne.n	800723c <tcp_slowtmr+0x70>
 800722e:	4b82      	ldr	r3, [pc, #520]	; (8007438 <tcp_slowtmr+0x26c>)
 8007230:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007234:	4984      	ldr	r1, [pc, #528]	; (8007448 <tcp_slowtmr+0x27c>)
 8007236:	4882      	ldr	r0, [pc, #520]	; (8007440 <tcp_slowtmr+0x274>)
 8007238:	f00a fb32 	bl	80118a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	7f9a      	ldrb	r2, [r3, #30]
 8007240:	4b7b      	ldr	r3, [pc, #492]	; (8007430 <tcp_slowtmr+0x264>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d105      	bne.n	8007254 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800724c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007252:	e272      	b.n	800773a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007254:	4b76      	ldr	r3, [pc, #472]	; (8007430 <tcp_slowtmr+0x264>)
 8007256:	781a      	ldrb	r2, [r3, #0]
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	7d1b      	ldrb	r3, [r3, #20]
 800726c:	2b02      	cmp	r3, #2
 800726e:	d10a      	bne.n	8007286 <tcp_slowtmr+0xba>
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007276:	2b05      	cmp	r3, #5
 8007278:	d905      	bls.n	8007286 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800727a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727e:	3301      	adds	r3, #1
 8007280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007284:	e11e      	b.n	80074c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800728c:	2b0b      	cmp	r3, #11
 800728e:	d905      	bls.n	800729c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007294:	3301      	adds	r3, #1
 8007296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800729a:	e113      	b.n	80074c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d075      	beq.n	8007392 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80072a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d006      	beq.n	80072bc <tcp_slowtmr+0xf0>
 80072ae:	4b62      	ldr	r3, [pc, #392]	; (8007438 <tcp_slowtmr+0x26c>)
 80072b0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80072b4:	4965      	ldr	r1, [pc, #404]	; (800744c <tcp_slowtmr+0x280>)
 80072b6:	4862      	ldr	r0, [pc, #392]	; (8007440 <tcp_slowtmr+0x274>)
 80072b8:	f00a faf2 	bl	80118a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d106      	bne.n	80072d2 <tcp_slowtmr+0x106>
 80072c4:	4b5c      	ldr	r3, [pc, #368]	; (8007438 <tcp_slowtmr+0x26c>)
 80072c6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80072ca:	4961      	ldr	r1, [pc, #388]	; (8007450 <tcp_slowtmr+0x284>)
 80072cc:	485c      	ldr	r0, [pc, #368]	; (8007440 <tcp_slowtmr+0x274>)
 80072ce:	f00a fae7 	bl	80118a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80072d8:	2b0b      	cmp	r3, #11
 80072da:	d905      	bls.n	80072e8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80072dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072e0:	3301      	adds	r3, #1
 80072e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80072e6:	e0ed      	b.n	80074c4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80072ee:	3b01      	subs	r3, #1
 80072f0:	4a58      	ldr	r2, [pc, #352]	; (8007454 <tcp_slowtmr+0x288>)
 80072f2:	5cd3      	ldrb	r3, [r2, r3]
 80072f4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80072fc:	7c7a      	ldrb	r2, [r7, #17]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d907      	bls.n	8007312 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007304:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007308:	3301      	adds	r3, #1
 800730a:	b2da      	uxtb	r2, r3
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007318:	7c7a      	ldrb	r2, [r7, #17]
 800731a:	429a      	cmp	r2, r3
 800731c:	f200 80d2 	bhi.w	80074c4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007320:	2301      	movs	r3, #1
 8007322:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800732a:	2b00      	cmp	r3, #0
 800732c:	d108      	bne.n	8007340 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800732e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007330:	f005 f968 	bl	800c604 <tcp_zero_window_probe>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d014      	beq.n	8007364 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800733a:	2300      	movs	r3, #0
 800733c:	623b      	str	r3, [r7, #32]
 800733e:	e011      	b.n	8007364 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007346:	4619      	mov	r1, r3
 8007348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800734a:	f004 f82d 	bl	800b3a8 <tcp_split_unsent_seg>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d107      	bne.n	8007364 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007354:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007356:	f004 faad 	bl	800b8b4 <tcp_output>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80ac 	beq.w	80074c4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	2200      	movs	r2, #0
 8007370:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800737a:	2b06      	cmp	r3, #6
 800737c:	f200 80a2 	bhi.w	80074c4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007382:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007386:	3301      	adds	r3, #1
 8007388:	b2da      	uxtb	r2, r3
 800738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007390:	e098      	b.n	80074c4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007394:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007398:	2b00      	cmp	r3, #0
 800739a:	db0f      	blt.n	80073bc <tcp_slowtmr+0x1f0>
 800739c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d008      	beq.n	80073bc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	3301      	adds	r3, #1
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	b21a      	sxth	r2, r3
 80073b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80073bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073be:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80073c8:	429a      	cmp	r2, r3
 80073ca:	db7b      	blt.n	80074c4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80073cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073ce:	f004 fd65 	bl	800be9c <tcp_rexmit_rto_prepare>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d007      	beq.n	80073e8 <tcp_slowtmr+0x21c>
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d171      	bne.n	80074c4 <tcp_slowtmr+0x2f8>
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d06d      	beq.n	80074c4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	7d1b      	ldrb	r3, [r3, #20]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d03a      	beq.n	8007466 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073f6:	2b0c      	cmp	r3, #12
 80073f8:	bf28      	it	cs
 80073fa:	230c      	movcs	r3, #12
 80073fc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007404:	10db      	asrs	r3, r3, #3
 8007406:	b21b      	sxth	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007410:	4413      	add	r3, r2
 8007412:	7efa      	ldrb	r2, [r7, #27]
 8007414:	4910      	ldr	r1, [pc, #64]	; (8007458 <tcp_slowtmr+0x28c>)
 8007416:	5c8a      	ldrb	r2, [r1, r2]
 8007418:	4093      	lsls	r3, r2
 800741a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007422:	4293      	cmp	r3, r2
 8007424:	dc1a      	bgt.n	800745c <tcp_slowtmr+0x290>
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	b21a      	sxth	r2, r3
 800742a:	e019      	b.n	8007460 <tcp_slowtmr+0x294>
 800742c:	2000878c 	.word	0x2000878c
 8007430:	200087a2 	.word	0x200087a2
 8007434:	20008798 	.word	0x20008798
 8007438:	080131fc 	.word	0x080131fc
 800743c:	08013540 	.word	0x08013540
 8007440:	08013240 	.word	0x08013240
 8007444:	0801356c 	.word	0x0801356c
 8007448:	08013598 	.word	0x08013598
 800744c:	080135c8 	.word	0x080135c8
 8007450:	080135fc 	.word	0x080135fc
 8007454:	08015574 	.word	0x08015574
 8007458:	08015564 	.word	0x08015564
 800745c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	2200      	movs	r2, #0
 800746a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007474:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007478:	4293      	cmp	r3, r2
 800747a:	bf28      	it	cs
 800747c:	4613      	movcs	r3, r2
 800747e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007480:	8a7b      	ldrh	r3, [r7, #18]
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	b29a      	uxth	r2, r3
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	b29b      	uxth	r3, r3
 800749a:	429a      	cmp	r2, r3
 800749c:	d206      	bcs.n	80074ac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80074b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b8:	2200      	movs	r2, #0
 80074ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80074be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074c0:	f004 fd5c 	bl	800bf7c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	7d1b      	ldrb	r3, [r3, #20]
 80074c8:	2b06      	cmp	r3, #6
 80074ca:	d111      	bne.n	80074f0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80074cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ce:	8b5b      	ldrh	r3, [r3, #26]
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80074d8:	4b9d      	ldr	r3, [pc, #628]	; (8007750 <tcp_slowtmr+0x584>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b28      	cmp	r3, #40	; 0x28
 80074e4:	d904      	bls.n	80074f0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80074e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074ea:	3301      	adds	r3, #1
 80074ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80074f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f2:	7a5b      	ldrb	r3, [r3, #9]
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d04c      	beq.n	8007596 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80074fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074fe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007500:	2b04      	cmp	r3, #4
 8007502:	d003      	beq.n	800750c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007508:	2b07      	cmp	r3, #7
 800750a:	d144      	bne.n	8007596 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800750c:	4b90      	ldr	r3, [pc, #576]	; (8007750 <tcp_slowtmr+0x584>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800751c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007520:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007524:	498b      	ldr	r1, [pc, #556]	; (8007754 <tcp_slowtmr+0x588>)
 8007526:	fba1 1303 	umull	r1, r3, r1, r3
 800752a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800752c:	429a      	cmp	r2, r3
 800752e:	d90a      	bls.n	8007546 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007534:	3301      	adds	r3, #1
 8007536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800753a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800753e:	3301      	adds	r3, #1
 8007540:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007544:	e027      	b.n	8007596 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007546:	4b82      	ldr	r3, [pc, #520]	; (8007750 <tcp_slowtmr+0x584>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800755c:	4618      	mov	r0, r3
 800755e:	4b7e      	ldr	r3, [pc, #504]	; (8007758 <tcp_slowtmr+0x58c>)
 8007560:	fb00 f303 	mul.w	r3, r0, r3
 8007564:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007566:	497b      	ldr	r1, [pc, #492]	; (8007754 <tcp_slowtmr+0x588>)
 8007568:	fba1 1303 	umull	r1, r3, r1, r3
 800756c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800756e:	429a      	cmp	r2, r3
 8007570:	d911      	bls.n	8007596 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007574:	f005 f806 	bl	800c584 <tcp_keepalive>
 8007578:	4603      	mov	r3, r0
 800757a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800757e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007582:	2b00      	cmp	r3, #0
 8007584:	d107      	bne.n	8007596 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007588:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800758c:	3301      	adds	r3, #1
 800758e:	b2da      	uxtb	r2, r3
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800759a:	2b00      	cmp	r3, #0
 800759c:	d011      	beq.n	80075c2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800759e:	4b6c      	ldr	r3, [pc, #432]	; (8007750 <tcp_slowtmr+0x584>)
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	1ad2      	subs	r2, r2, r3
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80075ae:	4619      	mov	r1, r3
 80075b0:	460b      	mov	r3, r1
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	440b      	add	r3, r1
 80075b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d302      	bcc.n	80075c2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80075bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80075be:	f000 fec1 	bl	8008344 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	7d1b      	ldrb	r3, [r3, #20]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d10b      	bne.n	80075e2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80075ca:	4b61      	ldr	r3, [pc, #388]	; (8007750 <tcp_slowtmr+0x584>)
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	2b28      	cmp	r3, #40	; 0x28
 80075d6:	d904      	bls.n	80075e2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80075d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075dc:	3301      	adds	r3, #1
 80075de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	7d1b      	ldrb	r3, [r3, #20]
 80075e6:	2b09      	cmp	r3, #9
 80075e8:	d10b      	bne.n	8007602 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80075ea:	4b59      	ldr	r3, [pc, #356]	; (8007750 <tcp_slowtmr+0x584>)
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	2bf0      	cmp	r3, #240	; 0xf0
 80075f6:	d904      	bls.n	8007602 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80075f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075fc:	3301      	adds	r3, #1
 80075fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007606:	2b00      	cmp	r3, #0
 8007608:	d060      	beq.n	80076cc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007610:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007614:	f000 fce2 	bl	8007fdc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800761e:	4b4f      	ldr	r3, [pc, #316]	; (800775c <tcp_slowtmr+0x590>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007624:	429a      	cmp	r2, r3
 8007626:	d106      	bne.n	8007636 <tcp_slowtmr+0x46a>
 8007628:	4b4d      	ldr	r3, [pc, #308]	; (8007760 <tcp_slowtmr+0x594>)
 800762a:	f240 526d 	movw	r2, #1389	; 0x56d
 800762e:	494d      	ldr	r1, [pc, #308]	; (8007764 <tcp_slowtmr+0x598>)
 8007630:	484d      	ldr	r0, [pc, #308]	; (8007768 <tcp_slowtmr+0x59c>)
 8007632:	f00a f935 	bl	80118a0 <iprintf>
        prev->next = pcb->next;
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	68da      	ldr	r2, [r3, #12]
 800763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e00f      	b.n	8007660 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007640:	4b46      	ldr	r3, [pc, #280]	; (800775c <tcp_slowtmr+0x590>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007646:	429a      	cmp	r2, r3
 8007648:	d006      	beq.n	8007658 <tcp_slowtmr+0x48c>
 800764a:	4b45      	ldr	r3, [pc, #276]	; (8007760 <tcp_slowtmr+0x594>)
 800764c:	f240 5271 	movw	r2, #1393	; 0x571
 8007650:	4946      	ldr	r1, [pc, #280]	; (800776c <tcp_slowtmr+0x5a0>)
 8007652:	4845      	ldr	r0, [pc, #276]	; (8007768 <tcp_slowtmr+0x59c>)
 8007654:	f00a f924 	bl	80118a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	4a3f      	ldr	r2, [pc, #252]	; (800775c <tcp_slowtmr+0x590>)
 800765e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007660:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007664:	2b00      	cmp	r3, #0
 8007666:	d013      	beq.n	8007690 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007670:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007674:	3304      	adds	r3, #4
 8007676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007678:	8ad2      	ldrh	r2, [r2, #22]
 800767a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800767c:	8b09      	ldrh	r1, [r1, #24]
 800767e:	9102      	str	r1, [sp, #8]
 8007680:	9201      	str	r2, [sp, #4]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	462b      	mov	r3, r5
 8007686:	4622      	mov	r2, r4
 8007688:	4601      	mov	r1, r0
 800768a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800768c:	f004 fec6 	bl	800c41c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	7d1b      	ldrb	r3, [r3, #20]
 800769a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800769c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800769e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80076a6:	6838      	ldr	r0, [r7, #0]
 80076a8:	f7ff f838 	bl	800671c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80076ac:	4b30      	ldr	r3, [pc, #192]	; (8007770 <tcp_slowtmr+0x5a4>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d004      	beq.n	80076c2 <tcp_slowtmr+0x4f6>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f06f 010c 	mvn.w	r1, #12
 80076be:	68b8      	ldr	r0, [r7, #8]
 80076c0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80076c2:	4b2b      	ldr	r3, [pc, #172]	; (8007770 <tcp_slowtmr+0x5a4>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d037      	beq.n	800773a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80076ca:	e590      	b.n	80071ee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80076d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d8:	7f1b      	ldrb	r3, [r3, #28]
 80076da:	3301      	adds	r3, #1
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	7f1a      	ldrb	r2, [r3, #28]
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	7f5b      	ldrb	r3, [r3, #29]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d325      	bcc.n	800773a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80076ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f0:	2200      	movs	r2, #0
 80076f2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80076f4:	4b1e      	ldr	r3, [pc, #120]	; (8007770 <tcp_slowtmr+0x5a4>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80076fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <tcp_slowtmr+0x550>
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800770a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800770c:	6912      	ldr	r2, [r2, #16]
 800770e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007710:	4610      	mov	r0, r2
 8007712:	4798      	blx	r3
 8007714:	4603      	mov	r3, r0
 8007716:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800771a:	e002      	b.n	8007722 <tcp_slowtmr+0x556>
 800771c:	2300      	movs	r3, #0
 800771e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <tcp_slowtmr+0x5a4>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d000      	beq.n	800772c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800772a:	e560      	b.n	80071ee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800772c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007730:	2b00      	cmp	r3, #0
 8007732:	d102      	bne.n	800773a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007736:	f004 f8bd 	bl	800b8b4 <tcp_output>
  while (pcb != NULL) {
 800773a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773c:	2b00      	cmp	r3, #0
 800773e:	f47f ad5c 	bne.w	80071fa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007746:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <tcp_slowtmr+0x5a8>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800774c:	e067      	b.n	800781e <tcp_slowtmr+0x652>
 800774e:	bf00      	nop
 8007750:	2000878c 	.word	0x2000878c
 8007754:	10624dd3 	.word	0x10624dd3
 8007758:	000124f8 	.word	0x000124f8
 800775c:	20008798 	.word	0x20008798
 8007760:	080131fc 	.word	0x080131fc
 8007764:	08013634 	.word	0x08013634
 8007768:	08013240 	.word	0x08013240
 800776c:	08013660 	.word	0x08013660
 8007770:	200087a0 	.word	0x200087a0
 8007774:	2000879c 	.word	0x2000879c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777a:	7d1b      	ldrb	r3, [r3, #20]
 800777c:	2b0a      	cmp	r3, #10
 800777e:	d006      	beq.n	800778e <tcp_slowtmr+0x5c2>
 8007780:	4b2b      	ldr	r3, [pc, #172]	; (8007830 <tcp_slowtmr+0x664>)
 8007782:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007786:	492b      	ldr	r1, [pc, #172]	; (8007834 <tcp_slowtmr+0x668>)
 8007788:	482b      	ldr	r0, [pc, #172]	; (8007838 <tcp_slowtmr+0x66c>)
 800778a:	f00a f889 	bl	80118a0 <iprintf>
    pcb_remove = 0;
 800778e:	2300      	movs	r3, #0
 8007790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007794:	4b29      	ldr	r3, [pc, #164]	; (800783c <tcp_slowtmr+0x670>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	6a1b      	ldr	r3, [r3, #32]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	2bf0      	cmp	r3, #240	; 0xf0
 80077a0:	d904      	bls.n	80077ac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80077a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077a6:	3301      	adds	r3, #1
 80077a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80077ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d02f      	beq.n	8007814 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80077b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077b6:	f000 fc11 	bl	8007fdc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80077ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d010      	beq.n	80077e2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80077c0:	4b1f      	ldr	r3, [pc, #124]	; (8007840 <tcp_slowtmr+0x674>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d106      	bne.n	80077d8 <tcp_slowtmr+0x60c>
 80077ca:	4b19      	ldr	r3, [pc, #100]	; (8007830 <tcp_slowtmr+0x664>)
 80077cc:	f240 52af 	movw	r2, #1455	; 0x5af
 80077d0:	491c      	ldr	r1, [pc, #112]	; (8007844 <tcp_slowtmr+0x678>)
 80077d2:	4819      	ldr	r0, [pc, #100]	; (8007838 <tcp_slowtmr+0x66c>)
 80077d4:	f00a f864 	bl	80118a0 <iprintf>
        prev->next = pcb->next;
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	60da      	str	r2, [r3, #12]
 80077e0:	e00f      	b.n	8007802 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80077e2:	4b17      	ldr	r3, [pc, #92]	; (8007840 <tcp_slowtmr+0x674>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d006      	beq.n	80077fa <tcp_slowtmr+0x62e>
 80077ec:	4b10      	ldr	r3, [pc, #64]	; (8007830 <tcp_slowtmr+0x664>)
 80077ee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80077f2:	4915      	ldr	r1, [pc, #84]	; (8007848 <tcp_slowtmr+0x67c>)
 80077f4:	4810      	ldr	r0, [pc, #64]	; (8007838 <tcp_slowtmr+0x66c>)
 80077f6:	f00a f853 	bl	80118a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	4a10      	ldr	r2, [pc, #64]	; (8007840 <tcp_slowtmr+0x674>)
 8007800:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007804:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800780c:	69f8      	ldr	r0, [r7, #28]
 800780e:	f7fe ff85 	bl	800671c <tcp_free>
 8007812:	e004      	b.n	800781e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1a9      	bne.n	8007778 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	3730      	adds	r7, #48	; 0x30
 800782a:	46bd      	mov	sp, r7
 800782c:	bdb0      	pop	{r4, r5, r7, pc}
 800782e:	bf00      	nop
 8007830:	080131fc 	.word	0x080131fc
 8007834:	0801368c 	.word	0x0801368c
 8007838:	08013240 	.word	0x08013240
 800783c:	2000878c 	.word	0x2000878c
 8007840:	2000879c 	.word	0x2000879c
 8007844:	080136bc 	.word	0x080136bc
 8007848:	080136e4 	.word	0x080136e4

0800784c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007852:	4b2d      	ldr	r3, [pc, #180]	; (8007908 <tcp_fasttmr+0xbc>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	3301      	adds	r3, #1
 8007858:	b2da      	uxtb	r2, r3
 800785a:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <tcp_fasttmr+0xbc>)
 800785c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800785e:	4b2b      	ldr	r3, [pc, #172]	; (800790c <tcp_fasttmr+0xc0>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007864:	e048      	b.n	80078f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7f9a      	ldrb	r2, [r3, #30]
 800786a:	4b27      	ldr	r3, [pc, #156]	; (8007908 <tcp_fasttmr+0xbc>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d03f      	beq.n	80078f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007872:	4b25      	ldr	r3, [pc, #148]	; (8007908 <tcp_fasttmr+0xbc>)
 8007874:	781a      	ldrb	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	8b5b      	ldrh	r3, [r3, #26]
 800787e:	f003 0301 	and.w	r3, r3, #1
 8007882:	2b00      	cmp	r3, #0
 8007884:	d010      	beq.n	80078a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8b5b      	ldrh	r3, [r3, #26]
 800788a:	f043 0302 	orr.w	r3, r3, #2
 800788e:	b29a      	uxth	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f004 f80d 	bl	800b8b4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	8b5b      	ldrh	r3, [r3, #26]
 800789e:	f023 0303 	bic.w	r3, r3, #3
 80078a2:	b29a      	uxth	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	8b5b      	ldrh	r3, [r3, #26]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d009      	beq.n	80078c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	8b5b      	ldrh	r3, [r3, #26]
 80078b8:	f023 0308 	bic.w	r3, r3, #8
 80078bc:	b29a      	uxth	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff f8be 	bl	8006a44 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d00a      	beq.n	80078ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80078d6:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <tcp_fasttmr+0xc4>)
 80078d8:	2200      	movs	r2, #0
 80078da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f819 	bl	8007914 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80078e2:	4b0b      	ldr	r3, [pc, #44]	; (8007910 <tcp_fasttmr+0xc4>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d000      	beq.n	80078ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80078ea:	e7b8      	b.n	800785e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	607b      	str	r3, [r7, #4]
 80078f0:	e002      	b.n	80078f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1b3      	bne.n	8007866 <tcp_fasttmr+0x1a>
    }
  }
}
 80078fe:	bf00      	nop
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	200087a2 	.word	0x200087a2
 800790c:	20008798 	.word	0x20008798
 8007910:	200087a0 	.word	0x200087a0

08007914 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007914:	b590      	push	{r4, r7, lr}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <tcp_process_refused_data+0x22>
 8007922:	4b37      	ldr	r3, [pc, #220]	; (8007a00 <tcp_process_refused_data+0xec>)
 8007924:	f240 6209 	movw	r2, #1545	; 0x609
 8007928:	4936      	ldr	r1, [pc, #216]	; (8007a04 <tcp_process_refused_data+0xf0>)
 800792a:	4837      	ldr	r0, [pc, #220]	; (8007a08 <tcp_process_refused_data+0xf4>)
 800792c:	f009 ffb8 	bl	80118a0 <iprintf>
 8007930:	f06f 030f 	mvn.w	r3, #15
 8007934:	e060      	b.n	80079f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800793a:	7b5b      	ldrb	r3, [r3, #13]
 800793c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007942:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00b      	beq.n	800796c <tcp_process_refused_data+0x58>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6918      	ldr	r0, [r3, #16]
 800795e:	2300      	movs	r3, #0
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	6879      	ldr	r1, [r7, #4]
 8007964:	47a0      	blx	r4
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]
 800796a:	e007      	b.n	800797c <tcp_process_refused_data+0x68>
 800796c:	2300      	movs	r3, #0
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	6879      	ldr	r1, [r7, #4]
 8007972:	2000      	movs	r0, #0
 8007974:	f000 f8c2 	bl	8007afc <tcp_recv_null>
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800797c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d12a      	bne.n	80079da <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b00      	cmp	r3, #0
 800798c:	d033      	beq.n	80079f6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007992:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007996:	d005      	beq.n	80079a4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800799c:	3301      	adds	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <tcp_process_refused_data+0xb2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6918      	ldr	r0, [r3, #16]
 80079b8:	2300      	movs	r3, #0
 80079ba:	2200      	movs	r2, #0
 80079bc:	6879      	ldr	r1, [r7, #4]
 80079be:	47a0      	blx	r4
 80079c0:	4603      	mov	r3, r0
 80079c2:	73fb      	strb	r3, [r7, #15]
 80079c4:	e001      	b.n	80079ca <tcp_process_refused_data+0xb6>
 80079c6:	2300      	movs	r3, #0
 80079c8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80079ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ce:	f113 0f0d 	cmn.w	r3, #13
 80079d2:	d110      	bne.n	80079f6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80079d4:	f06f 030c 	mvn.w	r3, #12
 80079d8:	e00e      	b.n	80079f8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80079da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079de:	f113 0f0d 	cmn.w	r3, #13
 80079e2:	d102      	bne.n	80079ea <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80079e4:	f06f 030c 	mvn.w	r3, #12
 80079e8:	e006      	b.n	80079f8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80079f0:	f06f 0304 	mvn.w	r3, #4
 80079f4:	e000      	b.n	80079f8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd90      	pop	{r4, r7, pc}
 8007a00:	080131fc 	.word	0x080131fc
 8007a04:	0801370c 	.word	0x0801370c
 8007a08:	08013240 	.word	0x08013240

08007a0c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007a14:	e007      	b.n	8007a26 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f80a 	bl	8007a36 <tcp_seg_free>
    seg = next;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1f4      	bne.n	8007a16 <tcp_segs_free+0xa>
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fe fbb3 	bl	80061bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007a56:	6879      	ldr	r1, [r7, #4]
 8007a58:	2003      	movs	r0, #3
 8007a5a:	f7fd fd2d 	bl	80054b8 <memp_free>
  }
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d107      	bne.n	8007a8a <tcp_setprio+0x22>
 8007a7a:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <tcp_setprio+0x30>)
 8007a7c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8007a80:	4906      	ldr	r1, [pc, #24]	; (8007a9c <tcp_setprio+0x34>)
 8007a82:	4807      	ldr	r0, [pc, #28]	; (8007aa0 <tcp_setprio+0x38>)
 8007a84:	f009 ff0c 	bl	80118a0 <iprintf>
 8007a88:	e002      	b.n	8007a90 <tcp_setprio+0x28>

  pcb->prio = prio;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	78fa      	ldrb	r2, [r7, #3]
 8007a8e:	755a      	strb	r2, [r3, #21]
}
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	080131fc 	.word	0x080131fc
 8007a9c:	08013734 	.word	0x08013734
 8007aa0:	08013240 	.word	0x08013240

08007aa4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d106      	bne.n	8007ac0 <tcp_seg_copy+0x1c>
 8007ab2:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <tcp_seg_copy+0x4c>)
 8007ab4:	f240 6282 	movw	r2, #1666	; 0x682
 8007ab8:	490e      	ldr	r1, [pc, #56]	; (8007af4 <tcp_seg_copy+0x50>)
 8007aba:	480f      	ldr	r0, [pc, #60]	; (8007af8 <tcp_seg_copy+0x54>)
 8007abc:	f009 fef0 	bl	80118a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007ac0:	2003      	movs	r0, #3
 8007ac2:	f7fd fc89 	bl	80053d8 <memp_malloc>
 8007ac6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <tcp_seg_copy+0x2e>
    return NULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e00a      	b.n	8007ae8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8007ad2:	2210      	movs	r2, #16
 8007ad4:	6879      	ldr	r1, [r7, #4]
 8007ad6:	68f8      	ldr	r0, [r7, #12]
 8007ad8:	f009 ffbd 	bl	8011a56 <memcpy>
  pbuf_ref(cseg->p);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fe fc0b 	bl	80062fc <pbuf_ref>
  return cseg;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	080131fc 	.word	0x080131fc
 8007af4:	08013750 	.word	0x08013750
 8007af8:	08013240 	.word	0x08013240

08007afc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d109      	bne.n	8007b24 <tcp_recv_null+0x28>
 8007b10:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <tcp_recv_null+0x60>)
 8007b12:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007b16:	4912      	ldr	r1, [pc, #72]	; (8007b60 <tcp_recv_null+0x64>)
 8007b18:	4812      	ldr	r0, [pc, #72]	; (8007b64 <tcp_recv_null+0x68>)
 8007b1a:	f009 fec1 	bl	80118a0 <iprintf>
 8007b1e:	f06f 030f 	mvn.w	r3, #15
 8007b22:	e016      	b.n	8007b52 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d009      	beq.n	8007b3e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	891b      	ldrh	r3, [r3, #8]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	68b8      	ldr	r0, [r7, #8]
 8007b32:	f7ff fab5 	bl	80070a0 <tcp_recved>
    pbuf_free(p);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7fe fb40 	bl	80061bc <pbuf_free>
 8007b3c:	e008      	b.n	8007b50 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d104      	bne.n	8007b50 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007b46:	68b8      	ldr	r0, [r7, #8]
 8007b48:	f7fe ffe6 	bl	8006b18 <tcp_close>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	e000      	b.n	8007b52 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	080131fc 	.word	0x080131fc
 8007b60:	0801376c 	.word	0x0801376c
 8007b64:	08013240 	.word	0x08013240

08007b68 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	db01      	blt.n	8007b7e <tcp_kill_prio+0x16>
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	e000      	b.n	8007b80 <tcp_kill_prio+0x18>
 8007b7e:	237f      	movs	r3, #127	; 0x7f
 8007b80:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007b82:	7afb      	ldrb	r3, [r7, #11]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d034      	beq.n	8007bf2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b96:	4b19      	ldr	r3, [pc, #100]	; (8007bfc <tcp_kill_prio+0x94>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	e01f      	b.n	8007bde <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	7d5b      	ldrb	r3, [r3, #21]
 8007ba2:	7afa      	ldrb	r2, [r7, #11]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d80c      	bhi.n	8007bc2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8007bac:	7afa      	ldrb	r2, [r7, #11]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d112      	bne.n	8007bd8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8007bb2:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <tcp_kill_prio+0x98>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d80a      	bhi.n	8007bd8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8007bc2:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <tcp_kill_prio+0x98>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	7d5b      	ldrb	r3, [r3, #21]
 8007bd6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1dc      	bne.n	8007b9e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d004      	beq.n	8007bf4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007bea:	6938      	ldr	r0, [r7, #16]
 8007bec:	f7ff f87e 	bl	8006cec <tcp_abort>
 8007bf0:	e000      	b.n	8007bf4 <tcp_kill_prio+0x8c>
    return;
 8007bf2:	bf00      	nop
  }
}
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20008798 	.word	0x20008798
 8007c00:	2000878c 	.word	0x2000878c

08007c04 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007c0e:	79fb      	ldrb	r3, [r7, #7]
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	d009      	beq.n	8007c28 <tcp_kill_state+0x24>
 8007c14:	79fb      	ldrb	r3, [r7, #7]
 8007c16:	2b09      	cmp	r3, #9
 8007c18:	d006      	beq.n	8007c28 <tcp_kill_state+0x24>
 8007c1a:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <tcp_kill_state+0x80>)
 8007c1c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007c20:	4919      	ldr	r1, [pc, #100]	; (8007c88 <tcp_kill_state+0x84>)
 8007c22:	481a      	ldr	r0, [pc, #104]	; (8007c8c <tcp_kill_state+0x88>)
 8007c24:	f009 fe3c 	bl	80118a0 <iprintf>

  inactivity = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c30:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <tcp_kill_state+0x8c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e017      	b.n	8007c68 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	7d1b      	ldrb	r3, [r3, #20]
 8007c3c:	79fa      	ldrb	r2, [r7, #7]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d10f      	bne.n	8007c62 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007c42:	4b14      	ldr	r3, [pc, #80]	; (8007c94 <tcp_kill_state+0x90>)
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	1ad3      	subs	r3, r2, r3
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d807      	bhi.n	8007c62 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007c52:	4b10      	ldr	r3, [pc, #64]	; (8007c94 <tcp_kill_state+0x90>)
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e4      	bne.n	8007c38 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007c74:	2100      	movs	r1, #0
 8007c76:	6938      	ldr	r0, [r7, #16]
 8007c78:	f7fe ff7a 	bl	8006b70 <tcp_abandon>
  }
}
 8007c7c:	bf00      	nop
 8007c7e:	3718      	adds	r7, #24
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	080131fc 	.word	0x080131fc
 8007c88:	08013788 	.word	0x08013788
 8007c8c:	08013240 	.word	0x08013240
 8007c90:	20008798 	.word	0x20008798
 8007c94:	2000878c 	.word	0x2000878c

08007c98 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ca6:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <tcp_kill_timewait+0x58>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	e012      	b.n	8007cd4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007cae:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <tcp_kill_timewait+0x5c>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d807      	bhi.n	8007cce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <tcp_kill_timewait+0x5c>)
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	1ad3      	subs	r3, r2, r3
 8007cc8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e9      	bne.n	8007cae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8007ce0:	68b8      	ldr	r0, [r7, #8]
 8007ce2:	f7ff f803 	bl	8006cec <tcp_abort>
  }
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	2000879c 	.word	0x2000879c
 8007cf4:	2000878c 	.word	0x2000878c

08007cf8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007cfe:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <tcp_handle_closepend+0x48>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007d04:	e014      	b.n	8007d30 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	8b5b      	ldrh	r3, [r3, #26]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8b5b      	ldrh	r3, [r3, #26]
 8007d1c:	f023 0308 	bic.w	r3, r3, #8
 8007d20:	b29a      	uxth	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7fe fe8c 	bl	8006a44 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e7      	bne.n	8007d06 <tcp_handle_closepend+0xe>
  }
}
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20008798 	.word	0x20008798

08007d44 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d4e:	2001      	movs	r0, #1
 8007d50:	f7fd fb42 	bl	80053d8 <memp_malloc>
 8007d54:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d126      	bne.n	8007daa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007d5c:	f7ff ffcc 	bl	8007cf8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007d60:	f7ff ff9a 	bl	8007c98 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d64:	2001      	movs	r0, #1
 8007d66:	f7fd fb37 	bl	80053d8 <memp_malloc>
 8007d6a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d11b      	bne.n	8007daa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007d72:	2009      	movs	r0, #9
 8007d74:	f7ff ff46 	bl	8007c04 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d78:	2001      	movs	r0, #1
 8007d7a:	f7fd fb2d 	bl	80053d8 <memp_malloc>
 8007d7e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d111      	bne.n	8007daa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007d86:	2008      	movs	r0, #8
 8007d88:	f7ff ff3c 	bl	8007c04 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	f7fd fb23 	bl	80053d8 <memp_malloc>
 8007d92:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d107      	bne.n	8007daa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007d9a:	79fb      	ldrb	r3, [r7, #7]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fee3 	bl	8007b68 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007da2:	2001      	movs	r0, #1
 8007da4:	f7fd fb18 	bl	80053d8 <memp_malloc>
 8007da8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d03f      	beq.n	8007e30 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007db0:	229c      	movs	r2, #156	; 0x9c
 8007db2:	2100      	movs	r1, #0
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f009 fdd8 	bl	801196a <memset>
    pcb->prio = prio;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	79fa      	ldrb	r2, [r7, #7]
 8007dbe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007dc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	22ff      	movs	r2, #255	; 0xff
 8007dde:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8007de6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2206      	movs	r2, #6
 8007dec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2206      	movs	r2, #6
 8007df4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dfc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <tcp_alloc+0xf8>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007e0e:	4b0c      	ldr	r3, [pc, #48]	; (8007e40 <tcp_alloc+0xfc>)
 8007e10:	781a      	ldrb	r2, [r3, #0]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007e1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	4a08      	ldr	r2, [pc, #32]	; (8007e44 <tcp_alloc+0x100>)
 8007e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4a07      	ldr	r2, [pc, #28]	; (8007e48 <tcp_alloc+0x104>)
 8007e2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007e30:	68fb      	ldr	r3, [r7, #12]
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	2000878c 	.word	0x2000878c
 8007e40:	200087a2 	.word	0x200087a2
 8007e44:	08007afd 	.word	0x08007afd
 8007e48:	006ddd00 	.word	0x006ddd00

08007e4c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007e50:	2040      	movs	r0, #64	; 0x40
 8007e52:	f7ff ff77 	bl	8007d44 <tcp_alloc>
 8007e56:	4603      	mov	r3, r0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	611a      	str	r2, [r3, #16]
  }
}
 8007e72:	bf00      	nop
 8007e74:	370c      	adds	r7, #12
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
	...

08007e80 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00e      	beq.n	8007eae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	7d1b      	ldrb	r3, [r3, #20]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d106      	bne.n	8007ea6 <tcp_recv+0x26>
 8007e98:	4b07      	ldr	r3, [pc, #28]	; (8007eb8 <tcp_recv+0x38>)
 8007e9a:	f240 72df 	movw	r2, #2015	; 0x7df
 8007e9e:	4907      	ldr	r1, [pc, #28]	; (8007ebc <tcp_recv+0x3c>)
 8007ea0:	4807      	ldr	r0, [pc, #28]	; (8007ec0 <tcp_recv+0x40>)
 8007ea2:	f009 fcfd 	bl	80118a0 <iprintf>
    pcb->recv = recv;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	080131fc 	.word	0x080131fc
 8007ebc:	08013798 	.word	0x08013798
 8007ec0:	08013240 	.word	0x08013240

08007ec4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00e      	beq.n	8007ef2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	7d1b      	ldrb	r3, [r3, #20]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d106      	bne.n	8007eea <tcp_sent+0x26>
 8007edc:	4b07      	ldr	r3, [pc, #28]	; (8007efc <tcp_sent+0x38>)
 8007ede:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8007ee2:	4907      	ldr	r1, [pc, #28]	; (8007f00 <tcp_sent+0x3c>)
 8007ee4:	4807      	ldr	r0, [pc, #28]	; (8007f04 <tcp_sent+0x40>)
 8007ee6:	f009 fcdb 	bl	80118a0 <iprintf>
    pcb->sent = sent;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	080131fc 	.word	0x080131fc
 8007f00:	080137c0 	.word	0x080137c0
 8007f04:	08013240 	.word	0x08013240

08007f08 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00e      	beq.n	8007f36 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	7d1b      	ldrb	r3, [r3, #20]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d106      	bne.n	8007f2e <tcp_err+0x26>
 8007f20:	4b07      	ldr	r3, [pc, #28]	; (8007f40 <tcp_err+0x38>)
 8007f22:	f640 020d 	movw	r2, #2061	; 0x80d
 8007f26:	4907      	ldr	r1, [pc, #28]	; (8007f44 <tcp_err+0x3c>)
 8007f28:	4807      	ldr	r0, [pc, #28]	; (8007f48 <tcp_err+0x40>)
 8007f2a:	f009 fcb9 	bl	80118a0 <iprintf>
    pcb->errf = err;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	080131fc 	.word	0x080131fc
 8007f44:	080137e8 	.word	0x080137e8
 8007f48:	08013240 	.word	0x08013240

08007f4c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d008      	beq.n	8007f6e <tcp_accept+0x22>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	7d1b      	ldrb	r3, [r3, #20]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d104      	bne.n	8007f6e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	619a      	str	r2, [r3, #24]
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d107      	bne.n	8007fa0 <tcp_poll+0x24>
 8007f90:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <tcp_poll+0x50>)
 8007f92:	f640 023d 	movw	r2, #2109	; 0x83d
 8007f96:	490e      	ldr	r1, [pc, #56]	; (8007fd0 <tcp_poll+0x54>)
 8007f98:	480e      	ldr	r0, [pc, #56]	; (8007fd4 <tcp_poll+0x58>)
 8007f9a:	f009 fc81 	bl	80118a0 <iprintf>
 8007f9e:	e011      	b.n	8007fc4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	7d1b      	ldrb	r3, [r3, #20]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d106      	bne.n	8007fb6 <tcp_poll+0x3a>
 8007fa8:	4b08      	ldr	r3, [pc, #32]	; (8007fcc <tcp_poll+0x50>)
 8007faa:	f640 023e 	movw	r2, #2110	; 0x83e
 8007fae:	490a      	ldr	r1, [pc, #40]	; (8007fd8 <tcp_poll+0x5c>)
 8007fb0:	4808      	ldr	r0, [pc, #32]	; (8007fd4 <tcp_poll+0x58>)
 8007fb2:	f009 fc75 	bl	80118a0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	79fa      	ldrb	r2, [r7, #7]
 8007fc2:	775a      	strb	r2, [r3, #29]
}
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	080131fc 	.word	0x080131fc
 8007fd0:	08013810 	.word	0x08013810
 8007fd4:	08013240 	.word	0x08013240
 8007fd8:	08013828 	.word	0x08013828

08007fdc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d107      	bne.n	8007ffa <tcp_pcb_purge+0x1e>
 8007fea:	4b21      	ldr	r3, [pc, #132]	; (8008070 <tcp_pcb_purge+0x94>)
 8007fec:	f640 0251 	movw	r2, #2129	; 0x851
 8007ff0:	4920      	ldr	r1, [pc, #128]	; (8008074 <tcp_pcb_purge+0x98>)
 8007ff2:	4821      	ldr	r0, [pc, #132]	; (8008078 <tcp_pcb_purge+0x9c>)
 8007ff4:	f009 fc54 	bl	80118a0 <iprintf>
 8007ff8:	e037      	b.n	800806a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	7d1b      	ldrb	r3, [r3, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d033      	beq.n	800806a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008006:	2b0a      	cmp	r3, #10
 8008008:	d02f      	beq.n	800806a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800800e:	2b01      	cmp	r3, #1
 8008010:	d02b      	beq.n	800806a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe f8cc 	bl	80061bc <pbuf_free>
      pcb->refused_data = NULL;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f986 	bl	8008344 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800803e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff fce1 	bl	8007a0c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff fcdc 	bl	8007a0c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	66da      	str	r2, [r3, #108]	; 0x6c
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	080131fc 	.word	0x080131fc
 8008074:	08013848 	.word	0x08013848
 8008078:	08013240 	.word	0x08013240

0800807c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d106      	bne.n	800809a <tcp_pcb_remove+0x1e>
 800808c:	4b3e      	ldr	r3, [pc, #248]	; (8008188 <tcp_pcb_remove+0x10c>)
 800808e:	f640 0283 	movw	r2, #2179	; 0x883
 8008092:	493e      	ldr	r1, [pc, #248]	; (800818c <tcp_pcb_remove+0x110>)
 8008094:	483e      	ldr	r0, [pc, #248]	; (8008190 <tcp_pcb_remove+0x114>)
 8008096:	f009 fc03 	bl	80118a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d106      	bne.n	80080ae <tcp_pcb_remove+0x32>
 80080a0:	4b39      	ldr	r3, [pc, #228]	; (8008188 <tcp_pcb_remove+0x10c>)
 80080a2:	f640 0284 	movw	r2, #2180	; 0x884
 80080a6:	493b      	ldr	r1, [pc, #236]	; (8008194 <tcp_pcb_remove+0x118>)
 80080a8:	4839      	ldr	r0, [pc, #228]	; (8008190 <tcp_pcb_remove+0x114>)
 80080aa:	f009 fbf9 	bl	80118a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d105      	bne.n	80080c4 <tcp_pcb_remove+0x48>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	e013      	b.n	80080ec <tcp_pcb_remove+0x70>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	e00c      	b.n	80080e6 <tcp_pcb_remove+0x6a>
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	683a      	ldr	r2, [r7, #0]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d104      	bne.n	80080e0 <tcp_pcb_remove+0x64>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	60da      	str	r2, [r3, #12]
 80080de:	e005      	b.n	80080ec <tcp_pcb_remove+0x70>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1ef      	bne.n	80080cc <tcp_pcb_remove+0x50>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	2200      	movs	r2, #0
 80080f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80080f2:	6838      	ldr	r0, [r7, #0]
 80080f4:	f7ff ff72 	bl	8007fdc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	7d1b      	ldrb	r3, [r3, #20]
 80080fc:	2b0a      	cmp	r3, #10
 80080fe:	d013      	beq.n	8008128 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008104:	2b01      	cmp	r3, #1
 8008106:	d00f      	beq.n	8008128 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	8b5b      	ldrh	r3, [r3, #26]
 800810c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	8b5b      	ldrh	r3, [r3, #26]
 8008118:	f043 0302 	orr.w	r3, r3, #2
 800811c:	b29a      	uxth	r2, r3
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008122:	6838      	ldr	r0, [r7, #0]
 8008124:	f003 fbc6 	bl	800b8b4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	7d1b      	ldrb	r3, [r3, #20]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d020      	beq.n	8008172 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008134:	2b00      	cmp	r3, #0
 8008136:	d006      	beq.n	8008146 <tcp_pcb_remove+0xca>
 8008138:	4b13      	ldr	r3, [pc, #76]	; (8008188 <tcp_pcb_remove+0x10c>)
 800813a:	f640 0293 	movw	r2, #2195	; 0x893
 800813e:	4916      	ldr	r1, [pc, #88]	; (8008198 <tcp_pcb_remove+0x11c>)
 8008140:	4813      	ldr	r0, [pc, #76]	; (8008190 <tcp_pcb_remove+0x114>)
 8008142:	f009 fbad 	bl	80118a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	2b00      	cmp	r3, #0
 800814c:	d006      	beq.n	800815c <tcp_pcb_remove+0xe0>
 800814e:	4b0e      	ldr	r3, [pc, #56]	; (8008188 <tcp_pcb_remove+0x10c>)
 8008150:	f640 0294 	movw	r2, #2196	; 0x894
 8008154:	4911      	ldr	r1, [pc, #68]	; (800819c <tcp_pcb_remove+0x120>)
 8008156:	480e      	ldr	r0, [pc, #56]	; (8008190 <tcp_pcb_remove+0x114>)
 8008158:	f009 fba2 	bl	80118a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008160:	2b00      	cmp	r3, #0
 8008162:	d006      	beq.n	8008172 <tcp_pcb_remove+0xf6>
 8008164:	4b08      	ldr	r3, [pc, #32]	; (8008188 <tcp_pcb_remove+0x10c>)
 8008166:	f640 0296 	movw	r2, #2198	; 0x896
 800816a:	490d      	ldr	r1, [pc, #52]	; (80081a0 <tcp_pcb_remove+0x124>)
 800816c:	4808      	ldr	r0, [pc, #32]	; (8008190 <tcp_pcb_remove+0x114>)
 800816e:	f009 fb97 	bl	80118a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2200      	movs	r2, #0
 8008176:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2200      	movs	r2, #0
 800817c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800817e:	bf00      	nop
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	080131fc 	.word	0x080131fc
 800818c:	08013864 	.word	0x08013864
 8008190:	08013240 	.word	0x08013240
 8008194:	08013880 	.word	0x08013880
 8008198:	080138a0 	.word	0x080138a0
 800819c:	080138b8 	.word	0x080138b8
 80081a0:	080138d4 	.word	0x080138d4

080081a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d106      	bne.n	80081c0 <tcp_next_iss+0x1c>
 80081b2:	4b0a      	ldr	r3, [pc, #40]	; (80081dc <tcp_next_iss+0x38>)
 80081b4:	f640 02af 	movw	r2, #2223	; 0x8af
 80081b8:	4909      	ldr	r1, [pc, #36]	; (80081e0 <tcp_next_iss+0x3c>)
 80081ba:	480a      	ldr	r0, [pc, #40]	; (80081e4 <tcp_next_iss+0x40>)
 80081bc:	f009 fb70 	bl	80118a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80081c0:	4b09      	ldr	r3, [pc, #36]	; (80081e8 <tcp_next_iss+0x44>)
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	4b09      	ldr	r3, [pc, #36]	; (80081ec <tcp_next_iss+0x48>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4413      	add	r3, r2
 80081ca:	4a07      	ldr	r2, [pc, #28]	; (80081e8 <tcp_next_iss+0x44>)
 80081cc:	6013      	str	r3, [r2, #0]
  return iss;
 80081ce:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <tcp_next_iss+0x44>)
 80081d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	080131fc 	.word	0x080131fc
 80081e0:	080138ec 	.word	0x080138ec
 80081e4:	08013240 	.word	0x08013240
 80081e8:	20000024 	.word	0x20000024
 80081ec:	2000878c 	.word	0x2000878c

080081f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4603      	mov	r3, r0
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
 80081fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d106      	bne.n	8008212 <tcp_eff_send_mss_netif+0x22>
 8008204:	4b14      	ldr	r3, [pc, #80]	; (8008258 <tcp_eff_send_mss_netif+0x68>)
 8008206:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800820a:	4914      	ldr	r1, [pc, #80]	; (800825c <tcp_eff_send_mss_netif+0x6c>)
 800820c:	4814      	ldr	r0, [pc, #80]	; (8008260 <tcp_eff_send_mss_netif+0x70>)
 800820e:	f009 fb47 	bl	80118a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008218:	89fb      	ldrh	r3, [r7, #14]
 800821a:	e019      	b.n	8008250 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008220:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008222:	8afb      	ldrh	r3, [r7, #22]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d012      	beq.n	800824e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008228:	2328      	movs	r3, #40	; 0x28
 800822a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800822c:	8afa      	ldrh	r2, [r7, #22]
 800822e:	8abb      	ldrh	r3, [r7, #20]
 8008230:	429a      	cmp	r2, r3
 8008232:	d904      	bls.n	800823e <tcp_eff_send_mss_netif+0x4e>
 8008234:	8afa      	ldrh	r2, [r7, #22]
 8008236:	8abb      	ldrh	r3, [r7, #20]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	b29b      	uxth	r3, r3
 800823c:	e000      	b.n	8008240 <tcp_eff_send_mss_netif+0x50>
 800823e:	2300      	movs	r3, #0
 8008240:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008242:	8a7a      	ldrh	r2, [r7, #18]
 8008244:	89fb      	ldrh	r3, [r7, #14]
 8008246:	4293      	cmp	r3, r2
 8008248:	bf28      	it	cs
 800824a:	4613      	movcs	r3, r2
 800824c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800824e:	89fb      	ldrh	r3, [r7, #14]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	080131fc 	.word	0x080131fc
 800825c:	08013908 	.word	0x08013908
 8008260:	08013240 	.word	0x08013240

08008264 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d119      	bne.n	80082ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008278:	4b10      	ldr	r3, [pc, #64]	; (80082bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800827a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800827e:	4910      	ldr	r1, [pc, #64]	; (80082c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008280:	4810      	ldr	r0, [pc, #64]	; (80082c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008282:	f009 fb0d 	bl	80118a0 <iprintf>

  while (pcb != NULL) {
 8008286:	e011      	b.n	80082ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	429a      	cmp	r2, r3
 8008292:	d108      	bne.n	80082a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f7fe fd26 	bl	8006cec <tcp_abort>
      pcb = next;
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	e002      	b.n	80082ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d1ea      	bne.n	8008288 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80082b2:	bf00      	nop
 80082b4:	bf00      	nop
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	080131fc 	.word	0x080131fc
 80082c0:	08013930 	.word	0x08013930
 80082c4:	08013240 	.word	0x08013240

080082c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d02a      	beq.n	800832e <tcp_netif_ip_addr_changed+0x66>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d026      	beq.n	800832e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80082e0:	4b15      	ldr	r3, [pc, #84]	; (8008338 <tcp_netif_ip_addr_changed+0x70>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff ffbc 	bl	8008264 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80082ec:	4b13      	ldr	r3, [pc, #76]	; (800833c <tcp_netif_ip_addr_changed+0x74>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff ffb6 	bl	8008264 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d017      	beq.n	800832e <tcp_netif_ip_addr_changed+0x66>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d013      	beq.n	800832e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008306:	4b0e      	ldr	r3, [pc, #56]	; (8008340 <tcp_netif_ip_addr_changed+0x78>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	e00c      	b.n	8008328 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d103      	bne.n	8008322 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1ef      	bne.n	800830e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20008798 	.word	0x20008798
 800833c:	20008790 	.word	0x20008790
 8008340:	20008794 	.word	0x20008794

08008344 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008350:	2b00      	cmp	r3, #0
 8008352:	d007      	beq.n	8008364 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff fb57 	bl	8007a0c <tcp_segs_free>
    pcb->ooseq = NULL;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008364:	bf00      	nop
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800836c:	b590      	push	{r4, r7, lr}
 800836e:	b08d      	sub	sp, #52	; 0x34
 8008370:	af04      	add	r7, sp, #16
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d105      	bne.n	8008388 <tcp_input+0x1c>
 800837c:	4b9b      	ldr	r3, [pc, #620]	; (80085ec <tcp_input+0x280>)
 800837e:	2283      	movs	r2, #131	; 0x83
 8008380:	499b      	ldr	r1, [pc, #620]	; (80085f0 <tcp_input+0x284>)
 8008382:	489c      	ldr	r0, [pc, #624]	; (80085f4 <tcp_input+0x288>)
 8008384:	f009 fa8c 	bl	80118a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	4a9a      	ldr	r2, [pc, #616]	; (80085f8 <tcp_input+0x28c>)
 800838e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	895b      	ldrh	r3, [r3, #10]
 8008394:	2b13      	cmp	r3, #19
 8008396:	f240 83d1 	bls.w	8008b3c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800839a:	4b98      	ldr	r3, [pc, #608]	; (80085fc <tcp_input+0x290>)
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	4a97      	ldr	r2, [pc, #604]	; (80085fc <tcp_input+0x290>)
 80083a0:	6812      	ldr	r2, [r2, #0]
 80083a2:	4611      	mov	r1, r2
 80083a4:	4618      	mov	r0, r3
 80083a6:	f008 fa25 	bl	80107f4 <ip4_addr_isbroadcast_u32>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f040 83c7 	bne.w	8008b40 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80083b2:	4b92      	ldr	r3, [pc, #584]	; (80085fc <tcp_input+0x290>)
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80083ba:	2be0      	cmp	r3, #224	; 0xe0
 80083bc:	f000 83c0 	beq.w	8008b40 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80083c0:	4b8d      	ldr	r3, [pc, #564]	; (80085f8 <tcp_input+0x28c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	899b      	ldrh	r3, [r3, #12]
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fc fb8d 	bl	8004ae8 <lwip_htons>
 80083ce:	4603      	mov	r3, r0
 80083d0:	0b1b      	lsrs	r3, r3, #12
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80083da:	7cbb      	ldrb	r3, [r7, #18]
 80083dc:	2b13      	cmp	r3, #19
 80083de:	f240 83b1 	bls.w	8008b44 <tcp_input+0x7d8>
 80083e2:	7cbb      	ldrb	r3, [r7, #18]
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	891b      	ldrh	r3, [r3, #8]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	f200 83aa 	bhi.w	8008b44 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80083f0:	7cbb      	ldrb	r3, [r7, #18]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3b14      	subs	r3, #20
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	4b81      	ldr	r3, [pc, #516]	; (8008600 <tcp_input+0x294>)
 80083fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80083fc:	4b81      	ldr	r3, [pc, #516]	; (8008604 <tcp_input+0x298>)
 80083fe:	2200      	movs	r2, #0
 8008400:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	895a      	ldrh	r2, [r3, #10]
 8008406:	7cbb      	ldrb	r3, [r7, #18]
 8008408:	b29b      	uxth	r3, r3
 800840a:	429a      	cmp	r2, r3
 800840c:	d309      	bcc.n	8008422 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800840e:	4b7c      	ldr	r3, [pc, #496]	; (8008600 <tcp_input+0x294>)
 8008410:	881a      	ldrh	r2, [r3, #0]
 8008412:	4b7d      	ldr	r3, [pc, #500]	; (8008608 <tcp_input+0x29c>)
 8008414:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008416:	7cbb      	ldrb	r3, [r7, #18]
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7fd fe48 	bl	80060b0 <pbuf_remove_header>
 8008420:	e04e      	b.n	80084c0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d105      	bne.n	8008436 <tcp_input+0xca>
 800842a:	4b70      	ldr	r3, [pc, #448]	; (80085ec <tcp_input+0x280>)
 800842c:	22c2      	movs	r2, #194	; 0xc2
 800842e:	4977      	ldr	r1, [pc, #476]	; (800860c <tcp_input+0x2a0>)
 8008430:	4870      	ldr	r0, [pc, #448]	; (80085f4 <tcp_input+0x288>)
 8008432:	f009 fa35 	bl	80118a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008436:	2114      	movs	r1, #20
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7fd fe39 	bl	80060b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	895a      	ldrh	r2, [r3, #10]
 8008442:	4b71      	ldr	r3, [pc, #452]	; (8008608 <tcp_input+0x29c>)
 8008444:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008446:	4b6e      	ldr	r3, [pc, #440]	; (8008600 <tcp_input+0x294>)
 8008448:	881a      	ldrh	r2, [r3, #0]
 800844a:	4b6f      	ldr	r3, [pc, #444]	; (8008608 <tcp_input+0x29c>)
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008452:	4b6d      	ldr	r3, [pc, #436]	; (8008608 <tcp_input+0x29c>)
 8008454:	881b      	ldrh	r3, [r3, #0]
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7fd fe29 	bl	80060b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	895b      	ldrh	r3, [r3, #10]
 8008464:	8a3a      	ldrh	r2, [r7, #16]
 8008466:	429a      	cmp	r2, r3
 8008468:	f200 836e 	bhi.w	8008b48 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	4a64      	ldr	r2, [pc, #400]	; (8008604 <tcp_input+0x298>)
 8008474:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	8a3a      	ldrh	r2, [r7, #16]
 800847c:	4611      	mov	r1, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f7fd fe16 	bl	80060b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	891a      	ldrh	r2, [r3, #8]
 8008488:	8a3b      	ldrh	r3, [r7, #16]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	b29a      	uxth	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	895b      	ldrh	r3, [r3, #10]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d005      	beq.n	80084a6 <tcp_input+0x13a>
 800849a:	4b54      	ldr	r3, [pc, #336]	; (80085ec <tcp_input+0x280>)
 800849c:	22df      	movs	r2, #223	; 0xdf
 800849e:	495c      	ldr	r1, [pc, #368]	; (8008610 <tcp_input+0x2a4>)
 80084a0:	4854      	ldr	r0, [pc, #336]	; (80085f4 <tcp_input+0x288>)
 80084a2:	f009 f9fd 	bl	80118a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	891a      	ldrh	r2, [r3, #8]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	891b      	ldrh	r3, [r3, #8]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d005      	beq.n	80084c0 <tcp_input+0x154>
 80084b4:	4b4d      	ldr	r3, [pc, #308]	; (80085ec <tcp_input+0x280>)
 80084b6:	22e0      	movs	r2, #224	; 0xe0
 80084b8:	4956      	ldr	r1, [pc, #344]	; (8008614 <tcp_input+0x2a8>)
 80084ba:	484e      	ldr	r0, [pc, #312]	; (80085f4 <tcp_input+0x288>)
 80084bc:	f009 f9f0 	bl	80118a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80084c0:	4b4d      	ldr	r3, [pc, #308]	; (80085f8 <tcp_input+0x28c>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	881b      	ldrh	r3, [r3, #0]
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	4a4b      	ldr	r2, [pc, #300]	; (80085f8 <tcp_input+0x28c>)
 80084ca:	6814      	ldr	r4, [r2, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fc fb0b 	bl	8004ae8 <lwip_htons>
 80084d2:	4603      	mov	r3, r0
 80084d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80084d6:	4b48      	ldr	r3, [pc, #288]	; (80085f8 <tcp_input+0x28c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	885b      	ldrh	r3, [r3, #2]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	4a46      	ldr	r2, [pc, #280]	; (80085f8 <tcp_input+0x28c>)
 80084e0:	6814      	ldr	r4, [r2, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fc fb00 	bl	8004ae8 <lwip_htons>
 80084e8:	4603      	mov	r3, r0
 80084ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80084ec:	4b42      	ldr	r3, [pc, #264]	; (80085f8 <tcp_input+0x28c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	4a41      	ldr	r2, [pc, #260]	; (80085f8 <tcp_input+0x28c>)
 80084f4:	6814      	ldr	r4, [r2, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fc fb0b 	bl	8004b12 <lwip_htonl>
 80084fc:	4603      	mov	r3, r0
 80084fe:	6063      	str	r3, [r4, #4]
 8008500:	6863      	ldr	r3, [r4, #4]
 8008502:	4a45      	ldr	r2, [pc, #276]	; (8008618 <tcp_input+0x2ac>)
 8008504:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008506:	4b3c      	ldr	r3, [pc, #240]	; (80085f8 <tcp_input+0x28c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	4a3a      	ldr	r2, [pc, #232]	; (80085f8 <tcp_input+0x28c>)
 800850e:	6814      	ldr	r4, [r2, #0]
 8008510:	4618      	mov	r0, r3
 8008512:	f7fc fafe 	bl	8004b12 <lwip_htonl>
 8008516:	4603      	mov	r3, r0
 8008518:	60a3      	str	r3, [r4, #8]
 800851a:	68a3      	ldr	r3, [r4, #8]
 800851c:	4a3f      	ldr	r2, [pc, #252]	; (800861c <tcp_input+0x2b0>)
 800851e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008520:	4b35      	ldr	r3, [pc, #212]	; (80085f8 <tcp_input+0x28c>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	89db      	ldrh	r3, [r3, #14]
 8008526:	b29b      	uxth	r3, r3
 8008528:	4a33      	ldr	r2, [pc, #204]	; (80085f8 <tcp_input+0x28c>)
 800852a:	6814      	ldr	r4, [r2, #0]
 800852c:	4618      	mov	r0, r3
 800852e:	f7fc fadb 	bl	8004ae8 <lwip_htons>
 8008532:	4603      	mov	r3, r0
 8008534:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008536:	4b30      	ldr	r3, [pc, #192]	; (80085f8 <tcp_input+0x28c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	899b      	ldrh	r3, [r3, #12]
 800853c:	b29b      	uxth	r3, r3
 800853e:	4618      	mov	r0, r3
 8008540:	f7fc fad2 	bl	8004ae8 <lwip_htons>
 8008544:	4603      	mov	r3, r0
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800854c:	b2da      	uxtb	r2, r3
 800854e:	4b34      	ldr	r3, [pc, #208]	; (8008620 <tcp_input+0x2b4>)
 8008550:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	891a      	ldrh	r2, [r3, #8]
 8008556:	4b33      	ldr	r3, [pc, #204]	; (8008624 <tcp_input+0x2b8>)
 8008558:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800855a:	4b31      	ldr	r3, [pc, #196]	; (8008620 <tcp_input+0x2b4>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00c      	beq.n	8008580 <tcp_input+0x214>
    tcplen++;
 8008566:	4b2f      	ldr	r3, [pc, #188]	; (8008624 <tcp_input+0x2b8>)
 8008568:	881b      	ldrh	r3, [r3, #0]
 800856a:	3301      	adds	r3, #1
 800856c:	b29a      	uxth	r2, r3
 800856e:	4b2d      	ldr	r3, [pc, #180]	; (8008624 <tcp_input+0x2b8>)
 8008570:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	891a      	ldrh	r2, [r3, #8]
 8008576:	4b2b      	ldr	r3, [pc, #172]	; (8008624 <tcp_input+0x2b8>)
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	429a      	cmp	r2, r3
 800857c:	f200 82e6 	bhi.w	8008b4c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008580:	2300      	movs	r3, #0
 8008582:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008584:	4b28      	ldr	r3, [pc, #160]	; (8008628 <tcp_input+0x2bc>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	61fb      	str	r3, [r7, #28]
 800858a:	e09d      	b.n	80086c8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	7d1b      	ldrb	r3, [r3, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <tcp_input+0x234>
 8008594:	4b15      	ldr	r3, [pc, #84]	; (80085ec <tcp_input+0x280>)
 8008596:	22fb      	movs	r2, #251	; 0xfb
 8008598:	4924      	ldr	r1, [pc, #144]	; (800862c <tcp_input+0x2c0>)
 800859a:	4816      	ldr	r0, [pc, #88]	; (80085f4 <tcp_input+0x288>)
 800859c:	f009 f980 	bl	80118a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	7d1b      	ldrb	r3, [r3, #20]
 80085a4:	2b0a      	cmp	r3, #10
 80085a6:	d105      	bne.n	80085b4 <tcp_input+0x248>
 80085a8:	4b10      	ldr	r3, [pc, #64]	; (80085ec <tcp_input+0x280>)
 80085aa:	22fc      	movs	r2, #252	; 0xfc
 80085ac:	4920      	ldr	r1, [pc, #128]	; (8008630 <tcp_input+0x2c4>)
 80085ae:	4811      	ldr	r0, [pc, #68]	; (80085f4 <tcp_input+0x288>)
 80085b0:	f009 f976 	bl	80118a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	7d1b      	ldrb	r3, [r3, #20]
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d105      	bne.n	80085c8 <tcp_input+0x25c>
 80085bc:	4b0b      	ldr	r3, [pc, #44]	; (80085ec <tcp_input+0x280>)
 80085be:	22fd      	movs	r2, #253	; 0xfd
 80085c0:	491c      	ldr	r1, [pc, #112]	; (8008634 <tcp_input+0x2c8>)
 80085c2:	480c      	ldr	r0, [pc, #48]	; (80085f4 <tcp_input+0x288>)
 80085c4:	f009 f96c 	bl	80118a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	7a1b      	ldrb	r3, [r3, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d033      	beq.n	8008638 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	7a1a      	ldrb	r2, [r3, #8]
 80085d4:	4b09      	ldr	r3, [pc, #36]	; (80085fc <tcp_input+0x290>)
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085dc:	3301      	adds	r3, #1
 80085de:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d029      	beq.n	8008638 <tcp_input+0x2cc>
      prev = pcb;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	61bb      	str	r3, [r7, #24]
      continue;
 80085e8:	e06b      	b.n	80086c2 <tcp_input+0x356>
 80085ea:	bf00      	nop
 80085ec:	08013964 	.word	0x08013964
 80085f0:	08013998 	.word	0x08013998
 80085f4:	080139b0 	.word	0x080139b0
 80085f8:	200087b4 	.word	0x200087b4
 80085fc:	200051fc 	.word	0x200051fc
 8008600:	200087b8 	.word	0x200087b8
 8008604:	200087bc 	.word	0x200087bc
 8008608:	200087ba 	.word	0x200087ba
 800860c:	080139d8 	.word	0x080139d8
 8008610:	080139e8 	.word	0x080139e8
 8008614:	080139f4 	.word	0x080139f4
 8008618:	200087c4 	.word	0x200087c4
 800861c:	200087c8 	.word	0x200087c8
 8008620:	200087d0 	.word	0x200087d0
 8008624:	200087ce 	.word	0x200087ce
 8008628:	20008798 	.word	0x20008798
 800862c:	08013a14 	.word	0x08013a14
 8008630:	08013a3c 	.word	0x08013a3c
 8008634:	08013a68 	.word	0x08013a68
    }

    if (pcb->remote_port == tcphdr->src &&
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	8b1a      	ldrh	r2, [r3, #24]
 800863c:	4b72      	ldr	r3, [pc, #456]	; (8008808 <tcp_input+0x49c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	429a      	cmp	r2, r3
 8008646:	d13a      	bne.n	80086be <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	8ada      	ldrh	r2, [r3, #22]
 800864c:	4b6e      	ldr	r3, [pc, #440]	; (8008808 <tcp_input+0x49c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	885b      	ldrh	r3, [r3, #2]
 8008652:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008654:	429a      	cmp	r2, r3
 8008656:	d132      	bne.n	80086be <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	4b6b      	ldr	r3, [pc, #428]	; (800880c <tcp_input+0x4a0>)
 800865e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008660:	429a      	cmp	r2, r3
 8008662:	d12c      	bne.n	80086be <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	4b68      	ldr	r3, [pc, #416]	; (800880c <tcp_input+0x4a0>)
 800866a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800866c:	429a      	cmp	r2, r3
 800866e:	d126      	bne.n	80086be <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	69fa      	ldr	r2, [r7, #28]
 8008676:	429a      	cmp	r2, r3
 8008678:	d106      	bne.n	8008688 <tcp_input+0x31c>
 800867a:	4b65      	ldr	r3, [pc, #404]	; (8008810 <tcp_input+0x4a4>)
 800867c:	f240 120d 	movw	r2, #269	; 0x10d
 8008680:	4964      	ldr	r1, [pc, #400]	; (8008814 <tcp_input+0x4a8>)
 8008682:	4865      	ldr	r0, [pc, #404]	; (8008818 <tcp_input+0x4ac>)
 8008684:	f009 f90c 	bl	80118a0 <iprintf>
      if (prev != NULL) {
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <tcp_input+0x338>
        prev->next = pcb->next;
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008696:	4b61      	ldr	r3, [pc, #388]	; (800881c <tcp_input+0x4b0>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800869e:	4a5f      	ldr	r2, [pc, #380]	; (800881c <tcp_input+0x4b0>)
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d111      	bne.n	80086d2 <tcp_input+0x366>
 80086ae:	4b58      	ldr	r3, [pc, #352]	; (8008810 <tcp_input+0x4a4>)
 80086b0:	f240 1215 	movw	r2, #277	; 0x115
 80086b4:	495a      	ldr	r1, [pc, #360]	; (8008820 <tcp_input+0x4b4>)
 80086b6:	4858      	ldr	r0, [pc, #352]	; (8008818 <tcp_input+0x4ac>)
 80086b8:	f009 f8f2 	bl	80118a0 <iprintf>
      break;
 80086bc:	e009      	b.n	80086d2 <tcp_input+0x366>
    }
    prev = pcb;
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f47f af5e 	bne.w	800858c <tcp_input+0x220>
 80086d0:	e000      	b.n	80086d4 <tcp_input+0x368>
      break;
 80086d2:	bf00      	nop
  }

  if (pcb == NULL) {
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f040 80aa 	bne.w	8008830 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80086dc:	4b51      	ldr	r3, [pc, #324]	; (8008824 <tcp_input+0x4b8>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	61fb      	str	r3, [r7, #28]
 80086e2:	e03f      	b.n	8008764 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	7d1b      	ldrb	r3, [r3, #20]
 80086e8:	2b0a      	cmp	r3, #10
 80086ea:	d006      	beq.n	80086fa <tcp_input+0x38e>
 80086ec:	4b48      	ldr	r3, [pc, #288]	; (8008810 <tcp_input+0x4a4>)
 80086ee:	f240 121f 	movw	r2, #287	; 0x11f
 80086f2:	494d      	ldr	r1, [pc, #308]	; (8008828 <tcp_input+0x4bc>)
 80086f4:	4848      	ldr	r0, [pc, #288]	; (8008818 <tcp_input+0x4ac>)
 80086f6:	f009 f8d3 	bl	80118a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	7a1b      	ldrb	r3, [r3, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	7a1a      	ldrb	r2, [r3, #8]
 8008706:	4b41      	ldr	r3, [pc, #260]	; (800880c <tcp_input+0x4a0>)
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800870e:	3301      	adds	r3, #1
 8008710:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008712:	429a      	cmp	r2, r3
 8008714:	d122      	bne.n	800875c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	8b1a      	ldrh	r2, [r3, #24]
 800871a:	4b3b      	ldr	r3, [pc, #236]	; (8008808 <tcp_input+0x49c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	881b      	ldrh	r3, [r3, #0]
 8008720:	b29b      	uxth	r3, r3
 8008722:	429a      	cmp	r2, r3
 8008724:	d11b      	bne.n	800875e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	8ada      	ldrh	r2, [r3, #22]
 800872a:	4b37      	ldr	r3, [pc, #220]	; (8008808 <tcp_input+0x49c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	885b      	ldrh	r3, [r3, #2]
 8008730:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008732:	429a      	cmp	r2, r3
 8008734:	d113      	bne.n	800875e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	4b34      	ldr	r3, [pc, #208]	; (800880c <tcp_input+0x4a0>)
 800873c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800873e:	429a      	cmp	r2, r3
 8008740:	d10d      	bne.n	800875e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4b31      	ldr	r3, [pc, #196]	; (800880c <tcp_input+0x4a0>)
 8008748:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800874a:	429a      	cmp	r2, r3
 800874c:	d107      	bne.n	800875e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800874e:	69f8      	ldr	r0, [r7, #28]
 8008750:	f000 fb56 	bl	8008e00 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7fd fd31 	bl	80061bc <pbuf_free>
        return;
 800875a:	e1fd      	b.n	8008b58 <tcp_input+0x7ec>
        continue;
 800875c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	61fb      	str	r3, [r7, #28]
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1bc      	bne.n	80086e4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800876e:	4b2f      	ldr	r3, [pc, #188]	; (800882c <tcp_input+0x4c0>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	617b      	str	r3, [r7, #20]
 8008774:	e02a      	b.n	80087cc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	7a1b      	ldrb	r3, [r3, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00c      	beq.n	8008798 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	7a1a      	ldrb	r2, [r3, #8]
 8008782:	4b22      	ldr	r3, [pc, #136]	; (800880c <tcp_input+0x4a0>)
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800878a:	3301      	adds	r3, #1
 800878c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800878e:	429a      	cmp	r2, r3
 8008790:	d002      	beq.n	8008798 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	61bb      	str	r3, [r7, #24]
        continue;
 8008796:	e016      	b.n	80087c6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	8ada      	ldrh	r2, [r3, #22]
 800879c:	4b1a      	ldr	r3, [pc, #104]	; (8008808 <tcp_input+0x49c>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d10c      	bne.n	80087c2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b17      	ldr	r3, [pc, #92]	; (800880c <tcp_input+0x4a0>)
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d00f      	beq.n	80087d4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00d      	beq.n	80087d6 <tcp_input+0x46a>
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d009      	beq.n	80087d6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1d1      	bne.n	8008776 <tcp_input+0x40a>
 80087d2:	e000      	b.n	80087d6 <tcp_input+0x46a>
            break;
 80087d4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d029      	beq.n	8008830 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80087ea:	4b10      	ldr	r3, [pc, #64]	; (800882c <tcp_input+0x4c0>)
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80087f2:	4a0e      	ldr	r2, [pc, #56]	; (800882c <tcp_input+0x4c0>)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80087f8:	6978      	ldr	r0, [r7, #20]
 80087fa:	f000 fa03 	bl	8008c04 <tcp_listen_input>
      }
      pbuf_free(p);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7fd fcdc 	bl	80061bc <pbuf_free>
      return;
 8008804:	e1a8      	b.n	8008b58 <tcp_input+0x7ec>
 8008806:	bf00      	nop
 8008808:	200087b4 	.word	0x200087b4
 800880c:	200051fc 	.word	0x200051fc
 8008810:	08013964 	.word	0x08013964
 8008814:	08013a90 	.word	0x08013a90
 8008818:	080139b0 	.word	0x080139b0
 800881c:	20008798 	.word	0x20008798
 8008820:	08013abc 	.word	0x08013abc
 8008824:	2000879c 	.word	0x2000879c
 8008828:	08013ae8 	.word	0x08013ae8
 800882c:	20008794 	.word	0x20008794
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 8158 	beq.w	8008ae8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008838:	4b95      	ldr	r3, [pc, #596]	; (8008a90 <tcp_input+0x724>)
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	891a      	ldrh	r2, [r3, #8]
 8008842:	4b93      	ldr	r3, [pc, #588]	; (8008a90 <tcp_input+0x724>)
 8008844:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008846:	4a92      	ldr	r2, [pc, #584]	; (8008a90 <tcp_input+0x724>)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800884c:	4b91      	ldr	r3, [pc, #580]	; (8008a94 <tcp_input+0x728>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a8f      	ldr	r2, [pc, #572]	; (8008a90 <tcp_input+0x724>)
 8008852:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008854:	4b90      	ldr	r3, [pc, #576]	; (8008a98 <tcp_input+0x72c>)
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800885a:	4b90      	ldr	r3, [pc, #576]	; (8008a9c <tcp_input+0x730>)
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008860:	4b8f      	ldr	r3, [pc, #572]	; (8008aa0 <tcp_input+0x734>)
 8008862:	2200      	movs	r2, #0
 8008864:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008866:	4b8f      	ldr	r3, [pc, #572]	; (8008aa4 <tcp_input+0x738>)
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	f003 0308 	and.w	r3, r3, #8
 800886e:	2b00      	cmp	r3, #0
 8008870:	d006      	beq.n	8008880 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	7b5b      	ldrb	r3, [r3, #13]
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	b2da      	uxtb	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008884:	2b00      	cmp	r3, #0
 8008886:	d017      	beq.n	80088b8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008888:	69f8      	ldr	r0, [r7, #28]
 800888a:	f7ff f843 	bl	8007914 <tcp_process_refused_data>
 800888e:	4603      	mov	r3, r0
 8008890:	f113 0f0d 	cmn.w	r3, #13
 8008894:	d007      	beq.n	80088a6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00c      	beq.n	80088b8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800889e:	4b82      	ldr	r3, [pc, #520]	; (8008aa8 <tcp_input+0x73c>)
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d008      	beq.n	80088b8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f040 80e3 	bne.w	8008a76 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80088b0:	69f8      	ldr	r0, [r7, #28]
 80088b2:	f003 fe05 	bl	800c4c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80088b6:	e0de      	b.n	8008a76 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80088b8:	4a7c      	ldr	r2, [pc, #496]	; (8008aac <tcp_input+0x740>)
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80088be:	69f8      	ldr	r0, [r7, #28]
 80088c0:	f000 fb18 	bl	8008ef4 <tcp_process>
 80088c4:	4603      	mov	r3, r0
 80088c6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80088c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088cc:	f113 0f0d 	cmn.w	r3, #13
 80088d0:	f000 80d3 	beq.w	8008a7a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80088d4:	4b71      	ldr	r3, [pc, #452]	; (8008a9c <tcp_input+0x730>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d015      	beq.n	800890c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d008      	beq.n	80088fc <tcp_input+0x590>
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	6912      	ldr	r2, [r2, #16]
 80088f4:	f06f 010d 	mvn.w	r1, #13
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80088fc:	69f9      	ldr	r1, [r7, #28]
 80088fe:	486c      	ldr	r0, [pc, #432]	; (8008ab0 <tcp_input+0x744>)
 8008900:	f7ff fbbc 	bl	800807c <tcp_pcb_remove>
        tcp_free(pcb);
 8008904:	69f8      	ldr	r0, [r7, #28]
 8008906:	f7fd ff09 	bl	800671c <tcp_free>
 800890a:	e0da      	b.n	8008ac2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800890c:	2300      	movs	r3, #0
 800890e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008910:	4b63      	ldr	r3, [pc, #396]	; (8008aa0 <tcp_input+0x734>)
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d01d      	beq.n	8008954 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008918:	4b61      	ldr	r3, [pc, #388]	; (8008aa0 <tcp_input+0x734>)
 800891a:	881b      	ldrh	r3, [r3, #0]
 800891c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00a      	beq.n	800893e <tcp_input+0x5d2>
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800892e:	69fa      	ldr	r2, [r7, #28]
 8008930:	6910      	ldr	r0, [r2, #16]
 8008932:	89fa      	ldrh	r2, [r7, #14]
 8008934:	69f9      	ldr	r1, [r7, #28]
 8008936:	4798      	blx	r3
 8008938:	4603      	mov	r3, r0
 800893a:	74fb      	strb	r3, [r7, #19]
 800893c:	e001      	b.n	8008942 <tcp_input+0x5d6>
 800893e:	2300      	movs	r3, #0
 8008940:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008942:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008946:	f113 0f0d 	cmn.w	r3, #13
 800894a:	f000 8098 	beq.w	8008a7e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800894e:	4b54      	ldr	r3, [pc, #336]	; (8008aa0 <tcp_input+0x734>)
 8008950:	2200      	movs	r2, #0
 8008952:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008954:	69f8      	ldr	r0, [r7, #28]
 8008956:	f000 f915 	bl	8008b84 <tcp_input_delayed_close>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8090 	bne.w	8008a82 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008962:	4b4d      	ldr	r3, [pc, #308]	; (8008a98 <tcp_input+0x72c>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d041      	beq.n	80089ee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800896e:	2b00      	cmp	r3, #0
 8008970:	d006      	beq.n	8008980 <tcp_input+0x614>
 8008972:	4b50      	ldr	r3, [pc, #320]	; (8008ab4 <tcp_input+0x748>)
 8008974:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008978:	494f      	ldr	r1, [pc, #316]	; (8008ab8 <tcp_input+0x74c>)
 800897a:	4850      	ldr	r0, [pc, #320]	; (8008abc <tcp_input+0x750>)
 800897c:	f008 ff90 	bl	80118a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	8b5b      	ldrh	r3, [r3, #26]
 8008984:	f003 0310 	and.w	r3, r3, #16
 8008988:	2b00      	cmp	r3, #0
 800898a:	d008      	beq.n	800899e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800898c:	4b42      	ldr	r3, [pc, #264]	; (8008a98 <tcp_input+0x72c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4618      	mov	r0, r3
 8008992:	f7fd fc13 	bl	80061bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008996:	69f8      	ldr	r0, [r7, #28]
 8008998:	f7fe f9a8 	bl	8006cec <tcp_abort>
            goto aborted;
 800899c:	e091      	b.n	8008ac2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00c      	beq.n	80089c2 <tcp_input+0x656>
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	6918      	ldr	r0, [r3, #16]
 80089b2:	4b39      	ldr	r3, [pc, #228]	; (8008a98 <tcp_input+0x72c>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	2300      	movs	r3, #0
 80089b8:	69f9      	ldr	r1, [r7, #28]
 80089ba:	47a0      	blx	r4
 80089bc:	4603      	mov	r3, r0
 80089be:	74fb      	strb	r3, [r7, #19]
 80089c0:	e008      	b.n	80089d4 <tcp_input+0x668>
 80089c2:	4b35      	ldr	r3, [pc, #212]	; (8008a98 <tcp_input+0x72c>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	2300      	movs	r3, #0
 80089c8:	69f9      	ldr	r1, [r7, #28]
 80089ca:	2000      	movs	r0, #0
 80089cc:	f7ff f896 	bl	8007afc <tcp_recv_null>
 80089d0:	4603      	mov	r3, r0
 80089d2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80089d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089d8:	f113 0f0d 	cmn.w	r3, #13
 80089dc:	d053      	beq.n	8008a86 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80089de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80089e6:	4b2c      	ldr	r3, [pc, #176]	; (8008a98 <tcp_input+0x72c>)
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	69fb      	ldr	r3, [r7, #28]
 80089ec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80089ee:	4b2b      	ldr	r3, [pc, #172]	; (8008a9c <tcp_input+0x730>)
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	f003 0320 	and.w	r3, r3, #32
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d030      	beq.n	8008a5c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a06:	7b5a      	ldrb	r2, [r3, #13]
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a0c:	f042 0220 	orr.w	r2, r2, #32
 8008a10:	b2d2      	uxtb	r2, r2
 8008a12:	735a      	strb	r2, [r3, #13]
 8008a14:	e022      	b.n	8008a5c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008a1e:	d005      	beq.n	8008a2c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a24:	3301      	adds	r3, #1
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00b      	beq.n	8008a4e <tcp_input+0x6e2>
 8008a36:	69fb      	ldr	r3, [r7, #28]
 8008a38:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	6918      	ldr	r0, [r3, #16]
 8008a40:	2300      	movs	r3, #0
 8008a42:	2200      	movs	r2, #0
 8008a44:	69f9      	ldr	r1, [r7, #28]
 8008a46:	47a0      	blx	r4
 8008a48:	4603      	mov	r3, r0
 8008a4a:	74fb      	strb	r3, [r7, #19]
 8008a4c:	e001      	b.n	8008a52 <tcp_input+0x6e6>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008a52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008a56:	f113 0f0d 	cmn.w	r3, #13
 8008a5a:	d016      	beq.n	8008a8a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8008a5c:	4b13      	ldr	r3, [pc, #76]	; (8008aac <tcp_input+0x740>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8008a62:	69f8      	ldr	r0, [r7, #28]
 8008a64:	f000 f88e 	bl	8008b84 <tcp_input_delayed_close>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d128      	bne.n	8008ac0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8008a6e:	69f8      	ldr	r0, [r7, #28]
 8008a70:	f002 ff20 	bl	800b8b4 <tcp_output>
 8008a74:	e025      	b.n	8008ac2 <tcp_input+0x756>
        goto aborted;
 8008a76:	bf00      	nop
 8008a78:	e023      	b.n	8008ac2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008a7a:	bf00      	nop
 8008a7c:	e021      	b.n	8008ac2 <tcp_input+0x756>
              goto aborted;
 8008a7e:	bf00      	nop
 8008a80:	e01f      	b.n	8008ac2 <tcp_input+0x756>
          goto aborted;
 8008a82:	bf00      	nop
 8008a84:	e01d      	b.n	8008ac2 <tcp_input+0x756>
            goto aborted;
 8008a86:	bf00      	nop
 8008a88:	e01b      	b.n	8008ac2 <tcp_input+0x756>
              goto aborted;
 8008a8a:	bf00      	nop
 8008a8c:	e019      	b.n	8008ac2 <tcp_input+0x756>
 8008a8e:	bf00      	nop
 8008a90:	200087a4 	.word	0x200087a4
 8008a94:	200087b4 	.word	0x200087b4
 8008a98:	200087d4 	.word	0x200087d4
 8008a9c:	200087d1 	.word	0x200087d1
 8008aa0:	200087cc 	.word	0x200087cc
 8008aa4:	200087d0 	.word	0x200087d0
 8008aa8:	200087ce 	.word	0x200087ce
 8008aac:	200087d8 	.word	0x200087d8
 8008ab0:	20008798 	.word	0x20008798
 8008ab4:	08013964 	.word	0x08013964
 8008ab8:	08013b18 	.word	0x08013b18
 8008abc:	080139b0 	.word	0x080139b0
          goto aborted;
 8008ac0:	bf00      	nop
    tcp_input_pcb = NULL;
 8008ac2:	4b27      	ldr	r3, [pc, #156]	; (8008b60 <tcp_input+0x7f4>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008ac8:	4b26      	ldr	r3, [pc, #152]	; (8008b64 <tcp_input+0x7f8>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008ace:	4b26      	ldr	r3, [pc, #152]	; (8008b68 <tcp_input+0x7fc>)
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d03f      	beq.n	8008b56 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8008ad6:	4b24      	ldr	r3, [pc, #144]	; (8008b68 <tcp_input+0x7fc>)
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fd fb6e 	bl	80061bc <pbuf_free>
      inseg.p = NULL;
 8008ae0:	4b21      	ldr	r3, [pc, #132]	; (8008b68 <tcp_input+0x7fc>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8008ae6:	e036      	b.n	8008b56 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008ae8:	4b20      	ldr	r3, [pc, #128]	; (8008b6c <tcp_input+0x800>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	899b      	ldrh	r3, [r3, #12]
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fb fff9 	bl	8004ae8 <lwip_htons>
 8008af6:	4603      	mov	r3, r0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 0304 	and.w	r3, r3, #4
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d118      	bne.n	8008b34 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b02:	4b1b      	ldr	r3, [pc, #108]	; (8008b70 <tcp_input+0x804>)
 8008b04:	6819      	ldr	r1, [r3, #0]
 8008b06:	4b1b      	ldr	r3, [pc, #108]	; (8008b74 <tcp_input+0x808>)
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <tcp_input+0x80c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b12:	4b16      	ldr	r3, [pc, #88]	; (8008b6c <tcp_input+0x800>)
 8008b14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b16:	885b      	ldrh	r3, [r3, #2]
 8008b18:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008b1a:	4a14      	ldr	r2, [pc, #80]	; (8008b6c <tcp_input+0x800>)
 8008b1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008b1e:	8812      	ldrh	r2, [r2, #0]
 8008b20:	b292      	uxth	r2, r2
 8008b22:	9202      	str	r2, [sp, #8]
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <tcp_input+0x810>)
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	4b15      	ldr	r3, [pc, #84]	; (8008b80 <tcp_input+0x814>)
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	2000      	movs	r0, #0
 8008b30:	f003 fc74 	bl	800c41c <tcp_rst>
    pbuf_free(p);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f7fd fb41 	bl	80061bc <pbuf_free>
  return;
 8008b3a:	e00c      	b.n	8008b56 <tcp_input+0x7ea>
    goto dropped;
 8008b3c:	bf00      	nop
 8008b3e:	e006      	b.n	8008b4e <tcp_input+0x7e2>
    goto dropped;
 8008b40:	bf00      	nop
 8008b42:	e004      	b.n	8008b4e <tcp_input+0x7e2>
    goto dropped;
 8008b44:	bf00      	nop
 8008b46:	e002      	b.n	8008b4e <tcp_input+0x7e2>
      goto dropped;
 8008b48:	bf00      	nop
 8008b4a:	e000      	b.n	8008b4e <tcp_input+0x7e2>
      goto dropped;
 8008b4c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7fd fb34 	bl	80061bc <pbuf_free>
 8008b54:	e000      	b.n	8008b58 <tcp_input+0x7ec>
  return;
 8008b56:	bf00      	nop
}
 8008b58:	3724      	adds	r7, #36	; 0x24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd90      	pop	{r4, r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	200087d8 	.word	0x200087d8
 8008b64:	200087d4 	.word	0x200087d4
 8008b68:	200087a4 	.word	0x200087a4
 8008b6c:	200087b4 	.word	0x200087b4
 8008b70:	200087c8 	.word	0x200087c8
 8008b74:	200087ce 	.word	0x200087ce
 8008b78:	200087c4 	.word	0x200087c4
 8008b7c:	2000520c 	.word	0x2000520c
 8008b80:	20005210 	.word	0x20005210

08008b84 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d106      	bne.n	8008ba0 <tcp_input_delayed_close+0x1c>
 8008b92:	4b17      	ldr	r3, [pc, #92]	; (8008bf0 <tcp_input_delayed_close+0x6c>)
 8008b94:	f240 225a 	movw	r2, #602	; 0x25a
 8008b98:	4916      	ldr	r1, [pc, #88]	; (8008bf4 <tcp_input_delayed_close+0x70>)
 8008b9a:	4817      	ldr	r0, [pc, #92]	; (8008bf8 <tcp_input_delayed_close+0x74>)
 8008b9c:	f008 fe80 	bl	80118a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008ba0:	4b16      	ldr	r3, [pc, #88]	; (8008bfc <tcp_input_delayed_close+0x78>)
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d01c      	beq.n	8008be6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	8b5b      	ldrh	r3, [r3, #26]
 8008bb0:	f003 0310 	and.w	r3, r3, #16
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d10d      	bne.n	8008bd4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d008      	beq.n	8008bd4 <tcp_input_delayed_close+0x50>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6912      	ldr	r2, [r2, #16]
 8008bcc:	f06f 010e 	mvn.w	r1, #14
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	480a      	ldr	r0, [pc, #40]	; (8008c00 <tcp_input_delayed_close+0x7c>)
 8008bd8:	f7ff fa50 	bl	800807c <tcp_pcb_remove>
    tcp_free(pcb);
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7fd fd9d 	bl	800671c <tcp_free>
    return 1;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e000      	b.n	8008be8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3708      	adds	r7, #8
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	08013964 	.word	0x08013964
 8008bf4:	08013b34 	.word	0x08013b34
 8008bf8:	080139b0 	.word	0x080139b0
 8008bfc:	200087d1 	.word	0x200087d1
 8008c00:	20008798 	.word	0x20008798

08008c04 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b08b      	sub	sp, #44	; 0x2c
 8008c08:	af04      	add	r7, sp, #16
 8008c0a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008c0c:	4b6f      	ldr	r3, [pc, #444]	; (8008dcc <tcp_listen_input+0x1c8>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f040 80d2 	bne.w	8008dbe <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d106      	bne.n	8008c2e <tcp_listen_input+0x2a>
 8008c20:	4b6b      	ldr	r3, [pc, #428]	; (8008dd0 <tcp_listen_input+0x1cc>)
 8008c22:	f240 2281 	movw	r2, #641	; 0x281
 8008c26:	496b      	ldr	r1, [pc, #428]	; (8008dd4 <tcp_listen_input+0x1d0>)
 8008c28:	486b      	ldr	r0, [pc, #428]	; (8008dd8 <tcp_listen_input+0x1d4>)
 8008c2a:	f008 fe39 	bl	80118a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8008c2e:	4b67      	ldr	r3, [pc, #412]	; (8008dcc <tcp_listen_input+0x1c8>)
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	f003 0310 	and.w	r3, r3, #16
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d019      	beq.n	8008c6e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c3a:	4b68      	ldr	r3, [pc, #416]	; (8008ddc <tcp_listen_input+0x1d8>)
 8008c3c:	6819      	ldr	r1, [r3, #0]
 8008c3e:	4b68      	ldr	r3, [pc, #416]	; (8008de0 <tcp_listen_input+0x1dc>)
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	4b67      	ldr	r3, [pc, #412]	; (8008de4 <tcp_listen_input+0x1e0>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c4a:	4b67      	ldr	r3, [pc, #412]	; (8008de8 <tcp_listen_input+0x1e4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c4e:	885b      	ldrh	r3, [r3, #2]
 8008c50:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008c52:	4a65      	ldr	r2, [pc, #404]	; (8008de8 <tcp_listen_input+0x1e4>)
 8008c54:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008c56:	8812      	ldrh	r2, [r2, #0]
 8008c58:	b292      	uxth	r2, r2
 8008c5a:	9202      	str	r2, [sp, #8]
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	4b63      	ldr	r3, [pc, #396]	; (8008dec <tcp_listen_input+0x1e8>)
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	4b63      	ldr	r3, [pc, #396]	; (8008df0 <tcp_listen_input+0x1ec>)
 8008c64:	4602      	mov	r2, r0
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f003 fbd8 	bl	800c41c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8008c6c:	e0a9      	b.n	8008dc2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8008c6e:	4b57      	ldr	r3, [pc, #348]	; (8008dcc <tcp_listen_input+0x1c8>)
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 80a3 	beq.w	8008dc2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7d5b      	ldrb	r3, [r3, #21]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff f85f 	bl	8007d44 <tcp_alloc>
 8008c86:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d111      	bne.n	8008cb2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <tcp_listen_input+0xa8>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6910      	ldr	r0, [r2, #16]
 8008c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	4798      	blx	r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73bb      	strb	r3, [r7, #14]
      return;
 8008caa:	e08b      	b.n	8008dc4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008cac:	23f0      	movs	r3, #240	; 0xf0
 8008cae:	73bb      	strb	r3, [r7, #14]
      return;
 8008cb0:	e088      	b.n	8008dc4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008cb2:	4b50      	ldr	r3, [pc, #320]	; (8008df4 <tcp_listen_input+0x1f0>)
 8008cb4:	695a      	ldr	r2, [r3, #20]
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008cba:	4b4e      	ldr	r3, [pc, #312]	; (8008df4 <tcp_listen_input+0x1f0>)
 8008cbc:	691a      	ldr	r2, [r3, #16]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	8ada      	ldrh	r2, [r3, #22]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008cca:	4b47      	ldr	r3, [pc, #284]	; (8008de8 <tcp_listen_input+0x1e4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2203      	movs	r2, #3
 8008cda:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008cdc:	4b41      	ldr	r3, [pc, #260]	; (8008de4 <tcp_listen_input+0x1e0>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008cee:	6978      	ldr	r0, [r7, #20]
 8008cf0:	f7ff fa58 	bl	80081a4 <tcp_next_iss>
 8008cf4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008d0e:	4b35      	ldr	r3, [pc, #212]	; (8008de4 <tcp_listen_input+0x1e0>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	1e5a      	subs	r2, r3, #1
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	7a5b      	ldrb	r3, [r3, #9]
 8008d2a:	f003 030c 	and.w	r3, r3, #12
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7a1a      	ldrb	r2, [r3, #8]
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8008d3c:	4b2e      	ldr	r3, [pc, #184]	; (8008df8 <tcp_listen_input+0x1f4>)
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	60da      	str	r2, [r3, #12]
 8008d44:	4a2c      	ldr	r2, [pc, #176]	; (8008df8 <tcp_listen_input+0x1f4>)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	f003 fd29 	bl	800c7a0 <tcp_timer_needed>
 8008d4e:	4b2b      	ldr	r3, [pc, #172]	; (8008dfc <tcp_listen_input+0x1f8>)
 8008d50:	2201      	movs	r2, #1
 8008d52:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008d54:	6978      	ldr	r0, [r7, #20]
 8008d56:	f001 fd8f 	bl	800a878 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8008d5a:	4b23      	ldr	r3, [pc, #140]	; (8008de8 <tcp_listen_input+0x1e4>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	89db      	ldrh	r3, [r3, #14]
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f007 fa85 	bl	801028c <ip4_route>
 8008d82:	4601      	mov	r1, r0
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	3304      	adds	r3, #4
 8008d88:	461a      	mov	r2, r3
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f7ff fa30 	bl	80081f0 <tcp_eff_send_mss_netif>
 8008d90:	4603      	mov	r3, r0
 8008d92:	461a      	mov	r2, r3
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008d98:	2112      	movs	r1, #18
 8008d9a:	6978      	ldr	r0, [r7, #20]
 8008d9c:	f002 fc9c 	bl	800b6d8 <tcp_enqueue_flags>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008dac:	2100      	movs	r1, #0
 8008dae:	6978      	ldr	r0, [r7, #20]
 8008db0:	f7fd fede 	bl	8006b70 <tcp_abandon>
      return;
 8008db4:	e006      	b.n	8008dc4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8008db6:	6978      	ldr	r0, [r7, #20]
 8008db8:	f002 fd7c 	bl	800b8b4 <tcp_output>
  return;
 8008dbc:	e001      	b.n	8008dc2 <tcp_listen_input+0x1be>
    return;
 8008dbe:	bf00      	nop
 8008dc0:	e000      	b.n	8008dc4 <tcp_listen_input+0x1c0>
  return;
 8008dc2:	bf00      	nop
}
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd90      	pop	{r4, r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	200087d0 	.word	0x200087d0
 8008dd0:	08013964 	.word	0x08013964
 8008dd4:	08013b5c 	.word	0x08013b5c
 8008dd8:	080139b0 	.word	0x080139b0
 8008ddc:	200087c8 	.word	0x200087c8
 8008de0:	200087ce 	.word	0x200087ce
 8008de4:	200087c4 	.word	0x200087c4
 8008de8:	200087b4 	.word	0x200087b4
 8008dec:	2000520c 	.word	0x2000520c
 8008df0:	20005210 	.word	0x20005210
 8008df4:	200051fc 	.word	0x200051fc
 8008df8:	20008798 	.word	0x20008798
 8008dfc:	200087a0 	.word	0x200087a0

08008e00 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af04      	add	r7, sp, #16
 8008e06:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008e08:	4b2f      	ldr	r3, [pc, #188]	; (8008ec8 <tcp_timewait_input+0xc8>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	f003 0304 	and.w	r3, r3, #4
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d153      	bne.n	8008ebc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <tcp_timewait_input+0x28>
 8008e1a:	4b2c      	ldr	r3, [pc, #176]	; (8008ecc <tcp_timewait_input+0xcc>)
 8008e1c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8008e20:	492b      	ldr	r1, [pc, #172]	; (8008ed0 <tcp_timewait_input+0xd0>)
 8008e22:	482c      	ldr	r0, [pc, #176]	; (8008ed4 <tcp_timewait_input+0xd4>)
 8008e24:	f008 fd3c 	bl	80118a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8008e28:	4b27      	ldr	r3, [pc, #156]	; (8008ec8 <tcp_timewait_input+0xc8>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d02a      	beq.n	8008e8a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008e34:	4b28      	ldr	r3, [pc, #160]	; (8008ed8 <tcp_timewait_input+0xd8>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	db2d      	blt.n	8008e9e <tcp_timewait_input+0x9e>
 8008e42:	4b25      	ldr	r3, [pc, #148]	; (8008ed8 <tcp_timewait_input+0xd8>)
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008e4e:	440b      	add	r3, r1
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dc23      	bgt.n	8008e9e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e56:	4b21      	ldr	r3, [pc, #132]	; (8008edc <tcp_timewait_input+0xdc>)
 8008e58:	6819      	ldr	r1, [r3, #0]
 8008e5a:	4b21      	ldr	r3, [pc, #132]	; (8008ee0 <tcp_timewait_input+0xe0>)
 8008e5c:	881b      	ldrh	r3, [r3, #0]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <tcp_timewait_input+0xd8>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e66:	4b1f      	ldr	r3, [pc, #124]	; (8008ee4 <tcp_timewait_input+0xe4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e6a:	885b      	ldrh	r3, [r3, #2]
 8008e6c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008e6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ee4 <tcp_timewait_input+0xe4>)
 8008e70:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008e72:	8812      	ldrh	r2, [r2, #0]
 8008e74:	b292      	uxth	r2, r2
 8008e76:	9202      	str	r2, [sp, #8]
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ee8 <tcp_timewait_input+0xe8>)
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	4b1b      	ldr	r3, [pc, #108]	; (8008eec <tcp_timewait_input+0xec>)
 8008e80:	4602      	mov	r2, r0
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f003 faca 	bl	800c41c <tcp_rst>
      return;
 8008e88:	e01b      	b.n	8008ec2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008e8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <tcp_timewait_input+0xc8>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	f003 0301 	and.w	r3, r3, #1
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008e96:	4b16      	ldr	r3, [pc, #88]	; (8008ef0 <tcp_timewait_input+0xf0>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008e9e:	4b10      	ldr	r3, [pc, #64]	; (8008ee0 <tcp_timewait_input+0xe0>)
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00c      	beq.n	8008ec0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	8b5b      	ldrh	r3, [r3, #26]
 8008eaa:	f043 0302 	orr.w	r3, r3, #2
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f002 fcfd 	bl	800b8b4 <tcp_output>
  }
  return;
 8008eba:	e001      	b.n	8008ec0 <tcp_timewait_input+0xc0>
    return;
 8008ebc:	bf00      	nop
 8008ebe:	e000      	b.n	8008ec2 <tcp_timewait_input+0xc2>
  return;
 8008ec0:	bf00      	nop
}
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	200087d0 	.word	0x200087d0
 8008ecc:	08013964 	.word	0x08013964
 8008ed0:	08013b7c 	.word	0x08013b7c
 8008ed4:	080139b0 	.word	0x080139b0
 8008ed8:	200087c4 	.word	0x200087c4
 8008edc:	200087c8 	.word	0x200087c8
 8008ee0:	200087ce 	.word	0x200087ce
 8008ee4:	200087b4 	.word	0x200087b4
 8008ee8:	2000520c 	.word	0x2000520c
 8008eec:	20005210 	.word	0x20005210
 8008ef0:	2000878c 	.word	0x2000878c

08008ef4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008ef4:	b590      	push	{r4, r7, lr}
 8008ef6:	b08d      	sub	sp, #52	; 0x34
 8008ef8:	af04      	add	r7, sp, #16
 8008efa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008f00:	2300      	movs	r3, #0
 8008f02:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <tcp_process+0x24>
 8008f0a:	4b9d      	ldr	r3, [pc, #628]	; (8009180 <tcp_process+0x28c>)
 8008f0c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008f10:	499c      	ldr	r1, [pc, #624]	; (8009184 <tcp_process+0x290>)
 8008f12:	489d      	ldr	r0, [pc, #628]	; (8009188 <tcp_process+0x294>)
 8008f14:	f008 fcc4 	bl	80118a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8008f18:	4b9c      	ldr	r3, [pc, #624]	; (800918c <tcp_process+0x298>)
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d04e      	beq.n	8008fc2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	7d1b      	ldrb	r3, [r3, #20]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d108      	bne.n	8008f3e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f30:	4b97      	ldr	r3, [pc, #604]	; (8009190 <tcp_process+0x29c>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d123      	bne.n	8008f80 <tcp_process+0x8c>
        acceptable = 1;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	76fb      	strb	r3, [r7, #27]
 8008f3c:	e020      	b.n	8008f80 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f42:	4b94      	ldr	r3, [pc, #592]	; (8009194 <tcp_process+0x2a0>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d102      	bne.n	8008f50 <tcp_process+0x5c>
        acceptable = 1;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	76fb      	strb	r3, [r7, #27]
 8008f4e:	e017      	b.n	8008f80 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f50:	4b90      	ldr	r3, [pc, #576]	; (8009194 <tcp_process+0x2a0>)
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	db10      	blt.n	8008f80 <tcp_process+0x8c>
 8008f5e:	4b8d      	ldr	r3, [pc, #564]	; (8009194 <tcp_process+0x2a0>)
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008f6a:	440b      	add	r3, r1
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dc06      	bgt.n	8008f80 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	8b5b      	ldrh	r3, [r3, #26]
 8008f76:	f043 0302 	orr.w	r3, r3, #2
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008f80:	7efb      	ldrb	r3, [r7, #27]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01b      	beq.n	8008fbe <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	7d1b      	ldrb	r3, [r3, #20]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <tcp_process+0xa8>
 8008f8e:	4b7c      	ldr	r3, [pc, #496]	; (8009180 <tcp_process+0x28c>)
 8008f90:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008f94:	4980      	ldr	r1, [pc, #512]	; (8009198 <tcp_process+0x2a4>)
 8008f96:	487c      	ldr	r0, [pc, #496]	; (8009188 <tcp_process+0x294>)
 8008f98:	f008 fc82 	bl	80118a0 <iprintf>
      recv_flags |= TF_RESET;
 8008f9c:	4b7f      	ldr	r3, [pc, #508]	; (800919c <tcp_process+0x2a8>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f043 0308 	orr.w	r3, r3, #8
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	4b7d      	ldr	r3, [pc, #500]	; (800919c <tcp_process+0x2a8>)
 8008fa8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	8b5b      	ldrh	r3, [r3, #26]
 8008fae:	f023 0301 	bic.w	r3, r3, #1
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008fb8:	f06f 030d 	mvn.w	r3, #13
 8008fbc:	e37a      	b.n	80096b4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	e378      	b.n	80096b4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008fc2:	4b72      	ldr	r3, [pc, #456]	; (800918c <tcp_process+0x298>)
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	f003 0302 	and.w	r3, r3, #2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d010      	beq.n	8008ff0 <tcp_process+0xfc>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7d1b      	ldrb	r3, [r3, #20]
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d00c      	beq.n	8008ff0 <tcp_process+0xfc>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	7d1b      	ldrb	r3, [r3, #20]
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d008      	beq.n	8008ff0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	8b5b      	ldrh	r3, [r3, #26]
 8008fe2:	f043 0302 	orr.w	r3, r3, #2
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e361      	b.n	80096b4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	8b5b      	ldrh	r3, [r3, #26]
 8008ff4:	f003 0310 	and.w	r3, r3, #16
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008ffc:	4b68      	ldr	r3, [pc, #416]	; (80091a0 <tcp_process+0x2ac>)
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 fc2f 	bl	800a878 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	7d1b      	ldrb	r3, [r3, #20]
 800901e:	3b02      	subs	r3, #2
 8009020:	2b07      	cmp	r3, #7
 8009022:	f200 8337 	bhi.w	8009694 <tcp_process+0x7a0>
 8009026:	a201      	add	r2, pc, #4	; (adr r2, 800902c <tcp_process+0x138>)
 8009028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902c:	0800904d 	.word	0x0800904d
 8009030:	0800927d 	.word	0x0800927d
 8009034:	080093f5 	.word	0x080093f5
 8009038:	0800941f 	.word	0x0800941f
 800903c:	08009543 	.word	0x08009543
 8009040:	080093f5 	.word	0x080093f5
 8009044:	080095cf 	.word	0x080095cf
 8009048:	0800965f 	.word	0x0800965f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800904c:	4b4f      	ldr	r3, [pc, #316]	; (800918c <tcp_process+0x298>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	f003 0310 	and.w	r3, r3, #16
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 80e4 	beq.w	8009222 <tcp_process+0x32e>
 800905a:	4b4c      	ldr	r3, [pc, #304]	; (800918c <tcp_process+0x298>)
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	f000 80dd 	beq.w	8009222 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906c:	1c5a      	adds	r2, r3, #1
 800906e:	4b48      	ldr	r3, [pc, #288]	; (8009190 <tcp_process+0x29c>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	429a      	cmp	r2, r3
 8009074:	f040 80d5 	bne.w	8009222 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009078:	4b46      	ldr	r3, [pc, #280]	; (8009194 <tcp_process+0x2a0>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800908a:	4b41      	ldr	r3, [pc, #260]	; (8009190 <tcp_process+0x29c>)
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009092:	4b44      	ldr	r3, [pc, #272]	; (80091a4 <tcp_process+0x2b0>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	89db      	ldrh	r3, [r3, #14]
 8009098:	b29a      	uxth	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80090ac:	4b39      	ldr	r3, [pc, #228]	; (8009194 <tcp_process+0x2a0>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	1e5a      	subs	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2204      	movs	r2, #4
 80090ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4618      	mov	r0, r3
 80090c6:	f007 f8e1 	bl	801028c <ip4_route>
 80090ca:	4601      	mov	r1, r0
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3304      	adds	r3, #4
 80090d0:	461a      	mov	r2, r3
 80090d2:	4620      	mov	r0, r4
 80090d4:	f7ff f88c 	bl	80081f0 <tcp_eff_send_mss_netif>
 80090d8:	4603      	mov	r3, r0
 80090da:	461a      	mov	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090e4:	009a      	lsls	r2, r3, #2
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	f241 111c 	movw	r1, #4380	; 0x111c
 80090f0:	428b      	cmp	r3, r1
 80090f2:	bf38      	it	cc
 80090f4:	460b      	movcc	r3, r1
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d204      	bcs.n	8009104 <tcp_process+0x210>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	b29b      	uxth	r3, r3
 8009102:	e00d      	b.n	8009120 <tcp_process+0x22c>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009108:	005b      	lsls	r3, r3, #1
 800910a:	f241 121c 	movw	r2, #4380	; 0x111c
 800910e:	4293      	cmp	r3, r2
 8009110:	d904      	bls.n	800911c <tcp_process+0x228>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	b29b      	uxth	r3, r3
 800911a:	e001      	b.n	8009120 <tcp_process+0x22c>
 800911c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800912c:	2b00      	cmp	r3, #0
 800912e:	d106      	bne.n	800913e <tcp_process+0x24a>
 8009130:	4b13      	ldr	r3, [pc, #76]	; (8009180 <tcp_process+0x28c>)
 8009132:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009136:	491c      	ldr	r1, [pc, #112]	; (80091a8 <tcp_process+0x2b4>)
 8009138:	4813      	ldr	r0, [pc, #76]	; (8009188 <tcp_process+0x294>)
 800913a:	f008 fbb1 	bl	80118a0 <iprintf>
        --pcb->snd_queuelen;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009144:	3b01      	subs	r3, #1
 8009146:	b29a      	uxth	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009152:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d12a      	bne.n	80091b0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d106      	bne.n	8009174 <tcp_process+0x280>
 8009166:	4b06      	ldr	r3, [pc, #24]	; (8009180 <tcp_process+0x28c>)
 8009168:	f44f 725d 	mov.w	r2, #884	; 0x374
 800916c:	490f      	ldr	r1, [pc, #60]	; (80091ac <tcp_process+0x2b8>)
 800916e:	4806      	ldr	r0, [pc, #24]	; (8009188 <tcp_process+0x294>)
 8009170:	f008 fb96 	bl	80118a0 <iprintf>
          pcb->unsent = rseg->next;
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	66da      	str	r2, [r3, #108]	; 0x6c
 800917c:	e01c      	b.n	80091b8 <tcp_process+0x2c4>
 800917e:	bf00      	nop
 8009180:	08013964 	.word	0x08013964
 8009184:	08013b9c 	.word	0x08013b9c
 8009188:	080139b0 	.word	0x080139b0
 800918c:	200087d0 	.word	0x200087d0
 8009190:	200087c8 	.word	0x200087c8
 8009194:	200087c4 	.word	0x200087c4
 8009198:	08013bb8 	.word	0x08013bb8
 800919c:	200087d1 	.word	0x200087d1
 80091a0:	2000878c 	.word	0x2000878c
 80091a4:	200087b4 	.word	0x200087b4
 80091a8:	08013bd8 	.word	0x08013bd8
 80091ac:	08013bf0 	.word	0x08013bf0
        } else {
          pcb->unacked = rseg->next;
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80091b8:	69f8      	ldr	r0, [r7, #28]
 80091ba:	f7fe fc3c 	bl	8007a36 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d104      	bne.n	80091d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091cc:	861a      	strh	r2, [r3, #48]	; 0x30
 80091ce:	e006      	b.n	80091de <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00a      	beq.n	80091fe <tcp_process+0x30a>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	6910      	ldr	r0, [r2, #16]
 80091f2:	2200      	movs	r2, #0
 80091f4:	6879      	ldr	r1, [r7, #4]
 80091f6:	4798      	blx	r3
 80091f8:	4603      	mov	r3, r0
 80091fa:	76bb      	strb	r3, [r7, #26]
 80091fc:	e001      	b.n	8009202 <tcp_process+0x30e>
 80091fe:	2300      	movs	r3, #0
 8009200:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009202:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009206:	f113 0f0d 	cmn.w	r3, #13
 800920a:	d102      	bne.n	8009212 <tcp_process+0x31e>
          return ERR_ABRT;
 800920c:	f06f 030c 	mvn.w	r3, #12
 8009210:	e250      	b.n	80096b4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	8b5b      	ldrh	r3, [r3, #26]
 8009216:	f043 0302 	orr.w	r3, r3, #2
 800921a:	b29a      	uxth	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009220:	e23a      	b.n	8009698 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009222:	4b98      	ldr	r3, [pc, #608]	; (8009484 <tcp_process+0x590>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	f003 0310 	and.w	r3, r3, #16
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 8234 	beq.w	8009698 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009230:	4b95      	ldr	r3, [pc, #596]	; (8009488 <tcp_process+0x594>)
 8009232:	6819      	ldr	r1, [r3, #0]
 8009234:	4b95      	ldr	r3, [pc, #596]	; (800948c <tcp_process+0x598>)
 8009236:	881b      	ldrh	r3, [r3, #0]
 8009238:	461a      	mov	r2, r3
 800923a:	4b95      	ldr	r3, [pc, #596]	; (8009490 <tcp_process+0x59c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009240:	4b94      	ldr	r3, [pc, #592]	; (8009494 <tcp_process+0x5a0>)
 8009242:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009248:	4a92      	ldr	r2, [pc, #584]	; (8009494 <tcp_process+0x5a0>)
 800924a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800924c:	8812      	ldrh	r2, [r2, #0]
 800924e:	b292      	uxth	r2, r2
 8009250:	9202      	str	r2, [sp, #8]
 8009252:	9301      	str	r3, [sp, #4]
 8009254:	4b90      	ldr	r3, [pc, #576]	; (8009498 <tcp_process+0x5a4>)
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	4b90      	ldr	r3, [pc, #576]	; (800949c <tcp_process+0x5a8>)
 800925a:	4602      	mov	r2, r0
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f003 f8dd 	bl	800c41c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009268:	2b05      	cmp	r3, #5
 800926a:	f200 8215 	bhi.w	8009698 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f002 fea9 	bl	800bfcc <tcp_rexmit_rto>
      break;
 800927a:	e20d      	b.n	8009698 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800927c:	4b81      	ldr	r3, [pc, #516]	; (8009484 <tcp_process+0x590>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 0310 	and.w	r3, r3, #16
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80a1 	beq.w	80093cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800928a:	4b7f      	ldr	r3, [pc, #508]	; (8009488 <tcp_process+0x594>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	3b01      	subs	r3, #1
 8009296:	2b00      	cmp	r3, #0
 8009298:	db7e      	blt.n	8009398 <tcp_process+0x4a4>
 800929a:	4b7b      	ldr	r3, [pc, #492]	; (8009488 <tcp_process+0x594>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dc77      	bgt.n	8009398 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2204      	movs	r2, #4
 80092ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d102      	bne.n	80092bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80092b6:	23fa      	movs	r3, #250	; 0xfa
 80092b8:	76bb      	strb	r3, [r7, #26]
 80092ba:	e01d      	b.n	80092f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <tcp_process+0x3e0>
 80092c6:	4b76      	ldr	r3, [pc, #472]	; (80094a0 <tcp_process+0x5ac>)
 80092c8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80092cc:	4975      	ldr	r1, [pc, #468]	; (80094a4 <tcp_process+0x5b0>)
 80092ce:	4876      	ldr	r0, [pc, #472]	; (80094a8 <tcp_process+0x5b4>)
 80092d0:	f008 fae6 	bl	80118a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <tcp_process+0x400>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	6910      	ldr	r0, [r2, #16]
 80092e8:	2200      	movs	r2, #0
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	4798      	blx	r3
 80092ee:	4603      	mov	r3, r0
 80092f0:	76bb      	strb	r3, [r7, #26]
 80092f2:	e001      	b.n	80092f8 <tcp_process+0x404>
 80092f4:	23f0      	movs	r3, #240	; 0xf0
 80092f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80092f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00a      	beq.n	8009316 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009300:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009304:	f113 0f0d 	cmn.w	r3, #13
 8009308:	d002      	beq.n	8009310 <tcp_process+0x41c>
              tcp_abort(pcb);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7fd fcee 	bl	8006cec <tcp_abort>
            }
            return ERR_ABRT;
 8009310:	f06f 030c 	mvn.w	r3, #12
 8009314:	e1ce      	b.n	80096b4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fae0 	bl	80098dc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800931c:	4b63      	ldr	r3, [pc, #396]	; (80094ac <tcp_process+0x5b8>)
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d005      	beq.n	8009330 <tcp_process+0x43c>
            recv_acked--;
 8009324:	4b61      	ldr	r3, [pc, #388]	; (80094ac <tcp_process+0x5b8>)
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	3b01      	subs	r3, #1
 800932a:	b29a      	uxth	r2, r3
 800932c:	4b5f      	ldr	r3, [pc, #380]	; (80094ac <tcp_process+0x5b8>)
 800932e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009334:	009a      	lsls	r2, r3, #2
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800933a:	005b      	lsls	r3, r3, #1
 800933c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009340:	428b      	cmp	r3, r1
 8009342:	bf38      	it	cc
 8009344:	460b      	movcc	r3, r1
 8009346:	429a      	cmp	r2, r3
 8009348:	d204      	bcs.n	8009354 <tcp_process+0x460>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	b29b      	uxth	r3, r3
 8009352:	e00d      	b.n	8009370 <tcp_process+0x47c>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	f241 121c 	movw	r2, #4380	; 0x111c
 800935e:	4293      	cmp	r3, r2
 8009360:	d904      	bls.n	800936c <tcp_process+0x478>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009366:	005b      	lsls	r3, r3, #1
 8009368:	b29b      	uxth	r3, r3
 800936a:	e001      	b.n	8009370 <tcp_process+0x47c>
 800936c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009376:	4b4e      	ldr	r3, [pc, #312]	; (80094b0 <tcp_process+0x5bc>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	f003 0320 	and.w	r3, r3, #32
 800937e:	2b00      	cmp	r3, #0
 8009380:	d037      	beq.n	80093f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8b5b      	ldrh	r3, [r3, #26]
 8009386:	f043 0302 	orr.w	r3, r3, #2
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2207      	movs	r2, #7
 8009394:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009396:	e02c      	b.n	80093f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009398:	4b3b      	ldr	r3, [pc, #236]	; (8009488 <tcp_process+0x594>)
 800939a:	6819      	ldr	r1, [r3, #0]
 800939c:	4b3b      	ldr	r3, [pc, #236]	; (800948c <tcp_process+0x598>)
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	4b3b      	ldr	r3, [pc, #236]	; (8009490 <tcp_process+0x59c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093a8:	4b3a      	ldr	r3, [pc, #232]	; (8009494 <tcp_process+0x5a0>)
 80093aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093ac:	885b      	ldrh	r3, [r3, #2]
 80093ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80093b0:	4a38      	ldr	r2, [pc, #224]	; (8009494 <tcp_process+0x5a0>)
 80093b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80093b4:	8812      	ldrh	r2, [r2, #0]
 80093b6:	b292      	uxth	r2, r2
 80093b8:	9202      	str	r2, [sp, #8]
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	4b36      	ldr	r3, [pc, #216]	; (8009498 <tcp_process+0x5a4>)
 80093be:	9300      	str	r3, [sp, #0]
 80093c0:	4b36      	ldr	r3, [pc, #216]	; (800949c <tcp_process+0x5a8>)
 80093c2:	4602      	mov	r2, r0
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f003 f829 	bl	800c41c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80093ca:	e167      	b.n	800969c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80093cc:	4b2d      	ldr	r3, [pc, #180]	; (8009484 <tcp_process+0x590>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f000 8161 	beq.w	800969c <tcp_process+0x7a8>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	1e5a      	subs	r2, r3, #1
 80093e0:	4b2b      	ldr	r3, [pc, #172]	; (8009490 <tcp_process+0x59c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	f040 8159 	bne.w	800969c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f002 fe10 	bl	800c010 <tcp_rexmit>
      break;
 80093f0:	e154      	b.n	800969c <tcp_process+0x7a8>
 80093f2:	e153      	b.n	800969c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fa71 	bl	80098dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80093fa:	4b2d      	ldr	r3, [pc, #180]	; (80094b0 <tcp_process+0x5bc>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 814c 	beq.w	80096a0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	8b5b      	ldrh	r3, [r3, #26]
 800940c:	f043 0302 	orr.w	r3, r3, #2
 8009410:	b29a      	uxth	r2, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2207      	movs	r2, #7
 800941a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800941c:	e140      	b.n	80096a0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fa5c 	bl	80098dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009424:	4b22      	ldr	r3, [pc, #136]	; (80094b0 <tcp_process+0x5bc>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	f003 0320 	and.w	r3, r3, #32
 800942c:	2b00      	cmp	r3, #0
 800942e:	d071      	beq.n	8009514 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009430:	4b14      	ldr	r3, [pc, #80]	; (8009484 <tcp_process+0x590>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	f003 0310 	and.w	r3, r3, #16
 8009438:	2b00      	cmp	r3, #0
 800943a:	d060      	beq.n	80094fe <tcp_process+0x60a>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009440:	4b11      	ldr	r3, [pc, #68]	; (8009488 <tcp_process+0x594>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d15a      	bne.n	80094fe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800944c:	2b00      	cmp	r3, #0
 800944e:	d156      	bne.n	80094fe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	8b5b      	ldrh	r3, [r3, #26]
 8009454:	f043 0302 	orr.w	r3, r3, #2
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f7fe fdbc 	bl	8007fdc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009464:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <tcp_process+0x5c0>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	429a      	cmp	r2, r3
 800946c:	d105      	bne.n	800947a <tcp_process+0x586>
 800946e:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <tcp_process+0x5c0>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	4a0f      	ldr	r2, [pc, #60]	; (80094b4 <tcp_process+0x5c0>)
 8009476:	6013      	str	r3, [r2, #0]
 8009478:	e02e      	b.n	80094d8 <tcp_process+0x5e4>
 800947a:	4b0e      	ldr	r3, [pc, #56]	; (80094b4 <tcp_process+0x5c0>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	e027      	b.n	80094d2 <tcp_process+0x5de>
 8009482:	bf00      	nop
 8009484:	200087d0 	.word	0x200087d0
 8009488:	200087c8 	.word	0x200087c8
 800948c:	200087ce 	.word	0x200087ce
 8009490:	200087c4 	.word	0x200087c4
 8009494:	200087b4 	.word	0x200087b4
 8009498:	2000520c 	.word	0x2000520c
 800949c:	20005210 	.word	0x20005210
 80094a0:	08013964 	.word	0x08013964
 80094a4:	08013c04 	.word	0x08013c04
 80094a8:	080139b0 	.word	0x080139b0
 80094ac:	200087cc 	.word	0x200087cc
 80094b0:	200087d1 	.word	0x200087d1
 80094b4:	20008798 	.word	0x20008798
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d104      	bne.n	80094cc <tcp_process+0x5d8>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	68da      	ldr	r2, [r3, #12]
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	60da      	str	r2, [r3, #12]
 80094ca:	e005      	b.n	80094d8 <tcp_process+0x5e4>
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	617b      	str	r3, [r7, #20]
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1ef      	bne.n	80094b8 <tcp_process+0x5c4>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	60da      	str	r2, [r3, #12]
 80094de:	4b77      	ldr	r3, [pc, #476]	; (80096bc <tcp_process+0x7c8>)
 80094e0:	2201      	movs	r2, #1
 80094e2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	220a      	movs	r2, #10
 80094e8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80094ea:	4b75      	ldr	r3, [pc, #468]	; (80096c0 <tcp_process+0x7cc>)
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	60da      	str	r2, [r3, #12]
 80094f2:	4a73      	ldr	r2, [pc, #460]	; (80096c0 <tcp_process+0x7cc>)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6013      	str	r3, [r2, #0]
 80094f8:	f003 f952 	bl	800c7a0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80094fc:	e0d2      	b.n	80096a4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	8b5b      	ldrh	r3, [r3, #26]
 8009502:	f043 0302 	orr.w	r3, r3, #2
 8009506:	b29a      	uxth	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2208      	movs	r2, #8
 8009510:	751a      	strb	r2, [r3, #20]
      break;
 8009512:	e0c7      	b.n	80096a4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009514:	4b6b      	ldr	r3, [pc, #428]	; (80096c4 <tcp_process+0x7d0>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f003 0310 	and.w	r3, r3, #16
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 80c1 	beq.w	80096a4 <tcp_process+0x7b0>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009526:	4b68      	ldr	r3, [pc, #416]	; (80096c8 <tcp_process+0x7d4>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	f040 80ba 	bne.w	80096a4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009534:	2b00      	cmp	r3, #0
 8009536:	f040 80b5 	bne.w	80096a4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2206      	movs	r2, #6
 800953e:	751a      	strb	r2, [r3, #20]
      break;
 8009540:	e0b0      	b.n	80096a4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f9ca 	bl	80098dc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009548:	4b60      	ldr	r3, [pc, #384]	; (80096cc <tcp_process+0x7d8>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	f003 0320 	and.w	r3, r3, #32
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 80a9 	beq.w	80096a8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	8b5b      	ldrh	r3, [r3, #26]
 800955a:	f043 0302 	orr.w	r3, r3, #2
 800955e:	b29a      	uxth	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7fe fd39 	bl	8007fdc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800956a:	4b59      	ldr	r3, [pc, #356]	; (80096d0 <tcp_process+0x7dc>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	429a      	cmp	r2, r3
 8009572:	d105      	bne.n	8009580 <tcp_process+0x68c>
 8009574:	4b56      	ldr	r3, [pc, #344]	; (80096d0 <tcp_process+0x7dc>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	4a55      	ldr	r2, [pc, #340]	; (80096d0 <tcp_process+0x7dc>)
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	e013      	b.n	80095a8 <tcp_process+0x6b4>
 8009580:	4b53      	ldr	r3, [pc, #332]	; (80096d0 <tcp_process+0x7dc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	613b      	str	r3, [r7, #16]
 8009586:	e00c      	b.n	80095a2 <tcp_process+0x6ae>
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d104      	bne.n	800959c <tcp_process+0x6a8>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68da      	ldr	r2, [r3, #12]
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	60da      	str	r2, [r3, #12]
 800959a:	e005      	b.n	80095a8 <tcp_process+0x6b4>
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	613b      	str	r3, [r7, #16]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1ef      	bne.n	8009588 <tcp_process+0x694>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	60da      	str	r2, [r3, #12]
 80095ae:	4b43      	ldr	r3, [pc, #268]	; (80096bc <tcp_process+0x7c8>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	220a      	movs	r2, #10
 80095b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80095ba:	4b41      	ldr	r3, [pc, #260]	; (80096c0 <tcp_process+0x7cc>)
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60da      	str	r2, [r3, #12]
 80095c2:	4a3f      	ldr	r2, [pc, #252]	; (80096c0 <tcp_process+0x7cc>)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	f003 f8ea 	bl	800c7a0 <tcp_timer_needed>
      }
      break;
 80095cc:	e06c      	b.n	80096a8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 f984 	bl	80098dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80095d4:	4b3b      	ldr	r3, [pc, #236]	; (80096c4 <tcp_process+0x7d0>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 0310 	and.w	r3, r3, #16
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d065      	beq.n	80096ac <tcp_process+0x7b8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095e4:	4b38      	ldr	r3, [pc, #224]	; (80096c8 <tcp_process+0x7d4>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d15f      	bne.n	80096ac <tcp_process+0x7b8>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d15b      	bne.n	80096ac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7fe fcf1 	bl	8007fdc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80095fa:	4b35      	ldr	r3, [pc, #212]	; (80096d0 <tcp_process+0x7dc>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d105      	bne.n	8009610 <tcp_process+0x71c>
 8009604:	4b32      	ldr	r3, [pc, #200]	; (80096d0 <tcp_process+0x7dc>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	4a31      	ldr	r2, [pc, #196]	; (80096d0 <tcp_process+0x7dc>)
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	e013      	b.n	8009638 <tcp_process+0x744>
 8009610:	4b2f      	ldr	r3, [pc, #188]	; (80096d0 <tcp_process+0x7dc>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	e00c      	b.n	8009632 <tcp_process+0x73e>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	429a      	cmp	r2, r3
 8009620:	d104      	bne.n	800962c <tcp_process+0x738>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	60da      	str	r2, [r3, #12]
 800962a:	e005      	b.n	8009638 <tcp_process+0x744>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	60fb      	str	r3, [r7, #12]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1ef      	bne.n	8009618 <tcp_process+0x724>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	60da      	str	r2, [r3, #12]
 800963e:	4b1f      	ldr	r3, [pc, #124]	; (80096bc <tcp_process+0x7c8>)
 8009640:	2201      	movs	r2, #1
 8009642:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	220a      	movs	r2, #10
 8009648:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800964a:	4b1d      	ldr	r3, [pc, #116]	; (80096c0 <tcp_process+0x7cc>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60da      	str	r2, [r3, #12]
 8009652:	4a1b      	ldr	r2, [pc, #108]	; (80096c0 <tcp_process+0x7cc>)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	f003 f8a2 	bl	800c7a0 <tcp_timer_needed>
      }
      break;
 800965c:	e026      	b.n	80096ac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f93c 	bl	80098dc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009664:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <tcp_process+0x7d0>)
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	f003 0310 	and.w	r3, r3, #16
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01f      	beq.n	80096b0 <tcp_process+0x7bc>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009674:	4b14      	ldr	r3, [pc, #80]	; (80096c8 <tcp_process+0x7d4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	d119      	bne.n	80096b0 <tcp_process+0x7bc>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009680:	2b00      	cmp	r3, #0
 8009682:	d115      	bne.n	80096b0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009684:	4b11      	ldr	r3, [pc, #68]	; (80096cc <tcp_process+0x7d8>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	f043 0310 	orr.w	r3, r3, #16
 800968c:	b2da      	uxtb	r2, r3
 800968e:	4b0f      	ldr	r3, [pc, #60]	; (80096cc <tcp_process+0x7d8>)
 8009690:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009692:	e00d      	b.n	80096b0 <tcp_process+0x7bc>
    default:
      break;
 8009694:	bf00      	nop
 8009696:	e00c      	b.n	80096b2 <tcp_process+0x7be>
      break;
 8009698:	bf00      	nop
 800969a:	e00a      	b.n	80096b2 <tcp_process+0x7be>
      break;
 800969c:	bf00      	nop
 800969e:	e008      	b.n	80096b2 <tcp_process+0x7be>
      break;
 80096a0:	bf00      	nop
 80096a2:	e006      	b.n	80096b2 <tcp_process+0x7be>
      break;
 80096a4:	bf00      	nop
 80096a6:	e004      	b.n	80096b2 <tcp_process+0x7be>
      break;
 80096a8:	bf00      	nop
 80096aa:	e002      	b.n	80096b2 <tcp_process+0x7be>
      break;
 80096ac:	bf00      	nop
 80096ae:	e000      	b.n	80096b2 <tcp_process+0x7be>
      break;
 80096b0:	bf00      	nop
  }
  return ERR_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3724      	adds	r7, #36	; 0x24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd90      	pop	{r4, r7, pc}
 80096bc:	200087a0 	.word	0x200087a0
 80096c0:	2000879c 	.word	0x2000879c
 80096c4:	200087d0 	.word	0x200087d0
 80096c8:	200087c8 	.word	0x200087c8
 80096cc:	200087d1 	.word	0x200087d1
 80096d0:	20008798 	.word	0x20008798

080096d4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80096d4:	b590      	push	{r4, r7, lr}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <tcp_oos_insert_segment+0x1e>
 80096e4:	4b3b      	ldr	r3, [pc, #236]	; (80097d4 <tcp_oos_insert_segment+0x100>)
 80096e6:	f240 421f 	movw	r2, #1055	; 0x41f
 80096ea:	493b      	ldr	r1, [pc, #236]	; (80097d8 <tcp_oos_insert_segment+0x104>)
 80096ec:	483b      	ldr	r0, [pc, #236]	; (80097dc <tcp_oos_insert_segment+0x108>)
 80096ee:	f008 f8d7 	bl	80118a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	899b      	ldrh	r3, [r3, #12]
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7fb f9f4 	bl	8004ae8 <lwip_htons>
 8009700:	4603      	mov	r3, r0
 8009702:	b2db      	uxtb	r3, r3
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d028      	beq.n	800975e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800970c:	6838      	ldr	r0, [r7, #0]
 800970e:	f7fe f97d 	bl	8007a0c <tcp_segs_free>
    next = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	603b      	str	r3, [r7, #0]
 8009716:	e056      	b.n	80097c6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	899b      	ldrh	r3, [r3, #12]
 800971e:	b29b      	uxth	r3, r3
 8009720:	4618      	mov	r0, r3
 8009722:	f7fb f9e1 	bl	8004ae8 <lwip_htons>
 8009726:	4603      	mov	r3, r0
 8009728:	b2db      	uxtb	r3, r3
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00d      	beq.n	800974e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	899b      	ldrh	r3, [r3, #12]
 8009738:	b29c      	uxth	r4, r3
 800973a:	2001      	movs	r0, #1
 800973c:	f7fb f9d4 	bl	8004ae8 <lwip_htons>
 8009740:	4603      	mov	r3, r0
 8009742:	461a      	mov	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	4322      	orrs	r2, r4
 800974a:	b292      	uxth	r2, r2
 800974c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7fe f96c 	bl	8007a36 <tcp_seg_free>
    while (next &&
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00e      	beq.n	8009782 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	891b      	ldrh	r3, [r3, #8]
 8009768:	461a      	mov	r2, r3
 800976a:	4b1d      	ldr	r3, [pc, #116]	; (80097e0 <tcp_oos_insert_segment+0x10c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	441a      	add	r2, r3
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	6839      	ldr	r1, [r7, #0]
 8009778:	8909      	ldrh	r1, [r1, #8]
 800977a:	440b      	add	r3, r1
 800977c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800977e:	2b00      	cmp	r3, #0
 8009780:	daca      	bge.n	8009718 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d01e      	beq.n	80097c6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	891b      	ldrh	r3, [r3, #8]
 800978c:	461a      	mov	r2, r3
 800978e:	4b14      	ldr	r3, [pc, #80]	; (80097e0 <tcp_oos_insert_segment+0x10c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	441a      	add	r2, r3
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800979c:	2b00      	cmp	r3, #0
 800979e:	dd12      	ble.n	80097c6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	4b0d      	ldr	r3, [pc, #52]	; (80097e0 <tcp_oos_insert_segment+0x10c>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	891b      	ldrh	r3, [r3, #8]
 80097be:	4619      	mov	r1, r3
 80097c0:	4610      	mov	r0, r2
 80097c2:	f7fc fb75 	bl	8005eb0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	601a      	str	r2, [r3, #0]
}
 80097cc:	bf00      	nop
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd90      	pop	{r4, r7, pc}
 80097d4:	08013964 	.word	0x08013964
 80097d8:	08013c24 	.word	0x08013c24
 80097dc:	080139b0 	.word	0x080139b0
 80097e0:	200087c4 	.word	0x200087c4

080097e4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80097e4:	b5b0      	push	{r4, r5, r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80097f2:	e03e      	b.n	8009872 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	4618      	mov	r0, r3
 8009804:	f7fc fd62 	bl	80062cc <pbuf_clen>
 8009808:	4603      	mov	r3, r0
 800980a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009812:	8a7a      	ldrh	r2, [r7, #18]
 8009814:	429a      	cmp	r2, r3
 8009816:	d906      	bls.n	8009826 <tcp_free_acked_segments+0x42>
 8009818:	4b2a      	ldr	r3, [pc, #168]	; (80098c4 <tcp_free_acked_segments+0xe0>)
 800981a:	f240 4257 	movw	r2, #1111	; 0x457
 800981e:	492a      	ldr	r1, [pc, #168]	; (80098c8 <tcp_free_acked_segments+0xe4>)
 8009820:	482a      	ldr	r0, [pc, #168]	; (80098cc <tcp_free_acked_segments+0xe8>)
 8009822:	f008 f83d 	bl	80118a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800982c:	8a7b      	ldrh	r3, [r7, #18]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	891a      	ldrh	r2, [r3, #8]
 800983c:	4b24      	ldr	r3, [pc, #144]	; (80098d0 <tcp_free_acked_segments+0xec>)
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	4413      	add	r3, r2
 8009842:	b29a      	uxth	r2, r3
 8009844:	4b22      	ldr	r3, [pc, #136]	; (80098d0 <tcp_free_acked_segments+0xec>)
 8009846:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009848:	6978      	ldr	r0, [r7, #20]
 800984a:	f7fe f8f4 	bl	8007a36 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00c      	beq.n	8009872 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d109      	bne.n	8009872 <tcp_free_acked_segments+0x8e>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d106      	bne.n	8009872 <tcp_free_acked_segments+0x8e>
 8009864:	4b17      	ldr	r3, [pc, #92]	; (80098c4 <tcp_free_acked_segments+0xe0>)
 8009866:	f240 4261 	movw	r2, #1121	; 0x461
 800986a:	491a      	ldr	r1, [pc, #104]	; (80098d4 <tcp_free_acked_segments+0xf0>)
 800986c:	4817      	ldr	r0, [pc, #92]	; (80098cc <tcp_free_acked_segments+0xe8>)
 800986e:	f008 f817 	bl	80118a0 <iprintf>
  while (seg_list != NULL &&
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d020      	beq.n	80098ba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	4618      	mov	r0, r3
 8009880:	f7fb f947 	bl	8004b12 <lwip_htonl>
 8009884:	4604      	mov	r4, r0
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	891b      	ldrh	r3, [r3, #8]
 800988a:	461d      	mov	r5, r3
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	899b      	ldrh	r3, [r3, #12]
 8009892:	b29b      	uxth	r3, r3
 8009894:	4618      	mov	r0, r3
 8009896:	f7fb f927 	bl	8004ae8 <lwip_htons>
 800989a:	4603      	mov	r3, r0
 800989c:	b2db      	uxtb	r3, r3
 800989e:	f003 0303 	and.w	r3, r3, #3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <tcp_free_acked_segments+0xc6>
 80098a6:	2301      	movs	r3, #1
 80098a8:	e000      	b.n	80098ac <tcp_free_acked_segments+0xc8>
 80098aa:	2300      	movs	r3, #0
 80098ac:	442b      	add	r3, r5
 80098ae:	18e2      	adds	r2, r4, r3
 80098b0:	4b09      	ldr	r3, [pc, #36]	; (80098d8 <tcp_free_acked_segments+0xf4>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	dd9c      	ble.n	80097f4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80098ba:	68bb      	ldr	r3, [r7, #8]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3718      	adds	r7, #24
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bdb0      	pop	{r4, r5, r7, pc}
 80098c4:	08013964 	.word	0x08013964
 80098c8:	08013c4c 	.word	0x08013c4c
 80098cc:	080139b0 	.word	0x080139b0
 80098d0:	200087cc 	.word	0x200087cc
 80098d4:	08013c74 	.word	0x08013c74
 80098d8:	200087c8 	.word	0x200087c8

080098dc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80098dc:	b5b0      	push	{r4, r5, r7, lr}
 80098de:	b094      	sub	sp, #80	; 0x50
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <tcp_receive+0x20>
 80098ee:	4b91      	ldr	r3, [pc, #580]	; (8009b34 <tcp_receive+0x258>)
 80098f0:	f240 427b 	movw	r2, #1147	; 0x47b
 80098f4:	4990      	ldr	r1, [pc, #576]	; (8009b38 <tcp_receive+0x25c>)
 80098f6:	4891      	ldr	r0, [pc, #580]	; (8009b3c <tcp_receive+0x260>)
 80098f8:	f007 ffd2 	bl	80118a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7d1b      	ldrb	r3, [r3, #20]
 8009900:	2b03      	cmp	r3, #3
 8009902:	d806      	bhi.n	8009912 <tcp_receive+0x36>
 8009904:	4b8b      	ldr	r3, [pc, #556]	; (8009b34 <tcp_receive+0x258>)
 8009906:	f240 427c 	movw	r2, #1148	; 0x47c
 800990a:	498d      	ldr	r1, [pc, #564]	; (8009b40 <tcp_receive+0x264>)
 800990c:	488b      	ldr	r0, [pc, #556]	; (8009b3c <tcp_receive+0x260>)
 800990e:	f007 ffc7 	bl	80118a0 <iprintf>

  if (flags & TCP_ACK) {
 8009912:	4b8c      	ldr	r3, [pc, #560]	; (8009b44 <tcp_receive+0x268>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	f003 0310 	and.w	r3, r3, #16
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 8264 	beq.w	8009de8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009926:	461a      	mov	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800992c:	4413      	add	r3, r2
 800992e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009934:	4b84      	ldr	r3, [pc, #528]	; (8009b48 <tcp_receive+0x26c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	db1b      	blt.n	8009976 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009942:	4b81      	ldr	r3, [pc, #516]	; (8009b48 <tcp_receive+0x26c>)
 8009944:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009946:	429a      	cmp	r2, r3
 8009948:	d106      	bne.n	8009958 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800994e:	4b7f      	ldr	r3, [pc, #508]	; (8009b4c <tcp_receive+0x270>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	2b00      	cmp	r3, #0
 8009956:	db0e      	blt.n	8009976 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800995c:	4b7b      	ldr	r3, [pc, #492]	; (8009b4c <tcp_receive+0x270>)
 800995e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009960:	429a      	cmp	r2, r3
 8009962:	d125      	bne.n	80099b0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009964:	4b7a      	ldr	r3, [pc, #488]	; (8009b50 <tcp_receive+0x274>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	89db      	ldrh	r3, [r3, #14]
 800996a:	b29a      	uxth	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009972:	429a      	cmp	r2, r3
 8009974:	d91c      	bls.n	80099b0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009976:	4b76      	ldr	r3, [pc, #472]	; (8009b50 <tcp_receive+0x274>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	89db      	ldrh	r3, [r3, #14]
 800997c:	b29a      	uxth	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009990:	429a      	cmp	r2, r3
 8009992:	d205      	bcs.n	80099a0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80099a0:	4b69      	ldr	r3, [pc, #420]	; (8009b48 <tcp_receive+0x26c>)
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80099a8:	4b68      	ldr	r3, [pc, #416]	; (8009b4c <tcp_receive+0x270>)
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80099b0:	4b66      	ldr	r3, [pc, #408]	; (8009b4c <tcp_receive+0x270>)
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	dc58      	bgt.n	8009a70 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80099be:	4b65      	ldr	r3, [pc, #404]	; (8009b54 <tcp_receive+0x278>)
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d14b      	bne.n	8009a5e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80099d0:	4413      	add	r3, r2
 80099d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099d4:	429a      	cmp	r2, r3
 80099d6:	d142      	bne.n	8009a5e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80099de:	2b00      	cmp	r3, #0
 80099e0:	db3d      	blt.n	8009a5e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099e6:	4b59      	ldr	r3, [pc, #356]	; (8009b4c <tcp_receive+0x270>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d137      	bne.n	8009a5e <tcp_receive+0x182>
              found_dupack = 1;
 80099ee:	2301      	movs	r3, #1
 80099f0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80099f8:	2bff      	cmp	r3, #255	; 0xff
 80099fa:	d007      	beq.n	8009a0c <tcp_receive+0x130>
                ++pcb->dupacks;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a02:	3301      	adds	r3, #1
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d91b      	bls.n	8009a4e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a20:	4413      	add	r3, r2
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d30a      	bcc.n	8009a44 <tcp_receive+0x168>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009a38:	4413      	add	r3, r2
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009a42:	e004      	b.n	8009a4e <tcp_receive+0x172>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d902      	bls.n	8009a5e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f002 fb45 	bl	800c0e8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8009a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f040 8161 	bne.w	8009d28 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a6e:	e15b      	b.n	8009d28 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a70:	4b36      	ldr	r3, [pc, #216]	; (8009b4c <tcp_receive+0x270>)
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f2c0 814e 	blt.w	8009d1e <tcp_receive+0x442>
 8009a82:	4b32      	ldr	r3, [pc, #200]	; (8009b4c <tcp_receive+0x270>)
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8a:	1ad3      	subs	r3, r2, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f300 8146 	bgt.w	8009d1e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	8b5b      	ldrh	r3, [r3, #26]
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d010      	beq.n	8009ac0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	8b5b      	ldrh	r3, [r3, #26]
 8009aa2:	f023 0304 	bic.w	r3, r3, #4
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009ace:	10db      	asrs	r3, r3, #3
 8009ad0:	b21b      	sxth	r3, r3
 8009ad2:	b29a      	uxth	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	4413      	add	r3, r2
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	b21a      	sxth	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009ae8:	4b18      	ldr	r3, [pc, #96]	; (8009b4c <tcp_receive+0x270>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009b00:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <tcp_receive+0x270>)
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	7d1b      	ldrb	r3, [r3, #20]
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	f240 8097 	bls.w	8009c40 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d245      	bcs.n	8009bae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	8b5b      	ldrh	r3, [r3, #26]
 8009b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d014      	beq.n	8009b58 <tcp_receive+0x27c>
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e013      	b.n	8009b5a <tcp_receive+0x27e>
 8009b32:	bf00      	nop
 8009b34:	08013964 	.word	0x08013964
 8009b38:	08013c94 	.word	0x08013c94
 8009b3c:	080139b0 	.word	0x080139b0
 8009b40:	08013cb0 	.word	0x08013cb0
 8009b44:	200087d0 	.word	0x200087d0
 8009b48:	200087c4 	.word	0x200087c4
 8009b4c:	200087c8 	.word	0x200087c8
 8009b50:	200087b4 	.word	0x200087b4
 8009b54:	200087ce 	.word	0x200087ce
 8009b58:	2302      	movs	r3, #2
 8009b5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009b5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b68:	fb12 f303 	smulbb	r3, r2, r3
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b70:	4293      	cmp	r3, r2
 8009b72:	bf28      	it	cs
 8009b74:	4613      	movcs	r3, r2
 8009b76:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b80:	4413      	add	r3, r2
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d309      	bcc.n	8009ba2 <tcp_receive+0x2c6>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009b94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b96:	4413      	add	r3, r2
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009ba0:	e04e      	b.n	8009c40 <tcp_receive+0x364>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ba8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009bac:	e048      	b.n	8009c40 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009bb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009bb6:	4413      	add	r3, r2
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d309      	bcc.n	8009bd8 <tcp_receive+0x2fc>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009bca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009bcc:	4413      	add	r3, r2
 8009bce:	b29a      	uxth	r2, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8009bd6:	e004      	b.n	8009be2 <tcp_receive+0x306>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d326      	bcc.n	8009c40 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c12:	4413      	add	r3, r2
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d30a      	bcc.n	8009c36 <tcp_receive+0x35a>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c2a:	4413      	add	r3, r2
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009c34:	e004      	b.n	8009c40 <tcp_receive+0x364>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c48:	4a98      	ldr	r2, [pc, #608]	; (8009eac <tcp_receive+0x5d0>)
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff fdca 	bl	80097e4 <tcp_free_acked_segments>
 8009c50:	4602      	mov	r2, r0
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5e:	4a94      	ldr	r2, [pc, #592]	; (8009eb0 <tcp_receive+0x5d4>)
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff fdbf 	bl	80097e4 <tcp_free_acked_segments>
 8009c66:	4602      	mov	r2, r0
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d104      	bne.n	8009c7e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c7a:	861a      	strh	r2, [r3, #48]	; 0x30
 8009c7c:	e002      	b.n	8009c84 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d103      	bne.n	8009c9a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009ca0:	4b84      	ldr	r3, [pc, #528]	; (8009eb4 <tcp_receive+0x5d8>)
 8009ca2:	881b      	ldrh	r3, [r3, #0]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	8b5b      	ldrh	r3, [r3, #26]
 8009cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d035      	beq.n	8009d26 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d118      	bne.n	8009cf4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00c      	beq.n	8009ce4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fa ff1b 	bl	8004b12 <lwip_htonl>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	dc20      	bgt.n	8009d26 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	8b5b      	ldrh	r3, [r3, #26]
 8009ce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009cf2:	e018      	b.n	8009d26 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7fa ff06 	bl	8004b12 <lwip_htonl>
 8009d06:	4603      	mov	r3, r0
 8009d08:	1ae3      	subs	r3, r4, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dc0b      	bgt.n	8009d26 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	8b5b      	ldrh	r3, [r3, #26]
 8009d12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d1c:	e003      	b.n	8009d26 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f002 fbce 	bl	800c4c0 <tcp_send_empty_ack>
 8009d24:	e000      	b.n	8009d28 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009d26:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d05b      	beq.n	8009de8 <tcp_receive+0x50c>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d34:	4b60      	ldr	r3, [pc, #384]	; (8009eb8 <tcp_receive+0x5dc>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	da54      	bge.n	8009de8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009d3e:	4b5f      	ldr	r3, [pc, #380]	; (8009ebc <tcp_receive+0x5e0>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009d52:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d5c:	10db      	asrs	r3, r3, #3
 8009d5e:	b21b      	sxth	r3, r3
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d76:	4413      	add	r3, r2
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	b21a      	sxth	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009d80:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	da05      	bge.n	8009d94 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009d88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009d8c:	425b      	negs	r3, r3
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009d94:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009d9e:	109b      	asrs	r3, r3, #2
 8009da0:	b21b      	sxth	r3, r3
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009db8:	4413      	add	r3, r2
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	b21a      	sxth	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009dc8:	10db      	asrs	r3, r3, #3
 8009dca:	b21b      	sxth	r3, r3
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	4413      	add	r3, r2
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	b21a      	sxth	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009de8:	4b35      	ldr	r3, [pc, #212]	; (8009ec0 <tcp_receive+0x5e4>)
 8009dea:	881b      	ldrh	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 84e2 	beq.w	800a7b6 <tcp_receive+0xeda>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	7d1b      	ldrb	r3, [r3, #20]
 8009df6:	2b06      	cmp	r3, #6
 8009df8:	f200 84dd 	bhi.w	800a7b6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e00:	4b30      	ldr	r3, [pc, #192]	; (8009ec4 <tcp_receive+0x5e8>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	3b01      	subs	r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f2c0 808f 	blt.w	8009f2c <tcp_receive+0x650>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e12:	4b2b      	ldr	r3, [pc, #172]	; (8009ec0 <tcp_receive+0x5e4>)
 8009e14:	881b      	ldrh	r3, [r3, #0]
 8009e16:	4619      	mov	r1, r3
 8009e18:	4b2a      	ldr	r3, [pc, #168]	; (8009ec4 <tcp_receive+0x5e8>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	440b      	add	r3, r1
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	3301      	adds	r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f300 8082 	bgt.w	8009f2c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8009e28:	4b27      	ldr	r3, [pc, #156]	; (8009ec8 <tcp_receive+0x5ec>)
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e32:	4b24      	ldr	r3, [pc, #144]	; (8009ec4 <tcp_receive+0x5e8>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009e3a:	4b23      	ldr	r3, [pc, #140]	; (8009ec8 <tcp_receive+0x5ec>)
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <tcp_receive+0x574>
 8009e42:	4b22      	ldr	r3, [pc, #136]	; (8009ecc <tcp_receive+0x5f0>)
 8009e44:	f240 5294 	movw	r2, #1428	; 0x594
 8009e48:	4921      	ldr	r1, [pc, #132]	; (8009ed0 <tcp_receive+0x5f4>)
 8009e4a:	4822      	ldr	r0, [pc, #136]	; (8009ed4 <tcp_receive+0x5f8>)
 8009e4c:	f007 fd28 	bl	80118a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d906      	bls.n	8009e68 <tcp_receive+0x58c>
 8009e5a:	4b1c      	ldr	r3, [pc, #112]	; (8009ecc <tcp_receive+0x5f0>)
 8009e5c:	f240 5295 	movw	r2, #1429	; 0x595
 8009e60:	491d      	ldr	r1, [pc, #116]	; (8009ed8 <tcp_receive+0x5fc>)
 8009e62:	481c      	ldr	r0, [pc, #112]	; (8009ed4 <tcp_receive+0x5f8>)
 8009e64:	f007 fd1c 	bl	80118a0 <iprintf>
      off = (u16_t)off32;
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009e6e:	4b16      	ldr	r3, [pc, #88]	; (8009ec8 <tcp_receive+0x5ec>)
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	891b      	ldrh	r3, [r3, #8]
 8009e74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d906      	bls.n	8009e8a <tcp_receive+0x5ae>
 8009e7c:	4b13      	ldr	r3, [pc, #76]	; (8009ecc <tcp_receive+0x5f0>)
 8009e7e:	f240 5297 	movw	r2, #1431	; 0x597
 8009e82:	4916      	ldr	r1, [pc, #88]	; (8009edc <tcp_receive+0x600>)
 8009e84:	4813      	ldr	r0, [pc, #76]	; (8009ed4 <tcp_receive+0x5f8>)
 8009e86:	f007 fd0b 	bl	80118a0 <iprintf>
      inseg.len -= off;
 8009e8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <tcp_receive+0x5ec>)
 8009e8c:	891a      	ldrh	r2, [r3, #8]
 8009e8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	4b0c      	ldr	r3, [pc, #48]	; (8009ec8 <tcp_receive+0x5ec>)
 8009e98:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009e9a:	4b0b      	ldr	r3, [pc, #44]	; (8009ec8 <tcp_receive+0x5ec>)
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	891a      	ldrh	r2, [r3, #8]
 8009ea0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009ea8:	e02a      	b.n	8009f00 <tcp_receive+0x624>
 8009eaa:	bf00      	nop
 8009eac:	08013ccc 	.word	0x08013ccc
 8009eb0:	08013cd4 	.word	0x08013cd4
 8009eb4:	200087cc 	.word	0x200087cc
 8009eb8:	200087c8 	.word	0x200087c8
 8009ebc:	2000878c 	.word	0x2000878c
 8009ec0:	200087ce 	.word	0x200087ce
 8009ec4:	200087c4 	.word	0x200087c4
 8009ec8:	200087a4 	.word	0x200087a4
 8009ecc:	08013964 	.word	0x08013964
 8009ed0:	08013cdc 	.word	0x08013cdc
 8009ed4:	080139b0 	.word	0x080139b0
 8009ed8:	08013cec 	.word	0x08013cec
 8009edc:	08013cfc 	.word	0x08013cfc
        off -= p->len;
 8009ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ee2:	895b      	ldrh	r3, [r3, #10]
 8009ee4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ef0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009ef2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f02:	895b      	ldrh	r3, [r3, #10]
 8009f04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d8e9      	bhi.n	8009ee0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009f0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009f10:	4619      	mov	r1, r3
 8009f12:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8009f14:	f7fc f8cc 	bl	80060b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	4a91      	ldr	r2, [pc, #580]	; (800a164 <tcp_receive+0x888>)
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	4b91      	ldr	r3, [pc, #580]	; (800a168 <tcp_receive+0x88c>)
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	4a8f      	ldr	r2, [pc, #572]	; (800a164 <tcp_receive+0x888>)
 8009f26:	6812      	ldr	r2, [r2, #0]
 8009f28:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009f2a:	e00d      	b.n	8009f48 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8009f2c:	4b8d      	ldr	r3, [pc, #564]	; (800a164 <tcp_receive+0x888>)
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	da06      	bge.n	8009f48 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	8b5b      	ldrh	r3, [r3, #26]
 8009f3e:	f043 0302 	orr.w	r3, r3, #2
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009f48:	4b86      	ldr	r3, [pc, #536]	; (800a164 <tcp_receive+0x888>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	1ad3      	subs	r3, r2, r3
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f2c0 842a 	blt.w	800a7ac <tcp_receive+0xed0>
 8009f58:	4b82      	ldr	r3, [pc, #520]	; (800a164 <tcp_receive+0x888>)
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009f64:	440b      	add	r3, r1
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	3301      	adds	r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f300 841e 	bgt.w	800a7ac <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f74:	4b7b      	ldr	r3, [pc, #492]	; (800a164 <tcp_receive+0x888>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	f040 829a 	bne.w	800a4b2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009f7e:	4b7a      	ldr	r3, [pc, #488]	; (800a168 <tcp_receive+0x88c>)
 8009f80:	891c      	ldrh	r4, [r3, #8]
 8009f82:	4b79      	ldr	r3, [pc, #484]	; (800a168 <tcp_receive+0x88c>)
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	899b      	ldrh	r3, [r3, #12]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fa fdac 	bl	8004ae8 <lwip_htons>
 8009f90:	4603      	mov	r3, r0
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d001      	beq.n	8009fa0 <tcp_receive+0x6c4>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	e000      	b.n	8009fa2 <tcp_receive+0x6c6>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4423      	add	r3, r4
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	4b71      	ldr	r3, [pc, #452]	; (800a16c <tcp_receive+0x890>)
 8009fa8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009fae:	4b6f      	ldr	r3, [pc, #444]	; (800a16c <tcp_receive+0x890>)
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d275      	bcs.n	800a0a2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009fb6:	4b6c      	ldr	r3, [pc, #432]	; (800a168 <tcp_receive+0x88c>)
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	899b      	ldrh	r3, [r3, #12]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fa fd92 	bl	8004ae8 <lwip_htons>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01f      	beq.n	800a010 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009fd0:	4b65      	ldr	r3, [pc, #404]	; (800a168 <tcp_receive+0x88c>)
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	899b      	ldrh	r3, [r3, #12]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	b21b      	sxth	r3, r3
 8009fda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009fde:	b21c      	sxth	r4, r3
 8009fe0:	4b61      	ldr	r3, [pc, #388]	; (800a168 <tcp_receive+0x88c>)
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	899b      	ldrh	r3, [r3, #12]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fa fd7d 	bl	8004ae8 <lwip_htons>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7fa fd74 	bl	8004ae8 <lwip_htons>
 800a000:	4603      	mov	r3, r0
 800a002:	b21b      	sxth	r3, r3
 800a004:	4323      	orrs	r3, r4
 800a006:	b21a      	sxth	r2, r3
 800a008:	4b57      	ldr	r3, [pc, #348]	; (800a168 <tcp_receive+0x88c>)
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	b292      	uxth	r2, r2
 800a00e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a014:	4b54      	ldr	r3, [pc, #336]	; (800a168 <tcp_receive+0x88c>)
 800a016:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a018:	4b53      	ldr	r3, [pc, #332]	; (800a168 <tcp_receive+0x88c>)
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	899b      	ldrh	r3, [r3, #12]
 800a01e:	b29b      	uxth	r3, r3
 800a020:	4618      	mov	r0, r3
 800a022:	f7fa fd61 	bl	8004ae8 <lwip_htons>
 800a026:	4603      	mov	r3, r0
 800a028:	b2db      	uxtb	r3, r3
 800a02a:	f003 0302 	and.w	r3, r3, #2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d005      	beq.n	800a03e <tcp_receive+0x762>
            inseg.len -= 1;
 800a032:	4b4d      	ldr	r3, [pc, #308]	; (800a168 <tcp_receive+0x88c>)
 800a034:	891b      	ldrh	r3, [r3, #8]
 800a036:	3b01      	subs	r3, #1
 800a038:	b29a      	uxth	r2, r3
 800a03a:	4b4b      	ldr	r3, [pc, #300]	; (800a168 <tcp_receive+0x88c>)
 800a03c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a03e:	4b4a      	ldr	r3, [pc, #296]	; (800a168 <tcp_receive+0x88c>)
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	4a49      	ldr	r2, [pc, #292]	; (800a168 <tcp_receive+0x88c>)
 800a044:	8912      	ldrh	r2, [r2, #8]
 800a046:	4611      	mov	r1, r2
 800a048:	4618      	mov	r0, r3
 800a04a:	f7fb ff31 	bl	8005eb0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a04e:	4b46      	ldr	r3, [pc, #280]	; (800a168 <tcp_receive+0x88c>)
 800a050:	891c      	ldrh	r4, [r3, #8]
 800a052:	4b45      	ldr	r3, [pc, #276]	; (800a168 <tcp_receive+0x88c>)
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	899b      	ldrh	r3, [r3, #12]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fa fd44 	bl	8004ae8 <lwip_htons>
 800a060:	4603      	mov	r3, r0
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <tcp_receive+0x794>
 800a06c:	2301      	movs	r3, #1
 800a06e:	e000      	b.n	800a072 <tcp_receive+0x796>
 800a070:	2300      	movs	r3, #0
 800a072:	4423      	add	r3, r4
 800a074:	b29a      	uxth	r2, r3
 800a076:	4b3d      	ldr	r3, [pc, #244]	; (800a16c <tcp_receive+0x890>)
 800a078:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a07a:	4b3c      	ldr	r3, [pc, #240]	; (800a16c <tcp_receive+0x890>)
 800a07c:	881b      	ldrh	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	4b38      	ldr	r3, [pc, #224]	; (800a164 <tcp_receive+0x888>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	441a      	add	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a08e:	440b      	add	r3, r1
 800a090:	429a      	cmp	r2, r3
 800a092:	d006      	beq.n	800a0a2 <tcp_receive+0x7c6>
 800a094:	4b36      	ldr	r3, [pc, #216]	; (800a170 <tcp_receive+0x894>)
 800a096:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a09a:	4936      	ldr	r1, [pc, #216]	; (800a174 <tcp_receive+0x898>)
 800a09c:	4836      	ldr	r0, [pc, #216]	; (800a178 <tcp_receive+0x89c>)
 800a09e:	f007 fbff 	bl	80118a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 80e7 	beq.w	800a27a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a0ac:	4b2e      	ldr	r3, [pc, #184]	; (800a168 <tcp_receive+0x88c>)
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	899b      	ldrh	r3, [r3, #12]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fa fd17 	bl	8004ae8 <lwip_htons>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d010      	beq.n	800a0e8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a0c6:	e00a      	b.n	800a0de <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0cc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7fd fcac 	bl	8007a36 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1f0      	bne.n	800a0c8 <tcp_receive+0x7ec>
 800a0e6:	e0c8      	b.n	800a27a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a0ee:	e052      	b.n	800a196 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	899b      	ldrh	r3, [r3, #12]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fa fcf5 	bl	8004ae8 <lwip_htons>
 800a0fe:	4603      	mov	r3, r0
 800a100:	b2db      	uxtb	r3, r3
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	2b00      	cmp	r3, #0
 800a108:	d03d      	beq.n	800a186 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a10a:	4b17      	ldr	r3, [pc, #92]	; (800a168 <tcp_receive+0x88c>)
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	899b      	ldrh	r3, [r3, #12]
 800a110:	b29b      	uxth	r3, r3
 800a112:	4618      	mov	r0, r3
 800a114:	f7fa fce8 	bl	8004ae8 <lwip_htons>
 800a118:	4603      	mov	r3, r0
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a120:	2b00      	cmp	r3, #0
 800a122:	d130      	bne.n	800a186 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a124:	4b10      	ldr	r3, [pc, #64]	; (800a168 <tcp_receive+0x88c>)
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	899b      	ldrh	r3, [r3, #12]
 800a12a:	b29c      	uxth	r4, r3
 800a12c:	2001      	movs	r0, #1
 800a12e:	f7fa fcdb 	bl	8004ae8 <lwip_htons>
 800a132:	4603      	mov	r3, r0
 800a134:	461a      	mov	r2, r3
 800a136:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <tcp_receive+0x88c>)
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	4322      	orrs	r2, r4
 800a13c:	b292      	uxth	r2, r2
 800a13e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a140:	4b09      	ldr	r3, [pc, #36]	; (800a168 <tcp_receive+0x88c>)
 800a142:	891c      	ldrh	r4, [r3, #8]
 800a144:	4b08      	ldr	r3, [pc, #32]	; (800a168 <tcp_receive+0x88c>)
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	899b      	ldrh	r3, [r3, #12]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	4618      	mov	r0, r3
 800a14e:	f7fa fccb 	bl	8004ae8 <lwip_htons>
 800a152:	4603      	mov	r3, r0
 800a154:	b2db      	uxtb	r3, r3
 800a156:	f003 0303 	and.w	r3, r3, #3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00e      	beq.n	800a17c <tcp_receive+0x8a0>
 800a15e:	2301      	movs	r3, #1
 800a160:	e00d      	b.n	800a17e <tcp_receive+0x8a2>
 800a162:	bf00      	nop
 800a164:	200087c4 	.word	0x200087c4
 800a168:	200087a4 	.word	0x200087a4
 800a16c:	200087ce 	.word	0x200087ce
 800a170:	08013964 	.word	0x08013964
 800a174:	08013d0c 	.word	0x08013d0c
 800a178:	080139b0 	.word	0x080139b0
 800a17c:	2300      	movs	r3, #0
 800a17e:	4423      	add	r3, r4
 800a180:	b29a      	uxth	r2, r3
 800a182:	4b98      	ldr	r3, [pc, #608]	; (800a3e4 <tcp_receive+0xb08>)
 800a184:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a188:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a190:	6938      	ldr	r0, [r7, #16]
 800a192:	f7fd fc50 	bl	8007a36 <tcp_seg_free>
            while (next &&
 800a196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00e      	beq.n	800a1ba <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a19c:	4b91      	ldr	r3, [pc, #580]	; (800a3e4 <tcp_receive+0xb08>)
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	4b91      	ldr	r3, [pc, #580]	; (800a3e8 <tcp_receive+0xb0c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	441a      	add	r2, r3
 800a1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1b0:	8909      	ldrh	r1, [r1, #8]
 800a1b2:	440b      	add	r3, r1
 800a1b4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	da9a      	bge.n	800a0f0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d059      	beq.n	800a274 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a1c0:	4b88      	ldr	r3, [pc, #544]	; (800a3e4 <tcp_receive+0xb08>)
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	4b88      	ldr	r3, [pc, #544]	; (800a3e8 <tcp_receive+0xb0c>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	441a      	add	r2, r3
 800a1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dd4d      	ble.n	800a274 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a1d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	4b81      	ldr	r3, [pc, #516]	; (800a3e8 <tcp_receive+0xb0c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	1ad3      	subs	r3, r2, r3
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	4b80      	ldr	r3, [pc, #512]	; (800a3ec <tcp_receive+0xb10>)
 800a1ec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a1ee:	4b7f      	ldr	r3, [pc, #508]	; (800a3ec <tcp_receive+0xb10>)
 800a1f0:	68db      	ldr	r3, [r3, #12]
 800a1f2:	899b      	ldrh	r3, [r3, #12]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fa fc76 	bl	8004ae8 <lwip_htons>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	f003 0302 	and.w	r3, r3, #2
 800a204:	2b00      	cmp	r3, #0
 800a206:	d005      	beq.n	800a214 <tcp_receive+0x938>
                inseg.len -= 1;
 800a208:	4b78      	ldr	r3, [pc, #480]	; (800a3ec <tcp_receive+0xb10>)
 800a20a:	891b      	ldrh	r3, [r3, #8]
 800a20c:	3b01      	subs	r3, #1
 800a20e:	b29a      	uxth	r2, r3
 800a210:	4b76      	ldr	r3, [pc, #472]	; (800a3ec <tcp_receive+0xb10>)
 800a212:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a214:	4b75      	ldr	r3, [pc, #468]	; (800a3ec <tcp_receive+0xb10>)
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	4a74      	ldr	r2, [pc, #464]	; (800a3ec <tcp_receive+0xb10>)
 800a21a:	8912      	ldrh	r2, [r2, #8]
 800a21c:	4611      	mov	r1, r2
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fb fe46 	bl	8005eb0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a224:	4b71      	ldr	r3, [pc, #452]	; (800a3ec <tcp_receive+0xb10>)
 800a226:	891c      	ldrh	r4, [r3, #8]
 800a228:	4b70      	ldr	r3, [pc, #448]	; (800a3ec <tcp_receive+0xb10>)
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	899b      	ldrh	r3, [r3, #12]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	4618      	mov	r0, r3
 800a232:	f7fa fc59 	bl	8004ae8 <lwip_htons>
 800a236:	4603      	mov	r3, r0
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <tcp_receive+0x96a>
 800a242:	2301      	movs	r3, #1
 800a244:	e000      	b.n	800a248 <tcp_receive+0x96c>
 800a246:	2300      	movs	r3, #0
 800a248:	4423      	add	r3, r4
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	4b65      	ldr	r3, [pc, #404]	; (800a3e4 <tcp_receive+0xb08>)
 800a24e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a250:	4b64      	ldr	r3, [pc, #400]	; (800a3e4 <tcp_receive+0xb08>)
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	461a      	mov	r2, r3
 800a256:	4b64      	ldr	r3, [pc, #400]	; (800a3e8 <tcp_receive+0xb0c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	441a      	add	r2, r3
 800a25c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	429a      	cmp	r2, r3
 800a264:	d006      	beq.n	800a274 <tcp_receive+0x998>
 800a266:	4b62      	ldr	r3, [pc, #392]	; (800a3f0 <tcp_receive+0xb14>)
 800a268:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a26c:	4961      	ldr	r1, [pc, #388]	; (800a3f4 <tcp_receive+0xb18>)
 800a26e:	4862      	ldr	r0, [pc, #392]	; (800a3f8 <tcp_receive+0xb1c>)
 800a270:	f007 fb16 	bl	80118a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a278:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a27a:	4b5a      	ldr	r3, [pc, #360]	; (800a3e4 <tcp_receive+0xb08>)
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	4b59      	ldr	r3, [pc, #356]	; (800a3e8 <tcp_receive+0xb0c>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	441a      	add	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a28e:	4b55      	ldr	r3, [pc, #340]	; (800a3e4 <tcp_receive+0xb08>)
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	429a      	cmp	r2, r3
 800a294:	d206      	bcs.n	800a2a4 <tcp_receive+0x9c8>
 800a296:	4b56      	ldr	r3, [pc, #344]	; (800a3f0 <tcp_receive+0xb14>)
 800a298:	f240 6207 	movw	r2, #1543	; 0x607
 800a29c:	4957      	ldr	r1, [pc, #348]	; (800a3fc <tcp_receive+0xb20>)
 800a29e:	4856      	ldr	r0, [pc, #344]	; (800a3f8 <tcp_receive+0xb1c>)
 800a2a0:	f007 fafe 	bl	80118a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a2a8:	4b4e      	ldr	r3, [pc, #312]	; (800a3e4 <tcp_receive+0xb08>)
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7fc fe99 	bl	8006fec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a2ba:	4b4c      	ldr	r3, [pc, #304]	; (800a3ec <tcp_receive+0xb10>)
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	891b      	ldrh	r3, [r3, #8]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d006      	beq.n	800a2d2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a2c4:	4b49      	ldr	r3, [pc, #292]	; (800a3ec <tcp_receive+0xb10>)
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	4a4d      	ldr	r2, [pc, #308]	; (800a400 <tcp_receive+0xb24>)
 800a2ca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a2cc:	4b47      	ldr	r3, [pc, #284]	; (800a3ec <tcp_receive+0xb10>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a2d2:	4b46      	ldr	r3, [pc, #280]	; (800a3ec <tcp_receive+0xb10>)
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	899b      	ldrh	r3, [r3, #12]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fa fc04 	bl	8004ae8 <lwip_htons>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 80b8 	beq.w	800a45e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a2ee:	4b45      	ldr	r3, [pc, #276]	; (800a404 <tcp_receive+0xb28>)
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	f043 0320 	orr.w	r3, r3, #32
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	4b42      	ldr	r3, [pc, #264]	; (800a404 <tcp_receive+0xb28>)
 800a2fa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a2fc:	e0af      	b.n	800a45e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a302:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	4a36      	ldr	r2, [pc, #216]	; (800a3e8 <tcp_receive+0xb0c>)
 800a30e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	891b      	ldrh	r3, [r3, #8]
 800a314:	461c      	mov	r4, r3
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	899b      	ldrh	r3, [r3, #12]
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fa fbe2 	bl	8004ae8 <lwip_htons>
 800a324:	4603      	mov	r3, r0
 800a326:	b2db      	uxtb	r3, r3
 800a328:	f003 0303 	and.w	r3, r3, #3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d001      	beq.n	800a334 <tcp_receive+0xa58>
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <tcp_receive+0xa5a>
 800a334:	2300      	movs	r3, #0
 800a336:	191a      	adds	r2, r3, r4
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	441a      	add	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a346:	461c      	mov	r4, r3
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	891b      	ldrh	r3, [r3, #8]
 800a34c:	461d      	mov	r5, r3
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	899b      	ldrh	r3, [r3, #12]
 800a354:	b29b      	uxth	r3, r3
 800a356:	4618      	mov	r0, r3
 800a358:	f7fa fbc6 	bl	8004ae8 <lwip_htons>
 800a35c:	4603      	mov	r3, r0
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	f003 0303 	and.w	r3, r3, #3
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <tcp_receive+0xa90>
 800a368:	2301      	movs	r3, #1
 800a36a:	e000      	b.n	800a36e <tcp_receive+0xa92>
 800a36c:	2300      	movs	r3, #0
 800a36e:	442b      	add	r3, r5
 800a370:	429c      	cmp	r4, r3
 800a372:	d206      	bcs.n	800a382 <tcp_receive+0xaa6>
 800a374:	4b1e      	ldr	r3, [pc, #120]	; (800a3f0 <tcp_receive+0xb14>)
 800a376:	f240 622b 	movw	r2, #1579	; 0x62b
 800a37a:	4923      	ldr	r1, [pc, #140]	; (800a408 <tcp_receive+0xb2c>)
 800a37c:	481e      	ldr	r0, [pc, #120]	; (800a3f8 <tcp_receive+0xb1c>)
 800a37e:	f007 fa8f 	bl	80118a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	891b      	ldrh	r3, [r3, #8]
 800a386:	461c      	mov	r4, r3
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	899b      	ldrh	r3, [r3, #12]
 800a38e:	b29b      	uxth	r3, r3
 800a390:	4618      	mov	r0, r3
 800a392:	f7fa fba9 	bl	8004ae8 <lwip_htons>
 800a396:	4603      	mov	r3, r0
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d001      	beq.n	800a3a6 <tcp_receive+0xaca>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e000      	b.n	800a3a8 <tcp_receive+0xacc>
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	1919      	adds	r1, r3, r4
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a3ae:	b28b      	uxth	r3, r1
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f7fc fe17 	bl	8006fec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	891b      	ldrh	r3, [r3, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d028      	beq.n	800a41a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800a3c8:	4b0d      	ldr	r3, [pc, #52]	; (800a400 <tcp_receive+0xb24>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01d      	beq.n	800a40c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800a3d0:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <tcp_receive+0xb24>)
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4619      	mov	r1, r3
 800a3da:	4610      	mov	r0, r2
 800a3dc:	f7fb ffb0 	bl	8006340 <pbuf_cat>
 800a3e0:	e018      	b.n	800a414 <tcp_receive+0xb38>
 800a3e2:	bf00      	nop
 800a3e4:	200087ce 	.word	0x200087ce
 800a3e8:	200087c4 	.word	0x200087c4
 800a3ec:	200087a4 	.word	0x200087a4
 800a3f0:	08013964 	.word	0x08013964
 800a3f4:	08013d44 	.word	0x08013d44
 800a3f8:	080139b0 	.word	0x080139b0
 800a3fc:	08013d80 	.word	0x08013d80
 800a400:	200087d4 	.word	0x200087d4
 800a404:	200087d1 	.word	0x200087d1
 800a408:	08013da0 	.word	0x08013da0
            } else {
              recv_data = cseg->p;
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	4a70      	ldr	r2, [pc, #448]	; (800a5d4 <tcp_receive+0xcf8>)
 800a412:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2200      	movs	r2, #0
 800a418:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	899b      	ldrh	r3, [r3, #12]
 800a420:	b29b      	uxth	r3, r3
 800a422:	4618      	mov	r0, r3
 800a424:	f7fa fb60 	bl	8004ae8 <lwip_htons>
 800a428:	4603      	mov	r3, r0
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00d      	beq.n	800a450 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800a434:	4b68      	ldr	r3, [pc, #416]	; (800a5d8 <tcp_receive+0xcfc>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	f043 0320 	orr.w	r3, r3, #32
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	4b66      	ldr	r3, [pc, #408]	; (800a5d8 <tcp_receive+0xcfc>)
 800a440:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	7d1b      	ldrb	r3, [r3, #20]
 800a446:	2b04      	cmp	r3, #4
 800a448:	d102      	bne.n	800a450 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2207      	movs	r2, #7
 800a44e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800a458:	68b8      	ldr	r0, [r7, #8]
 800a45a:	f7fd faec 	bl	8007a36 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a462:	2b00      	cmp	r3, #0
 800a464:	d008      	beq.n	800a478 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	685a      	ldr	r2, [r3, #4]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800a472:	429a      	cmp	r2, r3
 800a474:	f43f af43 	beq.w	800a2fe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	8b5b      	ldrh	r3, [r3, #26]
 800a47c:	f003 0301 	and.w	r3, r3, #1
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00e      	beq.n	800a4a2 <tcp_receive+0xbc6>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	8b5b      	ldrh	r3, [r3, #26]
 800a488:	f023 0301 	bic.w	r3, r3, #1
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	835a      	strh	r2, [r3, #26]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	8b5b      	ldrh	r3, [r3, #26]
 800a496:	f043 0302 	orr.w	r3, r3, #2
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a4a0:	e188      	b.n	800a7b4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	8b5b      	ldrh	r3, [r3, #26]
 800a4a6:	f043 0301 	orr.w	r3, r3, #1
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800a4b0:	e180      	b.n	800a7b4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d106      	bne.n	800a4c8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a4ba:	4848      	ldr	r0, [pc, #288]	; (800a5dc <tcp_receive+0xd00>)
 800a4bc:	f7fd faf2 	bl	8007aa4 <tcp_seg_copy>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	675a      	str	r2, [r3, #116]	; 0x74
 800a4c6:	e16d      	b.n	800a7a4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4d2:	e157      	b.n	800a784 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	685a      	ldr	r2, [r3, #4]
 800a4da:	4b41      	ldr	r3, [pc, #260]	; (800a5e0 <tcp_receive+0xd04>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d11d      	bne.n	800a51e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800a4e2:	4b3e      	ldr	r3, [pc, #248]	; (800a5dc <tcp_receive+0xd00>)
 800a4e4:	891a      	ldrh	r2, [r3, #8]
 800a4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e8:	891b      	ldrh	r3, [r3, #8]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	f240 814f 	bls.w	800a78e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a4f0:	483a      	ldr	r0, [pc, #232]	; (800a5dc <tcp_receive+0xd00>)
 800a4f2:	f7fd fad7 	bl	8007aa4 <tcp_seg_copy>
 800a4f6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f000 8149 	beq.w	800a792 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800a500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a502:	2b00      	cmp	r3, #0
 800a504:	d003      	beq.n	800a50e <tcp_receive+0xc32>
                    prev->next = cseg;
 800a506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	e002      	b.n	800a514 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800a514:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a516:	6978      	ldr	r0, [r7, #20]
 800a518:	f7ff f8dc 	bl	80096d4 <tcp_oos_insert_segment>
                }
                break;
 800a51c:	e139      	b.n	800a792 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800a51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a520:	2b00      	cmp	r3, #0
 800a522:	d117      	bne.n	800a554 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a524:	4b2e      	ldr	r3, [pc, #184]	; (800a5e0 <tcp_receive+0xd04>)
 800a526:	681a      	ldr	r2, [r3, #0]
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	1ad3      	subs	r3, r2, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	da57      	bge.n	800a5e4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a534:	4829      	ldr	r0, [pc, #164]	; (800a5dc <tcp_receive+0xd00>)
 800a536:	f7fd fab5 	bl	8007aa4 <tcp_seg_copy>
 800a53a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 8129 	beq.w	800a796 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	69ba      	ldr	r2, [r7, #24]
 800a548:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a54a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a54c:	69b8      	ldr	r0, [r7, #24]
 800a54e:	f7ff f8c1 	bl	80096d4 <tcp_oos_insert_segment>
                  }
                  break;
 800a552:	e120      	b.n	800a796 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a554:	4b22      	ldr	r3, [pc, #136]	; (800a5e0 <tcp_receive+0xd04>)
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	3b01      	subs	r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	db3e      	blt.n	800a5e4 <tcp_receive+0xd08>
 800a566:	4b1e      	ldr	r3, [pc, #120]	; (800a5e0 <tcp_receive+0xd04>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	3301      	adds	r3, #1
 800a574:	2b00      	cmp	r3, #0
 800a576:	dc35      	bgt.n	800a5e4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a578:	4818      	ldr	r0, [pc, #96]	; (800a5dc <tcp_receive+0xd00>)
 800a57a:	f7fd fa93 	bl	8007aa4 <tcp_seg_copy>
 800a57e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 8109 	beq.w	800a79a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a590:	8912      	ldrh	r2, [r2, #8]
 800a592:	441a      	add	r2, r3
 800a594:	4b12      	ldr	r3, [pc, #72]	; (800a5e0 <tcp_receive+0xd04>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	dd12      	ble.n	800a5c4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a59e:	4b10      	ldr	r3, [pc, #64]	; (800a5e0 <tcp_receive+0xd04>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	b29b      	uxth	r3, r3
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a5b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ba:	891b      	ldrh	r3, [r3, #8]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4610      	mov	r0, r2
 800a5c0:	f7fb fc76 	bl	8005eb0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800a5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a5ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5cc:	69f8      	ldr	r0, [r7, #28]
 800a5ce:	f7ff f881 	bl	80096d4 <tcp_oos_insert_segment>
                  }
                  break;
 800a5d2:	e0e2      	b.n	800a79a <tcp_receive+0xebe>
 800a5d4:	200087d4 	.word	0x200087d4
 800a5d8:	200087d1 	.word	0x200087d1
 800a5dc:	200087a4 	.word	0x200087a4
 800a5e0:	200087c4 	.word	0x200087c4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f040 80c6 	bne.w	800a77e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a5f2:	4b80      	ldr	r3, [pc, #512]	; (800a7f4 <tcp_receive+0xf18>)
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5f8:	68db      	ldr	r3, [r3, #12]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f340 80bd 	ble.w	800a77e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	899b      	ldrh	r3, [r3, #12]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fa fa6b 	bl	8004ae8 <lwip_htons>
 800a612:	4603      	mov	r3, r0
 800a614:	b2db      	uxtb	r3, r3
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f040 80bf 	bne.w	800a79e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800a620:	4875      	ldr	r0, [pc, #468]	; (800a7f8 <tcp_receive+0xf1c>)
 800a622:	f7fd fa3f 	bl	8007aa4 <tcp_seg_copy>
 800a626:	4602      	mov	r2, r0
 800a628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 80b6 	beq.w	800a7a2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a63e:	8912      	ldrh	r2, [r2, #8]
 800a640:	441a      	add	r2, r3
 800a642:	4b6c      	ldr	r3, [pc, #432]	; (800a7f4 <tcp_receive+0xf18>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	1ad3      	subs	r3, r2, r3
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dd12      	ble.n	800a672 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a64c:	4b69      	ldr	r3, [pc, #420]	; (800a7f4 <tcp_receive+0xf18>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	b29a      	uxth	r2, r3
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	b29a      	uxth	r2, r3
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	685a      	ldr	r2, [r3, #4]
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	891b      	ldrh	r3, [r3, #8]
 800a66a:	4619      	mov	r1, r3
 800a66c:	4610      	mov	r0, r2
 800a66e:	f7fb fc1f 	bl	8005eb0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a672:	4b62      	ldr	r3, [pc, #392]	; (800a7fc <tcp_receive+0xf20>)
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	4b5e      	ldr	r3, [pc, #376]	; (800a7f4 <tcp_receive+0xf18>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	441a      	add	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a686:	440b      	add	r3, r1
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f340 8089 	ble.w	800a7a2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	899b      	ldrh	r3, [r3, #12]
 800a698:	b29b      	uxth	r3, r3
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fa fa24 	bl	8004ae8 <lwip_htons>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d022      	beq.n	800a6f2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	899b      	ldrh	r3, [r3, #12]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	b21b      	sxth	r3, r3
 800a6b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6bc:	b21c      	sxth	r4, r3
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	899b      	ldrh	r3, [r3, #12]
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fa fa0d 	bl	8004ae8 <lwip_htons>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7fa fa04 	bl	8004ae8 <lwip_htons>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	b21b      	sxth	r3, r3
 800a6e4:	4323      	orrs	r3, r4
 800a6e6:	b21a      	sxth	r2, r3
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	b292      	uxth	r2, r2
 800a6f0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fc:	4413      	add	r3, r2
 800a6fe:	b299      	uxth	r1, r3
 800a700:	4b3c      	ldr	r3, [pc, #240]	; (800a7f4 <tcp_receive+0xf18>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	b29a      	uxth	r2, r3
 800a706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	1a8a      	subs	r2, r1, r2
 800a70c:	b292      	uxth	r2, r2
 800a70e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	891b      	ldrh	r3, [r3, #8]
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f7fb fbc6 	bl	8005eb0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	891c      	ldrh	r4, [r3, #8]
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	899b      	ldrh	r3, [r3, #12]
 800a732:	b29b      	uxth	r3, r3
 800a734:	4618      	mov	r0, r3
 800a736:	f7fa f9d7 	bl	8004ae8 <lwip_htons>
 800a73a:	4603      	mov	r3, r0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	2b00      	cmp	r3, #0
 800a744:	d001      	beq.n	800a74a <tcp_receive+0xe6e>
 800a746:	2301      	movs	r3, #1
 800a748:	e000      	b.n	800a74c <tcp_receive+0xe70>
 800a74a:	2300      	movs	r3, #0
 800a74c:	4423      	add	r3, r4
 800a74e:	b29a      	uxth	r2, r3
 800a750:	4b2a      	ldr	r3, [pc, #168]	; (800a7fc <tcp_receive+0xf20>)
 800a752:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a754:	4b29      	ldr	r3, [pc, #164]	; (800a7fc <tcp_receive+0xf20>)
 800a756:	881b      	ldrh	r3, [r3, #0]
 800a758:	461a      	mov	r2, r3
 800a75a:	4b26      	ldr	r3, [pc, #152]	; (800a7f4 <tcp_receive+0xf18>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	441a      	add	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	6879      	ldr	r1, [r7, #4]
 800a766:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a768:	440b      	add	r3, r1
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d019      	beq.n	800a7a2 <tcp_receive+0xec6>
 800a76e:	4b24      	ldr	r3, [pc, #144]	; (800a800 <tcp_receive+0xf24>)
 800a770:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a774:	4923      	ldr	r1, [pc, #140]	; (800a804 <tcp_receive+0xf28>)
 800a776:	4824      	ldr	r0, [pc, #144]	; (800a808 <tcp_receive+0xf2c>)
 800a778:	f007 f892 	bl	80118a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800a77c:	e011      	b.n	800a7a2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	63bb      	str	r3, [r7, #56]	; 0x38
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	2b00      	cmp	r3, #0
 800a788:	f47f aea4 	bne.w	800a4d4 <tcp_receive+0xbf8>
 800a78c:	e00a      	b.n	800a7a4 <tcp_receive+0xec8>
                break;
 800a78e:	bf00      	nop
 800a790:	e008      	b.n	800a7a4 <tcp_receive+0xec8>
                break;
 800a792:	bf00      	nop
 800a794:	e006      	b.n	800a7a4 <tcp_receive+0xec8>
                  break;
 800a796:	bf00      	nop
 800a798:	e004      	b.n	800a7a4 <tcp_receive+0xec8>
                  break;
 800a79a:	bf00      	nop
 800a79c:	e002      	b.n	800a7a4 <tcp_receive+0xec8>
                  break;
 800a79e:	bf00      	nop
 800a7a0:	e000      	b.n	800a7a4 <tcp_receive+0xec8>
                break;
 800a7a2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f001 fe8b 	bl	800c4c0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800a7aa:	e003      	b.n	800a7b4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f001 fe87 	bl	800c4c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a7b2:	e01a      	b.n	800a7ea <tcp_receive+0xf0e>
 800a7b4:	e019      	b.n	800a7ea <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a7b6:	4b0f      	ldr	r3, [pc, #60]	; (800a7f4 <tcp_receive+0xf18>)
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	1ad3      	subs	r3, r2, r3
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	db0a      	blt.n	800a7da <tcp_receive+0xefe>
 800a7c4:	4b0b      	ldr	r3, [pc, #44]	; (800a7f4 <tcp_receive+0xf18>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	6879      	ldr	r1, [r7, #4]
 800a7ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a7d0:	440b      	add	r3, r1
 800a7d2:	1ad3      	subs	r3, r2, r3
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	dd07      	ble.n	800a7ea <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	8b5b      	ldrh	r3, [r3, #26]
 800a7de:	f043 0302 	orr.w	r3, r3, #2
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800a7e8:	e7ff      	b.n	800a7ea <tcp_receive+0xf0e>
 800a7ea:	bf00      	nop
 800a7ec:	3750      	adds	r7, #80	; 0x50
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	200087c4 	.word	0x200087c4
 800a7f8:	200087a4 	.word	0x200087a4
 800a7fc:	200087ce 	.word	0x200087ce
 800a800:	08013964 	.word	0x08013964
 800a804:	08013d0c 	.word	0x08013d0c
 800a808:	080139b0 	.word	0x080139b0

0800a80c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800a812:	4b15      	ldr	r3, [pc, #84]	; (800a868 <tcp_get_next_optbyte+0x5c>)
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	b291      	uxth	r1, r2
 800a81a:	4a13      	ldr	r2, [pc, #76]	; (800a868 <tcp_get_next_optbyte+0x5c>)
 800a81c:	8011      	strh	r1, [r2, #0]
 800a81e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800a820:	4b12      	ldr	r3, [pc, #72]	; (800a86c <tcp_get_next_optbyte+0x60>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d004      	beq.n	800a832 <tcp_get_next_optbyte+0x26>
 800a828:	4b11      	ldr	r3, [pc, #68]	; (800a870 <tcp_get_next_optbyte+0x64>)
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	88fa      	ldrh	r2, [r7, #6]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d208      	bcs.n	800a844 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800a832:	4b10      	ldr	r3, [pc, #64]	; (800a874 <tcp_get_next_optbyte+0x68>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3314      	adds	r3, #20
 800a838:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800a83a:	88fb      	ldrh	r3, [r7, #6]
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	4413      	add	r3, r2
 800a840:	781b      	ldrb	r3, [r3, #0]
 800a842:	e00b      	b.n	800a85c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800a844:	88fb      	ldrh	r3, [r7, #6]
 800a846:	b2da      	uxtb	r2, r3
 800a848:	4b09      	ldr	r3, [pc, #36]	; (800a870 <tcp_get_next_optbyte+0x64>)
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800a852:	4b06      	ldr	r3, [pc, #24]	; (800a86c <tcp_get_next_optbyte+0x60>)
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	797b      	ldrb	r3, [r7, #5]
 800a858:	4413      	add	r3, r2
 800a85a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	200087c0 	.word	0x200087c0
 800a86c:	200087bc 	.word	0x200087bc
 800a870:	200087ba 	.word	0x200087ba
 800a874:	200087b4 	.word	0x200087b4

0800a878 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d106      	bne.n	800a894 <tcp_parseopt+0x1c>
 800a886:	4b32      	ldr	r3, [pc, #200]	; (800a950 <tcp_parseopt+0xd8>)
 800a888:	f240 727d 	movw	r2, #1917	; 0x77d
 800a88c:	4931      	ldr	r1, [pc, #196]	; (800a954 <tcp_parseopt+0xdc>)
 800a88e:	4832      	ldr	r0, [pc, #200]	; (800a958 <tcp_parseopt+0xe0>)
 800a890:	f007 f806 	bl	80118a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800a894:	4b31      	ldr	r3, [pc, #196]	; (800a95c <tcp_parseopt+0xe4>)
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d055      	beq.n	800a948 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a89c:	4b30      	ldr	r3, [pc, #192]	; (800a960 <tcp_parseopt+0xe8>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	801a      	strh	r2, [r3, #0]
 800a8a2:	e045      	b.n	800a930 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800a8a4:	f7ff ffb2 	bl	800a80c <tcp_get_next_optbyte>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d006      	beq.n	800a8c0 <tcp_parseopt+0x48>
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	dc2b      	bgt.n	800a90e <tcp_parseopt+0x96>
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d041      	beq.n	800a93e <tcp_parseopt+0xc6>
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d127      	bne.n	800a90e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800a8be:	e037      	b.n	800a930 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800a8c0:	f7ff ffa4 	bl	800a80c <tcp_get_next_optbyte>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b04      	cmp	r3, #4
 800a8c8:	d13b      	bne.n	800a942 <tcp_parseopt+0xca>
 800a8ca:	4b25      	ldr	r3, [pc, #148]	; (800a960 <tcp_parseopt+0xe8>)
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	4a22      	ldr	r2, [pc, #136]	; (800a95c <tcp_parseopt+0xe4>)
 800a8d2:	8812      	ldrh	r2, [r2, #0]
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	da34      	bge.n	800a942 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800a8d8:	f7ff ff98 	bl	800a80c <tcp_get_next_optbyte>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	021b      	lsls	r3, r3, #8
 800a8e2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800a8e4:	f7ff ff92 	bl	800a80c <tcp_get_next_optbyte>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	89bb      	ldrh	r3, [r7, #12]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800a8f2:	89bb      	ldrh	r3, [r7, #12]
 800a8f4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a8f8:	d804      	bhi.n	800a904 <tcp_parseopt+0x8c>
 800a8fa:	89bb      	ldrh	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <tcp_parseopt+0x8c>
 800a900:	89ba      	ldrh	r2, [r7, #12]
 800a902:	e001      	b.n	800a908 <tcp_parseopt+0x90>
 800a904:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800a90c:	e010      	b.n	800a930 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800a90e:	f7ff ff7d 	bl	800a80c <tcp_get_next_optbyte>
 800a912:	4603      	mov	r3, r0
 800a914:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800a916:	7afb      	ldrb	r3, [r7, #11]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d914      	bls.n	800a946 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800a91c:	7afb      	ldrb	r3, [r7, #11]
 800a91e:	b29a      	uxth	r2, r3
 800a920:	4b0f      	ldr	r3, [pc, #60]	; (800a960 <tcp_parseopt+0xe8>)
 800a922:	881b      	ldrh	r3, [r3, #0]
 800a924:	4413      	add	r3, r2
 800a926:	b29b      	uxth	r3, r3
 800a928:	3b02      	subs	r3, #2
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	4b0c      	ldr	r3, [pc, #48]	; (800a960 <tcp_parseopt+0xe8>)
 800a92e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800a930:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <tcp_parseopt+0xe8>)
 800a932:	881a      	ldrh	r2, [r3, #0]
 800a934:	4b09      	ldr	r3, [pc, #36]	; (800a95c <tcp_parseopt+0xe4>)
 800a936:	881b      	ldrh	r3, [r3, #0]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d3b3      	bcc.n	800a8a4 <tcp_parseopt+0x2c>
 800a93c:	e004      	b.n	800a948 <tcp_parseopt+0xd0>
          return;
 800a93e:	bf00      	nop
 800a940:	e002      	b.n	800a948 <tcp_parseopt+0xd0>
            return;
 800a942:	bf00      	nop
 800a944:	e000      	b.n	800a948 <tcp_parseopt+0xd0>
            return;
 800a946:	bf00      	nop
      }
    }
  }
}
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	08013964 	.word	0x08013964
 800a954:	08013dc8 	.word	0x08013dc8
 800a958:	080139b0 	.word	0x080139b0
 800a95c:	200087b8 	.word	0x200087b8
 800a960:	200087c0 	.word	0x200087c0

0800a964 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800a964:	b480      	push	{r7}
 800a966:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800a968:	4b05      	ldr	r3, [pc, #20]	; (800a980 <tcp_trigger_input_pcb_close+0x1c>)
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	f043 0310 	orr.w	r3, r3, #16
 800a970:	b2da      	uxtb	r2, r3
 800a972:	4b03      	ldr	r3, [pc, #12]	; (800a980 <tcp_trigger_input_pcb_close+0x1c>)
 800a974:	701a      	strb	r2, [r3, #0]
}
 800a976:	bf00      	nop
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	200087d1 	.word	0x200087d1

0800a984 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	60f8      	str	r0, [r7, #12]
 800a98c:	60b9      	str	r1, [r7, #8]
 800a98e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <tcp_route+0x28>
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	7a1b      	ldrb	r3, [r3, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d006      	beq.n	800a9ac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	7a1b      	ldrb	r3, [r3, #8]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fb f8aa 	bl	8005afc <netif_get_by_index>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	e003      	b.n	800a9b4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f005 fc6d 	bl	801028c <ip4_route>
 800a9b2:	4603      	mov	r3, r0
  }
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a9bc:	b590      	push	{r4, r7, lr}
 800a9be:	b087      	sub	sp, #28
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	603b      	str	r3, [r7, #0]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d105      	bne.n	800a9de <tcp_create_segment+0x22>
 800a9d2:	4b44      	ldr	r3, [pc, #272]	; (800aae4 <tcp_create_segment+0x128>)
 800a9d4:	22a3      	movs	r2, #163	; 0xa3
 800a9d6:	4944      	ldr	r1, [pc, #272]	; (800aae8 <tcp_create_segment+0x12c>)
 800a9d8:	4844      	ldr	r0, [pc, #272]	; (800aaec <tcp_create_segment+0x130>)
 800a9da:	f006 ff61 	bl	80118a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d105      	bne.n	800a9f0 <tcp_create_segment+0x34>
 800a9e4:	4b3f      	ldr	r3, [pc, #252]	; (800aae4 <tcp_create_segment+0x128>)
 800a9e6:	22a4      	movs	r2, #164	; 0xa4
 800a9e8:	4941      	ldr	r1, [pc, #260]	; (800aaf0 <tcp_create_segment+0x134>)
 800a9ea:	4840      	ldr	r0, [pc, #256]	; (800aaec <tcp_create_segment+0x130>)
 800a9ec:	f006 ff58 	bl	80118a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a9f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a9fe:	2003      	movs	r0, #3
 800aa00:	f7fa fcea 	bl	80053d8 <memp_malloc>
 800aa04:	6138      	str	r0, [r7, #16]
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d104      	bne.n	800aa16 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800aa0c:	68b8      	ldr	r0, [r7, #8]
 800aa0e:	f7fb fbd5 	bl	80061bc <pbuf_free>
    return NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	e061      	b.n	800aada <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800aa1c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	2200      	movs	r2, #0
 800aa22:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	891a      	ldrh	r2, [r3, #8]
 800aa2e:	7dfb      	ldrb	r3, [r7, #23]
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d205      	bcs.n	800aa42 <tcp_create_segment+0x86>
 800aa36:	4b2b      	ldr	r3, [pc, #172]	; (800aae4 <tcp_create_segment+0x128>)
 800aa38:	22b0      	movs	r2, #176	; 0xb0
 800aa3a:	492e      	ldr	r1, [pc, #184]	; (800aaf4 <tcp_create_segment+0x138>)
 800aa3c:	482b      	ldr	r0, [pc, #172]	; (800aaec <tcp_create_segment+0x130>)
 800aa3e:	f006 ff2f 	bl	80118a0 <iprintf>
  seg->len = p->tot_len - optlen;
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	891a      	ldrh	r2, [r3, #8]
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800aa52:	2114      	movs	r1, #20
 800aa54:	68b8      	ldr	r0, [r7, #8]
 800aa56:	f7fb fb1b 	bl	8006090 <pbuf_add_header>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d004      	beq.n	800aa6a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800aa60:	6938      	ldr	r0, [r7, #16]
 800aa62:	f7fc ffe8 	bl	8007a36 <tcp_seg_free>
    return NULL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	e037      	b.n	800aada <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	8ada      	ldrh	r2, [r3, #22]
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	68dc      	ldr	r4, [r3, #12]
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	f7fa f833 	bl	8004ae8 <lwip_htons>
 800aa82:	4603      	mov	r3, r0
 800aa84:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	8b1a      	ldrh	r2, [r3, #24]
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	68dc      	ldr	r4, [r3, #12]
 800aa8e:	4610      	mov	r0, r2
 800aa90:	f7fa f82a 	bl	8004ae8 <lwip_htons>
 800aa94:	4603      	mov	r3, r0
 800aa96:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	68dc      	ldr	r4, [r3, #12]
 800aa9c:	6838      	ldr	r0, [r7, #0]
 800aa9e:	f7fa f838 	bl	8004b12 <lwip_htonl>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	089b      	lsrs	r3, r3, #2
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	3305      	adds	r3, #5
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	031b      	lsls	r3, r3, #12
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	4313      	orrs	r3, r2
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	68dc      	ldr	r4, [r3, #12]
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7fa f810 	bl	8004ae8 <lwip_htons>
 800aac8:	4603      	mov	r3, r0
 800aaca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	2200      	movs	r2, #0
 800aad2:	749a      	strb	r2, [r3, #18]
 800aad4:	2200      	movs	r2, #0
 800aad6:	74da      	strb	r2, [r3, #19]
  return seg;
 800aad8:	693b      	ldr	r3, [r7, #16]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	371c      	adds	r7, #28
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd90      	pop	{r4, r7, pc}
 800aae2:	bf00      	nop
 800aae4:	08013de4 	.word	0x08013de4
 800aae8:	08013e18 	.word	0x08013e18
 800aaec:	08013e38 	.word	0x08013e38
 800aaf0:	08013e60 	.word	0x08013e60
 800aaf4:	08013e84 	.word	0x08013e84

0800aaf8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	607b      	str	r3, [r7, #4]
 800ab00:	4603      	mov	r3, r0
 800ab02:	73fb      	strb	r3, [r7, #15]
 800ab04:	460b      	mov	r3, r1
 800ab06:	81bb      	strh	r3, [r7, #12]
 800ab08:	4613      	mov	r3, r2
 800ab0a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800ab0c:	89bb      	ldrh	r3, [r7, #12]
 800ab0e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d105      	bne.n	800ab22 <tcp_pbuf_prealloc+0x2a>
 800ab16:	4b30      	ldr	r3, [pc, #192]	; (800abd8 <tcp_pbuf_prealloc+0xe0>)
 800ab18:	22e8      	movs	r2, #232	; 0xe8
 800ab1a:	4930      	ldr	r1, [pc, #192]	; (800abdc <tcp_pbuf_prealloc+0xe4>)
 800ab1c:	4830      	ldr	r0, [pc, #192]	; (800abe0 <tcp_pbuf_prealloc+0xe8>)
 800ab1e:	f006 febf 	bl	80118a0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d105      	bne.n	800ab34 <tcp_pbuf_prealloc+0x3c>
 800ab28:	4b2b      	ldr	r3, [pc, #172]	; (800abd8 <tcp_pbuf_prealloc+0xe0>)
 800ab2a:	22e9      	movs	r2, #233	; 0xe9
 800ab2c:	492d      	ldr	r1, [pc, #180]	; (800abe4 <tcp_pbuf_prealloc+0xec>)
 800ab2e:	482c      	ldr	r0, [pc, #176]	; (800abe0 <tcp_pbuf_prealloc+0xe8>)
 800ab30:	f006 feb6 	bl	80118a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800ab34:	89ba      	ldrh	r2, [r7, #12]
 800ab36:	897b      	ldrh	r3, [r7, #10]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d221      	bcs.n	800ab80 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ab3c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ab40:	f003 0302 	and.w	r3, r3, #2
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d111      	bne.n	800ab6c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	8b5b      	ldrh	r3, [r3, #26]
 800ab4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d115      	bne.n	800ab80 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800ab54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d007      	beq.n	800ab6c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d103      	bne.n	800ab6c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d009      	beq.n	800ab80 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ab6c:	89bb      	ldrh	r3, [r7, #12]
 800ab6e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ab72:	f023 0203 	bic.w	r2, r3, #3
 800ab76:	897b      	ldrh	r3, [r7, #10]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	bf28      	it	cs
 800ab7c:	4613      	movcs	r3, r2
 800ab7e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ab80:	8af9      	ldrh	r1, [r7, #22]
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
 800ab84:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fb f833 	bl	8005bf4 <pbuf_alloc>
 800ab8e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d101      	bne.n	800ab9a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	e019      	b.n	800abce <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d006      	beq.n	800abb0 <tcp_pbuf_prealloc+0xb8>
 800aba2:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <tcp_pbuf_prealloc+0xe0>)
 800aba4:	f240 120b 	movw	r2, #267	; 0x10b
 800aba8:	490f      	ldr	r1, [pc, #60]	; (800abe8 <tcp_pbuf_prealloc+0xf0>)
 800abaa:	480d      	ldr	r0, [pc, #52]	; (800abe0 <tcp_pbuf_prealloc+0xe8>)
 800abac:	f006 fe78 	bl	80118a0 <iprintf>
  *oversize = p->len - length;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	895a      	ldrh	r2, [r3, #10]
 800abb4:	89bb      	ldrh	r3, [r7, #12]
 800abb6:	1ad3      	subs	r3, r2, r3
 800abb8:	b29a      	uxth	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	89ba      	ldrh	r2, [r7, #12]
 800abc2:	811a      	strh	r2, [r3, #8]
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	891a      	ldrh	r2, [r3, #8]
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	815a      	strh	r2, [r3, #10]
  return p;
 800abcc:	693b      	ldr	r3, [r7, #16]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	08013de4 	.word	0x08013de4
 800abdc:	08013e9c 	.word	0x08013e9c
 800abe0:	08013e38 	.word	0x08013e38
 800abe4:	08013ec0 	.word	0x08013ec0
 800abe8:	08013ee0 	.word	0x08013ee0

0800abec <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d106      	bne.n	800ac0c <tcp_write_checks+0x20>
 800abfe:	4b33      	ldr	r3, [pc, #204]	; (800accc <tcp_write_checks+0xe0>)
 800ac00:	f240 1233 	movw	r2, #307	; 0x133
 800ac04:	4932      	ldr	r1, [pc, #200]	; (800acd0 <tcp_write_checks+0xe4>)
 800ac06:	4833      	ldr	r0, [pc, #204]	; (800acd4 <tcp_write_checks+0xe8>)
 800ac08:	f006 fe4a 	bl	80118a0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	7d1b      	ldrb	r3, [r3, #20]
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	d00e      	beq.n	800ac32 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800ac18:	2b07      	cmp	r3, #7
 800ac1a:	d00a      	beq.n	800ac32 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d006      	beq.n	800ac32 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ac28:	2b03      	cmp	r3, #3
 800ac2a:	d002      	beq.n	800ac32 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ac2c:	f06f 030a 	mvn.w	r3, #10
 800ac30:	e048      	b.n	800acc4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ac32:	887b      	ldrh	r3, [r7, #2]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <tcp_write_checks+0x50>
    return ERR_OK;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	e043      	b.n	800acc4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ac42:	887a      	ldrh	r2, [r7, #2]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d909      	bls.n	800ac5c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	8b5b      	ldrh	r3, [r3, #26]
 800ac4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac50:	b29a      	uxth	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ac56:	f04f 33ff 	mov.w	r3, #4294967295
 800ac5a:	e033      	b.n	800acc4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac62:	2b08      	cmp	r3, #8
 800ac64:	d909      	bls.n	800ac7a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	8b5b      	ldrh	r3, [r3, #26]
 800ac6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac6e:	b29a      	uxth	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295
 800ac78:	e024      	b.n	800acc4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d00f      	beq.n	800aca4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d11a      	bne.n	800acc2 <tcp_write_checks+0xd6>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d116      	bne.n	800acc2 <tcp_write_checks+0xd6>
 800ac94:	4b0d      	ldr	r3, [pc, #52]	; (800accc <tcp_write_checks+0xe0>)
 800ac96:	f240 1255 	movw	r2, #341	; 0x155
 800ac9a:	490f      	ldr	r1, [pc, #60]	; (800acd8 <tcp_write_checks+0xec>)
 800ac9c:	480d      	ldr	r0, [pc, #52]	; (800acd4 <tcp_write_checks+0xe8>)
 800ac9e:	f006 fdff 	bl	80118a0 <iprintf>
 800aca2:	e00e      	b.n	800acc2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d103      	bne.n	800acb4 <tcp_write_checks+0xc8>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d006      	beq.n	800acc2 <tcp_write_checks+0xd6>
 800acb4:	4b05      	ldr	r3, [pc, #20]	; (800accc <tcp_write_checks+0xe0>)
 800acb6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800acba:	4908      	ldr	r1, [pc, #32]	; (800acdc <tcp_write_checks+0xf0>)
 800acbc:	4805      	ldr	r0, [pc, #20]	; (800acd4 <tcp_write_checks+0xe8>)
 800acbe:	f006 fdef 	bl	80118a0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3708      	adds	r7, #8
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	08013de4 	.word	0x08013de4
 800acd0:	08013ef4 	.word	0x08013ef4
 800acd4:	08013e38 	.word	0x08013e38
 800acd8:	08013f14 	.word	0x08013f14
 800acdc:	08013f50 	.word	0x08013f50

0800ace0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ace0:	b590      	push	{r4, r7, lr}
 800ace2:	b09b      	sub	sp, #108	; 0x6c
 800ace4:	af04      	add	r7, sp, #16
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	4611      	mov	r1, r2
 800acec:	461a      	mov	r2, r3
 800acee:	460b      	mov	r3, r1
 800acf0:	80fb      	strh	r3, [r7, #6]
 800acf2:	4613      	mov	r3, r2
 800acf4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	653b      	str	r3, [r7, #80]	; 0x50
 800acfe:	2300      	movs	r3, #0
 800ad00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad02:	2300      	movs	r3, #0
 800ad04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad06:	2300      	movs	r3, #0
 800ad08:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d109      	bne.n	800ad3c <tcp_write+0x5c>
 800ad28:	4ba4      	ldr	r3, [pc, #656]	; (800afbc <tcp_write+0x2dc>)
 800ad2a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ad2e:	49a4      	ldr	r1, [pc, #656]	; (800afc0 <tcp_write+0x2e0>)
 800ad30:	48a4      	ldr	r0, [pc, #656]	; (800afc4 <tcp_write+0x2e4>)
 800ad32:	f006 fdb5 	bl	80118a0 <iprintf>
 800ad36:	f06f 030f 	mvn.w	r3, #15
 800ad3a:	e32a      	b.n	800b392 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ad42:	085b      	lsrs	r3, r3, #1
 800ad44:	b29a      	uxth	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	bf28      	it	cs
 800ad4e:	4613      	movcs	r3, r2
 800ad50:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800ad52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <tcp_write+0x7e>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ad5c:	e000      	b.n	800ad60 <tcp_write+0x80>
 800ad5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad60:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d109      	bne.n	800ad7c <tcp_write+0x9c>
 800ad68:	4b94      	ldr	r3, [pc, #592]	; (800afbc <tcp_write+0x2dc>)
 800ad6a:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ad6e:	4996      	ldr	r1, [pc, #600]	; (800afc8 <tcp_write+0x2e8>)
 800ad70:	4894      	ldr	r0, [pc, #592]	; (800afc4 <tcp_write+0x2e4>)
 800ad72:	f006 fd95 	bl	80118a0 <iprintf>
 800ad76:	f06f 030f 	mvn.w	r3, #15
 800ad7a:	e30a      	b.n	800b392 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ad7c:	88fb      	ldrh	r3, [r7, #6]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f7ff ff33 	bl	800abec <tcp_write_checks>
 800ad86:	4603      	mov	r3, r0
 800ad88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ad8c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <tcp_write+0xba>
    return err;
 800ad94:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ad98:	e2fb      	b.n	800b392 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ada0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ada4:	2300      	movs	r3, #0
 800ada6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f000 80f6 	beq.w	800afa0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adb8:	653b      	str	r3, [r7, #80]	; 0x50
 800adba:	e002      	b.n	800adc2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800adbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800adc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1f8      	bne.n	800adbc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800adca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adcc:	7a9b      	ldrb	r3, [r3, #10]
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	b29b      	uxth	r3, r3
 800add2:	f003 0304 	and.w	r3, r3, #4
 800add6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800add8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800adda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800addc:	891b      	ldrh	r3, [r3, #8]
 800adde:	4619      	mov	r1, r3
 800ade0:	8c3b      	ldrh	r3, [r7, #32]
 800ade2:	440b      	add	r3, r1
 800ade4:	429a      	cmp	r2, r3
 800ade6:	da06      	bge.n	800adf6 <tcp_write+0x116>
 800ade8:	4b74      	ldr	r3, [pc, #464]	; (800afbc <tcp_write+0x2dc>)
 800adea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800adee:	4977      	ldr	r1, [pc, #476]	; (800afcc <tcp_write+0x2ec>)
 800adf0:	4874      	ldr	r0, [pc, #464]	; (800afc4 <tcp_write+0x2e4>)
 800adf2:	f006 fd55 	bl	80118a0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800adf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adf8:	891a      	ldrh	r2, [r3, #8]
 800adfa:	8c3b      	ldrh	r3, [r7, #32]
 800adfc:	4413      	add	r3, r2
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ae0c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ae0e:	8a7b      	ldrh	r3, [r7, #18]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d026      	beq.n	800ae62 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ae14:	8a7b      	ldrh	r3, [r7, #18]
 800ae16:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d206      	bcs.n	800ae2a <tcp_write+0x14a>
 800ae1c:	4b67      	ldr	r3, [pc, #412]	; (800afbc <tcp_write+0x2dc>)
 800ae1e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ae22:	496b      	ldr	r1, [pc, #428]	; (800afd0 <tcp_write+0x2f0>)
 800ae24:	4867      	ldr	r0, [pc, #412]	; (800afc4 <tcp_write+0x2e4>)
 800ae26:	f006 fd3b 	bl	80118a0 <iprintf>
      seg = last_unsent;
 800ae2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae2c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ae2e:	8a7b      	ldrh	r3, [r7, #18]
 800ae30:	88fa      	ldrh	r2, [r7, #6]
 800ae32:	4293      	cmp	r3, r2
 800ae34:	bf28      	it	cs
 800ae36:	4613      	movcs	r3, r2
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	bf28      	it	cs
 800ae40:	4613      	movcs	r3, r2
 800ae42:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800ae44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800ae50:	8a7a      	ldrh	r2, [r7, #18]
 800ae52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800ae5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ae5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800ae62:	8a7b      	ldrh	r3, [r7, #18]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00b      	beq.n	800ae80 <tcp_write+0x1a0>
 800ae68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae6c:	88fb      	ldrh	r3, [r7, #6]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d006      	beq.n	800ae80 <tcp_write+0x1a0>
 800ae72:	4b52      	ldr	r3, [pc, #328]	; (800afbc <tcp_write+0x2dc>)
 800ae74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae78:	4956      	ldr	r1, [pc, #344]	; (800afd4 <tcp_write+0x2f4>)
 800ae7a:	4852      	ldr	r0, [pc, #328]	; (800afc4 <tcp_write+0x2e4>)
 800ae7c:	f006 fd10 	bl	80118a0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800ae80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ae84:	88fb      	ldrh	r3, [r7, #6]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	f080 8167 	bcs.w	800b15a <tcp_write+0x47a>
 800ae8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 8163 	beq.w	800b15a <tcp_write+0x47a>
 800ae94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae96:	891b      	ldrh	r3, [r3, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 815e 	beq.w	800b15a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800ae9e:	88fa      	ldrh	r2, [r7, #6]
 800aea0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aea4:	1ad2      	subs	r2, r2, r3
 800aea6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	bfa8      	it	ge
 800aeac:	4613      	movge	r3, r2
 800aeae:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800aeb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aeb2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800aeb4:	797b      	ldrb	r3, [r7, #5]
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d027      	beq.n	800af0e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800aebe:	f107 0012 	add.w	r0, r7, #18
 800aec2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800aec4:	8bf9      	ldrh	r1, [r7, #30]
 800aec6:	2301      	movs	r3, #1
 800aec8:	9302      	str	r3, [sp, #8]
 800aeca:	797b      	ldrb	r3, [r7, #5]
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	4603      	mov	r3, r0
 800aed4:	2000      	movs	r0, #0
 800aed6:	f7ff fe0f 	bl	800aaf8 <tcp_pbuf_prealloc>
 800aeda:	6578      	str	r0, [r7, #84]	; 0x54
 800aedc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 8225 	beq.w	800b32e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800aee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aee6:	6858      	ldr	r0, [r3, #4]
 800aee8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	4413      	add	r3, r2
 800aef0:	8bfa      	ldrh	r2, [r7, #30]
 800aef2:	4619      	mov	r1, r3
 800aef4:	f006 fdaf 	bl	8011a56 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800aef8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800aefa:	f7fb f9e7 	bl	80062cc <pbuf_clen>
 800aefe:	4603      	mov	r3, r0
 800af00:	461a      	mov	r2, r3
 800af02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af06:	4413      	add	r3, r2
 800af08:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800af0c:	e041      	b.n	800af92 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800af0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	637b      	str	r3, [r7, #52]	; 0x34
 800af14:	e002      	b.n	800af1c <tcp_write+0x23c>
 800af16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	637b      	str	r3, [r7, #52]	; 0x34
 800af1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1f8      	bne.n	800af16 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800af24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af26:	7b1b      	ldrb	r3, [r3, #12]
 800af28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d115      	bne.n	800af5c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800af30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af36:	8952      	ldrh	r2, [r2, #10]
 800af38:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d10d      	bne.n	800af5c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800af40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af44:	2b00      	cmp	r3, #0
 800af46:	d006      	beq.n	800af56 <tcp_write+0x276>
 800af48:	4b1c      	ldr	r3, [pc, #112]	; (800afbc <tcp_write+0x2dc>)
 800af4a:	f240 2231 	movw	r2, #561	; 0x231
 800af4e:	4922      	ldr	r1, [pc, #136]	; (800afd8 <tcp_write+0x2f8>)
 800af50:	481c      	ldr	r0, [pc, #112]	; (800afc4 <tcp_write+0x2e4>)
 800af52:	f006 fca5 	bl	80118a0 <iprintf>
          extendlen = seglen;
 800af56:	8bfb      	ldrh	r3, [r7, #30]
 800af58:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800af5a:	e01a      	b.n	800af92 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800af5c:	8bfb      	ldrh	r3, [r7, #30]
 800af5e:	2201      	movs	r2, #1
 800af60:	4619      	mov	r1, r3
 800af62:	2000      	movs	r0, #0
 800af64:	f7fa fe46 	bl	8005bf4 <pbuf_alloc>
 800af68:	6578      	str	r0, [r7, #84]	; 0x54
 800af6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f000 81e0 	beq.w	800b332 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800af72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	441a      	add	r2, r3
 800af7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af7c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800af7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800af80:	f7fb f9a4 	bl	80062cc <pbuf_clen>
 800af84:	4603      	mov	r3, r0
 800af86:	461a      	mov	r2, r3
 800af88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800af8c:	4413      	add	r3, r2
 800af8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800af92:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800af96:	8bfb      	ldrh	r3, [r7, #30]
 800af98:	4413      	add	r3, r2
 800af9a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800af9e:	e0dc      	b.n	800b15a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 80d7 	beq.w	800b15a <tcp_write+0x47a>
 800afac:	4b03      	ldr	r3, [pc, #12]	; (800afbc <tcp_write+0x2dc>)
 800afae:	f240 224a 	movw	r2, #586	; 0x24a
 800afb2:	490a      	ldr	r1, [pc, #40]	; (800afdc <tcp_write+0x2fc>)
 800afb4:	4803      	ldr	r0, [pc, #12]	; (800afc4 <tcp_write+0x2e4>)
 800afb6:	f006 fc73 	bl	80118a0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800afba:	e0ce      	b.n	800b15a <tcp_write+0x47a>
 800afbc:	08013de4 	.word	0x08013de4
 800afc0:	08013f84 	.word	0x08013f84
 800afc4:	08013e38 	.word	0x08013e38
 800afc8:	08013f9c 	.word	0x08013f9c
 800afcc:	08013fd0 	.word	0x08013fd0
 800afd0:	08013fe8 	.word	0x08013fe8
 800afd4:	08014008 	.word	0x08014008
 800afd8:	08014028 	.word	0x08014028
 800afdc:	08014054 	.word	0x08014054
    struct pbuf *p;
    u16_t left = len - pos;
 800afe0:	88fa      	ldrh	r2, [r7, #6]
 800afe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800afea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800afee:	b29b      	uxth	r3, r3
 800aff0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800aff6:	8b7a      	ldrh	r2, [r7, #26]
 800aff8:	8bbb      	ldrh	r3, [r7, #28]
 800affa:	4293      	cmp	r3, r2
 800affc:	bf28      	it	cs
 800affe:	4613      	movcs	r3, r2
 800b000:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b002:	797b      	ldrb	r3, [r7, #5]
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d036      	beq.n	800b07a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b00c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b010:	b29a      	uxth	r2, r3
 800b012:	8b3b      	ldrh	r3, [r7, #24]
 800b014:	4413      	add	r3, r2
 800b016:	b299      	uxth	r1, r3
 800b018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	bf0c      	ite	eq
 800b01e:	2301      	moveq	r3, #1
 800b020:	2300      	movne	r3, #0
 800b022:	b2db      	uxtb	r3, r3
 800b024:	f107 0012 	add.w	r0, r7, #18
 800b028:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b02a:	9302      	str	r3, [sp, #8]
 800b02c:	797b      	ldrb	r3, [r7, #5]
 800b02e:	9301      	str	r3, [sp, #4]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	4603      	mov	r3, r0
 800b036:	2036      	movs	r0, #54	; 0x36
 800b038:	f7ff fd5e 	bl	800aaf8 <tcp_pbuf_prealloc>
 800b03c:	6338      	str	r0, [r7, #48]	; 0x30
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 8178 	beq.w	800b336 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	895b      	ldrh	r3, [r3, #10]
 800b04a:	8b3a      	ldrh	r2, [r7, #24]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d906      	bls.n	800b05e <tcp_write+0x37e>
 800b050:	4b8c      	ldr	r3, [pc, #560]	; (800b284 <tcp_write+0x5a4>)
 800b052:	f240 2266 	movw	r2, #614	; 0x266
 800b056:	498c      	ldr	r1, [pc, #560]	; (800b288 <tcp_write+0x5a8>)
 800b058:	488c      	ldr	r0, [pc, #560]	; (800b28c <tcp_write+0x5ac>)
 800b05a:	f006 fc21 	bl	80118a0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b066:	18d0      	adds	r0, r2, r3
 800b068:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	4413      	add	r3, r2
 800b070:	8b3a      	ldrh	r2, [r7, #24]
 800b072:	4619      	mov	r1, r3
 800b074:	f006 fcef 	bl	8011a56 <memcpy>
 800b078:	e02f      	b.n	800b0da <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b07a:	8a7b      	ldrh	r3, [r7, #18]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d006      	beq.n	800b08e <tcp_write+0x3ae>
 800b080:	4b80      	ldr	r3, [pc, #512]	; (800b284 <tcp_write+0x5a4>)
 800b082:	f240 2271 	movw	r2, #625	; 0x271
 800b086:	4982      	ldr	r1, [pc, #520]	; (800b290 <tcp_write+0x5b0>)
 800b088:	4880      	ldr	r0, [pc, #512]	; (800b28c <tcp_write+0x5ac>)
 800b08a:	f006 fc09 	bl	80118a0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b08e:	8b3b      	ldrh	r3, [r7, #24]
 800b090:	2201      	movs	r2, #1
 800b092:	4619      	mov	r1, r3
 800b094:	2036      	movs	r0, #54	; 0x36
 800b096:	f7fa fdad 	bl	8005bf4 <pbuf_alloc>
 800b09a:	6178      	str	r0, [r7, #20]
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	f000 814b 	beq.w	800b33a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b0a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	441a      	add	r2, r3
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b0b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	2036      	movs	r0, #54	; 0x36
 800b0be:	f7fa fd99 	bl	8005bf4 <pbuf_alloc>
 800b0c2:	6338      	str	r0, [r7, #48]	; 0x30
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d103      	bne.n	800b0d2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b0ca:	6978      	ldr	r0, [r7, #20]
 800b0cc:	f7fb f876 	bl	80061bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b0d0:	e136      	b.n	800b340 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b0d2:	6979      	ldr	r1, [r7, #20]
 800b0d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0d6:	f7fb f933 	bl	8006340 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b0da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0dc:	f7fb f8f6 	bl	80062cc <pbuf_clen>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b0ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b0f2:	2b09      	cmp	r3, #9
 800b0f4:	d903      	bls.n	800b0fe <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b0f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0f8:	f7fb f860 	bl	80061bc <pbuf_free>
      goto memerr;
 800b0fc:	e120      	b.n	800b340 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b102:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b106:	441a      	add	r2, r3
 800b108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	4613      	mov	r3, r2
 800b110:	2200      	movs	r2, #0
 800b112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f7ff fc51 	bl	800a9bc <tcp_create_segment>
 800b11a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f000 810d 	beq.w	800b33e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <tcp_write+0x450>
      queue = seg;
 800b12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b12c:	647b      	str	r3, [r7, #68]	; 0x44
 800b12e:	e00c      	b.n	800b14a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b132:	2b00      	cmp	r3, #0
 800b134:	d106      	bne.n	800b144 <tcp_write+0x464>
 800b136:	4b53      	ldr	r3, [pc, #332]	; (800b284 <tcp_write+0x5a4>)
 800b138:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b13c:	4955      	ldr	r1, [pc, #340]	; (800b294 <tcp_write+0x5b4>)
 800b13e:	4853      	ldr	r0, [pc, #332]	; (800b28c <tcp_write+0x5ac>)
 800b140:	f006 fbae 	bl	80118a0 <iprintf>
      prev_seg->next = seg;
 800b144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b146:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b148:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b14e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b152:	8b3b      	ldrh	r3, [r7, #24]
 800b154:	4413      	add	r3, r2
 800b156:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b15a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	429a      	cmp	r2, r3
 800b162:	f4ff af3d 	bcc.w	800afe0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b166:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d02c      	beq.n	800b1c6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b16c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b172:	e01e      	b.n	800b1b2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b176:	891a      	ldrh	r2, [r3, #8]
 800b178:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b17a:	4413      	add	r3, r2
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b180:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d110      	bne.n	800b1ac <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b190:	8952      	ldrh	r2, [r2, #10]
 800b192:	4413      	add	r3, r2
 800b194:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b196:	68b9      	ldr	r1, [r7, #8]
 800b198:	4618      	mov	r0, r3
 800b19a:	f006 fc5c 	bl	8011a56 <memcpy>
        p->len += oversize_used;
 800b19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a0:	895a      	ldrh	r2, [r3, #10]
 800b1a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b1a4:	4413      	add	r3, r2
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1dd      	bne.n	800b174 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ba:	891a      	ldrh	r2, [r3, #8]
 800b1bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b1be:	4413      	add	r3, r2
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1c4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b1c6:	8a7a      	ldrh	r2, [r7, #18]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b1ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d018      	beq.n	800b206 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b1d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d106      	bne.n	800b1e8 <tcp_write+0x508>
 800b1da:	4b2a      	ldr	r3, [pc, #168]	; (800b284 <tcp_write+0x5a4>)
 800b1dc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b1e0:	492d      	ldr	r1, [pc, #180]	; (800b298 <tcp_write+0x5b8>)
 800b1e2:	482a      	ldr	r0, [pc, #168]	; (800b28c <tcp_write+0x5ac>)
 800b1e4:	f006 fb5c 	bl	80118a0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fb f8a6 	bl	8006340 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1f6:	891a      	ldrh	r2, [r3, #8]
 800b1f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1fa:	891b      	ldrh	r3, [r3, #8]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b202:	811a      	strh	r2, [r3, #8]
 800b204:	e037      	b.n	800b276 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b206:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d034      	beq.n	800b276 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d003      	beq.n	800b21a <tcp_write+0x53a>
 800b212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <tcp_write+0x548>
 800b21a:	4b1a      	ldr	r3, [pc, #104]	; (800b284 <tcp_write+0x5a4>)
 800b21c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b220:	491e      	ldr	r1, [pc, #120]	; (800b29c <tcp_write+0x5bc>)
 800b222:	481a      	ldr	r0, [pc, #104]	; (800b28c <tcp_write+0x5ac>)
 800b224:	f006 fb3c 	bl	80118a0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b22e:	e009      	b.n	800b244 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	891a      	ldrh	r2, [r3, #8]
 800b234:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b236:	4413      	add	r3, r2
 800b238:	b29a      	uxth	r2, r3
 800b23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	62bb      	str	r3, [r7, #40]	; 0x28
 800b244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1f1      	bne.n	800b230 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24e:	891a      	ldrh	r2, [r3, #8]
 800b250:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b252:	4413      	add	r3, r2
 800b254:	b29a      	uxth	r2, r3
 800b256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b258:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25c:	895a      	ldrh	r2, [r3, #10]
 800b25e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b260:	4413      	add	r3, r2
 800b262:	b29a      	uxth	r2, r3
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b26a:	891a      	ldrh	r2, [r3, #8]
 800b26c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b26e:	4413      	add	r3, r2
 800b270:	b29a      	uxth	r2, r3
 800b272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b274:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d111      	bne.n	800b2a0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b280:	66da      	str	r2, [r3, #108]	; 0x6c
 800b282:	e010      	b.n	800b2a6 <tcp_write+0x5c6>
 800b284:	08013de4 	.word	0x08013de4
 800b288:	08014084 	.word	0x08014084
 800b28c:	08013e38 	.word	0x08013e38
 800b290:	080140c4 	.word	0x080140c4
 800b294:	080140d4 	.word	0x080140d4
 800b298:	080140e8 	.word	0x080140e8
 800b29c:	08014120 	.word	0x08014120
  } else {
    last_unsent->next = queue;
 800b2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2a4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2aa:	88fb      	ldrh	r3, [r7, #6]
 800b2ac:	441a      	add	r2, r3
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b2b8:	88fb      	ldrh	r3, [r7, #6]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b2ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00e      	beq.n	800b2f6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d10a      	bne.n	800b2f6 <tcp_write+0x616>
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d106      	bne.n	800b2f6 <tcp_write+0x616>
 800b2e8:	4b2c      	ldr	r3, [pc, #176]	; (800b39c <tcp_write+0x6bc>)
 800b2ea:	f240 3212 	movw	r2, #786	; 0x312
 800b2ee:	492c      	ldr	r1, [pc, #176]	; (800b3a0 <tcp_write+0x6c0>)
 800b2f0:	482c      	ldr	r0, [pc, #176]	; (800b3a4 <tcp_write+0x6c4>)
 800b2f2:	f006 fad5 	bl	80118a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d016      	beq.n	800b32a <tcp_write+0x64a>
 800b2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d012      	beq.n	800b32a <tcp_write+0x64a>
 800b304:	797b      	ldrb	r3, [r7, #5]
 800b306:	f003 0302 	and.w	r3, r3, #2
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10d      	bne.n	800b32a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b30e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	899b      	ldrh	r3, [r3, #12]
 800b314:	b29c      	uxth	r4, r3
 800b316:	2008      	movs	r0, #8
 800b318:	f7f9 fbe6 	bl	8004ae8 <lwip_htons>
 800b31c:	4603      	mov	r3, r0
 800b31e:	461a      	mov	r2, r3
 800b320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	4322      	orrs	r2, r4
 800b326:	b292      	uxth	r2, r2
 800b328:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	e031      	b.n	800b392 <tcp_write+0x6b2>
          goto memerr;
 800b32e:	bf00      	nop
 800b330:	e006      	b.n	800b340 <tcp_write+0x660>
            goto memerr;
 800b332:	bf00      	nop
 800b334:	e004      	b.n	800b340 <tcp_write+0x660>
        goto memerr;
 800b336:	bf00      	nop
 800b338:	e002      	b.n	800b340 <tcp_write+0x660>
        goto memerr;
 800b33a:	bf00      	nop
 800b33c:	e000      	b.n	800b340 <tcp_write+0x660>
      goto memerr;
 800b33e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	8b5b      	ldrh	r3, [r3, #26]
 800b344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b348:	b29a      	uxth	r2, r3
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b34e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b350:	2b00      	cmp	r3, #0
 800b352:	d002      	beq.n	800b35a <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b354:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b356:	f7fa ff31 	bl	80061bc <pbuf_free>
  }
  if (queue != NULL) {
 800b35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <tcp_write+0x686>
    tcp_segs_free(queue);
 800b360:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b362:	f7fc fb53 	bl	8007a0c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d00e      	beq.n	800b38e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10a      	bne.n	800b38e <tcp_write+0x6ae>
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d106      	bne.n	800b38e <tcp_write+0x6ae>
 800b380:	4b06      	ldr	r3, [pc, #24]	; (800b39c <tcp_write+0x6bc>)
 800b382:	f240 3227 	movw	r2, #807	; 0x327
 800b386:	4906      	ldr	r1, [pc, #24]	; (800b3a0 <tcp_write+0x6c0>)
 800b388:	4806      	ldr	r0, [pc, #24]	; (800b3a4 <tcp_write+0x6c4>)
 800b38a:	f006 fa89 	bl	80118a0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b38e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b392:	4618      	mov	r0, r3
 800b394:	375c      	adds	r7, #92	; 0x5c
 800b396:	46bd      	mov	sp, r7
 800b398:	bd90      	pop	{r4, r7, pc}
 800b39a:	bf00      	nop
 800b39c:	08013de4 	.word	0x08013de4
 800b3a0:	08014158 	.word	0x08014158
 800b3a4:	08013e38 	.word	0x08013e38

0800b3a8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b3a8:	b590      	push	{r4, r7, lr}
 800b3aa:	b08b      	sub	sp, #44	; 0x2c
 800b3ac:	af02      	add	r7, sp, #8
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	61fb      	str	r3, [r7, #28]
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d106      	bne.n	800b3d4 <tcp_split_unsent_seg+0x2c>
 800b3c6:	4b95      	ldr	r3, [pc, #596]	; (800b61c <tcp_split_unsent_seg+0x274>)
 800b3c8:	f240 324b 	movw	r2, #843	; 0x34b
 800b3cc:	4994      	ldr	r1, [pc, #592]	; (800b620 <tcp_split_unsent_seg+0x278>)
 800b3ce:	4895      	ldr	r0, [pc, #596]	; (800b624 <tcp_split_unsent_seg+0x27c>)
 800b3d0:	f006 fa66 	bl	80118a0 <iprintf>

  useg = pcb->unsent;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3d8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d102      	bne.n	800b3e6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b3e4:	e116      	b.n	800b614 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b3e6:	887b      	ldrh	r3, [r7, #2]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d109      	bne.n	800b400 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b3ec:	4b8b      	ldr	r3, [pc, #556]	; (800b61c <tcp_split_unsent_seg+0x274>)
 800b3ee:	f240 3253 	movw	r2, #851	; 0x353
 800b3f2:	498d      	ldr	r1, [pc, #564]	; (800b628 <tcp_split_unsent_seg+0x280>)
 800b3f4:	488b      	ldr	r0, [pc, #556]	; (800b624 <tcp_split_unsent_seg+0x27c>)
 800b3f6:	f006 fa53 	bl	80118a0 <iprintf>
    return ERR_VAL;
 800b3fa:	f06f 0305 	mvn.w	r3, #5
 800b3fe:	e109      	b.n	800b614 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	891b      	ldrh	r3, [r3, #8]
 800b404:	887a      	ldrh	r2, [r7, #2]
 800b406:	429a      	cmp	r2, r3
 800b408:	d301      	bcc.n	800b40e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e102      	b.n	800b614 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b412:	887a      	ldrh	r2, [r7, #2]
 800b414:	429a      	cmp	r2, r3
 800b416:	d906      	bls.n	800b426 <tcp_split_unsent_seg+0x7e>
 800b418:	4b80      	ldr	r3, [pc, #512]	; (800b61c <tcp_split_unsent_seg+0x274>)
 800b41a:	f240 325b 	movw	r2, #859	; 0x35b
 800b41e:	4983      	ldr	r1, [pc, #524]	; (800b62c <tcp_split_unsent_seg+0x284>)
 800b420:	4880      	ldr	r0, [pc, #512]	; (800b624 <tcp_split_unsent_seg+0x27c>)
 800b422:	f006 fa3d 	bl	80118a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	891b      	ldrh	r3, [r3, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d106      	bne.n	800b43c <tcp_split_unsent_seg+0x94>
 800b42e:	4b7b      	ldr	r3, [pc, #492]	; (800b61c <tcp_split_unsent_seg+0x274>)
 800b430:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b434:	497e      	ldr	r1, [pc, #504]	; (800b630 <tcp_split_unsent_seg+0x288>)
 800b436:	487b      	ldr	r0, [pc, #492]	; (800b624 <tcp_split_unsent_seg+0x27c>)
 800b438:	f006 fa32 	bl	80118a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	7a9b      	ldrb	r3, [r3, #10]
 800b440:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b442:	7bfb      	ldrb	r3, [r7, #15]
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	b2db      	uxtb	r3, r3
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	891a      	ldrh	r2, [r3, #8]
 800b452:	887b      	ldrh	r3, [r7, #2]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b458:	7bbb      	ldrb	r3, [r7, #14]
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	89bb      	ldrh	r3, [r7, #12]
 800b45e:	4413      	add	r3, r2
 800b460:	b29b      	uxth	r3, r3
 800b462:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b466:	4619      	mov	r1, r3
 800b468:	2036      	movs	r0, #54	; 0x36
 800b46a:	f7fa fbc3 	bl	8005bf4 <pbuf_alloc>
 800b46e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 80b7 	beq.w	800b5e6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	685b      	ldr	r3, [r3, #4]
 800b47c:	891a      	ldrh	r2, [r3, #8]
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	891b      	ldrh	r3, [r3, #8]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	b29a      	uxth	r2, r3
 800b486:	887b      	ldrh	r3, [r7, #2]
 800b488:	4413      	add	r3, r2
 800b48a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	6858      	ldr	r0, [r3, #4]
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	685a      	ldr	r2, [r3, #4]
 800b494:	7bbb      	ldrb	r3, [r7, #14]
 800b496:	18d1      	adds	r1, r2, r3
 800b498:	897b      	ldrh	r3, [r7, #10]
 800b49a:	89ba      	ldrh	r2, [r7, #12]
 800b49c:	f7fb f888 	bl	80065b0 <pbuf_copy_partial>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	89bb      	ldrh	r3, [r7, #12]
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	f040 809f 	bne.w	800b5ea <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	899b      	ldrh	r3, [r3, #12]
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7f9 fb17 	bl	8004ae8 <lwip_htons>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4c2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b4c8:	7efb      	ldrb	r3, [r7, #27]
 800b4ca:	f003 0308 	and.w	r3, r3, #8
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d007      	beq.n	800b4e2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b4d2:	7efb      	ldrb	r3, [r7, #27]
 800b4d4:	f023 0308 	bic.w	r3, r3, #8
 800b4d8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b4da:	7ebb      	ldrb	r3, [r7, #26]
 800b4dc:	f043 0308 	orr.w	r3, r3, #8
 800b4e0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b4e2:	7efb      	ldrb	r3, [r7, #27]
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d007      	beq.n	800b4fc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b4ec:	7efb      	ldrb	r3, [r7, #27]
 800b4ee:	f023 0301 	bic.w	r3, r3, #1
 800b4f2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b4f4:	7ebb      	ldrb	r3, [r7, #26]
 800b4f6:	f043 0301 	orr.w	r3, r3, #1
 800b4fa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	4618      	mov	r0, r3
 800b504:	f7f9 fb05 	bl	8004b12 <lwip_htonl>
 800b508:	4602      	mov	r2, r0
 800b50a:	887b      	ldrh	r3, [r7, #2]
 800b50c:	18d1      	adds	r1, r2, r3
 800b50e:	7eba      	ldrb	r2, [r7, #26]
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	460b      	mov	r3, r1
 800b516:	6939      	ldr	r1, [r7, #16]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff fa4f 	bl	800a9bc <tcp_create_segment>
 800b51e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d063      	beq.n	800b5ee <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fa fece 	bl	80062cc <pbuf_clen>
 800b530:	4603      	mov	r3, r0
 800b532:	461a      	mov	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b53a:	1a9b      	subs	r3, r3, r2
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	6858      	ldr	r0, [r3, #4]
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	685b      	ldr	r3, [r3, #4]
 800b54c:	891a      	ldrh	r2, [r3, #8]
 800b54e:	89bb      	ldrh	r3, [r7, #12]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	b29b      	uxth	r3, r3
 800b554:	4619      	mov	r1, r3
 800b556:	f7fa fcab 	bl	8005eb0 <pbuf_realloc>
  useg->len -= remainder;
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	891a      	ldrh	r2, [r3, #8]
 800b55e:	89bb      	ldrh	r3, [r7, #12]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	b29a      	uxth	r2, r3
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	68db      	ldr	r3, [r3, #12]
 800b56c:	899b      	ldrh	r3, [r3, #12]
 800b56e:	b29c      	uxth	r4, r3
 800b570:	7efb      	ldrb	r3, [r7, #27]
 800b572:	b29b      	uxth	r3, r3
 800b574:	4618      	mov	r0, r3
 800b576:	f7f9 fab7 	bl	8004ae8 <lwip_htons>
 800b57a:	4603      	mov	r3, r0
 800b57c:	461a      	mov	r2, r3
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	4322      	orrs	r2, r4
 800b584:	b292      	uxth	r2, r2
 800b586:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b588:	697b      	ldr	r3, [r7, #20]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fa fe9d 	bl	80062cc <pbuf_clen>
 800b592:	4603      	mov	r3, r0
 800b594:	461a      	mov	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b59c:	4413      	add	r3, r2
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b5a6:	69fb      	ldr	r3, [r7, #28]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fa fe8e 	bl	80062cc <pbuf_clen>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b5ba:	4413      	add	r3, r2
 800b5bc:	b29a      	uxth	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	69fb      	ldr	r3, [r7, #28]
 800b5ca:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d103      	bne.n	800b5e2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	e016      	b.n	800b614 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b5e6:	bf00      	nop
 800b5e8:	e002      	b.n	800b5f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b5ea:	bf00      	nop
 800b5ec:	e000      	b.n	800b5f0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b5ee:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d006      	beq.n	800b604 <tcp_split_unsent_seg+0x25c>
 800b5f6:	4b09      	ldr	r3, [pc, #36]	; (800b61c <tcp_split_unsent_seg+0x274>)
 800b5f8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b5fc:	490d      	ldr	r1, [pc, #52]	; (800b634 <tcp_split_unsent_seg+0x28c>)
 800b5fe:	4809      	ldr	r0, [pc, #36]	; (800b624 <tcp_split_unsent_seg+0x27c>)
 800b600:	f006 f94e 	bl	80118a0 <iprintf>
  if (p != NULL) {
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d002      	beq.n	800b610 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b60a:	6938      	ldr	r0, [r7, #16]
 800b60c:	f7fa fdd6 	bl	80061bc <pbuf_free>
  }

  return ERR_MEM;
 800b610:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b614:	4618      	mov	r0, r3
 800b616:	3724      	adds	r7, #36	; 0x24
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd90      	pop	{r4, r7, pc}
 800b61c:	08013de4 	.word	0x08013de4
 800b620:	08014178 	.word	0x08014178
 800b624:	08013e38 	.word	0x08013e38
 800b628:	0801419c 	.word	0x0801419c
 800b62c:	080141c0 	.word	0x080141c0
 800b630:	080141d0 	.word	0x080141d0
 800b634:	080141e0 	.word	0x080141e0

0800b638 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b638:	b590      	push	{r4, r7, lr}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d106      	bne.n	800b654 <tcp_send_fin+0x1c>
 800b646:	4b21      	ldr	r3, [pc, #132]	; (800b6cc <tcp_send_fin+0x94>)
 800b648:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b64c:	4920      	ldr	r1, [pc, #128]	; (800b6d0 <tcp_send_fin+0x98>)
 800b64e:	4821      	ldr	r0, [pc, #132]	; (800b6d4 <tcp_send_fin+0x9c>)
 800b650:	f006 f926 	bl	80118a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d02e      	beq.n	800b6ba <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b660:	60fb      	str	r3, [r7, #12]
 800b662:	e002      	b.n	800b66a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1f8      	bne.n	800b664 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	899b      	ldrh	r3, [r3, #12]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7f9 fa34 	bl	8004ae8 <lwip_htons>
 800b680:	4603      	mov	r3, r0
 800b682:	b2db      	uxtb	r3, r3
 800b684:	f003 0307 	and.w	r3, r3, #7
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d116      	bne.n	800b6ba <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	899b      	ldrh	r3, [r3, #12]
 800b692:	b29c      	uxth	r4, r3
 800b694:	2001      	movs	r0, #1
 800b696:	f7f9 fa27 	bl	8004ae8 <lwip_htons>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	4322      	orrs	r2, r4
 800b6a4:	b292      	uxth	r2, r2
 800b6a6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	8b5b      	ldrh	r3, [r3, #26]
 800b6ac:	f043 0320 	orr.w	r3, r3, #32
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e004      	b.n	800b6c4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b6ba:	2101      	movs	r1, #1
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f80b 	bl	800b6d8 <tcp_enqueue_flags>
 800b6c2:	4603      	mov	r3, r0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3714      	adds	r7, #20
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd90      	pop	{r4, r7, pc}
 800b6cc:	08013de4 	.word	0x08013de4
 800b6d0:	080141ec 	.word	0x080141ec
 800b6d4:	08013e38 	.word	0x08013e38

0800b6d8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b08a      	sub	sp, #40	; 0x28
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b6ec:	78fb      	ldrb	r3, [r7, #3]
 800b6ee:	f003 0303 	and.w	r3, r3, #3
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <tcp_enqueue_flags+0x2c>
 800b6f6:	4b67      	ldr	r3, [pc, #412]	; (800b894 <tcp_enqueue_flags+0x1bc>)
 800b6f8:	f240 4211 	movw	r2, #1041	; 0x411
 800b6fc:	4966      	ldr	r1, [pc, #408]	; (800b898 <tcp_enqueue_flags+0x1c0>)
 800b6fe:	4867      	ldr	r0, [pc, #412]	; (800b89c <tcp_enqueue_flags+0x1c4>)
 800b700:	f006 f8ce 	bl	80118a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d106      	bne.n	800b718 <tcp_enqueue_flags+0x40>
 800b70a:	4b62      	ldr	r3, [pc, #392]	; (800b894 <tcp_enqueue_flags+0x1bc>)
 800b70c:	f240 4213 	movw	r2, #1043	; 0x413
 800b710:	4963      	ldr	r1, [pc, #396]	; (800b8a0 <tcp_enqueue_flags+0x1c8>)
 800b712:	4862      	ldr	r0, [pc, #392]	; (800b89c <tcp_enqueue_flags+0x1c4>)
 800b714:	f006 f8c4 	bl	80118a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	f003 0302 	and.w	r3, r3, #2
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b722:	2301      	movs	r3, #1
 800b724:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b726:	7ffb      	ldrb	r3, [r7, #31]
 800b728:	009b      	lsls	r3, r3, #2
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	f003 0304 	and.w	r3, r3, #4
 800b730:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b732:	7dfb      	ldrb	r3, [r7, #23]
 800b734:	b29b      	uxth	r3, r3
 800b736:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b73a:	4619      	mov	r1, r3
 800b73c:	2036      	movs	r0, #54	; 0x36
 800b73e:	f7fa fa59 	bl	8005bf4 <pbuf_alloc>
 800b742:	6138      	str	r0, [r7, #16]
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d109      	bne.n	800b75e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	8b5b      	ldrh	r3, [r3, #26]
 800b74e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b752:	b29a      	uxth	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b758:	f04f 33ff 	mov.w	r3, #4294967295
 800b75c:	e095      	b.n	800b88a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	895a      	ldrh	r2, [r3, #10]
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	b29b      	uxth	r3, r3
 800b766:	429a      	cmp	r2, r3
 800b768:	d206      	bcs.n	800b778 <tcp_enqueue_flags+0xa0>
 800b76a:	4b4a      	ldr	r3, [pc, #296]	; (800b894 <tcp_enqueue_flags+0x1bc>)
 800b76c:	f240 4239 	movw	r2, #1081	; 0x439
 800b770:	494c      	ldr	r1, [pc, #304]	; (800b8a4 <tcp_enqueue_flags+0x1cc>)
 800b772:	484a      	ldr	r0, [pc, #296]	; (800b89c <tcp_enqueue_flags+0x1c4>)
 800b774:	f006 f894 	bl	80118a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b77c:	78fa      	ldrb	r2, [r7, #3]
 800b77e:	7ffb      	ldrb	r3, [r7, #31]
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	460b      	mov	r3, r1
 800b784:	6939      	ldr	r1, [r7, #16]
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff f918 	bl	800a9bc <tcp_create_segment>
 800b78c:	60f8      	str	r0, [r7, #12]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d109      	bne.n	800b7a8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	8b5b      	ldrh	r3, [r3, #26]
 800b798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a6:	e070      	b.n	800b88a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f003 0303 	and.w	r3, r3, #3
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d006      	beq.n	800b7c2 <tcp_enqueue_flags+0xea>
 800b7b4:	4b37      	ldr	r3, [pc, #220]	; (800b894 <tcp_enqueue_flags+0x1bc>)
 800b7b6:	f240 4242 	movw	r2, #1090	; 0x442
 800b7ba:	493b      	ldr	r1, [pc, #236]	; (800b8a8 <tcp_enqueue_flags+0x1d0>)
 800b7bc:	4837      	ldr	r0, [pc, #220]	; (800b89c <tcp_enqueue_flags+0x1c4>)
 800b7be:	f006 f86f 	bl	80118a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	891b      	ldrh	r3, [r3, #8]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d006      	beq.n	800b7d8 <tcp_enqueue_flags+0x100>
 800b7ca:	4b32      	ldr	r3, [pc, #200]	; (800b894 <tcp_enqueue_flags+0x1bc>)
 800b7cc:	f240 4243 	movw	r2, #1091	; 0x443
 800b7d0:	4936      	ldr	r1, [pc, #216]	; (800b8ac <tcp_enqueue_flags+0x1d4>)
 800b7d2:	4832      	ldr	r0, [pc, #200]	; (800b89c <tcp_enqueue_flags+0x1c4>)
 800b7d4:	f006 f864 	bl	80118a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d103      	bne.n	800b7e8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68fa      	ldr	r2, [r7, #12]
 800b7e4:	66da      	str	r2, [r3, #108]	; 0x6c
 800b7e6:	e00d      	b.n	800b804 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7ec:	61bb      	str	r3, [r7, #24]
 800b7ee:	e002      	b.n	800b7f6 <tcp_enqueue_flags+0x11e>
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	61bb      	str	r3, [r7, #24]
 800b7f6:	69bb      	ldr	r3, [r7, #24]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1f8      	bne.n	800b7f0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b80c:	78fb      	ldrb	r3, [r7, #3]
 800b80e:	f003 0302 	and.w	r3, r3, #2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d104      	bne.n	800b820 <tcp_enqueue_flags+0x148>
 800b816:	78fb      	ldrb	r3, [r7, #3]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d004      	beq.n	800b82a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b824:	1c5a      	adds	r2, r3, #1
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b82a:	78fb      	ldrb	r3, [r7, #3]
 800b82c:	f003 0301 	and.w	r3, r3, #1
 800b830:	2b00      	cmp	r3, #0
 800b832:	d006      	beq.n	800b842 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	8b5b      	ldrh	r3, [r3, #26]
 800b838:	f043 0320 	orr.w	r3, r3, #32
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	4618      	mov	r0, r3
 800b848:	f7fa fd40 	bl	80062cc <pbuf_clen>
 800b84c:	4603      	mov	r3, r0
 800b84e:	461a      	mov	r2, r3
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b856:	4413      	add	r3, r2
 800b858:	b29a      	uxth	r2, r3
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b866:	2b00      	cmp	r3, #0
 800b868:	d00e      	beq.n	800b888 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10a      	bne.n	800b888 <tcp_enqueue_flags+0x1b0>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d106      	bne.n	800b888 <tcp_enqueue_flags+0x1b0>
 800b87a:	4b06      	ldr	r3, [pc, #24]	; (800b894 <tcp_enqueue_flags+0x1bc>)
 800b87c:	f240 4265 	movw	r2, #1125	; 0x465
 800b880:	490b      	ldr	r1, [pc, #44]	; (800b8b0 <tcp_enqueue_flags+0x1d8>)
 800b882:	4806      	ldr	r0, [pc, #24]	; (800b89c <tcp_enqueue_flags+0x1c4>)
 800b884:	f006 f80c 	bl	80118a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3720      	adds	r7, #32
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	08013de4 	.word	0x08013de4
 800b898:	08014208 	.word	0x08014208
 800b89c:	08013e38 	.word	0x08013e38
 800b8a0:	08014260 	.word	0x08014260
 800b8a4:	08014280 	.word	0x08014280
 800b8a8:	080142bc 	.word	0x080142bc
 800b8ac:	080142d4 	.word	0x080142d4
 800b8b0:	08014300 	.word	0x08014300

0800b8b4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b8b4:	b5b0      	push	{r4, r5, r7, lr}
 800b8b6:	b08a      	sub	sp, #40	; 0x28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <tcp_output+0x1c>
 800b8c2:	4b8a      	ldr	r3, [pc, #552]	; (800baec <tcp_output+0x238>)
 800b8c4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b8c8:	4989      	ldr	r1, [pc, #548]	; (800baf0 <tcp_output+0x23c>)
 800b8ca:	488a      	ldr	r0, [pc, #552]	; (800baf4 <tcp_output+0x240>)
 800b8cc:	f005 ffe8 	bl	80118a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	7d1b      	ldrb	r3, [r3, #20]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d106      	bne.n	800b8e6 <tcp_output+0x32>
 800b8d8:	4b84      	ldr	r3, [pc, #528]	; (800baec <tcp_output+0x238>)
 800b8da:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b8de:	4986      	ldr	r1, [pc, #536]	; (800baf8 <tcp_output+0x244>)
 800b8e0:	4884      	ldr	r0, [pc, #528]	; (800baf4 <tcp_output+0x240>)
 800b8e2:	f005 ffdd 	bl	80118a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b8e6:	4b85      	ldr	r3, [pc, #532]	; (800bafc <tcp_output+0x248>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d101      	bne.n	800b8f4 <tcp_output+0x40>
    return ERR_OK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	e1ce      	b.n	800bc92 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b900:	4293      	cmp	r3, r2
 800b902:	bf28      	it	cs
 800b904:	4613      	movcs	r3, r2
 800b906:	b29b      	uxth	r3, r3
 800b908:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b90e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b912:	2b00      	cmp	r3, #0
 800b914:	d10b      	bne.n	800b92e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	8b5b      	ldrh	r3, [r3, #26]
 800b91a:	f003 0302 	and.w	r3, r3, #2
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 81aa 	beq.w	800bc78 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fdcb 	bl	800c4c0 <tcp_send_empty_ack>
 800b92a:	4603      	mov	r3, r0
 800b92c:	e1b1      	b.n	800bc92 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b92e:	6879      	ldr	r1, [r7, #4]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	3304      	adds	r3, #4
 800b934:	461a      	mov	r2, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff f824 	bl	800a984 <tcp_route>
 800b93c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <tcp_output+0x96>
    return ERR_RTE;
 800b944:	f06f 0303 	mvn.w	r3, #3
 800b948:	e1a3      	b.n	800bc92 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <tcp_output+0xa4>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d111      	bne.n	800b97c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d002      	beq.n	800b964 <tcp_output+0xb0>
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	3304      	adds	r3, #4
 800b962:	e000      	b.n	800b966 <tcp_output+0xb2>
 800b964:	2300      	movs	r3, #0
 800b966:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d102      	bne.n	800b974 <tcp_output+0xc0>
      return ERR_RTE;
 800b96e:	f06f 0303 	mvn.w	r3, #3
 800b972:	e18e      	b.n	800bc92 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	4618      	mov	r0, r3
 800b984:	f7f9 f8c5 	bl	8004b12 <lwip_htonl>
 800b988:	4602      	mov	r2, r0
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b992:	8912      	ldrh	r2, [r2, #8]
 800b994:	4413      	add	r3, r2
 800b996:	69ba      	ldr	r2, [r7, #24]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d227      	bcs.n	800b9ec <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d114      	bne.n	800b9d4 <tcp_output+0x120>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d110      	bne.n	800b9d4 <tcp_output+0x120>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10b      	bne.n	800b9d4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	8b5b      	ldrh	r3, [r3, #26]
 800b9d8:	f003 0302 	and.w	r3, r3, #2
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f000 814d 	beq.w	800bc7c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fd6c 	bl	800c4c0 <tcp_send_empty_ack>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	e152      	b.n	800bc92 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 811c 	beq.w	800bc3a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ba02:	e002      	b.n	800ba0a <tcp_output+0x156>
 800ba04:	6a3b      	ldr	r3, [r7, #32]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	623b      	str	r3, [r7, #32]
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1f8      	bne.n	800ba04 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ba12:	e112      	b.n	800bc3a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	899b      	ldrh	r3, [r3, #12]
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7f9 f863 	bl	8004ae8 <lwip_htons>
 800ba22:	4603      	mov	r3, r0
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	f003 0304 	and.w	r3, r3, #4
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d006      	beq.n	800ba3c <tcp_output+0x188>
 800ba2e:	4b2f      	ldr	r3, [pc, #188]	; (800baec <tcp_output+0x238>)
 800ba30:	f240 5236 	movw	r2, #1334	; 0x536
 800ba34:	4932      	ldr	r1, [pc, #200]	; (800bb00 <tcp_output+0x24c>)
 800ba36:	482f      	ldr	r0, [pc, #188]	; (800baf4 <tcp_output+0x240>)
 800ba38:	f005 ff32 	bl	80118a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d01f      	beq.n	800ba84 <tcp_output+0x1d0>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	8b5b      	ldrh	r3, [r3, #26]
 800ba48:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d119      	bne.n	800ba84 <tcp_output+0x1d0>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00b      	beq.n	800ba70 <tcp_output+0x1bc>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d110      	bne.n	800ba84 <tcp_output+0x1d0>
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba66:	891a      	ldrh	r2, [r3, #8]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d209      	bcs.n	800ba84 <tcp_output+0x1d0>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d004      	beq.n	800ba84 <tcp_output+0x1d0>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ba80:	2b08      	cmp	r3, #8
 800ba82:	d901      	bls.n	800ba88 <tcp_output+0x1d4>
 800ba84:	2301      	movs	r3, #1
 800ba86:	e000      	b.n	800ba8a <tcp_output+0x1d6>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d106      	bne.n	800ba9c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	8b5b      	ldrh	r3, [r3, #26]
 800ba92:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f000 80e4 	beq.w	800bc64 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	7d1b      	ldrb	r3, [r3, #20]
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d00d      	beq.n	800bac0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800baa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	899b      	ldrh	r3, [r3, #12]
 800baaa:	b29c      	uxth	r4, r3
 800baac:	2010      	movs	r0, #16
 800baae:	f7f9 f81b 	bl	8004ae8 <lwip_htons>
 800bab2:	4603      	mov	r3, r0
 800bab4:	461a      	mov	r2, r3
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	4322      	orrs	r2, r4
 800babc:	b292      	uxth	r2, r2
 800babe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	6879      	ldr	r1, [r7, #4]
 800bac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bac6:	f000 f909 	bl	800bcdc <tcp_output_segment>
 800baca:	4603      	mov	r3, r0
 800bacc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d016      	beq.n	800bb04 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	8b5b      	ldrh	r3, [r3, #26]
 800bada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bade:	b29a      	uxth	r2, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	835a      	strh	r2, [r3, #26]
      return err;
 800bae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bae8:	e0d3      	b.n	800bc92 <tcp_output+0x3de>
 800baea:	bf00      	nop
 800baec:	08013de4 	.word	0x08013de4
 800baf0:	08014328 	.word	0x08014328
 800baf4:	08013e38 	.word	0x08013e38
 800baf8:	08014340 	.word	0x08014340
 800bafc:	200087d8 	.word	0x200087d8
 800bb00:	08014368 	.word	0x08014368
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	7d1b      	ldrb	r3, [r3, #20]
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d006      	beq.n	800bb22 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	8b5b      	ldrh	r3, [r3, #26]
 800bb18:	f023 0303 	bic.w	r3, r3, #3
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7f8 fff2 	bl	8004b12 <lwip_htonl>
 800bb2e:	4604      	mov	r4, r0
 800bb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb32:	891b      	ldrh	r3, [r3, #8]
 800bb34:	461d      	mov	r5, r3
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	899b      	ldrh	r3, [r3, #12]
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7f8 ffd2 	bl	8004ae8 <lwip_htons>
 800bb44:	4603      	mov	r3, r0
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	f003 0303 	and.w	r3, r3, #3
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d001      	beq.n	800bb54 <tcp_output+0x2a0>
 800bb50:	2301      	movs	r3, #1
 800bb52:	e000      	b.n	800bb56 <tcp_output+0x2a2>
 800bb54:	2300      	movs	r3, #0
 800bb56:	442b      	add	r3, r5
 800bb58:	4423      	add	r3, r4
 800bb5a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	da02      	bge.n	800bb6e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	68ba      	ldr	r2, [r7, #8]
 800bb6c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800bb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb70:	891b      	ldrh	r3, [r3, #8]
 800bb72:	461c      	mov	r4, r3
 800bb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	899b      	ldrh	r3, [r3, #12]
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f8 ffb3 	bl	8004ae8 <lwip_htons>
 800bb82:	4603      	mov	r3, r0
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	f003 0303 	and.w	r3, r3, #3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <tcp_output+0x2de>
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e000      	b.n	800bb94 <tcp_output+0x2e0>
 800bb92:	2300      	movs	r3, #0
 800bb94:	4423      	add	r3, r4
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d049      	beq.n	800bc2e <tcp_output+0x37a>
      seg->next = NULL;
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d105      	bne.n	800bbb4 <tcp_output+0x300>
        pcb->unacked = seg;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbac:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800bbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb0:	623b      	str	r3, [r7, #32]
 800bbb2:	e03f      	b.n	800bc34 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7f8 ffa9 	bl	8004b12 <lwip_htonl>
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7f8 ffa2 	bl	8004b12 <lwip_htonl>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	1ae3      	subs	r3, r4, r3
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	da24      	bge.n	800bc20 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	3370      	adds	r3, #112	; 0x70
 800bbda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bbdc:	e002      	b.n	800bbe4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d011      	beq.n	800bc10 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bbec:	69fb      	ldr	r3, [r7, #28]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7f8 ff8c 	bl	8004b12 <lwip_htonl>
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7f8 ff85 	bl	8004b12 <lwip_htonl>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	dbe6      	blt.n	800bbde <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	e009      	b.n	800bc34 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc24:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800bc26:	6a3b      	ldr	r3, [r7, #32]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	623b      	str	r3, [r7, #32]
 800bc2c:	e002      	b.n	800bc34 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800bc2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc30:	f7fb ff01 	bl	8007a36 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc38:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d012      	beq.n	800bc66 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7f8 ff63 	bl	8004b12 <lwip_htonl>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc52:	1ad3      	subs	r3, r2, r3
 800bc54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc56:	8912      	ldrh	r2, [r2, #8]
 800bc58:	4413      	add	r3, r2
  while (seg != NULL &&
 800bc5a:	69ba      	ldr	r2, [r7, #24]
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	f4bf aed9 	bcs.w	800ba14 <tcp_output+0x160>
 800bc62:	e000      	b.n	800bc66 <tcp_output+0x3b2>
      break;
 800bc64:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d108      	bne.n	800bc80 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800bc76:	e004      	b.n	800bc82 <tcp_output+0x3ce>
    goto output_done;
 800bc78:	bf00      	nop
 800bc7a:	e002      	b.n	800bc82 <tcp_output+0x3ce>
    goto output_done;
 800bc7c:	bf00      	nop
 800bc7e:	e000      	b.n	800bc82 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800bc80:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	8b5b      	ldrh	r3, [r3, #26]
 800bc86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800bc90:	2300      	movs	r3, #0
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3728      	adds	r7, #40	; 0x28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bdb0      	pop	{r4, r5, r7, pc}
 800bc9a:	bf00      	nop

0800bc9c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d106      	bne.n	800bcb8 <tcp_output_segment_busy+0x1c>
 800bcaa:	4b09      	ldr	r3, [pc, #36]	; (800bcd0 <tcp_output_segment_busy+0x34>)
 800bcac:	f240 529a 	movw	r2, #1434	; 0x59a
 800bcb0:	4908      	ldr	r1, [pc, #32]	; (800bcd4 <tcp_output_segment_busy+0x38>)
 800bcb2:	4809      	ldr	r0, [pc, #36]	; (800bcd8 <tcp_output_segment_busy+0x3c>)
 800bcb4:	f005 fdf4 	bl	80118a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	7b9b      	ldrb	r3, [r3, #14]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d001      	beq.n	800bcc6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e000      	b.n	800bcc8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	08013de4 	.word	0x08013de4
 800bcd4:	08014380 	.word	0x08014380
 800bcd8:	08013e38 	.word	0x08013e38

0800bcdc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800bcdc:	b5b0      	push	{r4, r5, r7, lr}
 800bcde:	b08c      	sub	sp, #48	; 0x30
 800bce0:	af04      	add	r7, sp, #16
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d106      	bne.n	800bcfc <tcp_output_segment+0x20>
 800bcee:	4b64      	ldr	r3, [pc, #400]	; (800be80 <tcp_output_segment+0x1a4>)
 800bcf0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800bcf4:	4963      	ldr	r1, [pc, #396]	; (800be84 <tcp_output_segment+0x1a8>)
 800bcf6:	4864      	ldr	r0, [pc, #400]	; (800be88 <tcp_output_segment+0x1ac>)
 800bcf8:	f005 fdd2 	bl	80118a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d106      	bne.n	800bd10 <tcp_output_segment+0x34>
 800bd02:	4b5f      	ldr	r3, [pc, #380]	; (800be80 <tcp_output_segment+0x1a4>)
 800bd04:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bd08:	4960      	ldr	r1, [pc, #384]	; (800be8c <tcp_output_segment+0x1b0>)
 800bd0a:	485f      	ldr	r0, [pc, #380]	; (800be88 <tcp_output_segment+0x1ac>)
 800bd0c:	f005 fdc8 	bl	80118a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <tcp_output_segment+0x48>
 800bd16:	4b5a      	ldr	r3, [pc, #360]	; (800be80 <tcp_output_segment+0x1a4>)
 800bd18:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bd1c:	495c      	ldr	r1, [pc, #368]	; (800be90 <tcp_output_segment+0x1b4>)
 800bd1e:	485a      	ldr	r0, [pc, #360]	; (800be88 <tcp_output_segment+0x1ac>)
 800bd20:	f005 fdbe 	bl	80118a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f7ff ffb9 	bl	800bc9c <tcp_output_segment_busy>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	e0a1      	b.n	800be78 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	68dc      	ldr	r4, [r3, #12]
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f7f8 fee8 	bl	8004b12 <lwip_htonl>
 800bd42:	4603      	mov	r3, r0
 800bd44:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	68dc      	ldr	r4, [r3, #12]
 800bd4e:	4610      	mov	r0, r2
 800bd50:	f7f8 feca 	bl	8004ae8 <lwip_htons>
 800bd54:	4603      	mov	r3, r0
 800bd56:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bd60:	441a      	add	r2, r3
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	3314      	adds	r3, #20
 800bd6c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	7a9b      	ldrb	r3, [r3, #10]
 800bd72:	f003 0301 	and.w	r3, r3, #1
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d015      	beq.n	800bda6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	461a      	mov	r2, r3
 800bd80:	6879      	ldr	r1, [r7, #4]
 800bd82:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bd86:	f7fc fa33 	bl	80081f0 <tcp_eff_send_mss_netif>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bd8e:	8b7b      	ldrh	r3, [r7, #26]
 800bd90:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7f8 febc 	bl	8004b12 <lwip_htonl>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	3304      	adds	r3, #4
 800bda4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	da02      	bge.n	800bdb6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10c      	bne.n	800bdd8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bdbe:	4b35      	ldr	r3, [pc, #212]	; (800be94 <tcp_output_segment+0x1b8>)
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7f8 fea0 	bl	8004b12 <lwip_htonl>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	68da      	ldr	r2, [r3, #12]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	1ad3      	subs	r3, r2, r3
 800bde4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	8959      	ldrh	r1, [r3, #10]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	8b3a      	ldrh	r2, [r7, #24]
 800bdf2:	1a8a      	subs	r2, r1, r2
 800bdf4:	b292      	uxth	r2, r2
 800bdf6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	8919      	ldrh	r1, [r3, #8]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	8b3a      	ldrh	r2, [r7, #24]
 800be04:	1a8a      	subs	r2, r1, r2
 800be06:	b292      	uxth	r2, r2
 800be08:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	68d2      	ldr	r2, [r2, #12]
 800be12:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	741a      	strb	r2, [r3, #16]
 800be1c:	2200      	movs	r2, #0
 800be1e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	68da      	ldr	r2, [r3, #12]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	7a9b      	ldrb	r3, [r3, #10]
 800be28:	f003 0301 	and.w	r3, r3, #1
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <tcp_output_segment+0x158>
 800be30:	2318      	movs	r3, #24
 800be32:	e000      	b.n	800be36 <tcp_output_segment+0x15a>
 800be34:	2314      	movs	r3, #20
 800be36:	4413      	add	r3, r2
 800be38:	69fa      	ldr	r2, [r7, #28]
 800be3a:	429a      	cmp	r2, r3
 800be3c:	d006      	beq.n	800be4c <tcp_output_segment+0x170>
 800be3e:	4b10      	ldr	r3, [pc, #64]	; (800be80 <tcp_output_segment+0x1a4>)
 800be40:	f240 621c 	movw	r2, #1564	; 0x61c
 800be44:	4914      	ldr	r1, [pc, #80]	; (800be98 <tcp_output_segment+0x1bc>)
 800be46:	4810      	ldr	r0, [pc, #64]	; (800be88 <tcp_output_segment+0x1ac>)
 800be48:	f005 fd2a 	bl	80118a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	6858      	ldr	r0, [r3, #4]
 800be50:	68b9      	ldr	r1, [r7, #8]
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	1d1c      	adds	r4, r3, #4
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	7add      	ldrb	r5, [r3, #11]
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	7a9b      	ldrb	r3, [r3, #10]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	9202      	str	r2, [sp, #8]
 800be62:	2206      	movs	r2, #6
 800be64:	9201      	str	r2, [sp, #4]
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	462b      	mov	r3, r5
 800be6a:	4622      	mov	r2, r4
 800be6c:	f004 fbea 	bl	8010644 <ip4_output_if>
 800be70:	4603      	mov	r3, r0
 800be72:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800be74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3720      	adds	r7, #32
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bdb0      	pop	{r4, r5, r7, pc}
 800be80:	08013de4 	.word	0x08013de4
 800be84:	080143a8 	.word	0x080143a8
 800be88:	08013e38 	.word	0x08013e38
 800be8c:	080143c8 	.word	0x080143c8
 800be90:	080143e8 	.word	0x080143e8
 800be94:	2000878c 	.word	0x2000878c
 800be98:	0801440c 	.word	0x0801440c

0800be9c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800be9c:	b5b0      	push	{r4, r5, r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <tcp_rexmit_rto_prepare+0x1c>
 800beaa:	4b31      	ldr	r3, [pc, #196]	; (800bf70 <tcp_rexmit_rto_prepare+0xd4>)
 800beac:	f240 6263 	movw	r2, #1635	; 0x663
 800beb0:	4930      	ldr	r1, [pc, #192]	; (800bf74 <tcp_rexmit_rto_prepare+0xd8>)
 800beb2:	4831      	ldr	r0, [pc, #196]	; (800bf78 <tcp_rexmit_rto_prepare+0xdc>)
 800beb4:	f005 fcf4 	bl	80118a0 <iprintf>

  if (pcb->unacked == NULL) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d102      	bne.n	800bec6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bec0:	f06f 0305 	mvn.w	r3, #5
 800bec4:	e050      	b.n	800bf68 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	e00b      	b.n	800bee6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f7ff fee4 	bl	800bc9c <tcp_output_segment_busy>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d002      	beq.n	800bee0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800beda:	f06f 0305 	mvn.w	r3, #5
 800bede:	e043      	b.n	800bf68 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	60fb      	str	r3, [r7, #12]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1ef      	bne.n	800bece <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7ff fed4 	bl	800bc9c <tcp_output_segment_busy>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800befa:	f06f 0305 	mvn.w	r3, #5
 800befe:	e033      	b.n	800bf68 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	8b5b      	ldrh	r3, [r3, #26]
 800bf1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7f8 fdf1 	bl	8004b12 <lwip_htonl>
 800bf30:	4604      	mov	r4, r0
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	891b      	ldrh	r3, [r3, #8]
 800bf36:	461d      	mov	r5, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	899b      	ldrh	r3, [r3, #12]
 800bf3e:	b29b      	uxth	r3, r3
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7f8 fdd1 	bl	8004ae8 <lwip_htons>
 800bf46:	4603      	mov	r3, r0
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	f003 0303 	and.w	r3, r3, #3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <tcp_rexmit_rto_prepare+0xba>
 800bf52:	2301      	movs	r3, #1
 800bf54:	e000      	b.n	800bf58 <tcp_rexmit_rto_prepare+0xbc>
 800bf56:	2300      	movs	r3, #0
 800bf58:	442b      	add	r3, r5
 800bf5a:	18e2      	adds	r2, r4, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bdb0      	pop	{r4, r5, r7, pc}
 800bf70:	08013de4 	.word	0x08013de4
 800bf74:	08014420 	.word	0x08014420
 800bf78:	08013e38 	.word	0x08013e38

0800bf7c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d106      	bne.n	800bf98 <tcp_rexmit_rto_commit+0x1c>
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <tcp_rexmit_rto_commit+0x44>)
 800bf8c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bf90:	490c      	ldr	r1, [pc, #48]	; (800bfc4 <tcp_rexmit_rto_commit+0x48>)
 800bf92:	480d      	ldr	r0, [pc, #52]	; (800bfc8 <tcp_rexmit_rto_commit+0x4c>)
 800bf94:	f005 fc84 	bl	80118a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bf9e:	2bff      	cmp	r3, #255	; 0xff
 800bfa0:	d007      	beq.n	800bfb2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff fc7e 	bl	800b8b4 <tcp_output>
}
 800bfb8:	bf00      	nop
 800bfba:	3708      	adds	r7, #8
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	08013de4 	.word	0x08013de4
 800bfc4:	08014444 	.word	0x08014444
 800bfc8:	08013e38 	.word	0x08013e38

0800bfcc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d106      	bne.n	800bfe8 <tcp_rexmit_rto+0x1c>
 800bfda:	4b0a      	ldr	r3, [pc, #40]	; (800c004 <tcp_rexmit_rto+0x38>)
 800bfdc:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bfe0:	4909      	ldr	r1, [pc, #36]	; (800c008 <tcp_rexmit_rto+0x3c>)
 800bfe2:	480a      	ldr	r0, [pc, #40]	; (800c00c <tcp_rexmit_rto+0x40>)
 800bfe4:	f005 fc5c 	bl	80118a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f7ff ff57 	bl	800be9c <tcp_rexmit_rto_prepare>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d102      	bne.n	800bffa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f7ff ffc1 	bl	800bf7c <tcp_rexmit_rto_commit>
  }
}
 800bffa:	bf00      	nop
 800bffc:	3708      	adds	r7, #8
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	08013de4 	.word	0x08013de4
 800c008:	08014468 	.word	0x08014468
 800c00c:	08013e38 	.word	0x08013e38

0800c010 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c010:	b590      	push	{r4, r7, lr}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <tcp_rexmit+0x1c>
 800c01e:	4b2f      	ldr	r3, [pc, #188]	; (800c0dc <tcp_rexmit+0xcc>)
 800c020:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c024:	492e      	ldr	r1, [pc, #184]	; (800c0e0 <tcp_rexmit+0xd0>)
 800c026:	482f      	ldr	r0, [pc, #188]	; (800c0e4 <tcp_rexmit+0xd4>)
 800c028:	f005 fc3a 	bl	80118a0 <iprintf>

  if (pcb->unacked == NULL) {
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c030:	2b00      	cmp	r3, #0
 800c032:	d102      	bne.n	800c03a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c034:	f06f 0305 	mvn.w	r3, #5
 800c038:	e04c      	b.n	800c0d4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c03e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c040:	68b8      	ldr	r0, [r7, #8]
 800c042:	f7ff fe2b 	bl	800bc9c <tcp_output_segment_busy>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d002      	beq.n	800c052 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c04c:	f06f 0305 	mvn.w	r3, #5
 800c050:	e040      	b.n	800c0d4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	336c      	adds	r3, #108	; 0x6c
 800c05e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c060:	e002      	b.n	800c068 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d011      	beq.n	800c094 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	4618      	mov	r0, r3
 800c07a:	f7f8 fd4a 	bl	8004b12 <lwip_htonl>
 800c07e:	4604      	mov	r4, r0
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	4618      	mov	r0, r3
 800c088:	f7f8 fd43 	bl	8004b12 <lwip_htonl>
 800c08c:	4603      	mov	r3, r0
 800c08e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c090:	2b00      	cmp	r3, #0
 800c092:	dbe6      	blt.n	800c062 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	68ba      	ldr	r2, [r7, #8]
 800c0a0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d103      	bne.n	800c0b2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0b8:	2bff      	cmp	r3, #255	; 0xff
 800c0ba:	d007      	beq.n	800c0cc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	b2da      	uxtb	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd90      	pop	{r4, r7, pc}
 800c0dc:	08013de4 	.word	0x08013de4
 800c0e0:	08014484 	.word	0x08014484
 800c0e4:	08013e38 	.word	0x08013e38

0800c0e8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d106      	bne.n	800c104 <tcp_rexmit_fast+0x1c>
 800c0f6:	4b2a      	ldr	r3, [pc, #168]	; (800c1a0 <tcp_rexmit_fast+0xb8>)
 800c0f8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c0fc:	4929      	ldr	r1, [pc, #164]	; (800c1a4 <tcp_rexmit_fast+0xbc>)
 800c0fe:	482a      	ldr	r0, [pc, #168]	; (800c1a8 <tcp_rexmit_fast+0xc0>)
 800c100:	f005 fbce 	bl	80118a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d044      	beq.n	800c196 <tcp_rexmit_fast+0xae>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	8b5b      	ldrh	r3, [r3, #26]
 800c110:	f003 0304 	and.w	r3, r3, #4
 800c114:	2b00      	cmp	r3, #0
 800c116:	d13e      	bne.n	800c196 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7ff ff79 	bl	800c010 <tcp_rexmit>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d138      	bne.n	800c196 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c130:	4293      	cmp	r3, r2
 800c132:	bf28      	it	cs
 800c134:	4613      	movcs	r3, r2
 800c136:	b29b      	uxth	r3, r3
 800c138:	0fda      	lsrs	r2, r3, #31
 800c13a:	4413      	add	r3, r2
 800c13c:	105b      	asrs	r3, r3, #1
 800c13e:	b29a      	uxth	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c14c:	461a      	mov	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c152:	005b      	lsls	r3, r3, #1
 800c154:	429a      	cmp	r2, r3
 800c156:	d206      	bcs.n	800c166 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c15c:	005b      	lsls	r3, r3, #1
 800c15e:	b29a      	uxth	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c170:	4619      	mov	r1, r3
 800c172:	0049      	lsls	r1, r1, #1
 800c174:	440b      	add	r3, r1
 800c176:	b29b      	uxth	r3, r3
 800c178:	4413      	add	r3, r2
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	8b5b      	ldrh	r3, [r3, #26]
 800c186:	f043 0304 	orr.w	r3, r3, #4
 800c18a:	b29a      	uxth	r2, r3
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c196:	bf00      	nop
 800c198:	3708      	adds	r7, #8
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	08013de4 	.word	0x08013de4
 800c1a4:	0801449c 	.word	0x0801449c
 800c1a8:	08013e38 	.word	0x08013e38

0800c1ac <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b086      	sub	sp, #24
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	607b      	str	r3, [r7, #4]
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	817b      	strh	r3, [r7, #10]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c1be:	897a      	ldrh	r2, [r7, #10]
 800c1c0:	893b      	ldrh	r3, [r7, #8]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	3314      	adds	r3, #20
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	2022      	movs	r0, #34	; 0x22
 800c1d2:	f7f9 fd0f 	bl	8005bf4 <pbuf_alloc>
 800c1d6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d04d      	beq.n	800c27a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c1de:	897b      	ldrh	r3, [r7, #10]
 800c1e0:	3313      	adds	r3, #19
 800c1e2:	697a      	ldr	r2, [r7, #20]
 800c1e4:	8952      	ldrh	r2, [r2, #10]
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	db06      	blt.n	800c1f8 <tcp_output_alloc_header_common+0x4c>
 800c1ea:	4b26      	ldr	r3, [pc, #152]	; (800c284 <tcp_output_alloc_header_common+0xd8>)
 800c1ec:	f240 7223 	movw	r2, #1827	; 0x723
 800c1f0:	4925      	ldr	r1, [pc, #148]	; (800c288 <tcp_output_alloc_header_common+0xdc>)
 800c1f2:	4826      	ldr	r0, [pc, #152]	; (800c28c <tcp_output_alloc_header_common+0xe0>)
 800c1f4:	f005 fb54 	bl	80118a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c1fe:	8c3b      	ldrh	r3, [r7, #32]
 800c200:	4618      	mov	r0, r3
 800c202:	f7f8 fc71 	bl	8004ae8 <lwip_htons>
 800c206:	4603      	mov	r3, r0
 800c208:	461a      	mov	r2, r3
 800c20a:	693b      	ldr	r3, [r7, #16]
 800c20c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c20e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c210:	4618      	mov	r0, r3
 800c212:	f7f8 fc69 	bl	8004ae8 <lwip_htons>
 800c216:	4603      	mov	r3, r0
 800c218:	461a      	mov	r2, r3
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c224:	68f8      	ldr	r0, [r7, #12]
 800c226:	f7f8 fc74 	bl	8004b12 <lwip_htonl>
 800c22a:	4602      	mov	r2, r0
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c230:	897b      	ldrh	r3, [r7, #10]
 800c232:	089b      	lsrs	r3, r3, #2
 800c234:	b29b      	uxth	r3, r3
 800c236:	3305      	adds	r3, #5
 800c238:	b29b      	uxth	r3, r3
 800c23a:	031b      	lsls	r3, r3, #12
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c242:	b29b      	uxth	r3, r3
 800c244:	4313      	orrs	r3, r2
 800c246:	b29b      	uxth	r3, r3
 800c248:	4618      	mov	r0, r3
 800c24a:	f7f8 fc4d 	bl	8004ae8 <lwip_htons>
 800c24e:	4603      	mov	r3, r0
 800c250:	461a      	mov	r2, r3
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c256:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c258:	4618      	mov	r0, r3
 800c25a:	f7f8 fc45 	bl	8004ae8 <lwip_htons>
 800c25e:	4603      	mov	r3, r0
 800c260:	461a      	mov	r2, r3
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	2200      	movs	r2, #0
 800c26a:	741a      	strb	r2, [r3, #16]
 800c26c:	2200      	movs	r2, #0
 800c26e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	2200      	movs	r2, #0
 800c274:	749a      	strb	r2, [r3, #18]
 800c276:	2200      	movs	r2, #0
 800c278:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c27a:	697b      	ldr	r3, [r7, #20]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	08013de4 	.word	0x08013de4
 800c288:	080144bc 	.word	0x080144bc
 800c28c:	08013e38 	.word	0x08013e38

0800c290 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c290:	b5b0      	push	{r4, r5, r7, lr}
 800c292:	b08a      	sub	sp, #40	; 0x28
 800c294:	af04      	add	r7, sp, #16
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	607b      	str	r3, [r7, #4]
 800c29a:	460b      	mov	r3, r1
 800c29c:	817b      	strh	r3, [r7, #10]
 800c29e:	4613      	mov	r3, r2
 800c2a0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d106      	bne.n	800c2b6 <tcp_output_alloc_header+0x26>
 800c2a8:	4b15      	ldr	r3, [pc, #84]	; (800c300 <tcp_output_alloc_header+0x70>)
 800c2aa:	f240 7242 	movw	r2, #1858	; 0x742
 800c2ae:	4915      	ldr	r1, [pc, #84]	; (800c304 <tcp_output_alloc_header+0x74>)
 800c2b0:	4815      	ldr	r0, [pc, #84]	; (800c308 <tcp_output_alloc_header+0x78>)
 800c2b2:	f005 faf5 	bl	80118a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	8adb      	ldrh	r3, [r3, #22]
 800c2be:	68fa      	ldr	r2, [r7, #12]
 800c2c0:	8b12      	ldrh	r2, [r2, #24]
 800c2c2:	68f9      	ldr	r1, [r7, #12]
 800c2c4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c2c6:	893d      	ldrh	r5, [r7, #8]
 800c2c8:	897c      	ldrh	r4, [r7, #10]
 800c2ca:	9103      	str	r1, [sp, #12]
 800c2cc:	2110      	movs	r1, #16
 800c2ce:	9102      	str	r1, [sp, #8]
 800c2d0:	9201      	str	r2, [sp, #4]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	462a      	mov	r2, r5
 800c2d8:	4621      	mov	r1, r4
 800c2da:	f7ff ff67 	bl	800c1ac <tcp_output_alloc_header_common>
 800c2de:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d006      	beq.n	800c2f4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c2ee:	441a      	add	r2, r3
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c2f4:	697b      	ldr	r3, [r7, #20]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3718      	adds	r7, #24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bdb0      	pop	{r4, r5, r7, pc}
 800c2fe:	bf00      	nop
 800c300:	08013de4 	.word	0x08013de4
 800c304:	080144ec 	.word	0x080144ec
 800c308:	08013e38 	.word	0x08013e38

0800c30c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b088      	sub	sp, #32
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	4611      	mov	r1, r2
 800c318:	461a      	mov	r2, r3
 800c31a:	460b      	mov	r3, r1
 800c31c:	71fb      	strb	r3, [r7, #7]
 800c31e:	4613      	mov	r3, r2
 800c320:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d106      	bne.n	800c33a <tcp_output_fill_options+0x2e>
 800c32c:	4b12      	ldr	r3, [pc, #72]	; (800c378 <tcp_output_fill_options+0x6c>)
 800c32e:	f240 7256 	movw	r2, #1878	; 0x756
 800c332:	4912      	ldr	r1, [pc, #72]	; (800c37c <tcp_output_fill_options+0x70>)
 800c334:	4812      	ldr	r0, [pc, #72]	; (800c380 <tcp_output_fill_options+0x74>)
 800c336:	f005 fab3 	bl	80118a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	3314      	adds	r3, #20
 800c344:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c346:	8bfb      	ldrh	r3, [r7, #30]
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	461a      	mov	r2, r3
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	f003 0304 	and.w	r3, r3, #4
 800c354:	4413      	add	r3, r2
 800c356:	3314      	adds	r3, #20
 800c358:	69ba      	ldr	r2, [r7, #24]
 800c35a:	4413      	add	r3, r2
 800c35c:	697a      	ldr	r2, [r7, #20]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d006      	beq.n	800c370 <tcp_output_fill_options+0x64>
 800c362:	4b05      	ldr	r3, [pc, #20]	; (800c378 <tcp_output_fill_options+0x6c>)
 800c364:	f240 7275 	movw	r2, #1909	; 0x775
 800c368:	4906      	ldr	r1, [pc, #24]	; (800c384 <tcp_output_fill_options+0x78>)
 800c36a:	4805      	ldr	r0, [pc, #20]	; (800c380 <tcp_output_fill_options+0x74>)
 800c36c:	f005 fa98 	bl	80118a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c370:	bf00      	nop
 800c372:	3720      	adds	r7, #32
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	08013de4 	.word	0x08013de4
 800c37c:	08014514 	.word	0x08014514
 800c380:	08013e38 	.word	0x08013e38
 800c384:	0801440c 	.word	0x0801440c

0800c388 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b08a      	sub	sp, #40	; 0x28
 800c38c:	af04      	add	r7, sp, #16
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d106      	bne.n	800c3aa <tcp_output_control_segment+0x22>
 800c39c:	4b1c      	ldr	r3, [pc, #112]	; (800c410 <tcp_output_control_segment+0x88>)
 800c39e:	f240 7287 	movw	r2, #1927	; 0x787
 800c3a2:	491c      	ldr	r1, [pc, #112]	; (800c414 <tcp_output_control_segment+0x8c>)
 800c3a4:	481c      	ldr	r0, [pc, #112]	; (800c418 <tcp_output_control_segment+0x90>)
 800c3a6:	f005 fa7b 	bl	80118a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	6879      	ldr	r1, [r7, #4]
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f7fe fae8 	bl	800a984 <tcp_route>
 800c3b4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d102      	bne.n	800c3c2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c3bc:	23fc      	movs	r3, #252	; 0xfc
 800c3be:	75fb      	strb	r3, [r7, #23]
 800c3c0:	e01c      	b.n	800c3fc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d006      	beq.n	800c3d6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	7adb      	ldrb	r3, [r3, #11]
 800c3cc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	7a9b      	ldrb	r3, [r3, #10]
 800c3d2:	757b      	strb	r3, [r7, #21]
 800c3d4:	e003      	b.n	800c3de <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c3d6:	23ff      	movs	r3, #255	; 0xff
 800c3d8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c3de:	7dba      	ldrb	r2, [r7, #22]
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	9302      	str	r3, [sp, #8]
 800c3e4:	2306      	movs	r3, #6
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	7d7b      	ldrb	r3, [r7, #21]
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	4613      	mov	r3, r2
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	6879      	ldr	r1, [r7, #4]
 800c3f2:	68b8      	ldr	r0, [r7, #8]
 800c3f4:	f004 f926 	bl	8010644 <ip4_output_if>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c3fc:	68b8      	ldr	r0, [r7, #8]
 800c3fe:	f7f9 fedd 	bl	80061bc <pbuf_free>
  return err;
 800c402:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	08013de4 	.word	0x08013de4
 800c414:	0801453c 	.word	0x0801453c
 800c418:	08013e38 	.word	0x08013e38

0800c41c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c41c:	b590      	push	{r4, r7, lr}
 800c41e:	b08b      	sub	sp, #44	; 0x2c
 800c420:	af04      	add	r7, sp, #16
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
 800c428:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <tcp_rst+0x22>
 800c430:	4b1f      	ldr	r3, [pc, #124]	; (800c4b0 <tcp_rst+0x94>)
 800c432:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c436:	491f      	ldr	r1, [pc, #124]	; (800c4b4 <tcp_rst+0x98>)
 800c438:	481f      	ldr	r0, [pc, #124]	; (800c4b8 <tcp_rst+0x9c>)
 800c43a:	f005 fa31 	bl	80118a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c440:	2b00      	cmp	r3, #0
 800c442:	d106      	bne.n	800c452 <tcp_rst+0x36>
 800c444:	4b1a      	ldr	r3, [pc, #104]	; (800c4b0 <tcp_rst+0x94>)
 800c446:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c44a:	491c      	ldr	r1, [pc, #112]	; (800c4bc <tcp_rst+0xa0>)
 800c44c:	481a      	ldr	r0, [pc, #104]	; (800c4b8 <tcp_rst+0x9c>)
 800c44e:	f005 fa27 	bl	80118a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c452:	2300      	movs	r3, #0
 800c454:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c456:	f246 0308 	movw	r3, #24584	; 0x6008
 800c45a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	b29c      	uxth	r4, r3
 800c460:	68b8      	ldr	r0, [r7, #8]
 800c462:	f7f8 fb56 	bl	8004b12 <lwip_htonl>
 800c466:	4602      	mov	r2, r0
 800c468:	8abb      	ldrh	r3, [r7, #20]
 800c46a:	9303      	str	r3, [sp, #12]
 800c46c:	2314      	movs	r3, #20
 800c46e:	9302      	str	r3, [sp, #8]
 800c470:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c472:	9301      	str	r3, [sp, #4]
 800c474:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	4613      	mov	r3, r2
 800c47a:	2200      	movs	r2, #0
 800c47c:	4621      	mov	r1, r4
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f7ff fe94 	bl	800c1ac <tcp_output_alloc_header_common>
 800c484:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00c      	beq.n	800c4a6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c48c:	7dfb      	ldrb	r3, [r7, #23]
 800c48e:	2200      	movs	r2, #0
 800c490:	6939      	ldr	r1, [r7, #16]
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7ff ff3a 	bl	800c30c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	6939      	ldr	r1, [r7, #16]
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f7ff ff72 	bl	800c388 <tcp_output_control_segment>
 800c4a4:	e000      	b.n	800c4a8 <tcp_rst+0x8c>
    return;
 800c4a6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c4a8:	371c      	adds	r7, #28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd90      	pop	{r4, r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	08013de4 	.word	0x08013de4
 800c4b4:	08014568 	.word	0x08014568
 800c4b8:	08013e38 	.word	0x08013e38
 800c4bc:	08014584 	.word	0x08014584

0800c4c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c4c0:	b590      	push	{r4, r7, lr}
 800c4c2:	b087      	sub	sp, #28
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d106      	bne.n	800c4e4 <tcp_send_empty_ack+0x24>
 800c4d6:	4b28      	ldr	r3, [pc, #160]	; (800c578 <tcp_send_empty_ack+0xb8>)
 800c4d8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c4dc:	4927      	ldr	r1, [pc, #156]	; (800c57c <tcp_send_empty_ack+0xbc>)
 800c4de:	4828      	ldr	r0, [pc, #160]	; (800c580 <tcp_send_empty_ack+0xc0>)
 800c4e0:	f005 f9de 	bl	80118a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	f003 0304 	and.w	r3, r3, #4
 800c4ee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c4f0:	7d7b      	ldrb	r3, [r7, #21]
 800c4f2:	b29c      	uxth	r4, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7f8 fb0a 	bl	8004b12 <lwip_htonl>
 800c4fe:	4603      	mov	r3, r0
 800c500:	2200      	movs	r2, #0
 800c502:	4621      	mov	r1, r4
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f7ff fec3 	bl	800c290 <tcp_output_alloc_header>
 800c50a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c50c:	693b      	ldr	r3, [r7, #16]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d109      	bne.n	800c526 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	8b5b      	ldrh	r3, [r3, #26]
 800c516:	f043 0303 	orr.w	r3, r3, #3
 800c51a:	b29a      	uxth	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c520:	f06f 0301 	mvn.w	r3, #1
 800c524:	e023      	b.n	800c56e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c526:	7dbb      	ldrb	r3, [r7, #22]
 800c528:	7dfa      	ldrb	r2, [r7, #23]
 800c52a:	6939      	ldr	r1, [r7, #16]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff feed 	bl	800c30c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	3304      	adds	r3, #4
 800c538:	6939      	ldr	r1, [r7, #16]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7ff ff24 	bl	800c388 <tcp_output_control_segment>
 800c540:	4603      	mov	r3, r0
 800c542:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d007      	beq.n	800c55c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	8b5b      	ldrh	r3, [r3, #26]
 800c550:	f043 0303 	orr.w	r3, r3, #3
 800c554:	b29a      	uxth	r2, r3
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	835a      	strh	r2, [r3, #26]
 800c55a:	e006      	b.n	800c56a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	8b5b      	ldrh	r3, [r3, #26]
 800c560:	f023 0303 	bic.w	r3, r3, #3
 800c564:	b29a      	uxth	r2, r3
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	371c      	adds	r7, #28
 800c572:	46bd      	mov	sp, r7
 800c574:	bd90      	pop	{r4, r7, pc}
 800c576:	bf00      	nop
 800c578:	08013de4 	.word	0x08013de4
 800c57c:	080145a0 	.word	0x080145a0
 800c580:	08013e38 	.word	0x08013e38

0800c584 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c584:	b590      	push	{r4, r7, lr}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c58c:	2300      	movs	r3, #0
 800c58e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <tcp_keepalive+0x20>
 800c596:	4b18      	ldr	r3, [pc, #96]	; (800c5f8 <tcp_keepalive+0x74>)
 800c598:	f640 0224 	movw	r2, #2084	; 0x824
 800c59c:	4917      	ldr	r1, [pc, #92]	; (800c5fc <tcp_keepalive+0x78>)
 800c59e:	4818      	ldr	r0, [pc, #96]	; (800c600 <tcp_keepalive+0x7c>)
 800c5a0:	f005 f97e 	bl	80118a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c5a4:	7dfb      	ldrb	r3, [r7, #23]
 800c5a6:	b29c      	uxth	r4, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7f8 faaf 	bl	8004b12 <lwip_htonl>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff fe68 	bl	800c290 <tcp_output_alloc_header>
 800c5c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d102      	bne.n	800c5ce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c5c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5cc:	e010      	b.n	800c5f0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c5ce:	7dfb      	ldrb	r3, [r7, #23]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	6939      	ldr	r1, [r7, #16]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f7ff fe99 	bl	800c30c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	3304      	adds	r3, #4
 800c5e0:	6939      	ldr	r1, [r7, #16]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7ff fed0 	bl	800c388 <tcp_output_control_segment>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c5ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	371c      	adds	r7, #28
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd90      	pop	{r4, r7, pc}
 800c5f8:	08013de4 	.word	0x08013de4
 800c5fc:	080145c0 	.word	0x080145c0
 800c600:	08013e38 	.word	0x08013e38

0800c604 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c604:	b590      	push	{r4, r7, lr}
 800c606:	b08b      	sub	sp, #44	; 0x2c
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c60c:	2300      	movs	r3, #0
 800c60e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d106      	bne.n	800c626 <tcp_zero_window_probe+0x22>
 800c618:	4b4c      	ldr	r3, [pc, #304]	; (800c74c <tcp_zero_window_probe+0x148>)
 800c61a:	f640 024f 	movw	r2, #2127	; 0x84f
 800c61e:	494c      	ldr	r1, [pc, #304]	; (800c750 <tcp_zero_window_probe+0x14c>)
 800c620:	484c      	ldr	r0, [pc, #304]	; (800c754 <tcp_zero_window_probe+0x150>)
 800c622:	f005 f93d 	bl	80118a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c62a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c62c:	6a3b      	ldr	r3, [r7, #32]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c632:	2300      	movs	r3, #0
 800c634:	e086      	b.n	800c744 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c63c:	2bff      	cmp	r3, #255	; 0xff
 800c63e:	d007      	beq.n	800c650 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c646:	3301      	adds	r3, #1
 800c648:	b2da      	uxtb	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c650:	6a3b      	ldr	r3, [r7, #32]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	899b      	ldrh	r3, [r3, #12]
 800c656:	b29b      	uxth	r3, r3
 800c658:	4618      	mov	r0, r3
 800c65a:	f7f8 fa45 	bl	8004ae8 <lwip_htons>
 800c65e:	4603      	mov	r3, r0
 800c660:	b2db      	uxtb	r3, r3
 800c662:	f003 0301 	and.w	r3, r3, #1
 800c666:	2b00      	cmp	r3, #0
 800c668:	d005      	beq.n	800c676 <tcp_zero_window_probe+0x72>
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	891b      	ldrh	r3, [r3, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d101      	bne.n	800c676 <tcp_zero_window_probe+0x72>
 800c672:	2301      	movs	r3, #1
 800c674:	e000      	b.n	800c678 <tcp_zero_window_probe+0x74>
 800c676:	2300      	movs	r3, #0
 800c678:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c67a:	7ffb      	ldrb	r3, [r7, #31]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	bf0c      	ite	eq
 800c680:	2301      	moveq	r3, #1
 800c682:	2300      	movne	r3, #0
 800c684:	b2db      	uxtb	r3, r3
 800c686:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c68c:	b299      	uxth	r1, r3
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	68db      	ldr	r3, [r3, #12]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	8bba      	ldrh	r2, [r7, #28]
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff fdfa 	bl	800c290 <tcp_output_alloc_header>
 800c69c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d102      	bne.n	800c6aa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a8:	e04c      	b.n	800c744 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c6b0:	7ffb      	ldrb	r3, [r7, #31]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d011      	beq.n	800c6da <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	899b      	ldrh	r3, [r3, #12]
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	b21b      	sxth	r3, r3
 800c6be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c6c2:	b21c      	sxth	r4, r3
 800c6c4:	2011      	movs	r0, #17
 800c6c6:	f7f8 fa0f 	bl	8004ae8 <lwip_htons>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	b21b      	sxth	r3, r3
 800c6ce:	4323      	orrs	r3, r4
 800c6d0:	b21b      	sxth	r3, r3
 800c6d2:	b29a      	uxth	r2, r3
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	819a      	strh	r2, [r3, #12]
 800c6d8:	e010      	b.n	800c6fc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	3314      	adds	r3, #20
 800c6e0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	6858      	ldr	r0, [r3, #4]
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	891a      	ldrh	r2, [r3, #8]
 800c6ec:	6a3b      	ldr	r3, [r7, #32]
 800c6ee:	891b      	ldrh	r3, [r3, #8]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	6939      	ldr	r1, [r7, #16]
 800c6f8:	f7f9 ff5a 	bl	80065b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	68db      	ldr	r3, [r3, #12]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	4618      	mov	r0, r3
 800c704:	f7f8 fa05 	bl	8004b12 <lwip_htonl>
 800c708:	4603      	mov	r3, r0
 800c70a:	3301      	adds	r3, #1
 800c70c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	1ad3      	subs	r3, r2, r3
 800c716:	2b00      	cmp	r3, #0
 800c718:	da02      	bge.n	800c720 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c724:	2200      	movs	r2, #0
 800c726:	69b9      	ldr	r1, [r7, #24]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7ff fdef 	bl	800c30c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	3304      	adds	r3, #4
 800c734:	69b9      	ldr	r1, [r7, #24]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff fe26 	bl	800c388 <tcp_output_control_segment>
 800c73c:	4603      	mov	r3, r0
 800c73e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c740:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c744:	4618      	mov	r0, r3
 800c746:	372c      	adds	r7, #44	; 0x2c
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd90      	pop	{r4, r7, pc}
 800c74c:	08013de4 	.word	0x08013de4
 800c750:	080145dc 	.word	0x080145dc
 800c754:	08013e38 	.word	0x08013e38

0800c758 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c760:	f7fa f814 	bl	800678c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c764:	4b0a      	ldr	r3, [pc, #40]	; (800c790 <tcpip_tcp_timer+0x38>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d103      	bne.n	800c774 <tcpip_tcp_timer+0x1c>
 800c76c:	4b09      	ldr	r3, [pc, #36]	; (800c794 <tcpip_tcp_timer+0x3c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d005      	beq.n	800c780 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c774:	2200      	movs	r2, #0
 800c776:	4908      	ldr	r1, [pc, #32]	; (800c798 <tcpip_tcp_timer+0x40>)
 800c778:	20fa      	movs	r0, #250	; 0xfa
 800c77a:	f000 f8f3 	bl	800c964 <sys_timeout>
 800c77e:	e003      	b.n	800c788 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c780:	4b06      	ldr	r3, [pc, #24]	; (800c79c <tcpip_tcp_timer+0x44>)
 800c782:	2200      	movs	r2, #0
 800c784:	601a      	str	r2, [r3, #0]
  }
}
 800c786:	bf00      	nop
 800c788:	bf00      	nop
 800c78a:	3708      	adds	r7, #8
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	20008798 	.word	0x20008798
 800c794:	2000879c 	.word	0x2000879c
 800c798:	0800c759 	.word	0x0800c759
 800c79c:	200087e4 	.word	0x200087e4

0800c7a0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c7a4:	4b0a      	ldr	r3, [pc, #40]	; (800c7d0 <tcp_timer_needed+0x30>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10f      	bne.n	800c7cc <tcp_timer_needed+0x2c>
 800c7ac:	4b09      	ldr	r3, [pc, #36]	; (800c7d4 <tcp_timer_needed+0x34>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d103      	bne.n	800c7bc <tcp_timer_needed+0x1c>
 800c7b4:	4b08      	ldr	r3, [pc, #32]	; (800c7d8 <tcp_timer_needed+0x38>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d007      	beq.n	800c7cc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c7bc:	4b04      	ldr	r3, [pc, #16]	; (800c7d0 <tcp_timer_needed+0x30>)
 800c7be:	2201      	movs	r2, #1
 800c7c0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	4905      	ldr	r1, [pc, #20]	; (800c7dc <tcp_timer_needed+0x3c>)
 800c7c6:	20fa      	movs	r0, #250	; 0xfa
 800c7c8:	f000 f8cc 	bl	800c964 <sys_timeout>
  }
}
 800c7cc:	bf00      	nop
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	200087e4 	.word	0x200087e4
 800c7d4:	20008798 	.word	0x20008798
 800c7d8:	2000879c 	.word	0x2000879c
 800c7dc:	0800c759 	.word	0x0800c759

0800c7e0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b086      	sub	sp, #24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c7ec:	2006      	movs	r0, #6
 800c7ee:	f7f8 fdf3 	bl	80053d8 <memp_malloc>
 800c7f2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d109      	bne.n	800c80e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d151      	bne.n	800c8a4 <sys_timeout_abs+0xc4>
 800c800:	4b2a      	ldr	r3, [pc, #168]	; (800c8ac <sys_timeout_abs+0xcc>)
 800c802:	22be      	movs	r2, #190	; 0xbe
 800c804:	492a      	ldr	r1, [pc, #168]	; (800c8b0 <sys_timeout_abs+0xd0>)
 800c806:	482b      	ldr	r0, [pc, #172]	; (800c8b4 <sys_timeout_abs+0xd4>)
 800c808:	f005 f84a 	bl	80118a0 <iprintf>
    return;
 800c80c:	e04a      	b.n	800c8a4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2200      	movs	r2, #0
 800c812:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c826:	4b24      	ldr	r3, [pc, #144]	; (800c8b8 <sys_timeout_abs+0xd8>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d103      	bne.n	800c836 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c82e:	4a22      	ldr	r2, [pc, #136]	; (800c8b8 <sys_timeout_abs+0xd8>)
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	6013      	str	r3, [r2, #0]
    return;
 800c834:	e037      	b.n	800c8a6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c836:	693b      	ldr	r3, [r7, #16]
 800c838:	685a      	ldr	r2, [r3, #4]
 800c83a:	4b1f      	ldr	r3, [pc, #124]	; (800c8b8 <sys_timeout_abs+0xd8>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	0fdb      	lsrs	r3, r3, #31
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d007      	beq.n	800c85e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c84e:	4b1a      	ldr	r3, [pc, #104]	; (800c8b8 <sys_timeout_abs+0xd8>)
 800c850:	681a      	ldr	r2, [r3, #0]
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c856:	4a18      	ldr	r2, [pc, #96]	; (800c8b8 <sys_timeout_abs+0xd8>)
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	e023      	b.n	800c8a6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c85e:	4b16      	ldr	r3, [pc, #88]	; (800c8b8 <sys_timeout_abs+0xd8>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	617b      	str	r3, [r7, #20]
 800c864:	e01a      	b.n	800c89c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d00b      	beq.n	800c886 <sys_timeout_abs+0xa6>
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	0fdb      	lsrs	r3, r3, #31
 800c87c:	f003 0301 	and.w	r3, r3, #1
 800c880:	b2db      	uxtb	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d007      	beq.n	800c896 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	601a      	str	r2, [r3, #0]
        break;
 800c894:	e007      	b.n	800c8a6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	617b      	str	r3, [r7, #20]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1e1      	bne.n	800c866 <sys_timeout_abs+0x86>
 800c8a2:	e000      	b.n	800c8a6 <sys_timeout_abs+0xc6>
    return;
 800c8a4:	bf00      	nop
      }
    }
  }
}
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	08014600 	.word	0x08014600
 800c8b0:	08014634 	.word	0x08014634
 800c8b4:	08014674 	.word	0x08014674
 800c8b8:	200087dc 	.word	0x200087dc

0800c8bc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	4798      	blx	r3

  now = sys_now();
 800c8ce:	f7f7 fef3 	bl	80046b8 <sys_now>
 800c8d2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	4b0f      	ldr	r3, [pc, #60]	; (800c918 <lwip_cyclic_timer+0x5c>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4413      	add	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	0fdb      	lsrs	r3, r3, #31
 800c8e8:	f003 0301 	and.w	r3, r3, #1
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d009      	beq.n	800c906 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	4907      	ldr	r1, [pc, #28]	; (800c91c <lwip_cyclic_timer+0x60>)
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7ff ff6e 	bl	800c7e0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c904:	e004      	b.n	800c910 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	4904      	ldr	r1, [pc, #16]	; (800c91c <lwip_cyclic_timer+0x60>)
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f7ff ff68 	bl	800c7e0 <sys_timeout_abs>
}
 800c910:	bf00      	nop
 800c912:	3718      	adds	r7, #24
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	200087e0 	.word	0x200087e0
 800c91c:	0800c8bd 	.word	0x0800c8bd

0800c920 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c926:	2301      	movs	r3, #1
 800c928:	607b      	str	r3, [r7, #4]
 800c92a:	e00e      	b.n	800c94a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c92c:	4a0b      	ldr	r2, [pc, #44]	; (800c95c <sys_timeouts_init+0x3c>)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	4a08      	ldr	r2, [pc, #32]	; (800c95c <sys_timeouts_init+0x3c>)
 800c93a:	4413      	add	r3, r2
 800c93c:	461a      	mov	r2, r3
 800c93e:	4908      	ldr	r1, [pc, #32]	; (800c960 <sys_timeouts_init+0x40>)
 800c940:	f000 f810 	bl	800c964 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	3301      	adds	r3, #1
 800c948:	607b      	str	r3, [r7, #4]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b04      	cmp	r3, #4
 800c94e:	d9ed      	bls.n	800c92c <sys_timeouts_init+0xc>
  }
}
 800c950:	bf00      	nop
 800c952:	bf00      	nop
 800c954:	3708      	adds	r7, #8
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	0801558c 	.word	0x0801558c
 800c960:	0800c8bd 	.word	0x0800c8bd

0800c964 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b086      	sub	sp, #24
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	60b9      	str	r1, [r7, #8]
 800c96e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c976:	d306      	bcc.n	800c986 <sys_timeout+0x22>
 800c978:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <sys_timeout+0x40>)
 800c97a:	f240 1229 	movw	r2, #297	; 0x129
 800c97e:	490a      	ldr	r1, [pc, #40]	; (800c9a8 <sys_timeout+0x44>)
 800c980:	480a      	ldr	r0, [pc, #40]	; (800c9ac <sys_timeout+0x48>)
 800c982:	f004 ff8d 	bl	80118a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c986:	f7f7 fe97 	bl	80046b8 <sys_now>
 800c98a:	4602      	mov	r2, r0
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	4413      	add	r3, r2
 800c990:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	68b9      	ldr	r1, [r7, #8]
 800c996:	6978      	ldr	r0, [r7, #20]
 800c998:	f7ff ff22 	bl	800c7e0 <sys_timeout_abs>
#endif
}
 800c99c:	bf00      	nop
 800c99e:	3718      	adds	r7, #24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	08014600 	.word	0x08014600
 800c9a8:	0801469c 	.word	0x0801469c
 800c9ac:	08014674 	.word	0x08014674

0800c9b0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c9b6:	f7f7 fe7f 	bl	80046b8 <sys_now>
 800c9ba:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c9bc:	4b1a      	ldr	r3, [pc, #104]	; (800ca28 <sys_check_timeouts+0x78>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d001      	beq.n	800c9ca <sys_check_timeouts+0x1a>
 800c9c6:	f7f9 f8bf 	bl	8005b48 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c9ca:	4b18      	ldr	r3, [pc, #96]	; (800ca2c <sys_check_timeouts+0x7c>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d022      	beq.n	800ca1c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	68fa      	ldr	r2, [r7, #12]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	0fdb      	lsrs	r3, r3, #31
 800c9e0:	f003 0301 	and.w	r3, r3, #1
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d11a      	bne.n	800ca20 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a0f      	ldr	r2, [pc, #60]	; (800ca2c <sys_check_timeouts+0x7c>)
 800c9f0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	68db      	ldr	r3, [r3, #12]
 800c9fc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	4a0b      	ldr	r2, [pc, #44]	; (800ca30 <sys_check_timeouts+0x80>)
 800ca04:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ca06:	68b9      	ldr	r1, [r7, #8]
 800ca08:	2006      	movs	r0, #6
 800ca0a:	f7f8 fd55 	bl	80054b8 <memp_free>
    if (handler != NULL) {
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d0d3      	beq.n	800c9bc <sys_check_timeouts+0xc>
      handler(arg);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6838      	ldr	r0, [r7, #0]
 800ca18:	4798      	blx	r3
  do {
 800ca1a:	e7cf      	b.n	800c9bc <sys_check_timeouts+0xc>
      return;
 800ca1c:	bf00      	nop
 800ca1e:	e000      	b.n	800ca22 <sys_check_timeouts+0x72>
      return;
 800ca20:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ca22:	3710      	adds	r7, #16
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	20008789 	.word	0x20008789
 800ca2c:	200087dc 	.word	0x200087dc
 800ca30:	200087e0 	.word	0x200087e0

0800ca34 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ca38:	f004 fe32 	bl	80116a0 <rand>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ca4a:	b29a      	uxth	r2, r3
 800ca4c:	4b01      	ldr	r3, [pc, #4]	; (800ca54 <udp_init+0x20>)
 800ca4e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ca50:	bf00      	nop
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	20000028 	.word	0x20000028

0800ca58 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ca62:	4b17      	ldr	r3, [pc, #92]	; (800cac0 <udp_new_port+0x68>)
 800ca64:	881b      	ldrh	r3, [r3, #0]
 800ca66:	1c5a      	adds	r2, r3, #1
 800ca68:	b291      	uxth	r1, r2
 800ca6a:	4a15      	ldr	r2, [pc, #84]	; (800cac0 <udp_new_port+0x68>)
 800ca6c:	8011      	strh	r1, [r2, #0]
 800ca6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d103      	bne.n	800ca7e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ca76:	4b12      	ldr	r3, [pc, #72]	; (800cac0 <udp_new_port+0x68>)
 800ca78:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ca7c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca7e:	4b11      	ldr	r3, [pc, #68]	; (800cac4 <udp_new_port+0x6c>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	603b      	str	r3, [r7, #0]
 800ca84:	e011      	b.n	800caaa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	8a5a      	ldrh	r2, [r3, #18]
 800ca8a:	4b0d      	ldr	r3, [pc, #52]	; (800cac0 <udp_new_port+0x68>)
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d108      	bne.n	800caa4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ca92:	88fb      	ldrh	r3, [r7, #6]
 800ca94:	3301      	adds	r3, #1
 800ca96:	80fb      	strh	r3, [r7, #6]
 800ca98:	88fb      	ldrh	r3, [r7, #6]
 800ca9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca9e:	d3e0      	bcc.n	800ca62 <udp_new_port+0xa>
        return 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	e007      	b.n	800cab4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	603b      	str	r3, [r7, #0]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1ea      	bne.n	800ca86 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800cab0:	4b03      	ldr	r3, [pc, #12]	; (800cac0 <udp_new_port+0x68>)
 800cab2:	881b      	ldrh	r3, [r3, #0]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	20000028 	.word	0x20000028
 800cac4:	200087e8 	.word	0x200087e8

0800cac8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	4613      	mov	r3, r2
 800cad4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d105      	bne.n	800cae8 <udp_input_local_match+0x20>
 800cadc:	4b27      	ldr	r3, [pc, #156]	; (800cb7c <udp_input_local_match+0xb4>)
 800cade:	2287      	movs	r2, #135	; 0x87
 800cae0:	4927      	ldr	r1, [pc, #156]	; (800cb80 <udp_input_local_match+0xb8>)
 800cae2:	4828      	ldr	r0, [pc, #160]	; (800cb84 <udp_input_local_match+0xbc>)
 800cae4:	f004 fedc 	bl	80118a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d105      	bne.n	800cafa <udp_input_local_match+0x32>
 800caee:	4b23      	ldr	r3, [pc, #140]	; (800cb7c <udp_input_local_match+0xb4>)
 800caf0:	2288      	movs	r2, #136	; 0x88
 800caf2:	4925      	ldr	r1, [pc, #148]	; (800cb88 <udp_input_local_match+0xc0>)
 800caf4:	4823      	ldr	r0, [pc, #140]	; (800cb84 <udp_input_local_match+0xbc>)
 800caf6:	f004 fed3 	bl	80118a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	7a1b      	ldrb	r3, [r3, #8]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	7a1a      	ldrb	r2, [r3, #8]
 800cb06:	4b21      	ldr	r3, [pc, #132]	; (800cb8c <udp_input_local_match+0xc4>)
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb0e:	3301      	adds	r3, #1
 800cb10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d001      	beq.n	800cb1a <udp_input_local_match+0x52>
    return 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	e02b      	b.n	800cb72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800cb1a:	79fb      	ldrb	r3, [r7, #7]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d018      	beq.n	800cb52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d013      	beq.n	800cb4e <udp_input_local_match+0x86>
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00f      	beq.n	800cb4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cb2e:	4b17      	ldr	r3, [pc, #92]	; (800cb8c <udp_input_local_match+0xc4>)
 800cb30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800cb32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb36:	d00a      	beq.n	800cb4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	4b13      	ldr	r3, [pc, #76]	; (800cb8c <udp_input_local_match+0xc4>)
 800cb3e:	695b      	ldr	r3, [r3, #20]
 800cb40:	405a      	eors	r2, r3
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	3308      	adds	r3, #8
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d110      	bne.n	800cb70 <udp_input_local_match+0xa8>
          return 1;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e00f      	b.n	800cb72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d009      	beq.n	800cb6c <udp_input_local_match+0xa4>
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d005      	beq.n	800cb6c <udp_input_local_match+0xa4>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681a      	ldr	r2, [r3, #0]
 800cb64:	4b09      	ldr	r3, [pc, #36]	; (800cb8c <udp_input_local_match+0xc4>)
 800cb66:	695b      	ldr	r3, [r3, #20]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d101      	bne.n	800cb70 <udp_input_local_match+0xa8>
        return 1;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e000      	b.n	800cb72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800cb70:	2300      	movs	r3, #0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	080146e8 	.word	0x080146e8
 800cb80:	08014718 	.word	0x08014718
 800cb84:	0801473c 	.word	0x0801473c
 800cb88:	08014764 	.word	0x08014764
 800cb8c:	200051fc 	.word	0x200051fc

0800cb90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cb90:	b590      	push	{r4, r7, lr}
 800cb92:	b08d      	sub	sp, #52	; 0x34
 800cb94:	af02      	add	r7, sp, #8
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d105      	bne.n	800cbb0 <udp_input+0x20>
 800cba4:	4b7c      	ldr	r3, [pc, #496]	; (800cd98 <udp_input+0x208>)
 800cba6:	22cf      	movs	r2, #207	; 0xcf
 800cba8:	497c      	ldr	r1, [pc, #496]	; (800cd9c <udp_input+0x20c>)
 800cbaa:	487d      	ldr	r0, [pc, #500]	; (800cda0 <udp_input+0x210>)
 800cbac:	f004 fe78 	bl	80118a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d105      	bne.n	800cbc2 <udp_input+0x32>
 800cbb6:	4b78      	ldr	r3, [pc, #480]	; (800cd98 <udp_input+0x208>)
 800cbb8:	22d0      	movs	r2, #208	; 0xd0
 800cbba:	497a      	ldr	r1, [pc, #488]	; (800cda4 <udp_input+0x214>)
 800cbbc:	4878      	ldr	r0, [pc, #480]	; (800cda0 <udp_input+0x210>)
 800cbbe:	f004 fe6f 	bl	80118a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	895b      	ldrh	r3, [r3, #10]
 800cbc6:	2b07      	cmp	r3, #7
 800cbc8:	d803      	bhi.n	800cbd2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7f9 faf6 	bl	80061bc <pbuf_free>
    goto end;
 800cbd0:	e0de      	b.n	800cd90 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cbd8:	4b73      	ldr	r3, [pc, #460]	; (800cda8 <udp_input+0x218>)
 800cbda:	695b      	ldr	r3, [r3, #20]
 800cbdc:	4a72      	ldr	r2, [pc, #456]	; (800cda8 <udp_input+0x218>)
 800cbde:	6812      	ldr	r2, [r2, #0]
 800cbe0:	4611      	mov	r1, r2
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f003 fe06 	bl	80107f4 <ip4_addr_isbroadcast_u32>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	881b      	ldrh	r3, [r3, #0]
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7f7 ff78 	bl	8004ae8 <lwip_htons>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	885b      	ldrh	r3, [r3, #2]
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7f7 ff70 	bl	8004ae8 <lwip_htons>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800cc10:	2300      	movs	r3, #0
 800cc12:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800cc14:	2300      	movs	r3, #0
 800cc16:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc18:	4b64      	ldr	r3, [pc, #400]	; (800cdac <udp_input+0x21c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc1e:	e054      	b.n	800ccca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	8a5b      	ldrh	r3, [r3, #18]
 800cc24:	89fa      	ldrh	r2, [r7, #14]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d14a      	bne.n	800ccc0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800cc2a:	7cfb      	ldrb	r3, [r7, #19]
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc32:	f7ff ff49 	bl	800cac8 <udp_input_local_match>
 800cc36:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d041      	beq.n	800ccc0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	7c1b      	ldrb	r3, [r3, #16]
 800cc40:	f003 0304 	and.w	r3, r3, #4
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d11d      	bne.n	800cc84 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d102      	bne.n	800cc54 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc50:	61fb      	str	r3, [r7, #28]
 800cc52:	e017      	b.n	800cc84 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800cc54:	7cfb      	ldrb	r3, [r7, #19]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d014      	beq.n	800cc84 <udp_input+0xf4>
 800cc5a:	4b53      	ldr	r3, [pc, #332]	; (800cda8 <udp_input+0x218>)
 800cc5c:	695b      	ldr	r3, [r3, #20]
 800cc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc62:	d10f      	bne.n	800cc84 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cc64:	69fb      	ldr	r3, [r7, #28]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d008      	beq.n	800cc84 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	3304      	adds	r3, #4
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d101      	bne.n	800cc84 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800cc80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc82:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800cc84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc86:	8a9b      	ldrh	r3, [r3, #20]
 800cc88:	8a3a      	ldrh	r2, [r7, #16]
 800cc8a:	429a      	cmp	r2, r3
 800cc8c:	d118      	bne.n	800ccc0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc90:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d005      	beq.n	800cca2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	4b43      	ldr	r3, [pc, #268]	; (800cda8 <udp_input+0x218>)
 800cc9c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d10e      	bne.n	800ccc0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800cca2:	6a3b      	ldr	r3, [r7, #32]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d014      	beq.n	800ccd2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800cca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccaa:	68da      	ldr	r2, [r3, #12]
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ccb0:	4b3e      	ldr	r3, [pc, #248]	; (800cdac <udp_input+0x21c>)
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ccb8:	4a3c      	ldr	r2, [pc, #240]	; (800cdac <udp_input+0x21c>)
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ccbe:	e008      	b.n	800ccd2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	627b      	str	r3, [r7, #36]	; 0x24
 800ccca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1a7      	bne.n	800cc20 <udp_input+0x90>
 800ccd0:	e000      	b.n	800ccd4 <udp_input+0x144>
        break;
 800ccd2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d101      	bne.n	800ccde <udp_input+0x14e>
    pcb = uncon_pcb;
 800ccda:	69fb      	ldr	r3, [r7, #28]
 800ccdc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ccde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d002      	beq.n	800ccea <udp_input+0x15a>
    for_us = 1;
 800cce4:	2301      	movs	r3, #1
 800cce6:	76fb      	strb	r3, [r7, #27]
 800cce8:	e00a      	b.n	800cd00 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	3304      	adds	r3, #4
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	4b2d      	ldr	r3, [pc, #180]	; (800cda8 <udp_input+0x218>)
 800ccf2:	695b      	ldr	r3, [r3, #20]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	bf0c      	ite	eq
 800ccf8:	2301      	moveq	r3, #1
 800ccfa:	2300      	movne	r3, #0
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800cd00:	7efb      	ldrb	r3, [r7, #27]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d041      	beq.n	800cd8a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cd06:	2108      	movs	r1, #8
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7f9 f9d1 	bl	80060b0 <pbuf_remove_header>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00a      	beq.n	800cd2a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cd14:	4b20      	ldr	r3, [pc, #128]	; (800cd98 <udp_input+0x208>)
 800cd16:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cd1a:	4925      	ldr	r1, [pc, #148]	; (800cdb0 <udp_input+0x220>)
 800cd1c:	4820      	ldr	r0, [pc, #128]	; (800cda0 <udp_input+0x210>)
 800cd1e:	f004 fdbf 	bl	80118a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7f9 fa4a 	bl	80061bc <pbuf_free>
      goto end;
 800cd28:	e032      	b.n	800cd90 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d012      	beq.n	800cd56 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	699b      	ldr	r3, [r3, #24]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d00a      	beq.n	800cd4e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	699c      	ldr	r4, [r3, #24]
 800cd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3e:	69d8      	ldr	r0, [r3, #28]
 800cd40:	8a3b      	ldrh	r3, [r7, #16]
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	4b1b      	ldr	r3, [pc, #108]	; (800cdb4 <udp_input+0x224>)
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cd4a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800cd4c:	e021      	b.n	800cd92 <udp_input+0x202>
        pbuf_free(p);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f7f9 fa34 	bl	80061bc <pbuf_free>
        goto end;
 800cd54:	e01c      	b.n	800cd90 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cd56:	7cfb      	ldrb	r3, [r7, #19]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d112      	bne.n	800cd82 <udp_input+0x1f2>
 800cd5c:	4b12      	ldr	r3, [pc, #72]	; (800cda8 <udp_input+0x218>)
 800cd5e:	695b      	ldr	r3, [r3, #20]
 800cd60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd64:	2be0      	cmp	r3, #224	; 0xe0
 800cd66:	d00c      	beq.n	800cd82 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cd68:	4b0f      	ldr	r3, [pc, #60]	; (800cda8 <udp_input+0x218>)
 800cd6a:	899b      	ldrh	r3, [r3, #12]
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	b21b      	sxth	r3, r3
 800cd72:	4619      	mov	r1, r3
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f7f9 fa0e 	bl	8006196 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cd7a:	2103      	movs	r1, #3
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f003 f9fb 	bl	8010178 <icmp_dest_unreach>
      pbuf_free(p);
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f7f9 fa1a 	bl	80061bc <pbuf_free>
  return;
 800cd88:	e003      	b.n	800cd92 <udp_input+0x202>
    pbuf_free(p);
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7f9 fa16 	bl	80061bc <pbuf_free>
  return;
 800cd90:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cd92:	372c      	adds	r7, #44	; 0x2c
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd90      	pop	{r4, r7, pc}
 800cd98:	080146e8 	.word	0x080146e8
 800cd9c:	0801478c 	.word	0x0801478c
 800cda0:	0801473c 	.word	0x0801473c
 800cda4:	080147a4 	.word	0x080147a4
 800cda8:	200051fc 	.word	0x200051fc
 800cdac:	200087e8 	.word	0x200087e8
 800cdb0:	080147c0 	.word	0x080147c0
 800cdb4:	2000520c 	.word	0x2000520c

0800cdb8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b088      	sub	sp, #32
 800cdbc:	af02      	add	r7, sp, #8
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
 800cdc4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d109      	bne.n	800cde0 <udp_sendto_if+0x28>
 800cdcc:	4b2e      	ldr	r3, [pc, #184]	; (800ce88 <udp_sendto_if+0xd0>)
 800cdce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cdd2:	492e      	ldr	r1, [pc, #184]	; (800ce8c <udp_sendto_if+0xd4>)
 800cdd4:	482e      	ldr	r0, [pc, #184]	; (800ce90 <udp_sendto_if+0xd8>)
 800cdd6:	f004 fd63 	bl	80118a0 <iprintf>
 800cdda:	f06f 030f 	mvn.w	r3, #15
 800cdde:	e04f      	b.n	800ce80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d109      	bne.n	800cdfa <udp_sendto_if+0x42>
 800cde6:	4b28      	ldr	r3, [pc, #160]	; (800ce88 <udp_sendto_if+0xd0>)
 800cde8:	f240 2281 	movw	r2, #641	; 0x281
 800cdec:	4929      	ldr	r1, [pc, #164]	; (800ce94 <udp_sendto_if+0xdc>)
 800cdee:	4828      	ldr	r0, [pc, #160]	; (800ce90 <udp_sendto_if+0xd8>)
 800cdf0:	f004 fd56 	bl	80118a0 <iprintf>
 800cdf4:	f06f 030f 	mvn.w	r3, #15
 800cdf8:	e042      	b.n	800ce80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d109      	bne.n	800ce14 <udp_sendto_if+0x5c>
 800ce00:	4b21      	ldr	r3, [pc, #132]	; (800ce88 <udp_sendto_if+0xd0>)
 800ce02:	f240 2282 	movw	r2, #642	; 0x282
 800ce06:	4924      	ldr	r1, [pc, #144]	; (800ce98 <udp_sendto_if+0xe0>)
 800ce08:	4821      	ldr	r0, [pc, #132]	; (800ce90 <udp_sendto_if+0xd8>)
 800ce0a:	f004 fd49 	bl	80118a0 <iprintf>
 800ce0e:	f06f 030f 	mvn.w	r3, #15
 800ce12:	e035      	b.n	800ce80 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d109      	bne.n	800ce2e <udp_sendto_if+0x76>
 800ce1a:	4b1b      	ldr	r3, [pc, #108]	; (800ce88 <udp_sendto_if+0xd0>)
 800ce1c:	f240 2283 	movw	r2, #643	; 0x283
 800ce20:	491e      	ldr	r1, [pc, #120]	; (800ce9c <udp_sendto_if+0xe4>)
 800ce22:	481b      	ldr	r0, [pc, #108]	; (800ce90 <udp_sendto_if+0xd8>)
 800ce24:	f004 fd3c 	bl	80118a0 <iprintf>
 800ce28:	f06f 030f 	mvn.w	r3, #15
 800ce2c:	e028      	b.n	800ce80 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d009      	beq.n	800ce48 <udp_sendto_if+0x90>
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d005      	beq.n	800ce48 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ce44:	2be0      	cmp	r3, #224	; 0xe0
 800ce46:	d103      	bne.n	800ce50 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800ce48:	6a3b      	ldr	r3, [r7, #32]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	617b      	str	r3, [r7, #20]
 800ce4e:	e00b      	b.n	800ce68 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	3304      	adds	r3, #4
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d002      	beq.n	800ce64 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800ce5e:	f06f 0303 	mvn.w	r3, #3
 800ce62:	e00d      	b.n	800ce80 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ce68:	887a      	ldrh	r2, [r7, #2]
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	6a3b      	ldr	r3, [r7, #32]
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	4613      	mov	r3, r2
 800ce74:	687a      	ldr	r2, [r7, #4]
 800ce76:	68b9      	ldr	r1, [r7, #8]
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	f000 f811 	bl	800cea0 <udp_sendto_if_src>
 800ce7e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3718      	adds	r7, #24
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	080146e8 	.word	0x080146e8
 800ce8c:	0801485c 	.word	0x0801485c
 800ce90:	0801473c 	.word	0x0801473c
 800ce94:	08014878 	.word	0x08014878
 800ce98:	08014894 	.word	0x08014894
 800ce9c:	080148b4 	.word	0x080148b4

0800cea0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08c      	sub	sp, #48	; 0x30
 800cea4:	af04      	add	r7, sp, #16
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d109      	bne.n	800cec8 <udp_sendto_if_src+0x28>
 800ceb4:	4b65      	ldr	r3, [pc, #404]	; (800d04c <udp_sendto_if_src+0x1ac>)
 800ceb6:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ceba:	4965      	ldr	r1, [pc, #404]	; (800d050 <udp_sendto_if_src+0x1b0>)
 800cebc:	4865      	ldr	r0, [pc, #404]	; (800d054 <udp_sendto_if_src+0x1b4>)
 800cebe:	f004 fcef 	bl	80118a0 <iprintf>
 800cec2:	f06f 030f 	mvn.w	r3, #15
 800cec6:	e0bc      	b.n	800d042 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d109      	bne.n	800cee2 <udp_sendto_if_src+0x42>
 800cece:	4b5f      	ldr	r3, [pc, #380]	; (800d04c <udp_sendto_if_src+0x1ac>)
 800ced0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ced4:	4960      	ldr	r1, [pc, #384]	; (800d058 <udp_sendto_if_src+0x1b8>)
 800ced6:	485f      	ldr	r0, [pc, #380]	; (800d054 <udp_sendto_if_src+0x1b4>)
 800ced8:	f004 fce2 	bl	80118a0 <iprintf>
 800cedc:	f06f 030f 	mvn.w	r3, #15
 800cee0:	e0af      	b.n	800d042 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d109      	bne.n	800cefc <udp_sendto_if_src+0x5c>
 800cee8:	4b58      	ldr	r3, [pc, #352]	; (800d04c <udp_sendto_if_src+0x1ac>)
 800ceea:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ceee:	495b      	ldr	r1, [pc, #364]	; (800d05c <udp_sendto_if_src+0x1bc>)
 800cef0:	4858      	ldr	r0, [pc, #352]	; (800d054 <udp_sendto_if_src+0x1b4>)
 800cef2:	f004 fcd5 	bl	80118a0 <iprintf>
 800cef6:	f06f 030f 	mvn.w	r3, #15
 800cefa:	e0a2      	b.n	800d042 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d109      	bne.n	800cf16 <udp_sendto_if_src+0x76>
 800cf02:	4b52      	ldr	r3, [pc, #328]	; (800d04c <udp_sendto_if_src+0x1ac>)
 800cf04:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800cf08:	4955      	ldr	r1, [pc, #340]	; (800d060 <udp_sendto_if_src+0x1c0>)
 800cf0a:	4852      	ldr	r0, [pc, #328]	; (800d054 <udp_sendto_if_src+0x1b4>)
 800cf0c:	f004 fcc8 	bl	80118a0 <iprintf>
 800cf10:	f06f 030f 	mvn.w	r3, #15
 800cf14:	e095      	b.n	800d042 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800cf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d109      	bne.n	800cf30 <udp_sendto_if_src+0x90>
 800cf1c:	4b4b      	ldr	r3, [pc, #300]	; (800d04c <udp_sendto_if_src+0x1ac>)
 800cf1e:	f240 22d5 	movw	r2, #725	; 0x2d5
 800cf22:	4950      	ldr	r1, [pc, #320]	; (800d064 <udp_sendto_if_src+0x1c4>)
 800cf24:	484b      	ldr	r0, [pc, #300]	; (800d054 <udp_sendto_if_src+0x1b4>)
 800cf26:	f004 fcbb 	bl	80118a0 <iprintf>
 800cf2a:	f06f 030f 	mvn.w	r3, #15
 800cf2e:	e088      	b.n	800d042 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	8a5b      	ldrh	r3, [r3, #18]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d10f      	bne.n	800cf58 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800cf38:	68f9      	ldr	r1, [r7, #12]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	8a5b      	ldrh	r3, [r3, #18]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	68f8      	ldr	r0, [r7, #12]
 800cf42:	f000 f893 	bl	800d06c <udp_bind>
 800cf46:	4603      	mov	r3, r0
 800cf48:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800cf4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d002      	beq.n	800cf58 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800cf52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cf56:	e074      	b.n	800d042 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	891b      	ldrh	r3, [r3, #8]
 800cf5c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d902      	bls.n	800cf6a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800cf64:	f04f 33ff 	mov.w	r3, #4294967295
 800cf68:	e06b      	b.n	800d042 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800cf6a:	2108      	movs	r1, #8
 800cf6c:	68b8      	ldr	r0, [r7, #8]
 800cf6e:	f7f9 f88f 	bl	8006090 <pbuf_add_header>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d015      	beq.n	800cfa4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800cf78:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf7c:	2108      	movs	r1, #8
 800cf7e:	2022      	movs	r0, #34	; 0x22
 800cf80:	f7f8 fe38 	bl	8005bf4 <pbuf_alloc>
 800cf84:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d102      	bne.n	800cf92 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800cf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf90:	e057      	b.n	800d042 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800cf92:	68bb      	ldr	r3, [r7, #8]
 800cf94:	891b      	ldrh	r3, [r3, #8]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d006      	beq.n	800cfa8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800cf9a:	68b9      	ldr	r1, [r7, #8]
 800cf9c:	69f8      	ldr	r0, [r7, #28]
 800cf9e:	f7f9 fa25 	bl	80063ec <pbuf_chain>
 800cfa2:	e001      	b.n	800cfa8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800cfa8:	69fb      	ldr	r3, [r7, #28]
 800cfaa:	895b      	ldrh	r3, [r3, #10]
 800cfac:	2b07      	cmp	r3, #7
 800cfae:	d806      	bhi.n	800cfbe <udp_sendto_if_src+0x11e>
 800cfb0:	4b26      	ldr	r3, [pc, #152]	; (800d04c <udp_sendto_if_src+0x1ac>)
 800cfb2:	f240 320d 	movw	r2, #781	; 0x30d
 800cfb6:	492c      	ldr	r1, [pc, #176]	; (800d068 <udp_sendto_if_src+0x1c8>)
 800cfb8:	4826      	ldr	r0, [pc, #152]	; (800d054 <udp_sendto_if_src+0x1b4>)
 800cfba:	f004 fc71 	bl	80118a0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800cfbe:	69fb      	ldr	r3, [r7, #28]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	8a5b      	ldrh	r3, [r3, #18]
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7f7 fd8d 	bl	8004ae8 <lwip_htons>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800cfd6:	887b      	ldrh	r3, [r7, #2]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7f7 fd85 	bl	8004ae8 <lwip_htons>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	719a      	strb	r2, [r3, #6]
 800cfec:	2200      	movs	r2, #0
 800cfee:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	891b      	ldrh	r3, [r3, #8]
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7f7 fd77 	bl	8004ae8 <lwip_htons>
 800cffa:	4603      	mov	r3, r0
 800cffc:	461a      	mov	r2, r3
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800d002:	2311      	movs	r3, #17
 800d004:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	7adb      	ldrb	r3, [r3, #11]
 800d00a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	7a9b      	ldrb	r3, [r3, #10]
 800d010:	7cb9      	ldrb	r1, [r7, #18]
 800d012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d014:	9202      	str	r2, [sp, #8]
 800d016:	7cfa      	ldrb	r2, [r7, #19]
 800d018:	9201      	str	r2, [sp, #4]
 800d01a:	9300      	str	r3, [sp, #0]
 800d01c:	460b      	mov	r3, r1
 800d01e:	687a      	ldr	r2, [r7, #4]
 800d020:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d022:	69f8      	ldr	r0, [r7, #28]
 800d024:	f003 fb38 	bl	8010698 <ip4_output_if_src>
 800d028:	4603      	mov	r3, r0
 800d02a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800d02c:	69fa      	ldr	r2, [r7, #28]
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	429a      	cmp	r2, r3
 800d032:	d004      	beq.n	800d03e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800d034:	69f8      	ldr	r0, [r7, #28]
 800d036:	f7f9 f8c1 	bl	80061bc <pbuf_free>
    q = NULL;
 800d03a:	2300      	movs	r3, #0
 800d03c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800d03e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3720      	adds	r7, #32
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	080146e8 	.word	0x080146e8
 800d050:	080148d4 	.word	0x080148d4
 800d054:	0801473c 	.word	0x0801473c
 800d058:	080148f4 	.word	0x080148f4
 800d05c:	08014914 	.word	0x08014914
 800d060:	08014938 	.word	0x08014938
 800d064:	0801495c 	.word	0x0801495c
 800d068:	08014980 	.word	0x08014980

0800d06c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	4613      	mov	r3, r2
 800d078:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800d080:	4b39      	ldr	r3, [pc, #228]	; (800d168 <udp_bind+0xfc>)
 800d082:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d109      	bne.n	800d09e <udp_bind+0x32>
 800d08a:	4b38      	ldr	r3, [pc, #224]	; (800d16c <udp_bind+0x100>)
 800d08c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d090:	4937      	ldr	r1, [pc, #220]	; (800d170 <udp_bind+0x104>)
 800d092:	4838      	ldr	r0, [pc, #224]	; (800d174 <udp_bind+0x108>)
 800d094:	f004 fc04 	bl	80118a0 <iprintf>
 800d098:	f06f 030f 	mvn.w	r3, #15
 800d09c:	e060      	b.n	800d160 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d0a2:	4b35      	ldr	r3, [pc, #212]	; (800d178 <udp_bind+0x10c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	617b      	str	r3, [r7, #20]
 800d0a8:	e009      	b.n	800d0be <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	697b      	ldr	r3, [r7, #20]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d102      	bne.n	800d0b8 <udp_bind+0x4c>
      rebind = 1;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	74fb      	strb	r3, [r7, #19]
      break;
 800d0b6:	e005      	b.n	800d0c4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	617b      	str	r3, [r7, #20]
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1f2      	bne.n	800d0aa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d0c4:	88fb      	ldrh	r3, [r7, #6]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d109      	bne.n	800d0de <udp_bind+0x72>
    port = udp_new_port();
 800d0ca:	f7ff fcc5 	bl	800ca58 <udp_new_port>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d0d2:	88fb      	ldrh	r3, [r7, #6]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d12c      	bne.n	800d132 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800d0d8:	f06f 0307 	mvn.w	r3, #7
 800d0dc:	e040      	b.n	800d160 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d0de:	4b26      	ldr	r3, [pc, #152]	; (800d178 <udp_bind+0x10c>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	617b      	str	r3, [r7, #20]
 800d0e4:	e022      	b.n	800d12c <udp_bind+0xc0>
      if (pcb != ipcb) {
 800d0e6:	68fa      	ldr	r2, [r7, #12]
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d01b      	beq.n	800d126 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	8a5b      	ldrh	r3, [r3, #18]
 800d0f2:	88fa      	ldrh	r2, [r7, #6]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d116      	bne.n	800d126 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800d100:	429a      	cmp	r2, r3
 800d102:	d00d      	beq.n	800d120 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00a      	beq.n	800d120 <udp_bind+0xb4>
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d006      	beq.n	800d120 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d112:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d114:	2b00      	cmp	r3, #0
 800d116:	d003      	beq.n	800d120 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d102      	bne.n	800d126 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800d120:	f06f 0307 	mvn.w	r3, #7
 800d124:	e01c      	b.n	800d160 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	617b      	str	r3, [r7, #20]
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1d9      	bne.n	800d0e6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <udp_bind+0xd2>
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	e000      	b.n	800d140 <udp_bind+0xd4>
 800d13e:	2300      	movs	r3, #0
 800d140:	68fa      	ldr	r2, [r7, #12]
 800d142:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	88fa      	ldrh	r2, [r7, #6]
 800d148:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d14a:	7cfb      	ldrb	r3, [r7, #19]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d106      	bne.n	800d15e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d150:	4b09      	ldr	r3, [pc, #36]	; (800d178 <udp_bind+0x10c>)
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800d158:	4a07      	ldr	r2, [pc, #28]	; (800d178 <udp_bind+0x10c>)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d15e:	2300      	movs	r3, #0
}
 800d160:	4618      	mov	r0, r3
 800d162:	3718      	adds	r7, #24
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	080155b4 	.word	0x080155b4
 800d16c:	080146e8 	.word	0x080146e8
 800d170:	080149b0 	.word	0x080149b0
 800d174:	0801473c 	.word	0x0801473c
 800d178:	200087e8 	.word	0x200087e8

0800d17c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	4613      	mov	r3, r2
 800d188:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d109      	bne.n	800d1a4 <udp_connect+0x28>
 800d190:	4b2c      	ldr	r3, [pc, #176]	; (800d244 <udp_connect+0xc8>)
 800d192:	f240 4235 	movw	r2, #1077	; 0x435
 800d196:	492c      	ldr	r1, [pc, #176]	; (800d248 <udp_connect+0xcc>)
 800d198:	482c      	ldr	r0, [pc, #176]	; (800d24c <udp_connect+0xd0>)
 800d19a:	f004 fb81 	bl	80118a0 <iprintf>
 800d19e:	f06f 030f 	mvn.w	r3, #15
 800d1a2:	e04b      	b.n	800d23c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d109      	bne.n	800d1be <udp_connect+0x42>
 800d1aa:	4b26      	ldr	r3, [pc, #152]	; (800d244 <udp_connect+0xc8>)
 800d1ac:	f240 4236 	movw	r2, #1078	; 0x436
 800d1b0:	4927      	ldr	r1, [pc, #156]	; (800d250 <udp_connect+0xd4>)
 800d1b2:	4826      	ldr	r0, [pc, #152]	; (800d24c <udp_connect+0xd0>)
 800d1b4:	f004 fb74 	bl	80118a0 <iprintf>
 800d1b8:	f06f 030f 	mvn.w	r3, #15
 800d1bc:	e03e      	b.n	800d23c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	8a5b      	ldrh	r3, [r3, #18]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10f      	bne.n	800d1e6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d1c6:	68f9      	ldr	r1, [r7, #12]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	8a5b      	ldrh	r3, [r3, #18]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	68f8      	ldr	r0, [r7, #12]
 800d1d0:	f7ff ff4c 	bl	800d06c <udp_bind>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d1d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d002      	beq.n	800d1e6 <udp_connect+0x6a>
      return err;
 800d1e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1e4:	e02a      	b.n	800d23c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d002      	beq.n	800d1f2 <udp_connect+0x76>
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	e000      	b.n	800d1f4 <udp_connect+0x78>
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	88fa      	ldrh	r2, [r7, #6]
 800d1fc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	7c1b      	ldrb	r3, [r3, #16]
 800d202:	f043 0304 	orr.w	r3, r3, #4
 800d206:	b2da      	uxtb	r2, r3
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d20c:	4b11      	ldr	r3, [pc, #68]	; (800d254 <udp_connect+0xd8>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	617b      	str	r3, [r7, #20]
 800d212:	e008      	b.n	800d226 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d101      	bne.n	800d220 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	e00d      	b.n	800d23c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	617b      	str	r3, [r7, #20]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1f3      	bne.n	800d214 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d22c:	4b09      	ldr	r3, [pc, #36]	; (800d254 <udp_connect+0xd8>)
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800d234:	4a07      	ldr	r2, [pc, #28]	; (800d254 <udp_connect+0xd8>)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3718      	adds	r7, #24
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	080146e8 	.word	0x080146e8
 800d248:	080149c8 	.word	0x080149c8
 800d24c:	0801473c 	.word	0x0801473c
 800d250:	080149e4 	.word	0x080149e4
 800d254:	200087e8 	.word	0x200087e8

0800d258 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d107      	bne.n	800d27a <udp_recv+0x22>
 800d26a:	4b08      	ldr	r3, [pc, #32]	; (800d28c <udp_recv+0x34>)
 800d26c:	f240 428a 	movw	r2, #1162	; 0x48a
 800d270:	4907      	ldr	r1, [pc, #28]	; (800d290 <udp_recv+0x38>)
 800d272:	4808      	ldr	r0, [pc, #32]	; (800d294 <udp_recv+0x3c>)
 800d274:	f004 fb14 	bl	80118a0 <iprintf>
 800d278:	e005      	b.n	800d286 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	68ba      	ldr	r2, [r7, #8]
 800d27e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	61da      	str	r2, [r3, #28]
}
 800d286:	3710      	adds	r7, #16
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	080146e8 	.word	0x080146e8
 800d290:	08014a1c 	.word	0x08014a1c
 800d294:	0801473c 	.word	0x0801473c

0800d298 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d107      	bne.n	800d2b6 <udp_remove+0x1e>
 800d2a6:	4b19      	ldr	r3, [pc, #100]	; (800d30c <udp_remove+0x74>)
 800d2a8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d2ac:	4918      	ldr	r1, [pc, #96]	; (800d310 <udp_remove+0x78>)
 800d2ae:	4819      	ldr	r0, [pc, #100]	; (800d314 <udp_remove+0x7c>)
 800d2b0:	f004 faf6 	bl	80118a0 <iprintf>
 800d2b4:	e026      	b.n	800d304 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d2b6:	4b18      	ldr	r3, [pc, #96]	; (800d318 <udp_remove+0x80>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d105      	bne.n	800d2cc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d2c0:	4b15      	ldr	r3, [pc, #84]	; (800d318 <udp_remove+0x80>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	4a14      	ldr	r2, [pc, #80]	; (800d318 <udp_remove+0x80>)
 800d2c8:	6013      	str	r3, [r2, #0]
 800d2ca:	e017      	b.n	800d2fc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d2cc:	4b12      	ldr	r3, [pc, #72]	; (800d318 <udp_remove+0x80>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	60fb      	str	r3, [r7, #12]
 800d2d2:	e010      	b.n	800d2f6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d009      	beq.n	800d2f0 <udp_remove+0x58>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	68db      	ldr	r3, [r3, #12]
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d104      	bne.n	800d2f0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	68da      	ldr	r2, [r3, #12]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	60da      	str	r2, [r3, #12]
        break;
 800d2ee:	e005      	b.n	800d2fc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	60fb      	str	r3, [r7, #12]
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1eb      	bne.n	800d2d4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d2fc:	6879      	ldr	r1, [r7, #4]
 800d2fe:	2000      	movs	r0, #0
 800d300:	f7f8 f8da 	bl	80054b8 <memp_free>
}
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	080146e8 	.word	0x080146e8
 800d310:	08014a34 	.word	0x08014a34
 800d314:	0801473c 	.word	0x0801473c
 800d318:	200087e8 	.word	0x200087e8

0800d31c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d322:	2000      	movs	r0, #0
 800d324:	f7f8 f858 	bl	80053d8 <memp_malloc>
 800d328:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d007      	beq.n	800d340 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d330:	2220      	movs	r2, #32
 800d332:	2100      	movs	r1, #0
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f004 fb18 	bl	801196a <memset>
    pcb->ttl = UDP_TTL;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	22ff      	movs	r2, #255	; 0xff
 800d33e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800d340:	687b      	ldr	r3, [r7, #4]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
	...

0800d34c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b085      	sub	sp, #20
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d01e      	beq.n	800d39a <udp_netif_ip_addr_changed+0x4e>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d01a      	beq.n	800d39a <udp_netif_ip_addr_changed+0x4e>
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d017      	beq.n	800d39a <udp_netif_ip_addr_changed+0x4e>
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d013      	beq.n	800d39a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d372:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <udp_netif_ip_addr_changed+0x5c>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	60fb      	str	r3, [r7, #12]
 800d378:	e00c      	b.n	800d394 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	429a      	cmp	r2, r3
 800d384:	d103      	bne.n	800d38e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	68db      	ldr	r3, [r3, #12]
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d1ef      	bne.n	800d37a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d39a:	bf00      	nop
 800d39c:	3714      	adds	r7, #20
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	200087e8 	.word	0x200087e8

0800d3ac <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800d3b0:	4b20      	ldr	r3, [pc, #128]	; (800d434 <dhcp_inc_pcb_refcount+0x88>)
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d133      	bne.n	800d420 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800d3b8:	4b1f      	ldr	r3, [pc, #124]	; (800d438 <dhcp_inc_pcb_refcount+0x8c>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d005      	beq.n	800d3cc <dhcp_inc_pcb_refcount+0x20>
 800d3c0:	4b1e      	ldr	r3, [pc, #120]	; (800d43c <dhcp_inc_pcb_refcount+0x90>)
 800d3c2:	22e5      	movs	r2, #229	; 0xe5
 800d3c4:	491e      	ldr	r1, [pc, #120]	; (800d440 <dhcp_inc_pcb_refcount+0x94>)
 800d3c6:	481f      	ldr	r0, [pc, #124]	; (800d444 <dhcp_inc_pcb_refcount+0x98>)
 800d3c8:	f004 fa6a 	bl	80118a0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800d3cc:	f7ff ffa6 	bl	800d31c <udp_new>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	4a19      	ldr	r2, [pc, #100]	; (800d438 <dhcp_inc_pcb_refcount+0x8c>)
 800d3d4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800d3d6:	4b18      	ldr	r3, [pc, #96]	; (800d438 <dhcp_inc_pcb_refcount+0x8c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d102      	bne.n	800d3e4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800d3de:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e2:	e024      	b.n	800d42e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800d3e4:	4b14      	ldr	r3, [pc, #80]	; (800d438 <dhcp_inc_pcb_refcount+0x8c>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	7a5a      	ldrb	r2, [r3, #9]
 800d3ea:	4b13      	ldr	r3, [pc, #76]	; (800d438 <dhcp_inc_pcb_refcount+0x8c>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f042 0220 	orr.w	r2, r2, #32
 800d3f2:	b2d2      	uxtb	r2, r2
 800d3f4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800d3f6:	4b10      	ldr	r3, [pc, #64]	; (800d438 <dhcp_inc_pcb_refcount+0x8c>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2244      	movs	r2, #68	; 0x44
 800d3fc:	4912      	ldr	r1, [pc, #72]	; (800d448 <dhcp_inc_pcb_refcount+0x9c>)
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7ff fe34 	bl	800d06c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800d404:	4b0c      	ldr	r3, [pc, #48]	; (800d438 <dhcp_inc_pcb_refcount+0x8c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	2243      	movs	r2, #67	; 0x43
 800d40a:	490f      	ldr	r1, [pc, #60]	; (800d448 <dhcp_inc_pcb_refcount+0x9c>)
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff feb5 	bl	800d17c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800d412:	4b09      	ldr	r3, [pc, #36]	; (800d438 <dhcp_inc_pcb_refcount+0x8c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2200      	movs	r2, #0
 800d418:	490c      	ldr	r1, [pc, #48]	; (800d44c <dhcp_inc_pcb_refcount+0xa0>)
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff ff1c 	bl	800d258 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800d420:	4b04      	ldr	r3, [pc, #16]	; (800d434 <dhcp_inc_pcb_refcount+0x88>)
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	3301      	adds	r3, #1
 800d426:	b2da      	uxtb	r2, r3
 800d428:	4b02      	ldr	r3, [pc, #8]	; (800d434 <dhcp_inc_pcb_refcount+0x88>)
 800d42a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800d42c:	2300      	movs	r3, #0
}
 800d42e:	4618      	mov	r0, r3
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	20008818 	.word	0x20008818
 800d438:	20008814 	.word	0x20008814
 800d43c:	08014a4c 	.word	0x08014a4c
 800d440:	08014a84 	.word	0x08014a84
 800d444:	08014aac 	.word	0x08014aac
 800d448:	080155b4 	.word	0x080155b4
 800d44c:	0800ece1 	.word	0x0800ece1

0800d450 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800d454:	4b0e      	ldr	r3, [pc, #56]	; (800d490 <dhcp_dec_pcb_refcount+0x40>)
 800d456:	781b      	ldrb	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d105      	bne.n	800d468 <dhcp_dec_pcb_refcount+0x18>
 800d45c:	4b0d      	ldr	r3, [pc, #52]	; (800d494 <dhcp_dec_pcb_refcount+0x44>)
 800d45e:	22ff      	movs	r2, #255	; 0xff
 800d460:	490d      	ldr	r1, [pc, #52]	; (800d498 <dhcp_dec_pcb_refcount+0x48>)
 800d462:	480e      	ldr	r0, [pc, #56]	; (800d49c <dhcp_dec_pcb_refcount+0x4c>)
 800d464:	f004 fa1c 	bl	80118a0 <iprintf>
  dhcp_pcb_refcount--;
 800d468:	4b09      	ldr	r3, [pc, #36]	; (800d490 <dhcp_dec_pcb_refcount+0x40>)
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	3b01      	subs	r3, #1
 800d46e:	b2da      	uxtb	r2, r3
 800d470:	4b07      	ldr	r3, [pc, #28]	; (800d490 <dhcp_dec_pcb_refcount+0x40>)
 800d472:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800d474:	4b06      	ldr	r3, [pc, #24]	; (800d490 <dhcp_dec_pcb_refcount+0x40>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d107      	bne.n	800d48c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800d47c:	4b08      	ldr	r3, [pc, #32]	; (800d4a0 <dhcp_dec_pcb_refcount+0x50>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4618      	mov	r0, r3
 800d482:	f7ff ff09 	bl	800d298 <udp_remove>
    dhcp_pcb = NULL;
 800d486:	4b06      	ldr	r3, [pc, #24]	; (800d4a0 <dhcp_dec_pcb_refcount+0x50>)
 800d488:	2200      	movs	r2, #0
 800d48a:	601a      	str	r2, [r3, #0]
  }
}
 800d48c:	bf00      	nop
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	20008818 	.word	0x20008818
 800d494:	08014a4c 	.word	0x08014a4c
 800d498:	08014ad4 	.word	0x08014ad4
 800d49c:	08014aac 	.word	0x08014aac
 800d4a0:	20008814 	.word	0x20008814

0800d4a4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4b0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d4b2:	210c      	movs	r1, #12
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f001 f855 	bl	800e564 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800d4ba:	4b06      	ldr	r3, [pc, #24]	; (800d4d4 <dhcp_handle_nak+0x30>)
 800d4bc:	4a05      	ldr	r2, [pc, #20]	; (800d4d4 <dhcp_handle_nak+0x30>)
 800d4be:	4905      	ldr	r1, [pc, #20]	; (800d4d4 <dhcp_handle_nak+0x30>)
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f7f8 f99b 	bl	80057fc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f000 fc48 	bl	800dd5c <dhcp_discover>
}
 800d4cc:	bf00      	nop
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	080155b4 	.word	0x080155b4

0800d4d8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4e4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800d4e6:	2108      	movs	r1, #8
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f001 f83b 	bl	800e564 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	331c      	adds	r3, #28
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f002 fb3c 	bl	800fb74 <etharp_query>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	799b      	ldrb	r3, [r3, #6]
 800d504:	2bff      	cmp	r3, #255	; 0xff
 800d506:	d005      	beq.n	800d514 <dhcp_check+0x3c>
    dhcp->tries++;
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	799b      	ldrb	r3, [r3, #6]
 800d50c:	3301      	adds	r3, #1
 800d50e:	b2da      	uxtb	r2, r3
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800d514:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800d518:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d51a:	893b      	ldrh	r3, [r7, #8]
 800d51c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d520:	4a06      	ldr	r2, [pc, #24]	; (800d53c <dhcp_check+0x64>)
 800d522:	fb82 1203 	smull	r1, r2, r2, r3
 800d526:	1152      	asrs	r2, r2, #5
 800d528:	17db      	asrs	r3, r3, #31
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800d532:	bf00      	nop
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}
 800d53a:	bf00      	nop
 800d53c:	10624dd3 	.word	0x10624dd3

0800d540 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800d550:	4b0c      	ldr	r3, [pc, #48]	; (800d584 <dhcp_handle_offer+0x44>)
 800d552:	789b      	ldrb	r3, [r3, #2]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d011      	beq.n	800d57c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800d55e:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <dhcp_handle_offer+0x48>)
 800d560:	689b      	ldr	r3, [r3, #8]
 800d562:	4618      	mov	r0, r3
 800d564:	f7f7 fad5 	bl	8004b12 <lwip_htonl>
 800d568:	4602      	mov	r2, r0
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	691a      	ldr	r2, [r3, #16]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 f808 	bl	800d58c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800d57c:	bf00      	nop
 800d57e:	3710      	adds	r7, #16
 800d580:	46bd      	mov	sp, r7
 800d582:	bd80      	pop	{r7, pc}
 800d584:	2000880c 	.word	0x2000880c
 800d588:	200087ec 	.word	0x200087ec

0800d58c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800d58c:	b5b0      	push	{r4, r5, r7, lr}
 800d58e:	b08a      	sub	sp, #40	; 0x28
 800d590:	af02      	add	r7, sp, #8
 800d592:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d109      	bne.n	800d5ae <dhcp_select+0x22>
 800d59a:	4b71      	ldr	r3, [pc, #452]	; (800d760 <dhcp_select+0x1d4>)
 800d59c:	f240 1277 	movw	r2, #375	; 0x177
 800d5a0:	4970      	ldr	r1, [pc, #448]	; (800d764 <dhcp_select+0x1d8>)
 800d5a2:	4871      	ldr	r0, [pc, #452]	; (800d768 <dhcp_select+0x1dc>)
 800d5a4:	f004 f97c 	bl	80118a0 <iprintf>
 800d5a8:	f06f 030f 	mvn.w	r3, #15
 800d5ac:	e0d3      	b.n	800d756 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d109      	bne.n	800d5ce <dhcp_select+0x42>
 800d5ba:	4b69      	ldr	r3, [pc, #420]	; (800d760 <dhcp_select+0x1d4>)
 800d5bc:	f240 1279 	movw	r2, #377	; 0x179
 800d5c0:	496a      	ldr	r1, [pc, #424]	; (800d76c <dhcp_select+0x1e0>)
 800d5c2:	4869      	ldr	r0, [pc, #420]	; (800d768 <dhcp_select+0x1dc>)
 800d5c4:	f004 f96c 	bl	80118a0 <iprintf>
 800d5c8:	f06f 0305 	mvn.w	r3, #5
 800d5cc:	e0c3      	b.n	800d756 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	69b8      	ldr	r0, [r7, #24]
 800d5d2:	f000 ffc7 	bl	800e564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d5d6:	f107 030c 	add.w	r3, r7, #12
 800d5da:	2203      	movs	r2, #3
 800d5dc:	69b9      	ldr	r1, [r7, #24]
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f001 fc4c 	bl	800ee7c <dhcp_create_msg>
 800d5e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	f000 8085 	beq.w	800d6f8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d5f4:	89b8      	ldrh	r0, [r7, #12]
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	2239      	movs	r2, #57	; 0x39
 800d600:	f000 ffca 	bl	800e598 <dhcp_option>
 800d604:	4603      	mov	r3, r0
 800d606:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d608:	89b8      	ldrh	r0, [r7, #12]
 800d60a:	693b      	ldr	r3, [r7, #16]
 800d60c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d614:	461a      	mov	r2, r3
 800d616:	f001 f819 	bl	800e64c <dhcp_option_short>
 800d61a:	4603      	mov	r3, r0
 800d61c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d61e:	89b8      	ldrh	r0, [r7, #12]
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d626:	2304      	movs	r3, #4
 800d628:	2232      	movs	r2, #50	; 0x32
 800d62a:	f000 ffb5 	bl	800e598 <dhcp_option>
 800d62e:	4603      	mov	r3, r0
 800d630:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d632:	89bc      	ldrh	r4, [r7, #12]
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	69db      	ldr	r3, [r3, #28]
 800d63e:	4618      	mov	r0, r3
 800d640:	f7f7 fa67 	bl	8004b12 <lwip_htonl>
 800d644:	4603      	mov	r3, r0
 800d646:	461a      	mov	r2, r3
 800d648:	4629      	mov	r1, r5
 800d64a:	4620      	mov	r0, r4
 800d64c:	f001 f830 	bl	800e6b0 <dhcp_option_long>
 800d650:	4603      	mov	r3, r0
 800d652:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d654:	89b8      	ldrh	r0, [r7, #12]
 800d656:	693b      	ldr	r3, [r7, #16]
 800d658:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d65c:	2304      	movs	r3, #4
 800d65e:	2236      	movs	r2, #54	; 0x36
 800d660:	f000 ff9a 	bl	800e598 <dhcp_option>
 800d664:	4603      	mov	r3, r0
 800d666:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800d668:	89bc      	ldrh	r4, [r7, #12]
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	699b      	ldr	r3, [r3, #24]
 800d674:	4618      	mov	r0, r3
 800d676:	f7f7 fa4c 	bl	8004b12 <lwip_htonl>
 800d67a:	4603      	mov	r3, r0
 800d67c:	461a      	mov	r2, r3
 800d67e:	4629      	mov	r1, r5
 800d680:	4620      	mov	r0, r4
 800d682:	f001 f815 	bl	800e6b0 <dhcp_option_long>
 800d686:	4603      	mov	r3, r0
 800d688:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d68a:	89b8      	ldrh	r0, [r7, #12]
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d692:	2303      	movs	r3, #3
 800d694:	2237      	movs	r2, #55	; 0x37
 800d696:	f000 ff7f 	bl	800e598 <dhcp_option>
 800d69a:	4603      	mov	r3, r0
 800d69c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d69e:	2300      	movs	r3, #0
 800d6a0:	77bb      	strb	r3, [r7, #30]
 800d6a2:	e00e      	b.n	800d6c2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d6a4:	89b8      	ldrh	r0, [r7, #12]
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d6ac:	7fbb      	ldrb	r3, [r7, #30]
 800d6ae:	4a30      	ldr	r2, [pc, #192]	; (800d770 <dhcp_select+0x1e4>)
 800d6b0:	5cd3      	ldrb	r3, [r2, r3]
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f000 ffa4 	bl	800e600 <dhcp_option_byte>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d6bc:	7fbb      	ldrb	r3, [r7, #30]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	77bb      	strb	r3, [r7, #30]
 800d6c2:	7fbb      	ldrb	r3, [r7, #30]
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d9ed      	bls.n	800d6a4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d6c8:	89b8      	ldrh	r0, [r7, #12]
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	33f0      	adds	r3, #240	; 0xf0
 800d6ce:	697a      	ldr	r2, [r7, #20]
 800d6d0:	4619      	mov	r1, r3
 800d6d2:	f001 fca9 	bl	800f028 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d6d6:	4b27      	ldr	r3, [pc, #156]	; (800d774 <dhcp_select+0x1e8>)
 800d6d8:	6818      	ldr	r0, [r3, #0]
 800d6da:	4b27      	ldr	r3, [pc, #156]	; (800d778 <dhcp_select+0x1ec>)
 800d6dc:	9301      	str	r3, [sp, #4]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	9300      	str	r3, [sp, #0]
 800d6e2:	2343      	movs	r3, #67	; 0x43
 800d6e4:	4a25      	ldr	r2, [pc, #148]	; (800d77c <dhcp_select+0x1f0>)
 800d6e6:	6979      	ldr	r1, [r7, #20]
 800d6e8:	f7ff fbda 	bl	800cea0 <udp_sendto_if_src>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d6f0:	6978      	ldr	r0, [r7, #20]
 800d6f2:	f7f8 fd63 	bl	80061bc <pbuf_free>
 800d6f6:	e001      	b.n	800d6fc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d6f8:	23ff      	movs	r3, #255	; 0xff
 800d6fa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	799b      	ldrb	r3, [r3, #6]
 800d700:	2bff      	cmp	r3, #255	; 0xff
 800d702:	d005      	beq.n	800d710 <dhcp_select+0x184>
    dhcp->tries++;
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	799b      	ldrb	r3, [r3, #6]
 800d708:	3301      	adds	r3, #1
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	799b      	ldrb	r3, [r3, #6]
 800d714:	2b05      	cmp	r3, #5
 800d716:	d80d      	bhi.n	800d734 <dhcp_select+0x1a8>
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	799b      	ldrb	r3, [r3, #6]
 800d71c:	461a      	mov	r2, r3
 800d71e:	2301      	movs	r3, #1
 800d720:	4093      	lsls	r3, r2
 800d722:	b29b      	uxth	r3, r3
 800d724:	461a      	mov	r2, r3
 800d726:	0152      	lsls	r2, r2, #5
 800d728:	1ad2      	subs	r2, r2, r3
 800d72a:	0092      	lsls	r2, r2, #2
 800d72c:	4413      	add	r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	b29b      	uxth	r3, r3
 800d732:	e001      	b.n	800d738 <dhcp_select+0x1ac>
 800d734:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d738:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d73a:	89fb      	ldrh	r3, [r7, #14]
 800d73c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d740:	4a0f      	ldr	r2, [pc, #60]	; (800d780 <dhcp_select+0x1f4>)
 800d742:	fb82 1203 	smull	r1, r2, r2, r3
 800d746:	1152      	asrs	r2, r2, #5
 800d748:	17db      	asrs	r3, r3, #31
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d752:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d756:	4618      	mov	r0, r3
 800d758:	3720      	adds	r7, #32
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bdb0      	pop	{r4, r5, r7, pc}
 800d75e:	bf00      	nop
 800d760:	08014a4c 	.word	0x08014a4c
 800d764:	08014af8 	.word	0x08014af8
 800d768:	08014aac 	.word	0x08014aac
 800d76c:	08014b14 	.word	0x08014b14
 800d770:	2000002c 	.word	0x2000002c
 800d774:	20008814 	.word	0x20008814
 800d778:	080155b4 	.word	0x080155b4
 800d77c:	080155b8 	.word	0x080155b8
 800d780:	10624dd3 	.word	0x10624dd3

0800d784 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800d78a:	4b27      	ldr	r3, [pc, #156]	; (800d828 <dhcp_coarse_tmr+0xa4>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	607b      	str	r3, [r7, #4]
 800d790:	e042      	b.n	800d818 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d796:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d039      	beq.n	800d812 <dhcp_coarse_tmr+0x8e>
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	795b      	ldrb	r3, [r3, #5]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d035      	beq.n	800d812 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	8a9b      	ldrh	r3, [r3, #20]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d012      	beq.n	800d7d4 <dhcp_coarse_tmr+0x50>
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	8a5b      	ldrh	r3, [r3, #18]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	825a      	strh	r2, [r3, #18]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	8a5a      	ldrh	r2, [r3, #18]
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	8a9b      	ldrh	r3, [r3, #20]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d106      	bne.n	800d7d4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 fe32 	bl	800e430 <dhcp_release_and_stop>
        dhcp_start(netif);
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f000 f969 	bl	800daa4 <dhcp_start>
 800d7d2:	e01e      	b.n	800d812 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	8a1b      	ldrh	r3, [r3, #16]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d00b      	beq.n	800d7f4 <dhcp_coarse_tmr+0x70>
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	8a1b      	ldrh	r3, [r3, #16]
 800d7e0:	1e5a      	subs	r2, r3, #1
 800d7e2:	b291      	uxth	r1, r2
 800d7e4:	683a      	ldr	r2, [r7, #0]
 800d7e6:	8211      	strh	r1, [r2, #16]
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d103      	bne.n	800d7f4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 f8c6 	bl	800d97e <dhcp_t2_timeout>
 800d7f2:	e00e      	b.n	800d812 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	89db      	ldrh	r3, [r3, #14]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00a      	beq.n	800d812 <dhcp_coarse_tmr+0x8e>
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	89db      	ldrh	r3, [r3, #14]
 800d800:	1e5a      	subs	r2, r3, #1
 800d802:	b291      	uxth	r1, r2
 800d804:	683a      	ldr	r2, [r7, #0]
 800d806:	81d1      	strh	r1, [r2, #14]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d102      	bne.n	800d812 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f888 	bl	800d922 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	607b      	str	r3, [r7, #4]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1b9      	bne.n	800d792 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800d81e:	bf00      	nop
 800d820:	bf00      	nop
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	20008780 	.word	0x20008780

0800d82c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800d832:	4b16      	ldr	r3, [pc, #88]	; (800d88c <dhcp_fine_tmr+0x60>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	607b      	str	r3, [r7, #4]
 800d838:	e020      	b.n	800d87c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d017      	beq.n	800d876 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	891b      	ldrh	r3, [r3, #8]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d906      	bls.n	800d85c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	891b      	ldrh	r3, [r3, #8]
 800d852:	3b01      	subs	r3, #1
 800d854:	b29a      	uxth	r2, r3
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	811a      	strh	r2, [r3, #8]
 800d85a:	e00c      	b.n	800d876 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	891b      	ldrh	r3, [r3, #8]
 800d860:	2b01      	cmp	r3, #1
 800d862:	d108      	bne.n	800d876 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	891b      	ldrh	r3, [r3, #8]
 800d868:	3b01      	subs	r3, #1
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 f80d 	bl	800d890 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	607b      	str	r3, [r7, #4]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1db      	bne.n	800d83a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800d882:	bf00      	nop
 800d884:	bf00      	nop
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	20008780 	.word	0x20008780

0800d890 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	795b      	ldrb	r3, [r3, #5]
 800d8a2:	2b0c      	cmp	r3, #12
 800d8a4:	d003      	beq.n	800d8ae <dhcp_timeout+0x1e>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	795b      	ldrb	r3, [r3, #5]
 800d8aa:	2b06      	cmp	r3, #6
 800d8ac:	d103      	bne.n	800d8b6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fa54 	bl	800dd5c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800d8b4:	e031      	b.n	800d91a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	795b      	ldrb	r3, [r3, #5]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d10e      	bne.n	800d8dc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	799b      	ldrb	r3, [r3, #6]
 800d8c2:	2b05      	cmp	r3, #5
 800d8c4:	d803      	bhi.n	800d8ce <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f7ff fe60 	bl	800d58c <dhcp_select>
}
 800d8cc:	e025      	b.n	800d91a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f000 fdae 	bl	800e430 <dhcp_release_and_stop>
      dhcp_start(netif);
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 f8e5 	bl	800daa4 <dhcp_start>
}
 800d8da:	e01e      	b.n	800d91a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	795b      	ldrb	r3, [r3, #5]
 800d8e0:	2b08      	cmp	r3, #8
 800d8e2:	d10b      	bne.n	800d8fc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	799b      	ldrb	r3, [r3, #6]
 800d8e8:	2b01      	cmp	r3, #1
 800d8ea:	d803      	bhi.n	800d8f4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f7ff fdf3 	bl	800d4d8 <dhcp_check>
}
 800d8f2:	e012      	b.n	800d91a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 fad3 	bl	800dea0 <dhcp_bind>
}
 800d8fa:	e00e      	b.n	800d91a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	795b      	ldrb	r3, [r3, #5]
 800d900:	2b03      	cmp	r3, #3
 800d902:	d10a      	bne.n	800d91a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	799b      	ldrb	r3, [r3, #6]
 800d908:	2b01      	cmp	r3, #1
 800d90a:	d803      	bhi.n	800d914 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fcd9 	bl	800e2c4 <dhcp_reboot>
}
 800d912:	e002      	b.n	800d91a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 fa21 	bl	800dd5c <dhcp_discover>
}
 800d91a:	bf00      	nop
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b084      	sub	sp, #16
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	795b      	ldrb	r3, [r3, #5]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d007      	beq.n	800d948 <dhcp_t1_timeout+0x26>
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	795b      	ldrb	r3, [r3, #5]
 800d93c:	2b0a      	cmp	r3, #10
 800d93e:	d003      	beq.n	800d948 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d944:	2b05      	cmp	r3, #5
 800d946:	d116      	bne.n	800d976 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 fb83 	bl	800e054 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	899b      	ldrh	r3, [r3, #12]
 800d952:	461a      	mov	r2, r3
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	8a5b      	ldrh	r3, [r3, #18]
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	dd0b      	ble.n	800d976 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	899b      	ldrh	r3, [r3, #12]
 800d962:	461a      	mov	r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	8a5b      	ldrh	r3, [r3, #18]
 800d968:	1ad3      	subs	r3, r2, r3
 800d96a:	0fda      	lsrs	r2, r3, #31
 800d96c:	4413      	add	r3, r2
 800d96e:	105b      	asrs	r3, r3, #1
 800d970:	b29a      	uxth	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800d976:	bf00      	nop
 800d978:	3710      	adds	r7, #16
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}

0800d97e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800d97e:	b580      	push	{r7, lr}
 800d980:	b084      	sub	sp, #16
 800d982:	af00      	add	r7, sp, #0
 800d984:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	795b      	ldrb	r3, [r3, #5]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d00b      	beq.n	800d9ac <dhcp_t2_timeout+0x2e>
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	795b      	ldrb	r3, [r3, #5]
 800d998:	2b0a      	cmp	r3, #10
 800d99a:	d007      	beq.n	800d9ac <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800d9a0:	2b05      	cmp	r3, #5
 800d9a2:	d003      	beq.n	800d9ac <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	795b      	ldrb	r3, [r3, #5]
 800d9a8:	2b04      	cmp	r3, #4
 800d9aa:	d116      	bne.n	800d9da <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 fbed 	bl	800e18c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	8a9b      	ldrh	r3, [r3, #20]
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	8a5b      	ldrh	r3, [r3, #18]
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	dd0b      	ble.n	800d9da <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	8a9b      	ldrh	r3, [r3, #20]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	8a5b      	ldrh	r3, [r3, #18]
 800d9cc:	1ad3      	subs	r3, r2, r3
 800d9ce:	0fda      	lsrs	r2, r3, #31
 800d9d0:	4413      	add	r3, r2
 800d9d2:	105b      	asrs	r3, r3, #1
 800d9d4:	b29a      	uxth	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800d9da:	bf00      	nop
 800d9dc:	3710      	adds	r7, #16
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
	...

0800d9e4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9f2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800da00:	4b26      	ldr	r3, [pc, #152]	; (800da9c <dhcp_handle_ack+0xb8>)
 800da02:	78db      	ldrb	r3, [r3, #3]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800da08:	4b25      	ldr	r3, [pc, #148]	; (800daa0 <dhcp_handle_ack+0xbc>)
 800da0a:	68da      	ldr	r2, [r3, #12]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800da10:	4b22      	ldr	r3, [pc, #136]	; (800da9c <dhcp_handle_ack+0xb8>)
 800da12:	791b      	ldrb	r3, [r3, #4]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d004      	beq.n	800da22 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800da18:	4b21      	ldr	r3, [pc, #132]	; (800daa0 <dhcp_handle_ack+0xbc>)
 800da1a:	691a      	ldr	r2, [r3, #16]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	62da      	str	r2, [r3, #44]	; 0x2c
 800da20:	e004      	b.n	800da2c <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da26:	085a      	lsrs	r2, r3, #1
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800da2c:	4b1b      	ldr	r3, [pc, #108]	; (800da9c <dhcp_handle_ack+0xb8>)
 800da2e:	795b      	ldrb	r3, [r3, #5]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d004      	beq.n	800da3e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800da34:	4b1a      	ldr	r3, [pc, #104]	; (800daa0 <dhcp_handle_ack+0xbc>)
 800da36:	695a      	ldr	r2, [r3, #20]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	631a      	str	r2, [r3, #48]	; 0x30
 800da3c:	e007      	b.n	800da4e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da42:	4613      	mov	r3, r2
 800da44:	00db      	lsls	r3, r3, #3
 800da46:	1a9b      	subs	r3, r3, r2
 800da48:	08da      	lsrs	r2, r3, #3
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	691a      	ldr	r2, [r3, #16]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800da56:	4b11      	ldr	r3, [pc, #68]	; (800da9c <dhcp_handle_ack+0xb8>)
 800da58:	799b      	ldrb	r3, [r3, #6]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d00b      	beq.n	800da76 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800da5e:	4b10      	ldr	r3, [pc, #64]	; (800daa0 <dhcp_handle_ack+0xbc>)
 800da60:	699b      	ldr	r3, [r3, #24]
 800da62:	4618      	mov	r0, r3
 800da64:	f7f7 f855 	bl	8004b12 <lwip_htonl>
 800da68:	4602      	mov	r2, r0
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2201      	movs	r2, #1
 800da72:	71da      	strb	r2, [r3, #7]
 800da74:	e002      	b.n	800da7c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2200      	movs	r2, #0
 800da7a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800da7c:	4b07      	ldr	r3, [pc, #28]	; (800da9c <dhcp_handle_ack+0xb8>)
 800da7e:	79db      	ldrb	r3, [r3, #7]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d007      	beq.n	800da94 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800da84:	4b06      	ldr	r3, [pc, #24]	; (800daa0 <dhcp_handle_ack+0xbc>)
 800da86:	69db      	ldr	r3, [r3, #28]
 800da88:	4618      	mov	r0, r3
 800da8a:	f7f7 f842 	bl	8004b12 <lwip_htonl>
 800da8e:	4602      	mov	r2, r0
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800da94:	bf00      	nop
 800da96:	3710      	adds	r7, #16
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	2000880c 	.word	0x2000880c
 800daa0:	200087ec 	.word	0x200087ec

0800daa4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d109      	bne.n	800dac6 <dhcp_start+0x22>
 800dab2:	4b37      	ldr	r3, [pc, #220]	; (800db90 <dhcp_start+0xec>)
 800dab4:	f240 22e7 	movw	r2, #743	; 0x2e7
 800dab8:	4936      	ldr	r1, [pc, #216]	; (800db94 <dhcp_start+0xf0>)
 800daba:	4837      	ldr	r0, [pc, #220]	; (800db98 <dhcp_start+0xf4>)
 800dabc:	f003 fef0 	bl	80118a0 <iprintf>
 800dac0:	f06f 030f 	mvn.w	r3, #15
 800dac4:	e060      	b.n	800db88 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dacc:	f003 0301 	and.w	r3, r3, #1
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d109      	bne.n	800dae8 <dhcp_start+0x44>
 800dad4:	4b2e      	ldr	r3, [pc, #184]	; (800db90 <dhcp_start+0xec>)
 800dad6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800dada:	4930      	ldr	r1, [pc, #192]	; (800db9c <dhcp_start+0xf8>)
 800dadc:	482e      	ldr	r0, [pc, #184]	; (800db98 <dhcp_start+0xf4>)
 800dade:	f003 fedf 	bl	80118a0 <iprintf>
 800dae2:	f06f 030f 	mvn.w	r3, #15
 800dae6:	e04f      	b.n	800db88 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800daf2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800daf6:	d202      	bcs.n	800dafe <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800daf8:	f04f 33ff 	mov.w	r3, #4294967295
 800dafc:	e044      	b.n	800db88 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d10d      	bne.n	800db20 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800db04:	2034      	movs	r0, #52	; 0x34
 800db06:	f7f7 fad7 	bl	80050b8 <mem_malloc>
 800db0a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800db12:	f04f 33ff 	mov.w	r3, #4294967295
 800db16:	e037      	b.n	800db88 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	68fa      	ldr	r2, [r7, #12]
 800db1c:	625a      	str	r2, [r3, #36]	; 0x24
 800db1e:	e005      	b.n	800db2c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	791b      	ldrb	r3, [r3, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d001      	beq.n	800db2c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800db28:	f7ff fc92 	bl	800d450 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800db2c:	2234      	movs	r2, #52	; 0x34
 800db2e:	2100      	movs	r1, #0
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f003 ff1a 	bl	801196a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800db36:	f7ff fc39 	bl	800d3ac <dhcp_inc_pcb_refcount>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <dhcp_start+0xa2>
    return ERR_MEM;
 800db40:	f04f 33ff 	mov.w	r3, #4294967295
 800db44:	e020      	b.n	800db88 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2201      	movs	r2, #1
 800db4a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800db52:	f003 0304 	and.w	r3, r3, #4
 800db56:	2b00      	cmp	r3, #0
 800db58:	d105      	bne.n	800db66 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800db5a:	2102      	movs	r1, #2
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f000 fd01 	bl	800e564 <dhcp_set_state>
    return ERR_OK;
 800db62:	2300      	movs	r3, #0
 800db64:	e010      	b.n	800db88 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 f8f8 	bl	800dd5c <dhcp_discover>
 800db6c:	4603      	mov	r3, r0
 800db6e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800db70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d005      	beq.n	800db84 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 fc59 	bl	800e430 <dhcp_release_and_stop>
    return ERR_MEM;
 800db7e:	f04f 33ff 	mov.w	r3, #4294967295
 800db82:	e001      	b.n	800db88 <dhcp_start+0xe4>
  }
  return result;
 800db84:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}
 800db90:	08014a4c 	.word	0x08014a4c
 800db94:	08014b30 	.word	0x08014b30
 800db98:	08014aac 	.word	0x08014aac
 800db9c:	08014b74 	.word	0x08014b74

0800dba0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d025      	beq.n	800dc00 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	795b      	ldrb	r3, [r3, #5]
 800dbb8:	2b0a      	cmp	r3, #10
 800dbba:	d008      	beq.n	800dbce <dhcp_network_changed+0x2e>
 800dbbc:	2b0a      	cmp	r3, #10
 800dbbe:	dc0d      	bgt.n	800dbdc <dhcp_network_changed+0x3c>
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d01f      	beq.n	800dc04 <dhcp_network_changed+0x64>
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	db09      	blt.n	800dbdc <dhcp_network_changed+0x3c>
 800dbc8:	3b03      	subs	r3, #3
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d806      	bhi.n	800dbdc <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 fb75 	bl	800e2c4 <dhcp_reboot>
      break;
 800dbda:	e014      	b.n	800dc06 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	795b      	ldrb	r3, [r3, #5]
 800dbe0:	2b0c      	cmp	r3, #12
 800dbe2:	d906      	bls.n	800dbf2 <dhcp_network_changed+0x52>
 800dbe4:	4b09      	ldr	r3, [pc, #36]	; (800dc0c <dhcp_network_changed+0x6c>)
 800dbe6:	f240 326d 	movw	r2, #877	; 0x36d
 800dbea:	4909      	ldr	r1, [pc, #36]	; (800dc10 <dhcp_network_changed+0x70>)
 800dbec:	4809      	ldr	r0, [pc, #36]	; (800dc14 <dhcp_network_changed+0x74>)
 800dbee:	f003 fe57 	bl	80118a0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f8af 	bl	800dd5c <dhcp_discover>
      break;
 800dbfe:	e002      	b.n	800dc06 <dhcp_network_changed+0x66>
    return;
 800dc00:	bf00      	nop
 800dc02:	e000      	b.n	800dc06 <dhcp_network_changed+0x66>
      break;
 800dc04:	bf00      	nop
  }
}
 800dc06:	3710      	adds	r7, #16
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}
 800dc0c:	08014a4c 	.word	0x08014a4c
 800dc10:	08014b98 	.word	0x08014b98
 800dc14:	08014aac 	.word	0x08014aac

0800dc18 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d107      	bne.n	800dc38 <dhcp_arp_reply+0x20>
 800dc28:	4b0e      	ldr	r3, [pc, #56]	; (800dc64 <dhcp_arp_reply+0x4c>)
 800dc2a:	f240 328b 	movw	r2, #907	; 0x38b
 800dc2e:	490e      	ldr	r1, [pc, #56]	; (800dc68 <dhcp_arp_reply+0x50>)
 800dc30:	480e      	ldr	r0, [pc, #56]	; (800dc6c <dhcp_arp_reply+0x54>)
 800dc32:	f003 fe35 	bl	80118a0 <iprintf>
 800dc36:	e012      	b.n	800dc5e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00c      	beq.n	800dc5e <dhcp_arp_reply+0x46>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	795b      	ldrb	r3, [r3, #5]
 800dc48:	2b08      	cmp	r3, #8
 800dc4a:	d108      	bne.n	800dc5e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	69db      	ldr	r3, [r3, #28]
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d102      	bne.n	800dc5e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f000 f809 	bl	800dc70 <dhcp_decline>
    }
  }
}
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	08014a4c 	.word	0x08014a4c
 800dc68:	08014b30 	.word	0x08014b30
 800dc6c:	08014aac 	.word	0x08014aac

0800dc70 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800dc70:	b5b0      	push	{r4, r5, r7, lr}
 800dc72:	b08a      	sub	sp, #40	; 0x28
 800dc74:	af02      	add	r7, sp, #8
 800dc76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc7c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800dc7e:	210c      	movs	r1, #12
 800dc80:	69b8      	ldr	r0, [r7, #24]
 800dc82:	f000 fc6f 	bl	800e564 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800dc86:	f107 030c 	add.w	r3, r7, #12
 800dc8a:	2204      	movs	r2, #4
 800dc8c:	69b9      	ldr	r1, [r7, #24]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f001 f8f4 	bl	800ee7c <dhcp_create_msg>
 800dc94:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d035      	beq.n	800dd08 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800dca2:	89b8      	ldrh	r0, [r7, #12]
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dcaa:	2304      	movs	r3, #4
 800dcac:	2232      	movs	r2, #50	; 0x32
 800dcae:	f000 fc73 	bl	800e598 <dhcp_option>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800dcb6:	89bc      	ldrh	r4, [r7, #12]
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800dcbe:	69bb      	ldr	r3, [r7, #24]
 800dcc0:	69db      	ldr	r3, [r3, #28]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7f6 ff25 	bl	8004b12 <lwip_htonl>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	461a      	mov	r2, r3
 800dccc:	4629      	mov	r1, r5
 800dcce:	4620      	mov	r0, r4
 800dcd0:	f000 fcee 	bl	800e6b0 <dhcp_option_long>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800dcd8:	89b8      	ldrh	r0, [r7, #12]
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	33f0      	adds	r3, #240	; 0xf0
 800dcde:	697a      	ldr	r2, [r7, #20]
 800dce0:	4619      	mov	r1, r3
 800dce2:	f001 f9a1 	bl	800f028 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800dce6:	4b19      	ldr	r3, [pc, #100]	; (800dd4c <dhcp_decline+0xdc>)
 800dce8:	6818      	ldr	r0, [r3, #0]
 800dcea:	4b19      	ldr	r3, [pc, #100]	; (800dd50 <dhcp_decline+0xe0>)
 800dcec:	9301      	str	r3, [sp, #4]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	2343      	movs	r3, #67	; 0x43
 800dcf4:	4a17      	ldr	r2, [pc, #92]	; (800dd54 <dhcp_decline+0xe4>)
 800dcf6:	6979      	ldr	r1, [r7, #20]
 800dcf8:	f7ff f8d2 	bl	800cea0 <udp_sendto_if_src>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800dd00:	6978      	ldr	r0, [r7, #20]
 800dd02:	f7f8 fa5b 	bl	80061bc <pbuf_free>
 800dd06:	e001      	b.n	800dd0c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800dd08:	23ff      	movs	r3, #255	; 0xff
 800dd0a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	799b      	ldrb	r3, [r3, #6]
 800dd10:	2bff      	cmp	r3, #255	; 0xff
 800dd12:	d005      	beq.n	800dd20 <dhcp_decline+0xb0>
    dhcp->tries++;
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	799b      	ldrb	r3, [r3, #6]
 800dd18:	3301      	adds	r3, #1
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800dd20:	f242 7310 	movw	r3, #10000	; 0x2710
 800dd24:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800dd26:	89fb      	ldrh	r3, [r7, #14]
 800dd28:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800dd2c:	4a0a      	ldr	r2, [pc, #40]	; (800dd58 <dhcp_decline+0xe8>)
 800dd2e:	fb82 1203 	smull	r1, r2, r2, r3
 800dd32:	1152      	asrs	r2, r2, #5
 800dd34:	17db      	asrs	r3, r3, #31
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800dd3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3720      	adds	r7, #32
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bdb0      	pop	{r4, r5, r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	20008814 	.word	0x20008814
 800dd50:	080155b4 	.word	0x080155b4
 800dd54:	080155b8 	.word	0x080155b8
 800dd58:	10624dd3 	.word	0x10624dd3

0800dd5c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b08a      	sub	sp, #40	; 0x28
 800dd60:	af02      	add	r7, sp, #8
 800dd62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd68:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	2200      	movs	r2, #0
 800dd72:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800dd74:	2106      	movs	r1, #6
 800dd76:	69b8      	ldr	r0, [r7, #24]
 800dd78:	f000 fbf4 	bl	800e564 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800dd7c:	f107 0308 	add.w	r3, r7, #8
 800dd80:	2201      	movs	r2, #1
 800dd82:	69b9      	ldr	r1, [r7, #24]
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f001 f879 	bl	800ee7c <dhcp_create_msg>
 800dd8a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800dd8c:	693b      	ldr	r3, [r7, #16]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d04b      	beq.n	800de2a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800dd98:	8938      	ldrh	r0, [r7, #8]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dda0:	2302      	movs	r3, #2
 800dda2:	2239      	movs	r2, #57	; 0x39
 800dda4:	f000 fbf8 	bl	800e598 <dhcp_option>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ddac:	8938      	ldrh	r0, [r7, #8]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddb8:	461a      	mov	r2, r3
 800ddba:	f000 fc47 	bl	800e64c <dhcp_option_short>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ddc2:	8938      	ldrh	r0, [r7, #8]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ddca:	2303      	movs	r3, #3
 800ddcc:	2237      	movs	r2, #55	; 0x37
 800ddce:	f000 fbe3 	bl	800e598 <dhcp_option>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	77fb      	strb	r3, [r7, #31]
 800ddda:	e00e      	b.n	800ddfa <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800dddc:	8938      	ldrh	r0, [r7, #8]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800dde4:	7ffb      	ldrb	r3, [r7, #31]
 800dde6:	4a29      	ldr	r2, [pc, #164]	; (800de8c <dhcp_discover+0x130>)
 800dde8:	5cd3      	ldrb	r3, [r2, r3]
 800ddea:	461a      	mov	r2, r3
 800ddec:	f000 fc08 	bl	800e600 <dhcp_option_byte>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ddf4:	7ffb      	ldrb	r3, [r7, #31]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	77fb      	strb	r3, [r7, #31]
 800ddfa:	7ffb      	ldrb	r3, [r7, #31]
 800ddfc:	2b02      	cmp	r3, #2
 800ddfe:	d9ed      	bls.n	800dddc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800de00:	8938      	ldrh	r0, [r7, #8]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	33f0      	adds	r3, #240	; 0xf0
 800de06:	693a      	ldr	r2, [r7, #16]
 800de08:	4619      	mov	r1, r3
 800de0a:	f001 f90d 	bl	800f028 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800de0e:	4b20      	ldr	r3, [pc, #128]	; (800de90 <dhcp_discover+0x134>)
 800de10:	6818      	ldr	r0, [r3, #0]
 800de12:	4b20      	ldr	r3, [pc, #128]	; (800de94 <dhcp_discover+0x138>)
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	2343      	movs	r3, #67	; 0x43
 800de1c:	4a1e      	ldr	r2, [pc, #120]	; (800de98 <dhcp_discover+0x13c>)
 800de1e:	6939      	ldr	r1, [r7, #16]
 800de20:	f7ff f83e 	bl	800cea0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800de24:	6938      	ldr	r0, [r7, #16]
 800de26:	f7f8 f9c9 	bl	80061bc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800de2a:	69bb      	ldr	r3, [r7, #24]
 800de2c:	799b      	ldrb	r3, [r3, #6]
 800de2e:	2bff      	cmp	r3, #255	; 0xff
 800de30:	d005      	beq.n	800de3e <dhcp_discover+0xe2>
    dhcp->tries++;
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	799b      	ldrb	r3, [r3, #6]
 800de36:	3301      	adds	r3, #1
 800de38:	b2da      	uxtb	r2, r3
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	799b      	ldrb	r3, [r3, #6]
 800de42:	2b05      	cmp	r3, #5
 800de44:	d80d      	bhi.n	800de62 <dhcp_discover+0x106>
 800de46:	69bb      	ldr	r3, [r7, #24]
 800de48:	799b      	ldrb	r3, [r3, #6]
 800de4a:	461a      	mov	r2, r3
 800de4c:	2301      	movs	r3, #1
 800de4e:	4093      	lsls	r3, r2
 800de50:	b29b      	uxth	r3, r3
 800de52:	461a      	mov	r2, r3
 800de54:	0152      	lsls	r2, r2, #5
 800de56:	1ad2      	subs	r2, r2, r3
 800de58:	0092      	lsls	r2, r2, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	b29b      	uxth	r3, r3
 800de60:	e001      	b.n	800de66 <dhcp_discover+0x10a>
 800de62:	f64e 2360 	movw	r3, #60000	; 0xea60
 800de66:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800de68:	897b      	ldrh	r3, [r7, #10]
 800de6a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800de6e:	4a0b      	ldr	r2, [pc, #44]	; (800de9c <dhcp_discover+0x140>)
 800de70:	fb82 1203 	smull	r1, r2, r2, r3
 800de74:	1152      	asrs	r2, r2, #5
 800de76:	17db      	asrs	r3, r3, #31
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	b29a      	uxth	r2, r3
 800de7c:	69bb      	ldr	r3, [r7, #24]
 800de7e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800de80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de84:	4618      	mov	r0, r3
 800de86:	3720      	adds	r7, #32
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	2000002c 	.word	0x2000002c
 800de90:	20008814 	.word	0x20008814
 800de94:	080155b4 	.word	0x080155b4
 800de98:	080155b8 	.word	0x080155b8
 800de9c:	10624dd3 	.word	0x10624dd3

0800dea0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b088      	sub	sp, #32
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d107      	bne.n	800debe <dhcp_bind+0x1e>
 800deae:	4b64      	ldr	r3, [pc, #400]	; (800e040 <dhcp_bind+0x1a0>)
 800deb0:	f240 4215 	movw	r2, #1045	; 0x415
 800deb4:	4963      	ldr	r1, [pc, #396]	; (800e044 <dhcp_bind+0x1a4>)
 800deb6:	4864      	ldr	r0, [pc, #400]	; (800e048 <dhcp_bind+0x1a8>)
 800deb8:	f003 fcf2 	bl	80118a0 <iprintf>
 800debc:	e0bc      	b.n	800e038 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800dec4:	69bb      	ldr	r3, [r7, #24]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d107      	bne.n	800deda <dhcp_bind+0x3a>
 800deca:	4b5d      	ldr	r3, [pc, #372]	; (800e040 <dhcp_bind+0x1a0>)
 800decc:	f240 4217 	movw	r2, #1047	; 0x417
 800ded0:	495e      	ldr	r1, [pc, #376]	; (800e04c <dhcp_bind+0x1ac>)
 800ded2:	485d      	ldr	r0, [pc, #372]	; (800e048 <dhcp_bind+0x1a8>)
 800ded4:	f003 fce4 	bl	80118a0 <iprintf>
 800ded8:	e0ae      	b.n	800e038 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	2200      	movs	r2, #0
 800dede:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800dee0:	69bb      	ldr	r3, [r7, #24]
 800dee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee8:	d019      	beq.n	800df1e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deee:	331e      	adds	r3, #30
 800def0:	4a57      	ldr	r2, [pc, #348]	; (800e050 <dhcp_bind+0x1b0>)
 800def2:	fba2 2303 	umull	r2, r3, r2, r3
 800def6:	095b      	lsrs	r3, r3, #5
 800def8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df00:	d302      	bcc.n	800df08 <dhcp_bind+0x68>
      timeout = 0xffff;
 800df02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df06:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	8a9b      	ldrh	r3, [r3, #20]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d102      	bne.n	800df1e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	2201      	movs	r2, #1
 800df1c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df26:	d01d      	beq.n	800df64 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800df28:	69bb      	ldr	r3, [r7, #24]
 800df2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2c:	331e      	adds	r3, #30
 800df2e:	4a48      	ldr	r2, [pc, #288]	; (800e050 <dhcp_bind+0x1b0>)
 800df30:	fba2 2303 	umull	r2, r3, r2, r3
 800df34:	095b      	lsrs	r3, r3, #5
 800df36:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df3e:	d302      	bcc.n	800df46 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800df40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df44:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	b29a      	uxth	r2, r3
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	895b      	ldrh	r3, [r3, #10]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d102      	bne.n	800df5c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	2201      	movs	r2, #1
 800df5a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800df5c:	69bb      	ldr	r3, [r7, #24]
 800df5e:	895a      	ldrh	r2, [r3, #10]
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df6c:	d01d      	beq.n	800dfaa <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df72:	331e      	adds	r3, #30
 800df74:	4a36      	ldr	r2, [pc, #216]	; (800e050 <dhcp_bind+0x1b0>)
 800df76:	fba2 2303 	umull	r2, r3, r2, r3
 800df7a:	095b      	lsrs	r3, r3, #5
 800df7c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800df7e:	69fb      	ldr	r3, [r7, #28]
 800df80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df84:	d302      	bcc.n	800df8c <dhcp_bind+0xec>
      timeout = 0xffff;
 800df86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df8a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	b29a      	uxth	r2, r3
 800df90:	69bb      	ldr	r3, [r7, #24]
 800df92:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	899b      	ldrh	r3, [r3, #12]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d102      	bne.n	800dfa2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	2201      	movs	r2, #1
 800dfa0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	899a      	ldrh	r2, [r3, #12]
 800dfa6:	69bb      	ldr	r3, [r7, #24]
 800dfa8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	895a      	ldrh	r2, [r3, #10]
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	899b      	ldrh	r3, [r3, #12]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d306      	bcc.n	800dfc4 <dhcp_bind+0x124>
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	899b      	ldrh	r3, [r3, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d002      	beq.n	800dfc4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	79db      	ldrb	r3, [r3, #7]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d003      	beq.n	800dfd4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	6a1b      	ldr	r3, [r3, #32]
 800dfd0:	613b      	str	r3, [r7, #16]
 800dfd2:	e014      	b.n	800dffe <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	331c      	adds	r3, #28
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800dfdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	db02      	blt.n	800dfea <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800dfe4:	23ff      	movs	r3, #255	; 0xff
 800dfe6:	613b      	str	r3, [r7, #16]
 800dfe8:	e009      	b.n	800dffe <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800dfea:	7dfb      	ldrb	r3, [r7, #23]
 800dfec:	2bbf      	cmp	r3, #191	; 0xbf
 800dfee:	d903      	bls.n	800dff8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800dff0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800dff4:	613b      	str	r3, [r7, #16]
 800dff6:	e002      	b.n	800dffe <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800dff8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dffc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800dffe:	69bb      	ldr	r3, [r7, #24]
 800e000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e002:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d108      	bne.n	800e01c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	69da      	ldr	r2, [r3, #28]
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	4013      	ands	r3, r2
 800e012:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e01a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800e01c:	210a      	movs	r1, #10
 800e01e:	69b8      	ldr	r0, [r7, #24]
 800e020:	f000 faa0 	bl	800e564 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	f103 011c 	add.w	r1, r3, #28
 800e02a:	f107 030c 	add.w	r3, r7, #12
 800e02e:	f107 0210 	add.w	r2, r7, #16
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7f7 fbe2 	bl	80057fc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800e038:	3720      	adds	r7, #32
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	08014a4c 	.word	0x08014a4c
 800e044:	08014bac 	.word	0x08014bac
 800e048:	08014aac 	.word	0x08014aac
 800e04c:	08014bc8 	.word	0x08014bc8
 800e050:	88888889 	.word	0x88888889

0800e054 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b08a      	sub	sp, #40	; 0x28
 800e058:	af02      	add	r7, sp, #8
 800e05a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e060:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800e062:	2105      	movs	r1, #5
 800e064:	69b8      	ldr	r0, [r7, #24]
 800e066:	f000 fa7d 	bl	800e564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e06a:	f107 030c 	add.w	r3, r7, #12
 800e06e:	2203      	movs	r2, #3
 800e070:	69b9      	ldr	r1, [r7, #24]
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 ff02 	bl	800ee7c <dhcp_create_msg>
 800e078:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d04e      	beq.n	800e11e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e086:	89b8      	ldrh	r0, [r7, #12]
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e08e:	2302      	movs	r3, #2
 800e090:	2239      	movs	r2, #57	; 0x39
 800e092:	f000 fa81 	bl	800e598 <dhcp_option>
 800e096:	4603      	mov	r3, r0
 800e098:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e09a:	89b8      	ldrh	r0, [r7, #12]
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	f000 fad0 	bl	800e64c <dhcp_option_short>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e0b0:	89b8      	ldrh	r0, [r7, #12]
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e0b8:	2303      	movs	r3, #3
 800e0ba:	2237      	movs	r2, #55	; 0x37
 800e0bc:	f000 fa6c 	bl	800e598 <dhcp_option>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	77bb      	strb	r3, [r7, #30]
 800e0c8:	e00e      	b.n	800e0e8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e0ca:	89b8      	ldrh	r0, [r7, #12]
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e0d2:	7fbb      	ldrb	r3, [r7, #30]
 800e0d4:	4a2a      	ldr	r2, [pc, #168]	; (800e180 <dhcp_renew+0x12c>)
 800e0d6:	5cd3      	ldrb	r3, [r2, r3]
 800e0d8:	461a      	mov	r2, r3
 800e0da:	f000 fa91 	bl	800e600 <dhcp_option_byte>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e0e2:	7fbb      	ldrb	r3, [r7, #30]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	77bb      	strb	r3, [r7, #30]
 800e0e8:	7fbb      	ldrb	r3, [r7, #30]
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d9ed      	bls.n	800e0ca <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e0ee:	89b8      	ldrh	r0, [r7, #12]
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	33f0      	adds	r3, #240	; 0xf0
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	f000 ff96 	bl	800f028 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e0fc:	4b21      	ldr	r3, [pc, #132]	; (800e184 <dhcp_renew+0x130>)
 800e0fe:	6818      	ldr	r0, [r3, #0]
 800e100:	69bb      	ldr	r3, [r7, #24]
 800e102:	f103 0218 	add.w	r2, r3, #24
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	9300      	str	r3, [sp, #0]
 800e10a:	2343      	movs	r3, #67	; 0x43
 800e10c:	6979      	ldr	r1, [r7, #20]
 800e10e:	f7fe fe53 	bl	800cdb8 <udp_sendto_if>
 800e112:	4603      	mov	r3, r0
 800e114:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e116:	6978      	ldr	r0, [r7, #20]
 800e118:	f7f8 f850 	bl	80061bc <pbuf_free>
 800e11c:	e001      	b.n	800e122 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e11e:	23ff      	movs	r3, #255	; 0xff
 800e120:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	799b      	ldrb	r3, [r3, #6]
 800e126:	2bff      	cmp	r3, #255	; 0xff
 800e128:	d005      	beq.n	800e136 <dhcp_renew+0xe2>
    dhcp->tries++;
 800e12a:	69bb      	ldr	r3, [r7, #24]
 800e12c:	799b      	ldrb	r3, [r3, #6]
 800e12e:	3301      	adds	r3, #1
 800e130:	b2da      	uxtb	r2, r3
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	799b      	ldrb	r3, [r3, #6]
 800e13a:	2b09      	cmp	r3, #9
 800e13c:	d80a      	bhi.n	800e154 <dhcp_renew+0x100>
 800e13e:	69bb      	ldr	r3, [r7, #24]
 800e140:	799b      	ldrb	r3, [r3, #6]
 800e142:	b29b      	uxth	r3, r3
 800e144:	461a      	mov	r2, r3
 800e146:	0152      	lsls	r2, r2, #5
 800e148:	1ad2      	subs	r2, r2, r3
 800e14a:	0092      	lsls	r2, r2, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	011b      	lsls	r3, r3, #4
 800e150:	b29b      	uxth	r3, r3
 800e152:	e001      	b.n	800e158 <dhcp_renew+0x104>
 800e154:	f644 6320 	movw	r3, #20000	; 0x4e20
 800e158:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e15a:	89fb      	ldrh	r3, [r7, #14]
 800e15c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e160:	4a09      	ldr	r2, [pc, #36]	; (800e188 <dhcp_renew+0x134>)
 800e162:	fb82 1203 	smull	r1, r2, r2, r3
 800e166:	1152      	asrs	r2, r2, #5
 800e168:	17db      	asrs	r3, r3, #31
 800e16a:	1ad3      	subs	r3, r2, r3
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	69bb      	ldr	r3, [r7, #24]
 800e170:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e172:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3720      	adds	r7, #32
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bd80      	pop	{r7, pc}
 800e17e:	bf00      	nop
 800e180:	2000002c 	.word	0x2000002c
 800e184:	20008814 	.word	0x20008814
 800e188:	10624dd3 	.word	0x10624dd3

0800e18c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08a      	sub	sp, #40	; 0x28
 800e190:	af02      	add	r7, sp, #8
 800e192:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e198:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800e19a:	2104      	movs	r1, #4
 800e19c:	69b8      	ldr	r0, [r7, #24]
 800e19e:	f000 f9e1 	bl	800e564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e1a2:	f107 030c 	add.w	r3, r7, #12
 800e1a6:	2203      	movs	r2, #3
 800e1a8:	69b9      	ldr	r1, [r7, #24]
 800e1aa:	6878      	ldr	r0, [r7, #4]
 800e1ac:	f000 fe66 	bl	800ee7c <dhcp_create_msg>
 800e1b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d04c      	beq.n	800e252 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e1be:	89b8      	ldrh	r0, [r7, #12]
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e1c6:	2302      	movs	r3, #2
 800e1c8:	2239      	movs	r2, #57	; 0x39
 800e1ca:	f000 f9e5 	bl	800e598 <dhcp_option>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e1d2:	89b8      	ldrh	r0, [r7, #12]
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1de:	461a      	mov	r2, r3
 800e1e0:	f000 fa34 	bl	800e64c <dhcp_option_short>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e1e8:	89b8      	ldrh	r0, [r7, #12]
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e1f0:	2303      	movs	r3, #3
 800e1f2:	2237      	movs	r2, #55	; 0x37
 800e1f4:	f000 f9d0 	bl	800e598 <dhcp_option>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	77bb      	strb	r3, [r7, #30]
 800e200:	e00e      	b.n	800e220 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e202:	89b8      	ldrh	r0, [r7, #12]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e20a:	7fbb      	ldrb	r3, [r7, #30]
 800e20c:	4a29      	ldr	r2, [pc, #164]	; (800e2b4 <dhcp_rebind+0x128>)
 800e20e:	5cd3      	ldrb	r3, [r2, r3]
 800e210:	461a      	mov	r2, r3
 800e212:	f000 f9f5 	bl	800e600 <dhcp_option_byte>
 800e216:	4603      	mov	r3, r0
 800e218:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e21a:	7fbb      	ldrb	r3, [r7, #30]
 800e21c:	3301      	adds	r3, #1
 800e21e:	77bb      	strb	r3, [r7, #30]
 800e220:	7fbb      	ldrb	r3, [r7, #30]
 800e222:	2b02      	cmp	r3, #2
 800e224:	d9ed      	bls.n	800e202 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e226:	89b8      	ldrh	r0, [r7, #12]
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	33f0      	adds	r3, #240	; 0xf0
 800e22c:	697a      	ldr	r2, [r7, #20]
 800e22e:	4619      	mov	r1, r3
 800e230:	f000 fefa 	bl	800f028 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e234:	4b20      	ldr	r3, [pc, #128]	; (800e2b8 <dhcp_rebind+0x12c>)
 800e236:	6818      	ldr	r0, [r3, #0]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	9300      	str	r3, [sp, #0]
 800e23c:	2343      	movs	r3, #67	; 0x43
 800e23e:	4a1f      	ldr	r2, [pc, #124]	; (800e2bc <dhcp_rebind+0x130>)
 800e240:	6979      	ldr	r1, [r7, #20]
 800e242:	f7fe fdb9 	bl	800cdb8 <udp_sendto_if>
 800e246:	4603      	mov	r3, r0
 800e248:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e24a:	6978      	ldr	r0, [r7, #20]
 800e24c:	f7f7 ffb6 	bl	80061bc <pbuf_free>
 800e250:	e001      	b.n	800e256 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e252:	23ff      	movs	r3, #255	; 0xff
 800e254:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e256:	69bb      	ldr	r3, [r7, #24]
 800e258:	799b      	ldrb	r3, [r3, #6]
 800e25a:	2bff      	cmp	r3, #255	; 0xff
 800e25c:	d005      	beq.n	800e26a <dhcp_rebind+0xde>
    dhcp->tries++;
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	799b      	ldrb	r3, [r3, #6]
 800e262:	3301      	adds	r3, #1
 800e264:	b2da      	uxtb	r2, r3
 800e266:	69bb      	ldr	r3, [r7, #24]
 800e268:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	799b      	ldrb	r3, [r3, #6]
 800e26e:	2b09      	cmp	r3, #9
 800e270:	d80a      	bhi.n	800e288 <dhcp_rebind+0xfc>
 800e272:	69bb      	ldr	r3, [r7, #24]
 800e274:	799b      	ldrb	r3, [r3, #6]
 800e276:	b29b      	uxth	r3, r3
 800e278:	461a      	mov	r2, r3
 800e27a:	0152      	lsls	r2, r2, #5
 800e27c:	1ad2      	subs	r2, r2, r3
 800e27e:	0092      	lsls	r2, r2, #2
 800e280:	4413      	add	r3, r2
 800e282:	00db      	lsls	r3, r3, #3
 800e284:	b29b      	uxth	r3, r3
 800e286:	e001      	b.n	800e28c <dhcp_rebind+0x100>
 800e288:	f242 7310 	movw	r3, #10000	; 0x2710
 800e28c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e28e:	89fb      	ldrh	r3, [r7, #14]
 800e290:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e294:	4a0a      	ldr	r2, [pc, #40]	; (800e2c0 <dhcp_rebind+0x134>)
 800e296:	fb82 1203 	smull	r1, r2, r2, r3
 800e29a:	1152      	asrs	r2, r2, #5
 800e29c:	17db      	asrs	r3, r3, #31
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	69bb      	ldr	r3, [r7, #24]
 800e2a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e2a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3720      	adds	r7, #32
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	2000002c 	.word	0x2000002c
 800e2b8:	20008814 	.word	0x20008814
 800e2bc:	080155b8 	.word	0x080155b8
 800e2c0:	10624dd3 	.word	0x10624dd3

0800e2c4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800e2c4:	b5b0      	push	{r4, r5, r7, lr}
 800e2c6:	b08a      	sub	sp, #40	; 0x28
 800e2c8:	af02      	add	r7, sp, #8
 800e2ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800e2d2:	2103      	movs	r1, #3
 800e2d4:	69b8      	ldr	r0, [r7, #24]
 800e2d6:	f000 f945 	bl	800e564 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e2da:	f107 030c 	add.w	r3, r7, #12
 800e2de:	2203      	movs	r2, #3
 800e2e0:	69b9      	ldr	r1, [r7, #24]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fdca 	bl	800ee7c <dhcp_create_msg>
 800e2e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d066      	beq.n	800e3be <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e2f6:	89b8      	ldrh	r0, [r7, #12]
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e2fe:	2302      	movs	r3, #2
 800e300:	2239      	movs	r2, #57	; 0x39
 800e302:	f000 f949 	bl	800e598 <dhcp_option>
 800e306:	4603      	mov	r3, r0
 800e308:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800e30a:	89b8      	ldrh	r0, [r7, #12]
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	33f0      	adds	r3, #240	; 0xf0
 800e310:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e314:	4619      	mov	r1, r3
 800e316:	f000 f999 	bl	800e64c <dhcp_option_short>
 800e31a:	4603      	mov	r3, r0
 800e31c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e31e:	89b8      	ldrh	r0, [r7, #12]
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e326:	2304      	movs	r3, #4
 800e328:	2232      	movs	r2, #50	; 0x32
 800e32a:	f000 f935 	bl	800e598 <dhcp_option>
 800e32e:	4603      	mov	r3, r0
 800e330:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e332:	89bc      	ldrh	r4, [r7, #12]
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e33a:	69bb      	ldr	r3, [r7, #24]
 800e33c:	69db      	ldr	r3, [r3, #28]
 800e33e:	4618      	mov	r0, r3
 800e340:	f7f6 fbe7 	bl	8004b12 <lwip_htonl>
 800e344:	4603      	mov	r3, r0
 800e346:	461a      	mov	r2, r3
 800e348:	4629      	mov	r1, r5
 800e34a:	4620      	mov	r0, r4
 800e34c:	f000 f9b0 	bl	800e6b0 <dhcp_option_long>
 800e350:	4603      	mov	r3, r0
 800e352:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e354:	89b8      	ldrh	r0, [r7, #12]
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e35c:	2303      	movs	r3, #3
 800e35e:	2237      	movs	r2, #55	; 0x37
 800e360:	f000 f91a 	bl	800e598 <dhcp_option>
 800e364:	4603      	mov	r3, r0
 800e366:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e368:	2300      	movs	r3, #0
 800e36a:	77bb      	strb	r3, [r7, #30]
 800e36c:	e00e      	b.n	800e38c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e36e:	89b8      	ldrh	r0, [r7, #12]
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e376:	7fbb      	ldrb	r3, [r7, #30]
 800e378:	4a29      	ldr	r2, [pc, #164]	; (800e420 <dhcp_reboot+0x15c>)
 800e37a:	5cd3      	ldrb	r3, [r2, r3]
 800e37c:	461a      	mov	r2, r3
 800e37e:	f000 f93f 	bl	800e600 <dhcp_option_byte>
 800e382:	4603      	mov	r3, r0
 800e384:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e386:	7fbb      	ldrb	r3, [r7, #30]
 800e388:	3301      	adds	r3, #1
 800e38a:	77bb      	strb	r3, [r7, #30]
 800e38c:	7fbb      	ldrb	r3, [r7, #30]
 800e38e:	2b02      	cmp	r3, #2
 800e390:	d9ed      	bls.n	800e36e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e392:	89b8      	ldrh	r0, [r7, #12]
 800e394:	693b      	ldr	r3, [r7, #16]
 800e396:	33f0      	adds	r3, #240	; 0xf0
 800e398:	697a      	ldr	r2, [r7, #20]
 800e39a:	4619      	mov	r1, r3
 800e39c:	f000 fe44 	bl	800f028 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e3a0:	4b20      	ldr	r3, [pc, #128]	; (800e424 <dhcp_reboot+0x160>)
 800e3a2:	6818      	ldr	r0, [r3, #0]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	2343      	movs	r3, #67	; 0x43
 800e3aa:	4a1f      	ldr	r2, [pc, #124]	; (800e428 <dhcp_reboot+0x164>)
 800e3ac:	6979      	ldr	r1, [r7, #20]
 800e3ae:	f7fe fd03 	bl	800cdb8 <udp_sendto_if>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e3b6:	6978      	ldr	r0, [r7, #20]
 800e3b8:	f7f7 ff00 	bl	80061bc <pbuf_free>
 800e3bc:	e001      	b.n	800e3c2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e3be:	23ff      	movs	r3, #255	; 0xff
 800e3c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	799b      	ldrb	r3, [r3, #6]
 800e3c6:	2bff      	cmp	r3, #255	; 0xff
 800e3c8:	d005      	beq.n	800e3d6 <dhcp_reboot+0x112>
    dhcp->tries++;
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	799b      	ldrb	r3, [r3, #6]
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	69bb      	ldr	r3, [r7, #24]
 800e3d4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	799b      	ldrb	r3, [r3, #6]
 800e3da:	2b09      	cmp	r3, #9
 800e3dc:	d80a      	bhi.n	800e3f4 <dhcp_reboot+0x130>
 800e3de:	69bb      	ldr	r3, [r7, #24]
 800e3e0:	799b      	ldrb	r3, [r3, #6]
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	0152      	lsls	r2, r2, #5
 800e3e8:	1ad2      	subs	r2, r2, r3
 800e3ea:	0092      	lsls	r2, r2, #2
 800e3ec:	4413      	add	r3, r2
 800e3ee:	00db      	lsls	r3, r3, #3
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	e001      	b.n	800e3f8 <dhcp_reboot+0x134>
 800e3f4:	f242 7310 	movw	r3, #10000	; 0x2710
 800e3f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e3fa:	89fb      	ldrh	r3, [r7, #14]
 800e3fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e400:	4a0a      	ldr	r2, [pc, #40]	; (800e42c <dhcp_reboot+0x168>)
 800e402:	fb82 1203 	smull	r1, r2, r2, r3
 800e406:	1152      	asrs	r2, r2, #5
 800e408:	17db      	asrs	r3, r3, #31
 800e40a:	1ad3      	subs	r3, r2, r3
 800e40c:	b29a      	uxth	r2, r3
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e412:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3720      	adds	r7, #32
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bdb0      	pop	{r4, r5, r7, pc}
 800e41e:	bf00      	nop
 800e420:	2000002c 	.word	0x2000002c
 800e424:	20008814 	.word	0x20008814
 800e428:	080155b8 	.word	0x080155b8
 800e42c:	10624dd3 	.word	0x10624dd3

0800e430 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800e430:	b5b0      	push	{r4, r5, r7, lr}
 800e432:	b08a      	sub	sp, #40	; 0x28
 800e434:	af02      	add	r7, sp, #8
 800e436:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	2b00      	cmp	r3, #0
 800e442:	f000 8084 	beq.w	800e54e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	795b      	ldrb	r3, [r3, #5]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f000 8081 	beq.w	800e552 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	699b      	ldr	r3, [r3, #24]
 800e454:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800e456:	69fb      	ldr	r3, [r7, #28]
 800e458:	2200      	movs	r2, #0
 800e45a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	2200      	movs	r2, #0
 800e460:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	2200      	movs	r2, #0
 800e466:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	2200      	movs	r2, #0
 800e46c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800e46e:	69fb      	ldr	r3, [r7, #28]
 800e470:	2200      	movs	r2, #0
 800e472:	631a      	str	r2, [r3, #48]	; 0x30
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e478:	69fb      	ldr	r3, [r7, #28]
 800e47a:	62da      	str	r2, [r3, #44]	; 0x2c
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800e484:	69fb      	ldr	r3, [r7, #28]
 800e486:	2200      	movs	r2, #0
 800e488:	829a      	strh	r2, [r3, #20]
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	8a9a      	ldrh	r2, [r3, #20]
 800e48e:	69fb      	ldr	r3, [r7, #28]
 800e490:	825a      	strh	r2, [r3, #18]
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	8a5a      	ldrh	r2, [r3, #18]
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	821a      	strh	r2, [r3, #16]
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	8a1a      	ldrh	r2, [r3, #16]
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 fdee 	bl	800f084 <dhcp_supplied_address>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d03b      	beq.n	800e526 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800e4ae:	f107 030e 	add.w	r3, r7, #14
 800e4b2:	2207      	movs	r2, #7
 800e4b4:	69f9      	ldr	r1, [r7, #28]
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f000 fce0 	bl	800ee7c <dhcp_create_msg>
 800e4bc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d030      	beq.n	800e526 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e4ca:	89f8      	ldrh	r0, [r7, #14]
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4d2:	2304      	movs	r3, #4
 800e4d4:	2236      	movs	r2, #54	; 0x36
 800e4d6:	f000 f85f 	bl	800e598 <dhcp_option>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800e4de:	89fc      	ldrh	r4, [r7, #14]
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7f6 fb12 	bl	8004b12 <lwip_htonl>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f000 f8db 	bl	800e6b0 <dhcp_option_long>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e4fe:	89f8      	ldrh	r0, [r7, #14]
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	33f0      	adds	r3, #240	; 0xf0
 800e504:	69ba      	ldr	r2, [r7, #24]
 800e506:	4619      	mov	r1, r3
 800e508:	f000 fd8e 	bl	800f028 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800e50c:	4b13      	ldr	r3, [pc, #76]	; (800e55c <dhcp_release_and_stop+0x12c>)
 800e50e:	6818      	ldr	r0, [r3, #0]
 800e510:	f107 0210 	add.w	r2, r7, #16
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	2343      	movs	r3, #67	; 0x43
 800e51a:	69b9      	ldr	r1, [r7, #24]
 800e51c:	f7fe fc4c 	bl	800cdb8 <udp_sendto_if>
      pbuf_free(p_out);
 800e520:	69b8      	ldr	r0, [r7, #24]
 800e522:	f7f7 fe4b 	bl	80061bc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e526:	4b0e      	ldr	r3, [pc, #56]	; (800e560 <dhcp_release_and_stop+0x130>)
 800e528:	4a0d      	ldr	r2, [pc, #52]	; (800e560 <dhcp_release_and_stop+0x130>)
 800e52a:	490d      	ldr	r1, [pc, #52]	; (800e560 <dhcp_release_and_stop+0x130>)
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7f7 f965 	bl	80057fc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e532:	2100      	movs	r1, #0
 800e534:	69f8      	ldr	r0, [r7, #28]
 800e536:	f000 f815 	bl	800e564 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800e53a:	69fb      	ldr	r3, [r7, #28]
 800e53c:	791b      	ldrb	r3, [r3, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d008      	beq.n	800e554 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e542:	f7fe ff85 	bl	800d450 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	2200      	movs	r2, #0
 800e54a:	711a      	strb	r2, [r3, #4]
 800e54c:	e002      	b.n	800e554 <dhcp_release_and_stop+0x124>
    return;
 800e54e:	bf00      	nop
 800e550:	e000      	b.n	800e554 <dhcp_release_and_stop+0x124>
    return;
 800e552:	bf00      	nop
  }
}
 800e554:	3720      	adds	r7, #32
 800e556:	46bd      	mov	sp, r7
 800e558:	bdb0      	pop	{r4, r5, r7, pc}
 800e55a:	bf00      	nop
 800e55c:	20008814 	.word	0x20008814
 800e560:	080155b4 	.word	0x080155b4

0800e564 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	460b      	mov	r3, r1
 800e56e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	795b      	ldrb	r3, [r3, #5]
 800e574:	78fa      	ldrb	r2, [r7, #3]
 800e576:	429a      	cmp	r2, r3
 800e578:	d008      	beq.n	800e58c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	78fa      	ldrb	r2, [r7, #3]
 800e57e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	811a      	strh	r2, [r3, #8]
  }
}
 800e58c:	bf00      	nop
 800e58e:	370c      	adds	r7, #12
 800e590:	46bd      	mov	sp, r7
 800e592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e596:	4770      	bx	lr

0800e598 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b082      	sub	sp, #8
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6039      	str	r1, [r7, #0]
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	80fb      	strh	r3, [r7, #6]
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	717b      	strb	r3, [r7, #5]
 800e5ac:	4613      	mov	r3, r2
 800e5ae:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800e5b0:	88fa      	ldrh	r2, [r7, #6]
 800e5b2:	793b      	ldrb	r3, [r7, #4]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	3302      	adds	r3, #2
 800e5b8:	2b44      	cmp	r3, #68	; 0x44
 800e5ba:	d906      	bls.n	800e5ca <dhcp_option+0x32>
 800e5bc:	4b0d      	ldr	r3, [pc, #52]	; (800e5f4 <dhcp_option+0x5c>)
 800e5be:	f240 529a 	movw	r2, #1434	; 0x59a
 800e5c2:	490d      	ldr	r1, [pc, #52]	; (800e5f8 <dhcp_option+0x60>)
 800e5c4:	480d      	ldr	r0, [pc, #52]	; (800e5fc <dhcp_option+0x64>)
 800e5c6:	f003 f96b 	bl	80118a0 <iprintf>
  options[options_out_len++] = option_type;
 800e5ca:	88fb      	ldrh	r3, [r7, #6]
 800e5cc:	1c5a      	adds	r2, r3, #1
 800e5ce:	80fa      	strh	r2, [r7, #6]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	4413      	add	r3, r2
 800e5d6:	797a      	ldrb	r2, [r7, #5]
 800e5d8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800e5da:	88fb      	ldrh	r3, [r7, #6]
 800e5dc:	1c5a      	adds	r2, r3, #1
 800e5de:	80fa      	strh	r2, [r7, #6]
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	793a      	ldrb	r2, [r7, #4]
 800e5e8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e5ea:	88fb      	ldrh	r3, [r7, #6]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3708      	adds	r7, #8
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}
 800e5f4:	08014a4c 	.word	0x08014a4c
 800e5f8:	08014be0 	.word	0x08014be0
 800e5fc:	08014aac 	.word	0x08014aac

0800e600 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	6039      	str	r1, [r7, #0]
 800e60a:	80fb      	strh	r3, [r7, #6]
 800e60c:	4613      	mov	r3, r2
 800e60e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800e610:	88fb      	ldrh	r3, [r7, #6]
 800e612:	2b43      	cmp	r3, #67	; 0x43
 800e614:	d906      	bls.n	800e624 <dhcp_option_byte+0x24>
 800e616:	4b0a      	ldr	r3, [pc, #40]	; (800e640 <dhcp_option_byte+0x40>)
 800e618:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800e61c:	4909      	ldr	r1, [pc, #36]	; (800e644 <dhcp_option_byte+0x44>)
 800e61e:	480a      	ldr	r0, [pc, #40]	; (800e648 <dhcp_option_byte+0x48>)
 800e620:	f003 f93e 	bl	80118a0 <iprintf>
  options[options_out_len++] = value;
 800e624:	88fb      	ldrh	r3, [r7, #6]
 800e626:	1c5a      	adds	r2, r3, #1
 800e628:	80fa      	strh	r2, [r7, #6]
 800e62a:	461a      	mov	r2, r3
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	4413      	add	r3, r2
 800e630:	797a      	ldrb	r2, [r7, #5]
 800e632:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e634:	88fb      	ldrh	r3, [r7, #6]
}
 800e636:	4618      	mov	r0, r3
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	08014a4c 	.word	0x08014a4c
 800e644:	08014c24 	.word	0x08014c24
 800e648:	08014aac 	.word	0x08014aac

0800e64c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b082      	sub	sp, #8
 800e650:	af00      	add	r7, sp, #0
 800e652:	4603      	mov	r3, r0
 800e654:	6039      	str	r1, [r7, #0]
 800e656:	80fb      	strh	r3, [r7, #6]
 800e658:	4613      	mov	r3, r2
 800e65a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800e65c:	88fb      	ldrh	r3, [r7, #6]
 800e65e:	3302      	adds	r3, #2
 800e660:	2b44      	cmp	r3, #68	; 0x44
 800e662:	d906      	bls.n	800e672 <dhcp_option_short+0x26>
 800e664:	4b0f      	ldr	r3, [pc, #60]	; (800e6a4 <dhcp_option_short+0x58>)
 800e666:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800e66a:	490f      	ldr	r1, [pc, #60]	; (800e6a8 <dhcp_option_short+0x5c>)
 800e66c:	480f      	ldr	r0, [pc, #60]	; (800e6ac <dhcp_option_short+0x60>)
 800e66e:	f003 f917 	bl	80118a0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800e672:	88bb      	ldrh	r3, [r7, #4]
 800e674:	0a1b      	lsrs	r3, r3, #8
 800e676:	b29a      	uxth	r2, r3
 800e678:	88fb      	ldrh	r3, [r7, #6]
 800e67a:	1c59      	adds	r1, r3, #1
 800e67c:	80f9      	strh	r1, [r7, #6]
 800e67e:	4619      	mov	r1, r3
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	440b      	add	r3, r1
 800e684:	b2d2      	uxtb	r2, r2
 800e686:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800e688:	88fb      	ldrh	r3, [r7, #6]
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	80fa      	strh	r2, [r7, #6]
 800e68e:	461a      	mov	r2, r3
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	4413      	add	r3, r2
 800e694:	88ba      	ldrh	r2, [r7, #4]
 800e696:	b2d2      	uxtb	r2, r2
 800e698:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e69a:	88fb      	ldrh	r3, [r7, #6]
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	08014a4c 	.word	0x08014a4c
 800e6a8:	08014c5c 	.word	0x08014c5c
 800e6ac:	08014aac 	.word	0x08014aac

0800e6b0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b084      	sub	sp, #16
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800e6be:	89fb      	ldrh	r3, [r7, #14]
 800e6c0:	3304      	adds	r3, #4
 800e6c2:	2b44      	cmp	r3, #68	; 0x44
 800e6c4:	d906      	bls.n	800e6d4 <dhcp_option_long+0x24>
 800e6c6:	4b19      	ldr	r3, [pc, #100]	; (800e72c <dhcp_option_long+0x7c>)
 800e6c8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800e6cc:	4918      	ldr	r1, [pc, #96]	; (800e730 <dhcp_option_long+0x80>)
 800e6ce:	4819      	ldr	r0, [pc, #100]	; (800e734 <dhcp_option_long+0x84>)
 800e6d0:	f003 f8e6 	bl	80118a0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	0e1a      	lsrs	r2, r3, #24
 800e6d8:	89fb      	ldrh	r3, [r7, #14]
 800e6da:	1c59      	adds	r1, r3, #1
 800e6dc:	81f9      	strh	r1, [r7, #14]
 800e6de:	4619      	mov	r1, r3
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	440b      	add	r3, r1
 800e6e4:	b2d2      	uxtb	r2, r2
 800e6e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	0c1a      	lsrs	r2, r3, #16
 800e6ec:	89fb      	ldrh	r3, [r7, #14]
 800e6ee:	1c59      	adds	r1, r3, #1
 800e6f0:	81f9      	strh	r1, [r7, #14]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	440b      	add	r3, r1
 800e6f8:	b2d2      	uxtb	r2, r2
 800e6fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	0a1a      	lsrs	r2, r3, #8
 800e700:	89fb      	ldrh	r3, [r7, #14]
 800e702:	1c59      	adds	r1, r3, #1
 800e704:	81f9      	strh	r1, [r7, #14]
 800e706:	4619      	mov	r1, r3
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	440b      	add	r3, r1
 800e70c:	b2d2      	uxtb	r2, r2
 800e70e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800e710:	89fb      	ldrh	r3, [r7, #14]
 800e712:	1c5a      	adds	r2, r3, #1
 800e714:	81fa      	strh	r2, [r7, #14]
 800e716:	461a      	mov	r2, r3
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	4413      	add	r3, r2
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	b2d2      	uxtb	r2, r2
 800e720:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800e722:	89fb      	ldrh	r3, [r7, #14]
}
 800e724:	4618      	mov	r0, r3
 800e726:	3710      	adds	r7, #16
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	08014a4c 	.word	0x08014a4c
 800e730:	08014c98 	.word	0x08014c98
 800e734:	08014aac 	.word	0x08014aac

0800e738 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b090      	sub	sp, #64	; 0x40
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800e746:	2300      	movs	r3, #0
 800e748:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800e74a:	2208      	movs	r2, #8
 800e74c:	2100      	movs	r1, #0
 800e74e:	48b5      	ldr	r0, [pc, #724]	; (800ea24 <dhcp_parse_reply+0x2ec>)
 800e750:	f003 f90b 	bl	801196a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	895b      	ldrh	r3, [r3, #10]
 800e758:	2b2b      	cmp	r3, #43	; 0x2b
 800e75a:	d802      	bhi.n	800e762 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800e75c:	f06f 0301 	mvn.w	r3, #1
 800e760:	e2a7      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800e768:	23f0      	movs	r3, #240	; 0xf0
 800e76a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	891b      	ldrh	r3, [r3, #8]
 800e770:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800e776:	e00c      	b.n	800e792 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77a:	895b      	ldrh	r3, [r3, #10]
 800e77c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e77e:	1ad3      	subs	r3, r2, r3
 800e780:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800e782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e784:	895b      	ldrh	r3, [r3, #10]
 800e786:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800e78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800e792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e794:	2b00      	cmp	r3, #0
 800e796:	d004      	beq.n	800e7a2 <dhcp_parse_reply+0x6a>
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	895b      	ldrh	r3, [r3, #10]
 800e79c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d2ea      	bcs.n	800e778 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800e7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d102      	bne.n	800e7ae <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800e7a8:	f06f 0301 	mvn.w	r3, #1
 800e7ac:	e281      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800e7ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e7b0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800e7b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e7b4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800e7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e7bc:	e239      	b.n	800ec32 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800e7be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7c2:	4413      	add	r3, r2
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800e7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800e7d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7d6:	3302      	adds	r3, #2
 800e7d8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800e7da:	8bfa      	ldrh	r2, [r7, #30]
 800e7dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d202      	bcs.n	800e7e8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800e7e2:	f06f 0301 	mvn.w	r3, #1
 800e7e6:	e264      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800e7e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7ee:	8952      	ldrh	r2, [r2, #10]
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	da07      	bge.n	800e804 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800e7f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e7f6:	3301      	adds	r3, #1
 800e7f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e7fa:	4413      	add	r3, r2
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e802:	e00b      	b.n	800e81c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800e804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d004      	beq.n	800e816 <dhcp_parse_reply+0xde>
 800e80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	e000      	b.n	800e818 <dhcp_parse_reply+0xe0>
 800e816:	2300      	movs	r3, #0
 800e818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800e81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e820:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800e824:	7dfb      	ldrb	r3, [r7, #23]
 800e826:	2b3b      	cmp	r3, #59	; 0x3b
 800e828:	f200 812c 	bhi.w	800ea84 <dhcp_parse_reply+0x34c>
 800e82c:	a201      	add	r2, pc, #4	; (adr r2, 800e834 <dhcp_parse_reply+0xfc>)
 800e82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e832:	bf00      	nop
 800e834:	0800e925 	.word	0x0800e925
 800e838:	0800e935 	.word	0x0800e935
 800e83c:	0800ea85 	.word	0x0800ea85
 800e840:	0800e957 	.word	0x0800e957
 800e844:	0800ea85 	.word	0x0800ea85
 800e848:	0800ea85 	.word	0x0800ea85
 800e84c:	0800ea85 	.word	0x0800ea85
 800e850:	0800ea85 	.word	0x0800ea85
 800e854:	0800ea85 	.word	0x0800ea85
 800e858:	0800ea85 	.word	0x0800ea85
 800e85c:	0800ea85 	.word	0x0800ea85
 800e860:	0800ea85 	.word	0x0800ea85
 800e864:	0800ea85 	.word	0x0800ea85
 800e868:	0800ea85 	.word	0x0800ea85
 800e86c:	0800ea85 	.word	0x0800ea85
 800e870:	0800ea85 	.word	0x0800ea85
 800e874:	0800ea85 	.word	0x0800ea85
 800e878:	0800ea85 	.word	0x0800ea85
 800e87c:	0800ea85 	.word	0x0800ea85
 800e880:	0800ea85 	.word	0x0800ea85
 800e884:	0800ea85 	.word	0x0800ea85
 800e888:	0800ea85 	.word	0x0800ea85
 800e88c:	0800ea85 	.word	0x0800ea85
 800e890:	0800ea85 	.word	0x0800ea85
 800e894:	0800ea85 	.word	0x0800ea85
 800e898:	0800ea85 	.word	0x0800ea85
 800e89c:	0800ea85 	.word	0x0800ea85
 800e8a0:	0800ea85 	.word	0x0800ea85
 800e8a4:	0800ea85 	.word	0x0800ea85
 800e8a8:	0800ea85 	.word	0x0800ea85
 800e8ac:	0800ea85 	.word	0x0800ea85
 800e8b0:	0800ea85 	.word	0x0800ea85
 800e8b4:	0800ea85 	.word	0x0800ea85
 800e8b8:	0800ea85 	.word	0x0800ea85
 800e8bc:	0800ea85 	.word	0x0800ea85
 800e8c0:	0800ea85 	.word	0x0800ea85
 800e8c4:	0800ea85 	.word	0x0800ea85
 800e8c8:	0800ea85 	.word	0x0800ea85
 800e8cc:	0800ea85 	.word	0x0800ea85
 800e8d0:	0800ea85 	.word	0x0800ea85
 800e8d4:	0800ea85 	.word	0x0800ea85
 800e8d8:	0800ea85 	.word	0x0800ea85
 800e8dc:	0800ea85 	.word	0x0800ea85
 800e8e0:	0800ea85 	.word	0x0800ea85
 800e8e4:	0800ea85 	.word	0x0800ea85
 800e8e8:	0800ea85 	.word	0x0800ea85
 800e8ec:	0800ea85 	.word	0x0800ea85
 800e8f0:	0800ea85 	.word	0x0800ea85
 800e8f4:	0800ea85 	.word	0x0800ea85
 800e8f8:	0800ea85 	.word	0x0800ea85
 800e8fc:	0800ea85 	.word	0x0800ea85
 800e900:	0800e983 	.word	0x0800e983
 800e904:	0800e9a5 	.word	0x0800e9a5
 800e908:	0800e9e1 	.word	0x0800e9e1
 800e90c:	0800ea03 	.word	0x0800ea03
 800e910:	0800ea85 	.word	0x0800ea85
 800e914:	0800ea85 	.word	0x0800ea85
 800e918:	0800ea85 	.word	0x0800ea85
 800e91c:	0800ea41 	.word	0x0800ea41
 800e920:	0800ea63 	.word	0x0800ea63
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800e924:	2300      	movs	r3, #0
 800e926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e92a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e92e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800e932:	e0ab      	b.n	800ea8c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e938:	2b04      	cmp	r3, #4
 800e93a:	d009      	beq.n	800e950 <dhcp_parse_reply+0x218>
 800e93c:	4b3a      	ldr	r3, [pc, #232]	; (800ea28 <dhcp_parse_reply+0x2f0>)
 800e93e:	f240 622e 	movw	r2, #1582	; 0x62e
 800e942:	493a      	ldr	r1, [pc, #232]	; (800ea2c <dhcp_parse_reply+0x2f4>)
 800e944:	483a      	ldr	r0, [pc, #232]	; (800ea30 <dhcp_parse_reply+0x2f8>)
 800e946:	f002 ffab 	bl	80118a0 <iprintf>
 800e94a:	f06f 0305 	mvn.w	r3, #5
 800e94e:	e1b0      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800e950:	2306      	movs	r3, #6
 800e952:	623b      	str	r3, [r7, #32]
        break;
 800e954:	e09a      	b.n	800ea8c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800e956:	2304      	movs	r3, #4
 800e958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e95c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e964:	429a      	cmp	r2, r3
 800e966:	d209      	bcs.n	800e97c <dhcp_parse_reply+0x244>
 800e968:	4b2f      	ldr	r3, [pc, #188]	; (800ea28 <dhcp_parse_reply+0x2f0>)
 800e96a:	f240 6233 	movw	r2, #1587	; 0x633
 800e96e:	4931      	ldr	r1, [pc, #196]	; (800ea34 <dhcp_parse_reply+0x2fc>)
 800e970:	482f      	ldr	r0, [pc, #188]	; (800ea30 <dhcp_parse_reply+0x2f8>)
 800e972:	f002 ff95 	bl	80118a0 <iprintf>
 800e976:	f06f 0305 	mvn.w	r3, #5
 800e97a:	e19a      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800e97c:	2307      	movs	r3, #7
 800e97e:	623b      	str	r3, [r7, #32]
        break;
 800e980:	e084      	b.n	800ea8c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e986:	2b04      	cmp	r3, #4
 800e988:	d009      	beq.n	800e99e <dhcp_parse_reply+0x266>
 800e98a:	4b27      	ldr	r3, [pc, #156]	; (800ea28 <dhcp_parse_reply+0x2f0>)
 800e98c:	f240 6241 	movw	r2, #1601	; 0x641
 800e990:	4926      	ldr	r1, [pc, #152]	; (800ea2c <dhcp_parse_reply+0x2f4>)
 800e992:	4827      	ldr	r0, [pc, #156]	; (800ea30 <dhcp_parse_reply+0x2f8>)
 800e994:	f002 ff84 	bl	80118a0 <iprintf>
 800e998:	f06f 0305 	mvn.w	r3, #5
 800e99c:	e189      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800e99e:	2303      	movs	r3, #3
 800e9a0:	623b      	str	r3, [r7, #32]
        break;
 800e9a2:	e073      	b.n	800ea8c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e9a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d009      	beq.n	800e9c0 <dhcp_parse_reply+0x288>
 800e9ac:	4b1e      	ldr	r3, [pc, #120]	; (800ea28 <dhcp_parse_reply+0x2f0>)
 800e9ae:	f240 624f 	movw	r2, #1615	; 0x64f
 800e9b2:	4921      	ldr	r1, [pc, #132]	; (800ea38 <dhcp_parse_reply+0x300>)
 800e9b4:	481e      	ldr	r0, [pc, #120]	; (800ea30 <dhcp_parse_reply+0x2f8>)
 800e9b6:	f002 ff73 	bl	80118a0 <iprintf>
 800e9ba:	f06f 0305 	mvn.w	r3, #5
 800e9be:	e178      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800e9c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9c2:	2bf0      	cmp	r3, #240	; 0xf0
 800e9c4:	d009      	beq.n	800e9da <dhcp_parse_reply+0x2a2>
 800e9c6:	4b18      	ldr	r3, [pc, #96]	; (800ea28 <dhcp_parse_reply+0x2f0>)
 800e9c8:	f240 6251 	movw	r2, #1617	; 0x651
 800e9cc:	491b      	ldr	r1, [pc, #108]	; (800ea3c <dhcp_parse_reply+0x304>)
 800e9ce:	4818      	ldr	r0, [pc, #96]	; (800ea30 <dhcp_parse_reply+0x2f8>)
 800e9d0:	f002 ff66 	bl	80118a0 <iprintf>
 800e9d4:	f06f 0305 	mvn.w	r3, #5
 800e9d8:	e16b      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	623b      	str	r3, [r7, #32]
        break;
 800e9de:	e055      	b.n	800ea8c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d009      	beq.n	800e9fc <dhcp_parse_reply+0x2c4>
 800e9e8:	4b0f      	ldr	r3, [pc, #60]	; (800ea28 <dhcp_parse_reply+0x2f0>)
 800e9ea:	f240 6255 	movw	r2, #1621	; 0x655
 800e9ee:	4912      	ldr	r1, [pc, #72]	; (800ea38 <dhcp_parse_reply+0x300>)
 800e9f0:	480f      	ldr	r0, [pc, #60]	; (800ea30 <dhcp_parse_reply+0x2f8>)
 800e9f2:	f002 ff55 	bl	80118a0 <iprintf>
 800e9f6:	f06f 0305 	mvn.w	r3, #5
 800e9fa:	e15a      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	623b      	str	r3, [r7, #32]
        break;
 800ea00:	e044      	b.n	800ea8c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ea02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea06:	2b04      	cmp	r3, #4
 800ea08:	d009      	beq.n	800ea1e <dhcp_parse_reply+0x2e6>
 800ea0a:	4b07      	ldr	r3, [pc, #28]	; (800ea28 <dhcp_parse_reply+0x2f0>)
 800ea0c:	f240 6259 	movw	r2, #1625	; 0x659
 800ea10:	4906      	ldr	r1, [pc, #24]	; (800ea2c <dhcp_parse_reply+0x2f4>)
 800ea12:	4807      	ldr	r0, [pc, #28]	; (800ea30 <dhcp_parse_reply+0x2f8>)
 800ea14:	f002 ff44 	bl	80118a0 <iprintf>
 800ea18:	f06f 0305 	mvn.w	r3, #5
 800ea1c:	e149      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800ea1e:	2302      	movs	r3, #2
 800ea20:	623b      	str	r3, [r7, #32]
        break;
 800ea22:	e033      	b.n	800ea8c <dhcp_parse_reply+0x354>
 800ea24:	2000880c 	.word	0x2000880c
 800ea28:	08014a4c 	.word	0x08014a4c
 800ea2c:	08014cd4 	.word	0x08014cd4
 800ea30:	08014aac 	.word	0x08014aac
 800ea34:	08014ce0 	.word	0x08014ce0
 800ea38:	08014cf4 	.word	0x08014cf4
 800ea3c:	08014d00 	.word	0x08014d00
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ea40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea44:	2b04      	cmp	r3, #4
 800ea46:	d009      	beq.n	800ea5c <dhcp_parse_reply+0x324>
 800ea48:	4b9c      	ldr	r3, [pc, #624]	; (800ecbc <dhcp_parse_reply+0x584>)
 800ea4a:	f240 625d 	movw	r2, #1629	; 0x65d
 800ea4e:	499c      	ldr	r1, [pc, #624]	; (800ecc0 <dhcp_parse_reply+0x588>)
 800ea50:	489c      	ldr	r0, [pc, #624]	; (800ecc4 <dhcp_parse_reply+0x58c>)
 800ea52:	f002 ff25 	bl	80118a0 <iprintf>
 800ea56:	f06f 0305 	mvn.w	r3, #5
 800ea5a:	e12a      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800ea5c:	2304      	movs	r3, #4
 800ea5e:	623b      	str	r3, [r7, #32]
        break;
 800ea60:	e014      	b.n	800ea8c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ea62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea66:	2b04      	cmp	r3, #4
 800ea68:	d009      	beq.n	800ea7e <dhcp_parse_reply+0x346>
 800ea6a:	4b94      	ldr	r3, [pc, #592]	; (800ecbc <dhcp_parse_reply+0x584>)
 800ea6c:	f240 6261 	movw	r2, #1633	; 0x661
 800ea70:	4993      	ldr	r1, [pc, #588]	; (800ecc0 <dhcp_parse_reply+0x588>)
 800ea72:	4894      	ldr	r0, [pc, #592]	; (800ecc4 <dhcp_parse_reply+0x58c>)
 800ea74:	f002 ff14 	bl	80118a0 <iprintf>
 800ea78:	f06f 0305 	mvn.w	r3, #5
 800ea7c:	e119      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800ea7e:	2305      	movs	r3, #5
 800ea80:	623b      	str	r3, [r7, #32]
        break;
 800ea82:	e003      	b.n	800ea8c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800ea84:	2300      	movs	r3, #0
 800ea86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800ea8a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800ea8c:	7dfb      	ldrb	r3, [r7, #23]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d103      	bne.n	800ea9a <dhcp_parse_reply+0x362>
      offset++;
 800ea92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ea94:	3301      	adds	r3, #1
 800ea96:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ea98:	e0a1      	b.n	800ebde <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800ea9a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ea9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa0:	4413      	add	r3, r2
 800eaa2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	dd02      	ble.n	800eab0 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800eaaa:	f06f 0301 	mvn.w	r3, #1
 800eaae:	e100      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800eab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eab8:	4413      	add	r3, r2
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	3302      	adds	r3, #2
 800eabe:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800eac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	f000 808a 	beq.w	800ebde <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800eace:	6a3b      	ldr	r3, [r7, #32]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	db02      	blt.n	800eada <dhcp_parse_reply+0x3a2>
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	2b07      	cmp	r3, #7
 800ead8:	dd06      	ble.n	800eae8 <dhcp_parse_reply+0x3b0>
 800eada:	4b78      	ldr	r3, [pc, #480]	; (800ecbc <dhcp_parse_reply+0x584>)
 800eadc:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800eae0:	4979      	ldr	r1, [pc, #484]	; (800ecc8 <dhcp_parse_reply+0x590>)
 800eae2:	4878      	ldr	r0, [pc, #480]	; (800ecc4 <dhcp_parse_reply+0x58c>)
 800eae4:	f002 fedc 	bl	80118a0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800eae8:	4a78      	ldr	r2, [pc, #480]	; (800eccc <dhcp_parse_reply+0x594>)
 800eaea:	6a3b      	ldr	r3, [r7, #32]
 800eaec:	4413      	add	r3, r2
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d174      	bne.n	800ebde <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800eaf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eaf8:	2b04      	cmp	r3, #4
 800eafa:	bf28      	it	cs
 800eafc:	2304      	movcs	r3, #4
 800eafe:	b2db      	uxtb	r3, r3
 800eb00:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800eb02:	8bfb      	ldrh	r3, [r7, #30]
 800eb04:	8aba      	ldrh	r2, [r7, #20]
 800eb06:	f107 0108 	add.w	r1, r7, #8
 800eb0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb0c:	f7f7 fd50 	bl	80065b0 <pbuf_copy_partial>
 800eb10:	4603      	mov	r3, r0
 800eb12:	461a      	mov	r2, r3
 800eb14:	8abb      	ldrh	r3, [r7, #20]
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d002      	beq.n	800eb20 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800eb1a:	f06f 0301 	mvn.w	r3, #1
 800eb1e:	e0c8      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800eb20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb24:	2b04      	cmp	r3, #4
 800eb26:	d933      	bls.n	800eb90 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800eb28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb2c:	f003 0303 	and.w	r3, r3, #3
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d009      	beq.n	800eb4a <dhcp_parse_reply+0x412>
 800eb36:	4b61      	ldr	r3, [pc, #388]	; (800ecbc <dhcp_parse_reply+0x584>)
 800eb38:	f240 6281 	movw	r2, #1665	; 0x681
 800eb3c:	4964      	ldr	r1, [pc, #400]	; (800ecd0 <dhcp_parse_reply+0x598>)
 800eb3e:	4861      	ldr	r0, [pc, #388]	; (800ecc4 <dhcp_parse_reply+0x58c>)
 800eb40:	f002 feae 	bl	80118a0 <iprintf>
 800eb44:	f06f 0305 	mvn.w	r3, #5
 800eb48:	e0b3      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800eb4a:	4a60      	ldr	r2, [pc, #384]	; (800eccc <dhcp_parse_reply+0x594>)
 800eb4c:	6a3b      	ldr	r3, [r7, #32]
 800eb4e:	4413      	add	r3, r2
 800eb50:	2201      	movs	r2, #1
 800eb52:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	4618      	mov	r0, r3
 800eb58:	f7f5 ffdb 	bl	8004b12 <lwip_htonl>
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	495d      	ldr	r1, [pc, #372]	; (800ecd4 <dhcp_parse_reply+0x59c>)
 800eb60:	6a3b      	ldr	r3, [r7, #32]
 800eb62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800eb66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb6a:	3b04      	subs	r3, #4
 800eb6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800eb70:	8bfb      	ldrh	r3, [r7, #30]
 800eb72:	3304      	adds	r3, #4
 800eb74:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800eb76:	8a7a      	ldrh	r2, [r7, #18]
 800eb78:	8bfb      	ldrh	r3, [r7, #30]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d202      	bcs.n	800eb84 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800eb7e:	f06f 0301 	mvn.w	r3, #1
 800eb82:	e096      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800eb84:	8a7b      	ldrh	r3, [r7, #18]
 800eb86:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800eb88:	6a3b      	ldr	r3, [r7, #32]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800eb8e:	e79e      	b.n	800eace <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800eb90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb94:	2b04      	cmp	r3, #4
 800eb96:	d106      	bne.n	800eba6 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7f5 ffb9 	bl	8004b12 <lwip_htonl>
 800eba0:	4603      	mov	r3, r0
 800eba2:	60bb      	str	r3, [r7, #8]
 800eba4:	e011      	b.n	800ebca <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800eba6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	d009      	beq.n	800ebc2 <dhcp_parse_reply+0x48a>
 800ebae:	4b43      	ldr	r3, [pc, #268]	; (800ecbc <dhcp_parse_reply+0x584>)
 800ebb0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800ebb4:	4948      	ldr	r1, [pc, #288]	; (800ecd8 <dhcp_parse_reply+0x5a0>)
 800ebb6:	4843      	ldr	r0, [pc, #268]	; (800ecc4 <dhcp_parse_reply+0x58c>)
 800ebb8:	f002 fe72 	bl	80118a0 <iprintf>
 800ebbc:	f06f 0305 	mvn.w	r3, #5
 800ebc0:	e077      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800ebc2:	f107 0308 	add.w	r3, r7, #8
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800ebca:	4a40      	ldr	r2, [pc, #256]	; (800eccc <dhcp_parse_reply+0x594>)
 800ebcc:	6a3b      	ldr	r3, [r7, #32]
 800ebce:	4413      	add	r3, r2
 800ebd0:	2201      	movs	r2, #1
 800ebd2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800ebd4:	68ba      	ldr	r2, [r7, #8]
 800ebd6:	493f      	ldr	r1, [pc, #252]	; (800ecd4 <dhcp_parse_reply+0x59c>)
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	895b      	ldrh	r3, [r3, #10]
 800ebe2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d324      	bcc.n	800ec32 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	895b      	ldrh	r3, [r3, #10]
 800ebec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800ebf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebf4:	895b      	ldrh	r3, [r3, #10]
 800ebf6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800ebfc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ebfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d213      	bcs.n	800ec2c <dhcp_parse_reply+0x4f4>
        q = q->next;
 800ec04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d109      	bne.n	800ec24 <dhcp_parse_reply+0x4ec>
 800ec10:	4b2a      	ldr	r3, [pc, #168]	; (800ecbc <dhcp_parse_reply+0x584>)
 800ec12:	f240 629d 	movw	r2, #1693	; 0x69d
 800ec16:	4931      	ldr	r1, [pc, #196]	; (800ecdc <dhcp_parse_reply+0x5a4>)
 800ec18:	482a      	ldr	r0, [pc, #168]	; (800ecc4 <dhcp_parse_reply+0x58c>)
 800ec1a:	f002 fe41 	bl	80118a0 <iprintf>
 800ec1e:	f06f 0305 	mvn.w	r3, #5
 800ec22:	e046      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800ec24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec2a:	e002      	b.n	800ec32 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800ec2c:	f06f 0301 	mvn.w	r3, #1
 800ec30:	e03f      	b.n	800ecb2 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800ec32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d00a      	beq.n	800ec4e <dhcp_parse_reply+0x516>
 800ec38:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ec3a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ec3c:	429a      	cmp	r2, r3
 800ec3e:	d206      	bcs.n	800ec4e <dhcp_parse_reply+0x516>
 800ec40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ec42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec44:	4413      	add	r3, r2
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	2bff      	cmp	r3, #255	; 0xff
 800ec4a:	f47f adb8 	bne.w	800e7be <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800ec4e:	4b1f      	ldr	r3, [pc, #124]	; (800eccc <dhcp_parse_reply+0x594>)
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d018      	beq.n	800ec88 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ec56:	4b1f      	ldr	r3, [pc, #124]	; (800ecd4 <dhcp_parse_reply+0x59c>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800ec5c:	4b1b      	ldr	r3, [pc, #108]	; (800eccc <dhcp_parse_reply+0x594>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d102      	bne.n	800ec6e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec6c:	e00c      	b.n	800ec88 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d102      	bne.n	800ec7a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800ec74:	2301      	movs	r3, #1
 800ec76:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec78:	e006      	b.n	800ec88 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	2b03      	cmp	r3, #3
 800ec7e:	d103      	bne.n	800ec88 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800ec80:	2301      	movs	r3, #1
 800ec82:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800ec84:	2301      	movs	r3, #1
 800ec86:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800ec88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d006      	beq.n	800ec9c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800ec92:	236c      	movs	r3, #108	; 0x6c
 800ec94:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800ec96:	23ec      	movs	r3, #236	; 0xec
 800ec98:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800ec9a:	e56a      	b.n	800e772 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800ec9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d006      	beq.n	800ecb0 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800eca2:	2300      	movs	r3, #0
 800eca4:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800eca6:	232c      	movs	r3, #44	; 0x2c
 800eca8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800ecaa:	236c      	movs	r3, #108	; 0x6c
 800ecac:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800ecae:	e560      	b.n	800e772 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800ecb0:	2300      	movs	r3, #0
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3740      	adds	r7, #64	; 0x40
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	08014a4c 	.word	0x08014a4c
 800ecc0:	08014cd4 	.word	0x08014cd4
 800ecc4:	08014aac 	.word	0x08014aac
 800ecc8:	08014d18 	.word	0x08014d18
 800eccc:	2000880c 	.word	0x2000880c
 800ecd0:	08014d2c 	.word	0x08014d2c
 800ecd4:	200087ec 	.word	0x200087ec
 800ecd8:	08014d44 	.word	0x08014d44
 800ecdc:	08014d58 	.word	0x08014d58

0800ece0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b08a      	sub	sp, #40	; 0x28
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	607a      	str	r2, [r7, #4]
 800ecec:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800ecee:	4b60      	ldr	r3, [pc, #384]	; (800ee70 <dhcp_recv+0x190>)
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ecf4:	6a3b      	ldr	r3, [r7, #32]
 800ecf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecf8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800ed00:	69fb      	ldr	r3, [r7, #28]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	f000 809d 	beq.w	800ee42 <dhcp_recv+0x162>
 800ed08:	69fb      	ldr	r3, [r7, #28]
 800ed0a:	791b      	ldrb	r3, [r3, #4]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f000 8098 	beq.w	800ee42 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	895b      	ldrh	r3, [r3, #10]
 800ed16:	2b2b      	cmp	r3, #43	; 0x2b
 800ed18:	f240 8095 	bls.w	800ee46 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	2b02      	cmp	r3, #2
 800ed22:	f040 8092 	bne.w	800ee4a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ed26:	2300      	movs	r3, #0
 800ed28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed2c:	e012      	b.n	800ed54 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800ed2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed32:	6a3a      	ldr	r2, [r7, #32]
 800ed34:	4413      	add	r3, r2
 800ed36:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ed3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed3e:	69b9      	ldr	r1, [r7, #24]
 800ed40:	440b      	add	r3, r1
 800ed42:	7f1b      	ldrb	r3, [r3, #28]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	f040 8082 	bne.w	800ee4e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ed4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed4e:	3301      	adds	r3, #1
 800ed50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed54:	6a3b      	ldr	r3, [r7, #32]
 800ed56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d203      	bcs.n	800ed6a <dhcp_recv+0x8a>
 800ed62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed66:	2b05      	cmp	r3, #5
 800ed68:	d9e1      	bls.n	800ed2e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7f5 fecf 	bl	8004b12 <lwip_htonl>
 800ed74:	4602      	mov	r2, r0
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d169      	bne.n	800ee52 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800ed7e:	69f9      	ldr	r1, [r7, #28]
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f7ff fcd9 	bl	800e738 <dhcp_parse_reply>
 800ed86:	4603      	mov	r3, r0
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d164      	bne.n	800ee56 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800ed8c:	4b39      	ldr	r3, [pc, #228]	; (800ee74 <dhcp_recv+0x194>)
 800ed8e:	785b      	ldrb	r3, [r3, #1]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d062      	beq.n	800ee5a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800ed9a:	4b37      	ldr	r3, [pc, #220]	; (800ee78 <dhcp_recv+0x198>)
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800eda0:	7cfb      	ldrb	r3, [r7, #19]
 800eda2:	2b05      	cmp	r3, #5
 800eda4:	d12a      	bne.n	800edfc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	795b      	ldrb	r3, [r3, #5]
 800edaa:	2b01      	cmp	r3, #1
 800edac:	d112      	bne.n	800edd4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800edae:	6979      	ldr	r1, [r7, #20]
 800edb0:	6a38      	ldr	r0, [r7, #32]
 800edb2:	f7fe fe17 	bl	800d9e4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800edb6:	6a3b      	ldr	r3, [r7, #32]
 800edb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800edbc:	f003 0308 	and.w	r3, r3, #8
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d003      	beq.n	800edcc <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800edc4:	6a38      	ldr	r0, [r7, #32]
 800edc6:	f7fe fb87 	bl	800d4d8 <dhcp_check>
 800edca:	e049      	b.n	800ee60 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800edcc:	6a38      	ldr	r0, [r7, #32]
 800edce:	f7ff f867 	bl	800dea0 <dhcp_bind>
 800edd2:	e045      	b.n	800ee60 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	795b      	ldrb	r3, [r3, #5]
 800edd8:	2b03      	cmp	r3, #3
 800edda:	d007      	beq.n	800edec <dhcp_recv+0x10c>
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	795b      	ldrb	r3, [r3, #5]
 800ede0:	2b04      	cmp	r3, #4
 800ede2:	d003      	beq.n	800edec <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800ede8:	2b05      	cmp	r3, #5
 800edea:	d139      	bne.n	800ee60 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800edec:	6979      	ldr	r1, [r7, #20]
 800edee:	6a38      	ldr	r0, [r7, #32]
 800edf0:	f7fe fdf8 	bl	800d9e4 <dhcp_handle_ack>
      dhcp_bind(netif);
 800edf4:	6a38      	ldr	r0, [r7, #32]
 800edf6:	f7ff f853 	bl	800dea0 <dhcp_bind>
 800edfa:	e031      	b.n	800ee60 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800edfc:	7cfb      	ldrb	r3, [r7, #19]
 800edfe:	2b06      	cmp	r3, #6
 800ee00:	d113      	bne.n	800ee2a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800ee06:	2b03      	cmp	r3, #3
 800ee08:	d00b      	beq.n	800ee22 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ee0a:	69fb      	ldr	r3, [r7, #28]
 800ee0c:	795b      	ldrb	r3, [r3, #5]
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d007      	beq.n	800ee22 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ee12:	69fb      	ldr	r3, [r7, #28]
 800ee14:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ee16:	2b04      	cmp	r3, #4
 800ee18:	d003      	beq.n	800ee22 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	795b      	ldrb	r3, [r3, #5]
 800ee1e:	2b05      	cmp	r3, #5
 800ee20:	d103      	bne.n	800ee2a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800ee22:	6a38      	ldr	r0, [r7, #32]
 800ee24:	f7fe fb3e 	bl	800d4a4 <dhcp_handle_nak>
 800ee28:	e01a      	b.n	800ee60 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800ee2a:	7cfb      	ldrb	r3, [r7, #19]
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d116      	bne.n	800ee5e <dhcp_recv+0x17e>
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	795b      	ldrb	r3, [r3, #5]
 800ee34:	2b06      	cmp	r3, #6
 800ee36:	d112      	bne.n	800ee5e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800ee38:	6979      	ldr	r1, [r7, #20]
 800ee3a:	6a38      	ldr	r0, [r7, #32]
 800ee3c:	f7fe fb80 	bl	800d540 <dhcp_handle_offer>
 800ee40:	e00e      	b.n	800ee60 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ee42:	bf00      	nop
 800ee44:	e00c      	b.n	800ee60 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ee46:	bf00      	nop
 800ee48:	e00a      	b.n	800ee60 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ee4a:	bf00      	nop
 800ee4c:	e008      	b.n	800ee60 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800ee4e:	bf00      	nop
 800ee50:	e006      	b.n	800ee60 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ee52:	bf00      	nop
 800ee54:	e004      	b.n	800ee60 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ee56:	bf00      	nop
 800ee58:	e002      	b.n	800ee60 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800ee5a:	bf00      	nop
 800ee5c:	e000      	b.n	800ee60 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800ee5e:	bf00      	nop
  pbuf_free(p);
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f7f7 f9ab 	bl	80061bc <pbuf_free>
}
 800ee66:	bf00      	nop
 800ee68:	3728      	adds	r7, #40	; 0x28
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	200051fc 	.word	0x200051fc
 800ee74:	2000880c 	.word	0x2000880c
 800ee78:	200087ec 	.word	0x200087ec

0800ee7c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b088      	sub	sp, #32
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	603b      	str	r3, [r7, #0]
 800ee88:	4613      	mov	r3, r2
 800ee8a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d108      	bne.n	800eea4 <dhcp_create_msg+0x28>
 800ee92:	4b5f      	ldr	r3, [pc, #380]	; (800f010 <dhcp_create_msg+0x194>)
 800ee94:	f240 7269 	movw	r2, #1897	; 0x769
 800ee98:	495e      	ldr	r1, [pc, #376]	; (800f014 <dhcp_create_msg+0x198>)
 800ee9a:	485f      	ldr	r0, [pc, #380]	; (800f018 <dhcp_create_msg+0x19c>)
 800ee9c:	f002 fd00 	bl	80118a0 <iprintf>
 800eea0:	2300      	movs	r3, #0
 800eea2:	e0b1      	b.n	800f008 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800eea4:	68bb      	ldr	r3, [r7, #8]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d108      	bne.n	800eebc <dhcp_create_msg+0x40>
 800eeaa:	4b59      	ldr	r3, [pc, #356]	; (800f010 <dhcp_create_msg+0x194>)
 800eeac:	f240 726a 	movw	r2, #1898	; 0x76a
 800eeb0:	495a      	ldr	r1, [pc, #360]	; (800f01c <dhcp_create_msg+0x1a0>)
 800eeb2:	4859      	ldr	r0, [pc, #356]	; (800f018 <dhcp_create_msg+0x19c>)
 800eeb4:	f002 fcf4 	bl	80118a0 <iprintf>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	e0a5      	b.n	800f008 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800eebc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eec0:	f44f 719a 	mov.w	r1, #308	; 0x134
 800eec4:	2036      	movs	r0, #54	; 0x36
 800eec6:	f7f6 fe95 	bl	8005bf4 <pbuf_alloc>
 800eeca:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d101      	bne.n	800eed6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800eed2:	2300      	movs	r3, #0
 800eed4:	e098      	b.n	800f008 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	895b      	ldrh	r3, [r3, #10]
 800eeda:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800eede:	d206      	bcs.n	800eeee <dhcp_create_msg+0x72>
 800eee0:	4b4b      	ldr	r3, [pc, #300]	; (800f010 <dhcp_create_msg+0x194>)
 800eee2:	f240 7271 	movw	r2, #1905	; 0x771
 800eee6:	494e      	ldr	r1, [pc, #312]	; (800f020 <dhcp_create_msg+0x1a4>)
 800eee8:	484b      	ldr	r0, [pc, #300]	; (800f018 <dhcp_create_msg+0x19c>)
 800eeea:	f002 fcd9 	bl	80118a0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800eeee:	79fb      	ldrb	r3, [r7, #7]
 800eef0:	2b03      	cmp	r3, #3
 800eef2:	d103      	bne.n	800eefc <dhcp_create_msg+0x80>
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	795b      	ldrb	r3, [r3, #5]
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	d10d      	bne.n	800ef18 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	799b      	ldrb	r3, [r3, #6]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d105      	bne.n	800ef10 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800ef04:	f002 fbcc 	bl	80116a0 <rand>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	4b45      	ldr	r3, [pc, #276]	; (800f024 <dhcp_create_msg+0x1a8>)
 800ef0e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800ef10:	4b44      	ldr	r3, [pc, #272]	; (800f024 <dhcp_create_msg+0x1a8>)
 800ef12:	681a      	ldr	r2, [r3, #0]
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	685b      	ldr	r3, [r3, #4]
 800ef1c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800ef1e:	f44f 729a 	mov.w	r2, #308	; 0x134
 800ef22:	2100      	movs	r1, #0
 800ef24:	6978      	ldr	r0, [r7, #20]
 800ef26:	f002 fd20 	bl	801196a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800ef2a:	697b      	ldr	r3, [r7, #20]
 800ef2c:	2201      	movs	r2, #1
 800ef2e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	2201      	movs	r2, #1
 800ef34:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ef3c:	697b      	ldr	r3, [r7, #20]
 800ef3e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7f5 fde4 	bl	8004b12 <lwip_htonl>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800ef50:	79fb      	ldrb	r3, [r7, #7]
 800ef52:	2b08      	cmp	r3, #8
 800ef54:	d010      	beq.n	800ef78 <dhcp_create_msg+0xfc>
 800ef56:	79fb      	ldrb	r3, [r7, #7]
 800ef58:	2b04      	cmp	r3, #4
 800ef5a:	d00d      	beq.n	800ef78 <dhcp_create_msg+0xfc>
 800ef5c:	79fb      	ldrb	r3, [r7, #7]
 800ef5e:	2b07      	cmp	r3, #7
 800ef60:	d00a      	beq.n	800ef78 <dhcp_create_msg+0xfc>
 800ef62:	79fb      	ldrb	r3, [r7, #7]
 800ef64:	2b03      	cmp	r3, #3
 800ef66:	d10c      	bne.n	800ef82 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800ef6c:	2b05      	cmp	r3, #5
 800ef6e:	d003      	beq.n	800ef78 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	795b      	ldrb	r3, [r3, #5]
 800ef74:	2b04      	cmp	r3, #4
 800ef76:	d104      	bne.n	800ef82 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ef82:	2300      	movs	r3, #0
 800ef84:	83fb      	strh	r3, [r7, #30]
 800ef86:	e00c      	b.n	800efa2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800ef88:	8bfa      	ldrh	r2, [r7, #30]
 800ef8a:	8bfb      	ldrh	r3, [r7, #30]
 800ef8c:	68f9      	ldr	r1, [r7, #12]
 800ef8e:	440a      	add	r2, r1
 800ef90:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800ef94:	697a      	ldr	r2, [r7, #20]
 800ef96:	4413      	add	r3, r2
 800ef98:	460a      	mov	r2, r1
 800ef9a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ef9c:	8bfb      	ldrh	r3, [r7, #30]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	83fb      	strh	r3, [r7, #30]
 800efa2:	8bfb      	ldrh	r3, [r7, #30]
 800efa4:	2b05      	cmp	r3, #5
 800efa6:	d9ef      	bls.n	800ef88 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	2200      	movs	r2, #0
 800efac:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800efb0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800efb4:	2200      	movs	r2, #0
 800efb6:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800efba:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800efbe:	2200      	movs	r2, #0
 800efc0:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800efc4:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800efc8:	2200      	movs	r2, #0
 800efca:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800efce:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800efd8:	2301      	movs	r3, #1
 800efda:	2235      	movs	r2, #53	; 0x35
 800efdc:	2000      	movs	r0, #0
 800efde:	f7ff fadb 	bl	800e598 <dhcp_option>
 800efe2:	4603      	mov	r3, r0
 800efe4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800efec:	79fa      	ldrb	r2, [r7, #7]
 800efee:	8a7b      	ldrh	r3, [r7, #18]
 800eff0:	4618      	mov	r0, r3
 800eff2:	f7ff fb05 	bl	800e600 <dhcp_option_byte>
 800eff6:	4603      	mov	r3, r0
 800eff8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d002      	beq.n	800f006 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	8a7a      	ldrh	r2, [r7, #18]
 800f004:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800f006:	69bb      	ldr	r3, [r7, #24]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3720      	adds	r7, #32
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}
 800f010:	08014a4c 	.word	0x08014a4c
 800f014:	08014d6c 	.word	0x08014d6c
 800f018:	08014aac 	.word	0x08014aac
 800f01c:	08014d8c 	.word	0x08014d8c
 800f020:	08014dac 	.word	0x08014dac
 800f024:	2000881c 	.word	0x2000881c

0800f028 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	4603      	mov	r3, r0
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
 800f034:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800f036:	89fb      	ldrh	r3, [r7, #14]
 800f038:	1c5a      	adds	r2, r3, #1
 800f03a:	81fa      	strh	r2, [r7, #14]
 800f03c:	461a      	mov	r2, r3
 800f03e:	68bb      	ldr	r3, [r7, #8]
 800f040:	4413      	add	r3, r2
 800f042:	22ff      	movs	r2, #255	; 0xff
 800f044:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800f046:	e007      	b.n	800f058 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800f048:	89fb      	ldrh	r3, [r7, #14]
 800f04a:	1c5a      	adds	r2, r3, #1
 800f04c:	81fa      	strh	r2, [r7, #14]
 800f04e:	461a      	mov	r2, r3
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	4413      	add	r3, r2
 800f054:	2200      	movs	r2, #0
 800f056:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800f058:	89fb      	ldrh	r3, [r7, #14]
 800f05a:	2b43      	cmp	r3, #67	; 0x43
 800f05c:	d904      	bls.n	800f068 <dhcp_option_trailer+0x40>
 800f05e:	89fb      	ldrh	r3, [r7, #14]
 800f060:	f003 0303 	and.w	r3, r3, #3
 800f064:	2b00      	cmp	r3, #0
 800f066:	d002      	beq.n	800f06e <dhcp_option_trailer+0x46>
 800f068:	89fb      	ldrh	r3, [r7, #14]
 800f06a:	2b43      	cmp	r3, #67	; 0x43
 800f06c:	d9ec      	bls.n	800f048 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800f06e:	89fb      	ldrh	r3, [r7, #14]
 800f070:	33f0      	adds	r3, #240	; 0xf0
 800f072:	b29b      	uxth	r3, r3
 800f074:	4619      	mov	r1, r3
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f7f6 ff1a 	bl	8005eb0 <pbuf_realloc>
}
 800f07c:	bf00      	nop
 800f07e:	3710      	adds	r7, #16
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800f084:	b480      	push	{r7}
 800f086:	b085      	sub	sp, #20
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d017      	beq.n	800f0c2 <dhcp_supplied_address+0x3e>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f096:	2b00      	cmp	r3, #0
 800f098:	d013      	beq.n	800f0c2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f09e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	795b      	ldrb	r3, [r3, #5]
 800f0a4:	2b0a      	cmp	r3, #10
 800f0a6:	d007      	beq.n	800f0b8 <dhcp_supplied_address+0x34>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	795b      	ldrb	r3, [r3, #5]
 800f0ac:	2b05      	cmp	r3, #5
 800f0ae:	d003      	beq.n	800f0b8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800f0b4:	2b04      	cmp	r3, #4
 800f0b6:	d101      	bne.n	800f0bc <dhcp_supplied_address+0x38>
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	e000      	b.n	800f0be <dhcp_supplied_address+0x3a>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	e000      	b.n	800f0c4 <dhcp_supplied_address+0x40>
  }
  return 0;
 800f0c2:	2300      	movs	r3, #0
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3714      	adds	r7, #20
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800f0d8:	4915      	ldr	r1, [pc, #84]	; (800f130 <etharp_free_entry+0x60>)
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	4613      	mov	r3, r2
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	4413      	add	r3, r2
 800f0e2:	00db      	lsls	r3, r3, #3
 800f0e4:	440b      	add	r3, r1
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d013      	beq.n	800f114 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800f0ec:	4910      	ldr	r1, [pc, #64]	; (800f130 <etharp_free_entry+0x60>)
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	005b      	lsls	r3, r3, #1
 800f0f4:	4413      	add	r3, r2
 800f0f6:	00db      	lsls	r3, r3, #3
 800f0f8:	440b      	add	r3, r1
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7f7 f85d 	bl	80061bc <pbuf_free>
    arp_table[i].q = NULL;
 800f102:	490b      	ldr	r1, [pc, #44]	; (800f130 <etharp_free_entry+0x60>)
 800f104:	687a      	ldr	r2, [r7, #4]
 800f106:	4613      	mov	r3, r2
 800f108:	005b      	lsls	r3, r3, #1
 800f10a:	4413      	add	r3, r2
 800f10c:	00db      	lsls	r3, r3, #3
 800f10e:	440b      	add	r3, r1
 800f110:	2200      	movs	r2, #0
 800f112:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800f114:	4906      	ldr	r1, [pc, #24]	; (800f130 <etharp_free_entry+0x60>)
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	4613      	mov	r3, r2
 800f11a:	005b      	lsls	r3, r3, #1
 800f11c:	4413      	add	r3, r2
 800f11e:	00db      	lsls	r3, r3, #3
 800f120:	440b      	add	r3, r1
 800f122:	3314      	adds	r3, #20
 800f124:	2200      	movs	r2, #0
 800f126:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800f128:	bf00      	nop
 800f12a:	3708      	adds	r7, #8
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	20008820 	.word	0x20008820

0800f134 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f13a:	2300      	movs	r3, #0
 800f13c:	607b      	str	r3, [r7, #4]
 800f13e:	e096      	b.n	800f26e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800f140:	494f      	ldr	r1, [pc, #316]	; (800f280 <etharp_tmr+0x14c>)
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	4613      	mov	r3, r2
 800f146:	005b      	lsls	r3, r3, #1
 800f148:	4413      	add	r3, r2
 800f14a:	00db      	lsls	r3, r3, #3
 800f14c:	440b      	add	r3, r1
 800f14e:	3314      	adds	r3, #20
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800f154:	78fb      	ldrb	r3, [r7, #3]
 800f156:	2b00      	cmp	r3, #0
 800f158:	f000 8086 	beq.w	800f268 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800f15c:	4948      	ldr	r1, [pc, #288]	; (800f280 <etharp_tmr+0x14c>)
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	4613      	mov	r3, r2
 800f162:	005b      	lsls	r3, r3, #1
 800f164:	4413      	add	r3, r2
 800f166:	00db      	lsls	r3, r3, #3
 800f168:	440b      	add	r3, r1
 800f16a:	3312      	adds	r3, #18
 800f16c:	881b      	ldrh	r3, [r3, #0]
 800f16e:	3301      	adds	r3, #1
 800f170:	b298      	uxth	r0, r3
 800f172:	4943      	ldr	r1, [pc, #268]	; (800f280 <etharp_tmr+0x14c>)
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	4613      	mov	r3, r2
 800f178:	005b      	lsls	r3, r3, #1
 800f17a:	4413      	add	r3, r2
 800f17c:	00db      	lsls	r3, r3, #3
 800f17e:	440b      	add	r3, r1
 800f180:	3312      	adds	r3, #18
 800f182:	4602      	mov	r2, r0
 800f184:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f186:	493e      	ldr	r1, [pc, #248]	; (800f280 <etharp_tmr+0x14c>)
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	4613      	mov	r3, r2
 800f18c:	005b      	lsls	r3, r3, #1
 800f18e:	4413      	add	r3, r2
 800f190:	00db      	lsls	r3, r3, #3
 800f192:	440b      	add	r3, r1
 800f194:	3312      	adds	r3, #18
 800f196:	881b      	ldrh	r3, [r3, #0]
 800f198:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f19c:	d215      	bcs.n	800f1ca <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f19e:	4938      	ldr	r1, [pc, #224]	; (800f280 <etharp_tmr+0x14c>)
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	4413      	add	r3, r2
 800f1a8:	00db      	lsls	r3, r3, #3
 800f1aa:	440b      	add	r3, r1
 800f1ac:	3314      	adds	r3, #20
 800f1ae:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d10e      	bne.n	800f1d2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800f1b4:	4932      	ldr	r1, [pc, #200]	; (800f280 <etharp_tmr+0x14c>)
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	4613      	mov	r3, r2
 800f1ba:	005b      	lsls	r3, r3, #1
 800f1bc:	4413      	add	r3, r2
 800f1be:	00db      	lsls	r3, r3, #3
 800f1c0:	440b      	add	r3, r1
 800f1c2:	3312      	adds	r3, #18
 800f1c4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800f1c6:	2b04      	cmp	r3, #4
 800f1c8:	d903      	bls.n	800f1d2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7ff ff80 	bl	800f0d0 <etharp_free_entry>
 800f1d0:	e04a      	b.n	800f268 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800f1d2:	492b      	ldr	r1, [pc, #172]	; (800f280 <etharp_tmr+0x14c>)
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	005b      	lsls	r3, r3, #1
 800f1da:	4413      	add	r3, r2
 800f1dc:	00db      	lsls	r3, r3, #3
 800f1de:	440b      	add	r3, r1
 800f1e0:	3314      	adds	r3, #20
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	2b03      	cmp	r3, #3
 800f1e6:	d10a      	bne.n	800f1fe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800f1e8:	4925      	ldr	r1, [pc, #148]	; (800f280 <etharp_tmr+0x14c>)
 800f1ea:	687a      	ldr	r2, [r7, #4]
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	005b      	lsls	r3, r3, #1
 800f1f0:	4413      	add	r3, r2
 800f1f2:	00db      	lsls	r3, r3, #3
 800f1f4:	440b      	add	r3, r1
 800f1f6:	3314      	adds	r3, #20
 800f1f8:	2204      	movs	r2, #4
 800f1fa:	701a      	strb	r2, [r3, #0]
 800f1fc:	e034      	b.n	800f268 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800f1fe:	4920      	ldr	r1, [pc, #128]	; (800f280 <etharp_tmr+0x14c>)
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	4613      	mov	r3, r2
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	4413      	add	r3, r2
 800f208:	00db      	lsls	r3, r3, #3
 800f20a:	440b      	add	r3, r1
 800f20c:	3314      	adds	r3, #20
 800f20e:	781b      	ldrb	r3, [r3, #0]
 800f210:	2b04      	cmp	r3, #4
 800f212:	d10a      	bne.n	800f22a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800f214:	491a      	ldr	r1, [pc, #104]	; (800f280 <etharp_tmr+0x14c>)
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	4613      	mov	r3, r2
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	4413      	add	r3, r2
 800f21e:	00db      	lsls	r3, r3, #3
 800f220:	440b      	add	r3, r1
 800f222:	3314      	adds	r3, #20
 800f224:	2202      	movs	r2, #2
 800f226:	701a      	strb	r2, [r3, #0]
 800f228:	e01e      	b.n	800f268 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f22a:	4915      	ldr	r1, [pc, #84]	; (800f280 <etharp_tmr+0x14c>)
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	4613      	mov	r3, r2
 800f230:	005b      	lsls	r3, r3, #1
 800f232:	4413      	add	r3, r2
 800f234:	00db      	lsls	r3, r3, #3
 800f236:	440b      	add	r3, r1
 800f238:	3314      	adds	r3, #20
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d113      	bne.n	800f268 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800f240:	490f      	ldr	r1, [pc, #60]	; (800f280 <etharp_tmr+0x14c>)
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	4613      	mov	r3, r2
 800f246:	005b      	lsls	r3, r3, #1
 800f248:	4413      	add	r3, r2
 800f24a:	00db      	lsls	r3, r3, #3
 800f24c:	440b      	add	r3, r1
 800f24e:	3308      	adds	r3, #8
 800f250:	6818      	ldr	r0, [r3, #0]
 800f252:	687a      	ldr	r2, [r7, #4]
 800f254:	4613      	mov	r3, r2
 800f256:	005b      	lsls	r3, r3, #1
 800f258:	4413      	add	r3, r2
 800f25a:	00db      	lsls	r3, r3, #3
 800f25c:	4a08      	ldr	r2, [pc, #32]	; (800f280 <etharp_tmr+0x14c>)
 800f25e:	4413      	add	r3, r2
 800f260:	3304      	adds	r3, #4
 800f262:	4619      	mov	r1, r3
 800f264:	f000 fe72 	bl	800ff4c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	3301      	adds	r3, #1
 800f26c:	607b      	str	r3, [r7, #4]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b09      	cmp	r3, #9
 800f272:	f77f af65 	ble.w	800f140 <etharp_tmr+0xc>
      }
    }
  }
}
 800f276:	bf00      	nop
 800f278:	bf00      	nop
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	20008820 	.word	0x20008820

0800f284 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08a      	sub	sp, #40	; 0x28
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	460b      	mov	r3, r1
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800f292:	230a      	movs	r3, #10
 800f294:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f296:	230a      	movs	r3, #10
 800f298:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800f29a:	230a      	movs	r3, #10
 800f29c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800f2a2:	230a      	movs	r3, #10
 800f2a4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	83bb      	strh	r3, [r7, #28]
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	837b      	strh	r3, [r7, #26]
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	843b      	strh	r3, [r7, #32]
 800f2b6:	e0ae      	b.n	800f416 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800f2b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f2bc:	49a6      	ldr	r1, [pc, #664]	; (800f558 <etharp_find_entry+0x2d4>)
 800f2be:	4613      	mov	r3, r2
 800f2c0:	005b      	lsls	r3, r3, #1
 800f2c2:	4413      	add	r3, r2
 800f2c4:	00db      	lsls	r3, r3, #3
 800f2c6:	440b      	add	r3, r1
 800f2c8:	3314      	adds	r3, #20
 800f2ca:	781b      	ldrb	r3, [r3, #0]
 800f2cc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800f2ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f2d2:	2b0a      	cmp	r3, #10
 800f2d4:	d105      	bne.n	800f2e2 <etharp_find_entry+0x5e>
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d102      	bne.n	800f2e2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800f2dc:	8c3b      	ldrh	r3, [r7, #32]
 800f2de:	847b      	strh	r3, [r7, #34]	; 0x22
 800f2e0:	e095      	b.n	800f40e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800f2e2:	7dfb      	ldrb	r3, [r7, #23]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f000 8092 	beq.w	800f40e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800f2ea:	7dfb      	ldrb	r3, [r7, #23]
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d009      	beq.n	800f304 <etharp_find_entry+0x80>
 800f2f0:	7dfb      	ldrb	r3, [r7, #23]
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d806      	bhi.n	800f304 <etharp_find_entry+0x80>
 800f2f6:	4b99      	ldr	r3, [pc, #612]	; (800f55c <etharp_find_entry+0x2d8>)
 800f2f8:	f240 1223 	movw	r2, #291	; 0x123
 800f2fc:	4998      	ldr	r1, [pc, #608]	; (800f560 <etharp_find_entry+0x2dc>)
 800f2fe:	4899      	ldr	r0, [pc, #612]	; (800f564 <etharp_find_entry+0x2e0>)
 800f300:	f002 face 	bl	80118a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d020      	beq.n	800f34c <etharp_find_entry+0xc8>
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	6819      	ldr	r1, [r3, #0]
 800f30e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f312:	4891      	ldr	r0, [pc, #580]	; (800f558 <etharp_find_entry+0x2d4>)
 800f314:	4613      	mov	r3, r2
 800f316:	005b      	lsls	r3, r3, #1
 800f318:	4413      	add	r3, r2
 800f31a:	00db      	lsls	r3, r3, #3
 800f31c:	4403      	add	r3, r0
 800f31e:	3304      	adds	r3, #4
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	4299      	cmp	r1, r3
 800f324:	d112      	bne.n	800f34c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00c      	beq.n	800f346 <etharp_find_entry+0xc2>
 800f32c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f330:	4989      	ldr	r1, [pc, #548]	; (800f558 <etharp_find_entry+0x2d4>)
 800f332:	4613      	mov	r3, r2
 800f334:	005b      	lsls	r3, r3, #1
 800f336:	4413      	add	r3, r2
 800f338:	00db      	lsls	r3, r3, #3
 800f33a:	440b      	add	r3, r1
 800f33c:	3308      	adds	r3, #8
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	429a      	cmp	r2, r3
 800f344:	d102      	bne.n	800f34c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800f346:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f34a:	e100      	b.n	800f54e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800f34c:	7dfb      	ldrb	r3, [r7, #23]
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d140      	bne.n	800f3d4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800f352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f356:	4980      	ldr	r1, [pc, #512]	; (800f558 <etharp_find_entry+0x2d4>)
 800f358:	4613      	mov	r3, r2
 800f35a:	005b      	lsls	r3, r3, #1
 800f35c:	4413      	add	r3, r2
 800f35e:	00db      	lsls	r3, r3, #3
 800f360:	440b      	add	r3, r1
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d01a      	beq.n	800f39e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800f368:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f36c:	497a      	ldr	r1, [pc, #488]	; (800f558 <etharp_find_entry+0x2d4>)
 800f36e:	4613      	mov	r3, r2
 800f370:	005b      	lsls	r3, r3, #1
 800f372:	4413      	add	r3, r2
 800f374:	00db      	lsls	r3, r3, #3
 800f376:	440b      	add	r3, r1
 800f378:	3312      	adds	r3, #18
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	8bba      	ldrh	r2, [r7, #28]
 800f37e:	429a      	cmp	r2, r3
 800f380:	d845      	bhi.n	800f40e <etharp_find_entry+0x18a>
            old_queue = i;
 800f382:	8c3b      	ldrh	r3, [r7, #32]
 800f384:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800f386:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f38a:	4973      	ldr	r1, [pc, #460]	; (800f558 <etharp_find_entry+0x2d4>)
 800f38c:	4613      	mov	r3, r2
 800f38e:	005b      	lsls	r3, r3, #1
 800f390:	4413      	add	r3, r2
 800f392:	00db      	lsls	r3, r3, #3
 800f394:	440b      	add	r3, r1
 800f396:	3312      	adds	r3, #18
 800f398:	881b      	ldrh	r3, [r3, #0]
 800f39a:	83bb      	strh	r3, [r7, #28]
 800f39c:	e037      	b.n	800f40e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800f39e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3a2:	496d      	ldr	r1, [pc, #436]	; (800f558 <etharp_find_entry+0x2d4>)
 800f3a4:	4613      	mov	r3, r2
 800f3a6:	005b      	lsls	r3, r3, #1
 800f3a8:	4413      	add	r3, r2
 800f3aa:	00db      	lsls	r3, r3, #3
 800f3ac:	440b      	add	r3, r1
 800f3ae:	3312      	adds	r3, #18
 800f3b0:	881b      	ldrh	r3, [r3, #0]
 800f3b2:	8b7a      	ldrh	r2, [r7, #26]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d82a      	bhi.n	800f40e <etharp_find_entry+0x18a>
            old_pending = i;
 800f3b8:	8c3b      	ldrh	r3, [r7, #32]
 800f3ba:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800f3bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3c0:	4965      	ldr	r1, [pc, #404]	; (800f558 <etharp_find_entry+0x2d4>)
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	005b      	lsls	r3, r3, #1
 800f3c6:	4413      	add	r3, r2
 800f3c8:	00db      	lsls	r3, r3, #3
 800f3ca:	440b      	add	r3, r1
 800f3cc:	3312      	adds	r3, #18
 800f3ce:	881b      	ldrh	r3, [r3, #0]
 800f3d0:	837b      	strh	r3, [r7, #26]
 800f3d2:	e01c      	b.n	800f40e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800f3d4:	7dfb      	ldrb	r3, [r7, #23]
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d919      	bls.n	800f40e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800f3da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3de:	495e      	ldr	r1, [pc, #376]	; (800f558 <etharp_find_entry+0x2d4>)
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	005b      	lsls	r3, r3, #1
 800f3e4:	4413      	add	r3, r2
 800f3e6:	00db      	lsls	r3, r3, #3
 800f3e8:	440b      	add	r3, r1
 800f3ea:	3312      	adds	r3, #18
 800f3ec:	881b      	ldrh	r3, [r3, #0]
 800f3ee:	8b3a      	ldrh	r2, [r7, #24]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d80c      	bhi.n	800f40e <etharp_find_entry+0x18a>
            old_stable = i;
 800f3f4:	8c3b      	ldrh	r3, [r7, #32]
 800f3f6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800f3f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f3fc:	4956      	ldr	r1, [pc, #344]	; (800f558 <etharp_find_entry+0x2d4>)
 800f3fe:	4613      	mov	r3, r2
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	4413      	add	r3, r2
 800f404:	00db      	lsls	r3, r3, #3
 800f406:	440b      	add	r3, r1
 800f408:	3312      	adds	r3, #18
 800f40a:	881b      	ldrh	r3, [r3, #0]
 800f40c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f40e:	8c3b      	ldrh	r3, [r7, #32]
 800f410:	3301      	adds	r3, #1
 800f412:	b29b      	uxth	r3, r3
 800f414:	843b      	strh	r3, [r7, #32]
 800f416:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f41a:	2b09      	cmp	r3, #9
 800f41c:	f77f af4c 	ble.w	800f2b8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800f420:	7afb      	ldrb	r3, [r7, #11]
 800f422:	f003 0302 	and.w	r3, r3, #2
 800f426:	2b00      	cmp	r3, #0
 800f428:	d108      	bne.n	800f43c <etharp_find_entry+0x1b8>
 800f42a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f42e:	2b0a      	cmp	r3, #10
 800f430:	d107      	bne.n	800f442 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800f432:	7afb      	ldrb	r3, [r7, #11]
 800f434:	f003 0301 	and.w	r3, r3, #1
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d102      	bne.n	800f442 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800f43c:	f04f 33ff 	mov.w	r3, #4294967295
 800f440:	e085      	b.n	800f54e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800f442:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800f446:	2b09      	cmp	r3, #9
 800f448:	dc02      	bgt.n	800f450 <etharp_find_entry+0x1cc>
    i = empty;
 800f44a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f44c:	843b      	strh	r3, [r7, #32]
 800f44e:	e039      	b.n	800f4c4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800f450:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800f454:	2b09      	cmp	r3, #9
 800f456:	dc14      	bgt.n	800f482 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800f458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f45a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800f45c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f460:	493d      	ldr	r1, [pc, #244]	; (800f558 <etharp_find_entry+0x2d4>)
 800f462:	4613      	mov	r3, r2
 800f464:	005b      	lsls	r3, r3, #1
 800f466:	4413      	add	r3, r2
 800f468:	00db      	lsls	r3, r3, #3
 800f46a:	440b      	add	r3, r1
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d018      	beq.n	800f4a4 <etharp_find_entry+0x220>
 800f472:	4b3a      	ldr	r3, [pc, #232]	; (800f55c <etharp_find_entry+0x2d8>)
 800f474:	f240 126d 	movw	r2, #365	; 0x16d
 800f478:	493b      	ldr	r1, [pc, #236]	; (800f568 <etharp_find_entry+0x2e4>)
 800f47a:	483a      	ldr	r0, [pc, #232]	; (800f564 <etharp_find_entry+0x2e0>)
 800f47c:	f002 fa10 	bl	80118a0 <iprintf>
 800f480:	e010      	b.n	800f4a4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800f482:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800f486:	2b09      	cmp	r3, #9
 800f488:	dc02      	bgt.n	800f490 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800f48a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f48c:	843b      	strh	r3, [r7, #32]
 800f48e:	e009      	b.n	800f4a4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800f490:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800f494:	2b09      	cmp	r3, #9
 800f496:	dc02      	bgt.n	800f49e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800f498:	8bfb      	ldrh	r3, [r7, #30]
 800f49a:	843b      	strh	r3, [r7, #32]
 800f49c:	e002      	b.n	800f4a4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800f49e:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a2:	e054      	b.n	800f54e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f4a4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f4a8:	2b09      	cmp	r3, #9
 800f4aa:	dd06      	ble.n	800f4ba <etharp_find_entry+0x236>
 800f4ac:	4b2b      	ldr	r3, [pc, #172]	; (800f55c <etharp_find_entry+0x2d8>)
 800f4ae:	f240 127f 	movw	r2, #383	; 0x17f
 800f4b2:	492e      	ldr	r1, [pc, #184]	; (800f56c <etharp_find_entry+0x2e8>)
 800f4b4:	482b      	ldr	r0, [pc, #172]	; (800f564 <etharp_find_entry+0x2e0>)
 800f4b6:	f002 f9f3 	bl	80118a0 <iprintf>
    etharp_free_entry(i);
 800f4ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7ff fe06 	bl	800f0d0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800f4c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800f4c8:	2b09      	cmp	r3, #9
 800f4ca:	dd06      	ble.n	800f4da <etharp_find_entry+0x256>
 800f4cc:	4b23      	ldr	r3, [pc, #140]	; (800f55c <etharp_find_entry+0x2d8>)
 800f4ce:	f240 1283 	movw	r2, #387	; 0x183
 800f4d2:	4926      	ldr	r1, [pc, #152]	; (800f56c <etharp_find_entry+0x2e8>)
 800f4d4:	4823      	ldr	r0, [pc, #140]	; (800f564 <etharp_find_entry+0x2e0>)
 800f4d6:	f002 f9e3 	bl	80118a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800f4da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f4de:	491e      	ldr	r1, [pc, #120]	; (800f558 <etharp_find_entry+0x2d4>)
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	4413      	add	r3, r2
 800f4e6:	00db      	lsls	r3, r3, #3
 800f4e8:	440b      	add	r3, r1
 800f4ea:	3314      	adds	r3, #20
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d006      	beq.n	800f500 <etharp_find_entry+0x27c>
 800f4f2:	4b1a      	ldr	r3, [pc, #104]	; (800f55c <etharp_find_entry+0x2d8>)
 800f4f4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800f4f8:	491d      	ldr	r1, [pc, #116]	; (800f570 <etharp_find_entry+0x2ec>)
 800f4fa:	481a      	ldr	r0, [pc, #104]	; (800f564 <etharp_find_entry+0x2e0>)
 800f4fc:	f002 f9d0 	bl	80118a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d00b      	beq.n	800f51e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800f506:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6819      	ldr	r1, [r3, #0]
 800f50e:	4812      	ldr	r0, [pc, #72]	; (800f558 <etharp_find_entry+0x2d4>)
 800f510:	4613      	mov	r3, r2
 800f512:	005b      	lsls	r3, r3, #1
 800f514:	4413      	add	r3, r2
 800f516:	00db      	lsls	r3, r3, #3
 800f518:	4403      	add	r3, r0
 800f51a:	3304      	adds	r3, #4
 800f51c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800f51e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f522:	490d      	ldr	r1, [pc, #52]	; (800f558 <etharp_find_entry+0x2d4>)
 800f524:	4613      	mov	r3, r2
 800f526:	005b      	lsls	r3, r3, #1
 800f528:	4413      	add	r3, r2
 800f52a:	00db      	lsls	r3, r3, #3
 800f52c:	440b      	add	r3, r1
 800f52e:	3312      	adds	r3, #18
 800f530:	2200      	movs	r2, #0
 800f532:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800f534:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800f538:	4907      	ldr	r1, [pc, #28]	; (800f558 <etharp_find_entry+0x2d4>)
 800f53a:	4613      	mov	r3, r2
 800f53c:	005b      	lsls	r3, r3, #1
 800f53e:	4413      	add	r3, r2
 800f540:	00db      	lsls	r3, r3, #3
 800f542:	440b      	add	r3, r1
 800f544:	3308      	adds	r3, #8
 800f546:	687a      	ldr	r2, [r7, #4]
 800f548:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800f54a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800f54e:	4618      	mov	r0, r3
 800f550:	3728      	adds	r7, #40	; 0x28
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	20008820 	.word	0x20008820
 800f55c:	08014dec 	.word	0x08014dec
 800f560:	08014e24 	.word	0x08014e24
 800f564:	08014e64 	.word	0x08014e64
 800f568:	08014e8c 	.word	0x08014e8c
 800f56c:	08014ea4 	.word	0x08014ea4
 800f570:	08014eb8 	.word	0x08014eb8

0800f574 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b088      	sub	sp, #32
 800f578:	af02      	add	r7, sp, #8
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]
 800f580:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f588:	2b06      	cmp	r3, #6
 800f58a:	d006      	beq.n	800f59a <etharp_update_arp_entry+0x26>
 800f58c:	4b48      	ldr	r3, [pc, #288]	; (800f6b0 <etharp_update_arp_entry+0x13c>)
 800f58e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800f592:	4948      	ldr	r1, [pc, #288]	; (800f6b4 <etharp_update_arp_entry+0x140>)
 800f594:	4848      	ldr	r0, [pc, #288]	; (800f6b8 <etharp_update_arp_entry+0x144>)
 800f596:	f002 f983 	bl	80118a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800f59a:	68bb      	ldr	r3, [r7, #8]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d012      	beq.n	800f5c6 <etharp_update_arp_entry+0x52>
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d00e      	beq.n	800f5c6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	68f9      	ldr	r1, [r7, #12]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f001 f920 	bl	80107f4 <ip4_addr_isbroadcast_u32>
 800f5b4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d105      	bne.n	800f5c6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800f5c2:	2be0      	cmp	r3, #224	; 0xe0
 800f5c4:	d102      	bne.n	800f5cc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f5c6:	f06f 030f 	mvn.w	r3, #15
 800f5ca:	e06c      	b.n	800f6a6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800f5cc:	78fb      	ldrb	r3, [r7, #3]
 800f5ce:	68fa      	ldr	r2, [r7, #12]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	68b8      	ldr	r0, [r7, #8]
 800f5d4:	f7ff fe56 	bl	800f284 <etharp_find_entry>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800f5dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	da02      	bge.n	800f5ea <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800f5e4:	8afb      	ldrh	r3, [r7, #22]
 800f5e6:	b25b      	sxtb	r3, r3
 800f5e8:	e05d      	b.n	800f6a6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800f5ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f5ee:	4933      	ldr	r1, [pc, #204]	; (800f6bc <etharp_update_arp_entry+0x148>)
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	005b      	lsls	r3, r3, #1
 800f5f4:	4413      	add	r3, r2
 800f5f6:	00db      	lsls	r3, r3, #3
 800f5f8:	440b      	add	r3, r1
 800f5fa:	3314      	adds	r3, #20
 800f5fc:	2202      	movs	r2, #2
 800f5fe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800f600:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f604:	492d      	ldr	r1, [pc, #180]	; (800f6bc <etharp_update_arp_entry+0x148>)
 800f606:	4613      	mov	r3, r2
 800f608:	005b      	lsls	r3, r3, #1
 800f60a:	4413      	add	r3, r2
 800f60c:	00db      	lsls	r3, r3, #3
 800f60e:	440b      	add	r3, r1
 800f610:	3308      	adds	r3, #8
 800f612:	68fa      	ldr	r2, [r7, #12]
 800f614:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800f616:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f61a:	4613      	mov	r3, r2
 800f61c:	005b      	lsls	r3, r3, #1
 800f61e:	4413      	add	r3, r2
 800f620:	00db      	lsls	r3, r3, #3
 800f622:	3308      	adds	r3, #8
 800f624:	4a25      	ldr	r2, [pc, #148]	; (800f6bc <etharp_update_arp_entry+0x148>)
 800f626:	4413      	add	r3, r2
 800f628:	3304      	adds	r3, #4
 800f62a:	2206      	movs	r2, #6
 800f62c:	6879      	ldr	r1, [r7, #4]
 800f62e:	4618      	mov	r0, r3
 800f630:	f002 fa11 	bl	8011a56 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800f634:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f638:	4920      	ldr	r1, [pc, #128]	; (800f6bc <etharp_update_arp_entry+0x148>)
 800f63a:	4613      	mov	r3, r2
 800f63c:	005b      	lsls	r3, r3, #1
 800f63e:	4413      	add	r3, r2
 800f640:	00db      	lsls	r3, r3, #3
 800f642:	440b      	add	r3, r1
 800f644:	3312      	adds	r3, #18
 800f646:	2200      	movs	r2, #0
 800f648:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800f64a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f64e:	491b      	ldr	r1, [pc, #108]	; (800f6bc <etharp_update_arp_entry+0x148>)
 800f650:	4613      	mov	r3, r2
 800f652:	005b      	lsls	r3, r3, #1
 800f654:	4413      	add	r3, r2
 800f656:	00db      	lsls	r3, r3, #3
 800f658:	440b      	add	r3, r1
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d021      	beq.n	800f6a4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800f660:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f664:	4915      	ldr	r1, [pc, #84]	; (800f6bc <etharp_update_arp_entry+0x148>)
 800f666:	4613      	mov	r3, r2
 800f668:	005b      	lsls	r3, r3, #1
 800f66a:	4413      	add	r3, r2
 800f66c:	00db      	lsls	r3, r3, #3
 800f66e:	440b      	add	r3, r1
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800f674:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800f678:	4910      	ldr	r1, [pc, #64]	; (800f6bc <etharp_update_arp_entry+0x148>)
 800f67a:	4613      	mov	r3, r2
 800f67c:	005b      	lsls	r3, r3, #1
 800f67e:	4413      	add	r3, r2
 800f680:	00db      	lsls	r3, r3, #3
 800f682:	440b      	add	r3, r1
 800f684:	2200      	movs	r2, #0
 800f686:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800f68e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f692:	9300      	str	r3, [sp, #0]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6939      	ldr	r1, [r7, #16]
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f001 ffb9 	bl	8011610 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800f69e:	6938      	ldr	r0, [r7, #16]
 800f6a0:	f7f6 fd8c 	bl	80061bc <pbuf_free>
  }
  return ERR_OK;
 800f6a4:	2300      	movs	r3, #0
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3718      	adds	r7, #24
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
 800f6ae:	bf00      	nop
 800f6b0:	08014dec 	.word	0x08014dec
 800f6b4:	08014ee4 	.word	0x08014ee4
 800f6b8:	08014e64 	.word	0x08014e64
 800f6bc:	20008820 	.word	0x20008820

0800f6c0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	e01e      	b.n	800f70c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800f6ce:	4913      	ldr	r1, [pc, #76]	; (800f71c <etharp_cleanup_netif+0x5c>)
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	4613      	mov	r3, r2
 800f6d4:	005b      	lsls	r3, r3, #1
 800f6d6:	4413      	add	r3, r2
 800f6d8:	00db      	lsls	r3, r3, #3
 800f6da:	440b      	add	r3, r1
 800f6dc:	3314      	adds	r3, #20
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800f6e2:	7afb      	ldrb	r3, [r7, #11]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00e      	beq.n	800f706 <etharp_cleanup_netif+0x46>
 800f6e8:	490c      	ldr	r1, [pc, #48]	; (800f71c <etharp_cleanup_netif+0x5c>)
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	005b      	lsls	r3, r3, #1
 800f6f0:	4413      	add	r3, r2
 800f6f2:	00db      	lsls	r3, r3, #3
 800f6f4:	440b      	add	r3, r1
 800f6f6:	3308      	adds	r3, #8
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	429a      	cmp	r2, r3
 800f6fe:	d102      	bne.n	800f706 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800f700:	68f8      	ldr	r0, [r7, #12]
 800f702:	f7ff fce5 	bl	800f0d0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3301      	adds	r3, #1
 800f70a:	60fb      	str	r3, [r7, #12]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2b09      	cmp	r3, #9
 800f710:	dddd      	ble.n	800f6ce <etharp_cleanup_netif+0xe>
    }
  }
}
 800f712:	bf00      	nop
 800f714:	bf00      	nop
 800f716:	3710      	adds	r7, #16
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	20008820 	.word	0x20008820

0800f720 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800f720:	b5b0      	push	{r4, r5, r7, lr}
 800f722:	b08a      	sub	sp, #40	; 0x28
 800f724:	af04      	add	r7, sp, #16
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d107      	bne.n	800f740 <etharp_input+0x20>
 800f730:	4b3f      	ldr	r3, [pc, #252]	; (800f830 <etharp_input+0x110>)
 800f732:	f240 228a 	movw	r2, #650	; 0x28a
 800f736:	493f      	ldr	r1, [pc, #252]	; (800f834 <etharp_input+0x114>)
 800f738:	483f      	ldr	r0, [pc, #252]	; (800f838 <etharp_input+0x118>)
 800f73a:	f002 f8b1 	bl	80118a0 <iprintf>
 800f73e:	e074      	b.n	800f82a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	685b      	ldr	r3, [r3, #4]
 800f744:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f750:	d10c      	bne.n	800f76c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800f756:	2b06      	cmp	r3, #6
 800f758:	d108      	bne.n	800f76c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f75a:	693b      	ldr	r3, [r7, #16]
 800f75c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800f75e:	2b04      	cmp	r3, #4
 800f760:	d104      	bne.n	800f76c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	885b      	ldrh	r3, [r3, #2]
 800f766:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800f768:	2b08      	cmp	r3, #8
 800f76a:	d003      	beq.n	800f774 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f7f6 fd25 	bl	80061bc <pbuf_free>
    return;
 800f772:	e05a      	b.n	800f82a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800f774:	693b      	ldr	r3, [r7, #16]
 800f776:	330e      	adds	r3, #14
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	3318      	adds	r3, #24
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	3304      	adds	r3, #4
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d102      	bne.n	800f794 <etharp_input+0x74>
    for_us = 0;
 800f78e:	2300      	movs	r3, #0
 800f790:	75fb      	strb	r3, [r7, #23]
 800f792:	e009      	b.n	800f7a8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800f794:	68ba      	ldr	r2, [r7, #8]
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	3304      	adds	r3, #4
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	bf0c      	ite	eq
 800f7a0:	2301      	moveq	r3, #1
 800f7a2:	2300      	movne	r3, #0
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	f103 0208 	add.w	r2, r3, #8
 800f7ae:	7dfb      	ldrb	r3, [r7, #23]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <etharp_input+0x98>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e000      	b.n	800f7ba <etharp_input+0x9a>
 800f7b8:	2302      	movs	r3, #2
 800f7ba:	f107 010c 	add.w	r1, r7, #12
 800f7be:	6838      	ldr	r0, [r7, #0]
 800f7c0:	f7ff fed8 	bl	800f574 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	88db      	ldrh	r3, [r3, #6]
 800f7c8:	b29b      	uxth	r3, r3
 800f7ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7ce:	d003      	beq.n	800f7d8 <etharp_input+0xb8>
 800f7d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7d4:	d01e      	beq.n	800f814 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800f7d6:	e025      	b.n	800f824 <etharp_input+0x104>
      if (for_us) {
 800f7d8:	7dfb      	ldrb	r3, [r7, #23]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d021      	beq.n	800f822 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800f7f4:	693a      	ldr	r2, [r7, #16]
 800f7f6:	3208      	adds	r2, #8
        etharp_raw(netif,
 800f7f8:	2102      	movs	r1, #2
 800f7fa:	9103      	str	r1, [sp, #12]
 800f7fc:	f107 010c 	add.w	r1, r7, #12
 800f800:	9102      	str	r1, [sp, #8]
 800f802:	9201      	str	r2, [sp, #4]
 800f804:	9300      	str	r3, [sp, #0]
 800f806:	462b      	mov	r3, r5
 800f808:	4622      	mov	r2, r4
 800f80a:	4601      	mov	r1, r0
 800f80c:	6838      	ldr	r0, [r7, #0]
 800f80e:	f000 faef 	bl	800fdf0 <etharp_raw>
      break;
 800f812:	e006      	b.n	800f822 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800f814:	f107 030c 	add.w	r3, r7, #12
 800f818:	4619      	mov	r1, r3
 800f81a:	6838      	ldr	r0, [r7, #0]
 800f81c:	f7fe f9fc 	bl	800dc18 <dhcp_arp_reply>
      break;
 800f820:	e000      	b.n	800f824 <etharp_input+0x104>
      break;
 800f822:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f7f6 fcc9 	bl	80061bc <pbuf_free>
}
 800f82a:	3718      	adds	r7, #24
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bdb0      	pop	{r4, r5, r7, pc}
 800f830:	08014dec 	.word	0x08014dec
 800f834:	08014f3c 	.word	0x08014f3c
 800f838:	08014e64 	.word	0x08014e64

0800f83c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b086      	sub	sp, #24
 800f840:	af02      	add	r7, sp, #8
 800f842:	60f8      	str	r0, [r7, #12]
 800f844:	60b9      	str	r1, [r7, #8]
 800f846:	4613      	mov	r3, r2
 800f848:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800f84a:	79fa      	ldrb	r2, [r7, #7]
 800f84c:	4944      	ldr	r1, [pc, #272]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f84e:	4613      	mov	r3, r2
 800f850:	005b      	lsls	r3, r3, #1
 800f852:	4413      	add	r3, r2
 800f854:	00db      	lsls	r3, r3, #3
 800f856:	440b      	add	r3, r1
 800f858:	3314      	adds	r3, #20
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d806      	bhi.n	800f86e <etharp_output_to_arp_index+0x32>
 800f860:	4b40      	ldr	r3, [pc, #256]	; (800f964 <etharp_output_to_arp_index+0x128>)
 800f862:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f866:	4940      	ldr	r1, [pc, #256]	; (800f968 <etharp_output_to_arp_index+0x12c>)
 800f868:	4840      	ldr	r0, [pc, #256]	; (800f96c <etharp_output_to_arp_index+0x130>)
 800f86a:	f002 f819 	bl	80118a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800f86e:	79fa      	ldrb	r2, [r7, #7]
 800f870:	493b      	ldr	r1, [pc, #236]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f872:	4613      	mov	r3, r2
 800f874:	005b      	lsls	r3, r3, #1
 800f876:	4413      	add	r3, r2
 800f878:	00db      	lsls	r3, r3, #3
 800f87a:	440b      	add	r3, r1
 800f87c:	3314      	adds	r3, #20
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	2b02      	cmp	r3, #2
 800f882:	d153      	bne.n	800f92c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800f884:	79fa      	ldrb	r2, [r7, #7]
 800f886:	4936      	ldr	r1, [pc, #216]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f888:	4613      	mov	r3, r2
 800f88a:	005b      	lsls	r3, r3, #1
 800f88c:	4413      	add	r3, r2
 800f88e:	00db      	lsls	r3, r3, #3
 800f890:	440b      	add	r3, r1
 800f892:	3312      	adds	r3, #18
 800f894:	881b      	ldrh	r3, [r3, #0]
 800f896:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800f89a:	d919      	bls.n	800f8d0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800f89c:	79fa      	ldrb	r2, [r7, #7]
 800f89e:	4613      	mov	r3, r2
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	4413      	add	r3, r2
 800f8a4:	00db      	lsls	r3, r3, #3
 800f8a6:	4a2e      	ldr	r2, [pc, #184]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f8a8:	4413      	add	r3, r2
 800f8aa:	3304      	adds	r3, #4
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	68f8      	ldr	r0, [r7, #12]
 800f8b0:	f000 fb4c 	bl	800ff4c <etharp_request>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d138      	bne.n	800f92c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f8ba:	79fa      	ldrb	r2, [r7, #7]
 800f8bc:	4928      	ldr	r1, [pc, #160]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f8be:	4613      	mov	r3, r2
 800f8c0:	005b      	lsls	r3, r3, #1
 800f8c2:	4413      	add	r3, r2
 800f8c4:	00db      	lsls	r3, r3, #3
 800f8c6:	440b      	add	r3, r1
 800f8c8:	3314      	adds	r3, #20
 800f8ca:	2203      	movs	r2, #3
 800f8cc:	701a      	strb	r2, [r3, #0]
 800f8ce:	e02d      	b.n	800f92c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800f8d0:	79fa      	ldrb	r2, [r7, #7]
 800f8d2:	4923      	ldr	r1, [pc, #140]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	005b      	lsls	r3, r3, #1
 800f8d8:	4413      	add	r3, r2
 800f8da:	00db      	lsls	r3, r3, #3
 800f8dc:	440b      	add	r3, r1
 800f8de:	3312      	adds	r3, #18
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800f8e6:	d321      	bcc.n	800f92c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800f8e8:	79fa      	ldrb	r2, [r7, #7]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	005b      	lsls	r3, r3, #1
 800f8ee:	4413      	add	r3, r2
 800f8f0:	00db      	lsls	r3, r3, #3
 800f8f2:	4a1b      	ldr	r2, [pc, #108]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f8f4:	4413      	add	r3, r2
 800f8f6:	1d19      	adds	r1, r3, #4
 800f8f8:	79fa      	ldrb	r2, [r7, #7]
 800f8fa:	4613      	mov	r3, r2
 800f8fc:	005b      	lsls	r3, r3, #1
 800f8fe:	4413      	add	r3, r2
 800f900:	00db      	lsls	r3, r3, #3
 800f902:	3308      	adds	r3, #8
 800f904:	4a16      	ldr	r2, [pc, #88]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f906:	4413      	add	r3, r2
 800f908:	3304      	adds	r3, #4
 800f90a:	461a      	mov	r2, r3
 800f90c:	68f8      	ldr	r0, [r7, #12]
 800f90e:	f000 fafb 	bl	800ff08 <etharp_request_dst>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d109      	bne.n	800f92c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800f918:	79fa      	ldrb	r2, [r7, #7]
 800f91a:	4911      	ldr	r1, [pc, #68]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f91c:	4613      	mov	r3, r2
 800f91e:	005b      	lsls	r3, r3, #1
 800f920:	4413      	add	r3, r2
 800f922:	00db      	lsls	r3, r3, #3
 800f924:	440b      	add	r3, r1
 800f926:	3314      	adds	r3, #20
 800f928:	2203      	movs	r2, #3
 800f92a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800f932:	79fa      	ldrb	r2, [r7, #7]
 800f934:	4613      	mov	r3, r2
 800f936:	005b      	lsls	r3, r3, #1
 800f938:	4413      	add	r3, r2
 800f93a:	00db      	lsls	r3, r3, #3
 800f93c:	3308      	adds	r3, #8
 800f93e:	4a08      	ldr	r2, [pc, #32]	; (800f960 <etharp_output_to_arp_index+0x124>)
 800f940:	4413      	add	r3, r2
 800f942:	3304      	adds	r3, #4
 800f944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f948:	9200      	str	r2, [sp, #0]
 800f94a:	460a      	mov	r2, r1
 800f94c:	68b9      	ldr	r1, [r7, #8]
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f001 fe5e 	bl	8011610 <ethernet_output>
 800f954:	4603      	mov	r3, r0
}
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop
 800f960:	20008820 	.word	0x20008820
 800f964:	08014dec 	.word	0x08014dec
 800f968:	08014f5c 	.word	0x08014f5c
 800f96c:	08014e64 	.word	0x08014e64

0800f970 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b08a      	sub	sp, #40	; 0x28
 800f974:	af02      	add	r7, sp, #8
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d106      	bne.n	800f994 <etharp_output+0x24>
 800f986:	4b73      	ldr	r3, [pc, #460]	; (800fb54 <etharp_output+0x1e4>)
 800f988:	f240 321e 	movw	r2, #798	; 0x31e
 800f98c:	4972      	ldr	r1, [pc, #456]	; (800fb58 <etharp_output+0x1e8>)
 800f98e:	4873      	ldr	r0, [pc, #460]	; (800fb5c <etharp_output+0x1ec>)
 800f990:	f001 ff86 	bl	80118a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d106      	bne.n	800f9a8 <etharp_output+0x38>
 800f99a:	4b6e      	ldr	r3, [pc, #440]	; (800fb54 <etharp_output+0x1e4>)
 800f99c:	f240 321f 	movw	r2, #799	; 0x31f
 800f9a0:	496f      	ldr	r1, [pc, #444]	; (800fb60 <etharp_output+0x1f0>)
 800f9a2:	486e      	ldr	r0, [pc, #440]	; (800fb5c <etharp_output+0x1ec>)
 800f9a4:	f001 ff7c 	bl	80118a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d106      	bne.n	800f9bc <etharp_output+0x4c>
 800f9ae:	4b69      	ldr	r3, [pc, #420]	; (800fb54 <etharp_output+0x1e4>)
 800f9b0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800f9b4:	496b      	ldr	r1, [pc, #428]	; (800fb64 <etharp_output+0x1f4>)
 800f9b6:	4869      	ldr	r0, [pc, #420]	; (800fb5c <etharp_output+0x1ec>)
 800f9b8:	f001 ff72 	bl	80118a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	68f9      	ldr	r1, [r7, #12]
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f000 ff16 	bl	80107f4 <ip4_addr_isbroadcast_u32>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800f9ce:	4b66      	ldr	r3, [pc, #408]	; (800fb68 <etharp_output+0x1f8>)
 800f9d0:	61fb      	str	r3, [r7, #28]
 800f9d2:	e0af      	b.n	800fb34 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9dc:	2be0      	cmp	r3, #224	; 0xe0
 800f9de:	d118      	bne.n	800fa12 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f9e8:	235e      	movs	r3, #94	; 0x5e
 800f9ea:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	3302      	adds	r3, #2
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	3303      	adds	r3, #3
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800fa0a:	f107 0310 	add.w	r3, r7, #16
 800fa0e:	61fb      	str	r3, [r7, #28]
 800fa10:	e090      	b.n	800fb34 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	3304      	adds	r3, #4
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	405a      	eors	r2, r3
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	3308      	adds	r3, #8
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	4013      	ands	r3, r2
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d012      	beq.n	800fa50 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800fa30:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d00b      	beq.n	800fa50 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	330c      	adds	r3, #12
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d003      	beq.n	800fa4a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	330c      	adds	r3, #12
 800fa46:	61bb      	str	r3, [r7, #24]
 800fa48:	e002      	b.n	800fa50 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800fa4a:	f06f 0303 	mvn.w	r3, #3
 800fa4e:	e07d      	b.n	800fb4c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fa50:	4b46      	ldr	r3, [pc, #280]	; (800fb6c <etharp_output+0x1fc>)
 800fa52:	781b      	ldrb	r3, [r3, #0]
 800fa54:	4619      	mov	r1, r3
 800fa56:	4a46      	ldr	r2, [pc, #280]	; (800fb70 <etharp_output+0x200>)
 800fa58:	460b      	mov	r3, r1
 800fa5a:	005b      	lsls	r3, r3, #1
 800fa5c:	440b      	add	r3, r1
 800fa5e:	00db      	lsls	r3, r3, #3
 800fa60:	4413      	add	r3, r2
 800fa62:	3314      	adds	r3, #20
 800fa64:	781b      	ldrb	r3, [r3, #0]
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d925      	bls.n	800fab6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800fa6a:	4b40      	ldr	r3, [pc, #256]	; (800fb6c <etharp_output+0x1fc>)
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	4619      	mov	r1, r3
 800fa70:	4a3f      	ldr	r2, [pc, #252]	; (800fb70 <etharp_output+0x200>)
 800fa72:	460b      	mov	r3, r1
 800fa74:	005b      	lsls	r3, r3, #1
 800fa76:	440b      	add	r3, r1
 800fa78:	00db      	lsls	r3, r3, #3
 800fa7a:	4413      	add	r3, r2
 800fa7c:	3308      	adds	r3, #8
 800fa7e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d117      	bne.n	800fab6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	4b38      	ldr	r3, [pc, #224]	; (800fb6c <etharp_output+0x1fc>)
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	4618      	mov	r0, r3
 800fa90:	4937      	ldr	r1, [pc, #220]	; (800fb70 <etharp_output+0x200>)
 800fa92:	4603      	mov	r3, r0
 800fa94:	005b      	lsls	r3, r3, #1
 800fa96:	4403      	add	r3, r0
 800fa98:	00db      	lsls	r3, r3, #3
 800fa9a:	440b      	add	r3, r1
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d108      	bne.n	800fab6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800faa4:	4b31      	ldr	r3, [pc, #196]	; (800fb6c <etharp_output+0x1fc>)
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	461a      	mov	r2, r3
 800faaa:	68b9      	ldr	r1, [r7, #8]
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f7ff fec5 	bl	800f83c <etharp_output_to_arp_index>
 800fab2:	4603      	mov	r3, r0
 800fab4:	e04a      	b.n	800fb4c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fab6:	2300      	movs	r3, #0
 800fab8:	75fb      	strb	r3, [r7, #23]
 800faba:	e031      	b.n	800fb20 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fabc:	7dfa      	ldrb	r2, [r7, #23]
 800fabe:	492c      	ldr	r1, [pc, #176]	; (800fb70 <etharp_output+0x200>)
 800fac0:	4613      	mov	r3, r2
 800fac2:	005b      	lsls	r3, r3, #1
 800fac4:	4413      	add	r3, r2
 800fac6:	00db      	lsls	r3, r3, #3
 800fac8:	440b      	add	r3, r1
 800faca:	3314      	adds	r3, #20
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	2b01      	cmp	r3, #1
 800fad0:	d923      	bls.n	800fb1a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800fad2:	7dfa      	ldrb	r2, [r7, #23]
 800fad4:	4926      	ldr	r1, [pc, #152]	; (800fb70 <etharp_output+0x200>)
 800fad6:	4613      	mov	r3, r2
 800fad8:	005b      	lsls	r3, r3, #1
 800fada:	4413      	add	r3, r2
 800fadc:	00db      	lsls	r3, r3, #3
 800fade:	440b      	add	r3, r1
 800fae0:	3308      	adds	r3, #8
 800fae2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d117      	bne.n	800fb1a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	6819      	ldr	r1, [r3, #0]
 800faee:	7dfa      	ldrb	r2, [r7, #23]
 800faf0:	481f      	ldr	r0, [pc, #124]	; (800fb70 <etharp_output+0x200>)
 800faf2:	4613      	mov	r3, r2
 800faf4:	005b      	lsls	r3, r3, #1
 800faf6:	4413      	add	r3, r2
 800faf8:	00db      	lsls	r3, r3, #3
 800fafa:	4403      	add	r3, r0
 800fafc:	3304      	adds	r3, #4
 800fafe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800fb00:	4299      	cmp	r1, r3
 800fb02:	d10a      	bne.n	800fb1a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800fb04:	4a19      	ldr	r2, [pc, #100]	; (800fb6c <etharp_output+0x1fc>)
 800fb06:	7dfb      	ldrb	r3, [r7, #23]
 800fb08:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800fb0a:	7dfb      	ldrb	r3, [r7, #23]
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	68b9      	ldr	r1, [r7, #8]
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f7ff fe93 	bl	800f83c <etharp_output_to_arp_index>
 800fb16:	4603      	mov	r3, r0
 800fb18:	e018      	b.n	800fb4c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800fb1a:	7dfb      	ldrb	r3, [r7, #23]
 800fb1c:	3301      	adds	r3, #1
 800fb1e:	75fb      	strb	r3, [r7, #23]
 800fb20:	7dfb      	ldrb	r3, [r7, #23]
 800fb22:	2b09      	cmp	r3, #9
 800fb24:	d9ca      	bls.n	800fabc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	69b9      	ldr	r1, [r7, #24]
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	f000 f822 	bl	800fb74 <etharp_query>
 800fb30:	4603      	mov	r3, r0
 800fb32:	e00b      	b.n	800fb4c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800fb3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	69fb      	ldr	r3, [r7, #28]
 800fb42:	68b9      	ldr	r1, [r7, #8]
 800fb44:	68f8      	ldr	r0, [r7, #12]
 800fb46:	f001 fd63 	bl	8011610 <ethernet_output>
 800fb4a:	4603      	mov	r3, r0
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3720      	adds	r7, #32
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	08014dec 	.word	0x08014dec
 800fb58:	08014f3c 	.word	0x08014f3c
 800fb5c:	08014e64 	.word	0x08014e64
 800fb60:	08014f8c 	.word	0x08014f8c
 800fb64:	08014f2c 	.word	0x08014f2c
 800fb68:	080155bc 	.word	0x080155bc
 800fb6c:	20008910 	.word	0x20008910
 800fb70:	20008820 	.word	0x20008820

0800fb74 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b08c      	sub	sp, #48	; 0x30
 800fb78:	af02      	add	r7, sp, #8
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	332a      	adds	r3, #42	; 0x2a
 800fb84:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800fb86:	23ff      	movs	r3, #255	; 0xff
 800fb88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68f9      	ldr	r1, [r7, #12]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f000 fe2c 	bl	80107f4 <ip4_addr_isbroadcast_u32>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d10c      	bne.n	800fbbc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800fbaa:	2be0      	cmp	r3, #224	; 0xe0
 800fbac:	d006      	beq.n	800fbbc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d003      	beq.n	800fbbc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d102      	bne.n	800fbc2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800fbbc:	f06f 030f 	mvn.w	r3, #15
 800fbc0:	e101      	b.n	800fdc6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	68b8      	ldr	r0, [r7, #8]
 800fbc8:	f7ff fb5c 	bl	800f284 <etharp_find_entry>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800fbd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	da02      	bge.n	800fbde <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800fbd8:	8a7b      	ldrh	r3, [r7, #18]
 800fbda:	b25b      	sxtb	r3, r3
 800fbdc:	e0f3      	b.n	800fdc6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800fbde:	8a7b      	ldrh	r3, [r7, #18]
 800fbe0:	2b7e      	cmp	r3, #126	; 0x7e
 800fbe2:	d906      	bls.n	800fbf2 <etharp_query+0x7e>
 800fbe4:	4b7a      	ldr	r3, [pc, #488]	; (800fdd0 <etharp_query+0x25c>)
 800fbe6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800fbea:	497a      	ldr	r1, [pc, #488]	; (800fdd4 <etharp_query+0x260>)
 800fbec:	487a      	ldr	r0, [pc, #488]	; (800fdd8 <etharp_query+0x264>)
 800fbee:	f001 fe57 	bl	80118a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800fbf2:	8a7b      	ldrh	r3, [r7, #18]
 800fbf4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800fbf6:	7c7a      	ldrb	r2, [r7, #17]
 800fbf8:	4978      	ldr	r1, [pc, #480]	; (800fddc <etharp_query+0x268>)
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	005b      	lsls	r3, r3, #1
 800fbfe:	4413      	add	r3, r2
 800fc00:	00db      	lsls	r3, r3, #3
 800fc02:	440b      	add	r3, r1
 800fc04:	3314      	adds	r3, #20
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d115      	bne.n	800fc38 <etharp_query+0xc4>
    is_new_entry = 1;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800fc10:	7c7a      	ldrb	r2, [r7, #17]
 800fc12:	4972      	ldr	r1, [pc, #456]	; (800fddc <etharp_query+0x268>)
 800fc14:	4613      	mov	r3, r2
 800fc16:	005b      	lsls	r3, r3, #1
 800fc18:	4413      	add	r3, r2
 800fc1a:	00db      	lsls	r3, r3, #3
 800fc1c:	440b      	add	r3, r1
 800fc1e:	3314      	adds	r3, #20
 800fc20:	2201      	movs	r2, #1
 800fc22:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800fc24:	7c7a      	ldrb	r2, [r7, #17]
 800fc26:	496d      	ldr	r1, [pc, #436]	; (800fddc <etharp_query+0x268>)
 800fc28:	4613      	mov	r3, r2
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	4413      	add	r3, r2
 800fc2e:	00db      	lsls	r3, r3, #3
 800fc30:	440b      	add	r3, r1
 800fc32:	3308      	adds	r3, #8
 800fc34:	68fa      	ldr	r2, [r7, #12]
 800fc36:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800fc38:	7c7a      	ldrb	r2, [r7, #17]
 800fc3a:	4968      	ldr	r1, [pc, #416]	; (800fddc <etharp_query+0x268>)
 800fc3c:	4613      	mov	r3, r2
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	4413      	add	r3, r2
 800fc42:	00db      	lsls	r3, r3, #3
 800fc44:	440b      	add	r3, r1
 800fc46:	3314      	adds	r3, #20
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d011      	beq.n	800fc72 <etharp_query+0xfe>
 800fc4e:	7c7a      	ldrb	r2, [r7, #17]
 800fc50:	4962      	ldr	r1, [pc, #392]	; (800fddc <etharp_query+0x268>)
 800fc52:	4613      	mov	r3, r2
 800fc54:	005b      	lsls	r3, r3, #1
 800fc56:	4413      	add	r3, r2
 800fc58:	00db      	lsls	r3, r3, #3
 800fc5a:	440b      	add	r3, r1
 800fc5c:	3314      	adds	r3, #20
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	2b01      	cmp	r3, #1
 800fc62:	d806      	bhi.n	800fc72 <etharp_query+0xfe>
 800fc64:	4b5a      	ldr	r3, [pc, #360]	; (800fdd0 <etharp_query+0x25c>)
 800fc66:	f240 32cd 	movw	r2, #973	; 0x3cd
 800fc6a:	495d      	ldr	r1, [pc, #372]	; (800fde0 <etharp_query+0x26c>)
 800fc6c:	485a      	ldr	r0, [pc, #360]	; (800fdd8 <etharp_query+0x264>)
 800fc6e:	f001 fe17 	bl	80118a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800fc72:	6a3b      	ldr	r3, [r7, #32]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d102      	bne.n	800fc7e <etharp_query+0x10a>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d10c      	bne.n	800fc98 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800fc7e:	68b9      	ldr	r1, [r7, #8]
 800fc80:	68f8      	ldr	r0, [r7, #12]
 800fc82:	f000 f963 	bl	800ff4c <etharp_request>
 800fc86:	4603      	mov	r3, r0
 800fc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d102      	bne.n	800fc98 <etharp_query+0x124>
      return result;
 800fc92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc96:	e096      	b.n	800fdc6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d106      	bne.n	800fcac <etharp_query+0x138>
 800fc9e:	4b4c      	ldr	r3, [pc, #304]	; (800fdd0 <etharp_query+0x25c>)
 800fca0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800fca4:	494f      	ldr	r1, [pc, #316]	; (800fde4 <etharp_query+0x270>)
 800fca6:	484c      	ldr	r0, [pc, #304]	; (800fdd8 <etharp_query+0x264>)
 800fca8:	f001 fdfa 	bl	80118a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800fcac:	7c7a      	ldrb	r2, [r7, #17]
 800fcae:	494b      	ldr	r1, [pc, #300]	; (800fddc <etharp_query+0x268>)
 800fcb0:	4613      	mov	r3, r2
 800fcb2:	005b      	lsls	r3, r3, #1
 800fcb4:	4413      	add	r3, r2
 800fcb6:	00db      	lsls	r3, r3, #3
 800fcb8:	440b      	add	r3, r1
 800fcba:	3314      	adds	r3, #20
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	d917      	bls.n	800fcf2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800fcc2:	4a49      	ldr	r2, [pc, #292]	; (800fde8 <etharp_query+0x274>)
 800fcc4:	7c7b      	ldrb	r3, [r7, #17]
 800fcc6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800fcc8:	7c7a      	ldrb	r2, [r7, #17]
 800fcca:	4613      	mov	r3, r2
 800fccc:	005b      	lsls	r3, r3, #1
 800fcce:	4413      	add	r3, r2
 800fcd0:	00db      	lsls	r3, r3, #3
 800fcd2:	3308      	adds	r3, #8
 800fcd4:	4a41      	ldr	r2, [pc, #260]	; (800fddc <etharp_query+0x268>)
 800fcd6:	4413      	add	r3, r2
 800fcd8:	3304      	adds	r3, #4
 800fcda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fcde:	9200      	str	r2, [sp, #0]
 800fce0:	697a      	ldr	r2, [r7, #20]
 800fce2:	6879      	ldr	r1, [r7, #4]
 800fce4:	68f8      	ldr	r0, [r7, #12]
 800fce6:	f001 fc93 	bl	8011610 <ethernet_output>
 800fcea:	4603      	mov	r3, r0
 800fcec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fcf0:	e067      	b.n	800fdc2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800fcf2:	7c7a      	ldrb	r2, [r7, #17]
 800fcf4:	4939      	ldr	r1, [pc, #228]	; (800fddc <etharp_query+0x268>)
 800fcf6:	4613      	mov	r3, r2
 800fcf8:	005b      	lsls	r3, r3, #1
 800fcfa:	4413      	add	r3, r2
 800fcfc:	00db      	lsls	r3, r3, #3
 800fcfe:	440b      	add	r3, r1
 800fd00:	3314      	adds	r3, #20
 800fd02:	781b      	ldrb	r3, [r3, #0]
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d15c      	bne.n	800fdc2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fd10:	e01c      	b.n	800fd4c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	895a      	ldrh	r2, [r3, #10]
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	891b      	ldrh	r3, [r3, #8]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d10a      	bne.n	800fd34 <etharp_query+0x1c0>
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d006      	beq.n	800fd34 <etharp_query+0x1c0>
 800fd26:	4b2a      	ldr	r3, [pc, #168]	; (800fdd0 <etharp_query+0x25c>)
 800fd28:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800fd2c:	492f      	ldr	r1, [pc, #188]	; (800fdec <etharp_query+0x278>)
 800fd2e:	482a      	ldr	r0, [pc, #168]	; (800fdd8 <etharp_query+0x264>)
 800fd30:	f001 fdb6 	bl	80118a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	7b1b      	ldrb	r3, [r3, #12]
 800fd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <etharp_query+0x1d2>
        copy_needed = 1;
 800fd40:	2301      	movs	r3, #1
 800fd42:	61bb      	str	r3, [r7, #24]
        break;
 800fd44:	e005      	b.n	800fd52 <etharp_query+0x1de>
      }
      p = p->next;
 800fd46:	69fb      	ldr	r3, [r7, #28]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1df      	bne.n	800fd12 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d007      	beq.n	800fd68 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800fd5e:	200e      	movs	r0, #14
 800fd60:	f7f6 fc98 	bl	8006694 <pbuf_clone>
 800fd64:	61f8      	str	r0, [r7, #28]
 800fd66:	e004      	b.n	800fd72 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800fd6c:	69f8      	ldr	r0, [r7, #28]
 800fd6e:	f7f6 fac5 	bl	80062fc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800fd72:	69fb      	ldr	r3, [r7, #28]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d021      	beq.n	800fdbc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800fd78:	7c7a      	ldrb	r2, [r7, #17]
 800fd7a:	4918      	ldr	r1, [pc, #96]	; (800fddc <etharp_query+0x268>)
 800fd7c:	4613      	mov	r3, r2
 800fd7e:	005b      	lsls	r3, r3, #1
 800fd80:	4413      	add	r3, r2
 800fd82:	00db      	lsls	r3, r3, #3
 800fd84:	440b      	add	r3, r1
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d00a      	beq.n	800fda2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800fd8c:	7c7a      	ldrb	r2, [r7, #17]
 800fd8e:	4913      	ldr	r1, [pc, #76]	; (800fddc <etharp_query+0x268>)
 800fd90:	4613      	mov	r3, r2
 800fd92:	005b      	lsls	r3, r3, #1
 800fd94:	4413      	add	r3, r2
 800fd96:	00db      	lsls	r3, r3, #3
 800fd98:	440b      	add	r3, r1
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f7f6 fa0d 	bl	80061bc <pbuf_free>
      }
      arp_table[i].q = p;
 800fda2:	7c7a      	ldrb	r2, [r7, #17]
 800fda4:	490d      	ldr	r1, [pc, #52]	; (800fddc <etharp_query+0x268>)
 800fda6:	4613      	mov	r3, r2
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	4413      	add	r3, r2
 800fdac:	00db      	lsls	r3, r3, #3
 800fdae:	440b      	add	r3, r1
 800fdb0:	69fa      	ldr	r2, [r7, #28]
 800fdb2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fdba:	e002      	b.n	800fdc2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800fdbc:	23ff      	movs	r3, #255	; 0xff
 800fdbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800fdc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	3728      	adds	r7, #40	; 0x28
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	08014dec 	.word	0x08014dec
 800fdd4:	08014f98 	.word	0x08014f98
 800fdd8:	08014e64 	.word	0x08014e64
 800fddc:	20008820 	.word	0x20008820
 800fde0:	08014fa8 	.word	0x08014fa8
 800fde4:	08014f8c 	.word	0x08014f8c
 800fde8:	20008910 	.word	0x20008910
 800fdec:	08014fd0 	.word	0x08014fd0

0800fdf0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b08a      	sub	sp, #40	; 0x28
 800fdf4:	af02      	add	r7, sp, #8
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	60b9      	str	r1, [r7, #8]
 800fdfa:	607a      	str	r2, [r7, #4]
 800fdfc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d106      	bne.n	800fe16 <etharp_raw+0x26>
 800fe08:	4b3a      	ldr	r3, [pc, #232]	; (800fef4 <etharp_raw+0x104>)
 800fe0a:	f240 4257 	movw	r2, #1111	; 0x457
 800fe0e:	493a      	ldr	r1, [pc, #232]	; (800fef8 <etharp_raw+0x108>)
 800fe10:	483a      	ldr	r0, [pc, #232]	; (800fefc <etharp_raw+0x10c>)
 800fe12:	f001 fd45 	bl	80118a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800fe16:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe1a:	211c      	movs	r1, #28
 800fe1c:	200e      	movs	r0, #14
 800fe1e:	f7f5 fee9 	bl	8005bf4 <pbuf_alloc>
 800fe22:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d102      	bne.n	800fe30 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800fe2a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe2e:	e05d      	b.n	800feec <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	895b      	ldrh	r3, [r3, #10]
 800fe34:	2b1b      	cmp	r3, #27
 800fe36:	d806      	bhi.n	800fe46 <etharp_raw+0x56>
 800fe38:	4b2e      	ldr	r3, [pc, #184]	; (800fef4 <etharp_raw+0x104>)
 800fe3a:	f240 4262 	movw	r2, #1122	; 0x462
 800fe3e:	4930      	ldr	r1, [pc, #192]	; (800ff00 <etharp_raw+0x110>)
 800fe40:	482e      	ldr	r0, [pc, #184]	; (800fefc <etharp_raw+0x10c>)
 800fe42:	f001 fd2d 	bl	80118a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800fe46:	69bb      	ldr	r3, [r7, #24]
 800fe48:	685b      	ldr	r3, [r3, #4]
 800fe4a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800fe4c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7f4 fe4a 	bl	8004ae8 <lwip_htons>
 800fe54:	4603      	mov	r3, r0
 800fe56:	461a      	mov	r2, r3
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe62:	2b06      	cmp	r3, #6
 800fe64:	d006      	beq.n	800fe74 <etharp_raw+0x84>
 800fe66:	4b23      	ldr	r3, [pc, #140]	; (800fef4 <etharp_raw+0x104>)
 800fe68:	f240 4269 	movw	r2, #1129	; 0x469
 800fe6c:	4925      	ldr	r1, [pc, #148]	; (800ff04 <etharp_raw+0x114>)
 800fe6e:	4823      	ldr	r0, [pc, #140]	; (800fefc <etharp_raw+0x10c>)
 800fe70:	f001 fd16 	bl	80118a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	3308      	adds	r3, #8
 800fe78:	2206      	movs	r2, #6
 800fe7a:	6839      	ldr	r1, [r7, #0]
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f001 fdea 	bl	8011a56 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	3312      	adds	r3, #18
 800fe86:	2206      	movs	r2, #6
 800fe88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f001 fde3 	bl	8011a56 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	330e      	adds	r3, #14
 800fe94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe96:	6812      	ldr	r2, [r2, #0]
 800fe98:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	3318      	adds	r3, #24
 800fe9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fea0:	6812      	ldr	r2, [r2, #0]
 800fea2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	2200      	movs	r2, #0
 800fea8:	701a      	strb	r2, [r3, #0]
 800feaa:	2200      	movs	r2, #0
 800feac:	f042 0201 	orr.w	r2, r2, #1
 800feb0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	2200      	movs	r2, #0
 800feb6:	f042 0208 	orr.w	r2, r2, #8
 800feba:	709a      	strb	r2, [r3, #2]
 800febc:	2200      	movs	r2, #0
 800febe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	2206      	movs	r2, #6
 800fec4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	2204      	movs	r2, #4
 800feca:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800fecc:	f640 0306 	movw	r3, #2054	; 0x806
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68ba      	ldr	r2, [r7, #8]
 800fed6:	69b9      	ldr	r1, [r7, #24]
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f001 fb99 	bl	8011610 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800fede:	69b8      	ldr	r0, [r7, #24]
 800fee0:	f7f6 f96c 	bl	80061bc <pbuf_free>
  p = NULL;
 800fee4:	2300      	movs	r3, #0
 800fee6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800fee8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800feec:	4618      	mov	r0, r3
 800feee:	3720      	adds	r7, #32
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	08014dec 	.word	0x08014dec
 800fef8:	08014f3c 	.word	0x08014f3c
 800fefc:	08014e64 	.word	0x08014e64
 800ff00:	08014fec 	.word	0x08014fec
 800ff04:	08015020 	.word	0x08015020

0800ff08 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b088      	sub	sp, #32
 800ff0c:	af04      	add	r7, sp, #16
 800ff0e:	60f8      	str	r0, [r7, #12]
 800ff10:	60b9      	str	r1, [r7, #8]
 800ff12:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ff24:	2201      	movs	r2, #1
 800ff26:	9203      	str	r2, [sp, #12]
 800ff28:	68ba      	ldr	r2, [r7, #8]
 800ff2a:	9202      	str	r2, [sp, #8]
 800ff2c:	4a06      	ldr	r2, [pc, #24]	; (800ff48 <etharp_request_dst+0x40>)
 800ff2e:	9201      	str	r2, [sp, #4]
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	4603      	mov	r3, r0
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	68f8      	ldr	r0, [r7, #12]
 800ff38:	f7ff ff5a 	bl	800fdf0 <etharp_raw>
 800ff3c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	3710      	adds	r7, #16
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop
 800ff48:	080155c4 	.word	0x080155c4

0800ff4c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ff56:	4a05      	ldr	r2, [pc, #20]	; (800ff6c <etharp_request+0x20>)
 800ff58:	6839      	ldr	r1, [r7, #0]
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7ff ffd4 	bl	800ff08 <etharp_request_dst>
 800ff60:	4603      	mov	r3, r0
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3708      	adds	r7, #8
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	080155bc 	.word	0x080155bc

0800ff70 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b08e      	sub	sp, #56	; 0x38
 800ff74:	af04      	add	r7, sp, #16
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ff7a:	4b79      	ldr	r3, [pc, #484]	; (8010160 <icmp_input+0x1f0>)
 800ff7c:	689b      	ldr	r3, [r3, #8]
 800ff7e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ff80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	f003 030f 	and.w	r3, r3, #15
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	009b      	lsls	r3, r3, #2
 800ff8c:	b2db      	uxtb	r3, r3
 800ff8e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ff90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff92:	2b13      	cmp	r3, #19
 800ff94:	f240 80cd 	bls.w	8010132 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	895b      	ldrh	r3, [r3, #10]
 800ff9c:	2b03      	cmp	r3, #3
 800ff9e:	f240 80ca 	bls.w	8010136 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ffac:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	f000 80b7 	beq.w	8010124 <icmp_input+0x1b4>
 800ffb6:	2b08      	cmp	r3, #8
 800ffb8:	f040 80b7 	bne.w	801012a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ffbc:	4b69      	ldr	r3, [pc, #420]	; (8010164 <icmp_input+0x1f4>)
 800ffbe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ffc0:	4b67      	ldr	r3, [pc, #412]	; (8010160 <icmp_input+0x1f0>)
 800ffc2:	695b      	ldr	r3, [r3, #20]
 800ffc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffc8:	2be0      	cmp	r3, #224	; 0xe0
 800ffca:	f000 80bb 	beq.w	8010144 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ffce:	4b64      	ldr	r3, [pc, #400]	; (8010160 <icmp_input+0x1f0>)
 800ffd0:	695b      	ldr	r3, [r3, #20]
 800ffd2:	4a63      	ldr	r2, [pc, #396]	; (8010160 <icmp_input+0x1f0>)
 800ffd4:	6812      	ldr	r2, [r2, #0]
 800ffd6:	4611      	mov	r1, r2
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f000 fc0b 	bl	80107f4 <ip4_addr_isbroadcast_u32>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	f040 80b1 	bne.w	8010148 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	891b      	ldrh	r3, [r3, #8]
 800ffea:	2b07      	cmp	r3, #7
 800ffec:	f240 80a5 	bls.w	801013a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800fff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fff2:	330e      	adds	r3, #14
 800fff4:	4619      	mov	r1, r3
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f7f6 f84a 	bl	8006090 <pbuf_add_header>
 800fffc:	4603      	mov	r3, r0
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d04b      	beq.n	801009a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	891a      	ldrh	r2, [r3, #8]
 8010006:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010008:	4413      	add	r3, r2
 801000a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	891b      	ldrh	r3, [r3, #8]
 8010010:	8b7a      	ldrh	r2, [r7, #26]
 8010012:	429a      	cmp	r2, r3
 8010014:	f0c0 809a 	bcc.w	801014c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010018:	8b7b      	ldrh	r3, [r7, #26]
 801001a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801001e:	4619      	mov	r1, r3
 8010020:	200e      	movs	r0, #14
 8010022:	f7f5 fde7 	bl	8005bf4 <pbuf_alloc>
 8010026:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	2b00      	cmp	r3, #0
 801002c:	f000 8090 	beq.w	8010150 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	895b      	ldrh	r3, [r3, #10]
 8010034:	461a      	mov	r2, r3
 8010036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010038:	3308      	adds	r3, #8
 801003a:	429a      	cmp	r2, r3
 801003c:	d203      	bcs.n	8010046 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801003e:	6978      	ldr	r0, [r7, #20]
 8010040:	f7f6 f8bc 	bl	80061bc <pbuf_free>
          goto icmperr;
 8010044:	e085      	b.n	8010152 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	685b      	ldr	r3, [r3, #4]
 801004a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801004c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801004e:	4618      	mov	r0, r3
 8010050:	f001 fd01 	bl	8011a56 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010054:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010056:	4619      	mov	r1, r3
 8010058:	6978      	ldr	r0, [r7, #20]
 801005a:	f7f6 f829 	bl	80060b0 <pbuf_remove_header>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d009      	beq.n	8010078 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010064:	4b40      	ldr	r3, [pc, #256]	; (8010168 <icmp_input+0x1f8>)
 8010066:	22b6      	movs	r2, #182	; 0xb6
 8010068:	4940      	ldr	r1, [pc, #256]	; (801016c <icmp_input+0x1fc>)
 801006a:	4841      	ldr	r0, [pc, #260]	; (8010170 <icmp_input+0x200>)
 801006c:	f001 fc18 	bl	80118a0 <iprintf>
          pbuf_free(r);
 8010070:	6978      	ldr	r0, [r7, #20]
 8010072:	f7f6 f8a3 	bl	80061bc <pbuf_free>
          goto icmperr;
 8010076:	e06c      	b.n	8010152 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010078:	6879      	ldr	r1, [r7, #4]
 801007a:	6978      	ldr	r0, [r7, #20]
 801007c:	f7f6 f9c6 	bl	800640c <pbuf_copy>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d003      	beq.n	801008e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010086:	6978      	ldr	r0, [r7, #20]
 8010088:	f7f6 f898 	bl	80061bc <pbuf_free>
          goto icmperr;
 801008c:	e061      	b.n	8010152 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7f6 f894 	bl	80061bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	607b      	str	r3, [r7, #4]
 8010098:	e00f      	b.n	80100ba <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801009a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801009c:	330e      	adds	r3, #14
 801009e:	4619      	mov	r1, r3
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f7f6 f805 	bl	80060b0 <pbuf_remove_header>
 80100a6:	4603      	mov	r3, r0
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d006      	beq.n	80100ba <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80100ac:	4b2e      	ldr	r3, [pc, #184]	; (8010168 <icmp_input+0x1f8>)
 80100ae:	22c7      	movs	r2, #199	; 0xc7
 80100b0:	4930      	ldr	r1, [pc, #192]	; (8010174 <icmp_input+0x204>)
 80100b2:	482f      	ldr	r0, [pc, #188]	; (8010170 <icmp_input+0x200>)
 80100b4:	f001 fbf4 	bl	80118a0 <iprintf>
          goto icmperr;
 80100b8:	e04b      	b.n	8010152 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80100c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80100c2:	4619      	mov	r1, r3
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f7f5 ffe3 	bl	8006090 <pbuf_add_header>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d12b      	bne.n	8010128 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80100d6:	69fb      	ldr	r3, [r7, #28]
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80100de:	4b20      	ldr	r3, [pc, #128]	; (8010160 <icmp_input+0x1f0>)
 80100e0:	691a      	ldr	r2, [r3, #16]
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	2200      	movs	r2, #0
 80100ea:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80100ec:	693b      	ldr	r3, [r7, #16]
 80100ee:	2200      	movs	r2, #0
 80100f0:	709a      	strb	r2, [r3, #2]
 80100f2:	2200      	movs	r2, #0
 80100f4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	22ff      	movs	r2, #255	; 0xff
 80100fa:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2200      	movs	r2, #0
 8010100:	729a      	strb	r2, [r3, #10]
 8010102:	2200      	movs	r2, #0
 8010104:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	9302      	str	r3, [sp, #8]
 801010a:	2301      	movs	r3, #1
 801010c:	9301      	str	r3, [sp, #4]
 801010e:	2300      	movs	r3, #0
 8010110:	9300      	str	r3, [sp, #0]
 8010112:	23ff      	movs	r3, #255	; 0xff
 8010114:	2200      	movs	r2, #0
 8010116:	69f9      	ldr	r1, [r7, #28]
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 fa93 	bl	8010644 <ip4_output_if>
 801011e:	4603      	mov	r3, r0
 8010120:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010122:	e001      	b.n	8010128 <icmp_input+0x1b8>
      break;
 8010124:	bf00      	nop
 8010126:	e000      	b.n	801012a <icmp_input+0x1ba>
      break;
 8010128:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7f6 f846 	bl	80061bc <pbuf_free>
  return;
 8010130:	e013      	b.n	801015a <icmp_input+0x1ea>
    goto lenerr;
 8010132:	bf00      	nop
 8010134:	e002      	b.n	801013c <icmp_input+0x1cc>
    goto lenerr;
 8010136:	bf00      	nop
 8010138:	e000      	b.n	801013c <icmp_input+0x1cc>
        goto lenerr;
 801013a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7f6 f83d 	bl	80061bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010142:	e00a      	b.n	801015a <icmp_input+0x1ea>
        goto icmperr;
 8010144:	bf00      	nop
 8010146:	e004      	b.n	8010152 <icmp_input+0x1e2>
        goto icmperr;
 8010148:	bf00      	nop
 801014a:	e002      	b.n	8010152 <icmp_input+0x1e2>
          goto icmperr;
 801014c:	bf00      	nop
 801014e:	e000      	b.n	8010152 <icmp_input+0x1e2>
          goto icmperr;
 8010150:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7f6 f832 	bl	80061bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010158:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801015a:	3728      	adds	r7, #40	; 0x28
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	200051fc 	.word	0x200051fc
 8010164:	20005210 	.word	0x20005210
 8010168:	08015064 	.word	0x08015064
 801016c:	0801509c 	.word	0x0801509c
 8010170:	080150d4 	.word	0x080150d4
 8010174:	080150fc 	.word	0x080150fc

08010178 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	460b      	mov	r3, r1
 8010182:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010184:	78fb      	ldrb	r3, [r7, #3]
 8010186:	461a      	mov	r2, r3
 8010188:	2103      	movs	r1, #3
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 f814 	bl	80101b8 <icmp_send_response>
}
 8010190:	bf00      	nop
 8010192:	3708      	adds	r7, #8
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}

08010198 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b082      	sub	sp, #8
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	460b      	mov	r3, r1
 80101a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80101a4:	78fb      	ldrb	r3, [r7, #3]
 80101a6:	461a      	mov	r2, r3
 80101a8:	210b      	movs	r1, #11
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 f804 	bl	80101b8 <icmp_send_response>
}
 80101b0:	bf00      	nop
 80101b2:	3708      	adds	r7, #8
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b08c      	sub	sp, #48	; 0x30
 80101bc:	af04      	add	r7, sp, #16
 80101be:	6078      	str	r0, [r7, #4]
 80101c0:	460b      	mov	r3, r1
 80101c2:	70fb      	strb	r3, [r7, #3]
 80101c4:	4613      	mov	r3, r2
 80101c6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80101c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101cc:	2124      	movs	r1, #36	; 0x24
 80101ce:	2022      	movs	r0, #34	; 0x22
 80101d0:	f7f5 fd10 	bl	8005bf4 <pbuf_alloc>
 80101d4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d04c      	beq.n	8010276 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	895b      	ldrh	r3, [r3, #10]
 80101e0:	2b23      	cmp	r3, #35	; 0x23
 80101e2:	d806      	bhi.n	80101f2 <icmp_send_response+0x3a>
 80101e4:	4b26      	ldr	r3, [pc, #152]	; (8010280 <icmp_send_response+0xc8>)
 80101e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80101ea:	4926      	ldr	r1, [pc, #152]	; (8010284 <icmp_send_response+0xcc>)
 80101ec:	4826      	ldr	r0, [pc, #152]	; (8010288 <icmp_send_response+0xd0>)
 80101ee:	f001 fb57 	bl	80118a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	78fa      	ldrb	r2, [r7, #3]
 8010202:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	78ba      	ldrb	r2, [r7, #2]
 8010208:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	2200      	movs	r2, #0
 801020e:	711a      	strb	r2, [r3, #4]
 8010210:	2200      	movs	r2, #0
 8010212:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	2200      	movs	r2, #0
 8010218:	719a      	strb	r2, [r3, #6]
 801021a:	2200      	movs	r2, #0
 801021c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	685b      	ldr	r3, [r3, #4]
 8010222:	f103 0008 	add.w	r0, r3, #8
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	685b      	ldr	r3, [r3, #4]
 801022a:	221c      	movs	r2, #28
 801022c:	4619      	mov	r1, r3
 801022e:	f001 fc12 	bl	8011a56 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	68db      	ldr	r3, [r3, #12]
 8010236:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010238:	f107 030c 	add.w	r3, r7, #12
 801023c:	4618      	mov	r0, r3
 801023e:	f000 f825 	bl	801028c <ip4_route>
 8010242:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d011      	beq.n	801026e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	2200      	movs	r2, #0
 801024e:	709a      	strb	r2, [r3, #2]
 8010250:	2200      	movs	r2, #0
 8010252:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010254:	f107 020c 	add.w	r2, r7, #12
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	9302      	str	r3, [sp, #8]
 801025c:	2301      	movs	r3, #1
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	2300      	movs	r3, #0
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	23ff      	movs	r3, #255	; 0xff
 8010266:	2100      	movs	r1, #0
 8010268:	69f8      	ldr	r0, [r7, #28]
 801026a:	f000 f9eb 	bl	8010644 <ip4_output_if>
  }
  pbuf_free(q);
 801026e:	69f8      	ldr	r0, [r7, #28]
 8010270:	f7f5 ffa4 	bl	80061bc <pbuf_free>
 8010274:	e000      	b.n	8010278 <icmp_send_response+0xc0>
    return;
 8010276:	bf00      	nop
}
 8010278:	3720      	adds	r7, #32
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	08015064 	.word	0x08015064
 8010284:	08015130 	.word	0x08015130
 8010288:	080150d4 	.word	0x080150d4

0801028c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801028c:	b480      	push	{r7}
 801028e:	b085      	sub	sp, #20
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010294:	4b33      	ldr	r3, [pc, #204]	; (8010364 <ip4_route+0xd8>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	60fb      	str	r3, [r7, #12]
 801029a:	e036      	b.n	801030a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80102a2:	f003 0301 	and.w	r3, r3, #1
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d02b      	beq.n	8010304 <ip4_route+0x78>
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80102b2:	089b      	lsrs	r3, r3, #2
 80102b4:	f003 0301 	and.w	r3, r3, #1
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d022      	beq.n	8010304 <ip4_route+0x78>
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	3304      	adds	r3, #4
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d01d      	beq.n	8010304 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681a      	ldr	r2, [r3, #0]
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	3304      	adds	r3, #4
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	405a      	eors	r2, r3
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	3308      	adds	r3, #8
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4013      	ands	r3, r2
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d101      	bne.n	80102e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	e038      	b.n	8010356 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80102ea:	f003 0302 	and.w	r3, r3, #2
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d108      	bne.n	8010304 <ip4_route+0x78>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	330c      	adds	r3, #12
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d101      	bne.n	8010304 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	e028      	b.n	8010356 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	60fb      	str	r3, [r7, #12]
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1c5      	bne.n	801029c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010310:	4b15      	ldr	r3, [pc, #84]	; (8010368 <ip4_route+0xdc>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d01a      	beq.n	801034e <ip4_route+0xc2>
 8010318:	4b13      	ldr	r3, [pc, #76]	; (8010368 <ip4_route+0xdc>)
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010320:	f003 0301 	and.w	r3, r3, #1
 8010324:	2b00      	cmp	r3, #0
 8010326:	d012      	beq.n	801034e <ip4_route+0xc2>
 8010328:	4b0f      	ldr	r3, [pc, #60]	; (8010368 <ip4_route+0xdc>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010330:	f003 0304 	and.w	r3, r3, #4
 8010334:	2b00      	cmp	r3, #0
 8010336:	d00a      	beq.n	801034e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010338:	4b0b      	ldr	r3, [pc, #44]	; (8010368 <ip4_route+0xdc>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	3304      	adds	r3, #4
 801033e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010340:	2b00      	cmp	r3, #0
 8010342:	d004      	beq.n	801034e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b7f      	cmp	r3, #127	; 0x7f
 801034c:	d101      	bne.n	8010352 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801034e:	2300      	movs	r3, #0
 8010350:	e001      	b.n	8010356 <ip4_route+0xca>
  }

  return netif_default;
 8010352:	4b05      	ldr	r3, [pc, #20]	; (8010368 <ip4_route+0xdc>)
 8010354:	681b      	ldr	r3, [r3, #0]
}
 8010356:	4618      	mov	r0, r3
 8010358:	3714      	adds	r7, #20
 801035a:	46bd      	mov	sp, r7
 801035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop
 8010364:	20008780 	.word	0x20008780
 8010368:	20008784 	.word	0x20008784

0801036c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b082      	sub	sp, #8
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801037a:	f003 0301 	and.w	r3, r3, #1
 801037e:	b2db      	uxtb	r3, r3
 8010380:	2b00      	cmp	r3, #0
 8010382:	d016      	beq.n	80103b2 <ip4_input_accept+0x46>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	3304      	adds	r3, #4
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d011      	beq.n	80103b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801038e:	4b0b      	ldr	r3, [pc, #44]	; (80103bc <ip4_input_accept+0x50>)
 8010390:	695a      	ldr	r2, [r3, #20]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	3304      	adds	r3, #4
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	429a      	cmp	r2, r3
 801039a:	d008      	beq.n	80103ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801039c:	4b07      	ldr	r3, [pc, #28]	; (80103bc <ip4_input_accept+0x50>)
 801039e:	695b      	ldr	r3, [r3, #20]
 80103a0:	6879      	ldr	r1, [r7, #4]
 80103a2:	4618      	mov	r0, r3
 80103a4:	f000 fa26 	bl	80107f4 <ip4_addr_isbroadcast_u32>
 80103a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d001      	beq.n	80103b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80103ae:	2301      	movs	r3, #1
 80103b0:	e000      	b.n	80103b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80103b2:	2300      	movs	r3, #0
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3708      	adds	r7, #8
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	200051fc 	.word	0x200051fc

080103c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b088      	sub	sp, #32
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80103ca:	2301      	movs	r3, #1
 80103cc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80103d4:	69fb      	ldr	r3, [r7, #28]
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	091b      	lsrs	r3, r3, #4
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	2b04      	cmp	r3, #4
 80103de:	d004      	beq.n	80103ea <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f7f5 feeb 	bl	80061bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80103e6:	2300      	movs	r3, #0
 80103e8:	e123      	b.n	8010632 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	f003 030f 	and.w	r3, r3, #15
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	885b      	ldrh	r3, [r3, #2]
 80103fe:	b29b      	uxth	r3, r3
 8010400:	4618      	mov	r0, r3
 8010402:	f7f4 fb71 	bl	8004ae8 <lwip_htons>
 8010406:	4603      	mov	r3, r0
 8010408:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	891b      	ldrh	r3, [r3, #8]
 801040e:	8a3a      	ldrh	r2, [r7, #16]
 8010410:	429a      	cmp	r2, r3
 8010412:	d204      	bcs.n	801041e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8010414:	8a3b      	ldrh	r3, [r7, #16]
 8010416:	4619      	mov	r1, r3
 8010418:	6878      	ldr	r0, [r7, #4]
 801041a:	f7f5 fd49 	bl	8005eb0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	895b      	ldrh	r3, [r3, #10]
 8010422:	8a7a      	ldrh	r2, [r7, #18]
 8010424:	429a      	cmp	r2, r3
 8010426:	d807      	bhi.n	8010438 <ip4_input+0x78>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	891b      	ldrh	r3, [r3, #8]
 801042c:	8a3a      	ldrh	r2, [r7, #16]
 801042e:	429a      	cmp	r2, r3
 8010430:	d802      	bhi.n	8010438 <ip4_input+0x78>
 8010432:	8a7b      	ldrh	r3, [r7, #18]
 8010434:	2b13      	cmp	r3, #19
 8010436:	d804      	bhi.n	8010442 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f7f5 febf 	bl	80061bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801043e:	2300      	movs	r3, #0
 8010440:	e0f7      	b.n	8010632 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	691b      	ldr	r3, [r3, #16]
 8010446:	4a7d      	ldr	r2, [pc, #500]	; (801063c <ip4_input+0x27c>)
 8010448:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	4a7b      	ldr	r2, [pc, #492]	; (801063c <ip4_input+0x27c>)
 8010450:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010452:	4b7a      	ldr	r3, [pc, #488]	; (801063c <ip4_input+0x27c>)
 8010454:	695b      	ldr	r3, [r3, #20]
 8010456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801045a:	2be0      	cmp	r3, #224	; 0xe0
 801045c:	d112      	bne.n	8010484 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010464:	f003 0301 	and.w	r3, r3, #1
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d007      	beq.n	801047e <ip4_input+0xbe>
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	3304      	adds	r3, #4
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d002      	beq.n	801047e <ip4_input+0xbe>
      netif = inp;
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	61bb      	str	r3, [r7, #24]
 801047c:	e02a      	b.n	80104d4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801047e:	2300      	movs	r3, #0
 8010480:	61bb      	str	r3, [r7, #24]
 8010482:	e027      	b.n	80104d4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010484:	6838      	ldr	r0, [r7, #0]
 8010486:	f7ff ff71 	bl	801036c <ip4_input_accept>
 801048a:	4603      	mov	r3, r0
 801048c:	2b00      	cmp	r3, #0
 801048e:	d002      	beq.n	8010496 <ip4_input+0xd6>
      netif = inp;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	61bb      	str	r3, [r7, #24]
 8010494:	e01e      	b.n	80104d4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8010496:	2300      	movs	r3, #0
 8010498:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801049a:	4b68      	ldr	r3, [pc, #416]	; (801063c <ip4_input+0x27c>)
 801049c:	695b      	ldr	r3, [r3, #20]
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	2b7f      	cmp	r3, #127	; 0x7f
 80104a2:	d017      	beq.n	80104d4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80104a4:	4b66      	ldr	r3, [pc, #408]	; (8010640 <ip4_input+0x280>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	61bb      	str	r3, [r7, #24]
 80104aa:	e00e      	b.n	80104ca <ip4_input+0x10a>
          if (netif == inp) {
 80104ac:	69ba      	ldr	r2, [r7, #24]
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d006      	beq.n	80104c2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80104b4:	69b8      	ldr	r0, [r7, #24]
 80104b6:	f7ff ff59 	bl	801036c <ip4_input_accept>
 80104ba:	4603      	mov	r3, r0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d108      	bne.n	80104d2 <ip4_input+0x112>
 80104c0:	e000      	b.n	80104c4 <ip4_input+0x104>
            continue;
 80104c2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	61bb      	str	r3, [r7, #24]
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d1ed      	bne.n	80104ac <ip4_input+0xec>
 80104d0:	e000      	b.n	80104d4 <ip4_input+0x114>
            break;
 80104d2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80104d4:	69bb      	ldr	r3, [r7, #24]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d111      	bne.n	80104fe <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	7a5b      	ldrb	r3, [r3, #9]
 80104de:	2b11      	cmp	r3, #17
 80104e0:	d10d      	bne.n	80104fe <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80104e2:	8a7b      	ldrh	r3, [r7, #18]
 80104e4:	69fa      	ldr	r2, [r7, #28]
 80104e6:	4413      	add	r3, r2
 80104e8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	885b      	ldrh	r3, [r3, #2]
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80104f4:	d103      	bne.n	80104fe <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80104fa:	2300      	movs	r3, #0
 80104fc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d017      	beq.n	8010534 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8010504:	4b4d      	ldr	r3, [pc, #308]	; (801063c <ip4_input+0x27c>)
 8010506:	691b      	ldr	r3, [r3, #16]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d013      	beq.n	8010534 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801050c:	4b4b      	ldr	r3, [pc, #300]	; (801063c <ip4_input+0x27c>)
 801050e:	691b      	ldr	r3, [r3, #16]
 8010510:	6839      	ldr	r1, [r7, #0]
 8010512:	4618      	mov	r0, r3
 8010514:	f000 f96e 	bl	80107f4 <ip4_addr_isbroadcast_u32>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d105      	bne.n	801052a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801051e:	4b47      	ldr	r3, [pc, #284]	; (801063c <ip4_input+0x27c>)
 8010520:	691b      	ldr	r3, [r3, #16]
 8010522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010526:	2be0      	cmp	r3, #224	; 0xe0
 8010528:	d104      	bne.n	8010534 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7f5 fe46 	bl	80061bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8010530:	2300      	movs	r3, #0
 8010532:	e07e      	b.n	8010632 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8010534:	69bb      	ldr	r3, [r7, #24]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d104      	bne.n	8010544 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7f5 fe3e 	bl	80061bc <pbuf_free>
    return ERR_OK;
 8010540:	2300      	movs	r3, #0
 8010542:	e076      	b.n	8010632 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	88db      	ldrh	r3, [r3, #6]
 8010548:	b29b      	uxth	r3, r3
 801054a:	461a      	mov	r2, r3
 801054c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8010550:	4013      	ands	r3, r2
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00b      	beq.n	801056e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 fc92 	bl	8010e80 <ip4_reass>
 801055c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d101      	bne.n	8010568 <ip4_input+0x1a8>
      return ERR_OK;
 8010564:	2300      	movs	r3, #0
 8010566:	e064      	b.n	8010632 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801056e:	4a33      	ldr	r2, [pc, #204]	; (801063c <ip4_input+0x27c>)
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8010574:	4a31      	ldr	r2, [pc, #196]	; (801063c <ip4_input+0x27c>)
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801057a:	4a30      	ldr	r2, [pc, #192]	; (801063c <ip4_input+0x27c>)
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8010580:	69fb      	ldr	r3, [r7, #28]
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	f003 030f 	and.w	r3, r3, #15
 8010588:	b2db      	uxtb	r3, r3
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	b2db      	uxtb	r3, r3
 801058e:	b29a      	uxth	r2, r3
 8010590:	4b2a      	ldr	r3, [pc, #168]	; (801063c <ip4_input+0x27c>)
 8010592:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8010594:	8a7b      	ldrh	r3, [r7, #18]
 8010596:	4619      	mov	r1, r3
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f7f5 fd89 	bl	80060b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	7a5b      	ldrb	r3, [r3, #9]
 80105a2:	2b11      	cmp	r3, #17
 80105a4:	d006      	beq.n	80105b4 <ip4_input+0x1f4>
 80105a6:	2b11      	cmp	r3, #17
 80105a8:	dc13      	bgt.n	80105d2 <ip4_input+0x212>
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d00c      	beq.n	80105c8 <ip4_input+0x208>
 80105ae:	2b06      	cmp	r3, #6
 80105b0:	d005      	beq.n	80105be <ip4_input+0x1fe>
 80105b2:	e00e      	b.n	80105d2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80105b4:	6839      	ldr	r1, [r7, #0]
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7fc faea 	bl	800cb90 <udp_input>
        break;
 80105bc:	e026      	b.n	801060c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80105be:	6839      	ldr	r1, [r7, #0]
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7f7 fed3 	bl	800836c <tcp_input>
        break;
 80105c6:	e021      	b.n	801060c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80105c8:	6839      	ldr	r1, [r7, #0]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7ff fcd0 	bl	800ff70 <icmp_input>
        break;
 80105d0:	e01c      	b.n	801060c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80105d2:	4b1a      	ldr	r3, [pc, #104]	; (801063c <ip4_input+0x27c>)
 80105d4:	695b      	ldr	r3, [r3, #20]
 80105d6:	69b9      	ldr	r1, [r7, #24]
 80105d8:	4618      	mov	r0, r3
 80105da:	f000 f90b 	bl	80107f4 <ip4_addr_isbroadcast_u32>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d10f      	bne.n	8010604 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80105e4:	4b15      	ldr	r3, [pc, #84]	; (801063c <ip4_input+0x27c>)
 80105e6:	695b      	ldr	r3, [r3, #20]
 80105e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80105ec:	2be0      	cmp	r3, #224	; 0xe0
 80105ee:	d009      	beq.n	8010604 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80105f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80105f4:	4619      	mov	r1, r3
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f7f5 fdcd 	bl	8006196 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80105fc:	2102      	movs	r1, #2
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f7ff fdba 	bl	8010178 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f7f5 fdd9 	bl	80061bc <pbuf_free>
        break;
 801060a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801060c:	4b0b      	ldr	r3, [pc, #44]	; (801063c <ip4_input+0x27c>)
 801060e:	2200      	movs	r2, #0
 8010610:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8010612:	4b0a      	ldr	r3, [pc, #40]	; (801063c <ip4_input+0x27c>)
 8010614:	2200      	movs	r2, #0
 8010616:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8010618:	4b08      	ldr	r3, [pc, #32]	; (801063c <ip4_input+0x27c>)
 801061a:	2200      	movs	r2, #0
 801061c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801061e:	4b07      	ldr	r3, [pc, #28]	; (801063c <ip4_input+0x27c>)
 8010620:	2200      	movs	r2, #0
 8010622:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8010624:	4b05      	ldr	r3, [pc, #20]	; (801063c <ip4_input+0x27c>)
 8010626:	2200      	movs	r2, #0
 8010628:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801062a:	4b04      	ldr	r3, [pc, #16]	; (801063c <ip4_input+0x27c>)
 801062c:	2200      	movs	r2, #0
 801062e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8010630:	2300      	movs	r3, #0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3720      	adds	r7, #32
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	200051fc 	.word	0x200051fc
 8010640:	20008780 	.word	0x20008780

08010644 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b08a      	sub	sp, #40	; 0x28
 8010648:	af04      	add	r7, sp, #16
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	60b9      	str	r1, [r7, #8]
 801064e:	607a      	str	r2, [r7, #4]
 8010650:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d009      	beq.n	8010670 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d003      	beq.n	801066a <ip4_output_if+0x26>
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d102      	bne.n	8010670 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066c:	3304      	adds	r3, #4
 801066e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8010670:	78fa      	ldrb	r2, [r7, #3]
 8010672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010674:	9302      	str	r3, [sp, #8]
 8010676:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801067a:	9301      	str	r3, [sp, #4]
 801067c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010680:	9300      	str	r3, [sp, #0]
 8010682:	4613      	mov	r3, r2
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	6979      	ldr	r1, [r7, #20]
 8010688:	68f8      	ldr	r0, [r7, #12]
 801068a:	f000 f805 	bl	8010698 <ip4_output_if_src>
 801068e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8010690:	4618      	mov	r0, r3
 8010692:	3718      	adds	r7, #24
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b088      	sub	sp, #32
 801069c:	af00      	add	r7, sp, #0
 801069e:	60f8      	str	r0, [r7, #12]
 80106a0:	60b9      	str	r1, [r7, #8]
 80106a2:	607a      	str	r2, [r7, #4]
 80106a4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	7b9b      	ldrb	r3, [r3, #14]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d006      	beq.n	80106bc <ip4_output_if_src+0x24>
 80106ae:	4b4b      	ldr	r3, [pc, #300]	; (80107dc <ip4_output_if_src+0x144>)
 80106b0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80106b4:	494a      	ldr	r1, [pc, #296]	; (80107e0 <ip4_output_if_src+0x148>)
 80106b6:	484b      	ldr	r0, [pc, #300]	; (80107e4 <ip4_output_if_src+0x14c>)
 80106b8:	f001 f8f2 	bl	80118a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d060      	beq.n	8010784 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80106c2:	2314      	movs	r3, #20
 80106c4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80106c6:	2114      	movs	r1, #20
 80106c8:	68f8      	ldr	r0, [r7, #12]
 80106ca:	f7f5 fce1 	bl	8006090 <pbuf_add_header>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d002      	beq.n	80106da <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80106d4:	f06f 0301 	mvn.w	r3, #1
 80106d8:	e07c      	b.n	80107d4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	895b      	ldrh	r3, [r3, #10]
 80106e4:	2b13      	cmp	r3, #19
 80106e6:	d806      	bhi.n	80106f6 <ip4_output_if_src+0x5e>
 80106e8:	4b3c      	ldr	r3, [pc, #240]	; (80107dc <ip4_output_if_src+0x144>)
 80106ea:	f44f 7262 	mov.w	r2, #904	; 0x388
 80106ee:	493e      	ldr	r1, [pc, #248]	; (80107e8 <ip4_output_if_src+0x150>)
 80106f0:	483c      	ldr	r0, [pc, #240]	; (80107e4 <ip4_output_if_src+0x14c>)
 80106f2:	f001 f8d5 	bl	80118a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	78fa      	ldrb	r2, [r7, #3]
 80106fa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8010702:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801070c:	8b7b      	ldrh	r3, [r7, #26]
 801070e:	089b      	lsrs	r3, r3, #2
 8010710:	b29b      	uxth	r3, r3
 8010712:	b2db      	uxtb	r3, r3
 8010714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010718:	b2da      	uxtb	r2, r3
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801071e:	69fb      	ldr	r3, [r7, #28]
 8010720:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010724:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	891b      	ldrh	r3, [r3, #8]
 801072a:	4618      	mov	r0, r3
 801072c:	f7f4 f9dc 	bl	8004ae8 <lwip_htons>
 8010730:	4603      	mov	r3, r0
 8010732:	461a      	mov	r2, r3
 8010734:	69fb      	ldr	r3, [r7, #28]
 8010736:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	2200      	movs	r2, #0
 801073c:	719a      	strb	r2, [r3, #6]
 801073e:	2200      	movs	r2, #0
 8010740:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8010742:	4b2a      	ldr	r3, [pc, #168]	; (80107ec <ip4_output_if_src+0x154>)
 8010744:	881b      	ldrh	r3, [r3, #0]
 8010746:	4618      	mov	r0, r3
 8010748:	f7f4 f9ce 	bl	8004ae8 <lwip_htons>
 801074c:	4603      	mov	r3, r0
 801074e:	461a      	mov	r2, r3
 8010750:	69fb      	ldr	r3, [r7, #28]
 8010752:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8010754:	4b25      	ldr	r3, [pc, #148]	; (80107ec <ip4_output_if_src+0x154>)
 8010756:	881b      	ldrh	r3, [r3, #0]
 8010758:	3301      	adds	r3, #1
 801075a:	b29a      	uxth	r2, r3
 801075c:	4b23      	ldr	r3, [pc, #140]	; (80107ec <ip4_output_if_src+0x154>)
 801075e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d104      	bne.n	8010770 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8010766:	4b22      	ldr	r3, [pc, #136]	; (80107f0 <ip4_output_if_src+0x158>)
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	69fb      	ldr	r3, [r7, #28]
 801076c:	60da      	str	r2, [r3, #12]
 801076e:	e003      	b.n	8010778 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	2200      	movs	r2, #0
 801077c:	729a      	strb	r2, [r3, #10]
 801077e:	2200      	movs	r2, #0
 8010780:	72da      	strb	r2, [r3, #11]
 8010782:	e00f      	b.n	80107a4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	895b      	ldrh	r3, [r3, #10]
 8010788:	2b13      	cmp	r3, #19
 801078a:	d802      	bhi.n	8010792 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801078c:	f06f 0301 	mvn.w	r3, #1
 8010790:	e020      	b.n	80107d4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	685b      	ldr	r3, [r3, #4]
 8010796:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8010798:	69fb      	ldr	r3, [r7, #28]
 801079a:	691b      	ldr	r3, [r3, #16]
 801079c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801079e:	f107 0314 	add.w	r3, r7, #20
 80107a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80107a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d00c      	beq.n	80107c6 <ip4_output_if_src+0x12e>
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	891a      	ldrh	r2, [r3, #8]
 80107b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d906      	bls.n	80107c6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f000 fd53 	bl	8011268 <ip4_frag>
 80107c2:	4603      	mov	r3, r0
 80107c4:	e006      	b.n	80107d4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80107c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c8:	695b      	ldr	r3, [r3, #20]
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	68f9      	ldr	r1, [r7, #12]
 80107ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107d0:	4798      	blx	r3
 80107d2:	4603      	mov	r3, r0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3720      	adds	r7, #32
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	0801515c 	.word	0x0801515c
 80107e0:	08015190 	.word	0x08015190
 80107e4:	0801519c 	.word	0x0801519c
 80107e8:	080151c4 	.word	0x080151c4
 80107ec:	20008912 	.word	0x20008912
 80107f0:	080155b4 	.word	0x080155b4

080107f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010808:	d002      	beq.n	8010810 <ip4_addr_isbroadcast_u32+0x1c>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d101      	bne.n	8010814 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8010810:	2301      	movs	r3, #1
 8010812:	e02a      	b.n	801086a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8010814:	683b      	ldr	r3, [r7, #0]
 8010816:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801081a:	f003 0302 	and.w	r3, r3, #2
 801081e:	2b00      	cmp	r3, #0
 8010820:	d101      	bne.n	8010826 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8010822:	2300      	movs	r3, #0
 8010824:	e021      	b.n	801086a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	3304      	adds	r3, #4
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	429a      	cmp	r2, r3
 8010830:	d101      	bne.n	8010836 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8010832:	2300      	movs	r3, #0
 8010834:	e019      	b.n	801086a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8010836:	68fa      	ldr	r2, [r7, #12]
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	3304      	adds	r3, #4
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	405a      	eors	r2, r3
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	3308      	adds	r3, #8
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4013      	ands	r3, r2
 8010848:	2b00      	cmp	r3, #0
 801084a:	d10d      	bne.n	8010868 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	3308      	adds	r3, #8
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	43da      	mvns	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	3308      	adds	r3, #8
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8010860:	429a      	cmp	r2, r3
 8010862:	d101      	bne.n	8010868 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8010864:	2301      	movs	r3, #1
 8010866:	e000      	b.n	801086a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8010868:	2300      	movs	r3, #0
  }
}
 801086a:	4618      	mov	r0, r3
 801086c:	3714      	adds	r7, #20
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr
	...

08010878 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801087e:	2300      	movs	r3, #0
 8010880:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8010882:	4b12      	ldr	r3, [pc, #72]	; (80108cc <ip_reass_tmr+0x54>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8010888:	e018      	b.n	80108bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	7fdb      	ldrb	r3, [r3, #31]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d00b      	beq.n	80108aa <ip_reass_tmr+0x32>
      r->timer--;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	7fdb      	ldrb	r3, [r3, #31]
 8010896:	3b01      	subs	r3, #1
 8010898:	b2da      	uxtb	r2, r3
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	60fb      	str	r3, [r7, #12]
 80108a8:	e008      	b.n	80108bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80108b4:	68b9      	ldr	r1, [r7, #8]
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 f80a 	bl	80108d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d1e3      	bne.n	801088a <ip_reass_tmr+0x12>
    }
  }
}
 80108c2:	bf00      	nop
 80108c4:	bf00      	nop
 80108c6:	3710      	adds	r7, #16
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	20008914 	.word	0x20008914

080108d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b088      	sub	sp, #32
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80108da:	2300      	movs	r3, #0
 80108dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80108de:	683a      	ldr	r2, [r7, #0]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d105      	bne.n	80108f2 <ip_reass_free_complete_datagram+0x22>
 80108e6:	4b45      	ldr	r3, [pc, #276]	; (80109fc <ip_reass_free_complete_datagram+0x12c>)
 80108e8:	22ab      	movs	r2, #171	; 0xab
 80108ea:	4945      	ldr	r1, [pc, #276]	; (8010a00 <ip_reass_free_complete_datagram+0x130>)
 80108ec:	4845      	ldr	r0, [pc, #276]	; (8010a04 <ip_reass_free_complete_datagram+0x134>)
 80108ee:	f000 ffd7 	bl	80118a0 <iprintf>
  if (prev != NULL) {
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00a      	beq.n	801090e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	687a      	ldr	r2, [r7, #4]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d005      	beq.n	801090e <ip_reass_free_complete_datagram+0x3e>
 8010902:	4b3e      	ldr	r3, [pc, #248]	; (80109fc <ip_reass_free_complete_datagram+0x12c>)
 8010904:	22ad      	movs	r2, #173	; 0xad
 8010906:	4940      	ldr	r1, [pc, #256]	; (8010a08 <ip_reass_free_complete_datagram+0x138>)
 8010908:	483e      	ldr	r0, [pc, #248]	; (8010a04 <ip_reass_free_complete_datagram+0x134>)
 801090a:	f000 ffc9 	bl	80118a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	889b      	ldrh	r3, [r3, #4]
 801091a:	b29b      	uxth	r3, r3
 801091c:	2b00      	cmp	r3, #0
 801091e:	d12a      	bne.n	8010976 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8010926:	697b      	ldr	r3, [r7, #20]
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	6858      	ldr	r0, [r3, #4]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	3308      	adds	r3, #8
 8010936:	2214      	movs	r2, #20
 8010938:	4619      	mov	r1, r3
 801093a:	f001 f88c 	bl	8011a56 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801093e:	2101      	movs	r1, #1
 8010940:	69b8      	ldr	r0, [r7, #24]
 8010942:	f7ff fc29 	bl	8010198 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8010946:	69b8      	ldr	r0, [r7, #24]
 8010948:	f7f5 fcc0 	bl	80062cc <pbuf_clen>
 801094c:	4603      	mov	r3, r0
 801094e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010950:	8bfa      	ldrh	r2, [r7, #30]
 8010952:	8a7b      	ldrh	r3, [r7, #18]
 8010954:	4413      	add	r3, r2
 8010956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801095a:	db05      	blt.n	8010968 <ip_reass_free_complete_datagram+0x98>
 801095c:	4b27      	ldr	r3, [pc, #156]	; (80109fc <ip_reass_free_complete_datagram+0x12c>)
 801095e:	22bc      	movs	r2, #188	; 0xbc
 8010960:	492a      	ldr	r1, [pc, #168]	; (8010a0c <ip_reass_free_complete_datagram+0x13c>)
 8010962:	4828      	ldr	r0, [pc, #160]	; (8010a04 <ip_reass_free_complete_datagram+0x134>)
 8010964:	f000 ff9c 	bl	80118a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8010968:	8bfa      	ldrh	r2, [r7, #30]
 801096a:	8a7b      	ldrh	r3, [r7, #18]
 801096c:	4413      	add	r3, r2
 801096e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8010970:	69b8      	ldr	r0, [r7, #24]
 8010972:	f7f5 fc23 	bl	80061bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801097c:	e01f      	b.n	80109be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	617b      	str	r3, [r7, #20]
    pcur = p;
 8010984:	69bb      	ldr	r3, [r7, #24]
 8010986:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801098e:	68f8      	ldr	r0, [r7, #12]
 8010990:	f7f5 fc9c 	bl	80062cc <pbuf_clen>
 8010994:	4603      	mov	r3, r0
 8010996:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8010998:	8bfa      	ldrh	r2, [r7, #30]
 801099a:	8a7b      	ldrh	r3, [r7, #18]
 801099c:	4413      	add	r3, r2
 801099e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109a2:	db05      	blt.n	80109b0 <ip_reass_free_complete_datagram+0xe0>
 80109a4:	4b15      	ldr	r3, [pc, #84]	; (80109fc <ip_reass_free_complete_datagram+0x12c>)
 80109a6:	22cc      	movs	r2, #204	; 0xcc
 80109a8:	4918      	ldr	r1, [pc, #96]	; (8010a0c <ip_reass_free_complete_datagram+0x13c>)
 80109aa:	4816      	ldr	r0, [pc, #88]	; (8010a04 <ip_reass_free_complete_datagram+0x134>)
 80109ac:	f000 ff78 	bl	80118a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80109b0:	8bfa      	ldrh	r2, [r7, #30]
 80109b2:	8a7b      	ldrh	r3, [r7, #18]
 80109b4:	4413      	add	r3, r2
 80109b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80109b8:	68f8      	ldr	r0, [r7, #12]
 80109ba:	f7f5 fbff 	bl	80061bc <pbuf_free>
  while (p != NULL) {
 80109be:	69bb      	ldr	r3, [r7, #24]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d1dc      	bne.n	801097e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80109c4:	6839      	ldr	r1, [r7, #0]
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 f8c2 	bl	8010b50 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80109cc:	4b10      	ldr	r3, [pc, #64]	; (8010a10 <ip_reass_free_complete_datagram+0x140>)
 80109ce:	881b      	ldrh	r3, [r3, #0]
 80109d0:	8bfa      	ldrh	r2, [r7, #30]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d905      	bls.n	80109e2 <ip_reass_free_complete_datagram+0x112>
 80109d6:	4b09      	ldr	r3, [pc, #36]	; (80109fc <ip_reass_free_complete_datagram+0x12c>)
 80109d8:	22d2      	movs	r2, #210	; 0xd2
 80109da:	490e      	ldr	r1, [pc, #56]	; (8010a14 <ip_reass_free_complete_datagram+0x144>)
 80109dc:	4809      	ldr	r0, [pc, #36]	; (8010a04 <ip_reass_free_complete_datagram+0x134>)
 80109de:	f000 ff5f 	bl	80118a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80109e2:	4b0b      	ldr	r3, [pc, #44]	; (8010a10 <ip_reass_free_complete_datagram+0x140>)
 80109e4:	881a      	ldrh	r2, [r3, #0]
 80109e6:	8bfb      	ldrh	r3, [r7, #30]
 80109e8:	1ad3      	subs	r3, r2, r3
 80109ea:	b29a      	uxth	r2, r3
 80109ec:	4b08      	ldr	r3, [pc, #32]	; (8010a10 <ip_reass_free_complete_datagram+0x140>)
 80109ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80109f0:	8bfb      	ldrh	r3, [r7, #30]
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3720      	adds	r7, #32
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	080151f4 	.word	0x080151f4
 8010a00:	08015230 	.word	0x08015230
 8010a04:	0801523c 	.word	0x0801523c
 8010a08:	08015264 	.word	0x08015264
 8010a0c:	08015278 	.word	0x08015278
 8010a10:	20008918 	.word	0x20008918
 8010a14:	08015298 	.word	0x08015298

08010a18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b08a      	sub	sp, #40	; 0x28
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8010a22:	2300      	movs	r3, #0
 8010a24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8010a26:	2300      	movs	r3, #0
 8010a28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8010a2e:	2300      	movs	r3, #0
 8010a30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8010a32:	2300      	movs	r3, #0
 8010a34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8010a36:	4b28      	ldr	r3, [pc, #160]	; (8010ad8 <ip_reass_remove_oldest_datagram+0xc0>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010a3c:	e030      	b.n	8010aa0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8010a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a40:	695a      	ldr	r2, [r3, #20]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	68db      	ldr	r3, [r3, #12]
 8010a46:	429a      	cmp	r2, r3
 8010a48:	d10c      	bne.n	8010a64 <ip_reass_remove_oldest_datagram+0x4c>
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	699a      	ldr	r2, [r3, #24]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	691b      	ldr	r3, [r3, #16]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d106      	bne.n	8010a64 <ip_reass_remove_oldest_datagram+0x4c>
 8010a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a58:	899a      	ldrh	r2, [r3, #12]
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	889b      	ldrh	r3, [r3, #4]
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d014      	beq.n	8010a8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	3301      	adds	r3, #1
 8010a68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8010a6a:	6a3b      	ldr	r3, [r7, #32]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d104      	bne.n	8010a7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8010a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	61bb      	str	r3, [r7, #24]
 8010a78:	e009      	b.n	8010a8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7c:	7fda      	ldrb	r2, [r3, #31]
 8010a7e:	6a3b      	ldr	r3, [r7, #32]
 8010a80:	7fdb      	ldrb	r3, [r3, #31]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d803      	bhi.n	8010a8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8010a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8010a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d001      	beq.n	8010a9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8010a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8010a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1cb      	bne.n	8010a3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8010aa6:	6a3b      	ldr	r3, [r7, #32]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d008      	beq.n	8010abe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8010aac:	69b9      	ldr	r1, [r7, #24]
 8010aae:	6a38      	ldr	r0, [r7, #32]
 8010ab0:	f7ff ff0e 	bl	80108d0 <ip_reass_free_complete_datagram>
 8010ab4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010ab6:	697a      	ldr	r2, [r7, #20]
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	4413      	add	r3, r2
 8010abc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8010abe:	697a      	ldr	r2, [r7, #20]
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	da02      	bge.n	8010acc <ip_reass_remove_oldest_datagram+0xb4>
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	dcac      	bgt.n	8010a26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8010acc:	697b      	ldr	r3, [r7, #20]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3728      	adds	r7, #40	; 0x28
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	20008914 	.word	0x20008914

08010adc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010ae6:	2004      	movs	r0, #4
 8010ae8:	f7f4 fc76 	bl	80053d8 <memp_malloc>
 8010aec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d110      	bne.n	8010b16 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010af4:	6839      	ldr	r1, [r7, #0]
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f7ff ff8e 	bl	8010a18 <ip_reass_remove_oldest_datagram>
 8010afc:	4602      	mov	r2, r0
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	4293      	cmp	r3, r2
 8010b02:	dc03      	bgt.n	8010b0c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010b04:	2004      	movs	r0, #4
 8010b06:	f7f4 fc67 	bl	80053d8 <memp_malloc>
 8010b0a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d101      	bne.n	8010b16 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010b12:	2300      	movs	r3, #0
 8010b14:	e016      	b.n	8010b44 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010b16:	2220      	movs	r2, #32
 8010b18:	2100      	movs	r1, #0
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f000 ff25 	bl	801196a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	220f      	movs	r2, #15
 8010b24:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010b26:	4b09      	ldr	r3, [pc, #36]	; (8010b4c <ip_reass_enqueue_new_datagram+0x70>)
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8010b2e:	4a07      	ldr	r2, [pc, #28]	; (8010b4c <ip_reass_enqueue_new_datagram+0x70>)
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	3308      	adds	r3, #8
 8010b38:	2214      	movs	r2, #20
 8010b3a:	6879      	ldr	r1, [r7, #4]
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f000 ff8a 	bl	8011a56 <memcpy>
  return ipr;
 8010b42:	68fb      	ldr	r3, [r7, #12]
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}
 8010b4c:	20008914 	.word	0x20008914

08010b50 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b082      	sub	sp, #8
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
 8010b58:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8010b5a:	4b10      	ldr	r3, [pc, #64]	; (8010b9c <ip_reass_dequeue_datagram+0x4c>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	429a      	cmp	r2, r3
 8010b62:	d104      	bne.n	8010b6e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4a0c      	ldr	r2, [pc, #48]	; (8010b9c <ip_reass_dequeue_datagram+0x4c>)
 8010b6a:	6013      	str	r3, [r2, #0]
 8010b6c:	e00d      	b.n	8010b8a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d106      	bne.n	8010b82 <ip_reass_dequeue_datagram+0x32>
 8010b74:	4b0a      	ldr	r3, [pc, #40]	; (8010ba0 <ip_reass_dequeue_datagram+0x50>)
 8010b76:	f240 1245 	movw	r2, #325	; 0x145
 8010b7a:	490a      	ldr	r1, [pc, #40]	; (8010ba4 <ip_reass_dequeue_datagram+0x54>)
 8010b7c:	480a      	ldr	r0, [pc, #40]	; (8010ba8 <ip_reass_dequeue_datagram+0x58>)
 8010b7e:	f000 fe8f 	bl	80118a0 <iprintf>
    prev->next = ipr->next;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681a      	ldr	r2, [r3, #0]
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8010b8a:	6879      	ldr	r1, [r7, #4]
 8010b8c:	2004      	movs	r0, #4
 8010b8e:	f7f4 fc93 	bl	80054b8 <memp_free>
}
 8010b92:	bf00      	nop
 8010b94:	3708      	adds	r7, #8
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	20008914 	.word	0x20008914
 8010ba0:	080151f4 	.word	0x080151f4
 8010ba4:	080152bc 	.word	0x080152bc
 8010ba8:	0801523c 	.word	0x0801523c

08010bac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b08c      	sub	sp, #48	; 0x30
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	60f8      	str	r0, [r7, #12]
 8010bb4:	60b9      	str	r1, [r7, #8]
 8010bb6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	885b      	ldrh	r3, [r3, #2]
 8010bca:	b29b      	uxth	r3, r3
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7f3 ff8b 	bl	8004ae8 <lwip_htons>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	f003 030f 	and.w	r3, r3, #15
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010be4:	7e7b      	ldrb	r3, [r7, #25]
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	8b7a      	ldrh	r2, [r7, #26]
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d202      	bcs.n	8010bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010bee:	f04f 33ff 	mov.w	r3, #4294967295
 8010bf2:	e135      	b.n	8010e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010bf4:	7e7b      	ldrb	r3, [r7, #25]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	8b7a      	ldrh	r2, [r7, #26]
 8010bfa:	1ad3      	subs	r3, r2, r3
 8010bfc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8010bfe:	69fb      	ldr	r3, [r7, #28]
 8010c00:	88db      	ldrh	r3, [r3, #6]
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7f3 ff6f 	bl	8004ae8 <lwip_htons>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010c10:	b29b      	uxth	r3, r3
 8010c12:	00db      	lsls	r3, r3, #3
 8010c14:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8010c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c1e:	2200      	movs	r2, #0
 8010c20:	701a      	strb	r2, [r3, #0]
 8010c22:	2200      	movs	r2, #0
 8010c24:	705a      	strb	r2, [r3, #1]
 8010c26:	2200      	movs	r2, #0
 8010c28:	709a      	strb	r2, [r3, #2]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8010c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c30:	8afa      	ldrh	r2, [r7, #22]
 8010c32:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010c34:	8afa      	ldrh	r2, [r7, #22]
 8010c36:	8b7b      	ldrh	r3, [r7, #26]
 8010c38:	4413      	add	r3, r2
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c42:	88db      	ldrh	r3, [r3, #6]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	8afa      	ldrh	r2, [r7, #22]
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d902      	bls.n	8010c52 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8010c50:	e106      	b.n	8010e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	627b      	str	r3, [r7, #36]	; 0x24
 8010c58:	e068      	b.n	8010d2c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8010c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c62:	889b      	ldrh	r3, [r3, #4]
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	889b      	ldrh	r3, [r3, #4]
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d235      	bcs.n	8010cdc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8010c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c74:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8010c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d020      	beq.n	8010cbe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8010c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c7e:	889b      	ldrh	r3, [r3, #4]
 8010c80:	b29a      	uxth	r2, r3
 8010c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c84:	88db      	ldrh	r3, [r3, #6]
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	429a      	cmp	r2, r3
 8010c8a:	d307      	bcc.n	8010c9c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8010c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c8e:	88db      	ldrh	r3, [r3, #6]
 8010c90:	b29a      	uxth	r2, r3
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	889b      	ldrh	r3, [r3, #4]
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d902      	bls.n	8010ca2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010ca0:	e0de      	b.n	8010e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8010ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca4:	68ba      	ldr	r2, [r7, #8]
 8010ca6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8010ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010caa:	88db      	ldrh	r3, [r3, #6]
 8010cac:	b29a      	uxth	r2, r3
 8010cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb0:	889b      	ldrh	r3, [r3, #4]
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d03d      	beq.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8010cbc:	e03a      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8010cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc0:	88db      	ldrh	r3, [r3, #6]
 8010cc2:	b29a      	uxth	r2, r3
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	889b      	ldrh	r3, [r3, #4]
 8010cc8:	b29b      	uxth	r3, r3
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d902      	bls.n	8010cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010cce:	f04f 33ff 	mov.w	r3, #4294967295
 8010cd2:	e0c5      	b.n	8010e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	68ba      	ldr	r2, [r7, #8]
 8010cd8:	605a      	str	r2, [r3, #4]
      break;
 8010cda:	e02b      	b.n	8010d34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8010cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cde:	889b      	ldrh	r3, [r3, #4]
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	889b      	ldrh	r3, [r3, #4]
 8010ce6:	b29b      	uxth	r3, r3
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d102      	bne.n	8010cf2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010cec:	f04f 33ff 	mov.w	r3, #4294967295
 8010cf0:	e0b6      	b.n	8010e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf4:	889b      	ldrh	r3, [r3, #4]
 8010cf6:	b29a      	uxth	r2, r3
 8010cf8:	693b      	ldr	r3, [r7, #16]
 8010cfa:	88db      	ldrh	r3, [r3, #6]
 8010cfc:	b29b      	uxth	r3, r3
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d202      	bcs.n	8010d08 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010d02:	f04f 33ff 	mov.w	r3, #4294967295
 8010d06:	e0ab      	b.n	8010e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d009      	beq.n	8010d22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8010d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d10:	88db      	ldrh	r3, [r3, #6]
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	693b      	ldr	r3, [r7, #16]
 8010d16:	889b      	ldrh	r3, [r3, #4]
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d001      	beq.n	8010d22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d193      	bne.n	8010c5a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010d32:	e000      	b.n	8010d36 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010d34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d12d      	bne.n	8010d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8010d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d01c      	beq.n	8010d7c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d44:	88db      	ldrh	r3, [r3, #6]
 8010d46:	b29a      	uxth	r2, r3
 8010d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d4a:	889b      	ldrh	r3, [r3, #4]
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d906      	bls.n	8010d60 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8010d52:	4b45      	ldr	r3, [pc, #276]	; (8010e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d54:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8010d58:	4944      	ldr	r1, [pc, #272]	; (8010e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8010d5a:	4845      	ldr	r0, [pc, #276]	; (8010e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d5c:	f000 fda0 	bl	80118a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8010d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d62:	68ba      	ldr	r2, [r7, #8]
 8010d64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8010d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d68:	88db      	ldrh	r3, [r3, #6]
 8010d6a:	b29a      	uxth	r2, r3
 8010d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6e:	889b      	ldrh	r3, [r3, #4]
 8010d70:	b29b      	uxth	r3, r3
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d010      	beq.n	8010d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8010d76:	2300      	movs	r3, #0
 8010d78:	623b      	str	r3, [r7, #32]
 8010d7a:	e00d      	b.n	8010d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d006      	beq.n	8010d92 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8010d84:	4b38      	ldr	r3, [pc, #224]	; (8010e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010d86:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8010d8a:	493a      	ldr	r1, [pc, #232]	; (8010e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8010d8c:	4838      	ldr	r0, [pc, #224]	; (8010e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010d8e:	f000 fd87 	bl	80118a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	68ba      	ldr	r2, [r7, #8]
 8010d96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d105      	bne.n	8010daa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	7f9b      	ldrb	r3, [r3, #30]
 8010da2:	f003 0301 	and.w	r3, r3, #1
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d059      	beq.n	8010e5e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8010daa:	6a3b      	ldr	r3, [r7, #32]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d04f      	beq.n	8010e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d006      	beq.n	8010dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	685b      	ldr	r3, [r3, #4]
 8010dbe:	889b      	ldrh	r3, [r3, #4]
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d002      	beq.n	8010dcc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	623b      	str	r3, [r7, #32]
 8010dca:	e041      	b.n	8010e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8010dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010dd6:	e012      	b.n	8010dfe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8010dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de0:	88db      	ldrh	r3, [r3, #6]
 8010de2:	b29a      	uxth	r2, r3
 8010de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de6:	889b      	ldrh	r3, [r3, #4]
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d002      	beq.n	8010df4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8010dee:	2300      	movs	r3, #0
 8010df0:	623b      	str	r3, [r7, #32]
            break;
 8010df2:	e007      	b.n	8010e04 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d1e9      	bne.n	8010dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010e04:	6a3b      	ldr	r3, [r7, #32]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d022      	beq.n	8010e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d106      	bne.n	8010e20 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010e12:	4b15      	ldr	r3, [pc, #84]	; (8010e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010e14:	f240 12df 	movw	r2, #479	; 0x1df
 8010e18:	4917      	ldr	r1, [pc, #92]	; (8010e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010e1a:	4815      	ldr	r0, [pc, #84]	; (8010e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010e1c:	f000 fd40 	bl	80118a0 <iprintf>
          LWIP_ASSERT("sanity check",
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d106      	bne.n	8010e3a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8010e2c:	4b0e      	ldr	r3, [pc, #56]	; (8010e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010e2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010e32:	4911      	ldr	r1, [pc, #68]	; (8010e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010e34:	480e      	ldr	r0, [pc, #56]	; (8010e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010e36:	f000 fd33 	bl	80118a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8010e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d006      	beq.n	8010e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010e42:	4b09      	ldr	r3, [pc, #36]	; (8010e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010e44:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8010e48:	490c      	ldr	r1, [pc, #48]	; (8010e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8010e4a:	4809      	ldr	r0, [pc, #36]	; (8010e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010e4c:	f000 fd28 	bl	80118a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8010e50:	6a3b      	ldr	r3, [r7, #32]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	bf14      	ite	ne
 8010e56:	2301      	movne	r3, #1
 8010e58:	2300      	moveq	r3, #0
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	e000      	b.n	8010e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8010e5e:	2300      	movs	r3, #0
}
 8010e60:	4618      	mov	r0, r3
 8010e62:	3730      	adds	r7, #48	; 0x30
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	080151f4 	.word	0x080151f4
 8010e6c:	080152d8 	.word	0x080152d8
 8010e70:	0801523c 	.word	0x0801523c
 8010e74:	080152f8 	.word	0x080152f8
 8010e78:	08015330 	.word	0x08015330
 8010e7c:	08015340 	.word	0x08015340

08010e80 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b08e      	sub	sp, #56	; 0x38
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	685b      	ldr	r3, [r3, #4]
 8010e8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8010e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	f003 030f 	and.w	r3, r3, #15
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	b2db      	uxtb	r3, r3
 8010e9c:	2b14      	cmp	r3, #20
 8010e9e:	f040 8171 	bne.w	8011184 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8010ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ea4:	88db      	ldrh	r3, [r3, #6]
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7f3 fe1d 	bl	8004ae8 <lwip_htons>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	00db      	lsls	r3, r3, #3
 8010eb8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ebc:	885b      	ldrh	r3, [r3, #2]
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7f3 fe11 	bl	8004ae8 <lwip_htons>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8010eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ecc:	781b      	ldrb	r3, [r3, #0]
 8010ece:	f003 030f 	and.w	r3, r3, #15
 8010ed2:	b2db      	uxtb	r3, r3
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8010eda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	f0c0 8150 	bcc.w	8011188 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7f5 f9e9 	bl	80062cc <pbuf_clen>
 8010efa:	4603      	mov	r3, r0
 8010efc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8010efe:	4b8c      	ldr	r3, [pc, #560]	; (8011130 <ip4_reass+0x2b0>)
 8010f00:	881b      	ldrh	r3, [r3, #0]
 8010f02:	461a      	mov	r2, r3
 8010f04:	8c3b      	ldrh	r3, [r7, #32]
 8010f06:	4413      	add	r3, r2
 8010f08:	2b0a      	cmp	r3, #10
 8010f0a:	dd10      	ble.n	8010f2e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010f0c:	8c3b      	ldrh	r3, [r7, #32]
 8010f0e:	4619      	mov	r1, r3
 8010f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f12:	f7ff fd81 	bl	8010a18 <ip_reass_remove_oldest_datagram>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f000 8137 	beq.w	801118c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8010f1e:	4b84      	ldr	r3, [pc, #528]	; (8011130 <ip4_reass+0x2b0>)
 8010f20:	881b      	ldrh	r3, [r3, #0]
 8010f22:	461a      	mov	r2, r3
 8010f24:	8c3b      	ldrh	r3, [r7, #32]
 8010f26:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010f28:	2b0a      	cmp	r3, #10
 8010f2a:	f300 812f 	bgt.w	801118c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010f2e:	4b81      	ldr	r3, [pc, #516]	; (8011134 <ip4_reass+0x2b4>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	633b      	str	r3, [r7, #48]	; 0x30
 8010f34:	e015      	b.n	8010f62 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f38:	695a      	ldr	r2, [r3, #20]
 8010f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3c:	68db      	ldr	r3, [r3, #12]
 8010f3e:	429a      	cmp	r2, r3
 8010f40:	d10c      	bne.n	8010f5c <ip4_reass+0xdc>
 8010f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f44:	699a      	ldr	r2, [r3, #24]
 8010f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f48:	691b      	ldr	r3, [r3, #16]
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d106      	bne.n	8010f5c <ip4_reass+0xdc>
 8010f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f50:	899a      	ldrh	r2, [r3, #12]
 8010f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f54:	889b      	ldrh	r3, [r3, #4]
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d006      	beq.n	8010f6a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	633b      	str	r3, [r7, #48]	; 0x30
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d1e6      	bne.n	8010f36 <ip4_reass+0xb6>
 8010f68:	e000      	b.n	8010f6c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8010f6a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8010f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d109      	bne.n	8010f86 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8010f72:	8c3b      	ldrh	r3, [r7, #32]
 8010f74:	4619      	mov	r1, r3
 8010f76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f78:	f7ff fdb0 	bl	8010adc <ip_reass_enqueue_new_datagram>
 8010f7c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8010f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d11c      	bne.n	8010fbe <ip4_reass+0x13e>
      goto nullreturn;
 8010f84:	e105      	b.n	8011192 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f88:	88db      	ldrh	r3, [r3, #6]
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7f3 fdab 	bl	8004ae8 <lwip_htons>
 8010f92:	4603      	mov	r3, r0
 8010f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d110      	bne.n	8010fbe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8010f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9e:	89db      	ldrh	r3, [r3, #14]
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	f7f3 fda1 	bl	8004ae8 <lwip_htons>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d006      	beq.n	8010fbe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb2:	3308      	adds	r3, #8
 8010fb4:	2214      	movs	r2, #20
 8010fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f000 fd4c 	bl	8011a56 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8010fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc0:	88db      	ldrh	r3, [r3, #6]
 8010fc2:	b29b      	uxth	r3, r3
 8010fc4:	f003 0320 	and.w	r3, r3, #32
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	bf0c      	ite	eq
 8010fcc:	2301      	moveq	r3, #1
 8010fce:	2300      	movne	r3, #0
 8010fd0:	b2db      	uxtb	r3, r3
 8010fd2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010fd4:	69fb      	ldr	r3, [r7, #28]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d00e      	beq.n	8010ff8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8010fda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010fde:	4413      	add	r3, r2
 8010fe0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010fe2:	8b7a      	ldrh	r2, [r7, #26]
 8010fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	f0c0 80a0 	bcc.w	801112c <ip4_reass+0x2ac>
 8010fec:	8b7b      	ldrh	r3, [r7, #26]
 8010fee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	f200 809a 	bhi.w	801112c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010ff8:	69fa      	ldr	r2, [r7, #28]
 8010ffa:	6879      	ldr	r1, [r7, #4]
 8010ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ffe:	f7ff fdd5 	bl	8010bac <ip_reass_chain_frag_into_datagram_and_validate>
 8011002:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801100a:	f000 809b 	beq.w	8011144 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801100e:	4b48      	ldr	r3, [pc, #288]	; (8011130 <ip4_reass+0x2b0>)
 8011010:	881a      	ldrh	r2, [r3, #0]
 8011012:	8c3b      	ldrh	r3, [r7, #32]
 8011014:	4413      	add	r3, r2
 8011016:	b29a      	uxth	r2, r3
 8011018:	4b45      	ldr	r3, [pc, #276]	; (8011130 <ip4_reass+0x2b0>)
 801101a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801101c:	69fb      	ldr	r3, [r7, #28]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d00d      	beq.n	801103e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011022:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011024:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011026:	4413      	add	r3, r2
 8011028:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801102a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102c:	8a7a      	ldrh	r2, [r7, #18]
 801102e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011032:	7f9b      	ldrb	r3, [r3, #30]
 8011034:	f043 0301 	orr.w	r3, r3, #1
 8011038:	b2da      	uxtb	r2, r3
 801103a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801103c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	2b01      	cmp	r3, #1
 8011042:	d171      	bne.n	8011128 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011046:	8b9b      	ldrh	r3, [r3, #28]
 8011048:	3314      	adds	r3, #20
 801104a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801104c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	685b      	ldr	r3, [r3, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801105e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011060:	3308      	adds	r3, #8
 8011062:	2214      	movs	r2, #20
 8011064:	4619      	mov	r1, r3
 8011066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011068:	f000 fcf5 	bl	8011a56 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801106c:	8a3b      	ldrh	r3, [r7, #16]
 801106e:	4618      	mov	r0, r3
 8011070:	f7f3 fd3a 	bl	8004ae8 <lwip_htons>
 8011074:	4603      	mov	r3, r0
 8011076:	461a      	mov	r2, r3
 8011078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107e:	2200      	movs	r2, #0
 8011080:	719a      	strb	r2, [r3, #6]
 8011082:	2200      	movs	r2, #0
 8011084:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011088:	2200      	movs	r2, #0
 801108a:	729a      	strb	r2, [r3, #10]
 801108c:	2200      	movs	r2, #0
 801108e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011096:	e00d      	b.n	80110b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801109e:	2114      	movs	r1, #20
 80110a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80110a2:	f7f5 f805 	bl	80060b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80110a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f7f5 f949 	bl	8006340 <pbuf_cat>
      r = iprh->next_pbuf;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80110b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1ee      	bne.n	8011098 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80110ba:	4b1e      	ldr	r3, [pc, #120]	; (8011134 <ip4_reass+0x2b4>)
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110c0:	429a      	cmp	r2, r3
 80110c2:	d102      	bne.n	80110ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80110c4:	2300      	movs	r3, #0
 80110c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110c8:	e010      	b.n	80110ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80110ca:	4b1a      	ldr	r3, [pc, #104]	; (8011134 <ip4_reass+0x2b4>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110d0:	e007      	b.n	80110e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80110d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110d8:	429a      	cmp	r2, r3
 80110da:	d006      	beq.n	80110ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80110dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d1f4      	bne.n	80110d2 <ip4_reass+0x252>
 80110e8:	e000      	b.n	80110ec <ip4_reass+0x26c>
          break;
 80110ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80110ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110f0:	f7ff fd2e 	bl	8010b50 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7f5 f8e9 	bl	80062cc <pbuf_clen>
 80110fa:	4603      	mov	r3, r0
 80110fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80110fe:	4b0c      	ldr	r3, [pc, #48]	; (8011130 <ip4_reass+0x2b0>)
 8011100:	881b      	ldrh	r3, [r3, #0]
 8011102:	8c3a      	ldrh	r2, [r7, #32]
 8011104:	429a      	cmp	r2, r3
 8011106:	d906      	bls.n	8011116 <ip4_reass+0x296>
 8011108:	4b0b      	ldr	r3, [pc, #44]	; (8011138 <ip4_reass+0x2b8>)
 801110a:	f240 229b 	movw	r2, #667	; 0x29b
 801110e:	490b      	ldr	r1, [pc, #44]	; (801113c <ip4_reass+0x2bc>)
 8011110:	480b      	ldr	r0, [pc, #44]	; (8011140 <ip4_reass+0x2c0>)
 8011112:	f000 fbc5 	bl	80118a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011116:	4b06      	ldr	r3, [pc, #24]	; (8011130 <ip4_reass+0x2b0>)
 8011118:	881a      	ldrh	r2, [r3, #0]
 801111a:	8c3b      	ldrh	r3, [r7, #32]
 801111c:	1ad3      	subs	r3, r2, r3
 801111e:	b29a      	uxth	r2, r3
 8011120:	4b03      	ldr	r3, [pc, #12]	; (8011130 <ip4_reass+0x2b0>)
 8011122:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	e038      	b.n	801119a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011128:	2300      	movs	r3, #0
 801112a:	e036      	b.n	801119a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801112c:	bf00      	nop
 801112e:	e00a      	b.n	8011146 <ip4_reass+0x2c6>
 8011130:	20008918 	.word	0x20008918
 8011134:	20008914 	.word	0x20008914
 8011138:	080151f4 	.word	0x080151f4
 801113c:	08015364 	.word	0x08015364
 8011140:	0801523c 	.word	0x0801523c
    goto nullreturn_ipr;
 8011144:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011148:	2b00      	cmp	r3, #0
 801114a:	d106      	bne.n	801115a <ip4_reass+0x2da>
 801114c:	4b15      	ldr	r3, [pc, #84]	; (80111a4 <ip4_reass+0x324>)
 801114e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011152:	4915      	ldr	r1, [pc, #84]	; (80111a8 <ip4_reass+0x328>)
 8011154:	4815      	ldr	r0, [pc, #84]	; (80111ac <ip4_reass+0x32c>)
 8011156:	f000 fba3 	bl	80118a0 <iprintf>
  if (ipr->p == NULL) {
 801115a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d116      	bne.n	8011190 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011162:	4b13      	ldr	r3, [pc, #76]	; (80111b0 <ip4_reass+0x330>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011168:	429a      	cmp	r2, r3
 801116a:	d006      	beq.n	801117a <ip4_reass+0x2fa>
 801116c:	4b0d      	ldr	r3, [pc, #52]	; (80111a4 <ip4_reass+0x324>)
 801116e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011172:	4910      	ldr	r1, [pc, #64]	; (80111b4 <ip4_reass+0x334>)
 8011174:	480d      	ldr	r0, [pc, #52]	; (80111ac <ip4_reass+0x32c>)
 8011176:	f000 fb93 	bl	80118a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801117a:	2100      	movs	r1, #0
 801117c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801117e:	f7ff fce7 	bl	8010b50 <ip_reass_dequeue_datagram>
 8011182:	e006      	b.n	8011192 <ip4_reass+0x312>
    goto nullreturn;
 8011184:	bf00      	nop
 8011186:	e004      	b.n	8011192 <ip4_reass+0x312>
    goto nullreturn;
 8011188:	bf00      	nop
 801118a:	e002      	b.n	8011192 <ip4_reass+0x312>
      goto nullreturn;
 801118c:	bf00      	nop
 801118e:	e000      	b.n	8011192 <ip4_reass+0x312>
  }

nullreturn:
 8011190:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7f5 f812 	bl	80061bc <pbuf_free>
  return NULL;
 8011198:	2300      	movs	r3, #0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3738      	adds	r7, #56	; 0x38
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	080151f4 	.word	0x080151f4
 80111a8:	08015380 	.word	0x08015380
 80111ac:	0801523c 	.word	0x0801523c
 80111b0:	20008914 	.word	0x20008914
 80111b4:	0801538c 	.word	0x0801538c

080111b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80111bc:	2005      	movs	r0, #5
 80111be:	f7f4 f90b 	bl	80053d8 <memp_malloc>
 80111c2:	4603      	mov	r3, r0
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d106      	bne.n	80111e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80111d6:	4b07      	ldr	r3, [pc, #28]	; (80111f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80111d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80111dc:	4906      	ldr	r1, [pc, #24]	; (80111f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80111de:	4807      	ldr	r0, [pc, #28]	; (80111fc <ip_frag_free_pbuf_custom_ref+0x34>)
 80111e0:	f000 fb5e 	bl	80118a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80111e4:	6879      	ldr	r1, [r7, #4]
 80111e6:	2005      	movs	r0, #5
 80111e8:	f7f4 f966 	bl	80054b8 <memp_free>
}
 80111ec:	bf00      	nop
 80111ee:	3708      	adds	r7, #8
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}
 80111f4:	080151f4 	.word	0x080151f4
 80111f8:	080153ac 	.word	0x080153ac
 80111fc:	0801523c 	.word	0x0801523c

08011200 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d106      	bne.n	8011220 <ipfrag_free_pbuf_custom+0x20>
 8011212:	4b11      	ldr	r3, [pc, #68]	; (8011258 <ipfrag_free_pbuf_custom+0x58>)
 8011214:	f240 22ce 	movw	r2, #718	; 0x2ce
 8011218:	4910      	ldr	r1, [pc, #64]	; (801125c <ipfrag_free_pbuf_custom+0x5c>)
 801121a:	4811      	ldr	r0, [pc, #68]	; (8011260 <ipfrag_free_pbuf_custom+0x60>)
 801121c:	f000 fb40 	bl	80118a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011220:	68fa      	ldr	r2, [r7, #12]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	429a      	cmp	r2, r3
 8011226:	d006      	beq.n	8011236 <ipfrag_free_pbuf_custom+0x36>
 8011228:	4b0b      	ldr	r3, [pc, #44]	; (8011258 <ipfrag_free_pbuf_custom+0x58>)
 801122a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801122e:	490d      	ldr	r1, [pc, #52]	; (8011264 <ipfrag_free_pbuf_custom+0x64>)
 8011230:	480b      	ldr	r0, [pc, #44]	; (8011260 <ipfrag_free_pbuf_custom+0x60>)
 8011232:	f000 fb35 	bl	80118a0 <iprintf>
  if (pcr->original != NULL) {
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	695b      	ldr	r3, [r3, #20]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d004      	beq.n	8011248 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	695b      	ldr	r3, [r3, #20]
 8011242:	4618      	mov	r0, r3
 8011244:	f7f4 ffba 	bl	80061bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011248:	68f8      	ldr	r0, [r7, #12]
 801124a:	f7ff ffbd 	bl	80111c8 <ip_frag_free_pbuf_custom_ref>
}
 801124e:	bf00      	nop
 8011250:	3710      	adds	r7, #16
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	080151f4 	.word	0x080151f4
 801125c:	080153b8 	.word	0x080153b8
 8011260:	0801523c 	.word	0x0801523c
 8011264:	080153c4 	.word	0x080153c4

08011268 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b094      	sub	sp, #80	; 0x50
 801126c:	af02      	add	r7, sp, #8
 801126e:	60f8      	str	r0, [r7, #12]
 8011270:	60b9      	str	r1, [r7, #8]
 8011272:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011274:	2300      	movs	r3, #0
 8011276:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801127e:	3b14      	subs	r3, #20
 8011280:	2b00      	cmp	r3, #0
 8011282:	da00      	bge.n	8011286 <ip4_frag+0x1e>
 8011284:	3307      	adds	r3, #7
 8011286:	10db      	asrs	r3, r3, #3
 8011288:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801128a:	2314      	movs	r3, #20
 801128c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8011294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011296:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801129a:	781b      	ldrb	r3, [r3, #0]
 801129c:	f003 030f 	and.w	r3, r3, #15
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	2b14      	cmp	r3, #20
 80112a8:	d002      	beq.n	80112b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80112aa:	f06f 0305 	mvn.w	r3, #5
 80112ae:	e110      	b.n	80114d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	895b      	ldrh	r3, [r3, #10]
 80112b4:	2b13      	cmp	r3, #19
 80112b6:	d809      	bhi.n	80112cc <ip4_frag+0x64>
 80112b8:	4b88      	ldr	r3, [pc, #544]	; (80114dc <ip4_frag+0x274>)
 80112ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80112be:	4988      	ldr	r1, [pc, #544]	; (80114e0 <ip4_frag+0x278>)
 80112c0:	4888      	ldr	r0, [pc, #544]	; (80114e4 <ip4_frag+0x27c>)
 80112c2:	f000 faed 	bl	80118a0 <iprintf>
 80112c6:	f06f 0305 	mvn.w	r3, #5
 80112ca:	e102      	b.n	80114d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80112cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ce:	88db      	ldrh	r3, [r3, #6]
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7f3 fc08 	bl	8004ae8 <lwip_htons>
 80112d8:	4603      	mov	r3, r0
 80112da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80112dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80112e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80112e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80112ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	891b      	ldrh	r3, [r3, #8]
 80112f2:	3b14      	subs	r3, #20
 80112f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80112f8:	e0e1      	b.n	80114be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80112fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80112fc:	00db      	lsls	r3, r3, #3
 80112fe:	b29b      	uxth	r3, r3
 8011300:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011304:	4293      	cmp	r3, r2
 8011306:	bf28      	it	cs
 8011308:	4613      	movcs	r3, r2
 801130a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801130c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011310:	2114      	movs	r1, #20
 8011312:	200e      	movs	r0, #14
 8011314:	f7f4 fc6e 	bl	8005bf4 <pbuf_alloc>
 8011318:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801131c:	2b00      	cmp	r3, #0
 801131e:	f000 80d5 	beq.w	80114cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011324:	895b      	ldrh	r3, [r3, #10]
 8011326:	2b13      	cmp	r3, #19
 8011328:	d806      	bhi.n	8011338 <ip4_frag+0xd0>
 801132a:	4b6c      	ldr	r3, [pc, #432]	; (80114dc <ip4_frag+0x274>)
 801132c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8011330:	496d      	ldr	r1, [pc, #436]	; (80114e8 <ip4_frag+0x280>)
 8011332:	486c      	ldr	r0, [pc, #432]	; (80114e4 <ip4_frag+0x27c>)
 8011334:	f000 fab4 	bl	80118a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	2214      	movs	r2, #20
 801133e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011340:	4618      	mov	r0, r3
 8011342:	f000 fb88 	bl	8011a56 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801134c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801134e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8011352:	e064      	b.n	801141e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	895a      	ldrh	r2, [r3, #10]
 8011358:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801135a:	1ad3      	subs	r3, r2, r3
 801135c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	895b      	ldrh	r3, [r3, #10]
 8011362:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011364:	429a      	cmp	r2, r3
 8011366:	d906      	bls.n	8011376 <ip4_frag+0x10e>
 8011368:	4b5c      	ldr	r3, [pc, #368]	; (80114dc <ip4_frag+0x274>)
 801136a:	f240 322d 	movw	r2, #813	; 0x32d
 801136e:	495f      	ldr	r1, [pc, #380]	; (80114ec <ip4_frag+0x284>)
 8011370:	485c      	ldr	r0, [pc, #368]	; (80114e4 <ip4_frag+0x27c>)
 8011372:	f000 fa95 	bl	80118a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011376:	8bfa      	ldrh	r2, [r7, #30]
 8011378:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801137c:	4293      	cmp	r3, r2
 801137e:	bf28      	it	cs
 8011380:	4613      	movcs	r3, r2
 8011382:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011386:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801138a:	2b00      	cmp	r3, #0
 801138c:	d105      	bne.n	801139a <ip4_frag+0x132>
        poff = 0;
 801138e:	2300      	movs	r3, #0
 8011390:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	60fb      	str	r3, [r7, #12]
        continue;
 8011398:	e041      	b.n	801141e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801139a:	f7ff ff0d 	bl	80111b8 <ip_frag_alloc_pbuf_custom_ref>
 801139e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80113a0:	69bb      	ldr	r3, [r7, #24]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d103      	bne.n	80113ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 80113a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113a8:	f7f4 ff08 	bl	80061bc <pbuf_free>
        goto memerr;
 80113ac:	e08f      	b.n	80114ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80113ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80113b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80113b6:	4413      	add	r3, r2
 80113b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80113bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80113c0:	9201      	str	r2, [sp, #4]
 80113c2:	9300      	str	r3, [sp, #0]
 80113c4:	4603      	mov	r3, r0
 80113c6:	2241      	movs	r2, #65	; 0x41
 80113c8:	2000      	movs	r0, #0
 80113ca:	f7f4 fd3d 	bl	8005e48 <pbuf_alloced_custom>
 80113ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d106      	bne.n	80113e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80113d6:	69b8      	ldr	r0, [r7, #24]
 80113d8:	f7ff fef6 	bl	80111c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80113dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113de:	f7f4 feed 	bl	80061bc <pbuf_free>
        goto memerr;
 80113e2:	e074      	b.n	80114ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f7f4 ff89 	bl	80062fc <pbuf_ref>
      pcr->original = p;
 80113ea:	69bb      	ldr	r3, [r7, #24]
 80113ec:	68fa      	ldr	r2, [r7, #12]
 80113ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80113f0:	69bb      	ldr	r3, [r7, #24]
 80113f2:	4a3f      	ldr	r2, [pc, #252]	; (80114f0 <ip4_frag+0x288>)
 80113f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80113f6:	6979      	ldr	r1, [r7, #20]
 80113f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113fa:	f7f4 ffa1 	bl	8006340 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80113fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8011402:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801140c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011410:	2b00      	cmp	r3, #0
 8011412:	d004      	beq.n	801141e <ip4_frag+0x1b6>
        poff = 0;
 8011414:	2300      	movs	r3, #0
 8011416:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801141e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011422:	2b00      	cmp	r3, #0
 8011424:	d196      	bne.n	8011354 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011426:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011428:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801142c:	4413      	add	r3, r2
 801142e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011434:	f1a3 0213 	sub.w	r2, r3, #19
 8011438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801143c:	429a      	cmp	r2, r3
 801143e:	bfcc      	ite	gt
 8011440:	2301      	movgt	r3, #1
 8011442:	2300      	movle	r3, #0
 8011444:	b2db      	uxtb	r3, r3
 8011446:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8011448:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801144c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011450:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8011452:	6a3b      	ldr	r3, [r7, #32]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d002      	beq.n	801145e <ip4_frag+0x1f6>
 8011458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801145a:	2b00      	cmp	r3, #0
 801145c:	d003      	beq.n	8011466 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801145e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011460:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011464:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8011466:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011468:	4618      	mov	r0, r3
 801146a:	f7f3 fb3d 	bl	8004ae8 <lwip_htons>
 801146e:	4603      	mov	r3, r0
 8011470:	461a      	mov	r2, r3
 8011472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011474:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8011476:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011478:	3314      	adds	r3, #20
 801147a:	b29b      	uxth	r3, r3
 801147c:	4618      	mov	r0, r3
 801147e:	f7f3 fb33 	bl	8004ae8 <lwip_htons>
 8011482:	4603      	mov	r3, r0
 8011484:	461a      	mov	r2, r3
 8011486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011488:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801148a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801148c:	2200      	movs	r2, #0
 801148e:	729a      	strb	r2, [r3, #10]
 8011490:	2200      	movs	r2, #0
 8011492:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	695b      	ldr	r3, [r3, #20]
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801149c:	68b8      	ldr	r0, [r7, #8]
 801149e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80114a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114a2:	f7f4 fe8b 	bl	80061bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 80114a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80114aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80114b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80114b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80114b8:	4413      	add	r3, r2
 80114ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80114be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	f47f af19 	bne.w	80112fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80114c8:	2300      	movs	r3, #0
 80114ca:	e002      	b.n	80114d2 <ip4_frag+0x26a>
      goto memerr;
 80114cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80114ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3748      	adds	r7, #72	; 0x48
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}
 80114da:	bf00      	nop
 80114dc:	080151f4 	.word	0x080151f4
 80114e0:	080153d0 	.word	0x080153d0
 80114e4:	0801523c 	.word	0x0801523c
 80114e8:	080153ec 	.word	0x080153ec
 80114ec:	0801540c 	.word	0x0801540c
 80114f0:	08011201 	.word	0x08011201

080114f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b086      	sub	sp, #24
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80114fe:	230e      	movs	r3, #14
 8011500:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	895b      	ldrh	r3, [r3, #10]
 8011506:	2b0e      	cmp	r3, #14
 8011508:	d96e      	bls.n	80115e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	7bdb      	ldrb	r3, [r3, #15]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d106      	bne.n	8011520 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011518:	3301      	adds	r3, #1
 801151a:	b2da      	uxtb	r2, r3
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	7b1a      	ldrb	r2, [r3, #12]
 801152a:	7b5b      	ldrb	r3, [r3, #13]
 801152c:	021b      	lsls	r3, r3, #8
 801152e:	4313      	orrs	r3, r2
 8011530:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	f003 0301 	and.w	r3, r3, #1
 801153a:	2b00      	cmp	r3, #0
 801153c:	d023      	beq.n	8011586 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	781b      	ldrb	r3, [r3, #0]
 8011542:	2b01      	cmp	r3, #1
 8011544:	d10f      	bne.n	8011566 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	785b      	ldrb	r3, [r3, #1]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d11b      	bne.n	8011586 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8011552:	2b5e      	cmp	r3, #94	; 0x5e
 8011554:	d117      	bne.n	8011586 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	7b5b      	ldrb	r3, [r3, #13]
 801155a:	f043 0310 	orr.w	r3, r3, #16
 801155e:	b2da      	uxtb	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	735a      	strb	r2, [r3, #13]
 8011564:	e00f      	b.n	8011586 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8011566:	693b      	ldr	r3, [r7, #16]
 8011568:	2206      	movs	r2, #6
 801156a:	4928      	ldr	r1, [pc, #160]	; (801160c <ethernet_input+0x118>)
 801156c:	4618      	mov	r0, r3
 801156e:	f000 f9ec 	bl	801194a <memcmp>
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d106      	bne.n	8011586 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	7b5b      	ldrb	r3, [r3, #13]
 801157c:	f043 0308 	orr.w	r3, r3, #8
 8011580:	b2da      	uxtb	r2, r3
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8011586:	89fb      	ldrh	r3, [r7, #14]
 8011588:	2b08      	cmp	r3, #8
 801158a:	d003      	beq.n	8011594 <ethernet_input+0xa0>
 801158c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8011590:	d014      	beq.n	80115bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8011592:	e032      	b.n	80115fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801159a:	f003 0308 	and.w	r3, r3, #8
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d024      	beq.n	80115ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80115a2:	8afb      	ldrh	r3, [r7, #22]
 80115a4:	4619      	mov	r1, r3
 80115a6:	6878      	ldr	r0, [r7, #4]
 80115a8:	f7f4 fd82 	bl	80060b0 <pbuf_remove_header>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d11e      	bne.n	80115f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80115b2:	6839      	ldr	r1, [r7, #0]
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f7fe ff03 	bl	80103c0 <ip4_input>
      break;
 80115ba:	e013      	b.n	80115e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80115c2:	f003 0308 	and.w	r3, r3, #8
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d014      	beq.n	80115f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80115ca:	8afb      	ldrh	r3, [r7, #22]
 80115cc:	4619      	mov	r1, r3
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f7f4 fd6e 	bl	80060b0 <pbuf_remove_header>
 80115d4:	4603      	mov	r3, r0
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d10e      	bne.n	80115f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80115da:	6839      	ldr	r1, [r7, #0]
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f7fe f89f 	bl	800f720 <etharp_input>
      break;
 80115e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80115e4:	2300      	movs	r3, #0
 80115e6:	e00c      	b.n	8011602 <ethernet_input+0x10e>
    goto free_and_return;
 80115e8:	bf00      	nop
 80115ea:	e006      	b.n	80115fa <ethernet_input+0x106>
        goto free_and_return;
 80115ec:	bf00      	nop
 80115ee:	e004      	b.n	80115fa <ethernet_input+0x106>
        goto free_and_return;
 80115f0:	bf00      	nop
 80115f2:	e002      	b.n	80115fa <ethernet_input+0x106>
        goto free_and_return;
 80115f4:	bf00      	nop
 80115f6:	e000      	b.n	80115fa <ethernet_input+0x106>
        goto free_and_return;
 80115f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7f4 fdde 	bl	80061bc <pbuf_free>
  return ERR_OK;
 8011600:	2300      	movs	r3, #0
}
 8011602:	4618      	mov	r0, r3
 8011604:	3718      	adds	r7, #24
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	080155bc 	.word	0x080155bc

08011610 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8011610:	b580      	push	{r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	607a      	str	r2, [r7, #4]
 801161c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801161e:	8c3b      	ldrh	r3, [r7, #32]
 8011620:	4618      	mov	r0, r3
 8011622:	f7f3 fa61 	bl	8004ae8 <lwip_htons>
 8011626:	4603      	mov	r3, r0
 8011628:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801162a:	210e      	movs	r1, #14
 801162c:	68b8      	ldr	r0, [r7, #8]
 801162e:	f7f4 fd2f 	bl	8006090 <pbuf_add_header>
 8011632:	4603      	mov	r3, r0
 8011634:	2b00      	cmp	r3, #0
 8011636:	d125      	bne.n	8011684 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	8afa      	ldrh	r2, [r7, #22]
 8011642:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	2206      	movs	r2, #6
 8011648:	6839      	ldr	r1, [r7, #0]
 801164a:	4618      	mov	r0, r3
 801164c:	f000 fa03 	bl	8011a56 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	3306      	adds	r3, #6
 8011654:	2206      	movs	r2, #6
 8011656:	6879      	ldr	r1, [r7, #4]
 8011658:	4618      	mov	r0, r3
 801165a:	f000 f9fc 	bl	8011a56 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011664:	2b06      	cmp	r3, #6
 8011666:	d006      	beq.n	8011676 <ethernet_output+0x66>
 8011668:	4b0a      	ldr	r3, [pc, #40]	; (8011694 <ethernet_output+0x84>)
 801166a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801166e:	490a      	ldr	r1, [pc, #40]	; (8011698 <ethernet_output+0x88>)
 8011670:	480a      	ldr	r0, [pc, #40]	; (801169c <ethernet_output+0x8c>)
 8011672:	f000 f915 	bl	80118a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	699b      	ldr	r3, [r3, #24]
 801167a:	68b9      	ldr	r1, [r7, #8]
 801167c:	68f8      	ldr	r0, [r7, #12]
 801167e:	4798      	blx	r3
 8011680:	4603      	mov	r3, r0
 8011682:	e002      	b.n	801168a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8011684:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8011686:	f06f 0301 	mvn.w	r3, #1
}
 801168a:	4618      	mov	r0, r3
 801168c:	3718      	adds	r7, #24
 801168e:	46bd      	mov	sp, r7
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	0801541c 	.word	0x0801541c
 8011698:	08015454 	.word	0x08015454
 801169c:	08015488 	.word	0x08015488

080116a0 <rand>:
 80116a0:	4b16      	ldr	r3, [pc, #88]	; (80116fc <rand+0x5c>)
 80116a2:	b510      	push	{r4, lr}
 80116a4:	681c      	ldr	r4, [r3, #0]
 80116a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80116a8:	b9b3      	cbnz	r3, 80116d8 <rand+0x38>
 80116aa:	2018      	movs	r0, #24
 80116ac:	f000 fa4c 	bl	8011b48 <malloc>
 80116b0:	4602      	mov	r2, r0
 80116b2:	6320      	str	r0, [r4, #48]	; 0x30
 80116b4:	b920      	cbnz	r0, 80116c0 <rand+0x20>
 80116b6:	4b12      	ldr	r3, [pc, #72]	; (8011700 <rand+0x60>)
 80116b8:	4812      	ldr	r0, [pc, #72]	; (8011704 <rand+0x64>)
 80116ba:	2152      	movs	r1, #82	; 0x52
 80116bc:	f000 f9da 	bl	8011a74 <__assert_func>
 80116c0:	4911      	ldr	r1, [pc, #68]	; (8011708 <rand+0x68>)
 80116c2:	4b12      	ldr	r3, [pc, #72]	; (801170c <rand+0x6c>)
 80116c4:	e9c0 1300 	strd	r1, r3, [r0]
 80116c8:	4b11      	ldr	r3, [pc, #68]	; (8011710 <rand+0x70>)
 80116ca:	6083      	str	r3, [r0, #8]
 80116cc:	230b      	movs	r3, #11
 80116ce:	8183      	strh	r3, [r0, #12]
 80116d0:	2100      	movs	r1, #0
 80116d2:	2001      	movs	r0, #1
 80116d4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80116d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80116da:	480e      	ldr	r0, [pc, #56]	; (8011714 <rand+0x74>)
 80116dc:	690b      	ldr	r3, [r1, #16]
 80116de:	694c      	ldr	r4, [r1, #20]
 80116e0:	4a0d      	ldr	r2, [pc, #52]	; (8011718 <rand+0x78>)
 80116e2:	4358      	muls	r0, r3
 80116e4:	fb02 0004 	mla	r0, r2, r4, r0
 80116e8:	fba3 3202 	umull	r3, r2, r3, r2
 80116ec:	3301      	adds	r3, #1
 80116ee:	eb40 0002 	adc.w	r0, r0, r2
 80116f2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80116f6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80116fa:	bd10      	pop	{r4, pc}
 80116fc:	20000088 	.word	0x20000088
 8011700:	080155ca 	.word	0x080155ca
 8011704:	080155e1 	.word	0x080155e1
 8011708:	abcd330e 	.word	0xabcd330e
 801170c:	e66d1234 	.word	0xe66d1234
 8011710:	0005deec 	.word	0x0005deec
 8011714:	5851f42d 	.word	0x5851f42d
 8011718:	4c957f2d 	.word	0x4c957f2d

0801171c <std>:
 801171c:	2300      	movs	r3, #0
 801171e:	b510      	push	{r4, lr}
 8011720:	4604      	mov	r4, r0
 8011722:	e9c0 3300 	strd	r3, r3, [r0]
 8011726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801172a:	6083      	str	r3, [r0, #8]
 801172c:	8181      	strh	r1, [r0, #12]
 801172e:	6643      	str	r3, [r0, #100]	; 0x64
 8011730:	81c2      	strh	r2, [r0, #14]
 8011732:	6183      	str	r3, [r0, #24]
 8011734:	4619      	mov	r1, r3
 8011736:	2208      	movs	r2, #8
 8011738:	305c      	adds	r0, #92	; 0x5c
 801173a:	f000 f916 	bl	801196a <memset>
 801173e:	4b0d      	ldr	r3, [pc, #52]	; (8011774 <std+0x58>)
 8011740:	6263      	str	r3, [r4, #36]	; 0x24
 8011742:	4b0d      	ldr	r3, [pc, #52]	; (8011778 <std+0x5c>)
 8011744:	62a3      	str	r3, [r4, #40]	; 0x28
 8011746:	4b0d      	ldr	r3, [pc, #52]	; (801177c <std+0x60>)
 8011748:	62e3      	str	r3, [r4, #44]	; 0x2c
 801174a:	4b0d      	ldr	r3, [pc, #52]	; (8011780 <std+0x64>)
 801174c:	6323      	str	r3, [r4, #48]	; 0x30
 801174e:	4b0d      	ldr	r3, [pc, #52]	; (8011784 <std+0x68>)
 8011750:	6224      	str	r4, [r4, #32]
 8011752:	429c      	cmp	r4, r3
 8011754:	d006      	beq.n	8011764 <std+0x48>
 8011756:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801175a:	4294      	cmp	r4, r2
 801175c:	d002      	beq.n	8011764 <std+0x48>
 801175e:	33d0      	adds	r3, #208	; 0xd0
 8011760:	429c      	cmp	r4, r3
 8011762:	d105      	bne.n	8011770 <std+0x54>
 8011764:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801176c:	f000 b970 	b.w	8011a50 <__retarget_lock_init_recursive>
 8011770:	bd10      	pop	{r4, pc}
 8011772:	bf00      	nop
 8011774:	080118c5 	.word	0x080118c5
 8011778:	080118e7 	.word	0x080118e7
 801177c:	0801191f 	.word	0x0801191f
 8011780:	08011943 	.word	0x08011943
 8011784:	2000891c 	.word	0x2000891c

08011788 <stdio_exit_handler>:
 8011788:	4a02      	ldr	r2, [pc, #8]	; (8011794 <stdio_exit_handler+0xc>)
 801178a:	4903      	ldr	r1, [pc, #12]	; (8011798 <stdio_exit_handler+0x10>)
 801178c:	4803      	ldr	r0, [pc, #12]	; (801179c <stdio_exit_handler+0x14>)
 801178e:	f000 b869 	b.w	8011864 <_fwalk_sglue>
 8011792:	bf00      	nop
 8011794:	20000030 	.word	0x20000030
 8011798:	08012365 	.word	0x08012365
 801179c:	2000003c 	.word	0x2000003c

080117a0 <cleanup_stdio>:
 80117a0:	6841      	ldr	r1, [r0, #4]
 80117a2:	4b0c      	ldr	r3, [pc, #48]	; (80117d4 <cleanup_stdio+0x34>)
 80117a4:	4299      	cmp	r1, r3
 80117a6:	b510      	push	{r4, lr}
 80117a8:	4604      	mov	r4, r0
 80117aa:	d001      	beq.n	80117b0 <cleanup_stdio+0x10>
 80117ac:	f000 fdda 	bl	8012364 <_fflush_r>
 80117b0:	68a1      	ldr	r1, [r4, #8]
 80117b2:	4b09      	ldr	r3, [pc, #36]	; (80117d8 <cleanup_stdio+0x38>)
 80117b4:	4299      	cmp	r1, r3
 80117b6:	d002      	beq.n	80117be <cleanup_stdio+0x1e>
 80117b8:	4620      	mov	r0, r4
 80117ba:	f000 fdd3 	bl	8012364 <_fflush_r>
 80117be:	68e1      	ldr	r1, [r4, #12]
 80117c0:	4b06      	ldr	r3, [pc, #24]	; (80117dc <cleanup_stdio+0x3c>)
 80117c2:	4299      	cmp	r1, r3
 80117c4:	d004      	beq.n	80117d0 <cleanup_stdio+0x30>
 80117c6:	4620      	mov	r0, r4
 80117c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117cc:	f000 bdca 	b.w	8012364 <_fflush_r>
 80117d0:	bd10      	pop	{r4, pc}
 80117d2:	bf00      	nop
 80117d4:	2000891c 	.word	0x2000891c
 80117d8:	20008984 	.word	0x20008984
 80117dc:	200089ec 	.word	0x200089ec

080117e0 <global_stdio_init.part.0>:
 80117e0:	b510      	push	{r4, lr}
 80117e2:	4b0b      	ldr	r3, [pc, #44]	; (8011810 <global_stdio_init.part.0+0x30>)
 80117e4:	4c0b      	ldr	r4, [pc, #44]	; (8011814 <global_stdio_init.part.0+0x34>)
 80117e6:	4a0c      	ldr	r2, [pc, #48]	; (8011818 <global_stdio_init.part.0+0x38>)
 80117e8:	601a      	str	r2, [r3, #0]
 80117ea:	4620      	mov	r0, r4
 80117ec:	2200      	movs	r2, #0
 80117ee:	2104      	movs	r1, #4
 80117f0:	f7ff ff94 	bl	801171c <std>
 80117f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80117f8:	2201      	movs	r2, #1
 80117fa:	2109      	movs	r1, #9
 80117fc:	f7ff ff8e 	bl	801171c <std>
 8011800:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011804:	2202      	movs	r2, #2
 8011806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801180a:	2112      	movs	r1, #18
 801180c:	f7ff bf86 	b.w	801171c <std>
 8011810:	20008a54 	.word	0x20008a54
 8011814:	2000891c 	.word	0x2000891c
 8011818:	08011789 	.word	0x08011789

0801181c <__sfp_lock_acquire>:
 801181c:	4801      	ldr	r0, [pc, #4]	; (8011824 <__sfp_lock_acquire+0x8>)
 801181e:	f000 b918 	b.w	8011a52 <__retarget_lock_acquire_recursive>
 8011822:	bf00      	nop
 8011824:	20008a5d 	.word	0x20008a5d

08011828 <__sfp_lock_release>:
 8011828:	4801      	ldr	r0, [pc, #4]	; (8011830 <__sfp_lock_release+0x8>)
 801182a:	f000 b913 	b.w	8011a54 <__retarget_lock_release_recursive>
 801182e:	bf00      	nop
 8011830:	20008a5d 	.word	0x20008a5d

08011834 <__sinit>:
 8011834:	b510      	push	{r4, lr}
 8011836:	4604      	mov	r4, r0
 8011838:	f7ff fff0 	bl	801181c <__sfp_lock_acquire>
 801183c:	6a23      	ldr	r3, [r4, #32]
 801183e:	b11b      	cbz	r3, 8011848 <__sinit+0x14>
 8011840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011844:	f7ff bff0 	b.w	8011828 <__sfp_lock_release>
 8011848:	4b04      	ldr	r3, [pc, #16]	; (801185c <__sinit+0x28>)
 801184a:	6223      	str	r3, [r4, #32]
 801184c:	4b04      	ldr	r3, [pc, #16]	; (8011860 <__sinit+0x2c>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d1f5      	bne.n	8011840 <__sinit+0xc>
 8011854:	f7ff ffc4 	bl	80117e0 <global_stdio_init.part.0>
 8011858:	e7f2      	b.n	8011840 <__sinit+0xc>
 801185a:	bf00      	nop
 801185c:	080117a1 	.word	0x080117a1
 8011860:	20008a54 	.word	0x20008a54

08011864 <_fwalk_sglue>:
 8011864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011868:	4607      	mov	r7, r0
 801186a:	4688      	mov	r8, r1
 801186c:	4614      	mov	r4, r2
 801186e:	2600      	movs	r6, #0
 8011870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011874:	f1b9 0901 	subs.w	r9, r9, #1
 8011878:	d505      	bpl.n	8011886 <_fwalk_sglue+0x22>
 801187a:	6824      	ldr	r4, [r4, #0]
 801187c:	2c00      	cmp	r4, #0
 801187e:	d1f7      	bne.n	8011870 <_fwalk_sglue+0xc>
 8011880:	4630      	mov	r0, r6
 8011882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011886:	89ab      	ldrh	r3, [r5, #12]
 8011888:	2b01      	cmp	r3, #1
 801188a:	d907      	bls.n	801189c <_fwalk_sglue+0x38>
 801188c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011890:	3301      	adds	r3, #1
 8011892:	d003      	beq.n	801189c <_fwalk_sglue+0x38>
 8011894:	4629      	mov	r1, r5
 8011896:	4638      	mov	r0, r7
 8011898:	47c0      	blx	r8
 801189a:	4306      	orrs	r6, r0
 801189c:	3568      	adds	r5, #104	; 0x68
 801189e:	e7e9      	b.n	8011874 <_fwalk_sglue+0x10>

080118a0 <iprintf>:
 80118a0:	b40f      	push	{r0, r1, r2, r3}
 80118a2:	b507      	push	{r0, r1, r2, lr}
 80118a4:	4906      	ldr	r1, [pc, #24]	; (80118c0 <iprintf+0x20>)
 80118a6:	ab04      	add	r3, sp, #16
 80118a8:	6808      	ldr	r0, [r1, #0]
 80118aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ae:	6881      	ldr	r1, [r0, #8]
 80118b0:	9301      	str	r3, [sp, #4]
 80118b2:	f000 fa27 	bl	8011d04 <_vfiprintf_r>
 80118b6:	b003      	add	sp, #12
 80118b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80118bc:	b004      	add	sp, #16
 80118be:	4770      	bx	lr
 80118c0:	20000088 	.word	0x20000088

080118c4 <__sread>:
 80118c4:	b510      	push	{r4, lr}
 80118c6:	460c      	mov	r4, r1
 80118c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118cc:	f000 f878 	bl	80119c0 <_read_r>
 80118d0:	2800      	cmp	r0, #0
 80118d2:	bfab      	itete	ge
 80118d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80118d6:	89a3      	ldrhlt	r3, [r4, #12]
 80118d8:	181b      	addge	r3, r3, r0
 80118da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80118de:	bfac      	ite	ge
 80118e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80118e2:	81a3      	strhlt	r3, [r4, #12]
 80118e4:	bd10      	pop	{r4, pc}

080118e6 <__swrite>:
 80118e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118ea:	461f      	mov	r7, r3
 80118ec:	898b      	ldrh	r3, [r1, #12]
 80118ee:	05db      	lsls	r3, r3, #23
 80118f0:	4605      	mov	r5, r0
 80118f2:	460c      	mov	r4, r1
 80118f4:	4616      	mov	r6, r2
 80118f6:	d505      	bpl.n	8011904 <__swrite+0x1e>
 80118f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118fc:	2302      	movs	r3, #2
 80118fe:	2200      	movs	r2, #0
 8011900:	f000 f84c 	bl	801199c <_lseek_r>
 8011904:	89a3      	ldrh	r3, [r4, #12]
 8011906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801190a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801190e:	81a3      	strh	r3, [r4, #12]
 8011910:	4632      	mov	r2, r6
 8011912:	463b      	mov	r3, r7
 8011914:	4628      	mov	r0, r5
 8011916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801191a:	f000 b863 	b.w	80119e4 <_write_r>

0801191e <__sseek>:
 801191e:	b510      	push	{r4, lr}
 8011920:	460c      	mov	r4, r1
 8011922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011926:	f000 f839 	bl	801199c <_lseek_r>
 801192a:	1c43      	adds	r3, r0, #1
 801192c:	89a3      	ldrh	r3, [r4, #12]
 801192e:	bf15      	itete	ne
 8011930:	6560      	strne	r0, [r4, #84]	; 0x54
 8011932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801193a:	81a3      	strheq	r3, [r4, #12]
 801193c:	bf18      	it	ne
 801193e:	81a3      	strhne	r3, [r4, #12]
 8011940:	bd10      	pop	{r4, pc}

08011942 <__sclose>:
 8011942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011946:	f000 b819 	b.w	801197c <_close_r>

0801194a <memcmp>:
 801194a:	b510      	push	{r4, lr}
 801194c:	3901      	subs	r1, #1
 801194e:	4402      	add	r2, r0
 8011950:	4290      	cmp	r0, r2
 8011952:	d101      	bne.n	8011958 <memcmp+0xe>
 8011954:	2000      	movs	r0, #0
 8011956:	e005      	b.n	8011964 <memcmp+0x1a>
 8011958:	7803      	ldrb	r3, [r0, #0]
 801195a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801195e:	42a3      	cmp	r3, r4
 8011960:	d001      	beq.n	8011966 <memcmp+0x1c>
 8011962:	1b18      	subs	r0, r3, r4
 8011964:	bd10      	pop	{r4, pc}
 8011966:	3001      	adds	r0, #1
 8011968:	e7f2      	b.n	8011950 <memcmp+0x6>

0801196a <memset>:
 801196a:	4402      	add	r2, r0
 801196c:	4603      	mov	r3, r0
 801196e:	4293      	cmp	r3, r2
 8011970:	d100      	bne.n	8011974 <memset+0xa>
 8011972:	4770      	bx	lr
 8011974:	f803 1b01 	strb.w	r1, [r3], #1
 8011978:	e7f9      	b.n	801196e <memset+0x4>
	...

0801197c <_close_r>:
 801197c:	b538      	push	{r3, r4, r5, lr}
 801197e:	4d06      	ldr	r5, [pc, #24]	; (8011998 <_close_r+0x1c>)
 8011980:	2300      	movs	r3, #0
 8011982:	4604      	mov	r4, r0
 8011984:	4608      	mov	r0, r1
 8011986:	602b      	str	r3, [r5, #0]
 8011988:	f7ef f8db 	bl	8000b42 <_close>
 801198c:	1c43      	adds	r3, r0, #1
 801198e:	d102      	bne.n	8011996 <_close_r+0x1a>
 8011990:	682b      	ldr	r3, [r5, #0]
 8011992:	b103      	cbz	r3, 8011996 <_close_r+0x1a>
 8011994:	6023      	str	r3, [r4, #0]
 8011996:	bd38      	pop	{r3, r4, r5, pc}
 8011998:	20008a58 	.word	0x20008a58

0801199c <_lseek_r>:
 801199c:	b538      	push	{r3, r4, r5, lr}
 801199e:	4d07      	ldr	r5, [pc, #28]	; (80119bc <_lseek_r+0x20>)
 80119a0:	4604      	mov	r4, r0
 80119a2:	4608      	mov	r0, r1
 80119a4:	4611      	mov	r1, r2
 80119a6:	2200      	movs	r2, #0
 80119a8:	602a      	str	r2, [r5, #0]
 80119aa:	461a      	mov	r2, r3
 80119ac:	f7ef f8f0 	bl	8000b90 <_lseek>
 80119b0:	1c43      	adds	r3, r0, #1
 80119b2:	d102      	bne.n	80119ba <_lseek_r+0x1e>
 80119b4:	682b      	ldr	r3, [r5, #0]
 80119b6:	b103      	cbz	r3, 80119ba <_lseek_r+0x1e>
 80119b8:	6023      	str	r3, [r4, #0]
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
 80119bc:	20008a58 	.word	0x20008a58

080119c0 <_read_r>:
 80119c0:	b538      	push	{r3, r4, r5, lr}
 80119c2:	4d07      	ldr	r5, [pc, #28]	; (80119e0 <_read_r+0x20>)
 80119c4:	4604      	mov	r4, r0
 80119c6:	4608      	mov	r0, r1
 80119c8:	4611      	mov	r1, r2
 80119ca:	2200      	movs	r2, #0
 80119cc:	602a      	str	r2, [r5, #0]
 80119ce:	461a      	mov	r2, r3
 80119d0:	f7ef f87e 	bl	8000ad0 <_read>
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d102      	bne.n	80119de <_read_r+0x1e>
 80119d8:	682b      	ldr	r3, [r5, #0]
 80119da:	b103      	cbz	r3, 80119de <_read_r+0x1e>
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	20008a58 	.word	0x20008a58

080119e4 <_write_r>:
 80119e4:	b538      	push	{r3, r4, r5, lr}
 80119e6:	4d07      	ldr	r5, [pc, #28]	; (8011a04 <_write_r+0x20>)
 80119e8:	4604      	mov	r4, r0
 80119ea:	4608      	mov	r0, r1
 80119ec:	4611      	mov	r1, r2
 80119ee:	2200      	movs	r2, #0
 80119f0:	602a      	str	r2, [r5, #0]
 80119f2:	461a      	mov	r2, r3
 80119f4:	f7ef f889 	bl	8000b0a <_write>
 80119f8:	1c43      	adds	r3, r0, #1
 80119fa:	d102      	bne.n	8011a02 <_write_r+0x1e>
 80119fc:	682b      	ldr	r3, [r5, #0]
 80119fe:	b103      	cbz	r3, 8011a02 <_write_r+0x1e>
 8011a00:	6023      	str	r3, [r4, #0]
 8011a02:	bd38      	pop	{r3, r4, r5, pc}
 8011a04:	20008a58 	.word	0x20008a58

08011a08 <__libc_init_array>:
 8011a08:	b570      	push	{r4, r5, r6, lr}
 8011a0a:	4d0d      	ldr	r5, [pc, #52]	; (8011a40 <__libc_init_array+0x38>)
 8011a0c:	4c0d      	ldr	r4, [pc, #52]	; (8011a44 <__libc_init_array+0x3c>)
 8011a0e:	1b64      	subs	r4, r4, r5
 8011a10:	10a4      	asrs	r4, r4, #2
 8011a12:	2600      	movs	r6, #0
 8011a14:	42a6      	cmp	r6, r4
 8011a16:	d109      	bne.n	8011a2c <__libc_init_array+0x24>
 8011a18:	4d0b      	ldr	r5, [pc, #44]	; (8011a48 <__libc_init_array+0x40>)
 8011a1a:	4c0c      	ldr	r4, [pc, #48]	; (8011a4c <__libc_init_array+0x44>)
 8011a1c:	f000 fe52 	bl	80126c4 <_init>
 8011a20:	1b64      	subs	r4, r4, r5
 8011a22:	10a4      	asrs	r4, r4, #2
 8011a24:	2600      	movs	r6, #0
 8011a26:	42a6      	cmp	r6, r4
 8011a28:	d105      	bne.n	8011a36 <__libc_init_array+0x2e>
 8011a2a:	bd70      	pop	{r4, r5, r6, pc}
 8011a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a30:	4798      	blx	r3
 8011a32:	3601      	adds	r6, #1
 8011a34:	e7ee      	b.n	8011a14 <__libc_init_array+0xc>
 8011a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8011a3a:	4798      	blx	r3
 8011a3c:	3601      	adds	r6, #1
 8011a3e:	e7f2      	b.n	8011a26 <__libc_init_array+0x1e>
 8011a40:	080156b0 	.word	0x080156b0
 8011a44:	080156b0 	.word	0x080156b0
 8011a48:	080156b0 	.word	0x080156b0
 8011a4c:	080156b4 	.word	0x080156b4

08011a50 <__retarget_lock_init_recursive>:
 8011a50:	4770      	bx	lr

08011a52 <__retarget_lock_acquire_recursive>:
 8011a52:	4770      	bx	lr

08011a54 <__retarget_lock_release_recursive>:
 8011a54:	4770      	bx	lr

08011a56 <memcpy>:
 8011a56:	440a      	add	r2, r1
 8011a58:	4291      	cmp	r1, r2
 8011a5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8011a5e:	d100      	bne.n	8011a62 <memcpy+0xc>
 8011a60:	4770      	bx	lr
 8011a62:	b510      	push	{r4, lr}
 8011a64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011a6c:	4291      	cmp	r1, r2
 8011a6e:	d1f9      	bne.n	8011a64 <memcpy+0xe>
 8011a70:	bd10      	pop	{r4, pc}
	...

08011a74 <__assert_func>:
 8011a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a76:	4614      	mov	r4, r2
 8011a78:	461a      	mov	r2, r3
 8011a7a:	4b09      	ldr	r3, [pc, #36]	; (8011aa0 <__assert_func+0x2c>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	4605      	mov	r5, r0
 8011a80:	68d8      	ldr	r0, [r3, #12]
 8011a82:	b14c      	cbz	r4, 8011a98 <__assert_func+0x24>
 8011a84:	4b07      	ldr	r3, [pc, #28]	; (8011aa4 <__assert_func+0x30>)
 8011a86:	9100      	str	r1, [sp, #0]
 8011a88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a8c:	4906      	ldr	r1, [pc, #24]	; (8011aa8 <__assert_func+0x34>)
 8011a8e:	462b      	mov	r3, r5
 8011a90:	f000 fc90 	bl	80123b4 <fiprintf>
 8011a94:	f000 fd46 	bl	8012524 <abort>
 8011a98:	4b04      	ldr	r3, [pc, #16]	; (8011aac <__assert_func+0x38>)
 8011a9a:	461c      	mov	r4, r3
 8011a9c:	e7f3      	b.n	8011a86 <__assert_func+0x12>
 8011a9e:	bf00      	nop
 8011aa0:	20000088 	.word	0x20000088
 8011aa4:	08015639 	.word	0x08015639
 8011aa8:	08015646 	.word	0x08015646
 8011aac:	08015674 	.word	0x08015674

08011ab0 <_free_r>:
 8011ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ab2:	2900      	cmp	r1, #0
 8011ab4:	d044      	beq.n	8011b40 <_free_r+0x90>
 8011ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011aba:	9001      	str	r0, [sp, #4]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	f1a1 0404 	sub.w	r4, r1, #4
 8011ac2:	bfb8      	it	lt
 8011ac4:	18e4      	addlt	r4, r4, r3
 8011ac6:	f000 f8e7 	bl	8011c98 <__malloc_lock>
 8011aca:	4a1e      	ldr	r2, [pc, #120]	; (8011b44 <_free_r+0x94>)
 8011acc:	9801      	ldr	r0, [sp, #4]
 8011ace:	6813      	ldr	r3, [r2, #0]
 8011ad0:	b933      	cbnz	r3, 8011ae0 <_free_r+0x30>
 8011ad2:	6063      	str	r3, [r4, #4]
 8011ad4:	6014      	str	r4, [r2, #0]
 8011ad6:	b003      	add	sp, #12
 8011ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011adc:	f000 b8e2 	b.w	8011ca4 <__malloc_unlock>
 8011ae0:	42a3      	cmp	r3, r4
 8011ae2:	d908      	bls.n	8011af6 <_free_r+0x46>
 8011ae4:	6825      	ldr	r5, [r4, #0]
 8011ae6:	1961      	adds	r1, r4, r5
 8011ae8:	428b      	cmp	r3, r1
 8011aea:	bf01      	itttt	eq
 8011aec:	6819      	ldreq	r1, [r3, #0]
 8011aee:	685b      	ldreq	r3, [r3, #4]
 8011af0:	1949      	addeq	r1, r1, r5
 8011af2:	6021      	streq	r1, [r4, #0]
 8011af4:	e7ed      	b.n	8011ad2 <_free_r+0x22>
 8011af6:	461a      	mov	r2, r3
 8011af8:	685b      	ldr	r3, [r3, #4]
 8011afa:	b10b      	cbz	r3, 8011b00 <_free_r+0x50>
 8011afc:	42a3      	cmp	r3, r4
 8011afe:	d9fa      	bls.n	8011af6 <_free_r+0x46>
 8011b00:	6811      	ldr	r1, [r2, #0]
 8011b02:	1855      	adds	r5, r2, r1
 8011b04:	42a5      	cmp	r5, r4
 8011b06:	d10b      	bne.n	8011b20 <_free_r+0x70>
 8011b08:	6824      	ldr	r4, [r4, #0]
 8011b0a:	4421      	add	r1, r4
 8011b0c:	1854      	adds	r4, r2, r1
 8011b0e:	42a3      	cmp	r3, r4
 8011b10:	6011      	str	r1, [r2, #0]
 8011b12:	d1e0      	bne.n	8011ad6 <_free_r+0x26>
 8011b14:	681c      	ldr	r4, [r3, #0]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	6053      	str	r3, [r2, #4]
 8011b1a:	440c      	add	r4, r1
 8011b1c:	6014      	str	r4, [r2, #0]
 8011b1e:	e7da      	b.n	8011ad6 <_free_r+0x26>
 8011b20:	d902      	bls.n	8011b28 <_free_r+0x78>
 8011b22:	230c      	movs	r3, #12
 8011b24:	6003      	str	r3, [r0, #0]
 8011b26:	e7d6      	b.n	8011ad6 <_free_r+0x26>
 8011b28:	6825      	ldr	r5, [r4, #0]
 8011b2a:	1961      	adds	r1, r4, r5
 8011b2c:	428b      	cmp	r3, r1
 8011b2e:	bf04      	itt	eq
 8011b30:	6819      	ldreq	r1, [r3, #0]
 8011b32:	685b      	ldreq	r3, [r3, #4]
 8011b34:	6063      	str	r3, [r4, #4]
 8011b36:	bf04      	itt	eq
 8011b38:	1949      	addeq	r1, r1, r5
 8011b3a:	6021      	streq	r1, [r4, #0]
 8011b3c:	6054      	str	r4, [r2, #4]
 8011b3e:	e7ca      	b.n	8011ad6 <_free_r+0x26>
 8011b40:	b003      	add	sp, #12
 8011b42:	bd30      	pop	{r4, r5, pc}
 8011b44:	20008a60 	.word	0x20008a60

08011b48 <malloc>:
 8011b48:	4b02      	ldr	r3, [pc, #8]	; (8011b54 <malloc+0xc>)
 8011b4a:	4601      	mov	r1, r0
 8011b4c:	6818      	ldr	r0, [r3, #0]
 8011b4e:	f000 b823 	b.w	8011b98 <_malloc_r>
 8011b52:	bf00      	nop
 8011b54:	20000088 	.word	0x20000088

08011b58 <sbrk_aligned>:
 8011b58:	b570      	push	{r4, r5, r6, lr}
 8011b5a:	4e0e      	ldr	r6, [pc, #56]	; (8011b94 <sbrk_aligned+0x3c>)
 8011b5c:	460c      	mov	r4, r1
 8011b5e:	6831      	ldr	r1, [r6, #0]
 8011b60:	4605      	mov	r5, r0
 8011b62:	b911      	cbnz	r1, 8011b6a <sbrk_aligned+0x12>
 8011b64:	f000 fcce 	bl	8012504 <_sbrk_r>
 8011b68:	6030      	str	r0, [r6, #0]
 8011b6a:	4621      	mov	r1, r4
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	f000 fcc9 	bl	8012504 <_sbrk_r>
 8011b72:	1c43      	adds	r3, r0, #1
 8011b74:	d00a      	beq.n	8011b8c <sbrk_aligned+0x34>
 8011b76:	1cc4      	adds	r4, r0, #3
 8011b78:	f024 0403 	bic.w	r4, r4, #3
 8011b7c:	42a0      	cmp	r0, r4
 8011b7e:	d007      	beq.n	8011b90 <sbrk_aligned+0x38>
 8011b80:	1a21      	subs	r1, r4, r0
 8011b82:	4628      	mov	r0, r5
 8011b84:	f000 fcbe 	bl	8012504 <_sbrk_r>
 8011b88:	3001      	adds	r0, #1
 8011b8a:	d101      	bne.n	8011b90 <sbrk_aligned+0x38>
 8011b8c:	f04f 34ff 	mov.w	r4, #4294967295
 8011b90:	4620      	mov	r0, r4
 8011b92:	bd70      	pop	{r4, r5, r6, pc}
 8011b94:	20008a64 	.word	0x20008a64

08011b98 <_malloc_r>:
 8011b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b9c:	1ccd      	adds	r5, r1, #3
 8011b9e:	f025 0503 	bic.w	r5, r5, #3
 8011ba2:	3508      	adds	r5, #8
 8011ba4:	2d0c      	cmp	r5, #12
 8011ba6:	bf38      	it	cc
 8011ba8:	250c      	movcc	r5, #12
 8011baa:	2d00      	cmp	r5, #0
 8011bac:	4607      	mov	r7, r0
 8011bae:	db01      	blt.n	8011bb4 <_malloc_r+0x1c>
 8011bb0:	42a9      	cmp	r1, r5
 8011bb2:	d905      	bls.n	8011bc0 <_malloc_r+0x28>
 8011bb4:	230c      	movs	r3, #12
 8011bb6:	603b      	str	r3, [r7, #0]
 8011bb8:	2600      	movs	r6, #0
 8011bba:	4630      	mov	r0, r6
 8011bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011c94 <_malloc_r+0xfc>
 8011bc4:	f000 f868 	bl	8011c98 <__malloc_lock>
 8011bc8:	f8d8 3000 	ldr.w	r3, [r8]
 8011bcc:	461c      	mov	r4, r3
 8011bce:	bb5c      	cbnz	r4, 8011c28 <_malloc_r+0x90>
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	4638      	mov	r0, r7
 8011bd4:	f7ff ffc0 	bl	8011b58 <sbrk_aligned>
 8011bd8:	1c43      	adds	r3, r0, #1
 8011bda:	4604      	mov	r4, r0
 8011bdc:	d155      	bne.n	8011c8a <_malloc_r+0xf2>
 8011bde:	f8d8 4000 	ldr.w	r4, [r8]
 8011be2:	4626      	mov	r6, r4
 8011be4:	2e00      	cmp	r6, #0
 8011be6:	d145      	bne.n	8011c74 <_malloc_r+0xdc>
 8011be8:	2c00      	cmp	r4, #0
 8011bea:	d048      	beq.n	8011c7e <_malloc_r+0xe6>
 8011bec:	6823      	ldr	r3, [r4, #0]
 8011bee:	4631      	mov	r1, r6
 8011bf0:	4638      	mov	r0, r7
 8011bf2:	eb04 0903 	add.w	r9, r4, r3
 8011bf6:	f000 fc85 	bl	8012504 <_sbrk_r>
 8011bfa:	4581      	cmp	r9, r0
 8011bfc:	d13f      	bne.n	8011c7e <_malloc_r+0xe6>
 8011bfe:	6821      	ldr	r1, [r4, #0]
 8011c00:	1a6d      	subs	r5, r5, r1
 8011c02:	4629      	mov	r1, r5
 8011c04:	4638      	mov	r0, r7
 8011c06:	f7ff ffa7 	bl	8011b58 <sbrk_aligned>
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	d037      	beq.n	8011c7e <_malloc_r+0xe6>
 8011c0e:	6823      	ldr	r3, [r4, #0]
 8011c10:	442b      	add	r3, r5
 8011c12:	6023      	str	r3, [r4, #0]
 8011c14:	f8d8 3000 	ldr.w	r3, [r8]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d038      	beq.n	8011c8e <_malloc_r+0xf6>
 8011c1c:	685a      	ldr	r2, [r3, #4]
 8011c1e:	42a2      	cmp	r2, r4
 8011c20:	d12b      	bne.n	8011c7a <_malloc_r+0xe2>
 8011c22:	2200      	movs	r2, #0
 8011c24:	605a      	str	r2, [r3, #4]
 8011c26:	e00f      	b.n	8011c48 <_malloc_r+0xb0>
 8011c28:	6822      	ldr	r2, [r4, #0]
 8011c2a:	1b52      	subs	r2, r2, r5
 8011c2c:	d41f      	bmi.n	8011c6e <_malloc_r+0xd6>
 8011c2e:	2a0b      	cmp	r2, #11
 8011c30:	d917      	bls.n	8011c62 <_malloc_r+0xca>
 8011c32:	1961      	adds	r1, r4, r5
 8011c34:	42a3      	cmp	r3, r4
 8011c36:	6025      	str	r5, [r4, #0]
 8011c38:	bf18      	it	ne
 8011c3a:	6059      	strne	r1, [r3, #4]
 8011c3c:	6863      	ldr	r3, [r4, #4]
 8011c3e:	bf08      	it	eq
 8011c40:	f8c8 1000 	streq.w	r1, [r8]
 8011c44:	5162      	str	r2, [r4, r5]
 8011c46:	604b      	str	r3, [r1, #4]
 8011c48:	4638      	mov	r0, r7
 8011c4a:	f104 060b 	add.w	r6, r4, #11
 8011c4e:	f000 f829 	bl	8011ca4 <__malloc_unlock>
 8011c52:	f026 0607 	bic.w	r6, r6, #7
 8011c56:	1d23      	adds	r3, r4, #4
 8011c58:	1af2      	subs	r2, r6, r3
 8011c5a:	d0ae      	beq.n	8011bba <_malloc_r+0x22>
 8011c5c:	1b9b      	subs	r3, r3, r6
 8011c5e:	50a3      	str	r3, [r4, r2]
 8011c60:	e7ab      	b.n	8011bba <_malloc_r+0x22>
 8011c62:	42a3      	cmp	r3, r4
 8011c64:	6862      	ldr	r2, [r4, #4]
 8011c66:	d1dd      	bne.n	8011c24 <_malloc_r+0x8c>
 8011c68:	f8c8 2000 	str.w	r2, [r8]
 8011c6c:	e7ec      	b.n	8011c48 <_malloc_r+0xb0>
 8011c6e:	4623      	mov	r3, r4
 8011c70:	6864      	ldr	r4, [r4, #4]
 8011c72:	e7ac      	b.n	8011bce <_malloc_r+0x36>
 8011c74:	4634      	mov	r4, r6
 8011c76:	6876      	ldr	r6, [r6, #4]
 8011c78:	e7b4      	b.n	8011be4 <_malloc_r+0x4c>
 8011c7a:	4613      	mov	r3, r2
 8011c7c:	e7cc      	b.n	8011c18 <_malloc_r+0x80>
 8011c7e:	230c      	movs	r3, #12
 8011c80:	603b      	str	r3, [r7, #0]
 8011c82:	4638      	mov	r0, r7
 8011c84:	f000 f80e 	bl	8011ca4 <__malloc_unlock>
 8011c88:	e797      	b.n	8011bba <_malloc_r+0x22>
 8011c8a:	6025      	str	r5, [r4, #0]
 8011c8c:	e7dc      	b.n	8011c48 <_malloc_r+0xb0>
 8011c8e:	605b      	str	r3, [r3, #4]
 8011c90:	deff      	udf	#255	; 0xff
 8011c92:	bf00      	nop
 8011c94:	20008a60 	.word	0x20008a60

08011c98 <__malloc_lock>:
 8011c98:	4801      	ldr	r0, [pc, #4]	; (8011ca0 <__malloc_lock+0x8>)
 8011c9a:	f7ff beda 	b.w	8011a52 <__retarget_lock_acquire_recursive>
 8011c9e:	bf00      	nop
 8011ca0:	20008a5c 	.word	0x20008a5c

08011ca4 <__malloc_unlock>:
 8011ca4:	4801      	ldr	r0, [pc, #4]	; (8011cac <__malloc_unlock+0x8>)
 8011ca6:	f7ff bed5 	b.w	8011a54 <__retarget_lock_release_recursive>
 8011caa:	bf00      	nop
 8011cac:	20008a5c 	.word	0x20008a5c

08011cb0 <__sfputc_r>:
 8011cb0:	6893      	ldr	r3, [r2, #8]
 8011cb2:	3b01      	subs	r3, #1
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	b410      	push	{r4}
 8011cb8:	6093      	str	r3, [r2, #8]
 8011cba:	da08      	bge.n	8011cce <__sfputc_r+0x1e>
 8011cbc:	6994      	ldr	r4, [r2, #24]
 8011cbe:	42a3      	cmp	r3, r4
 8011cc0:	db01      	blt.n	8011cc6 <__sfputc_r+0x16>
 8011cc2:	290a      	cmp	r1, #10
 8011cc4:	d103      	bne.n	8011cce <__sfputc_r+0x1e>
 8011cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cca:	f000 bb85 	b.w	80123d8 <__swbuf_r>
 8011cce:	6813      	ldr	r3, [r2, #0]
 8011cd0:	1c58      	adds	r0, r3, #1
 8011cd2:	6010      	str	r0, [r2, #0]
 8011cd4:	7019      	strb	r1, [r3, #0]
 8011cd6:	4608      	mov	r0, r1
 8011cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <__sfputs_r>:
 8011cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce0:	4606      	mov	r6, r0
 8011ce2:	460f      	mov	r7, r1
 8011ce4:	4614      	mov	r4, r2
 8011ce6:	18d5      	adds	r5, r2, r3
 8011ce8:	42ac      	cmp	r4, r5
 8011cea:	d101      	bne.n	8011cf0 <__sfputs_r+0x12>
 8011cec:	2000      	movs	r0, #0
 8011cee:	e007      	b.n	8011d00 <__sfputs_r+0x22>
 8011cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cf4:	463a      	mov	r2, r7
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	f7ff ffda 	bl	8011cb0 <__sfputc_r>
 8011cfc:	1c43      	adds	r3, r0, #1
 8011cfe:	d1f3      	bne.n	8011ce8 <__sfputs_r+0xa>
 8011d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d04 <_vfiprintf_r>:
 8011d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d08:	460d      	mov	r5, r1
 8011d0a:	b09d      	sub	sp, #116	; 0x74
 8011d0c:	4614      	mov	r4, r2
 8011d0e:	4698      	mov	r8, r3
 8011d10:	4606      	mov	r6, r0
 8011d12:	b118      	cbz	r0, 8011d1c <_vfiprintf_r+0x18>
 8011d14:	6a03      	ldr	r3, [r0, #32]
 8011d16:	b90b      	cbnz	r3, 8011d1c <_vfiprintf_r+0x18>
 8011d18:	f7ff fd8c 	bl	8011834 <__sinit>
 8011d1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d1e:	07d9      	lsls	r1, r3, #31
 8011d20:	d405      	bmi.n	8011d2e <_vfiprintf_r+0x2a>
 8011d22:	89ab      	ldrh	r3, [r5, #12]
 8011d24:	059a      	lsls	r2, r3, #22
 8011d26:	d402      	bmi.n	8011d2e <_vfiprintf_r+0x2a>
 8011d28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d2a:	f7ff fe92 	bl	8011a52 <__retarget_lock_acquire_recursive>
 8011d2e:	89ab      	ldrh	r3, [r5, #12]
 8011d30:	071b      	lsls	r3, r3, #28
 8011d32:	d501      	bpl.n	8011d38 <_vfiprintf_r+0x34>
 8011d34:	692b      	ldr	r3, [r5, #16]
 8011d36:	b99b      	cbnz	r3, 8011d60 <_vfiprintf_r+0x5c>
 8011d38:	4629      	mov	r1, r5
 8011d3a:	4630      	mov	r0, r6
 8011d3c:	f000 fb8a 	bl	8012454 <__swsetup_r>
 8011d40:	b170      	cbz	r0, 8011d60 <_vfiprintf_r+0x5c>
 8011d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d44:	07dc      	lsls	r4, r3, #31
 8011d46:	d504      	bpl.n	8011d52 <_vfiprintf_r+0x4e>
 8011d48:	f04f 30ff 	mov.w	r0, #4294967295
 8011d4c:	b01d      	add	sp, #116	; 0x74
 8011d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d52:	89ab      	ldrh	r3, [r5, #12]
 8011d54:	0598      	lsls	r0, r3, #22
 8011d56:	d4f7      	bmi.n	8011d48 <_vfiprintf_r+0x44>
 8011d58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d5a:	f7ff fe7b 	bl	8011a54 <__retarget_lock_release_recursive>
 8011d5e:	e7f3      	b.n	8011d48 <_vfiprintf_r+0x44>
 8011d60:	2300      	movs	r3, #0
 8011d62:	9309      	str	r3, [sp, #36]	; 0x24
 8011d64:	2320      	movs	r3, #32
 8011d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011d6e:	2330      	movs	r3, #48	; 0x30
 8011d70:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011f24 <_vfiprintf_r+0x220>
 8011d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d78:	f04f 0901 	mov.w	r9, #1
 8011d7c:	4623      	mov	r3, r4
 8011d7e:	469a      	mov	sl, r3
 8011d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d84:	b10a      	cbz	r2, 8011d8a <_vfiprintf_r+0x86>
 8011d86:	2a25      	cmp	r2, #37	; 0x25
 8011d88:	d1f9      	bne.n	8011d7e <_vfiprintf_r+0x7a>
 8011d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8011d8e:	d00b      	beq.n	8011da8 <_vfiprintf_r+0xa4>
 8011d90:	465b      	mov	r3, fp
 8011d92:	4622      	mov	r2, r4
 8011d94:	4629      	mov	r1, r5
 8011d96:	4630      	mov	r0, r6
 8011d98:	f7ff ffa1 	bl	8011cde <__sfputs_r>
 8011d9c:	3001      	adds	r0, #1
 8011d9e:	f000 80a9 	beq.w	8011ef4 <_vfiprintf_r+0x1f0>
 8011da2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011da4:	445a      	add	r2, fp
 8011da6:	9209      	str	r2, [sp, #36]	; 0x24
 8011da8:	f89a 3000 	ldrb.w	r3, [sl]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	f000 80a1 	beq.w	8011ef4 <_vfiprintf_r+0x1f0>
 8011db2:	2300      	movs	r3, #0
 8011db4:	f04f 32ff 	mov.w	r2, #4294967295
 8011db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011dbc:	f10a 0a01 	add.w	sl, sl, #1
 8011dc0:	9304      	str	r3, [sp, #16]
 8011dc2:	9307      	str	r3, [sp, #28]
 8011dc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011dc8:	931a      	str	r3, [sp, #104]	; 0x68
 8011dca:	4654      	mov	r4, sl
 8011dcc:	2205      	movs	r2, #5
 8011dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dd2:	4854      	ldr	r0, [pc, #336]	; (8011f24 <_vfiprintf_r+0x220>)
 8011dd4:	f7ee fa0c 	bl	80001f0 <memchr>
 8011dd8:	9a04      	ldr	r2, [sp, #16]
 8011dda:	b9d8      	cbnz	r0, 8011e14 <_vfiprintf_r+0x110>
 8011ddc:	06d1      	lsls	r1, r2, #27
 8011dde:	bf44      	itt	mi
 8011de0:	2320      	movmi	r3, #32
 8011de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011de6:	0713      	lsls	r3, r2, #28
 8011de8:	bf44      	itt	mi
 8011dea:	232b      	movmi	r3, #43	; 0x2b
 8011dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011df0:	f89a 3000 	ldrb.w	r3, [sl]
 8011df4:	2b2a      	cmp	r3, #42	; 0x2a
 8011df6:	d015      	beq.n	8011e24 <_vfiprintf_r+0x120>
 8011df8:	9a07      	ldr	r2, [sp, #28]
 8011dfa:	4654      	mov	r4, sl
 8011dfc:	2000      	movs	r0, #0
 8011dfe:	f04f 0c0a 	mov.w	ip, #10
 8011e02:	4621      	mov	r1, r4
 8011e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011e08:	3b30      	subs	r3, #48	; 0x30
 8011e0a:	2b09      	cmp	r3, #9
 8011e0c:	d94d      	bls.n	8011eaa <_vfiprintf_r+0x1a6>
 8011e0e:	b1b0      	cbz	r0, 8011e3e <_vfiprintf_r+0x13a>
 8011e10:	9207      	str	r2, [sp, #28]
 8011e12:	e014      	b.n	8011e3e <_vfiprintf_r+0x13a>
 8011e14:	eba0 0308 	sub.w	r3, r0, r8
 8011e18:	fa09 f303 	lsl.w	r3, r9, r3
 8011e1c:	4313      	orrs	r3, r2
 8011e1e:	9304      	str	r3, [sp, #16]
 8011e20:	46a2      	mov	sl, r4
 8011e22:	e7d2      	b.n	8011dca <_vfiprintf_r+0xc6>
 8011e24:	9b03      	ldr	r3, [sp, #12]
 8011e26:	1d19      	adds	r1, r3, #4
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	9103      	str	r1, [sp, #12]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	bfbb      	ittet	lt
 8011e30:	425b      	neglt	r3, r3
 8011e32:	f042 0202 	orrlt.w	r2, r2, #2
 8011e36:	9307      	strge	r3, [sp, #28]
 8011e38:	9307      	strlt	r3, [sp, #28]
 8011e3a:	bfb8      	it	lt
 8011e3c:	9204      	strlt	r2, [sp, #16]
 8011e3e:	7823      	ldrb	r3, [r4, #0]
 8011e40:	2b2e      	cmp	r3, #46	; 0x2e
 8011e42:	d10c      	bne.n	8011e5e <_vfiprintf_r+0x15a>
 8011e44:	7863      	ldrb	r3, [r4, #1]
 8011e46:	2b2a      	cmp	r3, #42	; 0x2a
 8011e48:	d134      	bne.n	8011eb4 <_vfiprintf_r+0x1b0>
 8011e4a:	9b03      	ldr	r3, [sp, #12]
 8011e4c:	1d1a      	adds	r2, r3, #4
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	9203      	str	r2, [sp, #12]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	bfb8      	it	lt
 8011e56:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e5a:	3402      	adds	r4, #2
 8011e5c:	9305      	str	r3, [sp, #20]
 8011e5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011f34 <_vfiprintf_r+0x230>
 8011e62:	7821      	ldrb	r1, [r4, #0]
 8011e64:	2203      	movs	r2, #3
 8011e66:	4650      	mov	r0, sl
 8011e68:	f7ee f9c2 	bl	80001f0 <memchr>
 8011e6c:	b138      	cbz	r0, 8011e7e <_vfiprintf_r+0x17a>
 8011e6e:	9b04      	ldr	r3, [sp, #16]
 8011e70:	eba0 000a 	sub.w	r0, r0, sl
 8011e74:	2240      	movs	r2, #64	; 0x40
 8011e76:	4082      	lsls	r2, r0
 8011e78:	4313      	orrs	r3, r2
 8011e7a:	3401      	adds	r4, #1
 8011e7c:	9304      	str	r3, [sp, #16]
 8011e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e82:	4829      	ldr	r0, [pc, #164]	; (8011f28 <_vfiprintf_r+0x224>)
 8011e84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e88:	2206      	movs	r2, #6
 8011e8a:	f7ee f9b1 	bl	80001f0 <memchr>
 8011e8e:	2800      	cmp	r0, #0
 8011e90:	d03f      	beq.n	8011f12 <_vfiprintf_r+0x20e>
 8011e92:	4b26      	ldr	r3, [pc, #152]	; (8011f2c <_vfiprintf_r+0x228>)
 8011e94:	bb1b      	cbnz	r3, 8011ede <_vfiprintf_r+0x1da>
 8011e96:	9b03      	ldr	r3, [sp, #12]
 8011e98:	3307      	adds	r3, #7
 8011e9a:	f023 0307 	bic.w	r3, r3, #7
 8011e9e:	3308      	adds	r3, #8
 8011ea0:	9303      	str	r3, [sp, #12]
 8011ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ea4:	443b      	add	r3, r7
 8011ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ea8:	e768      	b.n	8011d7c <_vfiprintf_r+0x78>
 8011eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8011eae:	460c      	mov	r4, r1
 8011eb0:	2001      	movs	r0, #1
 8011eb2:	e7a6      	b.n	8011e02 <_vfiprintf_r+0xfe>
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	3401      	adds	r4, #1
 8011eb8:	9305      	str	r3, [sp, #20]
 8011eba:	4619      	mov	r1, r3
 8011ebc:	f04f 0c0a 	mov.w	ip, #10
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ec6:	3a30      	subs	r2, #48	; 0x30
 8011ec8:	2a09      	cmp	r2, #9
 8011eca:	d903      	bls.n	8011ed4 <_vfiprintf_r+0x1d0>
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d0c6      	beq.n	8011e5e <_vfiprintf_r+0x15a>
 8011ed0:	9105      	str	r1, [sp, #20]
 8011ed2:	e7c4      	b.n	8011e5e <_vfiprintf_r+0x15a>
 8011ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8011ed8:	4604      	mov	r4, r0
 8011eda:	2301      	movs	r3, #1
 8011edc:	e7f0      	b.n	8011ec0 <_vfiprintf_r+0x1bc>
 8011ede:	ab03      	add	r3, sp, #12
 8011ee0:	9300      	str	r3, [sp, #0]
 8011ee2:	462a      	mov	r2, r5
 8011ee4:	4b12      	ldr	r3, [pc, #72]	; (8011f30 <_vfiprintf_r+0x22c>)
 8011ee6:	a904      	add	r1, sp, #16
 8011ee8:	4630      	mov	r0, r6
 8011eea:	f3af 8000 	nop.w
 8011eee:	4607      	mov	r7, r0
 8011ef0:	1c78      	adds	r0, r7, #1
 8011ef2:	d1d6      	bne.n	8011ea2 <_vfiprintf_r+0x19e>
 8011ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ef6:	07d9      	lsls	r1, r3, #31
 8011ef8:	d405      	bmi.n	8011f06 <_vfiprintf_r+0x202>
 8011efa:	89ab      	ldrh	r3, [r5, #12]
 8011efc:	059a      	lsls	r2, r3, #22
 8011efe:	d402      	bmi.n	8011f06 <_vfiprintf_r+0x202>
 8011f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f02:	f7ff fda7 	bl	8011a54 <__retarget_lock_release_recursive>
 8011f06:	89ab      	ldrh	r3, [r5, #12]
 8011f08:	065b      	lsls	r3, r3, #25
 8011f0a:	f53f af1d 	bmi.w	8011d48 <_vfiprintf_r+0x44>
 8011f0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f10:	e71c      	b.n	8011d4c <_vfiprintf_r+0x48>
 8011f12:	ab03      	add	r3, sp, #12
 8011f14:	9300      	str	r3, [sp, #0]
 8011f16:	462a      	mov	r2, r5
 8011f18:	4b05      	ldr	r3, [pc, #20]	; (8011f30 <_vfiprintf_r+0x22c>)
 8011f1a:	a904      	add	r1, sp, #16
 8011f1c:	4630      	mov	r0, r6
 8011f1e:	f000 f879 	bl	8012014 <_printf_i>
 8011f22:	e7e4      	b.n	8011eee <_vfiprintf_r+0x1ea>
 8011f24:	08015675 	.word	0x08015675
 8011f28:	0801567f 	.word	0x0801567f
 8011f2c:	00000000 	.word	0x00000000
 8011f30:	08011cdf 	.word	0x08011cdf
 8011f34:	0801567b 	.word	0x0801567b

08011f38 <_printf_common>:
 8011f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f3c:	4616      	mov	r6, r2
 8011f3e:	4699      	mov	r9, r3
 8011f40:	688a      	ldr	r2, [r1, #8]
 8011f42:	690b      	ldr	r3, [r1, #16]
 8011f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011f48:	4293      	cmp	r3, r2
 8011f4a:	bfb8      	it	lt
 8011f4c:	4613      	movlt	r3, r2
 8011f4e:	6033      	str	r3, [r6, #0]
 8011f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011f54:	4607      	mov	r7, r0
 8011f56:	460c      	mov	r4, r1
 8011f58:	b10a      	cbz	r2, 8011f5e <_printf_common+0x26>
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	6033      	str	r3, [r6, #0]
 8011f5e:	6823      	ldr	r3, [r4, #0]
 8011f60:	0699      	lsls	r1, r3, #26
 8011f62:	bf42      	ittt	mi
 8011f64:	6833      	ldrmi	r3, [r6, #0]
 8011f66:	3302      	addmi	r3, #2
 8011f68:	6033      	strmi	r3, [r6, #0]
 8011f6a:	6825      	ldr	r5, [r4, #0]
 8011f6c:	f015 0506 	ands.w	r5, r5, #6
 8011f70:	d106      	bne.n	8011f80 <_printf_common+0x48>
 8011f72:	f104 0a19 	add.w	sl, r4, #25
 8011f76:	68e3      	ldr	r3, [r4, #12]
 8011f78:	6832      	ldr	r2, [r6, #0]
 8011f7a:	1a9b      	subs	r3, r3, r2
 8011f7c:	42ab      	cmp	r3, r5
 8011f7e:	dc26      	bgt.n	8011fce <_printf_common+0x96>
 8011f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f84:	1e13      	subs	r3, r2, #0
 8011f86:	6822      	ldr	r2, [r4, #0]
 8011f88:	bf18      	it	ne
 8011f8a:	2301      	movne	r3, #1
 8011f8c:	0692      	lsls	r2, r2, #26
 8011f8e:	d42b      	bmi.n	8011fe8 <_printf_common+0xb0>
 8011f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f94:	4649      	mov	r1, r9
 8011f96:	4638      	mov	r0, r7
 8011f98:	47c0      	blx	r8
 8011f9a:	3001      	adds	r0, #1
 8011f9c:	d01e      	beq.n	8011fdc <_printf_common+0xa4>
 8011f9e:	6823      	ldr	r3, [r4, #0]
 8011fa0:	6922      	ldr	r2, [r4, #16]
 8011fa2:	f003 0306 	and.w	r3, r3, #6
 8011fa6:	2b04      	cmp	r3, #4
 8011fa8:	bf02      	ittt	eq
 8011faa:	68e5      	ldreq	r5, [r4, #12]
 8011fac:	6833      	ldreq	r3, [r6, #0]
 8011fae:	1aed      	subeq	r5, r5, r3
 8011fb0:	68a3      	ldr	r3, [r4, #8]
 8011fb2:	bf0c      	ite	eq
 8011fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011fb8:	2500      	movne	r5, #0
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	bfc4      	itt	gt
 8011fbe:	1a9b      	subgt	r3, r3, r2
 8011fc0:	18ed      	addgt	r5, r5, r3
 8011fc2:	2600      	movs	r6, #0
 8011fc4:	341a      	adds	r4, #26
 8011fc6:	42b5      	cmp	r5, r6
 8011fc8:	d11a      	bne.n	8012000 <_printf_common+0xc8>
 8011fca:	2000      	movs	r0, #0
 8011fcc:	e008      	b.n	8011fe0 <_printf_common+0xa8>
 8011fce:	2301      	movs	r3, #1
 8011fd0:	4652      	mov	r2, sl
 8011fd2:	4649      	mov	r1, r9
 8011fd4:	4638      	mov	r0, r7
 8011fd6:	47c0      	blx	r8
 8011fd8:	3001      	adds	r0, #1
 8011fda:	d103      	bne.n	8011fe4 <_printf_common+0xac>
 8011fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011fe4:	3501      	adds	r5, #1
 8011fe6:	e7c6      	b.n	8011f76 <_printf_common+0x3e>
 8011fe8:	18e1      	adds	r1, r4, r3
 8011fea:	1c5a      	adds	r2, r3, #1
 8011fec:	2030      	movs	r0, #48	; 0x30
 8011fee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011ff2:	4422      	add	r2, r4
 8011ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011ffc:	3302      	adds	r3, #2
 8011ffe:	e7c7      	b.n	8011f90 <_printf_common+0x58>
 8012000:	2301      	movs	r3, #1
 8012002:	4622      	mov	r2, r4
 8012004:	4649      	mov	r1, r9
 8012006:	4638      	mov	r0, r7
 8012008:	47c0      	blx	r8
 801200a:	3001      	adds	r0, #1
 801200c:	d0e6      	beq.n	8011fdc <_printf_common+0xa4>
 801200e:	3601      	adds	r6, #1
 8012010:	e7d9      	b.n	8011fc6 <_printf_common+0x8e>
	...

08012014 <_printf_i>:
 8012014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012018:	7e0f      	ldrb	r7, [r1, #24]
 801201a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801201c:	2f78      	cmp	r7, #120	; 0x78
 801201e:	4691      	mov	r9, r2
 8012020:	4680      	mov	r8, r0
 8012022:	460c      	mov	r4, r1
 8012024:	469a      	mov	sl, r3
 8012026:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801202a:	d807      	bhi.n	801203c <_printf_i+0x28>
 801202c:	2f62      	cmp	r7, #98	; 0x62
 801202e:	d80a      	bhi.n	8012046 <_printf_i+0x32>
 8012030:	2f00      	cmp	r7, #0
 8012032:	f000 80d4 	beq.w	80121de <_printf_i+0x1ca>
 8012036:	2f58      	cmp	r7, #88	; 0x58
 8012038:	f000 80c0 	beq.w	80121bc <_printf_i+0x1a8>
 801203c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012044:	e03a      	b.n	80120bc <_printf_i+0xa8>
 8012046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801204a:	2b15      	cmp	r3, #21
 801204c:	d8f6      	bhi.n	801203c <_printf_i+0x28>
 801204e:	a101      	add	r1, pc, #4	; (adr r1, 8012054 <_printf_i+0x40>)
 8012050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012054:	080120ad 	.word	0x080120ad
 8012058:	080120c1 	.word	0x080120c1
 801205c:	0801203d 	.word	0x0801203d
 8012060:	0801203d 	.word	0x0801203d
 8012064:	0801203d 	.word	0x0801203d
 8012068:	0801203d 	.word	0x0801203d
 801206c:	080120c1 	.word	0x080120c1
 8012070:	0801203d 	.word	0x0801203d
 8012074:	0801203d 	.word	0x0801203d
 8012078:	0801203d 	.word	0x0801203d
 801207c:	0801203d 	.word	0x0801203d
 8012080:	080121c5 	.word	0x080121c5
 8012084:	080120ed 	.word	0x080120ed
 8012088:	0801217f 	.word	0x0801217f
 801208c:	0801203d 	.word	0x0801203d
 8012090:	0801203d 	.word	0x0801203d
 8012094:	080121e7 	.word	0x080121e7
 8012098:	0801203d 	.word	0x0801203d
 801209c:	080120ed 	.word	0x080120ed
 80120a0:	0801203d 	.word	0x0801203d
 80120a4:	0801203d 	.word	0x0801203d
 80120a8:	08012187 	.word	0x08012187
 80120ac:	682b      	ldr	r3, [r5, #0]
 80120ae:	1d1a      	adds	r2, r3, #4
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	602a      	str	r2, [r5, #0]
 80120b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80120bc:	2301      	movs	r3, #1
 80120be:	e09f      	b.n	8012200 <_printf_i+0x1ec>
 80120c0:	6820      	ldr	r0, [r4, #0]
 80120c2:	682b      	ldr	r3, [r5, #0]
 80120c4:	0607      	lsls	r7, r0, #24
 80120c6:	f103 0104 	add.w	r1, r3, #4
 80120ca:	6029      	str	r1, [r5, #0]
 80120cc:	d501      	bpl.n	80120d2 <_printf_i+0xbe>
 80120ce:	681e      	ldr	r6, [r3, #0]
 80120d0:	e003      	b.n	80120da <_printf_i+0xc6>
 80120d2:	0646      	lsls	r6, r0, #25
 80120d4:	d5fb      	bpl.n	80120ce <_printf_i+0xba>
 80120d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80120da:	2e00      	cmp	r6, #0
 80120dc:	da03      	bge.n	80120e6 <_printf_i+0xd2>
 80120de:	232d      	movs	r3, #45	; 0x2d
 80120e0:	4276      	negs	r6, r6
 80120e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120e6:	485a      	ldr	r0, [pc, #360]	; (8012250 <_printf_i+0x23c>)
 80120e8:	230a      	movs	r3, #10
 80120ea:	e012      	b.n	8012112 <_printf_i+0xfe>
 80120ec:	682b      	ldr	r3, [r5, #0]
 80120ee:	6820      	ldr	r0, [r4, #0]
 80120f0:	1d19      	adds	r1, r3, #4
 80120f2:	6029      	str	r1, [r5, #0]
 80120f4:	0605      	lsls	r5, r0, #24
 80120f6:	d501      	bpl.n	80120fc <_printf_i+0xe8>
 80120f8:	681e      	ldr	r6, [r3, #0]
 80120fa:	e002      	b.n	8012102 <_printf_i+0xee>
 80120fc:	0641      	lsls	r1, r0, #25
 80120fe:	d5fb      	bpl.n	80120f8 <_printf_i+0xe4>
 8012100:	881e      	ldrh	r6, [r3, #0]
 8012102:	4853      	ldr	r0, [pc, #332]	; (8012250 <_printf_i+0x23c>)
 8012104:	2f6f      	cmp	r7, #111	; 0x6f
 8012106:	bf0c      	ite	eq
 8012108:	2308      	moveq	r3, #8
 801210a:	230a      	movne	r3, #10
 801210c:	2100      	movs	r1, #0
 801210e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012112:	6865      	ldr	r5, [r4, #4]
 8012114:	60a5      	str	r5, [r4, #8]
 8012116:	2d00      	cmp	r5, #0
 8012118:	bfa2      	ittt	ge
 801211a:	6821      	ldrge	r1, [r4, #0]
 801211c:	f021 0104 	bicge.w	r1, r1, #4
 8012120:	6021      	strge	r1, [r4, #0]
 8012122:	b90e      	cbnz	r6, 8012128 <_printf_i+0x114>
 8012124:	2d00      	cmp	r5, #0
 8012126:	d04b      	beq.n	80121c0 <_printf_i+0x1ac>
 8012128:	4615      	mov	r5, r2
 801212a:	fbb6 f1f3 	udiv	r1, r6, r3
 801212e:	fb03 6711 	mls	r7, r3, r1, r6
 8012132:	5dc7      	ldrb	r7, [r0, r7]
 8012134:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012138:	4637      	mov	r7, r6
 801213a:	42bb      	cmp	r3, r7
 801213c:	460e      	mov	r6, r1
 801213e:	d9f4      	bls.n	801212a <_printf_i+0x116>
 8012140:	2b08      	cmp	r3, #8
 8012142:	d10b      	bne.n	801215c <_printf_i+0x148>
 8012144:	6823      	ldr	r3, [r4, #0]
 8012146:	07de      	lsls	r6, r3, #31
 8012148:	d508      	bpl.n	801215c <_printf_i+0x148>
 801214a:	6923      	ldr	r3, [r4, #16]
 801214c:	6861      	ldr	r1, [r4, #4]
 801214e:	4299      	cmp	r1, r3
 8012150:	bfde      	ittt	le
 8012152:	2330      	movle	r3, #48	; 0x30
 8012154:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012158:	f105 35ff 	addle.w	r5, r5, #4294967295
 801215c:	1b52      	subs	r2, r2, r5
 801215e:	6122      	str	r2, [r4, #16]
 8012160:	f8cd a000 	str.w	sl, [sp]
 8012164:	464b      	mov	r3, r9
 8012166:	aa03      	add	r2, sp, #12
 8012168:	4621      	mov	r1, r4
 801216a:	4640      	mov	r0, r8
 801216c:	f7ff fee4 	bl	8011f38 <_printf_common>
 8012170:	3001      	adds	r0, #1
 8012172:	d14a      	bne.n	801220a <_printf_i+0x1f6>
 8012174:	f04f 30ff 	mov.w	r0, #4294967295
 8012178:	b004      	add	sp, #16
 801217a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801217e:	6823      	ldr	r3, [r4, #0]
 8012180:	f043 0320 	orr.w	r3, r3, #32
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	4833      	ldr	r0, [pc, #204]	; (8012254 <_printf_i+0x240>)
 8012188:	2778      	movs	r7, #120	; 0x78
 801218a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801218e:	6823      	ldr	r3, [r4, #0]
 8012190:	6829      	ldr	r1, [r5, #0]
 8012192:	061f      	lsls	r7, r3, #24
 8012194:	f851 6b04 	ldr.w	r6, [r1], #4
 8012198:	d402      	bmi.n	80121a0 <_printf_i+0x18c>
 801219a:	065f      	lsls	r7, r3, #25
 801219c:	bf48      	it	mi
 801219e:	b2b6      	uxthmi	r6, r6
 80121a0:	07df      	lsls	r7, r3, #31
 80121a2:	bf48      	it	mi
 80121a4:	f043 0320 	orrmi.w	r3, r3, #32
 80121a8:	6029      	str	r1, [r5, #0]
 80121aa:	bf48      	it	mi
 80121ac:	6023      	strmi	r3, [r4, #0]
 80121ae:	b91e      	cbnz	r6, 80121b8 <_printf_i+0x1a4>
 80121b0:	6823      	ldr	r3, [r4, #0]
 80121b2:	f023 0320 	bic.w	r3, r3, #32
 80121b6:	6023      	str	r3, [r4, #0]
 80121b8:	2310      	movs	r3, #16
 80121ba:	e7a7      	b.n	801210c <_printf_i+0xf8>
 80121bc:	4824      	ldr	r0, [pc, #144]	; (8012250 <_printf_i+0x23c>)
 80121be:	e7e4      	b.n	801218a <_printf_i+0x176>
 80121c0:	4615      	mov	r5, r2
 80121c2:	e7bd      	b.n	8012140 <_printf_i+0x12c>
 80121c4:	682b      	ldr	r3, [r5, #0]
 80121c6:	6826      	ldr	r6, [r4, #0]
 80121c8:	6961      	ldr	r1, [r4, #20]
 80121ca:	1d18      	adds	r0, r3, #4
 80121cc:	6028      	str	r0, [r5, #0]
 80121ce:	0635      	lsls	r5, r6, #24
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	d501      	bpl.n	80121d8 <_printf_i+0x1c4>
 80121d4:	6019      	str	r1, [r3, #0]
 80121d6:	e002      	b.n	80121de <_printf_i+0x1ca>
 80121d8:	0670      	lsls	r0, r6, #25
 80121da:	d5fb      	bpl.n	80121d4 <_printf_i+0x1c0>
 80121dc:	8019      	strh	r1, [r3, #0]
 80121de:	2300      	movs	r3, #0
 80121e0:	6123      	str	r3, [r4, #16]
 80121e2:	4615      	mov	r5, r2
 80121e4:	e7bc      	b.n	8012160 <_printf_i+0x14c>
 80121e6:	682b      	ldr	r3, [r5, #0]
 80121e8:	1d1a      	adds	r2, r3, #4
 80121ea:	602a      	str	r2, [r5, #0]
 80121ec:	681d      	ldr	r5, [r3, #0]
 80121ee:	6862      	ldr	r2, [r4, #4]
 80121f0:	2100      	movs	r1, #0
 80121f2:	4628      	mov	r0, r5
 80121f4:	f7ed fffc 	bl	80001f0 <memchr>
 80121f8:	b108      	cbz	r0, 80121fe <_printf_i+0x1ea>
 80121fa:	1b40      	subs	r0, r0, r5
 80121fc:	6060      	str	r0, [r4, #4]
 80121fe:	6863      	ldr	r3, [r4, #4]
 8012200:	6123      	str	r3, [r4, #16]
 8012202:	2300      	movs	r3, #0
 8012204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012208:	e7aa      	b.n	8012160 <_printf_i+0x14c>
 801220a:	6923      	ldr	r3, [r4, #16]
 801220c:	462a      	mov	r2, r5
 801220e:	4649      	mov	r1, r9
 8012210:	4640      	mov	r0, r8
 8012212:	47d0      	blx	sl
 8012214:	3001      	adds	r0, #1
 8012216:	d0ad      	beq.n	8012174 <_printf_i+0x160>
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	079b      	lsls	r3, r3, #30
 801221c:	d413      	bmi.n	8012246 <_printf_i+0x232>
 801221e:	68e0      	ldr	r0, [r4, #12]
 8012220:	9b03      	ldr	r3, [sp, #12]
 8012222:	4298      	cmp	r0, r3
 8012224:	bfb8      	it	lt
 8012226:	4618      	movlt	r0, r3
 8012228:	e7a6      	b.n	8012178 <_printf_i+0x164>
 801222a:	2301      	movs	r3, #1
 801222c:	4632      	mov	r2, r6
 801222e:	4649      	mov	r1, r9
 8012230:	4640      	mov	r0, r8
 8012232:	47d0      	blx	sl
 8012234:	3001      	adds	r0, #1
 8012236:	d09d      	beq.n	8012174 <_printf_i+0x160>
 8012238:	3501      	adds	r5, #1
 801223a:	68e3      	ldr	r3, [r4, #12]
 801223c:	9903      	ldr	r1, [sp, #12]
 801223e:	1a5b      	subs	r3, r3, r1
 8012240:	42ab      	cmp	r3, r5
 8012242:	dcf2      	bgt.n	801222a <_printf_i+0x216>
 8012244:	e7eb      	b.n	801221e <_printf_i+0x20a>
 8012246:	2500      	movs	r5, #0
 8012248:	f104 0619 	add.w	r6, r4, #25
 801224c:	e7f5      	b.n	801223a <_printf_i+0x226>
 801224e:	bf00      	nop
 8012250:	08015686 	.word	0x08015686
 8012254:	08015697 	.word	0x08015697

08012258 <__sflush_r>:
 8012258:	898a      	ldrh	r2, [r1, #12]
 801225a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801225e:	4605      	mov	r5, r0
 8012260:	0710      	lsls	r0, r2, #28
 8012262:	460c      	mov	r4, r1
 8012264:	d458      	bmi.n	8012318 <__sflush_r+0xc0>
 8012266:	684b      	ldr	r3, [r1, #4]
 8012268:	2b00      	cmp	r3, #0
 801226a:	dc05      	bgt.n	8012278 <__sflush_r+0x20>
 801226c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801226e:	2b00      	cmp	r3, #0
 8012270:	dc02      	bgt.n	8012278 <__sflush_r+0x20>
 8012272:	2000      	movs	r0, #0
 8012274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801227a:	2e00      	cmp	r6, #0
 801227c:	d0f9      	beq.n	8012272 <__sflush_r+0x1a>
 801227e:	2300      	movs	r3, #0
 8012280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012284:	682f      	ldr	r7, [r5, #0]
 8012286:	6a21      	ldr	r1, [r4, #32]
 8012288:	602b      	str	r3, [r5, #0]
 801228a:	d032      	beq.n	80122f2 <__sflush_r+0x9a>
 801228c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801228e:	89a3      	ldrh	r3, [r4, #12]
 8012290:	075a      	lsls	r2, r3, #29
 8012292:	d505      	bpl.n	80122a0 <__sflush_r+0x48>
 8012294:	6863      	ldr	r3, [r4, #4]
 8012296:	1ac0      	subs	r0, r0, r3
 8012298:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801229a:	b10b      	cbz	r3, 80122a0 <__sflush_r+0x48>
 801229c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801229e:	1ac0      	subs	r0, r0, r3
 80122a0:	2300      	movs	r3, #0
 80122a2:	4602      	mov	r2, r0
 80122a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122a6:	6a21      	ldr	r1, [r4, #32]
 80122a8:	4628      	mov	r0, r5
 80122aa:	47b0      	blx	r6
 80122ac:	1c43      	adds	r3, r0, #1
 80122ae:	89a3      	ldrh	r3, [r4, #12]
 80122b0:	d106      	bne.n	80122c0 <__sflush_r+0x68>
 80122b2:	6829      	ldr	r1, [r5, #0]
 80122b4:	291d      	cmp	r1, #29
 80122b6:	d82b      	bhi.n	8012310 <__sflush_r+0xb8>
 80122b8:	4a29      	ldr	r2, [pc, #164]	; (8012360 <__sflush_r+0x108>)
 80122ba:	410a      	asrs	r2, r1
 80122bc:	07d6      	lsls	r6, r2, #31
 80122be:	d427      	bmi.n	8012310 <__sflush_r+0xb8>
 80122c0:	2200      	movs	r2, #0
 80122c2:	6062      	str	r2, [r4, #4]
 80122c4:	04d9      	lsls	r1, r3, #19
 80122c6:	6922      	ldr	r2, [r4, #16]
 80122c8:	6022      	str	r2, [r4, #0]
 80122ca:	d504      	bpl.n	80122d6 <__sflush_r+0x7e>
 80122cc:	1c42      	adds	r2, r0, #1
 80122ce:	d101      	bne.n	80122d4 <__sflush_r+0x7c>
 80122d0:	682b      	ldr	r3, [r5, #0]
 80122d2:	b903      	cbnz	r3, 80122d6 <__sflush_r+0x7e>
 80122d4:	6560      	str	r0, [r4, #84]	; 0x54
 80122d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122d8:	602f      	str	r7, [r5, #0]
 80122da:	2900      	cmp	r1, #0
 80122dc:	d0c9      	beq.n	8012272 <__sflush_r+0x1a>
 80122de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122e2:	4299      	cmp	r1, r3
 80122e4:	d002      	beq.n	80122ec <__sflush_r+0x94>
 80122e6:	4628      	mov	r0, r5
 80122e8:	f7ff fbe2 	bl	8011ab0 <_free_r>
 80122ec:	2000      	movs	r0, #0
 80122ee:	6360      	str	r0, [r4, #52]	; 0x34
 80122f0:	e7c0      	b.n	8012274 <__sflush_r+0x1c>
 80122f2:	2301      	movs	r3, #1
 80122f4:	4628      	mov	r0, r5
 80122f6:	47b0      	blx	r6
 80122f8:	1c41      	adds	r1, r0, #1
 80122fa:	d1c8      	bne.n	801228e <__sflush_r+0x36>
 80122fc:	682b      	ldr	r3, [r5, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d0c5      	beq.n	801228e <__sflush_r+0x36>
 8012302:	2b1d      	cmp	r3, #29
 8012304:	d001      	beq.n	801230a <__sflush_r+0xb2>
 8012306:	2b16      	cmp	r3, #22
 8012308:	d101      	bne.n	801230e <__sflush_r+0xb6>
 801230a:	602f      	str	r7, [r5, #0]
 801230c:	e7b1      	b.n	8012272 <__sflush_r+0x1a>
 801230e:	89a3      	ldrh	r3, [r4, #12]
 8012310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012314:	81a3      	strh	r3, [r4, #12]
 8012316:	e7ad      	b.n	8012274 <__sflush_r+0x1c>
 8012318:	690f      	ldr	r7, [r1, #16]
 801231a:	2f00      	cmp	r7, #0
 801231c:	d0a9      	beq.n	8012272 <__sflush_r+0x1a>
 801231e:	0793      	lsls	r3, r2, #30
 8012320:	680e      	ldr	r6, [r1, #0]
 8012322:	bf08      	it	eq
 8012324:	694b      	ldreq	r3, [r1, #20]
 8012326:	600f      	str	r7, [r1, #0]
 8012328:	bf18      	it	ne
 801232a:	2300      	movne	r3, #0
 801232c:	eba6 0807 	sub.w	r8, r6, r7
 8012330:	608b      	str	r3, [r1, #8]
 8012332:	f1b8 0f00 	cmp.w	r8, #0
 8012336:	dd9c      	ble.n	8012272 <__sflush_r+0x1a>
 8012338:	6a21      	ldr	r1, [r4, #32]
 801233a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801233c:	4643      	mov	r3, r8
 801233e:	463a      	mov	r2, r7
 8012340:	4628      	mov	r0, r5
 8012342:	47b0      	blx	r6
 8012344:	2800      	cmp	r0, #0
 8012346:	dc06      	bgt.n	8012356 <__sflush_r+0xfe>
 8012348:	89a3      	ldrh	r3, [r4, #12]
 801234a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801234e:	81a3      	strh	r3, [r4, #12]
 8012350:	f04f 30ff 	mov.w	r0, #4294967295
 8012354:	e78e      	b.n	8012274 <__sflush_r+0x1c>
 8012356:	4407      	add	r7, r0
 8012358:	eba8 0800 	sub.w	r8, r8, r0
 801235c:	e7e9      	b.n	8012332 <__sflush_r+0xda>
 801235e:	bf00      	nop
 8012360:	dfbffffe 	.word	0xdfbffffe

08012364 <_fflush_r>:
 8012364:	b538      	push	{r3, r4, r5, lr}
 8012366:	690b      	ldr	r3, [r1, #16]
 8012368:	4605      	mov	r5, r0
 801236a:	460c      	mov	r4, r1
 801236c:	b913      	cbnz	r3, 8012374 <_fflush_r+0x10>
 801236e:	2500      	movs	r5, #0
 8012370:	4628      	mov	r0, r5
 8012372:	bd38      	pop	{r3, r4, r5, pc}
 8012374:	b118      	cbz	r0, 801237e <_fflush_r+0x1a>
 8012376:	6a03      	ldr	r3, [r0, #32]
 8012378:	b90b      	cbnz	r3, 801237e <_fflush_r+0x1a>
 801237a:	f7ff fa5b 	bl	8011834 <__sinit>
 801237e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d0f3      	beq.n	801236e <_fflush_r+0xa>
 8012386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012388:	07d0      	lsls	r0, r2, #31
 801238a:	d404      	bmi.n	8012396 <_fflush_r+0x32>
 801238c:	0599      	lsls	r1, r3, #22
 801238e:	d402      	bmi.n	8012396 <_fflush_r+0x32>
 8012390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012392:	f7ff fb5e 	bl	8011a52 <__retarget_lock_acquire_recursive>
 8012396:	4628      	mov	r0, r5
 8012398:	4621      	mov	r1, r4
 801239a:	f7ff ff5d 	bl	8012258 <__sflush_r>
 801239e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123a0:	07da      	lsls	r2, r3, #31
 80123a2:	4605      	mov	r5, r0
 80123a4:	d4e4      	bmi.n	8012370 <_fflush_r+0xc>
 80123a6:	89a3      	ldrh	r3, [r4, #12]
 80123a8:	059b      	lsls	r3, r3, #22
 80123aa:	d4e1      	bmi.n	8012370 <_fflush_r+0xc>
 80123ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123ae:	f7ff fb51 	bl	8011a54 <__retarget_lock_release_recursive>
 80123b2:	e7dd      	b.n	8012370 <_fflush_r+0xc>

080123b4 <fiprintf>:
 80123b4:	b40e      	push	{r1, r2, r3}
 80123b6:	b503      	push	{r0, r1, lr}
 80123b8:	4601      	mov	r1, r0
 80123ba:	ab03      	add	r3, sp, #12
 80123bc:	4805      	ldr	r0, [pc, #20]	; (80123d4 <fiprintf+0x20>)
 80123be:	f853 2b04 	ldr.w	r2, [r3], #4
 80123c2:	6800      	ldr	r0, [r0, #0]
 80123c4:	9301      	str	r3, [sp, #4]
 80123c6:	f7ff fc9d 	bl	8011d04 <_vfiprintf_r>
 80123ca:	b002      	add	sp, #8
 80123cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80123d0:	b003      	add	sp, #12
 80123d2:	4770      	bx	lr
 80123d4:	20000088 	.word	0x20000088

080123d8 <__swbuf_r>:
 80123d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123da:	460e      	mov	r6, r1
 80123dc:	4614      	mov	r4, r2
 80123de:	4605      	mov	r5, r0
 80123e0:	b118      	cbz	r0, 80123ea <__swbuf_r+0x12>
 80123e2:	6a03      	ldr	r3, [r0, #32]
 80123e4:	b90b      	cbnz	r3, 80123ea <__swbuf_r+0x12>
 80123e6:	f7ff fa25 	bl	8011834 <__sinit>
 80123ea:	69a3      	ldr	r3, [r4, #24]
 80123ec:	60a3      	str	r3, [r4, #8]
 80123ee:	89a3      	ldrh	r3, [r4, #12]
 80123f0:	071a      	lsls	r2, r3, #28
 80123f2:	d525      	bpl.n	8012440 <__swbuf_r+0x68>
 80123f4:	6923      	ldr	r3, [r4, #16]
 80123f6:	b31b      	cbz	r3, 8012440 <__swbuf_r+0x68>
 80123f8:	6823      	ldr	r3, [r4, #0]
 80123fa:	6922      	ldr	r2, [r4, #16]
 80123fc:	1a98      	subs	r0, r3, r2
 80123fe:	6963      	ldr	r3, [r4, #20]
 8012400:	b2f6      	uxtb	r6, r6
 8012402:	4283      	cmp	r3, r0
 8012404:	4637      	mov	r7, r6
 8012406:	dc04      	bgt.n	8012412 <__swbuf_r+0x3a>
 8012408:	4621      	mov	r1, r4
 801240a:	4628      	mov	r0, r5
 801240c:	f7ff ffaa 	bl	8012364 <_fflush_r>
 8012410:	b9e0      	cbnz	r0, 801244c <__swbuf_r+0x74>
 8012412:	68a3      	ldr	r3, [r4, #8]
 8012414:	3b01      	subs	r3, #1
 8012416:	60a3      	str	r3, [r4, #8]
 8012418:	6823      	ldr	r3, [r4, #0]
 801241a:	1c5a      	adds	r2, r3, #1
 801241c:	6022      	str	r2, [r4, #0]
 801241e:	701e      	strb	r6, [r3, #0]
 8012420:	6962      	ldr	r2, [r4, #20]
 8012422:	1c43      	adds	r3, r0, #1
 8012424:	429a      	cmp	r2, r3
 8012426:	d004      	beq.n	8012432 <__swbuf_r+0x5a>
 8012428:	89a3      	ldrh	r3, [r4, #12]
 801242a:	07db      	lsls	r3, r3, #31
 801242c:	d506      	bpl.n	801243c <__swbuf_r+0x64>
 801242e:	2e0a      	cmp	r6, #10
 8012430:	d104      	bne.n	801243c <__swbuf_r+0x64>
 8012432:	4621      	mov	r1, r4
 8012434:	4628      	mov	r0, r5
 8012436:	f7ff ff95 	bl	8012364 <_fflush_r>
 801243a:	b938      	cbnz	r0, 801244c <__swbuf_r+0x74>
 801243c:	4638      	mov	r0, r7
 801243e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012440:	4621      	mov	r1, r4
 8012442:	4628      	mov	r0, r5
 8012444:	f000 f806 	bl	8012454 <__swsetup_r>
 8012448:	2800      	cmp	r0, #0
 801244a:	d0d5      	beq.n	80123f8 <__swbuf_r+0x20>
 801244c:	f04f 37ff 	mov.w	r7, #4294967295
 8012450:	e7f4      	b.n	801243c <__swbuf_r+0x64>
	...

08012454 <__swsetup_r>:
 8012454:	b538      	push	{r3, r4, r5, lr}
 8012456:	4b2a      	ldr	r3, [pc, #168]	; (8012500 <__swsetup_r+0xac>)
 8012458:	4605      	mov	r5, r0
 801245a:	6818      	ldr	r0, [r3, #0]
 801245c:	460c      	mov	r4, r1
 801245e:	b118      	cbz	r0, 8012468 <__swsetup_r+0x14>
 8012460:	6a03      	ldr	r3, [r0, #32]
 8012462:	b90b      	cbnz	r3, 8012468 <__swsetup_r+0x14>
 8012464:	f7ff f9e6 	bl	8011834 <__sinit>
 8012468:	89a3      	ldrh	r3, [r4, #12]
 801246a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801246e:	0718      	lsls	r0, r3, #28
 8012470:	d422      	bmi.n	80124b8 <__swsetup_r+0x64>
 8012472:	06d9      	lsls	r1, r3, #27
 8012474:	d407      	bmi.n	8012486 <__swsetup_r+0x32>
 8012476:	2309      	movs	r3, #9
 8012478:	602b      	str	r3, [r5, #0]
 801247a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801247e:	81a3      	strh	r3, [r4, #12]
 8012480:	f04f 30ff 	mov.w	r0, #4294967295
 8012484:	e034      	b.n	80124f0 <__swsetup_r+0x9c>
 8012486:	0758      	lsls	r0, r3, #29
 8012488:	d512      	bpl.n	80124b0 <__swsetup_r+0x5c>
 801248a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801248c:	b141      	cbz	r1, 80124a0 <__swsetup_r+0x4c>
 801248e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012492:	4299      	cmp	r1, r3
 8012494:	d002      	beq.n	801249c <__swsetup_r+0x48>
 8012496:	4628      	mov	r0, r5
 8012498:	f7ff fb0a 	bl	8011ab0 <_free_r>
 801249c:	2300      	movs	r3, #0
 801249e:	6363      	str	r3, [r4, #52]	; 0x34
 80124a0:	89a3      	ldrh	r3, [r4, #12]
 80124a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80124a6:	81a3      	strh	r3, [r4, #12]
 80124a8:	2300      	movs	r3, #0
 80124aa:	6063      	str	r3, [r4, #4]
 80124ac:	6923      	ldr	r3, [r4, #16]
 80124ae:	6023      	str	r3, [r4, #0]
 80124b0:	89a3      	ldrh	r3, [r4, #12]
 80124b2:	f043 0308 	orr.w	r3, r3, #8
 80124b6:	81a3      	strh	r3, [r4, #12]
 80124b8:	6923      	ldr	r3, [r4, #16]
 80124ba:	b94b      	cbnz	r3, 80124d0 <__swsetup_r+0x7c>
 80124bc:	89a3      	ldrh	r3, [r4, #12]
 80124be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80124c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124c6:	d003      	beq.n	80124d0 <__swsetup_r+0x7c>
 80124c8:	4621      	mov	r1, r4
 80124ca:	4628      	mov	r0, r5
 80124cc:	f000 f857 	bl	801257e <__smakebuf_r>
 80124d0:	89a0      	ldrh	r0, [r4, #12]
 80124d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124d6:	f010 0301 	ands.w	r3, r0, #1
 80124da:	d00a      	beq.n	80124f2 <__swsetup_r+0x9e>
 80124dc:	2300      	movs	r3, #0
 80124de:	60a3      	str	r3, [r4, #8]
 80124e0:	6963      	ldr	r3, [r4, #20]
 80124e2:	425b      	negs	r3, r3
 80124e4:	61a3      	str	r3, [r4, #24]
 80124e6:	6923      	ldr	r3, [r4, #16]
 80124e8:	b943      	cbnz	r3, 80124fc <__swsetup_r+0xa8>
 80124ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80124ee:	d1c4      	bne.n	801247a <__swsetup_r+0x26>
 80124f0:	bd38      	pop	{r3, r4, r5, pc}
 80124f2:	0781      	lsls	r1, r0, #30
 80124f4:	bf58      	it	pl
 80124f6:	6963      	ldrpl	r3, [r4, #20]
 80124f8:	60a3      	str	r3, [r4, #8]
 80124fa:	e7f4      	b.n	80124e6 <__swsetup_r+0x92>
 80124fc:	2000      	movs	r0, #0
 80124fe:	e7f7      	b.n	80124f0 <__swsetup_r+0x9c>
 8012500:	20000088 	.word	0x20000088

08012504 <_sbrk_r>:
 8012504:	b538      	push	{r3, r4, r5, lr}
 8012506:	4d06      	ldr	r5, [pc, #24]	; (8012520 <_sbrk_r+0x1c>)
 8012508:	2300      	movs	r3, #0
 801250a:	4604      	mov	r4, r0
 801250c:	4608      	mov	r0, r1
 801250e:	602b      	str	r3, [r5, #0]
 8012510:	f7ee fb4c 	bl	8000bac <_sbrk>
 8012514:	1c43      	adds	r3, r0, #1
 8012516:	d102      	bne.n	801251e <_sbrk_r+0x1a>
 8012518:	682b      	ldr	r3, [r5, #0]
 801251a:	b103      	cbz	r3, 801251e <_sbrk_r+0x1a>
 801251c:	6023      	str	r3, [r4, #0]
 801251e:	bd38      	pop	{r3, r4, r5, pc}
 8012520:	20008a58 	.word	0x20008a58

08012524 <abort>:
 8012524:	b508      	push	{r3, lr}
 8012526:	2006      	movs	r0, #6
 8012528:	f000 f88e 	bl	8012648 <raise>
 801252c:	2001      	movs	r0, #1
 801252e:	f7ee fac5 	bl	8000abc <_exit>

08012532 <__swhatbuf_r>:
 8012532:	b570      	push	{r4, r5, r6, lr}
 8012534:	460c      	mov	r4, r1
 8012536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801253a:	2900      	cmp	r1, #0
 801253c:	b096      	sub	sp, #88	; 0x58
 801253e:	4615      	mov	r5, r2
 8012540:	461e      	mov	r6, r3
 8012542:	da0d      	bge.n	8012560 <__swhatbuf_r+0x2e>
 8012544:	89a3      	ldrh	r3, [r4, #12]
 8012546:	f013 0f80 	tst.w	r3, #128	; 0x80
 801254a:	f04f 0100 	mov.w	r1, #0
 801254e:	bf0c      	ite	eq
 8012550:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012554:	2340      	movne	r3, #64	; 0x40
 8012556:	2000      	movs	r0, #0
 8012558:	6031      	str	r1, [r6, #0]
 801255a:	602b      	str	r3, [r5, #0]
 801255c:	b016      	add	sp, #88	; 0x58
 801255e:	bd70      	pop	{r4, r5, r6, pc}
 8012560:	466a      	mov	r2, sp
 8012562:	f000 f879 	bl	8012658 <_fstat_r>
 8012566:	2800      	cmp	r0, #0
 8012568:	dbec      	blt.n	8012544 <__swhatbuf_r+0x12>
 801256a:	9901      	ldr	r1, [sp, #4]
 801256c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012570:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012574:	4259      	negs	r1, r3
 8012576:	4159      	adcs	r1, r3
 8012578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801257c:	e7eb      	b.n	8012556 <__swhatbuf_r+0x24>

0801257e <__smakebuf_r>:
 801257e:	898b      	ldrh	r3, [r1, #12]
 8012580:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012582:	079d      	lsls	r5, r3, #30
 8012584:	4606      	mov	r6, r0
 8012586:	460c      	mov	r4, r1
 8012588:	d507      	bpl.n	801259a <__smakebuf_r+0x1c>
 801258a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801258e:	6023      	str	r3, [r4, #0]
 8012590:	6123      	str	r3, [r4, #16]
 8012592:	2301      	movs	r3, #1
 8012594:	6163      	str	r3, [r4, #20]
 8012596:	b002      	add	sp, #8
 8012598:	bd70      	pop	{r4, r5, r6, pc}
 801259a:	ab01      	add	r3, sp, #4
 801259c:	466a      	mov	r2, sp
 801259e:	f7ff ffc8 	bl	8012532 <__swhatbuf_r>
 80125a2:	9900      	ldr	r1, [sp, #0]
 80125a4:	4605      	mov	r5, r0
 80125a6:	4630      	mov	r0, r6
 80125a8:	f7ff faf6 	bl	8011b98 <_malloc_r>
 80125ac:	b948      	cbnz	r0, 80125c2 <__smakebuf_r+0x44>
 80125ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125b2:	059a      	lsls	r2, r3, #22
 80125b4:	d4ef      	bmi.n	8012596 <__smakebuf_r+0x18>
 80125b6:	f023 0303 	bic.w	r3, r3, #3
 80125ba:	f043 0302 	orr.w	r3, r3, #2
 80125be:	81a3      	strh	r3, [r4, #12]
 80125c0:	e7e3      	b.n	801258a <__smakebuf_r+0xc>
 80125c2:	89a3      	ldrh	r3, [r4, #12]
 80125c4:	6020      	str	r0, [r4, #0]
 80125c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125ca:	81a3      	strh	r3, [r4, #12]
 80125cc:	9b00      	ldr	r3, [sp, #0]
 80125ce:	6163      	str	r3, [r4, #20]
 80125d0:	9b01      	ldr	r3, [sp, #4]
 80125d2:	6120      	str	r0, [r4, #16]
 80125d4:	b15b      	cbz	r3, 80125ee <__smakebuf_r+0x70>
 80125d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125da:	4630      	mov	r0, r6
 80125dc:	f000 f84e 	bl	801267c <_isatty_r>
 80125e0:	b128      	cbz	r0, 80125ee <__smakebuf_r+0x70>
 80125e2:	89a3      	ldrh	r3, [r4, #12]
 80125e4:	f023 0303 	bic.w	r3, r3, #3
 80125e8:	f043 0301 	orr.w	r3, r3, #1
 80125ec:	81a3      	strh	r3, [r4, #12]
 80125ee:	89a3      	ldrh	r3, [r4, #12]
 80125f0:	431d      	orrs	r5, r3
 80125f2:	81a5      	strh	r5, [r4, #12]
 80125f4:	e7cf      	b.n	8012596 <__smakebuf_r+0x18>

080125f6 <_raise_r>:
 80125f6:	291f      	cmp	r1, #31
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	4604      	mov	r4, r0
 80125fc:	460d      	mov	r5, r1
 80125fe:	d904      	bls.n	801260a <_raise_r+0x14>
 8012600:	2316      	movs	r3, #22
 8012602:	6003      	str	r3, [r0, #0]
 8012604:	f04f 30ff 	mov.w	r0, #4294967295
 8012608:	bd38      	pop	{r3, r4, r5, pc}
 801260a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801260c:	b112      	cbz	r2, 8012614 <_raise_r+0x1e>
 801260e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012612:	b94b      	cbnz	r3, 8012628 <_raise_r+0x32>
 8012614:	4620      	mov	r0, r4
 8012616:	f000 f853 	bl	80126c0 <_getpid_r>
 801261a:	462a      	mov	r2, r5
 801261c:	4601      	mov	r1, r0
 801261e:	4620      	mov	r0, r4
 8012620:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012624:	f000 b83a 	b.w	801269c <_kill_r>
 8012628:	2b01      	cmp	r3, #1
 801262a:	d00a      	beq.n	8012642 <_raise_r+0x4c>
 801262c:	1c59      	adds	r1, r3, #1
 801262e:	d103      	bne.n	8012638 <_raise_r+0x42>
 8012630:	2316      	movs	r3, #22
 8012632:	6003      	str	r3, [r0, #0]
 8012634:	2001      	movs	r0, #1
 8012636:	e7e7      	b.n	8012608 <_raise_r+0x12>
 8012638:	2400      	movs	r4, #0
 801263a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801263e:	4628      	mov	r0, r5
 8012640:	4798      	blx	r3
 8012642:	2000      	movs	r0, #0
 8012644:	e7e0      	b.n	8012608 <_raise_r+0x12>
	...

08012648 <raise>:
 8012648:	4b02      	ldr	r3, [pc, #8]	; (8012654 <raise+0xc>)
 801264a:	4601      	mov	r1, r0
 801264c:	6818      	ldr	r0, [r3, #0]
 801264e:	f7ff bfd2 	b.w	80125f6 <_raise_r>
 8012652:	bf00      	nop
 8012654:	20000088 	.word	0x20000088

08012658 <_fstat_r>:
 8012658:	b538      	push	{r3, r4, r5, lr}
 801265a:	4d07      	ldr	r5, [pc, #28]	; (8012678 <_fstat_r+0x20>)
 801265c:	2300      	movs	r3, #0
 801265e:	4604      	mov	r4, r0
 8012660:	4608      	mov	r0, r1
 8012662:	4611      	mov	r1, r2
 8012664:	602b      	str	r3, [r5, #0]
 8012666:	f7ee fa78 	bl	8000b5a <_fstat>
 801266a:	1c43      	adds	r3, r0, #1
 801266c:	d102      	bne.n	8012674 <_fstat_r+0x1c>
 801266e:	682b      	ldr	r3, [r5, #0]
 8012670:	b103      	cbz	r3, 8012674 <_fstat_r+0x1c>
 8012672:	6023      	str	r3, [r4, #0]
 8012674:	bd38      	pop	{r3, r4, r5, pc}
 8012676:	bf00      	nop
 8012678:	20008a58 	.word	0x20008a58

0801267c <_isatty_r>:
 801267c:	b538      	push	{r3, r4, r5, lr}
 801267e:	4d06      	ldr	r5, [pc, #24]	; (8012698 <_isatty_r+0x1c>)
 8012680:	2300      	movs	r3, #0
 8012682:	4604      	mov	r4, r0
 8012684:	4608      	mov	r0, r1
 8012686:	602b      	str	r3, [r5, #0]
 8012688:	f7ee fa77 	bl	8000b7a <_isatty>
 801268c:	1c43      	adds	r3, r0, #1
 801268e:	d102      	bne.n	8012696 <_isatty_r+0x1a>
 8012690:	682b      	ldr	r3, [r5, #0]
 8012692:	b103      	cbz	r3, 8012696 <_isatty_r+0x1a>
 8012694:	6023      	str	r3, [r4, #0]
 8012696:	bd38      	pop	{r3, r4, r5, pc}
 8012698:	20008a58 	.word	0x20008a58

0801269c <_kill_r>:
 801269c:	b538      	push	{r3, r4, r5, lr}
 801269e:	4d07      	ldr	r5, [pc, #28]	; (80126bc <_kill_r+0x20>)
 80126a0:	2300      	movs	r3, #0
 80126a2:	4604      	mov	r4, r0
 80126a4:	4608      	mov	r0, r1
 80126a6:	4611      	mov	r1, r2
 80126a8:	602b      	str	r3, [r5, #0]
 80126aa:	f7ee f9f5 	bl	8000a98 <_kill>
 80126ae:	1c43      	adds	r3, r0, #1
 80126b0:	d102      	bne.n	80126b8 <_kill_r+0x1c>
 80126b2:	682b      	ldr	r3, [r5, #0]
 80126b4:	b103      	cbz	r3, 80126b8 <_kill_r+0x1c>
 80126b6:	6023      	str	r3, [r4, #0]
 80126b8:	bd38      	pop	{r3, r4, r5, pc}
 80126ba:	bf00      	nop
 80126bc:	20008a58 	.word	0x20008a58

080126c0 <_getpid_r>:
 80126c0:	f7ee b9e2 	b.w	8000a88 <_getpid>

080126c4 <_init>:
 80126c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126c6:	bf00      	nop
 80126c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126ca:	bc08      	pop	{r3}
 80126cc:	469e      	mov	lr, r3
 80126ce:	4770      	bx	lr

080126d0 <_fini>:
 80126d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126d2:	bf00      	nop
 80126d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126d6:	bc08      	pop	{r3}
 80126d8:	469e      	mov	lr, r3
 80126da:	4770      	bx	lr
