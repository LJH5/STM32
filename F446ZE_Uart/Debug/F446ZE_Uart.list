
F446ZE_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e6c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  08007020  08007020  00008020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073c0  080073c0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080073c0  080073c0  000083c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073c8  080073c8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073c8  080073c8  000083c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073cc  080073cc  000083cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080073d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000924  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000af8  20000af8  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138df  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002553  00000000  00000000  0001cae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001158  00000000  00000000  0001f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8e  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ca5  00000000  00000000  00020f1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130cb  00000000  00000000  00046bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4be1  00000000  00000000  00059c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e86f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b24  00000000  00000000  0013e8b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  001443d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007004 	.word	0x08007004

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08007004 	.word	0x08007004

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__io_putchar>:
static void MX_USB_OTG_FS_PCD_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, &ch, 1, 1000);
 8000ec0:	1d39      	adds	r1, r7, #4
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4803      	ldr	r0, [pc, #12]	@ (8000ed8 <__io_putchar+0x20>)
 8000eca:	f002 fd4d 	bl	8003968 <HAL_UART_Transmit>
    return ch;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000460 	.word	0x20000460

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f000 fd7d 	bl	80019e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f839 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f000 f97d 	bl	80011e8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000eee:	f000 f89f 	bl	8001030 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ef2:	f000 f921 	bl	8001138 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ef6:	f000 f949 	bl	800118c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM6_Init();
 8000efa:	f000 f8e7 	bl	80010cc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2101      	movs	r1, #1
 8000f02:	480f      	ldr	r0, [pc, #60]	@ (8000f40 <main+0x64>)
 8000f04:	f001 fbe8 	bl	80026d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2180      	movs	r1, #128	@ 0x80
 8000f0c:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <main+0x64>)
 8000f0e:	f001 fbe3 	bl	80026d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f18:	4809      	ldr	r0, [pc, #36]	@ (8000f40 <main+0x64>)
 8000f1a:	f001 fbdd 	bl	80026d8 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim6);
 8000f1e:	4809      	ldr	r0, [pc, #36]	@ (8000f44 <main+0x68>)
 8000f20:	f002 fa0e 	bl	8003340 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  	printf("%dh %dm %ds %dms\r\n",h, m, s, ms);
 8000f24:	4b08      	ldr	r3, [pc, #32]	@ (8000f48 <main+0x6c>)
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <main+0x70>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <main+0x74>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <main+0x78>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	4603      	mov	r3, r0
 8000f38:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <main+0x7c>)
 8000f3a:	f004 f8e9 	bl	8005110 <iprintf>
 8000f3e:	e7f1      	b.n	8000f24 <main+0x48>
 8000f40:	40020400 	.word	0x40020400
 8000f44:	20000418 	.word	0x20000418
 8000f48:	2000098c 	.word	0x2000098c
 8000f4c:	20000990 	.word	0x20000990
 8000f50:	20000994 	.word	0x20000994
 8000f54:	20000998 	.word	0x20000998
 8000f58:	08007020 	.word	0x08007020

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	@ 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	@ 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f004 f925 	bl	80051ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	4a27      	ldr	r2, [pc, #156]	@ (8001028 <SystemClock_Config+0xcc>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f90:	4b25      	ldr	r3, [pc, #148]	@ (8001028 <SystemClock_Config+0xcc>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b22      	ldr	r3, [pc, #136]	@ (800102c <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a21      	ldr	r2, [pc, #132]	@ (800102c <SystemClock_Config+0xd0>)
 8000fa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <SystemClock_Config+0xd0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fbc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fd0:	23a8      	movs	r3, #168	@ 0xa8
 8000fd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fd8:	2307      	movs	r3, #7
 8000fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 fcc5 	bl	8002970 <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fec:	f000 f9f6 	bl	80013dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001006:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2105      	movs	r1, #5
 800100e:	4618      	mov	r0, r3
 8001010:	f001 ff26 	bl	8002e60 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800101a:	f000 f9df 	bl	80013dc <Error_Handler>
  }
}
 800101e:	bf00      	nop
 8001020:	3750      	adds	r7, #80	@ 0x50
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800
 800102c:	40007000 	.word	0x40007000

08001030 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001034:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <MX_ETH_Init+0x84>)
 8001036:	4a20      	ldr	r2, [pc, #128]	@ (80010b8 <MX_ETH_Init+0x88>)
 8001038:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <MX_ETH_Init+0x8c>)
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001040:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <MX_ETH_Init+0x8c>)
 8001042:	2280      	movs	r2, #128	@ 0x80
 8001044:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <MX_ETH_Init+0x8c>)
 8001048:	22e1      	movs	r2, #225	@ 0xe1
 800104a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <MX_ETH_Init+0x8c>)
 800104e:	2200      	movs	r2, #0
 8001050:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <MX_ETH_Init+0x8c>)
 8001054:	2200      	movs	r2, #0
 8001056:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <MX_ETH_Init+0x8c>)
 800105a:	2200      	movs	r2, #0
 800105c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800105e:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <MX_ETH_Init+0x84>)
 8001060:	4a16      	ldr	r2, [pc, #88]	@ (80010bc <MX_ETH_Init+0x8c>)
 8001062:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001064:	4b13      	ldr	r3, [pc, #76]	@ (80010b4 <MX_ETH_Init+0x84>)
 8001066:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800106a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_ETH_Init+0x84>)
 800106e:	4a14      	ldr	r2, [pc, #80]	@ (80010c0 <MX_ETH_Init+0x90>)
 8001070:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <MX_ETH_Init+0x84>)
 8001074:	4a13      	ldr	r2, [pc, #76]	@ (80010c4 <MX_ETH_Init+0x94>)
 8001076:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_ETH_Init+0x84>)
 800107a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800107e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <MX_ETH_Init+0x84>)
 8001082:	f000 fe55 	bl	8001d30 <HAL_ETH_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800108c:	f000 f9a6 	bl	80013dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001090:	2238      	movs	r2, #56	@ 0x38
 8001092:	2100      	movs	r1, #0
 8001094:	480c      	ldr	r0, [pc, #48]	@ (80010c8 <MX_ETH_Init+0x98>)
 8001096:	f004 f890 	bl	80051ba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_ETH_Init+0x98>)
 800109c:	2221      	movs	r2, #33	@ 0x21
 800109e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_ETH_Init+0x98>)
 80010a2:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80010a6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <MX_ETH_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000368 	.word	0x20000368
 80010b8:	40028000 	.word	0x40028000
 80010bc:	2000099c 	.word	0x2000099c
 80010c0:	200002c8 	.word	0x200002c8
 80010c4:	20000228 	.word	0x20000228
 80010c8:	200001f0 	.word	0x200001f0

080010cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d2:	463b      	mov	r3, r7
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_TIM6_Init+0x64>)
 80010dc:	4a15      	ldr	r2, [pc, #84]	@ (8001134 <MX_TIM6_Init+0x68>)
 80010de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 80010e0:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_TIM6_Init+0x64>)
 80010e2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80010e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_TIM6_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10-1;
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_TIM6_Init+0x64>)
 80010f0:	2209      	movs	r2, #9
 80010f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_TIM6_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010fa:	480d      	ldr	r0, [pc, #52]	@ (8001130 <MX_TIM6_Init+0x64>)
 80010fc:	f002 f8d0 	bl	80032a0 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001106:	f000 f969 	bl	80013dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001112:	463b      	mov	r3, r7
 8001114:	4619      	mov	r1, r3
 8001116:	4806      	ldr	r0, [pc, #24]	@ (8001130 <MX_TIM6_Init+0x64>)
 8001118:	f002 fb46 	bl	80037a8 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001122:	f000 f95b 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000418 	.word	0x20000418
 8001134:	40001000 	.word	0x40001000

08001138 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <MX_USART3_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001144:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001148:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001170:	f002 fbaa 	bl	80038c8 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800117a:	f000 f92f 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000460 	.word	0x20000460
 8001188:	40004800 	.word	0x40004800

0800118c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001192:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001196:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800119a:	2204      	movs	r2, #4
 800119c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ac:	2202      	movs	r2, #2
 80011ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d0:	f001 fabf 	bl	8002752 <HAL_PCD_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011da:	f000 f8ff 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200004a8 	.word	0x200004a8

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	@ 0x30
 80011ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	4b50      	ldr	r3, [pc, #320]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a4f      	ldr	r2, [pc, #316]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b4d      	ldr	r3, [pc, #308]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	4b49      	ldr	r3, [pc, #292]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a48      	ldr	r2, [pc, #288]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b46      	ldr	r3, [pc, #280]	@ (8001344 <MX_GPIO_Init+0x15c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b42      	ldr	r3, [pc, #264]	@ (8001344 <MX_GPIO_Init+0x15c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a41      	ldr	r2, [pc, #260]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b3f      	ldr	r3, [pc, #252]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b3b      	ldr	r3, [pc, #236]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a3a      	ldr	r2, [pc, #232]	@ (8001344 <MX_GPIO_Init+0x15c>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b38      	ldr	r3, [pc, #224]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a33      	ldr	r2, [pc, #204]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a2c      	ldr	r2, [pc, #176]	@ (8001344 <MX_GPIO_Init+0x15c>)
 8001294:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b2a      	ldr	r3, [pc, #168]	@ (8001344 <MX_GPIO_Init+0x15c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80012ac:	4826      	ldr	r0, [pc, #152]	@ (8001348 <MX_GPIO_Init+0x160>)
 80012ae:	f001 fa13 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2140      	movs	r1, #64	@ 0x40
 80012b6:	4825      	ldr	r0, [pc, #148]	@ (800134c <MX_GPIO_Init+0x164>)
 80012b8:	f001 fa0e 	bl	80026d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	481f      	ldr	r0, [pc, #124]	@ (8001350 <MX_GPIO_Init+0x168>)
 80012d4:	f001 f854 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012d8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012de:	2301      	movs	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4815      	ldr	r0, [pc, #84]	@ (8001348 <MX_GPIO_Init+0x160>)
 80012f2:	f001 f845 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012f6:	2340      	movs	r3, #64	@ 0x40
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	480f      	ldr	r0, [pc, #60]	@ (800134c <MX_GPIO_Init+0x164>)
 800130e:	f001 f837 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001312:	2380      	movs	r3, #128	@ 0x80
 8001314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4809      	ldr	r0, [pc, #36]	@ (800134c <MX_GPIO_Init+0x164>)
 8001326:	f001 f82b 	bl	8002380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2028      	movs	r0, #40	@ 0x28
 8001330:	f000 fcc7 	bl	8001cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001334:	2028      	movs	r0, #40	@ 0x28
 8001336:	f000 fce0 	bl	8001cfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	@ 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40020400 	.word	0x40020400
 800134c:	40021800 	.word	0x40021800
 8001350:	40020800 	.word	0x40020800

08001354 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d129      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		ms++;
 8001366:	4b19      	ldr	r3, [pc, #100]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800136e:	6013      	str	r3, [r2, #0]
		if (ms==1000)
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001378:	d11f      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x66>
		{
			ms=0;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <HAL_TIM_PeriodElapsedCallback+0x78>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
			s++;
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a12      	ldr	r2, [pc, #72]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001388:	6013      	str	r3, [r2, #0]
			if (s==60)
 800138a:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b3c      	cmp	r3, #60	@ 0x3c
 8001390:	d113      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x66>
			{
				s=0;
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
				m++;
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	4a0d      	ldr	r2, [pc, #52]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80013a0:	6013      	str	r3, [r2, #0]
				if (m==60)
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b3c      	cmp	r3, #60	@ 0x3c
 80013a8:	d107      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x66>
				{
					m=0;
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
					h++;
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80013b8:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40001000 	.word	0x40001000
 80013cc:	20000998 	.word	0x20000998
 80013d0:	20000994 	.word	0x20000994
 80013d4:	20000990 	.word	0x20000990
 80013d8:	2000098c 	.word	0x2000098c

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <Error_Handler+0x8>

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001434 <HAL_MspInit+0x4c>)
 80013f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_MspInit+0x4c>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	603b      	str	r3, [r7, #0]
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001412:	4a08      	ldr	r2, [pc, #32]	@ (8001434 <HAL_MspInit+0x4c>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	@ 0x40
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_MspInit+0x4c>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800

08001438 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	@ 0x38
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a55      	ldr	r2, [pc, #340]	@ (80015ac <HAL_ETH_MspInit+0x174>)
 8001456:	4293      	cmp	r3, r2
 8001458:	f040 80a4 	bne.w	80015a4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
 8001460:	4b53      	ldr	r3, [pc, #332]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	4a52      	ldr	r2, [pc, #328]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 8001466:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800146a:	6313      	str	r3, [r2, #48]	@ 0x30
 800146c:	4b50      	ldr	r3, [pc, #320]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001474:	623b      	str	r3, [r7, #32]
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
 800147c:	4b4c      	ldr	r3, [pc, #304]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	4a4b      	ldr	r2, [pc, #300]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 8001482:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001486:	6313      	str	r3, [r2, #48]	@ 0x30
 8001488:	4b49      	ldr	r3, [pc, #292]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001490:	61fb      	str	r3, [r7, #28]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	4b45      	ldr	r3, [pc, #276]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149c:	4a44      	ldr	r2, [pc, #272]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 800149e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a4:	4b42      	ldr	r3, [pc, #264]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	4b3e      	ldr	r3, [pc, #248]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b8:	4a3d      	ldr	r2, [pc, #244]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c0:	4b3b      	ldr	r3, [pc, #236]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	4b37      	ldr	r3, [pc, #220]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d4:	4a36      	ldr	r2, [pc, #216]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6313      	str	r3, [r2, #48]	@ 0x30
 80014dc:	4b34      	ldr	r3, [pc, #208]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b30      	ldr	r3, [pc, #192]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f0:	4a2f      	ldr	r2, [pc, #188]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f8:	4b2d      	ldr	r3, [pc, #180]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	4b29      	ldr	r3, [pc, #164]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150c:	4a28      	ldr	r2, [pc, #160]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 800150e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001512:	6313      	str	r3, [r2, #48]	@ 0x30
 8001514:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <HAL_ETH_MspInit+0x178>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001520:	2332      	movs	r3, #50	@ 0x32
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001530:	230b      	movs	r3, #11
 8001532:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	481e      	ldr	r0, [pc, #120]	@ (80015b4 <HAL_ETH_MspInit+0x17c>)
 800153c:	f000 ff20 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001540:	2386      	movs	r3, #134	@ 0x86
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001550:	230b      	movs	r3, #11
 8001552:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	4817      	ldr	r0, [pc, #92]	@ (80015b8 <HAL_ETH_MspInit+0x180>)
 800155c:	f000 ff10 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001560:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001572:	230b      	movs	r3, #11
 8001574:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	480f      	ldr	r0, [pc, #60]	@ (80015bc <HAL_ETH_MspInit+0x184>)
 800157e:	f000 feff 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001582:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001594:	230b      	movs	r3, #11
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001598:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159c:	4619      	mov	r1, r3
 800159e:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <HAL_ETH_MspInit+0x188>)
 80015a0:	f000 feee 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015a4:	bf00      	nop
 80015a6:	3738      	adds	r7, #56	@ 0x38
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40028000 	.word	0x40028000
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40020800 	.word	0x40020800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40021800 	.word	0x40021800

080015c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0e      	ldr	r2, [pc, #56]	@ (800160c <HAL_TIM_Base_MspInit+0x48>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d115      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_TIM_Base_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	4a0c      	ldr	r2, [pc, #48]	@ (8001610 <HAL_TIM_Base_MspInit+0x4c>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_TIM_Base_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2036      	movs	r0, #54	@ 0x36
 80015f8:	f000 fb63 	bl	8001cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015fc:	2036      	movs	r0, #54	@ 0x36
 80015fe:	f000 fb7c 	bl	8001cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40001000 	.word	0x40001000
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	@ (8001698 <HAL_UART_MspInit+0x84>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d12c      	bne.n	8001690 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_UART_MspInit+0x88>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a17      	ldr	r2, [pc, #92]	@ (800169c <HAL_UART_MspInit+0x88>)
 8001640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <HAL_UART_MspInit+0x88>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b11      	ldr	r3, [pc, #68]	@ (800169c <HAL_UART_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a10      	ldr	r2, [pc, #64]	@ (800169c <HAL_UART_MspInit+0x88>)
 800165c:	f043 0308 	orr.w	r3, r3, #8
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <HAL_UART_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800166e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001680:	2307      	movs	r3, #7
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <HAL_UART_MspInit+0x8c>)
 800168c:	f000 fe78 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001690:	bf00      	nop
 8001692:	3728      	adds	r7, #40	@ 0x28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40004800 	.word	0x40004800
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020c00 	.word	0x40020c00

080016a4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80016c4:	d13f      	bne.n	8001746 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_PCD_MspInit+0xac>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a20      	ldr	r2, [pc, #128]	@ (8001750 <HAL_PCD_MspInit+0xac>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_PCD_MspInit+0xac>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016e2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016f4:	230a      	movs	r3, #10
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4815      	ldr	r0, [pc, #84]	@ (8001754 <HAL_PCD_MspInit+0xb0>)
 8001700:	f000 fe3e 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001704:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	480e      	ldr	r0, [pc, #56]	@ (8001754 <HAL_PCD_MspInit+0xb0>)
 800171a:	f000 fe31 	bl	8002380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800171e:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_PCD_MspInit+0xac>)
 8001720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001722:	4a0b      	ldr	r2, [pc, #44]	@ (8001750 <HAL_PCD_MspInit+0xac>)
 8001724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001728:	6353      	str	r3, [r2, #52]	@ 0x34
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_PCD_MspInit+0xac>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	4a07      	ldr	r2, [pc, #28]	@ (8001750 <HAL_PCD_MspInit+0xac>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001738:	6453      	str	r3, [r2, #68]	@ 0x44
 800173a:	4b05      	ldr	r3, [pc, #20]	@ (8001750 <HAL_PCD_MspInit+0xac>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	@ 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f969 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80017ba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017be:	f000 ffa5 	bl	800270c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <TIM6_DAC_IRQHandler+0x10>)
 80017ce:	f001 fe27 	bl	8003420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000418 	.word	0x20000418

080017dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_kill>:

int _kill(int pid, int sig)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017f6:	f003 fd33 	bl	8005260 <__errno>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2216      	movs	r2, #22
 80017fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_exit>:

void _exit (int status)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ffe7 	bl	80017ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800181e:	bf00      	nop
 8001820:	e7fd      	b.n	800181e <_exit+0x12>

08001822 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e00a      	b.n	800184a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001834:	f3af 8000 	nop.w
 8001838:	4601      	mov	r1, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	60ba      	str	r2, [r7, #8]
 8001840:	b2ca      	uxtb	r2, r1
 8001842:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	dbf0      	blt.n	8001834 <_read+0x12>
  }

  return len;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e009      	b.n	8001882 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	60ba      	str	r2, [r7, #8]
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fb1e 	bl	8000eb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	dbf1      	blt.n	800186e <_write+0x12>
  }
  return len;
 800188a:	687b      	ldr	r3, [r7, #4]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_close>:

int _close(int file)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018bc:	605a      	str	r2, [r3, #4]
  return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_isatty>:

int _isatty(int file)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b085      	sub	sp, #20
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	60f8      	str	r0, [r7, #12]
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001904:	4a14      	ldr	r2, [pc, #80]	@ (8001958 <_sbrk+0x5c>)
 8001906:	4b15      	ldr	r3, [pc, #84]	@ (800195c <_sbrk+0x60>)
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001910:	4b13      	ldr	r3, [pc, #76]	@ (8001960 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d102      	bne.n	800191e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <_sbrk+0x64>)
 800191a:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <_sbrk+0x68>)
 800191c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800191e:	4b10      	ldr	r3, [pc, #64]	@ (8001960 <_sbrk+0x64>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4413      	add	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	429a      	cmp	r2, r3
 800192a:	d207      	bcs.n	800193c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800192c:	f003 fc98 	bl	8005260 <__errno>
 8001930:	4603      	mov	r3, r0
 8001932:	220c      	movs	r2, #12
 8001934:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e009      	b.n	8001950 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001942:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <_sbrk+0x64>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	4a05      	ldr	r2, [pc, #20]	@ (8001960 <_sbrk+0x64>)
 800194c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800194e:	68fb      	ldr	r3, [r7, #12]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20030000 	.word	0x20030000
 800195c:	00000400 	.word	0x00000400
 8001960:	200009a4 	.word	0x200009a4
 8001964:	20000af8 	.word	0x20000af8

08001968 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <SystemInit+0x20>)
 800196e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001972:	4a05      	ldr	r2, [pc, #20]	@ (8001988 <SystemInit+0x20>)
 8001974:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001978:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800198c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001990:	f7ff ffea 	bl	8001968 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001994:	480c      	ldr	r0, [pc, #48]	@ (80019c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001996:	490d      	ldr	r1, [pc, #52]	@ (80019cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001998:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800199c:	e002      	b.n	80019a4 <LoopCopyDataInit>

0800199e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019a2:	3304      	adds	r3, #4

080019a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a8:	d3f9      	bcc.n	800199e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ac:	4c0a      	ldr	r4, [pc, #40]	@ (80019d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b0:	e001      	b.n	80019b6 <LoopFillZerobss>

080019b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b4:	3204      	adds	r2, #4

080019b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b8:	d3fb      	bcc.n	80019b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019ba:	f003 fc57 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019be:	f7ff fa8d 	bl	8000edc <main>
  bx  lr    
 80019c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019cc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019d0:	080073d0 	.word	0x080073d0
  ldr r2, =_sbss
 80019d4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019d8:	20000af8 	.word	0x20000af8

080019dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019dc:	e7fe      	b.n	80019dc <ADC_IRQHandler>
	...

080019e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a20 <HAL_Init+0x40>)
 80019ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0a      	ldr	r2, [pc, #40]	@ (8001a20 <HAL_Init+0x40>)
 80019f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019fc:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <HAL_Init+0x40>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a07      	ldr	r2, [pc, #28]	@ (8001a20 <HAL_Init+0x40>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f000 f94f 	bl	8001cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f000 f808 	bl	8001a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a14:	f7ff fce8 	bl	80013e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00

08001a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_InitTick+0x54>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_InitTick+0x58>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f967 	bl	8001d16 <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 f92f 	bl	8001cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	@ (8001a80 <HAL_InitTick+0x5c>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000004 	.word	0x20000004

08001a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	200009a8 	.word	0x200009a8

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	@ (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200009a8 	.word	0x200009a8

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001adc:	d005      	beq.n	8001aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_Delay+0x44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aea:	bf00      	nop
 8001aec:	f7ff ffde 	bl	8001aac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f7      	bhi.n	8001aec <HAL_Delay+0x28>
  {
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	@ (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	db0b      	blt.n	8001b9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	f003 021f 	and.w	r2, r3, #31
 8001b88:	4907      	ldr	r1, [pc, #28]	@ (8001ba8 <__NVIC_EnableIRQ+0x38>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	095b      	lsrs	r3, r3, #5
 8001b90:	2001      	movs	r0, #1
 8001b92:	fa00 f202 	lsl.w	r2, r0, r2
 8001b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	6039      	str	r1, [r7, #0]
 8001bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	db0a      	blt.n	8001bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	490c      	ldr	r1, [pc, #48]	@ (8001bf8 <__NVIC_SetPriority+0x4c>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	440b      	add	r3, r1
 8001bd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bd4:	e00a      	b.n	8001bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4908      	ldr	r1, [pc, #32]	@ (8001bfc <__NVIC_SetPriority+0x50>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	3b04      	subs	r3, #4
 8001be4:	0112      	lsls	r2, r2, #4
 8001be6:	b2d2      	uxtb	r2, r2
 8001be8:	440b      	add	r3, r1
 8001bea:	761a      	strb	r2, [r3, #24]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000e100 	.word	0xe000e100
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b089      	sub	sp, #36	@ 0x24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	f1c3 0307 	rsb	r3, r3, #7
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	bf28      	it	cs
 8001c1e:	2304      	movcs	r3, #4
 8001c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3304      	adds	r3, #4
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d902      	bls.n	8001c30 <NVIC_EncodePriority+0x30>
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3b03      	subs	r3, #3
 8001c2e:	e000      	b.n	8001c32 <NVIC_EncodePriority+0x32>
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	401a      	ands	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c48:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	43d9      	mvns	r1, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	4313      	orrs	r3, r2
         );
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3724      	adds	r7, #36	@ 0x24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c78:	d301      	bcc.n	8001c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00f      	b.n	8001c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c86:	210f      	movs	r1, #15
 8001c88:	f04f 30ff 	mov.w	r0, #4294967295
 8001c8c:	f7ff ff8e 	bl	8001bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c90:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c96:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <SysTick_Config+0x40>)
 8001c98:	2207      	movs	r2, #7
 8001c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	e000e010 	.word	0xe000e010

08001cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff ff29 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd4:	f7ff ff3e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	6978      	ldr	r0, [r7, #20]
 8001ce0:	f7ff ff8e 	bl	8001c00 <NVIC_EncodePriority>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff5d 	bl	8001bac <__NVIC_SetPriority>
}
 8001cf2:	bf00      	nop
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff31 	bl	8001b70 <__NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff ffa2 	bl	8001c68 <SysTick_Config>
 8001d24:	4603      	mov	r3, r0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e06c      	b.n	8001e1c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d106      	bne.n	8001d5a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2223      	movs	r2, #35	@ 0x23
 8001d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fb6f 	bl	8001438 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b31      	ldr	r3, [pc, #196]	@ (8001e24 <HAL_ETH_Init+0xf4>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	4a30      	ldr	r2, [pc, #192]	@ (8001e24 <HAL_ETH_Init+0xf4>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <HAL_ETH_Init+0xf4>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d76:	4b2c      	ldr	r3, [pc, #176]	@ (8001e28 <HAL_ETH_Init+0xf8>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e28 <HAL_ETH_Init+0xf8>)
 8001d7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d80:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d82:	4b29      	ldr	r3, [pc, #164]	@ (8001e28 <HAL_ETH_Init+0xf8>)
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4927      	ldr	r1, [pc, #156]	@ (8001e28 <HAL_ETH_Init+0xf8>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d90:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <HAL_ETH_Init+0xf8>)
 8001d92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001daa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dac:	f7ff fe7e 	bl	8001aac <HAL_GetTick>
 8001db0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001db2:	e011      	b.n	8001dd8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001db4:	f7ff fe7a 	bl	8001aac <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001dc2:	d909      	bls.n	8001dd8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2204      	movs	r2, #4
 8001dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	22e0      	movs	r2, #224	@ 0xe0
 8001dd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e021      	b.n	8001e1c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1e4      	bne.n	8001db4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f958 	bl	80020a0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f9ff 	bl	80021f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fa55 	bl	80022a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	461a      	mov	r2, r3
 8001e02:	2100      	movs	r1, #0
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f9bd 	bl	8002184 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2210      	movs	r2, #16
 8001e16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40013800 	.word	0x40013800

08001e2c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4b51      	ldr	r3, [pc, #324]	@ (8001f88 <ETH_SetMACConfig+0x15c>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	7c1b      	ldrb	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d102      	bne.n	8001e54 <ETH_SetMACConfig+0x28>
 8001e4e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001e52:	e000      	b.n	8001e56 <ETH_SetMACConfig+0x2a>
 8001e54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	7c5b      	ldrb	r3, [r3, #17]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <ETH_SetMACConfig+0x38>
 8001e5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e62:	e000      	b.n	8001e66 <ETH_SetMACConfig+0x3a>
 8001e64:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001e66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001e6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	7fdb      	ldrb	r3, [r3, #31]
 8001e72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001e74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001e7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	7f92      	ldrb	r2, [r2, #30]
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	d102      	bne.n	8001e8a <ETH_SetMACConfig+0x5e>
 8001e84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e88:	e000      	b.n	8001e8c <ETH_SetMACConfig+0x60>
 8001e8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001e8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	7f1b      	ldrb	r3, [r3, #28]
 8001e92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001e94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001e9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	791b      	ldrb	r3, [r3, #4]
 8001ea0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001ea2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001eaa:	2a00      	cmp	r2, #0
 8001eac:	d102      	bne.n	8001eb4 <ETH_SetMACConfig+0x88>
 8001eae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001eb2:	e000      	b.n	8001eb6 <ETH_SetMACConfig+0x8a>
 8001eb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001eb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	7bdb      	ldrb	r3, [r3, #15]
 8001ebc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ebe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ec4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ecc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7ff fdec 	bl	8001ac4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001efc:	68fa      	ldr	r2, [r7, #12]
 8001efe:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f02:	4013      	ands	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f12:	2a00      	cmp	r2, #0
 8001f14:	d101      	bne.n	8001f1a <ETH_SetMACConfig+0xee>
 8001f16:	2280      	movs	r2, #128	@ 0x80
 8001f18:	e000      	b.n	8001f1c <ETH_SetMACConfig+0xf0>
 8001f1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f2a:	2a01      	cmp	r2, #1
 8001f2c:	d101      	bne.n	8001f32 <ETH_SetMACConfig+0x106>
 8001f2e:	2208      	movs	r2, #8
 8001f30:	e000      	b.n	8001f34 <ETH_SetMACConfig+0x108>
 8001f32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001f3c:	2a01      	cmp	r2, #1
 8001f3e:	d101      	bne.n	8001f44 <ETH_SetMACConfig+0x118>
 8001f40:	2204      	movs	r2, #4
 8001f42:	e000      	b.n	8001f46 <ETH_SetMACConfig+0x11a>
 8001f44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001f4e:	2a01      	cmp	r2, #1
 8001f50:	d101      	bne.n	8001f56 <ETH_SetMACConfig+0x12a>
 8001f52:	2202      	movs	r2, #2
 8001f54:	e000      	b.n	8001f58 <ETH_SetMACConfig+0x12c>
 8001f56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff fda7 	bl	8001ac4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	ff20810f 	.word	0xff20810f

08001f8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800209c <ETH_SetDMAConfig+0x110>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	7b1b      	ldrb	r3, [r3, #12]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <ETH_SetDMAConfig+0x2c>
 8001fb2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fb6:	e000      	b.n	8001fba <ETH_SetDMAConfig+0x2e>
 8001fb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	7b5b      	ldrb	r3, [r3, #13]
 8001fbe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001fc0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	7f52      	ldrb	r2, [r2, #29]
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d102      	bne.n	8001fd0 <ETH_SetDMAConfig+0x44>
 8001fca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001fce:	e000      	b.n	8001fd2 <ETH_SetDMAConfig+0x46>
 8001fd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001fd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	7b9b      	ldrb	r3, [r3, #14]
 8001fd8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001fda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001fe0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	7f1b      	ldrb	r3, [r3, #28]
 8001fe6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001fe8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	7f9b      	ldrb	r3, [r3, #30]
 8001fee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ff0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ff6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ffe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002000:	4313      	orrs	r3, r2
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4313      	orrs	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002010:	461a      	mov	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff fd4e 	bl	8001ac4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002030:	461a      	mov	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	791b      	ldrb	r3, [r3, #4]
 800203a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002040:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002046:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800204c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002054:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002056:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800205e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002064:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800206e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002072:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002080:	2001      	movs	r0, #1
 8002082:	f7ff fd1f 	bl	8001ac4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800208e:	461a      	mov	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	f8de3f23 	.word	0xf8de3f23

080020a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0a6      	sub	sp, #152	@ 0x98
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80020a8:	2301      	movs	r3, #1
 80020aa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80020b4:	2300      	movs	r3, #0
 80020b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80020be:	2301      	movs	r3, #1
 80020c0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020dc:	2300      	movs	r3, #0
 80020de:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002102:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002106:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800210c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002114:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002118:	4619      	mov	r1, r3
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff fe86 	bl	8001e2c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002120:	2301      	movs	r3, #1
 8002122:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002124:	2301      	movs	r3, #1
 8002126:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002128:	2301      	movs	r3, #1
 800212a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800212e:	2301      	movs	r3, #1
 8002130:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002142:	2300      	movs	r3, #0
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002146:	2301      	movs	r3, #1
 8002148:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800214c:	2301      	movs	r3, #1
 800214e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002150:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002154:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002156:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800215a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800215c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002160:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002168:	2300      	movs	r3, #0
 800216a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002170:	f107 0308 	add.w	r3, r7, #8
 8002174:	4619      	mov	r1, r3
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ff08 	bl	8001f8c <ETH_SetDMAConfig>
}
 800217c:	bf00      	nop
 800217e:	3798      	adds	r7, #152	@ 0x98
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3305      	adds	r3, #5
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	021b      	lsls	r3, r3, #8
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	3204      	adds	r2, #4
 800219c:	7812      	ldrb	r2, [r2, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <ETH_MACAddressConfig+0x68>)
 80021a6:	4413      	add	r3, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3303      	adds	r3, #3
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	061a      	lsls	r2, r3, #24
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3302      	adds	r3, #2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3301      	adds	r3, #1
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	4313      	orrs	r3, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	7812      	ldrb	r2, [r2, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <ETH_MACAddressConfig+0x6c>)
 80021d6:	4413      	add	r3, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	6013      	str	r3, [r2, #0]
}
 80021de:	bf00      	nop
 80021e0:	371c      	adds	r7, #28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40028040 	.word	0x40028040
 80021f0:	40028044 	.word	0x40028044

080021f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e03e      	b.n	8002280 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68d9      	ldr	r1, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	3206      	adds	r2, #6
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d80c      	bhi.n	8002264 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68d9      	ldr	r1, [r3, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	440b      	add	r3, r1
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	e004      	b.n	800226e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3301      	adds	r3, #1
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d9bd      	bls.n	8002202 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002298:	611a      	str	r2, [r3, #16]
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	e046      	b.n	8002342 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6919      	ldr	r1, [r3, #16]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2200      	movs	r2, #0
 80022e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80022f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 80022f8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	3212      	adds	r2, #18
 800230e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d80c      	bhi.n	8002332 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	60da      	str	r2, [r3, #12]
 8002330:	e004      	b.n	800233c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	461a      	mov	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3301      	adds	r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2b03      	cmp	r3, #3
 8002346:	d9b5      	bls.n	80022b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002372:	60da      	str	r2, [r3, #12]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	@ 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	e177      	b.n	800268c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	f040 8166 	bne.w	8002686 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d005      	beq.n	80023d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d130      	bne.n	8002434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 0201 	and.w	r2, r3, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b03      	cmp	r3, #3
 800243e:	d017      	beq.n	8002470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d123      	bne.n	80024c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	08da      	lsrs	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3208      	adds	r2, #8
 8002484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3208      	adds	r2, #8
 80024be:	69b9      	ldr	r1, [r7, #24]
 80024c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0203 	and.w	r2, r3, #3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80c0 	beq.w	8002686 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b66      	ldr	r3, [pc, #408]	@ (80026a4 <HAL_GPIO_Init+0x324>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	4a65      	ldr	r2, [pc, #404]	@ (80026a4 <HAL_GPIO_Init+0x324>)
 8002510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002514:	6453      	str	r3, [r2, #68]	@ 0x44
 8002516:	4b63      	ldr	r3, [pc, #396]	@ (80026a4 <HAL_GPIO_Init+0x324>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002522:	4a61      	ldr	r2, [pc, #388]	@ (80026a8 <HAL_GPIO_Init+0x328>)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a58      	ldr	r2, [pc, #352]	@ (80026ac <HAL_GPIO_Init+0x32c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d037      	beq.n	80025be <HAL_GPIO_Init+0x23e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a57      	ldr	r2, [pc, #348]	@ (80026b0 <HAL_GPIO_Init+0x330>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d031      	beq.n	80025ba <HAL_GPIO_Init+0x23a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a56      	ldr	r2, [pc, #344]	@ (80026b4 <HAL_GPIO_Init+0x334>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d02b      	beq.n	80025b6 <HAL_GPIO_Init+0x236>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a55      	ldr	r2, [pc, #340]	@ (80026b8 <HAL_GPIO_Init+0x338>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d025      	beq.n	80025b2 <HAL_GPIO_Init+0x232>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a54      	ldr	r2, [pc, #336]	@ (80026bc <HAL_GPIO_Init+0x33c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01f      	beq.n	80025ae <HAL_GPIO_Init+0x22e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a53      	ldr	r2, [pc, #332]	@ (80026c0 <HAL_GPIO_Init+0x340>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d019      	beq.n	80025aa <HAL_GPIO_Init+0x22a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a52      	ldr	r2, [pc, #328]	@ (80026c4 <HAL_GPIO_Init+0x344>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <HAL_GPIO_Init+0x226>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a51      	ldr	r2, [pc, #324]	@ (80026c8 <HAL_GPIO_Init+0x348>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00d      	beq.n	80025a2 <HAL_GPIO_Init+0x222>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a50      	ldr	r2, [pc, #320]	@ (80026cc <HAL_GPIO_Init+0x34c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <HAL_GPIO_Init+0x21e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4f      	ldr	r2, [pc, #316]	@ (80026d0 <HAL_GPIO_Init+0x350>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d101      	bne.n	800259a <HAL_GPIO_Init+0x21a>
 8002596:	2309      	movs	r3, #9
 8002598:	e012      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 800259a:	230a      	movs	r3, #10
 800259c:	e010      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 800259e:	2308      	movs	r3, #8
 80025a0:	e00e      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025a2:	2307      	movs	r3, #7
 80025a4:	e00c      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025a6:	2306      	movs	r3, #6
 80025a8:	e00a      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025aa:	2305      	movs	r3, #5
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025be:	2300      	movs	r3, #0
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d0:	4935      	ldr	r1, [pc, #212]	@ (80026a8 <HAL_GPIO_Init+0x328>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025de:	4b3d      	ldr	r3, [pc, #244]	@ (80026d4 <HAL_GPIO_Init+0x354>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002602:	4a34      	ldr	r2, [pc, #208]	@ (80026d4 <HAL_GPIO_Init+0x354>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002608:	4b32      	ldr	r3, [pc, #200]	@ (80026d4 <HAL_GPIO_Init+0x354>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800262c:	4a29      	ldr	r2, [pc, #164]	@ (80026d4 <HAL_GPIO_Init+0x354>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002632:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <HAL_GPIO_Init+0x354>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002656:	4a1f      	ldr	r2, [pc, #124]	@ (80026d4 <HAL_GPIO_Init+0x354>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800265c:	4b1d      	ldr	r3, [pc, #116]	@ (80026d4 <HAL_GPIO_Init+0x354>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002680:	4a14      	ldr	r2, [pc, #80]	@ (80026d4 <HAL_GPIO_Init+0x354>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f ae84 	bls.w	800239c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3724      	adds	r7, #36	@ 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40013800 	.word	0x40013800
 80026ac:	40020000 	.word	0x40020000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40021400 	.word	0x40021400
 80026c4:	40021800 	.word	0x40021800
 80026c8:	40021c00 	.word	0x40021c00
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40022400 	.word	0x40022400
 80026d4:	40013c00 	.word	0x40013c00

080026d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	460b      	mov	r3, r1
 80026e2:	807b      	strh	r3, [r7, #2]
 80026e4:	4613      	mov	r3, r2
 80026e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e8:	787b      	ldrb	r3, [r7, #1]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026f4:	e003      	b.n	80026fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026f6:	887b      	ldrh	r3, [r7, #2]
 80026f8:	041a      	lsls	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	619a      	str	r2, [r3, #24]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002716:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002718:	695a      	ldr	r2, [r3, #20]
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002722:	4a05      	ldr	r2, [pc, #20]	@ (8002738 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002728:	88fb      	ldrh	r3, [r7, #6]
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f806 	bl	800273c <HAL_GPIO_EXTI_Callback>
  }
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af02      	add	r7, sp, #8
 8002758:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e101      	b.n	8002968 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe ff90 	bl	80016a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2203      	movs	r2, #3
 8002788:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002792:	d102      	bne.n	800279a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 fd02 	bl	80041a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	7c1a      	ldrb	r2, [r3, #16]
 80027ac:	f88d 2000 	strb.w	r2, [sp]
 80027b0:	3304      	adds	r3, #4
 80027b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027b4:	f001 fc94 	bl	80040e0 <USB_CoreInit>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0ce      	b.n	8002968 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 fcfa 	bl	80041ca <USB_SetCurrentMode>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0bf      	b.n	8002968 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	e04a      	b.n	8002884 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027ee:	7bfa      	ldrb	r2, [r7, #15]
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	440b      	add	r3, r1
 80027fc:	3315      	adds	r3, #21
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3314      	adds	r3, #20
 8002812:	7bfa      	ldrb	r2, [r7, #15]
 8002814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002816:	7bfa      	ldrb	r2, [r7, #15]
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	b298      	uxth	r0, r3
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	332e      	adds	r3, #46	@ 0x2e
 800282a:	4602      	mov	r2, r0
 800282c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3318      	adds	r3, #24
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002842:	7bfa      	ldrb	r2, [r7, #15]
 8002844:	6879      	ldr	r1, [r7, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	331c      	adds	r3, #28
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	4613      	mov	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	3320      	adds	r3, #32
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	3324      	adds	r3, #36	@ 0x24
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	3301      	adds	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	791b      	ldrb	r3, [r3, #4]
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	429a      	cmp	r2, r3
 800288c:	d3af      	bcc.n	80027ee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	73fb      	strb	r3, [r7, #15]
 8002892:	e044      	b.n	800291e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002894:	7bfa      	ldrb	r2, [r7, #15]
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	3301      	adds	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	791b      	ldrb	r3, [r3, #4]
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3b5      	bcc.n	8002894 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	7c1a      	ldrb	r2, [r3, #16]
 8002930:	f88d 2000 	strb.w	r2, [sp]
 8002934:	3304      	adds	r3, #4
 8002936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002938:	f001 fc94 	bl	8004264 <USB_DevInit>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d005      	beq.n	800294e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e00c      	b.n	8002968 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f001 fe5c 	bl	800461e <USB_DevDisconnect>

  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e267      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d075      	beq.n	8002a7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298e:	4b88      	ldr	r3, [pc, #544]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b04      	cmp	r3, #4
 8002998:	d00c      	beq.n	80029b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800299a:	4b85      	ldr	r3, [pc, #532]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d112      	bne.n	80029cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a6:	4b82      	ldr	r3, [pc, #520]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029b2:	d10b      	bne.n	80029cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d05b      	beq.n	8002a78 <HAL_RCC_OscConfig+0x108>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d157      	bne.n	8002a78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e242      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029d4:	d106      	bne.n	80029e4 <HAL_RCC_OscConfig+0x74>
 80029d6:	4b76      	ldr	r3, [pc, #472]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a75      	ldr	r2, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 80029dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	e01d      	b.n	8002a20 <HAL_RCC_OscConfig+0xb0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x98>
 80029ee:	4b70      	ldr	r3, [pc, #448]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6f      	ldr	r2, [pc, #444]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 80029f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f8:	6013      	str	r3, [r2, #0]
 80029fa:	4b6d      	ldr	r3, [pc, #436]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a6c      	ldr	r2, [pc, #432]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCC_OscConfig+0xb0>
 8002a08:	4b69      	ldr	r3, [pc, #420]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a68      	ldr	r2, [pc, #416]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002a0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b66      	ldr	r3, [pc, #408]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a65      	ldr	r2, [pc, #404]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002a1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7ff f840 	bl	8001aac <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a30:	f7ff f83c 	bl	8001aac <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	@ 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e207      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a42:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0xc0>
 8002a4e:	e014      	b.n	8002a7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7ff f82c 	bl	8001aac <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a58:	f7ff f828 	bl	8001aac <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b64      	cmp	r3, #100	@ 0x64
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e1f3      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a6a:	4b51      	ldr	r3, [pc, #324]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0xe8>
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d063      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a86:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00b      	beq.n	8002aaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a92:	4b47      	ldr	r3, [pc, #284]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9e:	4b44      	ldr	r3, [pc, #272]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d116      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	4b41      	ldr	r3, [pc, #260]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x152>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e1c7      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4937      	ldr	r1, [pc, #220]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad6:	e03a      	b.n	8002b4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d020      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ae0:	4b34      	ldr	r3, [pc, #208]	@ (8002bb4 <HAL_RCC_OscConfig+0x244>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe ffe1 	bl	8001aac <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aee:	f7fe ffdd 	bl	8001aac <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1a8      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b00:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d0f0      	beq.n	8002aee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0c:	4b28      	ldr	r3, [pc, #160]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4925      	ldr	r1, [pc, #148]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]
 8002b20:	e015      	b.n	8002b4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b22:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <HAL_RCC_OscConfig+0x244>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7fe ffc0 	bl	8001aac <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b30:	f7fe ffbc 	bl	8001aac <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e187      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b42:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d036      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b62:	4b15      	ldr	r3, [pc, #84]	@ (8002bb8 <HAL_RCC_OscConfig+0x248>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b68:	f7fe ffa0 	bl	8001aac <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b70:	f7fe ff9c 	bl	8001aac <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e167      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b82:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_OscConfig+0x240>)
 8002b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x200>
 8002b8e:	e01b      	b.n	8002bc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_RCC_OscConfig+0x248>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7fe ff89 	bl	8001aac <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	e00e      	b.n	8002bbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9e:	f7fe ff85 	bl	8001aac <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d907      	bls.n	8002bbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e150      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	42470000 	.word	0x42470000
 8002bb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bbc:	4b88      	ldr	r3, [pc, #544]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1ea      	bne.n	8002b9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0304 	and.w	r3, r3, #4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8097 	beq.w	8002d04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bda:	4b81      	ldr	r3, [pc, #516]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	4b7d      	ldr	r3, [pc, #500]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	4a7c      	ldr	r2, [pc, #496]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf6:	4b7a      	ldr	r3, [pc, #488]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c06:	4b77      	ldr	r3, [pc, #476]	@ (8002de4 <HAL_RCC_OscConfig+0x474>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c12:	4b74      	ldr	r3, [pc, #464]	@ (8002de4 <HAL_RCC_OscConfig+0x474>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a73      	ldr	r2, [pc, #460]	@ (8002de4 <HAL_RCC_OscConfig+0x474>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe ff45 	bl	8001aac <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7fe ff41 	bl	8001aac <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e10c      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c38:	4b6a      	ldr	r3, [pc, #424]	@ (8002de4 <HAL_RCC_OscConfig+0x474>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x2ea>
 8002c4c:	4b64      	ldr	r3, [pc, #400]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	4a63      	ldr	r2, [pc, #396]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c58:	e01c      	b.n	8002c94 <HAL_RCC_OscConfig+0x324>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x30c>
 8002c62:	4b5f      	ldr	r3, [pc, #380]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c66:	4a5e      	ldr	r2, [pc, #376]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c72:	4a5b      	ldr	r2, [pc, #364]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCC_OscConfig+0x324>
 8002c7c:	4b58      	ldr	r3, [pc, #352]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c80:	4a57      	ldr	r2, [pc, #348]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c88:	4b55      	ldr	r3, [pc, #340]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8c:	4a54      	ldr	r2, [pc, #336]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002c8e:	f023 0304 	bic.w	r3, r3, #4
 8002c92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d015      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fe ff06 	bl	8001aac <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7fe ff02 	bl	8001aac <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0cb      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cba:	4b49      	ldr	r3, [pc, #292]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0ee      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x334>
 8002cc6:	e014      	b.n	8002cf2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc8:	f7fe fef0 	bl	8001aac <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cd0:	f7fe feec 	bl	8001aac <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0b5      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ee      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf2:	7dfb      	ldrb	r3, [r7, #23]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf8:	4b39      	ldr	r3, [pc, #228]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	4a38      	ldr	r2, [pc, #224]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002cfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 80a1 	beq.w	8002e50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0e:	4b34      	ldr	r3, [pc, #208]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b08      	cmp	r3, #8
 8002d18:	d05c      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d141      	bne.n	8002da6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b31      	ldr	r3, [pc, #196]	@ (8002de8 <HAL_RCC_OscConfig+0x478>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe fec0 	bl	8001aac <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe febc 	bl	8001aac <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e087      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d42:	4b27      	ldr	r3, [pc, #156]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69da      	ldr	r2, [r3, #28]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5c:	019b      	lsls	r3, r3, #6
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	085b      	lsrs	r3, r3, #1
 8002d66:	3b01      	subs	r3, #1
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	491b      	ldr	r1, [pc, #108]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d78:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <HAL_RCC_OscConfig+0x478>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fe95 	bl	8001aac <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d84:	e008      	b.n	8002d98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d86:	f7fe fe91 	bl	8001aac <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e05c      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d98:	4b11      	ldr	r3, [pc, #68]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_RCC_OscConfig+0x416>
 8002da4:	e054      	b.n	8002e50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da6:	4b10      	ldr	r3, [pc, #64]	@ (8002de8 <HAL_RCC_OscConfig+0x478>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fe7e 	bl	8001aac <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe fe7a 	bl	8001aac <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e045      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x444>
 8002dd2:	e03d      	b.n	8002e50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e038      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40007000 	.word	0x40007000
 8002de8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dec:	4b1b      	ldr	r3, [pc, #108]	@ (8002e5c <HAL_RCC_OscConfig+0x4ec>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d028      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d121      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d11a      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d111      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	3b01      	subs	r3, #1
 8002e36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40023800 	.word	0x40023800

08002e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0cc      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b68      	ldr	r3, [pc, #416]	@ (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d90c      	bls.n	8002e9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b65      	ldr	r3, [pc, #404]	@ (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b63      	ldr	r3, [pc, #396]	@ (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0b8      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d020      	beq.n	8002eea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb4:	4b59      	ldr	r3, [pc, #356]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a58      	ldr	r2, [pc, #352]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ecc:	4b53      	ldr	r3, [pc, #332]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a52      	ldr	r2, [pc, #328]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ed6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed8:	4b50      	ldr	r3, [pc, #320]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	494d      	ldr	r1, [pc, #308]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d044      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d107      	bne.n	8002f0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efe:	4b47      	ldr	r3, [pc, #284]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d119      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e07f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d107      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d109      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e06f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e067      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3e:	4b37      	ldr	r3, [pc, #220]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f023 0203 	bic.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4934      	ldr	r1, [pc, #208]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f50:	f7fe fdac 	bl	8001aac <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	e00a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f58:	f7fe fda8 	bl	8001aac <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e04f      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 020c 	and.w	r2, r3, #12
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d1eb      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b25      	ldr	r3, [pc, #148]	@ (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d20c      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <HAL_RCC_ClockConfig+0x1b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e032      	b.n	800300e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb4:	4b19      	ldr	r3, [pc, #100]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	4916      	ldr	r1, [pc, #88]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fd2:	4b12      	ldr	r3, [pc, #72]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	490e      	ldr	r1, [pc, #56]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe6:	f000 f821 	bl	800302c <HAL_RCC_GetSysClockFreq>
 8002fea:	4602      	mov	r2, r0
 8002fec:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	490a      	ldr	r1, [pc, #40]	@ (8003020 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	5ccb      	ldrb	r3, [r1, r3]
 8002ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffe:	4a09      	ldr	r2, [pc, #36]	@ (8003024 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <HAL_RCC_ClockConfig+0x1c8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fd0c 	bl	8001a24 <HAL_InitTick>

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40023c00 	.word	0x40023c00
 800301c:	40023800 	.word	0x40023800
 8003020:	08007034 	.word	0x08007034
 8003024:	20000000 	.word	0x20000000
 8003028:	20000004 	.word	0x20000004

0800302c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800302c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003030:	b094      	sub	sp, #80	@ 0x50
 8003032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	647b      	str	r3, [r7, #68]	@ 0x44
 8003038:	2300      	movs	r3, #0
 800303a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800303c:	2300      	movs	r3, #0
 800303e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003044:	4b79      	ldr	r3, [pc, #484]	@ (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b08      	cmp	r3, #8
 800304e:	d00d      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x40>
 8003050:	2b08      	cmp	r3, #8
 8003052:	f200 80e1 	bhi.w	8003218 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x34>
 800305a:	2b04      	cmp	r3, #4
 800305c:	d003      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x3a>
 800305e:	e0db      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b73      	ldr	r3, [pc, #460]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x204>)
 8003062:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003064:	e0db      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003066:	4b73      	ldr	r3, [pc, #460]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x208>)
 8003068:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800306a:	e0d8      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306c:	4b6f      	ldr	r3, [pc, #444]	@ (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003074:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003076:	4b6d      	ldr	r3, [pc, #436]	@ (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d063      	beq.n	800314a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003082:	4b6a      	ldr	r3, [pc, #424]	@ (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	099b      	lsrs	r3, r3, #6
 8003088:	2200      	movs	r2, #0
 800308a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800308c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800308e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003094:	633b      	str	r3, [r7, #48]	@ 0x30
 8003096:	2300      	movs	r3, #0
 8003098:	637b      	str	r3, [r7, #52]	@ 0x34
 800309a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800309e:	4622      	mov	r2, r4
 80030a0:	462b      	mov	r3, r5
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	0159      	lsls	r1, r3, #5
 80030ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b0:	0150      	lsls	r0, r2, #5
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4621      	mov	r1, r4
 80030b8:	1a51      	subs	r1, r2, r1
 80030ba:	6139      	str	r1, [r7, #16]
 80030bc:	4629      	mov	r1, r5
 80030be:	eb63 0301 	sbc.w	r3, r3, r1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d0:	4659      	mov	r1, fp
 80030d2:	018b      	lsls	r3, r1, #6
 80030d4:	4651      	mov	r1, sl
 80030d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030da:	4651      	mov	r1, sl
 80030dc:	018a      	lsls	r2, r1, #6
 80030de:	4651      	mov	r1, sl
 80030e0:	ebb2 0801 	subs.w	r8, r2, r1
 80030e4:	4659      	mov	r1, fp
 80030e6:	eb63 0901 	sbc.w	r9, r3, r1
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030fe:	4690      	mov	r8, r2
 8003100:	4699      	mov	r9, r3
 8003102:	4623      	mov	r3, r4
 8003104:	eb18 0303 	adds.w	r3, r8, r3
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	462b      	mov	r3, r5
 800310c:	eb49 0303 	adc.w	r3, r9, r3
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	f04f 0200 	mov.w	r2, #0
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800311e:	4629      	mov	r1, r5
 8003120:	024b      	lsls	r3, r1, #9
 8003122:	4621      	mov	r1, r4
 8003124:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003128:	4621      	mov	r1, r4
 800312a:	024a      	lsls	r2, r1, #9
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003132:	2200      	movs	r2, #0
 8003134:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003136:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003138:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800313c:	f7fd fd44 	bl	8000bc8 <__aeabi_uldivmod>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4613      	mov	r3, r2
 8003146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003148:	e058      	b.n	80031fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314a:	4b38      	ldr	r3, [pc, #224]	@ (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	099b      	lsrs	r3, r3, #6
 8003150:	2200      	movs	r2, #0
 8003152:	4618      	mov	r0, r3
 8003154:	4611      	mov	r1, r2
 8003156:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800315a:	623b      	str	r3, [r7, #32]
 800315c:	2300      	movs	r3, #0
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003164:	4642      	mov	r2, r8
 8003166:	464b      	mov	r3, r9
 8003168:	f04f 0000 	mov.w	r0, #0
 800316c:	f04f 0100 	mov.w	r1, #0
 8003170:	0159      	lsls	r1, r3, #5
 8003172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003176:	0150      	lsls	r0, r2, #5
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4641      	mov	r1, r8
 800317e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003182:	4649      	mov	r1, r9
 8003184:	eb63 0b01 	sbc.w	fp, r3, r1
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003194:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003198:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800319c:	ebb2 040a 	subs.w	r4, r2, sl
 80031a0:	eb63 050b 	sbc.w	r5, r3, fp
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	f04f 0300 	mov.w	r3, #0
 80031ac:	00eb      	lsls	r3, r5, #3
 80031ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b2:	00e2      	lsls	r2, r4, #3
 80031b4:	4614      	mov	r4, r2
 80031b6:	461d      	mov	r5, r3
 80031b8:	4643      	mov	r3, r8
 80031ba:	18e3      	adds	r3, r4, r3
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	464b      	mov	r3, r9
 80031c0:	eb45 0303 	adc.w	r3, r5, r3
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031d2:	4629      	mov	r1, r5
 80031d4:	028b      	lsls	r3, r1, #10
 80031d6:	4621      	mov	r1, r4
 80031d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031dc:	4621      	mov	r1, r4
 80031de:	028a      	lsls	r2, r1, #10
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031e6:	2200      	movs	r2, #0
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	61fa      	str	r2, [r7, #28]
 80031ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f0:	f7fd fcea 	bl	8000bc8 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4613      	mov	r3, r2
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031fc:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_RCC_GetSysClockFreq+0x200>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	3301      	adds	r3, #1
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800320c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800320e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003216:	e002      	b.n	800321e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003218:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x204>)
 800321a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800321c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800321e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003220:	4618      	mov	r0, r3
 8003222:	3750      	adds	r7, #80	@ 0x50
 8003224:	46bd      	mov	sp, r7
 8003226:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	00f42400 	.word	0x00f42400
 8003234:	007a1200 	.word	0x007a1200

08003238 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800323c:	4b03      	ldr	r3, [pc, #12]	@ (800324c <HAL_RCC_GetHCLKFreq+0x14>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000000 	.word	0x20000000

08003250 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003254:	f7ff fff0 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <HAL_RCC_GetPCLK1Freq+0x20>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0a9b      	lsrs	r3, r3, #10
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	4903      	ldr	r1, [pc, #12]	@ (8003274 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800326c:	4618      	mov	r0, r3
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40023800 	.word	0x40023800
 8003274:	08007044 	.word	0x08007044

08003278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800327c:	f7ff ffdc 	bl	8003238 <HAL_RCC_GetHCLKFreq>
 8003280:	4602      	mov	r2, r0
 8003282:	4b05      	ldr	r3, [pc, #20]	@ (8003298 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	0b5b      	lsrs	r3, r3, #13
 8003288:	f003 0307 	and.w	r3, r3, #7
 800328c:	4903      	ldr	r1, [pc, #12]	@ (800329c <HAL_RCC_GetPCLK2Freq+0x24>)
 800328e:	5ccb      	ldrb	r3, [r1, r3]
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40023800 	.word	0x40023800
 800329c:	08007044 	.word	0x08007044

080032a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e041      	b.n	8003336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d106      	bne.n	80032cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7fe f97c 	bl	80015c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f000 f9b6 	bl	8003650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
	...

08003340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d001      	beq.n	8003358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e04e      	b.n	80033f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a23      	ldr	r2, [pc, #140]	@ (8003404 <HAL_TIM_Base_Start_IT+0xc4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d022      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x80>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003382:	d01d      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x80>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1f      	ldr	r2, [pc, #124]	@ (8003408 <HAL_TIM_Base_Start_IT+0xc8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d018      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x80>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1e      	ldr	r2, [pc, #120]	@ (800340c <HAL_TIM_Base_Start_IT+0xcc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d013      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x80>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <HAL_TIM_Base_Start_IT+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00e      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x80>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003414 <HAL_TIM_Base_Start_IT+0xd4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d009      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x80>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a19      	ldr	r2, [pc, #100]	@ (8003418 <HAL_TIM_Base_Start_IT+0xd8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_TIM_Base_Start_IT+0x80>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a18      	ldr	r2, [pc, #96]	@ (800341c <HAL_TIM_Base_Start_IT+0xdc>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d111      	bne.n	80033e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d010      	beq.n	80033f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0201 	orr.w	r2, r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e2:	e007      	b.n	80033f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40010400 	.word	0x40010400
 8003418:	40014000 	.word	0x40014000
 800341c:	40001800 	.word	0x40001800

08003420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d020      	beq.n	8003484 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d01b      	beq.n	8003484 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0202 	mvn.w	r2, #2
 8003454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8d2 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 8003470:	e005      	b.n	800347e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8c4 	bl	8003600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 f8d5 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	d020      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f06f 0204 	mvn.w	r2, #4
 80034a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f8ac 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 80034bc:	e005      	b.n	80034ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f89e 	bl	8003600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f8af 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d020      	beq.n	800351c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d01b      	beq.n	800351c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f06f 0208 	mvn.w	r2, #8
 80034ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2204      	movs	r2, #4
 80034f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f886 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 8003508:	e005      	b.n	8003516 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f878 	bl	8003600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f889 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b00      	cmp	r3, #0
 8003524:	d020      	beq.n	8003568 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01b      	beq.n	8003568 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0210 	mvn.w	r2, #16
 8003538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2208      	movs	r2, #8
 800353e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f860 	bl	8003614 <HAL_TIM_IC_CaptureCallback>
 8003554:	e005      	b.n	8003562 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f852 	bl	8003600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f863 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0201 	mvn.w	r2, #1
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7fd fee4 	bl	8001354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f982 	bl	80038b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f834 	bl	800363c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0220 	mvn.w	r2, #32
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f954 	bl	80038a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a46      	ldr	r2, [pc, #280]	@ (800377c <TIM_Base_SetConfig+0x12c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800366e:	d00f      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a43      	ldr	r2, [pc, #268]	@ (8003780 <TIM_Base_SetConfig+0x130>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00b      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a42      	ldr	r2, [pc, #264]	@ (8003784 <TIM_Base_SetConfig+0x134>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a41      	ldr	r2, [pc, #260]	@ (8003788 <TIM_Base_SetConfig+0x138>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a40      	ldr	r2, [pc, #256]	@ (800378c <TIM_Base_SetConfig+0x13c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d108      	bne.n	80036a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a35      	ldr	r2, [pc, #212]	@ (800377c <TIM_Base_SetConfig+0x12c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d02b      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b0:	d027      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a32      	ldr	r2, [pc, #200]	@ (8003780 <TIM_Base_SetConfig+0x130>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d023      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a31      	ldr	r2, [pc, #196]	@ (8003784 <TIM_Base_SetConfig+0x134>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d01f      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a30      	ldr	r2, [pc, #192]	@ (8003788 <TIM_Base_SetConfig+0x138>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d01b      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2f      	ldr	r2, [pc, #188]	@ (800378c <TIM_Base_SetConfig+0x13c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d017      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003790 <TIM_Base_SetConfig+0x140>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003794 <TIM_Base_SetConfig+0x144>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d00f      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003798 <TIM_Base_SetConfig+0x148>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00b      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	@ (800379c <TIM_Base_SetConfig+0x14c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d007      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a2a      	ldr	r2, [pc, #168]	@ (80037a0 <TIM_Base_SetConfig+0x150>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d003      	beq.n	8003702 <TIM_Base_SetConfig+0xb2>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a29      	ldr	r2, [pc, #164]	@ (80037a4 <TIM_Base_SetConfig+0x154>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d108      	bne.n	8003714 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4313      	orrs	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a10      	ldr	r2, [pc, #64]	@ (800377c <TIM_Base_SetConfig+0x12c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0xf8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a12      	ldr	r2, [pc, #72]	@ (800378c <TIM_Base_SetConfig+0x13c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d103      	bne.n	8003750 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d105      	bne.n	800376e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f023 0201 	bic.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]
  }
}
 800376e:	bf00      	nop
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40010000 	.word	0x40010000
 8003780:	40000400 	.word	0x40000400
 8003784:	40000800 	.word	0x40000800
 8003788:	40000c00 	.word	0x40000c00
 800378c:	40010400 	.word	0x40010400
 8003790:	40014000 	.word	0x40014000
 8003794:	40014400 	.word	0x40014400
 8003798:	40014800 	.word	0x40014800
 800379c:	40001800 	.word	0x40001800
 80037a0:	40001c00 	.word	0x40001c00
 80037a4:	40002000 	.word	0x40002000

080037a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e05a      	b.n	8003876 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a21      	ldr	r2, [pc, #132]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d022      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800380c:	d01d      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1d      	ldr	r2, [pc, #116]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d018      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d013      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1a      	ldr	r2, [pc, #104]	@ (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a18      	ldr	r2, [pc, #96]	@ (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d009      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a17      	ldr	r2, [pc, #92]	@ (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a15      	ldr	r2, [pc, #84]	@ (800389c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10c      	bne.n	8003864 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003850:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	4313      	orrs	r3, r2
 800385a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3714      	adds	r7, #20
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00
 8003894:	40010400 	.word	0x40010400
 8003898:	40014000 	.word	0x40014000
 800389c:	40001800 	.word	0x40001800

080038a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e042      	b.n	8003960 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fe90 	bl	8001614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2224      	movs	r2, #36	@ 0x24
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800390a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f973 	bl	8003bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003920:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003930:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003940:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	@ 0x28
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b20      	cmp	r3, #32
 8003986:	d175      	bne.n	8003a74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_UART_Transmit+0x2c>
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e06e      	b.n	8003a76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2221      	movs	r2, #33	@ 0x21
 80039a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039a6:	f7fe f881 	bl	8001aac <HAL_GetTick>
 80039aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	88fa      	ldrh	r2, [r7, #6]
 80039b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039c0:	d108      	bne.n	80039d4 <HAL_UART_Transmit+0x6c>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d104      	bne.n	80039d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	e003      	b.n	80039dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d8:	2300      	movs	r3, #0
 80039da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039dc:	e02e      	b.n	8003a3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2200      	movs	r2, #0
 80039e6:	2180      	movs	r1, #128	@ 0x80
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 f848 	bl	8003a7e <UART_WaitOnFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e03a      	b.n	8003a76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10b      	bne.n	8003a1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	3302      	adds	r3, #2
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	e007      	b.n	8003a2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	781a      	ldrb	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1cb      	bne.n	80039de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2140      	movs	r1, #64	@ 0x40
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f814 	bl	8003a7e <UART_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e006      	b.n	8003a76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e000      	b.n	8003a76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a74:	2302      	movs	r3, #2
  }
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	603b      	str	r3, [r7, #0]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8e:	e03b      	b.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d037      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a98:	f7fe f808 	bl	8001aac <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	6a3a      	ldr	r2, [r7, #32]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d302      	bcc.n	8003aae <UART_WaitOnFlagUntilTimeout+0x30>
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e03a      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d023      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b80      	cmp	r3, #128	@ 0x80
 8003ac4:	d020      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b40      	cmp	r3, #64	@ 0x40
 8003aca:	d01d      	beq.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0308 	and.w	r3, r3, #8
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d116      	bne.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	617b      	str	r3, [r7, #20]
 8003aee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 f81d 	bl	8003b30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2208      	movs	r2, #8
 8003afa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e00f      	b.n	8003b28 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	79fb      	ldrb	r3, [r7, #7]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d0b4      	beq.n	8003a90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b095      	sub	sp, #84	@ 0x54
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b58:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b60:	e841 2300 	strex	r3, r2, [r1]
 8003b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e5      	bne.n	8003b38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3314      	adds	r3, #20
 8003b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3314      	adds	r3, #20
 8003b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b94:	e841 2300 	strex	r3, r2, [r1]
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1e5      	bne.n	8003b6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d119      	bne.n	8003bdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f023 0310 	bic.w	r3, r3, #16
 8003bbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bc8:	61ba      	str	r2, [r7, #24]
 8003bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6979      	ldr	r1, [r7, #20]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bea:	bf00      	nop
 8003bec:	3754      	adds	r7, #84	@ 0x54
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bfc:	b0c0      	sub	sp, #256	@ 0x100
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c14:	68d9      	ldr	r1, [r3, #12]
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	ea40 0301 	orr.w	r3, r0, r1
 8003c20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	431a      	orrs	r2, r3
 8003c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c50:	f021 010c 	bic.w	r1, r1, #12
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	6999      	ldr	r1, [r3, #24]
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	ea40 0301 	orr.w	r3, r0, r1
 8003c7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b8f      	ldr	r3, [pc, #572]	@ (8003ec4 <UART_SetConfig+0x2cc>)
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d005      	beq.n	8003c98 <UART_SetConfig+0xa0>
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b8d      	ldr	r3, [pc, #564]	@ (8003ec8 <UART_SetConfig+0x2d0>)
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d104      	bne.n	8003ca2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c98:	f7ff faee 	bl	8003278 <HAL_RCC_GetPCLK2Freq>
 8003c9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ca0:	e003      	b.n	8003caa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ca2:	f7ff fad5 	bl	8003250 <HAL_RCC_GetPCLK1Freq>
 8003ca6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cb4:	f040 810c 	bne.w	8003ed0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cc2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003cc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003cca:	4622      	mov	r2, r4
 8003ccc:	462b      	mov	r3, r5
 8003cce:	1891      	adds	r1, r2, r2
 8003cd0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cda:	4621      	mov	r1, r4
 8003cdc:	eb12 0801 	adds.w	r8, r2, r1
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	eb43 0901 	adc.w	r9, r3, r1
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cfa:	4690      	mov	r8, r2
 8003cfc:	4699      	mov	r9, r3
 8003cfe:	4623      	mov	r3, r4
 8003d00:	eb18 0303 	adds.w	r3, r8, r3
 8003d04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d08:	462b      	mov	r3, r5
 8003d0a:	eb49 0303 	adc.w	r3, r9, r3
 8003d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d26:	460b      	mov	r3, r1
 8003d28:	18db      	adds	r3, r3, r3
 8003d2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	eb42 0303 	adc.w	r3, r2, r3
 8003d32:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d3c:	f7fc ff44 	bl	8000bc8 <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4b61      	ldr	r3, [pc, #388]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003d46:	fba3 2302 	umull	r2, r3, r3, r2
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	011c      	lsls	r4, r3, #4
 8003d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d52:	2200      	movs	r2, #0
 8003d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d60:	4642      	mov	r2, r8
 8003d62:	464b      	mov	r3, r9
 8003d64:	1891      	adds	r1, r2, r2
 8003d66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d68:	415b      	adcs	r3, r3
 8003d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d70:	4641      	mov	r1, r8
 8003d72:	eb12 0a01 	adds.w	sl, r2, r1
 8003d76:	4649      	mov	r1, r9
 8003d78:	eb43 0b01 	adc.w	fp, r3, r1
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d90:	4692      	mov	sl, r2
 8003d92:	469b      	mov	fp, r3
 8003d94:	4643      	mov	r3, r8
 8003d96:	eb1a 0303 	adds.w	r3, sl, r3
 8003d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d9e:	464b      	mov	r3, r9
 8003da0:	eb4b 0303 	adc.w	r3, fp, r3
 8003da4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003db4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003db8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	18db      	adds	r3, r3, r3
 8003dc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	eb42 0303 	adc.w	r3, r2, r3
 8003dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dd2:	f7fc fef9 	bl	8000bc8 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003dde:	fba3 2301 	umull	r2, r3, r3, r1
 8003de2:	095b      	lsrs	r3, r3, #5
 8003de4:	2264      	movs	r2, #100	@ 0x64
 8003de6:	fb02 f303 	mul.w	r3, r2, r3
 8003dea:	1acb      	subs	r3, r1, r3
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003df2:	4b36      	ldr	r3, [pc, #216]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003df4:	fba3 2302 	umull	r2, r3, r3, r2
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e00:	441c      	add	r4, r3
 8003e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e06:	2200      	movs	r2, #0
 8003e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e14:	4642      	mov	r2, r8
 8003e16:	464b      	mov	r3, r9
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e24:	4641      	mov	r1, r8
 8003e26:	1851      	adds	r1, r2, r1
 8003e28:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	414b      	adcs	r3, r1
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e3c:	4659      	mov	r1, fp
 8003e3e:	00cb      	lsls	r3, r1, #3
 8003e40:	4651      	mov	r1, sl
 8003e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e46:	4651      	mov	r1, sl
 8003e48:	00ca      	lsls	r2, r1, #3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	4642      	mov	r2, r8
 8003e52:	189b      	adds	r3, r3, r2
 8003e54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e58:	464b      	mov	r3, r9
 8003e5a:	460a      	mov	r2, r1
 8003e5c:	eb42 0303 	adc.w	r3, r2, r3
 8003e60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e78:	460b      	mov	r3, r1
 8003e7a:	18db      	adds	r3, r3, r3
 8003e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e7e:	4613      	mov	r3, r2
 8003e80:	eb42 0303 	adc.w	r3, r2, r3
 8003e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e8e:	f7fc fe9b 	bl	8000bc8 <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003e98:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9c:	095b      	lsrs	r3, r3, #5
 8003e9e:	2164      	movs	r1, #100	@ 0x64
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	3332      	adds	r3, #50	@ 0x32
 8003eaa:	4a08      	ldr	r2, [pc, #32]	@ (8003ecc <UART_SetConfig+0x2d4>)
 8003eac:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb0:	095b      	lsrs	r3, r3, #5
 8003eb2:	f003 0207 	and.w	r2, r3, #7
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4422      	add	r2, r4
 8003ebe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ec0:	e106      	b.n	80040d0 <UART_SetConfig+0x4d8>
 8003ec2:	bf00      	nop
 8003ec4:	40011000 	.word	0x40011000
 8003ec8:	40011400 	.word	0x40011400
 8003ecc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ede:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ee2:	4642      	mov	r2, r8
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	1891      	adds	r1, r2, r2
 8003ee8:	6239      	str	r1, [r7, #32]
 8003eea:	415b      	adcs	r3, r3
 8003eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	1854      	adds	r4, r2, r1
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	eb43 0501 	adc.w	r5, r3, r1
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	00eb      	lsls	r3, r5, #3
 8003f06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f0a:	00e2      	lsls	r2, r4, #3
 8003f0c:	4614      	mov	r4, r2
 8003f0e:	461d      	mov	r5, r3
 8003f10:	4643      	mov	r3, r8
 8003f12:	18e3      	adds	r3, r4, r3
 8003f14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f18:	464b      	mov	r3, r9
 8003f1a:	eb45 0303 	adc.w	r3, r5, r3
 8003f1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f3e:	4629      	mov	r1, r5
 8003f40:	008b      	lsls	r3, r1, #2
 8003f42:	4621      	mov	r1, r4
 8003f44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f48:	4621      	mov	r1, r4
 8003f4a:	008a      	lsls	r2, r1, #2
 8003f4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f50:	f7fc fe3a 	bl	8000bc8 <__aeabi_uldivmod>
 8003f54:	4602      	mov	r2, r0
 8003f56:	460b      	mov	r3, r1
 8003f58:	4b60      	ldr	r3, [pc, #384]	@ (80040dc <UART_SetConfig+0x4e4>)
 8003f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	011c      	lsls	r4, r3, #4
 8003f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f66:	2200      	movs	r2, #0
 8003f68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f74:	4642      	mov	r2, r8
 8003f76:	464b      	mov	r3, r9
 8003f78:	1891      	adds	r1, r2, r2
 8003f7a:	61b9      	str	r1, [r7, #24]
 8003f7c:	415b      	adcs	r3, r3
 8003f7e:	61fb      	str	r3, [r7, #28]
 8003f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f84:	4641      	mov	r1, r8
 8003f86:	1851      	adds	r1, r2, r1
 8003f88:	6139      	str	r1, [r7, #16]
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	414b      	adcs	r3, r1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f9c:	4659      	mov	r1, fp
 8003f9e:	00cb      	lsls	r3, r1, #3
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa6:	4651      	mov	r1, sl
 8003fa8:	00ca      	lsls	r2, r1, #3
 8003faa:	4610      	mov	r0, r2
 8003fac:	4619      	mov	r1, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4642      	mov	r2, r8
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fb8:	464b      	mov	r3, r9
 8003fba:	460a      	mov	r2, r1
 8003fbc:	eb42 0303 	adc.w	r3, r2, r3
 8003fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003fdc:	4649      	mov	r1, r9
 8003fde:	008b      	lsls	r3, r1, #2
 8003fe0:	4641      	mov	r1, r8
 8003fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fe6:	4641      	mov	r1, r8
 8003fe8:	008a      	lsls	r2, r1, #2
 8003fea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fee:	f7fc fdeb 	bl	8000bc8 <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4b38      	ldr	r3, [pc, #224]	@ (80040dc <UART_SetConfig+0x4e4>)
 8003ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8003ffe:	095b      	lsrs	r3, r3, #5
 8004000:	2264      	movs	r2, #100	@ 0x64
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	1acb      	subs	r3, r1, r3
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	3332      	adds	r3, #50	@ 0x32
 800400c:	4a33      	ldr	r2, [pc, #204]	@ (80040dc <UART_SetConfig+0x4e4>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004018:	441c      	add	r4, r3
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800401e:	2200      	movs	r2, #0
 8004020:	673b      	str	r3, [r7, #112]	@ 0x70
 8004022:	677a      	str	r2, [r7, #116]	@ 0x74
 8004024:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	1891      	adds	r1, r2, r2
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	415b      	adcs	r3, r3
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004038:	4641      	mov	r1, r8
 800403a:	1851      	adds	r1, r2, r1
 800403c:	6039      	str	r1, [r7, #0]
 800403e:	4649      	mov	r1, r9
 8004040:	414b      	adcs	r3, r1
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004050:	4659      	mov	r1, fp
 8004052:	00cb      	lsls	r3, r1, #3
 8004054:	4651      	mov	r1, sl
 8004056:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800405a:	4651      	mov	r1, sl
 800405c:	00ca      	lsls	r2, r1, #3
 800405e:	4610      	mov	r0, r2
 8004060:	4619      	mov	r1, r3
 8004062:	4603      	mov	r3, r0
 8004064:	4642      	mov	r2, r8
 8004066:	189b      	adds	r3, r3, r2
 8004068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800406a:	464b      	mov	r3, r9
 800406c:	460a      	mov	r2, r1
 800406e:	eb42 0303 	adc.w	r3, r2, r3
 8004072:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	663b      	str	r3, [r7, #96]	@ 0x60
 800407e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800408c:	4649      	mov	r1, r9
 800408e:	008b      	lsls	r3, r1, #2
 8004090:	4641      	mov	r1, r8
 8004092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004096:	4641      	mov	r1, r8
 8004098:	008a      	lsls	r2, r1, #2
 800409a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800409e:	f7fc fd93 	bl	8000bc8 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <UART_SetConfig+0x4e4>)
 80040a8:	fba3 1302 	umull	r1, r3, r3, r2
 80040ac:	095b      	lsrs	r3, r3, #5
 80040ae:	2164      	movs	r1, #100	@ 0x64
 80040b0:	fb01 f303 	mul.w	r3, r1, r3
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	3332      	adds	r3, #50	@ 0x32
 80040ba:	4a08      	ldr	r2, [pc, #32]	@ (80040dc <UART_SetConfig+0x4e4>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	f003 020f 	and.w	r2, r3, #15
 80040c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4422      	add	r2, r4
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040d6:	46bd      	mov	sp, r7
 80040d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040dc:	51eb851f 	.word	0x51eb851f

080040e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040e0:	b084      	sub	sp, #16
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
 80040ea:	f107 001c 	add.w	r0, r7, #28
 80040ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040f2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d123      	bne.n	8004142 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800410e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004122:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 faa0 	bl	800467c <USB_CoreReset>
 800413c:	4603      	mov	r3, r0
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	e01b      	b.n	800417a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa94 	bl	800467c <USB_CoreReset>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004158:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004164:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	639a      	str	r2, [r3, #56]	@ 0x38
 800416c:	e005      	b.n	800417a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800417a:	7fbb      	ldrb	r3, [r7, #30]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d10b      	bne.n	8004198 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f043 0206 	orr.w	r2, r3, #6
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004198:	7bfb      	ldrb	r3, [r7, #15]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041a4:	b004      	add	sp, #16
 80041a6:	4770      	bx	lr

080041a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 0201 	bic.w	r2, r3, #1
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d115      	bne.n	8004218 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80041f8:	200a      	movs	r0, #10
 80041fa:	f7fd fc63 	bl	8001ac4 <HAL_Delay>
      ms += 10U;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	330a      	adds	r3, #10
 8004202:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 fa2b 	bl	8004660 <USB_GetMode>
 800420a:	4603      	mov	r3, r0
 800420c:	2b01      	cmp	r3, #1
 800420e:	d01e      	beq.n	800424e <USB_SetCurrentMode+0x84>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2bc7      	cmp	r3, #199	@ 0xc7
 8004214:	d9f0      	bls.n	80041f8 <USB_SetCurrentMode+0x2e>
 8004216:	e01a      	b.n	800424e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d115      	bne.n	800424a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800422a:	200a      	movs	r0, #10
 800422c:	f7fd fc4a 	bl	8001ac4 <HAL_Delay>
      ms += 10U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	330a      	adds	r3, #10
 8004234:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa12 	bl	8004660 <USB_GetMode>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <USB_SetCurrentMode+0x84>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2bc7      	cmp	r3, #199	@ 0xc7
 8004246:	d9f0      	bls.n	800422a <USB_SetCurrentMode+0x60>
 8004248:	e001      	b.n	800424e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e005      	b.n	800425a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2bc8      	cmp	r3, #200	@ 0xc8
 8004252:	d101      	bne.n	8004258 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004264:	b084      	sub	sp, #16
 8004266:	b580      	push	{r7, lr}
 8004268:	b086      	sub	sp, #24
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	e009      	b.n	8004298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	3340      	adds	r3, #64	@ 0x40
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	2200      	movs	r2, #0
 8004290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	3301      	adds	r3, #1
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	2b0e      	cmp	r3, #14
 800429c:	d9f2      	bls.n	8004284 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800429e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11c      	bne.n	80042e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80042de:	e00b      	b.n	80042f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042fe:	461a      	mov	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004304:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10d      	bne.n	8004328 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800430c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004310:	2b00      	cmp	r3, #0
 8004312:	d104      	bne.n	800431e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004314:	2100      	movs	r1, #0
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f968 	bl	80045ec <USB_SetDevSpeed>
 800431c:	e008      	b.n	8004330 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800431e:	2101      	movs	r1, #1
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f963 	bl	80045ec <USB_SetDevSpeed>
 8004326:	e003      	b.n	8004330 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004328:	2103      	movs	r1, #3
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f95e 	bl	80045ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004330:	2110      	movs	r1, #16
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f8fa 	bl	800452c <USB_FlushTxFifo>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f924 	bl	8004590 <USB_FlushRxFifo>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004358:	461a      	mov	r2, r3
 800435a:	2300      	movs	r3, #0
 800435c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004364:	461a      	mov	r2, r3
 8004366:	2300      	movs	r3, #0
 8004368:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004370:	461a      	mov	r2, r3
 8004372:	2300      	movs	r3, #0
 8004374:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	e043      	b.n	8004404 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800438e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004392:	d118      	bne.n	80043c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a6:	461a      	mov	r2, r3
 80043a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e013      	b.n	80043d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043bc:	461a      	mov	r2, r3
 80043be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	e008      	b.n	80043d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043d2:	461a      	mov	r2, r3
 80043d4:	2300      	movs	r3, #0
 80043d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043e4:	461a      	mov	r2, r3
 80043e6:	2300      	movs	r3, #0
 80043e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f6:	461a      	mov	r2, r3
 80043f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3301      	adds	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004408:	461a      	mov	r2, r3
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4293      	cmp	r3, r2
 800440e:	d3b5      	bcc.n	800437c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004410:	2300      	movs	r3, #0
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	e043      	b.n	800449e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	015a      	lsls	r2, r3, #5
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4413      	add	r3, r2
 800441e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800442c:	d118      	bne.n	8004460 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004440:	461a      	mov	r2, r3
 8004442:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	e013      	b.n	8004472 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004456:	461a      	mov	r2, r3
 8004458:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e008      	b.n	8004472 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446c:	461a      	mov	r2, r3
 800446e:	2300      	movs	r3, #0
 8004470:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800447e:	461a      	mov	r2, r3
 8004480:	2300      	movs	r3, #0
 8004482:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004490:	461a      	mov	r2, r3
 8004492:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004496:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	3301      	adds	r3, #1
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044a2:	461a      	mov	r2, r3
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d3b5      	bcc.n	8004416 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80044ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d105      	bne.n	80044e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f043 0210 	orr.w	r2, r3, #16
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699a      	ldr	r2, [r3, #24]
 80044e4:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <USB_DevInit+0x2c4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	f043 0208 	orr.w	r2, r3, #8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004500:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004504:	2b01      	cmp	r3, #1
 8004506:	d107      	bne.n	8004518 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004510:	f043 0304 	orr.w	r3, r3, #4
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004518:	7dfb      	ldrb	r3, [r7, #23]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004524:	b004      	add	sp, #16
 8004526:	4770      	bx	lr
 8004528:	803c3800 	.word	0x803c3800

0800452c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3301      	adds	r3, #1
 800453e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004546:	d901      	bls.n	800454c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e01b      	b.n	8004584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	daf2      	bge.n	800453a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	019b      	lsls	r3, r3, #6
 800455c:	f043 0220 	orr.w	r2, r3, #32
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004570:	d901      	bls.n	8004576 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e006      	b.n	8004584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b20      	cmp	r3, #32
 8004580:	d0f0      	beq.n	8004564 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3301      	adds	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045a8:	d901      	bls.n	80045ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e018      	b.n	80045e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	daf2      	bge.n	800459c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2210      	movs	r2, #16
 80045be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045cc:	d901      	bls.n	80045d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e006      	b.n	80045e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d0f0      	beq.n	80045c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	68f9      	ldr	r1, [r7, #12]
 8004608:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800460c:	4313      	orrs	r3, r2
 800460e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3714      	adds	r7, #20
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004638:	f023 0303 	bic.w	r3, r3, #3
 800463c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800464c:	f043 0302 	orr.w	r3, r3, #2
 8004650:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f003 0301 	and.w	r3, r3, #1
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004694:	d901      	bls.n	800469a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e01b      	b.n	80046d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	daf2      	bge.n	8004688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f043 0201 	orr.w	r2, r3, #1
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3301      	adds	r3, #1
 80046b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046be:	d901      	bls.n	80046c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e006      	b.n	80046d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d0f0      	beq.n	80046b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <__cvt>:
 80046de:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046e2:	ec57 6b10 	vmov	r6, r7, d0
 80046e6:	2f00      	cmp	r7, #0
 80046e8:	460c      	mov	r4, r1
 80046ea:	4619      	mov	r1, r3
 80046ec:	463b      	mov	r3, r7
 80046ee:	bfbb      	ittet	lt
 80046f0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80046f4:	461f      	movlt	r7, r3
 80046f6:	2300      	movge	r3, #0
 80046f8:	232d      	movlt	r3, #45	@ 0x2d
 80046fa:	700b      	strb	r3, [r1, #0]
 80046fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80046fe:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004702:	4691      	mov	r9, r2
 8004704:	f023 0820 	bic.w	r8, r3, #32
 8004708:	bfbc      	itt	lt
 800470a:	4632      	movlt	r2, r6
 800470c:	4616      	movlt	r6, r2
 800470e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004712:	d005      	beq.n	8004720 <__cvt+0x42>
 8004714:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004718:	d100      	bne.n	800471c <__cvt+0x3e>
 800471a:	3401      	adds	r4, #1
 800471c:	2102      	movs	r1, #2
 800471e:	e000      	b.n	8004722 <__cvt+0x44>
 8004720:	2103      	movs	r1, #3
 8004722:	ab03      	add	r3, sp, #12
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	ab02      	add	r3, sp, #8
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	ec47 6b10 	vmov	d0, r6, r7
 800472e:	4653      	mov	r3, sl
 8004730:	4622      	mov	r2, r4
 8004732:	f000 fe4d 	bl	80053d0 <_dtoa_r>
 8004736:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800473a:	4605      	mov	r5, r0
 800473c:	d119      	bne.n	8004772 <__cvt+0x94>
 800473e:	f019 0f01 	tst.w	r9, #1
 8004742:	d00e      	beq.n	8004762 <__cvt+0x84>
 8004744:	eb00 0904 	add.w	r9, r0, r4
 8004748:	2200      	movs	r2, #0
 800474a:	2300      	movs	r3, #0
 800474c:	4630      	mov	r0, r6
 800474e:	4639      	mov	r1, r7
 8004750:	f7fc f9ca 	bl	8000ae8 <__aeabi_dcmpeq>
 8004754:	b108      	cbz	r0, 800475a <__cvt+0x7c>
 8004756:	f8cd 900c 	str.w	r9, [sp, #12]
 800475a:	2230      	movs	r2, #48	@ 0x30
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	454b      	cmp	r3, r9
 8004760:	d31e      	bcc.n	80047a0 <__cvt+0xc2>
 8004762:	9b03      	ldr	r3, [sp, #12]
 8004764:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004766:	1b5b      	subs	r3, r3, r5
 8004768:	4628      	mov	r0, r5
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	b004      	add	sp, #16
 800476e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004772:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004776:	eb00 0904 	add.w	r9, r0, r4
 800477a:	d1e5      	bne.n	8004748 <__cvt+0x6a>
 800477c:	7803      	ldrb	r3, [r0, #0]
 800477e:	2b30      	cmp	r3, #48	@ 0x30
 8004780:	d10a      	bne.n	8004798 <__cvt+0xba>
 8004782:	2200      	movs	r2, #0
 8004784:	2300      	movs	r3, #0
 8004786:	4630      	mov	r0, r6
 8004788:	4639      	mov	r1, r7
 800478a:	f7fc f9ad 	bl	8000ae8 <__aeabi_dcmpeq>
 800478e:	b918      	cbnz	r0, 8004798 <__cvt+0xba>
 8004790:	f1c4 0401 	rsb	r4, r4, #1
 8004794:	f8ca 4000 	str.w	r4, [sl]
 8004798:	f8da 3000 	ldr.w	r3, [sl]
 800479c:	4499      	add	r9, r3
 800479e:	e7d3      	b.n	8004748 <__cvt+0x6a>
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	9103      	str	r1, [sp, #12]
 80047a4:	701a      	strb	r2, [r3, #0]
 80047a6:	e7d9      	b.n	800475c <__cvt+0x7e>

080047a8 <__exponent>:
 80047a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047aa:	2900      	cmp	r1, #0
 80047ac:	bfba      	itte	lt
 80047ae:	4249      	neglt	r1, r1
 80047b0:	232d      	movlt	r3, #45	@ 0x2d
 80047b2:	232b      	movge	r3, #43	@ 0x2b
 80047b4:	2909      	cmp	r1, #9
 80047b6:	7002      	strb	r2, [r0, #0]
 80047b8:	7043      	strb	r3, [r0, #1]
 80047ba:	dd29      	ble.n	8004810 <__exponent+0x68>
 80047bc:	f10d 0307 	add.w	r3, sp, #7
 80047c0:	461d      	mov	r5, r3
 80047c2:	270a      	movs	r7, #10
 80047c4:	461a      	mov	r2, r3
 80047c6:	fbb1 f6f7 	udiv	r6, r1, r7
 80047ca:	fb07 1416 	mls	r4, r7, r6, r1
 80047ce:	3430      	adds	r4, #48	@ 0x30
 80047d0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80047d4:	460c      	mov	r4, r1
 80047d6:	2c63      	cmp	r4, #99	@ 0x63
 80047d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80047dc:	4631      	mov	r1, r6
 80047de:	dcf1      	bgt.n	80047c4 <__exponent+0x1c>
 80047e0:	3130      	adds	r1, #48	@ 0x30
 80047e2:	1e94      	subs	r4, r2, #2
 80047e4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80047e8:	1c41      	adds	r1, r0, #1
 80047ea:	4623      	mov	r3, r4
 80047ec:	42ab      	cmp	r3, r5
 80047ee:	d30a      	bcc.n	8004806 <__exponent+0x5e>
 80047f0:	f10d 0309 	add.w	r3, sp, #9
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	42ac      	cmp	r4, r5
 80047f8:	bf88      	it	hi
 80047fa:	2300      	movhi	r3, #0
 80047fc:	3302      	adds	r3, #2
 80047fe:	4403      	add	r3, r0
 8004800:	1a18      	subs	r0, r3, r0
 8004802:	b003      	add	sp, #12
 8004804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004806:	f813 6b01 	ldrb.w	r6, [r3], #1
 800480a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800480e:	e7ed      	b.n	80047ec <__exponent+0x44>
 8004810:	2330      	movs	r3, #48	@ 0x30
 8004812:	3130      	adds	r1, #48	@ 0x30
 8004814:	7083      	strb	r3, [r0, #2]
 8004816:	70c1      	strb	r1, [r0, #3]
 8004818:	1d03      	adds	r3, r0, #4
 800481a:	e7f1      	b.n	8004800 <__exponent+0x58>

0800481c <_printf_float>:
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	b08d      	sub	sp, #52	@ 0x34
 8004822:	460c      	mov	r4, r1
 8004824:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004828:	4616      	mov	r6, r2
 800482a:	461f      	mov	r7, r3
 800482c:	4605      	mov	r5, r0
 800482e:	f000 fccd 	bl	80051cc <_localeconv_r>
 8004832:	6803      	ldr	r3, [r0, #0]
 8004834:	9304      	str	r3, [sp, #16]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fd2a 	bl	8000290 <strlen>
 800483c:	2300      	movs	r3, #0
 800483e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004840:	f8d8 3000 	ldr.w	r3, [r8]
 8004844:	9005      	str	r0, [sp, #20]
 8004846:	3307      	adds	r3, #7
 8004848:	f023 0307 	bic.w	r3, r3, #7
 800484c:	f103 0208 	add.w	r2, r3, #8
 8004850:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004854:	f8d4 b000 	ldr.w	fp, [r4]
 8004858:	f8c8 2000 	str.w	r2, [r8]
 800485c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004860:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004864:	9307      	str	r3, [sp, #28]
 8004866:	f8cd 8018 	str.w	r8, [sp, #24]
 800486a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800486e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004872:	4b9c      	ldr	r3, [pc, #624]	@ (8004ae4 <_printf_float+0x2c8>)
 8004874:	f04f 32ff 	mov.w	r2, #4294967295
 8004878:	f7fc f968 	bl	8000b4c <__aeabi_dcmpun>
 800487c:	bb70      	cbnz	r0, 80048dc <_printf_float+0xc0>
 800487e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004882:	4b98      	ldr	r3, [pc, #608]	@ (8004ae4 <_printf_float+0x2c8>)
 8004884:	f04f 32ff 	mov.w	r2, #4294967295
 8004888:	f7fc f942 	bl	8000b10 <__aeabi_dcmple>
 800488c:	bb30      	cbnz	r0, 80048dc <_printf_float+0xc0>
 800488e:	2200      	movs	r2, #0
 8004890:	2300      	movs	r3, #0
 8004892:	4640      	mov	r0, r8
 8004894:	4649      	mov	r1, r9
 8004896:	f7fc f931 	bl	8000afc <__aeabi_dcmplt>
 800489a:	b110      	cbz	r0, 80048a2 <_printf_float+0x86>
 800489c:	232d      	movs	r3, #45	@ 0x2d
 800489e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048a2:	4a91      	ldr	r2, [pc, #580]	@ (8004ae8 <_printf_float+0x2cc>)
 80048a4:	4b91      	ldr	r3, [pc, #580]	@ (8004aec <_printf_float+0x2d0>)
 80048a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80048aa:	bf94      	ite	ls
 80048ac:	4690      	movls	r8, r2
 80048ae:	4698      	movhi	r8, r3
 80048b0:	2303      	movs	r3, #3
 80048b2:	6123      	str	r3, [r4, #16]
 80048b4:	f02b 0304 	bic.w	r3, fp, #4
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	f04f 0900 	mov.w	r9, #0
 80048be:	9700      	str	r7, [sp, #0]
 80048c0:	4633      	mov	r3, r6
 80048c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80048c4:	4621      	mov	r1, r4
 80048c6:	4628      	mov	r0, r5
 80048c8:	f000 f9d2 	bl	8004c70 <_printf_common>
 80048cc:	3001      	adds	r0, #1
 80048ce:	f040 808d 	bne.w	80049ec <_printf_float+0x1d0>
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295
 80048d6:	b00d      	add	sp, #52	@ 0x34
 80048d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	4640      	mov	r0, r8
 80048e2:	4649      	mov	r1, r9
 80048e4:	f7fc f932 	bl	8000b4c <__aeabi_dcmpun>
 80048e8:	b140      	cbz	r0, 80048fc <_printf_float+0xe0>
 80048ea:	464b      	mov	r3, r9
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bfbc      	itt	lt
 80048f0:	232d      	movlt	r3, #45	@ 0x2d
 80048f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80048f6:	4a7e      	ldr	r2, [pc, #504]	@ (8004af0 <_printf_float+0x2d4>)
 80048f8:	4b7e      	ldr	r3, [pc, #504]	@ (8004af4 <_printf_float+0x2d8>)
 80048fa:	e7d4      	b.n	80048a6 <_printf_float+0x8a>
 80048fc:	6863      	ldr	r3, [r4, #4]
 80048fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004902:	9206      	str	r2, [sp, #24]
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	d13b      	bne.n	8004980 <_printf_float+0x164>
 8004908:	2306      	movs	r3, #6
 800490a:	6063      	str	r3, [r4, #4]
 800490c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004910:	2300      	movs	r3, #0
 8004912:	6022      	str	r2, [r4, #0]
 8004914:	9303      	str	r3, [sp, #12]
 8004916:	ab0a      	add	r3, sp, #40	@ 0x28
 8004918:	e9cd a301 	strd	sl, r3, [sp, #4]
 800491c:	ab09      	add	r3, sp, #36	@ 0x24
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	6861      	ldr	r1, [r4, #4]
 8004922:	ec49 8b10 	vmov	d0, r8, r9
 8004926:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800492a:	4628      	mov	r0, r5
 800492c:	f7ff fed7 	bl	80046de <__cvt>
 8004930:	9b06      	ldr	r3, [sp, #24]
 8004932:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004934:	2b47      	cmp	r3, #71	@ 0x47
 8004936:	4680      	mov	r8, r0
 8004938:	d129      	bne.n	800498e <_printf_float+0x172>
 800493a:	1cc8      	adds	r0, r1, #3
 800493c:	db02      	blt.n	8004944 <_printf_float+0x128>
 800493e:	6863      	ldr	r3, [r4, #4]
 8004940:	4299      	cmp	r1, r3
 8004942:	dd41      	ble.n	80049c8 <_printf_float+0x1ac>
 8004944:	f1aa 0a02 	sub.w	sl, sl, #2
 8004948:	fa5f fa8a 	uxtb.w	sl, sl
 800494c:	3901      	subs	r1, #1
 800494e:	4652      	mov	r2, sl
 8004950:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004954:	9109      	str	r1, [sp, #36]	@ 0x24
 8004956:	f7ff ff27 	bl	80047a8 <__exponent>
 800495a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800495c:	1813      	adds	r3, r2, r0
 800495e:	2a01      	cmp	r2, #1
 8004960:	4681      	mov	r9, r0
 8004962:	6123      	str	r3, [r4, #16]
 8004964:	dc02      	bgt.n	800496c <_printf_float+0x150>
 8004966:	6822      	ldr	r2, [r4, #0]
 8004968:	07d2      	lsls	r2, r2, #31
 800496a:	d501      	bpl.n	8004970 <_printf_float+0x154>
 800496c:	3301      	adds	r3, #1
 800496e:	6123      	str	r3, [r4, #16]
 8004970:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0a2      	beq.n	80048be <_printf_float+0xa2>
 8004978:	232d      	movs	r3, #45	@ 0x2d
 800497a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800497e:	e79e      	b.n	80048be <_printf_float+0xa2>
 8004980:	9a06      	ldr	r2, [sp, #24]
 8004982:	2a47      	cmp	r2, #71	@ 0x47
 8004984:	d1c2      	bne.n	800490c <_printf_float+0xf0>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1c0      	bne.n	800490c <_printf_float+0xf0>
 800498a:	2301      	movs	r3, #1
 800498c:	e7bd      	b.n	800490a <_printf_float+0xee>
 800498e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004992:	d9db      	bls.n	800494c <_printf_float+0x130>
 8004994:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004998:	d118      	bne.n	80049cc <_printf_float+0x1b0>
 800499a:	2900      	cmp	r1, #0
 800499c:	6863      	ldr	r3, [r4, #4]
 800499e:	dd0b      	ble.n	80049b8 <_printf_float+0x19c>
 80049a0:	6121      	str	r1, [r4, #16]
 80049a2:	b913      	cbnz	r3, 80049aa <_printf_float+0x18e>
 80049a4:	6822      	ldr	r2, [r4, #0]
 80049a6:	07d0      	lsls	r0, r2, #31
 80049a8:	d502      	bpl.n	80049b0 <_printf_float+0x194>
 80049aa:	3301      	adds	r3, #1
 80049ac:	440b      	add	r3, r1
 80049ae:	6123      	str	r3, [r4, #16]
 80049b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80049b2:	f04f 0900 	mov.w	r9, #0
 80049b6:	e7db      	b.n	8004970 <_printf_float+0x154>
 80049b8:	b913      	cbnz	r3, 80049c0 <_printf_float+0x1a4>
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	07d2      	lsls	r2, r2, #31
 80049be:	d501      	bpl.n	80049c4 <_printf_float+0x1a8>
 80049c0:	3302      	adds	r3, #2
 80049c2:	e7f4      	b.n	80049ae <_printf_float+0x192>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e7f2      	b.n	80049ae <_printf_float+0x192>
 80049c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80049cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049ce:	4299      	cmp	r1, r3
 80049d0:	db05      	blt.n	80049de <_printf_float+0x1c2>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	6121      	str	r1, [r4, #16]
 80049d6:	07d8      	lsls	r0, r3, #31
 80049d8:	d5ea      	bpl.n	80049b0 <_printf_float+0x194>
 80049da:	1c4b      	adds	r3, r1, #1
 80049dc:	e7e7      	b.n	80049ae <_printf_float+0x192>
 80049de:	2900      	cmp	r1, #0
 80049e0:	bfd4      	ite	le
 80049e2:	f1c1 0202 	rsble	r2, r1, #2
 80049e6:	2201      	movgt	r2, #1
 80049e8:	4413      	add	r3, r2
 80049ea:	e7e0      	b.n	80049ae <_printf_float+0x192>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	055a      	lsls	r2, r3, #21
 80049f0:	d407      	bmi.n	8004a02 <_printf_float+0x1e6>
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	4642      	mov	r2, r8
 80049f6:	4631      	mov	r1, r6
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b8      	blx	r7
 80049fc:	3001      	adds	r0, #1
 80049fe:	d12b      	bne.n	8004a58 <_printf_float+0x23c>
 8004a00:	e767      	b.n	80048d2 <_printf_float+0xb6>
 8004a02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a06:	f240 80dd 	bls.w	8004bc4 <_printf_float+0x3a8>
 8004a0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2300      	movs	r3, #0
 8004a12:	f7fc f869 	bl	8000ae8 <__aeabi_dcmpeq>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d033      	beq.n	8004a82 <_printf_float+0x266>
 8004a1a:	4a37      	ldr	r2, [pc, #220]	@ (8004af8 <_printf_float+0x2dc>)
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	47b8      	blx	r7
 8004a24:	3001      	adds	r0, #1
 8004a26:	f43f af54 	beq.w	80048d2 <_printf_float+0xb6>
 8004a2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004a2e:	4543      	cmp	r3, r8
 8004a30:	db02      	blt.n	8004a38 <_printf_float+0x21c>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	07d8      	lsls	r0, r3, #31
 8004a36:	d50f      	bpl.n	8004a58 <_printf_float+0x23c>
 8004a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4628      	mov	r0, r5
 8004a40:	47b8      	blx	r7
 8004a42:	3001      	adds	r0, #1
 8004a44:	f43f af45 	beq.w	80048d2 <_printf_float+0xb6>
 8004a48:	f04f 0900 	mov.w	r9, #0
 8004a4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a50:	f104 0a1a 	add.w	sl, r4, #26
 8004a54:	45c8      	cmp	r8, r9
 8004a56:	dc09      	bgt.n	8004a6c <_printf_float+0x250>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	079b      	lsls	r3, r3, #30
 8004a5c:	f100 8103 	bmi.w	8004c66 <_printf_float+0x44a>
 8004a60:	68e0      	ldr	r0, [r4, #12]
 8004a62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a64:	4298      	cmp	r0, r3
 8004a66:	bfb8      	it	lt
 8004a68:	4618      	movlt	r0, r3
 8004a6a:	e734      	b.n	80048d6 <_printf_float+0xba>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4652      	mov	r2, sl
 8004a70:	4631      	mov	r1, r6
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b8      	blx	r7
 8004a76:	3001      	adds	r0, #1
 8004a78:	f43f af2b 	beq.w	80048d2 <_printf_float+0xb6>
 8004a7c:	f109 0901 	add.w	r9, r9, #1
 8004a80:	e7e8      	b.n	8004a54 <_printf_float+0x238>
 8004a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	dc39      	bgt.n	8004afc <_printf_float+0x2e0>
 8004a88:	4a1b      	ldr	r2, [pc, #108]	@ (8004af8 <_printf_float+0x2dc>)
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b8      	blx	r7
 8004a92:	3001      	adds	r0, #1
 8004a94:	f43f af1d 	beq.w	80048d2 <_printf_float+0xb6>
 8004a98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004a9c:	ea59 0303 	orrs.w	r3, r9, r3
 8004aa0:	d102      	bne.n	8004aa8 <_printf_float+0x28c>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	07d9      	lsls	r1, r3, #31
 8004aa6:	d5d7      	bpl.n	8004a58 <_printf_float+0x23c>
 8004aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aac:	4631      	mov	r1, r6
 8004aae:	4628      	mov	r0, r5
 8004ab0:	47b8      	blx	r7
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f43f af0d 	beq.w	80048d2 <_printf_float+0xb6>
 8004ab8:	f04f 0a00 	mov.w	sl, #0
 8004abc:	f104 0b1a 	add.w	fp, r4, #26
 8004ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	4553      	cmp	r3, sl
 8004ac6:	dc01      	bgt.n	8004acc <_printf_float+0x2b0>
 8004ac8:	464b      	mov	r3, r9
 8004aca:	e793      	b.n	80049f4 <_printf_float+0x1d8>
 8004acc:	2301      	movs	r3, #1
 8004ace:	465a      	mov	r2, fp
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	47b8      	blx	r7
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	f43f aefb 	beq.w	80048d2 <_printf_float+0xb6>
 8004adc:	f10a 0a01 	add.w	sl, sl, #1
 8004ae0:	e7ee      	b.n	8004ac0 <_printf_float+0x2a4>
 8004ae2:	bf00      	nop
 8004ae4:	7fefffff 	.word	0x7fefffff
 8004ae8:	0800704c 	.word	0x0800704c
 8004aec:	08007050 	.word	0x08007050
 8004af0:	08007054 	.word	0x08007054
 8004af4:	08007058 	.word	0x08007058
 8004af8:	0800705c 	.word	0x0800705c
 8004afc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004afe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b02:	4553      	cmp	r3, sl
 8004b04:	bfa8      	it	ge
 8004b06:	4653      	movge	r3, sl
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	4699      	mov	r9, r3
 8004b0c:	dc36      	bgt.n	8004b7c <_printf_float+0x360>
 8004b0e:	f04f 0b00 	mov.w	fp, #0
 8004b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b16:	f104 021a 	add.w	r2, r4, #26
 8004b1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b1c:	9306      	str	r3, [sp, #24]
 8004b1e:	eba3 0309 	sub.w	r3, r3, r9
 8004b22:	455b      	cmp	r3, fp
 8004b24:	dc31      	bgt.n	8004b8a <_printf_float+0x36e>
 8004b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b28:	459a      	cmp	sl, r3
 8004b2a:	dc3a      	bgt.n	8004ba2 <_printf_float+0x386>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	07da      	lsls	r2, r3, #31
 8004b30:	d437      	bmi.n	8004ba2 <_printf_float+0x386>
 8004b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b34:	ebaa 0903 	sub.w	r9, sl, r3
 8004b38:	9b06      	ldr	r3, [sp, #24]
 8004b3a:	ebaa 0303 	sub.w	r3, sl, r3
 8004b3e:	4599      	cmp	r9, r3
 8004b40:	bfa8      	it	ge
 8004b42:	4699      	movge	r9, r3
 8004b44:	f1b9 0f00 	cmp.w	r9, #0
 8004b48:	dc33      	bgt.n	8004bb2 <_printf_float+0x396>
 8004b4a:	f04f 0800 	mov.w	r8, #0
 8004b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b52:	f104 0b1a 	add.w	fp, r4, #26
 8004b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b58:	ebaa 0303 	sub.w	r3, sl, r3
 8004b5c:	eba3 0309 	sub.w	r3, r3, r9
 8004b60:	4543      	cmp	r3, r8
 8004b62:	f77f af79 	ble.w	8004a58 <_printf_float+0x23c>
 8004b66:	2301      	movs	r3, #1
 8004b68:	465a      	mov	r2, fp
 8004b6a:	4631      	mov	r1, r6
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	47b8      	blx	r7
 8004b70:	3001      	adds	r0, #1
 8004b72:	f43f aeae 	beq.w	80048d2 <_printf_float+0xb6>
 8004b76:	f108 0801 	add.w	r8, r8, #1
 8004b7a:	e7ec      	b.n	8004b56 <_printf_float+0x33a>
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	4631      	mov	r1, r6
 8004b80:	4628      	mov	r0, r5
 8004b82:	47b8      	blx	r7
 8004b84:	3001      	adds	r0, #1
 8004b86:	d1c2      	bne.n	8004b0e <_printf_float+0x2f2>
 8004b88:	e6a3      	b.n	80048d2 <_printf_float+0xb6>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	9206      	str	r2, [sp, #24]
 8004b92:	47b8      	blx	r7
 8004b94:	3001      	adds	r0, #1
 8004b96:	f43f ae9c 	beq.w	80048d2 <_printf_float+0xb6>
 8004b9a:	9a06      	ldr	r2, [sp, #24]
 8004b9c:	f10b 0b01 	add.w	fp, fp, #1
 8004ba0:	e7bb      	b.n	8004b1a <_printf_float+0x2fe>
 8004ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4628      	mov	r0, r5
 8004baa:	47b8      	blx	r7
 8004bac:	3001      	adds	r0, #1
 8004bae:	d1c0      	bne.n	8004b32 <_printf_float+0x316>
 8004bb0:	e68f      	b.n	80048d2 <_printf_float+0xb6>
 8004bb2:	9a06      	ldr	r2, [sp, #24]
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	4442      	add	r2, r8
 8004bb8:	4631      	mov	r1, r6
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d1c3      	bne.n	8004b4a <_printf_float+0x32e>
 8004bc2:	e686      	b.n	80048d2 <_printf_float+0xb6>
 8004bc4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004bc8:	f1ba 0f01 	cmp.w	sl, #1
 8004bcc:	dc01      	bgt.n	8004bd2 <_printf_float+0x3b6>
 8004bce:	07db      	lsls	r3, r3, #31
 8004bd0:	d536      	bpl.n	8004c40 <_printf_float+0x424>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f ae78 	beq.w	80048d2 <_printf_float+0xb6>
 8004be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	f43f ae70 	beq.w	80048d2 <_printf_float+0xb6>
 8004bf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004bfe:	f7fb ff73 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c02:	b9c0      	cbnz	r0, 8004c36 <_printf_float+0x41a>
 8004c04:	4653      	mov	r3, sl
 8004c06:	f108 0201 	add.w	r2, r8, #1
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	d10c      	bne.n	8004c2e <_printf_float+0x412>
 8004c14:	e65d      	b.n	80048d2 <_printf_float+0xb6>
 8004c16:	2301      	movs	r3, #1
 8004c18:	465a      	mov	r2, fp
 8004c1a:	4631      	mov	r1, r6
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	47b8      	blx	r7
 8004c20:	3001      	adds	r0, #1
 8004c22:	f43f ae56 	beq.w	80048d2 <_printf_float+0xb6>
 8004c26:	f108 0801 	add.w	r8, r8, #1
 8004c2a:	45d0      	cmp	r8, sl
 8004c2c:	dbf3      	blt.n	8004c16 <_printf_float+0x3fa>
 8004c2e:	464b      	mov	r3, r9
 8004c30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004c34:	e6df      	b.n	80049f6 <_printf_float+0x1da>
 8004c36:	f04f 0800 	mov.w	r8, #0
 8004c3a:	f104 0b1a 	add.w	fp, r4, #26
 8004c3e:	e7f4      	b.n	8004c2a <_printf_float+0x40e>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4642      	mov	r2, r8
 8004c44:	e7e1      	b.n	8004c0a <_printf_float+0x3ee>
 8004c46:	2301      	movs	r3, #1
 8004c48:	464a      	mov	r2, r9
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b8      	blx	r7
 8004c50:	3001      	adds	r0, #1
 8004c52:	f43f ae3e 	beq.w	80048d2 <_printf_float+0xb6>
 8004c56:	f108 0801 	add.w	r8, r8, #1
 8004c5a:	68e3      	ldr	r3, [r4, #12]
 8004c5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c5e:	1a5b      	subs	r3, r3, r1
 8004c60:	4543      	cmp	r3, r8
 8004c62:	dcf0      	bgt.n	8004c46 <_printf_float+0x42a>
 8004c64:	e6fc      	b.n	8004a60 <_printf_float+0x244>
 8004c66:	f04f 0800 	mov.w	r8, #0
 8004c6a:	f104 0919 	add.w	r9, r4, #25
 8004c6e:	e7f4      	b.n	8004c5a <_printf_float+0x43e>

08004c70 <_printf_common>:
 8004c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c74:	4616      	mov	r6, r2
 8004c76:	4698      	mov	r8, r3
 8004c78:	688a      	ldr	r2, [r1, #8]
 8004c7a:	690b      	ldr	r3, [r1, #16]
 8004c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c80:	4293      	cmp	r3, r2
 8004c82:	bfb8      	it	lt
 8004c84:	4613      	movlt	r3, r2
 8004c86:	6033      	str	r3, [r6, #0]
 8004c88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c8c:	4607      	mov	r7, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	b10a      	cbz	r2, 8004c96 <_printf_common+0x26>
 8004c92:	3301      	adds	r3, #1
 8004c94:	6033      	str	r3, [r6, #0]
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	0699      	lsls	r1, r3, #26
 8004c9a:	bf42      	ittt	mi
 8004c9c:	6833      	ldrmi	r3, [r6, #0]
 8004c9e:	3302      	addmi	r3, #2
 8004ca0:	6033      	strmi	r3, [r6, #0]
 8004ca2:	6825      	ldr	r5, [r4, #0]
 8004ca4:	f015 0506 	ands.w	r5, r5, #6
 8004ca8:	d106      	bne.n	8004cb8 <_printf_common+0x48>
 8004caa:	f104 0a19 	add.w	sl, r4, #25
 8004cae:	68e3      	ldr	r3, [r4, #12]
 8004cb0:	6832      	ldr	r2, [r6, #0]
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	dc26      	bgt.n	8004d06 <_printf_common+0x96>
 8004cb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cbc:	6822      	ldr	r2, [r4, #0]
 8004cbe:	3b00      	subs	r3, #0
 8004cc0:	bf18      	it	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	0692      	lsls	r2, r2, #26
 8004cc6:	d42b      	bmi.n	8004d20 <_printf_common+0xb0>
 8004cc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ccc:	4641      	mov	r1, r8
 8004cce:	4638      	mov	r0, r7
 8004cd0:	47c8      	blx	r9
 8004cd2:	3001      	adds	r0, #1
 8004cd4:	d01e      	beq.n	8004d14 <_printf_common+0xa4>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	6922      	ldr	r2, [r4, #16]
 8004cda:	f003 0306 	and.w	r3, r3, #6
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	bf02      	ittt	eq
 8004ce2:	68e5      	ldreq	r5, [r4, #12]
 8004ce4:	6833      	ldreq	r3, [r6, #0]
 8004ce6:	1aed      	subeq	r5, r5, r3
 8004ce8:	68a3      	ldr	r3, [r4, #8]
 8004cea:	bf0c      	ite	eq
 8004cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf0:	2500      	movne	r5, #0
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	bfc4      	itt	gt
 8004cf6:	1a9b      	subgt	r3, r3, r2
 8004cf8:	18ed      	addgt	r5, r5, r3
 8004cfa:	2600      	movs	r6, #0
 8004cfc:	341a      	adds	r4, #26
 8004cfe:	42b5      	cmp	r5, r6
 8004d00:	d11a      	bne.n	8004d38 <_printf_common+0xc8>
 8004d02:	2000      	movs	r0, #0
 8004d04:	e008      	b.n	8004d18 <_printf_common+0xa8>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4652      	mov	r2, sl
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	47c8      	blx	r9
 8004d10:	3001      	adds	r0, #1
 8004d12:	d103      	bne.n	8004d1c <_printf_common+0xac>
 8004d14:	f04f 30ff 	mov.w	r0, #4294967295
 8004d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1c:	3501      	adds	r5, #1
 8004d1e:	e7c6      	b.n	8004cae <_printf_common+0x3e>
 8004d20:	18e1      	adds	r1, r4, r3
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	2030      	movs	r0, #48	@ 0x30
 8004d26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d2a:	4422      	add	r2, r4
 8004d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d34:	3302      	adds	r3, #2
 8004d36:	e7c7      	b.n	8004cc8 <_printf_common+0x58>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	4638      	mov	r0, r7
 8004d40:	47c8      	blx	r9
 8004d42:	3001      	adds	r0, #1
 8004d44:	d0e6      	beq.n	8004d14 <_printf_common+0xa4>
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7d9      	b.n	8004cfe <_printf_common+0x8e>
	...

08004d4c <_printf_i>:
 8004d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d50:	7e0f      	ldrb	r7, [r1, #24]
 8004d52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d54:	2f78      	cmp	r7, #120	@ 0x78
 8004d56:	4691      	mov	r9, r2
 8004d58:	4680      	mov	r8, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	469a      	mov	sl, r3
 8004d5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d62:	d807      	bhi.n	8004d74 <_printf_i+0x28>
 8004d64:	2f62      	cmp	r7, #98	@ 0x62
 8004d66:	d80a      	bhi.n	8004d7e <_printf_i+0x32>
 8004d68:	2f00      	cmp	r7, #0
 8004d6a:	f000 80d2 	beq.w	8004f12 <_printf_i+0x1c6>
 8004d6e:	2f58      	cmp	r7, #88	@ 0x58
 8004d70:	f000 80b9 	beq.w	8004ee6 <_printf_i+0x19a>
 8004d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d7c:	e03a      	b.n	8004df4 <_printf_i+0xa8>
 8004d7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d82:	2b15      	cmp	r3, #21
 8004d84:	d8f6      	bhi.n	8004d74 <_printf_i+0x28>
 8004d86:	a101      	add	r1, pc, #4	@ (adr r1, 8004d8c <_printf_i+0x40>)
 8004d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d8c:	08004de5 	.word	0x08004de5
 8004d90:	08004df9 	.word	0x08004df9
 8004d94:	08004d75 	.word	0x08004d75
 8004d98:	08004d75 	.word	0x08004d75
 8004d9c:	08004d75 	.word	0x08004d75
 8004da0:	08004d75 	.word	0x08004d75
 8004da4:	08004df9 	.word	0x08004df9
 8004da8:	08004d75 	.word	0x08004d75
 8004dac:	08004d75 	.word	0x08004d75
 8004db0:	08004d75 	.word	0x08004d75
 8004db4:	08004d75 	.word	0x08004d75
 8004db8:	08004ef9 	.word	0x08004ef9
 8004dbc:	08004e23 	.word	0x08004e23
 8004dc0:	08004eb3 	.word	0x08004eb3
 8004dc4:	08004d75 	.word	0x08004d75
 8004dc8:	08004d75 	.word	0x08004d75
 8004dcc:	08004f1b 	.word	0x08004f1b
 8004dd0:	08004d75 	.word	0x08004d75
 8004dd4:	08004e23 	.word	0x08004e23
 8004dd8:	08004d75 	.word	0x08004d75
 8004ddc:	08004d75 	.word	0x08004d75
 8004de0:	08004ebb 	.word	0x08004ebb
 8004de4:	6833      	ldr	r3, [r6, #0]
 8004de6:	1d1a      	adds	r2, r3, #4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6032      	str	r2, [r6, #0]
 8004dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004df0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004df4:	2301      	movs	r3, #1
 8004df6:	e09d      	b.n	8004f34 <_printf_i+0x1e8>
 8004df8:	6833      	ldr	r3, [r6, #0]
 8004dfa:	6820      	ldr	r0, [r4, #0]
 8004dfc:	1d19      	adds	r1, r3, #4
 8004dfe:	6031      	str	r1, [r6, #0]
 8004e00:	0606      	lsls	r6, r0, #24
 8004e02:	d501      	bpl.n	8004e08 <_printf_i+0xbc>
 8004e04:	681d      	ldr	r5, [r3, #0]
 8004e06:	e003      	b.n	8004e10 <_printf_i+0xc4>
 8004e08:	0645      	lsls	r5, r0, #25
 8004e0a:	d5fb      	bpl.n	8004e04 <_printf_i+0xb8>
 8004e0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e10:	2d00      	cmp	r5, #0
 8004e12:	da03      	bge.n	8004e1c <_printf_i+0xd0>
 8004e14:	232d      	movs	r3, #45	@ 0x2d
 8004e16:	426d      	negs	r5, r5
 8004e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e1c:	4859      	ldr	r0, [pc, #356]	@ (8004f84 <_printf_i+0x238>)
 8004e1e:	230a      	movs	r3, #10
 8004e20:	e011      	b.n	8004e46 <_printf_i+0xfa>
 8004e22:	6821      	ldr	r1, [r4, #0]
 8004e24:	6833      	ldr	r3, [r6, #0]
 8004e26:	0608      	lsls	r0, r1, #24
 8004e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e2c:	d402      	bmi.n	8004e34 <_printf_i+0xe8>
 8004e2e:	0649      	lsls	r1, r1, #25
 8004e30:	bf48      	it	mi
 8004e32:	b2ad      	uxthmi	r5, r5
 8004e34:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e36:	4853      	ldr	r0, [pc, #332]	@ (8004f84 <_printf_i+0x238>)
 8004e38:	6033      	str	r3, [r6, #0]
 8004e3a:	bf14      	ite	ne
 8004e3c:	230a      	movne	r3, #10
 8004e3e:	2308      	moveq	r3, #8
 8004e40:	2100      	movs	r1, #0
 8004e42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e46:	6866      	ldr	r6, [r4, #4]
 8004e48:	60a6      	str	r6, [r4, #8]
 8004e4a:	2e00      	cmp	r6, #0
 8004e4c:	bfa2      	ittt	ge
 8004e4e:	6821      	ldrge	r1, [r4, #0]
 8004e50:	f021 0104 	bicge.w	r1, r1, #4
 8004e54:	6021      	strge	r1, [r4, #0]
 8004e56:	b90d      	cbnz	r5, 8004e5c <_printf_i+0x110>
 8004e58:	2e00      	cmp	r6, #0
 8004e5a:	d04b      	beq.n	8004ef4 <_printf_i+0x1a8>
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e62:	fb03 5711 	mls	r7, r3, r1, r5
 8004e66:	5dc7      	ldrb	r7, [r0, r7]
 8004e68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e6c:	462f      	mov	r7, r5
 8004e6e:	42bb      	cmp	r3, r7
 8004e70:	460d      	mov	r5, r1
 8004e72:	d9f4      	bls.n	8004e5e <_printf_i+0x112>
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d10b      	bne.n	8004e90 <_printf_i+0x144>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	07df      	lsls	r7, r3, #31
 8004e7c:	d508      	bpl.n	8004e90 <_printf_i+0x144>
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	6861      	ldr	r1, [r4, #4]
 8004e82:	4299      	cmp	r1, r3
 8004e84:	bfde      	ittt	le
 8004e86:	2330      	movle	r3, #48	@ 0x30
 8004e88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e90:	1b92      	subs	r2, r2, r6
 8004e92:	6122      	str	r2, [r4, #16]
 8004e94:	f8cd a000 	str.w	sl, [sp]
 8004e98:	464b      	mov	r3, r9
 8004e9a:	aa03      	add	r2, sp, #12
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	4640      	mov	r0, r8
 8004ea0:	f7ff fee6 	bl	8004c70 <_printf_common>
 8004ea4:	3001      	adds	r0, #1
 8004ea6:	d14a      	bne.n	8004f3e <_printf_i+0x1f2>
 8004ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eac:	b004      	add	sp, #16
 8004eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	f043 0320 	orr.w	r3, r3, #32
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	4833      	ldr	r0, [pc, #204]	@ (8004f88 <_printf_i+0x23c>)
 8004ebc:	2778      	movs	r7, #120	@ 0x78
 8004ebe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	6831      	ldr	r1, [r6, #0]
 8004ec6:	061f      	lsls	r7, r3, #24
 8004ec8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ecc:	d402      	bmi.n	8004ed4 <_printf_i+0x188>
 8004ece:	065f      	lsls	r7, r3, #25
 8004ed0:	bf48      	it	mi
 8004ed2:	b2ad      	uxthmi	r5, r5
 8004ed4:	6031      	str	r1, [r6, #0]
 8004ed6:	07d9      	lsls	r1, r3, #31
 8004ed8:	bf44      	itt	mi
 8004eda:	f043 0320 	orrmi.w	r3, r3, #32
 8004ede:	6023      	strmi	r3, [r4, #0]
 8004ee0:	b11d      	cbz	r5, 8004eea <_printf_i+0x19e>
 8004ee2:	2310      	movs	r3, #16
 8004ee4:	e7ac      	b.n	8004e40 <_printf_i+0xf4>
 8004ee6:	4827      	ldr	r0, [pc, #156]	@ (8004f84 <_printf_i+0x238>)
 8004ee8:	e7e9      	b.n	8004ebe <_printf_i+0x172>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	f023 0320 	bic.w	r3, r3, #32
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	e7f6      	b.n	8004ee2 <_printf_i+0x196>
 8004ef4:	4616      	mov	r6, r2
 8004ef6:	e7bd      	b.n	8004e74 <_printf_i+0x128>
 8004ef8:	6833      	ldr	r3, [r6, #0]
 8004efa:	6825      	ldr	r5, [r4, #0]
 8004efc:	6961      	ldr	r1, [r4, #20]
 8004efe:	1d18      	adds	r0, r3, #4
 8004f00:	6030      	str	r0, [r6, #0]
 8004f02:	062e      	lsls	r6, r5, #24
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	d501      	bpl.n	8004f0c <_printf_i+0x1c0>
 8004f08:	6019      	str	r1, [r3, #0]
 8004f0a:	e002      	b.n	8004f12 <_printf_i+0x1c6>
 8004f0c:	0668      	lsls	r0, r5, #25
 8004f0e:	d5fb      	bpl.n	8004f08 <_printf_i+0x1bc>
 8004f10:	8019      	strh	r1, [r3, #0]
 8004f12:	2300      	movs	r3, #0
 8004f14:	6123      	str	r3, [r4, #16]
 8004f16:	4616      	mov	r6, r2
 8004f18:	e7bc      	b.n	8004e94 <_printf_i+0x148>
 8004f1a:	6833      	ldr	r3, [r6, #0]
 8004f1c:	1d1a      	adds	r2, r3, #4
 8004f1e:	6032      	str	r2, [r6, #0]
 8004f20:	681e      	ldr	r6, [r3, #0]
 8004f22:	6862      	ldr	r2, [r4, #4]
 8004f24:	2100      	movs	r1, #0
 8004f26:	4630      	mov	r0, r6
 8004f28:	f7fb f962 	bl	80001f0 <memchr>
 8004f2c:	b108      	cbz	r0, 8004f32 <_printf_i+0x1e6>
 8004f2e:	1b80      	subs	r0, r0, r6
 8004f30:	6060      	str	r0, [r4, #4]
 8004f32:	6863      	ldr	r3, [r4, #4]
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	2300      	movs	r3, #0
 8004f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f3c:	e7aa      	b.n	8004e94 <_printf_i+0x148>
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	4632      	mov	r2, r6
 8004f42:	4649      	mov	r1, r9
 8004f44:	4640      	mov	r0, r8
 8004f46:	47d0      	blx	sl
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d0ad      	beq.n	8004ea8 <_printf_i+0x15c>
 8004f4c:	6823      	ldr	r3, [r4, #0]
 8004f4e:	079b      	lsls	r3, r3, #30
 8004f50:	d413      	bmi.n	8004f7a <_printf_i+0x22e>
 8004f52:	68e0      	ldr	r0, [r4, #12]
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	4298      	cmp	r0, r3
 8004f58:	bfb8      	it	lt
 8004f5a:	4618      	movlt	r0, r3
 8004f5c:	e7a6      	b.n	8004eac <_printf_i+0x160>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4632      	mov	r2, r6
 8004f62:	4649      	mov	r1, r9
 8004f64:	4640      	mov	r0, r8
 8004f66:	47d0      	blx	sl
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d09d      	beq.n	8004ea8 <_printf_i+0x15c>
 8004f6c:	3501      	adds	r5, #1
 8004f6e:	68e3      	ldr	r3, [r4, #12]
 8004f70:	9903      	ldr	r1, [sp, #12]
 8004f72:	1a5b      	subs	r3, r3, r1
 8004f74:	42ab      	cmp	r3, r5
 8004f76:	dcf2      	bgt.n	8004f5e <_printf_i+0x212>
 8004f78:	e7eb      	b.n	8004f52 <_printf_i+0x206>
 8004f7a:	2500      	movs	r5, #0
 8004f7c:	f104 0619 	add.w	r6, r4, #25
 8004f80:	e7f5      	b.n	8004f6e <_printf_i+0x222>
 8004f82:	bf00      	nop
 8004f84:	0800705e 	.word	0x0800705e
 8004f88:	0800706f 	.word	0x0800706f

08004f8c <std>:
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	b510      	push	{r4, lr}
 8004f90:	4604      	mov	r4, r0
 8004f92:	e9c0 3300 	strd	r3, r3, [r0]
 8004f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f9a:	6083      	str	r3, [r0, #8]
 8004f9c:	8181      	strh	r1, [r0, #12]
 8004f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004fa0:	81c2      	strh	r2, [r0, #14]
 8004fa2:	6183      	str	r3, [r0, #24]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	305c      	adds	r0, #92	@ 0x5c
 8004faa:	f000 f906 	bl	80051ba <memset>
 8004fae:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <std+0x58>)
 8004fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <std+0x5c>)
 8004fb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fec <std+0x60>)
 8004fb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fba:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff0 <std+0x64>)
 8004fbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff4 <std+0x68>)
 8004fc0:	6224      	str	r4, [r4, #32]
 8004fc2:	429c      	cmp	r4, r3
 8004fc4:	d006      	beq.n	8004fd4 <std+0x48>
 8004fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004fca:	4294      	cmp	r4, r2
 8004fcc:	d002      	beq.n	8004fd4 <std+0x48>
 8004fce:	33d0      	adds	r3, #208	@ 0xd0
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	d105      	bne.n	8004fe0 <std+0x54>
 8004fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fdc:	f000 b96a 	b.w	80052b4 <__retarget_lock_init_recursive>
 8004fe0:	bd10      	pop	{r4, pc}
 8004fe2:	bf00      	nop
 8004fe4:	08005135 	.word	0x08005135
 8004fe8:	08005157 	.word	0x08005157
 8004fec:	0800518f 	.word	0x0800518f
 8004ff0:	080051b3 	.word	0x080051b3
 8004ff4:	200009ac 	.word	0x200009ac

08004ff8 <stdio_exit_handler>:
 8004ff8:	4a02      	ldr	r2, [pc, #8]	@ (8005004 <stdio_exit_handler+0xc>)
 8004ffa:	4903      	ldr	r1, [pc, #12]	@ (8005008 <stdio_exit_handler+0x10>)
 8004ffc:	4803      	ldr	r0, [pc, #12]	@ (800500c <stdio_exit_handler+0x14>)
 8004ffe:	f000 b869 	b.w	80050d4 <_fwalk_sglue>
 8005002:	bf00      	nop
 8005004:	2000000c 	.word	0x2000000c
 8005008:	08006be9 	.word	0x08006be9
 800500c:	2000001c 	.word	0x2000001c

08005010 <cleanup_stdio>:
 8005010:	6841      	ldr	r1, [r0, #4]
 8005012:	4b0c      	ldr	r3, [pc, #48]	@ (8005044 <cleanup_stdio+0x34>)
 8005014:	4299      	cmp	r1, r3
 8005016:	b510      	push	{r4, lr}
 8005018:	4604      	mov	r4, r0
 800501a:	d001      	beq.n	8005020 <cleanup_stdio+0x10>
 800501c:	f001 fde4 	bl	8006be8 <_fflush_r>
 8005020:	68a1      	ldr	r1, [r4, #8]
 8005022:	4b09      	ldr	r3, [pc, #36]	@ (8005048 <cleanup_stdio+0x38>)
 8005024:	4299      	cmp	r1, r3
 8005026:	d002      	beq.n	800502e <cleanup_stdio+0x1e>
 8005028:	4620      	mov	r0, r4
 800502a:	f001 fddd 	bl	8006be8 <_fflush_r>
 800502e:	68e1      	ldr	r1, [r4, #12]
 8005030:	4b06      	ldr	r3, [pc, #24]	@ (800504c <cleanup_stdio+0x3c>)
 8005032:	4299      	cmp	r1, r3
 8005034:	d004      	beq.n	8005040 <cleanup_stdio+0x30>
 8005036:	4620      	mov	r0, r4
 8005038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800503c:	f001 bdd4 	b.w	8006be8 <_fflush_r>
 8005040:	bd10      	pop	{r4, pc}
 8005042:	bf00      	nop
 8005044:	200009ac 	.word	0x200009ac
 8005048:	20000a14 	.word	0x20000a14
 800504c:	20000a7c 	.word	0x20000a7c

08005050 <global_stdio_init.part.0>:
 8005050:	b510      	push	{r4, lr}
 8005052:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <global_stdio_init.part.0+0x30>)
 8005054:	4c0b      	ldr	r4, [pc, #44]	@ (8005084 <global_stdio_init.part.0+0x34>)
 8005056:	4a0c      	ldr	r2, [pc, #48]	@ (8005088 <global_stdio_init.part.0+0x38>)
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	4620      	mov	r0, r4
 800505c:	2200      	movs	r2, #0
 800505e:	2104      	movs	r1, #4
 8005060:	f7ff ff94 	bl	8004f8c <std>
 8005064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005068:	2201      	movs	r2, #1
 800506a:	2109      	movs	r1, #9
 800506c:	f7ff ff8e 	bl	8004f8c <std>
 8005070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005074:	2202      	movs	r2, #2
 8005076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800507a:	2112      	movs	r1, #18
 800507c:	f7ff bf86 	b.w	8004f8c <std>
 8005080:	20000ae4 	.word	0x20000ae4
 8005084:	200009ac 	.word	0x200009ac
 8005088:	08004ff9 	.word	0x08004ff9

0800508c <__sfp_lock_acquire>:
 800508c:	4801      	ldr	r0, [pc, #4]	@ (8005094 <__sfp_lock_acquire+0x8>)
 800508e:	f000 b912 	b.w	80052b6 <__retarget_lock_acquire_recursive>
 8005092:	bf00      	nop
 8005094:	20000aed 	.word	0x20000aed

08005098 <__sfp_lock_release>:
 8005098:	4801      	ldr	r0, [pc, #4]	@ (80050a0 <__sfp_lock_release+0x8>)
 800509a:	f000 b90d 	b.w	80052b8 <__retarget_lock_release_recursive>
 800509e:	bf00      	nop
 80050a0:	20000aed 	.word	0x20000aed

080050a4 <__sinit>:
 80050a4:	b510      	push	{r4, lr}
 80050a6:	4604      	mov	r4, r0
 80050a8:	f7ff fff0 	bl	800508c <__sfp_lock_acquire>
 80050ac:	6a23      	ldr	r3, [r4, #32]
 80050ae:	b11b      	cbz	r3, 80050b8 <__sinit+0x14>
 80050b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b4:	f7ff bff0 	b.w	8005098 <__sfp_lock_release>
 80050b8:	4b04      	ldr	r3, [pc, #16]	@ (80050cc <__sinit+0x28>)
 80050ba:	6223      	str	r3, [r4, #32]
 80050bc:	4b04      	ldr	r3, [pc, #16]	@ (80050d0 <__sinit+0x2c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1f5      	bne.n	80050b0 <__sinit+0xc>
 80050c4:	f7ff ffc4 	bl	8005050 <global_stdio_init.part.0>
 80050c8:	e7f2      	b.n	80050b0 <__sinit+0xc>
 80050ca:	bf00      	nop
 80050cc:	08005011 	.word	0x08005011
 80050d0:	20000ae4 	.word	0x20000ae4

080050d4 <_fwalk_sglue>:
 80050d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d8:	4607      	mov	r7, r0
 80050da:	4688      	mov	r8, r1
 80050dc:	4614      	mov	r4, r2
 80050de:	2600      	movs	r6, #0
 80050e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050e4:	f1b9 0901 	subs.w	r9, r9, #1
 80050e8:	d505      	bpl.n	80050f6 <_fwalk_sglue+0x22>
 80050ea:	6824      	ldr	r4, [r4, #0]
 80050ec:	2c00      	cmp	r4, #0
 80050ee:	d1f7      	bne.n	80050e0 <_fwalk_sglue+0xc>
 80050f0:	4630      	mov	r0, r6
 80050f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f6:	89ab      	ldrh	r3, [r5, #12]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d907      	bls.n	800510c <_fwalk_sglue+0x38>
 80050fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005100:	3301      	adds	r3, #1
 8005102:	d003      	beq.n	800510c <_fwalk_sglue+0x38>
 8005104:	4629      	mov	r1, r5
 8005106:	4638      	mov	r0, r7
 8005108:	47c0      	blx	r8
 800510a:	4306      	orrs	r6, r0
 800510c:	3568      	adds	r5, #104	@ 0x68
 800510e:	e7e9      	b.n	80050e4 <_fwalk_sglue+0x10>

08005110 <iprintf>:
 8005110:	b40f      	push	{r0, r1, r2, r3}
 8005112:	b507      	push	{r0, r1, r2, lr}
 8005114:	4906      	ldr	r1, [pc, #24]	@ (8005130 <iprintf+0x20>)
 8005116:	ab04      	add	r3, sp, #16
 8005118:	6808      	ldr	r0, [r1, #0]
 800511a:	f853 2b04 	ldr.w	r2, [r3], #4
 800511e:	6881      	ldr	r1, [r0, #8]
 8005120:	9301      	str	r3, [sp, #4]
 8005122:	f001 fbc5 	bl	80068b0 <_vfiprintf_r>
 8005126:	b003      	add	sp, #12
 8005128:	f85d eb04 	ldr.w	lr, [sp], #4
 800512c:	b004      	add	sp, #16
 800512e:	4770      	bx	lr
 8005130:	20000018 	.word	0x20000018

08005134 <__sread>:
 8005134:	b510      	push	{r4, lr}
 8005136:	460c      	mov	r4, r1
 8005138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513c:	f000 f86c 	bl	8005218 <_read_r>
 8005140:	2800      	cmp	r0, #0
 8005142:	bfab      	itete	ge
 8005144:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005146:	89a3      	ldrhlt	r3, [r4, #12]
 8005148:	181b      	addge	r3, r3, r0
 800514a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800514e:	bfac      	ite	ge
 8005150:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005152:	81a3      	strhlt	r3, [r4, #12]
 8005154:	bd10      	pop	{r4, pc}

08005156 <__swrite>:
 8005156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800515a:	461f      	mov	r7, r3
 800515c:	898b      	ldrh	r3, [r1, #12]
 800515e:	05db      	lsls	r3, r3, #23
 8005160:	4605      	mov	r5, r0
 8005162:	460c      	mov	r4, r1
 8005164:	4616      	mov	r6, r2
 8005166:	d505      	bpl.n	8005174 <__swrite+0x1e>
 8005168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800516c:	2302      	movs	r3, #2
 800516e:	2200      	movs	r2, #0
 8005170:	f000 f840 	bl	80051f4 <_lseek_r>
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800517a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	4632      	mov	r2, r6
 8005182:	463b      	mov	r3, r7
 8005184:	4628      	mov	r0, r5
 8005186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800518a:	f000 b857 	b.w	800523c <_write_r>

0800518e <__sseek>:
 800518e:	b510      	push	{r4, lr}
 8005190:	460c      	mov	r4, r1
 8005192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005196:	f000 f82d 	bl	80051f4 <_lseek_r>
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	89a3      	ldrh	r3, [r4, #12]
 800519e:	bf15      	itete	ne
 80051a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051aa:	81a3      	strheq	r3, [r4, #12]
 80051ac:	bf18      	it	ne
 80051ae:	81a3      	strhne	r3, [r4, #12]
 80051b0:	bd10      	pop	{r4, pc}

080051b2 <__sclose>:
 80051b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b6:	f000 b80d 	b.w	80051d4 <_close_r>

080051ba <memset>:
 80051ba:	4402      	add	r2, r0
 80051bc:	4603      	mov	r3, r0
 80051be:	4293      	cmp	r3, r2
 80051c0:	d100      	bne.n	80051c4 <memset+0xa>
 80051c2:	4770      	bx	lr
 80051c4:	f803 1b01 	strb.w	r1, [r3], #1
 80051c8:	e7f9      	b.n	80051be <memset+0x4>
	...

080051cc <_localeconv_r>:
 80051cc:	4800      	ldr	r0, [pc, #0]	@ (80051d0 <_localeconv_r+0x4>)
 80051ce:	4770      	bx	lr
 80051d0:	20000158 	.word	0x20000158

080051d4 <_close_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4d06      	ldr	r5, [pc, #24]	@ (80051f0 <_close_r+0x1c>)
 80051d8:	2300      	movs	r3, #0
 80051da:	4604      	mov	r4, r0
 80051dc:	4608      	mov	r0, r1
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	f7fc fb58 	bl	8001894 <_close>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_close_r+0x1a>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_close_r+0x1a>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	20000ae8 	.word	0x20000ae8

080051f4 <_lseek_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d07      	ldr	r5, [pc, #28]	@ (8005214 <_lseek_r+0x20>)
 80051f8:	4604      	mov	r4, r0
 80051fa:	4608      	mov	r0, r1
 80051fc:	4611      	mov	r1, r2
 80051fe:	2200      	movs	r2, #0
 8005200:	602a      	str	r2, [r5, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f7fc fb6d 	bl	80018e2 <_lseek>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_lseek_r+0x1e>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_lseek_r+0x1e>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	20000ae8 	.word	0x20000ae8

08005218 <_read_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d07      	ldr	r5, [pc, #28]	@ (8005238 <_read_r+0x20>)
 800521c:	4604      	mov	r4, r0
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	2200      	movs	r2, #0
 8005224:	602a      	str	r2, [r5, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f7fc fafb 	bl	8001822 <_read>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_read_r+0x1e>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_read_r+0x1e>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20000ae8 	.word	0x20000ae8

0800523c <_write_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d07      	ldr	r5, [pc, #28]	@ (800525c <_write_r+0x20>)
 8005240:	4604      	mov	r4, r0
 8005242:	4608      	mov	r0, r1
 8005244:	4611      	mov	r1, r2
 8005246:	2200      	movs	r2, #0
 8005248:	602a      	str	r2, [r5, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f7fc fb06 	bl	800185c <_write>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_write_r+0x1e>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_write_r+0x1e>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	20000ae8 	.word	0x20000ae8

08005260 <__errno>:
 8005260:	4b01      	ldr	r3, [pc, #4]	@ (8005268 <__errno+0x8>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000018 	.word	0x20000018

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	@ (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	@ (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	@ (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	@ (80052b0 <__libc_init_array+0x44>)
 8005280:	f001 fec0 	bl	8007004 <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	080073c8 	.word	0x080073c8
 80052a8:	080073c8 	.word	0x080073c8
 80052ac:	080073c8 	.word	0x080073c8
 80052b0:	080073cc 	.word	0x080073cc

080052b4 <__retarget_lock_init_recursive>:
 80052b4:	4770      	bx	lr

080052b6 <__retarget_lock_acquire_recursive>:
 80052b6:	4770      	bx	lr

080052b8 <__retarget_lock_release_recursive>:
 80052b8:	4770      	bx	lr

080052ba <quorem>:
 80052ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052be:	6903      	ldr	r3, [r0, #16]
 80052c0:	690c      	ldr	r4, [r1, #16]
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	4607      	mov	r7, r0
 80052c6:	db7e      	blt.n	80053c6 <quorem+0x10c>
 80052c8:	3c01      	subs	r4, #1
 80052ca:	f101 0814 	add.w	r8, r1, #20
 80052ce:	00a3      	lsls	r3, r4, #2
 80052d0:	f100 0514 	add.w	r5, r0, #20
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052e4:	3301      	adds	r3, #1
 80052e6:	429a      	cmp	r2, r3
 80052e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80052f0:	d32e      	bcc.n	8005350 <quorem+0x96>
 80052f2:	f04f 0a00 	mov.w	sl, #0
 80052f6:	46c4      	mov	ip, r8
 80052f8:	46ae      	mov	lr, r5
 80052fa:	46d3      	mov	fp, sl
 80052fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005300:	b298      	uxth	r0, r3
 8005302:	fb06 a000 	mla	r0, r6, r0, sl
 8005306:	0c02      	lsrs	r2, r0, #16
 8005308:	0c1b      	lsrs	r3, r3, #16
 800530a:	fb06 2303 	mla	r3, r6, r3, r2
 800530e:	f8de 2000 	ldr.w	r2, [lr]
 8005312:	b280      	uxth	r0, r0
 8005314:	b292      	uxth	r2, r2
 8005316:	1a12      	subs	r2, r2, r0
 8005318:	445a      	add	r2, fp
 800531a:	f8de 0000 	ldr.w	r0, [lr]
 800531e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005322:	b29b      	uxth	r3, r3
 8005324:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005328:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800532c:	b292      	uxth	r2, r2
 800532e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005332:	45e1      	cmp	r9, ip
 8005334:	f84e 2b04 	str.w	r2, [lr], #4
 8005338:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800533c:	d2de      	bcs.n	80052fc <quorem+0x42>
 800533e:	9b00      	ldr	r3, [sp, #0]
 8005340:	58eb      	ldr	r3, [r5, r3]
 8005342:	b92b      	cbnz	r3, 8005350 <quorem+0x96>
 8005344:	9b01      	ldr	r3, [sp, #4]
 8005346:	3b04      	subs	r3, #4
 8005348:	429d      	cmp	r5, r3
 800534a:	461a      	mov	r2, r3
 800534c:	d32f      	bcc.n	80053ae <quorem+0xf4>
 800534e:	613c      	str	r4, [r7, #16]
 8005350:	4638      	mov	r0, r7
 8005352:	f001 f97b 	bl	800664c <__mcmp>
 8005356:	2800      	cmp	r0, #0
 8005358:	db25      	blt.n	80053a6 <quorem+0xec>
 800535a:	4629      	mov	r1, r5
 800535c:	2000      	movs	r0, #0
 800535e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005362:	f8d1 c000 	ldr.w	ip, [r1]
 8005366:	fa1f fe82 	uxth.w	lr, r2
 800536a:	fa1f f38c 	uxth.w	r3, ip
 800536e:	eba3 030e 	sub.w	r3, r3, lr
 8005372:	4403      	add	r3, r0
 8005374:	0c12      	lsrs	r2, r2, #16
 8005376:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800537a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800537e:	b29b      	uxth	r3, r3
 8005380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005384:	45c1      	cmp	r9, r8
 8005386:	f841 3b04 	str.w	r3, [r1], #4
 800538a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800538e:	d2e6      	bcs.n	800535e <quorem+0xa4>
 8005390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005394:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005398:	b922      	cbnz	r2, 80053a4 <quorem+0xea>
 800539a:	3b04      	subs	r3, #4
 800539c:	429d      	cmp	r5, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	d30b      	bcc.n	80053ba <quorem+0x100>
 80053a2:	613c      	str	r4, [r7, #16]
 80053a4:	3601      	adds	r6, #1
 80053a6:	4630      	mov	r0, r6
 80053a8:	b003      	add	sp, #12
 80053aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	3b04      	subs	r3, #4
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d1cb      	bne.n	800534e <quorem+0x94>
 80053b6:	3c01      	subs	r4, #1
 80053b8:	e7c6      	b.n	8005348 <quorem+0x8e>
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	3b04      	subs	r3, #4
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d1ef      	bne.n	80053a2 <quorem+0xe8>
 80053c2:	3c01      	subs	r4, #1
 80053c4:	e7ea      	b.n	800539c <quorem+0xe2>
 80053c6:	2000      	movs	r0, #0
 80053c8:	e7ee      	b.n	80053a8 <quorem+0xee>
 80053ca:	0000      	movs	r0, r0
 80053cc:	0000      	movs	r0, r0
	...

080053d0 <_dtoa_r>:
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	69c7      	ldr	r7, [r0, #28]
 80053d6:	b099      	sub	sp, #100	@ 0x64
 80053d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80053dc:	ec55 4b10 	vmov	r4, r5, d0
 80053e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80053e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80053e4:	4683      	mov	fp, r0
 80053e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80053e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80053ea:	b97f      	cbnz	r7, 800540c <_dtoa_r+0x3c>
 80053ec:	2010      	movs	r0, #16
 80053ee:	f000 fdfd 	bl	8005fec <malloc>
 80053f2:	4602      	mov	r2, r0
 80053f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80053f8:	b920      	cbnz	r0, 8005404 <_dtoa_r+0x34>
 80053fa:	4ba7      	ldr	r3, [pc, #668]	@ (8005698 <_dtoa_r+0x2c8>)
 80053fc:	21ef      	movs	r1, #239	@ 0xef
 80053fe:	48a7      	ldr	r0, [pc, #668]	@ (800569c <_dtoa_r+0x2cc>)
 8005400:	f001 fccc 	bl	8006d9c <__assert_func>
 8005404:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005408:	6007      	str	r7, [r0, #0]
 800540a:	60c7      	str	r7, [r0, #12]
 800540c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005410:	6819      	ldr	r1, [r3, #0]
 8005412:	b159      	cbz	r1, 800542c <_dtoa_r+0x5c>
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	604a      	str	r2, [r1, #4]
 8005418:	2301      	movs	r3, #1
 800541a:	4093      	lsls	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
 800541e:	4658      	mov	r0, fp
 8005420:	f000 feda 	bl	80061d8 <_Bfree>
 8005424:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	1e2b      	subs	r3, r5, #0
 800542e:	bfb9      	ittee	lt
 8005430:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005434:	9303      	strlt	r3, [sp, #12]
 8005436:	2300      	movge	r3, #0
 8005438:	6033      	strge	r3, [r6, #0]
 800543a:	9f03      	ldr	r7, [sp, #12]
 800543c:	4b98      	ldr	r3, [pc, #608]	@ (80056a0 <_dtoa_r+0x2d0>)
 800543e:	bfbc      	itt	lt
 8005440:	2201      	movlt	r2, #1
 8005442:	6032      	strlt	r2, [r6, #0]
 8005444:	43bb      	bics	r3, r7
 8005446:	d112      	bne.n	800546e <_dtoa_r+0x9e>
 8005448:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800544a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005454:	4323      	orrs	r3, r4
 8005456:	f000 854d 	beq.w	8005ef4 <_dtoa_r+0xb24>
 800545a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800545c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80056b4 <_dtoa_r+0x2e4>
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 854f 	beq.w	8005f04 <_dtoa_r+0xb34>
 8005466:	f10a 0303 	add.w	r3, sl, #3
 800546a:	f000 bd49 	b.w	8005f00 <_dtoa_r+0xb30>
 800546e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005472:	2200      	movs	r2, #0
 8005474:	ec51 0b17 	vmov	r0, r1, d7
 8005478:	2300      	movs	r3, #0
 800547a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800547e:	f7fb fb33 	bl	8000ae8 <__aeabi_dcmpeq>
 8005482:	4680      	mov	r8, r0
 8005484:	b158      	cbz	r0, 800549e <_dtoa_r+0xce>
 8005486:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005488:	2301      	movs	r3, #1
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800548e:	b113      	cbz	r3, 8005496 <_dtoa_r+0xc6>
 8005490:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005492:	4b84      	ldr	r3, [pc, #528]	@ (80056a4 <_dtoa_r+0x2d4>)
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80056b8 <_dtoa_r+0x2e8>
 800549a:	f000 bd33 	b.w	8005f04 <_dtoa_r+0xb34>
 800549e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80054a2:	aa16      	add	r2, sp, #88	@ 0x58
 80054a4:	a917      	add	r1, sp, #92	@ 0x5c
 80054a6:	4658      	mov	r0, fp
 80054a8:	f001 f980 	bl	80067ac <__d2b>
 80054ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80054b0:	4681      	mov	r9, r0
 80054b2:	2e00      	cmp	r6, #0
 80054b4:	d077      	beq.n	80055a6 <_dtoa_r+0x1d6>
 80054b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80054bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80054c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80054cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80054d0:	4619      	mov	r1, r3
 80054d2:	2200      	movs	r2, #0
 80054d4:	4b74      	ldr	r3, [pc, #464]	@ (80056a8 <_dtoa_r+0x2d8>)
 80054d6:	f7fa fee7 	bl	80002a8 <__aeabi_dsub>
 80054da:	a369      	add	r3, pc, #420	@ (adr r3, 8005680 <_dtoa_r+0x2b0>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f7fb f89a 	bl	8000618 <__aeabi_dmul>
 80054e4:	a368      	add	r3, pc, #416	@ (adr r3, 8005688 <_dtoa_r+0x2b8>)
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	f7fa fedf 	bl	80002ac <__adddf3>
 80054ee:	4604      	mov	r4, r0
 80054f0:	4630      	mov	r0, r6
 80054f2:	460d      	mov	r5, r1
 80054f4:	f7fb f826 	bl	8000544 <__aeabi_i2d>
 80054f8:	a365      	add	r3, pc, #404	@ (adr r3, 8005690 <_dtoa_r+0x2c0>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fb f88b 	bl	8000618 <__aeabi_dmul>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4620      	mov	r0, r4
 8005508:	4629      	mov	r1, r5
 800550a:	f7fa fecf 	bl	80002ac <__adddf3>
 800550e:	4604      	mov	r4, r0
 8005510:	460d      	mov	r5, r1
 8005512:	f7fb fb31 	bl	8000b78 <__aeabi_d2iz>
 8005516:	2200      	movs	r2, #0
 8005518:	4607      	mov	r7, r0
 800551a:	2300      	movs	r3, #0
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fb faec 	bl	8000afc <__aeabi_dcmplt>
 8005524:	b140      	cbz	r0, 8005538 <_dtoa_r+0x168>
 8005526:	4638      	mov	r0, r7
 8005528:	f7fb f80c 	bl	8000544 <__aeabi_i2d>
 800552c:	4622      	mov	r2, r4
 800552e:	462b      	mov	r3, r5
 8005530:	f7fb fada 	bl	8000ae8 <__aeabi_dcmpeq>
 8005534:	b900      	cbnz	r0, 8005538 <_dtoa_r+0x168>
 8005536:	3f01      	subs	r7, #1
 8005538:	2f16      	cmp	r7, #22
 800553a:	d851      	bhi.n	80055e0 <_dtoa_r+0x210>
 800553c:	4b5b      	ldr	r3, [pc, #364]	@ (80056ac <_dtoa_r+0x2dc>)
 800553e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800554a:	f7fb fad7 	bl	8000afc <__aeabi_dcmplt>
 800554e:	2800      	cmp	r0, #0
 8005550:	d048      	beq.n	80055e4 <_dtoa_r+0x214>
 8005552:	3f01      	subs	r7, #1
 8005554:	2300      	movs	r3, #0
 8005556:	9312      	str	r3, [sp, #72]	@ 0x48
 8005558:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800555a:	1b9b      	subs	r3, r3, r6
 800555c:	1e5a      	subs	r2, r3, #1
 800555e:	bf44      	itt	mi
 8005560:	f1c3 0801 	rsbmi	r8, r3, #1
 8005564:	2300      	movmi	r3, #0
 8005566:	9208      	str	r2, [sp, #32]
 8005568:	bf54      	ite	pl
 800556a:	f04f 0800 	movpl.w	r8, #0
 800556e:	9308      	strmi	r3, [sp, #32]
 8005570:	2f00      	cmp	r7, #0
 8005572:	db39      	blt.n	80055e8 <_dtoa_r+0x218>
 8005574:	9b08      	ldr	r3, [sp, #32]
 8005576:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005578:	443b      	add	r3, r7
 800557a:	9308      	str	r3, [sp, #32]
 800557c:	2300      	movs	r3, #0
 800557e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005582:	2b09      	cmp	r3, #9
 8005584:	d864      	bhi.n	8005650 <_dtoa_r+0x280>
 8005586:	2b05      	cmp	r3, #5
 8005588:	bfc4      	itt	gt
 800558a:	3b04      	subgt	r3, #4
 800558c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800558e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005590:	f1a3 0302 	sub.w	r3, r3, #2
 8005594:	bfcc      	ite	gt
 8005596:	2400      	movgt	r4, #0
 8005598:	2401      	movle	r4, #1
 800559a:	2b03      	cmp	r3, #3
 800559c:	d863      	bhi.n	8005666 <_dtoa_r+0x296>
 800559e:	e8df f003 	tbb	[pc, r3]
 80055a2:	372a      	.short	0x372a
 80055a4:	5535      	.short	0x5535
 80055a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80055aa:	441e      	add	r6, r3
 80055ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	bfc1      	itttt	gt
 80055b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80055b8:	409f      	lslgt	r7, r3
 80055ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80055be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80055c2:	bfd6      	itet	le
 80055c4:	f1c3 0320 	rsble	r3, r3, #32
 80055c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80055cc:	fa04 f003 	lslle.w	r0, r4, r3
 80055d0:	f7fa ffa8 	bl	8000524 <__aeabi_ui2d>
 80055d4:	2201      	movs	r2, #1
 80055d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80055da:	3e01      	subs	r6, #1
 80055dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80055de:	e777      	b.n	80054d0 <_dtoa_r+0x100>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e7b8      	b.n	8005556 <_dtoa_r+0x186>
 80055e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80055e6:	e7b7      	b.n	8005558 <_dtoa_r+0x188>
 80055e8:	427b      	negs	r3, r7
 80055ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80055ec:	2300      	movs	r3, #0
 80055ee:	eba8 0807 	sub.w	r8, r8, r7
 80055f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80055f4:	e7c4      	b.n	8005580 <_dtoa_r+0x1b0>
 80055f6:	2300      	movs	r3, #0
 80055f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dc35      	bgt.n	800566c <_dtoa_r+0x29c>
 8005600:	2301      	movs	r3, #1
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	9307      	str	r3, [sp, #28]
 8005606:	461a      	mov	r2, r3
 8005608:	920e      	str	r2, [sp, #56]	@ 0x38
 800560a:	e00b      	b.n	8005624 <_dtoa_r+0x254>
 800560c:	2301      	movs	r3, #1
 800560e:	e7f3      	b.n	80055f8 <_dtoa_r+0x228>
 8005610:	2300      	movs	r3, #0
 8005612:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	3301      	adds	r3, #1
 800561c:	2b01      	cmp	r3, #1
 800561e:	9307      	str	r3, [sp, #28]
 8005620:	bfb8      	it	lt
 8005622:	2301      	movlt	r3, #1
 8005624:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005628:	2100      	movs	r1, #0
 800562a:	2204      	movs	r2, #4
 800562c:	f102 0514 	add.w	r5, r2, #20
 8005630:	429d      	cmp	r5, r3
 8005632:	d91f      	bls.n	8005674 <_dtoa_r+0x2a4>
 8005634:	6041      	str	r1, [r0, #4]
 8005636:	4658      	mov	r0, fp
 8005638:	f000 fd8e 	bl	8006158 <_Balloc>
 800563c:	4682      	mov	sl, r0
 800563e:	2800      	cmp	r0, #0
 8005640:	d13c      	bne.n	80056bc <_dtoa_r+0x2ec>
 8005642:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <_dtoa_r+0x2e0>)
 8005644:	4602      	mov	r2, r0
 8005646:	f240 11af 	movw	r1, #431	@ 0x1af
 800564a:	e6d8      	b.n	80053fe <_dtoa_r+0x2e>
 800564c:	2301      	movs	r3, #1
 800564e:	e7e0      	b.n	8005612 <_dtoa_r+0x242>
 8005650:	2401      	movs	r4, #1
 8005652:	2300      	movs	r3, #0
 8005654:	9309      	str	r3, [sp, #36]	@ 0x24
 8005656:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005658:	f04f 33ff 	mov.w	r3, #4294967295
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	9307      	str	r3, [sp, #28]
 8005660:	2200      	movs	r2, #0
 8005662:	2312      	movs	r3, #18
 8005664:	e7d0      	b.n	8005608 <_dtoa_r+0x238>
 8005666:	2301      	movs	r3, #1
 8005668:	930b      	str	r3, [sp, #44]	@ 0x2c
 800566a:	e7f5      	b.n	8005658 <_dtoa_r+0x288>
 800566c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	9307      	str	r3, [sp, #28]
 8005672:	e7d7      	b.n	8005624 <_dtoa_r+0x254>
 8005674:	3101      	adds	r1, #1
 8005676:	0052      	lsls	r2, r2, #1
 8005678:	e7d8      	b.n	800562c <_dtoa_r+0x25c>
 800567a:	bf00      	nop
 800567c:	f3af 8000 	nop.w
 8005680:	636f4361 	.word	0x636f4361
 8005684:	3fd287a7 	.word	0x3fd287a7
 8005688:	8b60c8b3 	.word	0x8b60c8b3
 800568c:	3fc68a28 	.word	0x3fc68a28
 8005690:	509f79fb 	.word	0x509f79fb
 8005694:	3fd34413 	.word	0x3fd34413
 8005698:	0800708d 	.word	0x0800708d
 800569c:	080070a4 	.word	0x080070a4
 80056a0:	7ff00000 	.word	0x7ff00000
 80056a4:	0800705d 	.word	0x0800705d
 80056a8:	3ff80000 	.word	0x3ff80000
 80056ac:	080071a0 	.word	0x080071a0
 80056b0:	080070fc 	.word	0x080070fc
 80056b4:	08007089 	.word	0x08007089
 80056b8:	0800705c 	.word	0x0800705c
 80056bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056c0:	6018      	str	r0, [r3, #0]
 80056c2:	9b07      	ldr	r3, [sp, #28]
 80056c4:	2b0e      	cmp	r3, #14
 80056c6:	f200 80a4 	bhi.w	8005812 <_dtoa_r+0x442>
 80056ca:	2c00      	cmp	r4, #0
 80056cc:	f000 80a1 	beq.w	8005812 <_dtoa_r+0x442>
 80056d0:	2f00      	cmp	r7, #0
 80056d2:	dd33      	ble.n	800573c <_dtoa_r+0x36c>
 80056d4:	4bad      	ldr	r3, [pc, #692]	@ (800598c <_dtoa_r+0x5bc>)
 80056d6:	f007 020f 	and.w	r2, r7, #15
 80056da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056de:	ed93 7b00 	vldr	d7, [r3]
 80056e2:	05f8      	lsls	r0, r7, #23
 80056e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80056e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056ec:	d516      	bpl.n	800571c <_dtoa_r+0x34c>
 80056ee:	4ba8      	ldr	r3, [pc, #672]	@ (8005990 <_dtoa_r+0x5c0>)
 80056f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056f8:	f7fb f8b8 	bl	800086c <__aeabi_ddiv>
 80056fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005700:	f004 040f 	and.w	r4, r4, #15
 8005704:	2603      	movs	r6, #3
 8005706:	4da2      	ldr	r5, [pc, #648]	@ (8005990 <_dtoa_r+0x5c0>)
 8005708:	b954      	cbnz	r4, 8005720 <_dtoa_r+0x350>
 800570a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800570e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005712:	f7fb f8ab 	bl	800086c <__aeabi_ddiv>
 8005716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800571a:	e028      	b.n	800576e <_dtoa_r+0x39e>
 800571c:	2602      	movs	r6, #2
 800571e:	e7f2      	b.n	8005706 <_dtoa_r+0x336>
 8005720:	07e1      	lsls	r1, r4, #31
 8005722:	d508      	bpl.n	8005736 <_dtoa_r+0x366>
 8005724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005728:	e9d5 2300 	ldrd	r2, r3, [r5]
 800572c:	f7fa ff74 	bl	8000618 <__aeabi_dmul>
 8005730:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005734:	3601      	adds	r6, #1
 8005736:	1064      	asrs	r4, r4, #1
 8005738:	3508      	adds	r5, #8
 800573a:	e7e5      	b.n	8005708 <_dtoa_r+0x338>
 800573c:	f000 80d2 	beq.w	80058e4 <_dtoa_r+0x514>
 8005740:	427c      	negs	r4, r7
 8005742:	4b92      	ldr	r3, [pc, #584]	@ (800598c <_dtoa_r+0x5bc>)
 8005744:	4d92      	ldr	r5, [pc, #584]	@ (8005990 <_dtoa_r+0x5c0>)
 8005746:	f004 020f 	and.w	r2, r4, #15
 800574a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005756:	f7fa ff5f 	bl	8000618 <__aeabi_dmul>
 800575a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800575e:	1124      	asrs	r4, r4, #4
 8005760:	2300      	movs	r3, #0
 8005762:	2602      	movs	r6, #2
 8005764:	2c00      	cmp	r4, #0
 8005766:	f040 80b2 	bne.w	80058ce <_dtoa_r+0x4fe>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1d3      	bne.n	8005716 <_dtoa_r+0x346>
 800576e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005770:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80b7 	beq.w	80058e8 <_dtoa_r+0x518>
 800577a:	4b86      	ldr	r3, [pc, #536]	@ (8005994 <_dtoa_r+0x5c4>)
 800577c:	2200      	movs	r2, #0
 800577e:	4620      	mov	r0, r4
 8005780:	4629      	mov	r1, r5
 8005782:	f7fb f9bb 	bl	8000afc <__aeabi_dcmplt>
 8005786:	2800      	cmp	r0, #0
 8005788:	f000 80ae 	beq.w	80058e8 <_dtoa_r+0x518>
 800578c:	9b07      	ldr	r3, [sp, #28]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 80aa 	beq.w	80058e8 <_dtoa_r+0x518>
 8005794:	9b00      	ldr	r3, [sp, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	dd37      	ble.n	800580a <_dtoa_r+0x43a>
 800579a:	1e7b      	subs	r3, r7, #1
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	4620      	mov	r0, r4
 80057a0:	4b7d      	ldr	r3, [pc, #500]	@ (8005998 <_dtoa_r+0x5c8>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	4629      	mov	r1, r5
 80057a6:	f7fa ff37 	bl	8000618 <__aeabi_dmul>
 80057aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057ae:	9c00      	ldr	r4, [sp, #0]
 80057b0:	3601      	adds	r6, #1
 80057b2:	4630      	mov	r0, r6
 80057b4:	f7fa fec6 	bl	8000544 <__aeabi_i2d>
 80057b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057bc:	f7fa ff2c 	bl	8000618 <__aeabi_dmul>
 80057c0:	4b76      	ldr	r3, [pc, #472]	@ (800599c <_dtoa_r+0x5cc>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	f7fa fd72 	bl	80002ac <__adddf3>
 80057c8:	4605      	mov	r5, r0
 80057ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80057ce:	2c00      	cmp	r4, #0
 80057d0:	f040 808d 	bne.w	80058ee <_dtoa_r+0x51e>
 80057d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d8:	4b71      	ldr	r3, [pc, #452]	@ (80059a0 <_dtoa_r+0x5d0>)
 80057da:	2200      	movs	r2, #0
 80057dc:	f7fa fd64 	bl	80002a8 <__aeabi_dsub>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80057e8:	462a      	mov	r2, r5
 80057ea:	4633      	mov	r3, r6
 80057ec:	f7fb f9a4 	bl	8000b38 <__aeabi_dcmpgt>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f040 828b 	bne.w	8005d0c <_dtoa_r+0x93c>
 80057f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057fa:	462a      	mov	r2, r5
 80057fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005800:	f7fb f97c 	bl	8000afc <__aeabi_dcmplt>
 8005804:	2800      	cmp	r0, #0
 8005806:	f040 8128 	bne.w	8005a5a <_dtoa_r+0x68a>
 800580a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800580e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005812:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005814:	2b00      	cmp	r3, #0
 8005816:	f2c0 815a 	blt.w	8005ace <_dtoa_r+0x6fe>
 800581a:	2f0e      	cmp	r7, #14
 800581c:	f300 8157 	bgt.w	8005ace <_dtoa_r+0x6fe>
 8005820:	4b5a      	ldr	r3, [pc, #360]	@ (800598c <_dtoa_r+0x5bc>)
 8005822:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005826:	ed93 7b00 	vldr	d7, [r3]
 800582a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800582c:	2b00      	cmp	r3, #0
 800582e:	ed8d 7b00 	vstr	d7, [sp]
 8005832:	da03      	bge.n	800583c <_dtoa_r+0x46c>
 8005834:	9b07      	ldr	r3, [sp, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f340 8101 	ble.w	8005a3e <_dtoa_r+0x66e>
 800583c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005840:	4656      	mov	r6, sl
 8005842:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f7fb f80f 	bl	800086c <__aeabi_ddiv>
 800584e:	f7fb f993 	bl	8000b78 <__aeabi_d2iz>
 8005852:	4680      	mov	r8, r0
 8005854:	f7fa fe76 	bl	8000544 <__aeabi_i2d>
 8005858:	e9dd 2300 	ldrd	r2, r3, [sp]
 800585c:	f7fa fedc 	bl	8000618 <__aeabi_dmul>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4620      	mov	r0, r4
 8005866:	4629      	mov	r1, r5
 8005868:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800586c:	f7fa fd1c 	bl	80002a8 <__aeabi_dsub>
 8005870:	f806 4b01 	strb.w	r4, [r6], #1
 8005874:	9d07      	ldr	r5, [sp, #28]
 8005876:	eba6 040a 	sub.w	r4, r6, sl
 800587a:	42a5      	cmp	r5, r4
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	f040 8117 	bne.w	8005ab2 <_dtoa_r+0x6e2>
 8005884:	f7fa fd12 	bl	80002ac <__adddf3>
 8005888:	e9dd 2300 	ldrd	r2, r3, [sp]
 800588c:	4604      	mov	r4, r0
 800588e:	460d      	mov	r5, r1
 8005890:	f7fb f952 	bl	8000b38 <__aeabi_dcmpgt>
 8005894:	2800      	cmp	r0, #0
 8005896:	f040 80f9 	bne.w	8005a8c <_dtoa_r+0x6bc>
 800589a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800589e:	4620      	mov	r0, r4
 80058a0:	4629      	mov	r1, r5
 80058a2:	f7fb f921 	bl	8000ae8 <__aeabi_dcmpeq>
 80058a6:	b118      	cbz	r0, 80058b0 <_dtoa_r+0x4e0>
 80058a8:	f018 0f01 	tst.w	r8, #1
 80058ac:	f040 80ee 	bne.w	8005a8c <_dtoa_r+0x6bc>
 80058b0:	4649      	mov	r1, r9
 80058b2:	4658      	mov	r0, fp
 80058b4:	f000 fc90 	bl	80061d8 <_Bfree>
 80058b8:	2300      	movs	r3, #0
 80058ba:	7033      	strb	r3, [r6, #0]
 80058bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058be:	3701      	adds	r7, #1
 80058c0:	601f      	str	r7, [r3, #0]
 80058c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 831d 	beq.w	8005f04 <_dtoa_r+0xb34>
 80058ca:	601e      	str	r6, [r3, #0]
 80058cc:	e31a      	b.n	8005f04 <_dtoa_r+0xb34>
 80058ce:	07e2      	lsls	r2, r4, #31
 80058d0:	d505      	bpl.n	80058de <_dtoa_r+0x50e>
 80058d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80058d6:	f7fa fe9f 	bl	8000618 <__aeabi_dmul>
 80058da:	3601      	adds	r6, #1
 80058dc:	2301      	movs	r3, #1
 80058de:	1064      	asrs	r4, r4, #1
 80058e0:	3508      	adds	r5, #8
 80058e2:	e73f      	b.n	8005764 <_dtoa_r+0x394>
 80058e4:	2602      	movs	r6, #2
 80058e6:	e742      	b.n	800576e <_dtoa_r+0x39e>
 80058e8:	9c07      	ldr	r4, [sp, #28]
 80058ea:	9704      	str	r7, [sp, #16]
 80058ec:	e761      	b.n	80057b2 <_dtoa_r+0x3e2>
 80058ee:	4b27      	ldr	r3, [pc, #156]	@ (800598c <_dtoa_r+0x5bc>)
 80058f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058fa:	4454      	add	r4, sl
 80058fc:	2900      	cmp	r1, #0
 80058fe:	d053      	beq.n	80059a8 <_dtoa_r+0x5d8>
 8005900:	4928      	ldr	r1, [pc, #160]	@ (80059a4 <_dtoa_r+0x5d4>)
 8005902:	2000      	movs	r0, #0
 8005904:	f7fa ffb2 	bl	800086c <__aeabi_ddiv>
 8005908:	4633      	mov	r3, r6
 800590a:	462a      	mov	r2, r5
 800590c:	f7fa fccc 	bl	80002a8 <__aeabi_dsub>
 8005910:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005914:	4656      	mov	r6, sl
 8005916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800591a:	f7fb f92d 	bl	8000b78 <__aeabi_d2iz>
 800591e:	4605      	mov	r5, r0
 8005920:	f7fa fe10 	bl	8000544 <__aeabi_i2d>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800592c:	f7fa fcbc 	bl	80002a8 <__aeabi_dsub>
 8005930:	3530      	adds	r5, #48	@ 0x30
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800593a:	f806 5b01 	strb.w	r5, [r6], #1
 800593e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005942:	f7fb f8db 	bl	8000afc <__aeabi_dcmplt>
 8005946:	2800      	cmp	r0, #0
 8005948:	d171      	bne.n	8005a2e <_dtoa_r+0x65e>
 800594a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800594e:	4911      	ldr	r1, [pc, #68]	@ (8005994 <_dtoa_r+0x5c4>)
 8005950:	2000      	movs	r0, #0
 8005952:	f7fa fca9 	bl	80002a8 <__aeabi_dsub>
 8005956:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800595a:	f7fb f8cf 	bl	8000afc <__aeabi_dcmplt>
 800595e:	2800      	cmp	r0, #0
 8005960:	f040 8095 	bne.w	8005a8e <_dtoa_r+0x6be>
 8005964:	42a6      	cmp	r6, r4
 8005966:	f43f af50 	beq.w	800580a <_dtoa_r+0x43a>
 800596a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800596e:	4b0a      	ldr	r3, [pc, #40]	@ (8005998 <_dtoa_r+0x5c8>)
 8005970:	2200      	movs	r2, #0
 8005972:	f7fa fe51 	bl	8000618 <__aeabi_dmul>
 8005976:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <_dtoa_r+0x5c8>)
 8005978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800597c:	2200      	movs	r2, #0
 800597e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005982:	f7fa fe49 	bl	8000618 <__aeabi_dmul>
 8005986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800598a:	e7c4      	b.n	8005916 <_dtoa_r+0x546>
 800598c:	080071a0 	.word	0x080071a0
 8005990:	08007178 	.word	0x08007178
 8005994:	3ff00000 	.word	0x3ff00000
 8005998:	40240000 	.word	0x40240000
 800599c:	401c0000 	.word	0x401c0000
 80059a0:	40140000 	.word	0x40140000
 80059a4:	3fe00000 	.word	0x3fe00000
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	f7fa fe34 	bl	8000618 <__aeabi_dmul>
 80059b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80059b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80059b6:	4656      	mov	r6, sl
 80059b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059bc:	f7fb f8dc 	bl	8000b78 <__aeabi_d2iz>
 80059c0:	4605      	mov	r5, r0
 80059c2:	f7fa fdbf 	bl	8000544 <__aeabi_i2d>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ce:	f7fa fc6b 	bl	80002a8 <__aeabi_dsub>
 80059d2:	3530      	adds	r5, #48	@ 0x30
 80059d4:	f806 5b01 	strb.w	r5, [r6], #1
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	42a6      	cmp	r6, r4
 80059de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80059e2:	f04f 0200 	mov.w	r2, #0
 80059e6:	d124      	bne.n	8005a32 <_dtoa_r+0x662>
 80059e8:	4bac      	ldr	r3, [pc, #688]	@ (8005c9c <_dtoa_r+0x8cc>)
 80059ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80059ee:	f7fa fc5d 	bl	80002ac <__adddf3>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059fa:	f7fb f89d 	bl	8000b38 <__aeabi_dcmpgt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d145      	bne.n	8005a8e <_dtoa_r+0x6be>
 8005a02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005a06:	49a5      	ldr	r1, [pc, #660]	@ (8005c9c <_dtoa_r+0x8cc>)
 8005a08:	2000      	movs	r0, #0
 8005a0a:	f7fa fc4d 	bl	80002a8 <__aeabi_dsub>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a16:	f7fb f871 	bl	8000afc <__aeabi_dcmplt>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	f43f aef5 	beq.w	800580a <_dtoa_r+0x43a>
 8005a20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005a22:	1e73      	subs	r3, r6, #1
 8005a24:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005a2a:	2b30      	cmp	r3, #48	@ 0x30
 8005a2c:	d0f8      	beq.n	8005a20 <_dtoa_r+0x650>
 8005a2e:	9f04      	ldr	r7, [sp, #16]
 8005a30:	e73e      	b.n	80058b0 <_dtoa_r+0x4e0>
 8005a32:	4b9b      	ldr	r3, [pc, #620]	@ (8005ca0 <_dtoa_r+0x8d0>)
 8005a34:	f7fa fdf0 	bl	8000618 <__aeabi_dmul>
 8005a38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a3c:	e7bc      	b.n	80059b8 <_dtoa_r+0x5e8>
 8005a3e:	d10c      	bne.n	8005a5a <_dtoa_r+0x68a>
 8005a40:	4b98      	ldr	r3, [pc, #608]	@ (8005ca4 <_dtoa_r+0x8d4>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a48:	f7fa fde6 	bl	8000618 <__aeabi_dmul>
 8005a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a50:	f7fb f868 	bl	8000b24 <__aeabi_dcmpge>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f000 8157 	beq.w	8005d08 <_dtoa_r+0x938>
 8005a5a:	2400      	movs	r4, #0
 8005a5c:	4625      	mov	r5, r4
 8005a5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a60:	43db      	mvns	r3, r3
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	4656      	mov	r6, sl
 8005a66:	2700      	movs	r7, #0
 8005a68:	4621      	mov	r1, r4
 8005a6a:	4658      	mov	r0, fp
 8005a6c:	f000 fbb4 	bl	80061d8 <_Bfree>
 8005a70:	2d00      	cmp	r5, #0
 8005a72:	d0dc      	beq.n	8005a2e <_dtoa_r+0x65e>
 8005a74:	b12f      	cbz	r7, 8005a82 <_dtoa_r+0x6b2>
 8005a76:	42af      	cmp	r7, r5
 8005a78:	d003      	beq.n	8005a82 <_dtoa_r+0x6b2>
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	4658      	mov	r0, fp
 8005a7e:	f000 fbab 	bl	80061d8 <_Bfree>
 8005a82:	4629      	mov	r1, r5
 8005a84:	4658      	mov	r0, fp
 8005a86:	f000 fba7 	bl	80061d8 <_Bfree>
 8005a8a:	e7d0      	b.n	8005a2e <_dtoa_r+0x65e>
 8005a8c:	9704      	str	r7, [sp, #16]
 8005a8e:	4633      	mov	r3, r6
 8005a90:	461e      	mov	r6, r3
 8005a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a96:	2a39      	cmp	r2, #57	@ 0x39
 8005a98:	d107      	bne.n	8005aaa <_dtoa_r+0x6da>
 8005a9a:	459a      	cmp	sl, r3
 8005a9c:	d1f8      	bne.n	8005a90 <_dtoa_r+0x6c0>
 8005a9e:	9a04      	ldr	r2, [sp, #16]
 8005aa0:	3201      	adds	r2, #1
 8005aa2:	9204      	str	r2, [sp, #16]
 8005aa4:	2230      	movs	r2, #48	@ 0x30
 8005aa6:	f88a 2000 	strb.w	r2, [sl]
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	3201      	adds	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e7bd      	b.n	8005a2e <_dtoa_r+0x65e>
 8005ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ca0 <_dtoa_r+0x8d0>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f7fa fdaf 	bl	8000618 <__aeabi_dmul>
 8005aba:	2200      	movs	r2, #0
 8005abc:	2300      	movs	r3, #0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	460d      	mov	r5, r1
 8005ac2:	f7fb f811 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	f43f aebb 	beq.w	8005842 <_dtoa_r+0x472>
 8005acc:	e6f0      	b.n	80058b0 <_dtoa_r+0x4e0>
 8005ace:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ad0:	2a00      	cmp	r2, #0
 8005ad2:	f000 80db 	beq.w	8005c8c <_dtoa_r+0x8bc>
 8005ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ad8:	2a01      	cmp	r2, #1
 8005ada:	f300 80bf 	bgt.w	8005c5c <_dtoa_r+0x88c>
 8005ade:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	f000 80b7 	beq.w	8005c54 <_dtoa_r+0x884>
 8005ae6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005aea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005aec:	4646      	mov	r6, r8
 8005aee:	9a08      	ldr	r2, [sp, #32]
 8005af0:	2101      	movs	r1, #1
 8005af2:	441a      	add	r2, r3
 8005af4:	4658      	mov	r0, fp
 8005af6:	4498      	add	r8, r3
 8005af8:	9208      	str	r2, [sp, #32]
 8005afa:	f000 fc21 	bl	8006340 <__i2b>
 8005afe:	4605      	mov	r5, r0
 8005b00:	b15e      	cbz	r6, 8005b1a <_dtoa_r+0x74a>
 8005b02:	9b08      	ldr	r3, [sp, #32]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dd08      	ble.n	8005b1a <_dtoa_r+0x74a>
 8005b08:	42b3      	cmp	r3, r6
 8005b0a:	9a08      	ldr	r2, [sp, #32]
 8005b0c:	bfa8      	it	ge
 8005b0e:	4633      	movge	r3, r6
 8005b10:	eba8 0803 	sub.w	r8, r8, r3
 8005b14:	1af6      	subs	r6, r6, r3
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	9308      	str	r3, [sp, #32]
 8005b1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b1c:	b1f3      	cbz	r3, 8005b5c <_dtoa_r+0x78c>
 8005b1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80b7 	beq.w	8005c94 <_dtoa_r+0x8c4>
 8005b26:	b18c      	cbz	r4, 8005b4c <_dtoa_r+0x77c>
 8005b28:	4629      	mov	r1, r5
 8005b2a:	4622      	mov	r2, r4
 8005b2c:	4658      	mov	r0, fp
 8005b2e:	f000 fcc7 	bl	80064c0 <__pow5mult>
 8005b32:	464a      	mov	r2, r9
 8005b34:	4601      	mov	r1, r0
 8005b36:	4605      	mov	r5, r0
 8005b38:	4658      	mov	r0, fp
 8005b3a:	f000 fc17 	bl	800636c <__multiply>
 8005b3e:	4649      	mov	r1, r9
 8005b40:	9004      	str	r0, [sp, #16]
 8005b42:	4658      	mov	r0, fp
 8005b44:	f000 fb48 	bl	80061d8 <_Bfree>
 8005b48:	9b04      	ldr	r3, [sp, #16]
 8005b4a:	4699      	mov	r9, r3
 8005b4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b4e:	1b1a      	subs	r2, r3, r4
 8005b50:	d004      	beq.n	8005b5c <_dtoa_r+0x78c>
 8005b52:	4649      	mov	r1, r9
 8005b54:	4658      	mov	r0, fp
 8005b56:	f000 fcb3 	bl	80064c0 <__pow5mult>
 8005b5a:	4681      	mov	r9, r0
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4658      	mov	r0, fp
 8005b60:	f000 fbee 	bl	8006340 <__i2b>
 8005b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b66:	4604      	mov	r4, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 81cf 	beq.w	8005f0c <_dtoa_r+0xb3c>
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4601      	mov	r1, r0
 8005b72:	4658      	mov	r0, fp
 8005b74:	f000 fca4 	bl	80064c0 <__pow5mult>
 8005b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	f300 8095 	bgt.w	8005cac <_dtoa_r+0x8dc>
 8005b82:	9b02      	ldr	r3, [sp, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8087 	bne.w	8005c98 <_dtoa_r+0x8c8>
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f040 8089 	bne.w	8005ca8 <_dtoa_r+0x8d8>
 8005b96:	9b03      	ldr	r3, [sp, #12]
 8005b98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b9c:	0d1b      	lsrs	r3, r3, #20
 8005b9e:	051b      	lsls	r3, r3, #20
 8005ba0:	b12b      	cbz	r3, 8005bae <_dtoa_r+0x7de>
 8005ba2:	9b08      	ldr	r3, [sp, #32]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	9308      	str	r3, [sp, #32]
 8005ba8:	f108 0801 	add.w	r8, r8, #1
 8005bac:	2301      	movs	r3, #1
 8005bae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 81b0 	beq.w	8005f18 <_dtoa_r+0xb48>
 8005bb8:	6923      	ldr	r3, [r4, #16]
 8005bba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bbe:	6918      	ldr	r0, [r3, #16]
 8005bc0:	f000 fb72 	bl	80062a8 <__hi0bits>
 8005bc4:	f1c0 0020 	rsb	r0, r0, #32
 8005bc8:	9b08      	ldr	r3, [sp, #32]
 8005bca:	4418      	add	r0, r3
 8005bcc:	f010 001f 	ands.w	r0, r0, #31
 8005bd0:	d077      	beq.n	8005cc2 <_dtoa_r+0x8f2>
 8005bd2:	f1c0 0320 	rsb	r3, r0, #32
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	dd6b      	ble.n	8005cb2 <_dtoa_r+0x8e2>
 8005bda:	9b08      	ldr	r3, [sp, #32]
 8005bdc:	f1c0 001c 	rsb	r0, r0, #28
 8005be0:	4403      	add	r3, r0
 8005be2:	4480      	add	r8, r0
 8005be4:	4406      	add	r6, r0
 8005be6:	9308      	str	r3, [sp, #32]
 8005be8:	f1b8 0f00 	cmp.w	r8, #0
 8005bec:	dd05      	ble.n	8005bfa <_dtoa_r+0x82a>
 8005bee:	4649      	mov	r1, r9
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	4658      	mov	r0, fp
 8005bf4:	f000 fcbe 	bl	8006574 <__lshift>
 8005bf8:	4681      	mov	r9, r0
 8005bfa:	9b08      	ldr	r3, [sp, #32]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	dd05      	ble.n	8005c0c <_dtoa_r+0x83c>
 8005c00:	4621      	mov	r1, r4
 8005c02:	461a      	mov	r2, r3
 8005c04:	4658      	mov	r0, fp
 8005c06:	f000 fcb5 	bl	8006574 <__lshift>
 8005c0a:	4604      	mov	r4, r0
 8005c0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d059      	beq.n	8005cc6 <_dtoa_r+0x8f6>
 8005c12:	4621      	mov	r1, r4
 8005c14:	4648      	mov	r0, r9
 8005c16:	f000 fd19 	bl	800664c <__mcmp>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	da53      	bge.n	8005cc6 <_dtoa_r+0x8f6>
 8005c1e:	1e7b      	subs	r3, r7, #1
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	4649      	mov	r1, r9
 8005c24:	2300      	movs	r3, #0
 8005c26:	220a      	movs	r2, #10
 8005c28:	4658      	mov	r0, fp
 8005c2a:	f000 faf7 	bl	800621c <__multadd>
 8005c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c30:	4681      	mov	r9, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 8172 	beq.w	8005f1c <_dtoa_r+0xb4c>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4629      	mov	r1, r5
 8005c3c:	220a      	movs	r2, #10
 8005c3e:	4658      	mov	r0, fp
 8005c40:	f000 faec 	bl	800621c <__multadd>
 8005c44:	9b00      	ldr	r3, [sp, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	4605      	mov	r5, r0
 8005c4a:	dc67      	bgt.n	8005d1c <_dtoa_r+0x94c>
 8005c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	dc41      	bgt.n	8005cd6 <_dtoa_r+0x906>
 8005c52:	e063      	b.n	8005d1c <_dtoa_r+0x94c>
 8005c54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005c56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c5a:	e746      	b.n	8005aea <_dtoa_r+0x71a>
 8005c5c:	9b07      	ldr	r3, [sp, #28]
 8005c5e:	1e5c      	subs	r4, r3, #1
 8005c60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c62:	42a3      	cmp	r3, r4
 8005c64:	bfbf      	itttt	lt
 8005c66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005c68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005c6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005c6c:	1ae3      	sublt	r3, r4, r3
 8005c6e:	bfb4      	ite	lt
 8005c70:	18d2      	addlt	r2, r2, r3
 8005c72:	1b1c      	subge	r4, r3, r4
 8005c74:	9b07      	ldr	r3, [sp, #28]
 8005c76:	bfbc      	itt	lt
 8005c78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005c7a:	2400      	movlt	r4, #0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bfb5      	itete	lt
 8005c80:	eba8 0603 	sublt.w	r6, r8, r3
 8005c84:	9b07      	ldrge	r3, [sp, #28]
 8005c86:	2300      	movlt	r3, #0
 8005c88:	4646      	movge	r6, r8
 8005c8a:	e730      	b.n	8005aee <_dtoa_r+0x71e>
 8005c8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c90:	4646      	mov	r6, r8
 8005c92:	e735      	b.n	8005b00 <_dtoa_r+0x730>
 8005c94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c96:	e75c      	b.n	8005b52 <_dtoa_r+0x782>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	e788      	b.n	8005bae <_dtoa_r+0x7de>
 8005c9c:	3fe00000 	.word	0x3fe00000
 8005ca0:	40240000 	.word	0x40240000
 8005ca4:	40140000 	.word	0x40140000
 8005ca8:	9b02      	ldr	r3, [sp, #8]
 8005caa:	e780      	b.n	8005bae <_dtoa_r+0x7de>
 8005cac:	2300      	movs	r3, #0
 8005cae:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cb0:	e782      	b.n	8005bb8 <_dtoa_r+0x7e8>
 8005cb2:	d099      	beq.n	8005be8 <_dtoa_r+0x818>
 8005cb4:	9a08      	ldr	r2, [sp, #32]
 8005cb6:	331c      	adds	r3, #28
 8005cb8:	441a      	add	r2, r3
 8005cba:	4498      	add	r8, r3
 8005cbc:	441e      	add	r6, r3
 8005cbe:	9208      	str	r2, [sp, #32]
 8005cc0:	e792      	b.n	8005be8 <_dtoa_r+0x818>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	e7f6      	b.n	8005cb4 <_dtoa_r+0x8e4>
 8005cc6:	9b07      	ldr	r3, [sp, #28]
 8005cc8:	9704      	str	r7, [sp, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	dc20      	bgt.n	8005d10 <_dtoa_r+0x940>
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	dd1e      	ble.n	8005d14 <_dtoa_r+0x944>
 8005cd6:	9b00      	ldr	r3, [sp, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f47f aec0 	bne.w	8005a5e <_dtoa_r+0x68e>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	2205      	movs	r2, #5
 8005ce2:	4658      	mov	r0, fp
 8005ce4:	f000 fa9a 	bl	800621c <__multadd>
 8005ce8:	4601      	mov	r1, r0
 8005cea:	4604      	mov	r4, r0
 8005cec:	4648      	mov	r0, r9
 8005cee:	f000 fcad 	bl	800664c <__mcmp>
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	f77f aeb3 	ble.w	8005a5e <_dtoa_r+0x68e>
 8005cf8:	4656      	mov	r6, sl
 8005cfa:	2331      	movs	r3, #49	@ 0x31
 8005cfc:	f806 3b01 	strb.w	r3, [r6], #1
 8005d00:	9b04      	ldr	r3, [sp, #16]
 8005d02:	3301      	adds	r3, #1
 8005d04:	9304      	str	r3, [sp, #16]
 8005d06:	e6ae      	b.n	8005a66 <_dtoa_r+0x696>
 8005d08:	9c07      	ldr	r4, [sp, #28]
 8005d0a:	9704      	str	r7, [sp, #16]
 8005d0c:	4625      	mov	r5, r4
 8005d0e:	e7f3      	b.n	8005cf8 <_dtoa_r+0x928>
 8005d10:	9b07      	ldr	r3, [sp, #28]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f000 8104 	beq.w	8005f24 <_dtoa_r+0xb54>
 8005d1c:	2e00      	cmp	r6, #0
 8005d1e:	dd05      	ble.n	8005d2c <_dtoa_r+0x95c>
 8005d20:	4629      	mov	r1, r5
 8005d22:	4632      	mov	r2, r6
 8005d24:	4658      	mov	r0, fp
 8005d26:	f000 fc25 	bl	8006574 <__lshift>
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d05a      	beq.n	8005de8 <_dtoa_r+0xa18>
 8005d32:	6869      	ldr	r1, [r5, #4]
 8005d34:	4658      	mov	r0, fp
 8005d36:	f000 fa0f 	bl	8006158 <_Balloc>
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	b928      	cbnz	r0, 8005d4a <_dtoa_r+0x97a>
 8005d3e:	4b84      	ldr	r3, [pc, #528]	@ (8005f50 <_dtoa_r+0xb80>)
 8005d40:	4602      	mov	r2, r0
 8005d42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d46:	f7ff bb5a 	b.w	80053fe <_dtoa_r+0x2e>
 8005d4a:	692a      	ldr	r2, [r5, #16]
 8005d4c:	3202      	adds	r2, #2
 8005d4e:	0092      	lsls	r2, r2, #2
 8005d50:	f105 010c 	add.w	r1, r5, #12
 8005d54:	300c      	adds	r0, #12
 8005d56:	f001 f813 	bl	8006d80 <memcpy>
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4658      	mov	r0, fp
 8005d60:	f000 fc08 	bl	8006574 <__lshift>
 8005d64:	f10a 0301 	add.w	r3, sl, #1
 8005d68:	9307      	str	r3, [sp, #28]
 8005d6a:	9b00      	ldr	r3, [sp, #0]
 8005d6c:	4453      	add	r3, sl
 8005d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d70:	9b02      	ldr	r3, [sp, #8]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	462f      	mov	r7, r5
 8005d78:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	9b07      	ldr	r3, [sp, #28]
 8005d7e:	4621      	mov	r1, r4
 8005d80:	3b01      	subs	r3, #1
 8005d82:	4648      	mov	r0, r9
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	f7ff fa98 	bl	80052ba <quorem>
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	9002      	str	r0, [sp, #8]
 8005d8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005d92:	4648      	mov	r0, r9
 8005d94:	f000 fc5a 	bl	800664c <__mcmp>
 8005d98:	462a      	mov	r2, r5
 8005d9a:	9008      	str	r0, [sp, #32]
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	4658      	mov	r0, fp
 8005da0:	f000 fc70 	bl	8006684 <__mdiff>
 8005da4:	68c2      	ldr	r2, [r0, #12]
 8005da6:	4606      	mov	r6, r0
 8005da8:	bb02      	cbnz	r2, 8005dec <_dtoa_r+0xa1c>
 8005daa:	4601      	mov	r1, r0
 8005dac:	4648      	mov	r0, r9
 8005dae:	f000 fc4d 	bl	800664c <__mcmp>
 8005db2:	4602      	mov	r2, r0
 8005db4:	4631      	mov	r1, r6
 8005db6:	4658      	mov	r0, fp
 8005db8:	920e      	str	r2, [sp, #56]	@ 0x38
 8005dba:	f000 fa0d 	bl	80061d8 <_Bfree>
 8005dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005dc2:	9e07      	ldr	r6, [sp, #28]
 8005dc4:	ea43 0102 	orr.w	r1, r3, r2
 8005dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dca:	4319      	orrs	r1, r3
 8005dcc:	d110      	bne.n	8005df0 <_dtoa_r+0xa20>
 8005dce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005dd2:	d029      	beq.n	8005e28 <_dtoa_r+0xa58>
 8005dd4:	9b08      	ldr	r3, [sp, #32]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	dd02      	ble.n	8005de0 <_dtoa_r+0xa10>
 8005dda:	9b02      	ldr	r3, [sp, #8]
 8005ddc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005de0:	9b00      	ldr	r3, [sp, #0]
 8005de2:	f883 8000 	strb.w	r8, [r3]
 8005de6:	e63f      	b.n	8005a68 <_dtoa_r+0x698>
 8005de8:	4628      	mov	r0, r5
 8005dea:	e7bb      	b.n	8005d64 <_dtoa_r+0x994>
 8005dec:	2201      	movs	r2, #1
 8005dee:	e7e1      	b.n	8005db4 <_dtoa_r+0x9e4>
 8005df0:	9b08      	ldr	r3, [sp, #32]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	db04      	blt.n	8005e00 <_dtoa_r+0xa30>
 8005df6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	d120      	bne.n	8005e42 <_dtoa_r+0xa72>
 8005e00:	2a00      	cmp	r2, #0
 8005e02:	dded      	ble.n	8005de0 <_dtoa_r+0xa10>
 8005e04:	4649      	mov	r1, r9
 8005e06:	2201      	movs	r2, #1
 8005e08:	4658      	mov	r0, fp
 8005e0a:	f000 fbb3 	bl	8006574 <__lshift>
 8005e0e:	4621      	mov	r1, r4
 8005e10:	4681      	mov	r9, r0
 8005e12:	f000 fc1b 	bl	800664c <__mcmp>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	dc03      	bgt.n	8005e22 <_dtoa_r+0xa52>
 8005e1a:	d1e1      	bne.n	8005de0 <_dtoa_r+0xa10>
 8005e1c:	f018 0f01 	tst.w	r8, #1
 8005e20:	d0de      	beq.n	8005de0 <_dtoa_r+0xa10>
 8005e22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e26:	d1d8      	bne.n	8005dda <_dtoa_r+0xa0a>
 8005e28:	9a00      	ldr	r2, [sp, #0]
 8005e2a:	2339      	movs	r3, #57	@ 0x39
 8005e2c:	7013      	strb	r3, [r2, #0]
 8005e2e:	4633      	mov	r3, r6
 8005e30:	461e      	mov	r6, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e38:	2a39      	cmp	r2, #57	@ 0x39
 8005e3a:	d052      	beq.n	8005ee2 <_dtoa_r+0xb12>
 8005e3c:	3201      	adds	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	e612      	b.n	8005a68 <_dtoa_r+0x698>
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	dd07      	ble.n	8005e56 <_dtoa_r+0xa86>
 8005e46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005e4a:	d0ed      	beq.n	8005e28 <_dtoa_r+0xa58>
 8005e4c:	9a00      	ldr	r2, [sp, #0]
 8005e4e:	f108 0301 	add.w	r3, r8, #1
 8005e52:	7013      	strb	r3, [r2, #0]
 8005e54:	e608      	b.n	8005a68 <_dtoa_r+0x698>
 8005e56:	9b07      	ldr	r3, [sp, #28]
 8005e58:	9a07      	ldr	r2, [sp, #28]
 8005e5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d028      	beq.n	8005eb6 <_dtoa_r+0xae6>
 8005e64:	4649      	mov	r1, r9
 8005e66:	2300      	movs	r3, #0
 8005e68:	220a      	movs	r2, #10
 8005e6a:	4658      	mov	r0, fp
 8005e6c:	f000 f9d6 	bl	800621c <__multadd>
 8005e70:	42af      	cmp	r7, r5
 8005e72:	4681      	mov	r9, r0
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	f04f 020a 	mov.w	r2, #10
 8005e7c:	4639      	mov	r1, r7
 8005e7e:	4658      	mov	r0, fp
 8005e80:	d107      	bne.n	8005e92 <_dtoa_r+0xac2>
 8005e82:	f000 f9cb 	bl	800621c <__multadd>
 8005e86:	4607      	mov	r7, r0
 8005e88:	4605      	mov	r5, r0
 8005e8a:	9b07      	ldr	r3, [sp, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	9307      	str	r3, [sp, #28]
 8005e90:	e774      	b.n	8005d7c <_dtoa_r+0x9ac>
 8005e92:	f000 f9c3 	bl	800621c <__multadd>
 8005e96:	4629      	mov	r1, r5
 8005e98:	4607      	mov	r7, r0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	220a      	movs	r2, #10
 8005e9e:	4658      	mov	r0, fp
 8005ea0:	f000 f9bc 	bl	800621c <__multadd>
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	e7f0      	b.n	8005e8a <_dtoa_r+0xaba>
 8005ea8:	9b00      	ldr	r3, [sp, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bfcc      	ite	gt
 8005eae:	461e      	movgt	r6, r3
 8005eb0:	2601      	movle	r6, #1
 8005eb2:	4456      	add	r6, sl
 8005eb4:	2700      	movs	r7, #0
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	2201      	movs	r2, #1
 8005eba:	4658      	mov	r0, fp
 8005ebc:	f000 fb5a 	bl	8006574 <__lshift>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4681      	mov	r9, r0
 8005ec4:	f000 fbc2 	bl	800664c <__mcmp>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	dcb0      	bgt.n	8005e2e <_dtoa_r+0xa5e>
 8005ecc:	d102      	bne.n	8005ed4 <_dtoa_r+0xb04>
 8005ece:	f018 0f01 	tst.w	r8, #1
 8005ed2:	d1ac      	bne.n	8005e2e <_dtoa_r+0xa5e>
 8005ed4:	4633      	mov	r3, r6
 8005ed6:	461e      	mov	r6, r3
 8005ed8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005edc:	2a30      	cmp	r2, #48	@ 0x30
 8005ede:	d0fa      	beq.n	8005ed6 <_dtoa_r+0xb06>
 8005ee0:	e5c2      	b.n	8005a68 <_dtoa_r+0x698>
 8005ee2:	459a      	cmp	sl, r3
 8005ee4:	d1a4      	bne.n	8005e30 <_dtoa_r+0xa60>
 8005ee6:	9b04      	ldr	r3, [sp, #16]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	9304      	str	r3, [sp, #16]
 8005eec:	2331      	movs	r3, #49	@ 0x31
 8005eee:	f88a 3000 	strb.w	r3, [sl]
 8005ef2:	e5b9      	b.n	8005a68 <_dtoa_r+0x698>
 8005ef4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ef6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005f54 <_dtoa_r+0xb84>
 8005efa:	b11b      	cbz	r3, 8005f04 <_dtoa_r+0xb34>
 8005efc:	f10a 0308 	add.w	r3, sl, #8
 8005f00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f02:	6013      	str	r3, [r2, #0]
 8005f04:	4650      	mov	r0, sl
 8005f06:	b019      	add	sp, #100	@ 0x64
 8005f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	f77f ae37 	ble.w	8005b82 <_dtoa_r+0x7b2>
 8005f14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f18:	2001      	movs	r0, #1
 8005f1a:	e655      	b.n	8005bc8 <_dtoa_r+0x7f8>
 8005f1c:	9b00      	ldr	r3, [sp, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f77f aed6 	ble.w	8005cd0 <_dtoa_r+0x900>
 8005f24:	4656      	mov	r6, sl
 8005f26:	4621      	mov	r1, r4
 8005f28:	4648      	mov	r0, r9
 8005f2a:	f7ff f9c6 	bl	80052ba <quorem>
 8005f2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005f32:	f806 8b01 	strb.w	r8, [r6], #1
 8005f36:	9b00      	ldr	r3, [sp, #0]
 8005f38:	eba6 020a 	sub.w	r2, r6, sl
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	ddb3      	ble.n	8005ea8 <_dtoa_r+0xad8>
 8005f40:	4649      	mov	r1, r9
 8005f42:	2300      	movs	r3, #0
 8005f44:	220a      	movs	r2, #10
 8005f46:	4658      	mov	r0, fp
 8005f48:	f000 f968 	bl	800621c <__multadd>
 8005f4c:	4681      	mov	r9, r0
 8005f4e:	e7ea      	b.n	8005f26 <_dtoa_r+0xb56>
 8005f50:	080070fc 	.word	0x080070fc
 8005f54:	08007080 	.word	0x08007080

08005f58 <_free_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	d041      	beq.n	8005fe4 <_free_r+0x8c>
 8005f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f64:	1f0c      	subs	r4, r1, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	bfb8      	it	lt
 8005f6a:	18e4      	addlt	r4, r4, r3
 8005f6c:	f000 f8e8 	bl	8006140 <__malloc_lock>
 8005f70:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe8 <_free_r+0x90>)
 8005f72:	6813      	ldr	r3, [r2, #0]
 8005f74:	b933      	cbnz	r3, 8005f84 <_free_r+0x2c>
 8005f76:	6063      	str	r3, [r4, #4]
 8005f78:	6014      	str	r4, [r2, #0]
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f80:	f000 b8e4 	b.w	800614c <__malloc_unlock>
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	d908      	bls.n	8005f9a <_free_r+0x42>
 8005f88:	6820      	ldr	r0, [r4, #0]
 8005f8a:	1821      	adds	r1, r4, r0
 8005f8c:	428b      	cmp	r3, r1
 8005f8e:	bf01      	itttt	eq
 8005f90:	6819      	ldreq	r1, [r3, #0]
 8005f92:	685b      	ldreq	r3, [r3, #4]
 8005f94:	1809      	addeq	r1, r1, r0
 8005f96:	6021      	streq	r1, [r4, #0]
 8005f98:	e7ed      	b.n	8005f76 <_free_r+0x1e>
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	b10b      	cbz	r3, 8005fa4 <_free_r+0x4c>
 8005fa0:	42a3      	cmp	r3, r4
 8005fa2:	d9fa      	bls.n	8005f9a <_free_r+0x42>
 8005fa4:	6811      	ldr	r1, [r2, #0]
 8005fa6:	1850      	adds	r0, r2, r1
 8005fa8:	42a0      	cmp	r0, r4
 8005faa:	d10b      	bne.n	8005fc4 <_free_r+0x6c>
 8005fac:	6820      	ldr	r0, [r4, #0]
 8005fae:	4401      	add	r1, r0
 8005fb0:	1850      	adds	r0, r2, r1
 8005fb2:	4283      	cmp	r3, r0
 8005fb4:	6011      	str	r1, [r2, #0]
 8005fb6:	d1e0      	bne.n	8005f7a <_free_r+0x22>
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	6053      	str	r3, [r2, #4]
 8005fbe:	4408      	add	r0, r1
 8005fc0:	6010      	str	r0, [r2, #0]
 8005fc2:	e7da      	b.n	8005f7a <_free_r+0x22>
 8005fc4:	d902      	bls.n	8005fcc <_free_r+0x74>
 8005fc6:	230c      	movs	r3, #12
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	e7d6      	b.n	8005f7a <_free_r+0x22>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	1821      	adds	r1, r4, r0
 8005fd0:	428b      	cmp	r3, r1
 8005fd2:	bf04      	itt	eq
 8005fd4:	6819      	ldreq	r1, [r3, #0]
 8005fd6:	685b      	ldreq	r3, [r3, #4]
 8005fd8:	6063      	str	r3, [r4, #4]
 8005fda:	bf04      	itt	eq
 8005fdc:	1809      	addeq	r1, r1, r0
 8005fde:	6021      	streq	r1, [r4, #0]
 8005fe0:	6054      	str	r4, [r2, #4]
 8005fe2:	e7ca      	b.n	8005f7a <_free_r+0x22>
 8005fe4:	bd38      	pop	{r3, r4, r5, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000af4 	.word	0x20000af4

08005fec <malloc>:
 8005fec:	4b02      	ldr	r3, [pc, #8]	@ (8005ff8 <malloc+0xc>)
 8005fee:	4601      	mov	r1, r0
 8005ff0:	6818      	ldr	r0, [r3, #0]
 8005ff2:	f000 b825 	b.w	8006040 <_malloc_r>
 8005ff6:	bf00      	nop
 8005ff8:	20000018 	.word	0x20000018

08005ffc <sbrk_aligned>:
 8005ffc:	b570      	push	{r4, r5, r6, lr}
 8005ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800603c <sbrk_aligned+0x40>)
 8006000:	460c      	mov	r4, r1
 8006002:	6831      	ldr	r1, [r6, #0]
 8006004:	4605      	mov	r5, r0
 8006006:	b911      	cbnz	r1, 800600e <sbrk_aligned+0x12>
 8006008:	f000 feaa 	bl	8006d60 <_sbrk_r>
 800600c:	6030      	str	r0, [r6, #0]
 800600e:	4621      	mov	r1, r4
 8006010:	4628      	mov	r0, r5
 8006012:	f000 fea5 	bl	8006d60 <_sbrk_r>
 8006016:	1c43      	adds	r3, r0, #1
 8006018:	d103      	bne.n	8006022 <sbrk_aligned+0x26>
 800601a:	f04f 34ff 	mov.w	r4, #4294967295
 800601e:	4620      	mov	r0, r4
 8006020:	bd70      	pop	{r4, r5, r6, pc}
 8006022:	1cc4      	adds	r4, r0, #3
 8006024:	f024 0403 	bic.w	r4, r4, #3
 8006028:	42a0      	cmp	r0, r4
 800602a:	d0f8      	beq.n	800601e <sbrk_aligned+0x22>
 800602c:	1a21      	subs	r1, r4, r0
 800602e:	4628      	mov	r0, r5
 8006030:	f000 fe96 	bl	8006d60 <_sbrk_r>
 8006034:	3001      	adds	r0, #1
 8006036:	d1f2      	bne.n	800601e <sbrk_aligned+0x22>
 8006038:	e7ef      	b.n	800601a <sbrk_aligned+0x1e>
 800603a:	bf00      	nop
 800603c:	20000af0 	.word	0x20000af0

08006040 <_malloc_r>:
 8006040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006044:	1ccd      	adds	r5, r1, #3
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	2d00      	cmp	r5, #0
 8006054:	4606      	mov	r6, r0
 8006056:	db01      	blt.n	800605c <_malloc_r+0x1c>
 8006058:	42a9      	cmp	r1, r5
 800605a:	d904      	bls.n	8006066 <_malloc_r+0x26>
 800605c:	230c      	movs	r3, #12
 800605e:	6033      	str	r3, [r6, #0]
 8006060:	2000      	movs	r0, #0
 8006062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800613c <_malloc_r+0xfc>
 800606a:	f000 f869 	bl	8006140 <__malloc_lock>
 800606e:	f8d8 3000 	ldr.w	r3, [r8]
 8006072:	461c      	mov	r4, r3
 8006074:	bb44      	cbnz	r4, 80060c8 <_malloc_r+0x88>
 8006076:	4629      	mov	r1, r5
 8006078:	4630      	mov	r0, r6
 800607a:	f7ff ffbf 	bl	8005ffc <sbrk_aligned>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	4604      	mov	r4, r0
 8006082:	d158      	bne.n	8006136 <_malloc_r+0xf6>
 8006084:	f8d8 4000 	ldr.w	r4, [r8]
 8006088:	4627      	mov	r7, r4
 800608a:	2f00      	cmp	r7, #0
 800608c:	d143      	bne.n	8006116 <_malloc_r+0xd6>
 800608e:	2c00      	cmp	r4, #0
 8006090:	d04b      	beq.n	800612a <_malloc_r+0xea>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	4639      	mov	r1, r7
 8006096:	4630      	mov	r0, r6
 8006098:	eb04 0903 	add.w	r9, r4, r3
 800609c:	f000 fe60 	bl	8006d60 <_sbrk_r>
 80060a0:	4581      	cmp	r9, r0
 80060a2:	d142      	bne.n	800612a <_malloc_r+0xea>
 80060a4:	6821      	ldr	r1, [r4, #0]
 80060a6:	1a6d      	subs	r5, r5, r1
 80060a8:	4629      	mov	r1, r5
 80060aa:	4630      	mov	r0, r6
 80060ac:	f7ff ffa6 	bl	8005ffc <sbrk_aligned>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d03a      	beq.n	800612a <_malloc_r+0xea>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	442b      	add	r3, r5
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	f8d8 3000 	ldr.w	r3, [r8]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	bb62      	cbnz	r2, 800611c <_malloc_r+0xdc>
 80060c2:	f8c8 7000 	str.w	r7, [r8]
 80060c6:	e00f      	b.n	80060e8 <_malloc_r+0xa8>
 80060c8:	6822      	ldr	r2, [r4, #0]
 80060ca:	1b52      	subs	r2, r2, r5
 80060cc:	d420      	bmi.n	8006110 <_malloc_r+0xd0>
 80060ce:	2a0b      	cmp	r2, #11
 80060d0:	d917      	bls.n	8006102 <_malloc_r+0xc2>
 80060d2:	1961      	adds	r1, r4, r5
 80060d4:	42a3      	cmp	r3, r4
 80060d6:	6025      	str	r5, [r4, #0]
 80060d8:	bf18      	it	ne
 80060da:	6059      	strne	r1, [r3, #4]
 80060dc:	6863      	ldr	r3, [r4, #4]
 80060de:	bf08      	it	eq
 80060e0:	f8c8 1000 	streq.w	r1, [r8]
 80060e4:	5162      	str	r2, [r4, r5]
 80060e6:	604b      	str	r3, [r1, #4]
 80060e8:	4630      	mov	r0, r6
 80060ea:	f000 f82f 	bl	800614c <__malloc_unlock>
 80060ee:	f104 000b 	add.w	r0, r4, #11
 80060f2:	1d23      	adds	r3, r4, #4
 80060f4:	f020 0007 	bic.w	r0, r0, #7
 80060f8:	1ac2      	subs	r2, r0, r3
 80060fa:	bf1c      	itt	ne
 80060fc:	1a1b      	subne	r3, r3, r0
 80060fe:	50a3      	strne	r3, [r4, r2]
 8006100:	e7af      	b.n	8006062 <_malloc_r+0x22>
 8006102:	6862      	ldr	r2, [r4, #4]
 8006104:	42a3      	cmp	r3, r4
 8006106:	bf0c      	ite	eq
 8006108:	f8c8 2000 	streq.w	r2, [r8]
 800610c:	605a      	strne	r2, [r3, #4]
 800610e:	e7eb      	b.n	80060e8 <_malloc_r+0xa8>
 8006110:	4623      	mov	r3, r4
 8006112:	6864      	ldr	r4, [r4, #4]
 8006114:	e7ae      	b.n	8006074 <_malloc_r+0x34>
 8006116:	463c      	mov	r4, r7
 8006118:	687f      	ldr	r7, [r7, #4]
 800611a:	e7b6      	b.n	800608a <_malloc_r+0x4a>
 800611c:	461a      	mov	r2, r3
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	42a3      	cmp	r3, r4
 8006122:	d1fb      	bne.n	800611c <_malloc_r+0xdc>
 8006124:	2300      	movs	r3, #0
 8006126:	6053      	str	r3, [r2, #4]
 8006128:	e7de      	b.n	80060e8 <_malloc_r+0xa8>
 800612a:	230c      	movs	r3, #12
 800612c:	6033      	str	r3, [r6, #0]
 800612e:	4630      	mov	r0, r6
 8006130:	f000 f80c 	bl	800614c <__malloc_unlock>
 8006134:	e794      	b.n	8006060 <_malloc_r+0x20>
 8006136:	6005      	str	r5, [r0, #0]
 8006138:	e7d6      	b.n	80060e8 <_malloc_r+0xa8>
 800613a:	bf00      	nop
 800613c:	20000af4 	.word	0x20000af4

08006140 <__malloc_lock>:
 8006140:	4801      	ldr	r0, [pc, #4]	@ (8006148 <__malloc_lock+0x8>)
 8006142:	f7ff b8b8 	b.w	80052b6 <__retarget_lock_acquire_recursive>
 8006146:	bf00      	nop
 8006148:	20000aec 	.word	0x20000aec

0800614c <__malloc_unlock>:
 800614c:	4801      	ldr	r0, [pc, #4]	@ (8006154 <__malloc_unlock+0x8>)
 800614e:	f7ff b8b3 	b.w	80052b8 <__retarget_lock_release_recursive>
 8006152:	bf00      	nop
 8006154:	20000aec 	.word	0x20000aec

08006158 <_Balloc>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	69c6      	ldr	r6, [r0, #28]
 800615c:	4604      	mov	r4, r0
 800615e:	460d      	mov	r5, r1
 8006160:	b976      	cbnz	r6, 8006180 <_Balloc+0x28>
 8006162:	2010      	movs	r0, #16
 8006164:	f7ff ff42 	bl	8005fec <malloc>
 8006168:	4602      	mov	r2, r0
 800616a:	61e0      	str	r0, [r4, #28]
 800616c:	b920      	cbnz	r0, 8006178 <_Balloc+0x20>
 800616e:	4b18      	ldr	r3, [pc, #96]	@ (80061d0 <_Balloc+0x78>)
 8006170:	4818      	ldr	r0, [pc, #96]	@ (80061d4 <_Balloc+0x7c>)
 8006172:	216b      	movs	r1, #107	@ 0x6b
 8006174:	f000 fe12 	bl	8006d9c <__assert_func>
 8006178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800617c:	6006      	str	r6, [r0, #0]
 800617e:	60c6      	str	r6, [r0, #12]
 8006180:	69e6      	ldr	r6, [r4, #28]
 8006182:	68f3      	ldr	r3, [r6, #12]
 8006184:	b183      	cbz	r3, 80061a8 <_Balloc+0x50>
 8006186:	69e3      	ldr	r3, [r4, #28]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800618e:	b9b8      	cbnz	r0, 80061c0 <_Balloc+0x68>
 8006190:	2101      	movs	r1, #1
 8006192:	fa01 f605 	lsl.w	r6, r1, r5
 8006196:	1d72      	adds	r2, r6, #5
 8006198:	0092      	lsls	r2, r2, #2
 800619a:	4620      	mov	r0, r4
 800619c:	f000 fe1c 	bl	8006dd8 <_calloc_r>
 80061a0:	b160      	cbz	r0, 80061bc <_Balloc+0x64>
 80061a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061a6:	e00e      	b.n	80061c6 <_Balloc+0x6e>
 80061a8:	2221      	movs	r2, #33	@ 0x21
 80061aa:	2104      	movs	r1, #4
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fe13 	bl	8006dd8 <_calloc_r>
 80061b2:	69e3      	ldr	r3, [r4, #28]
 80061b4:	60f0      	str	r0, [r6, #12]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1e4      	bne.n	8006186 <_Balloc+0x2e>
 80061bc:	2000      	movs	r0, #0
 80061be:	bd70      	pop	{r4, r5, r6, pc}
 80061c0:	6802      	ldr	r2, [r0, #0]
 80061c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061c6:	2300      	movs	r3, #0
 80061c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061cc:	e7f7      	b.n	80061be <_Balloc+0x66>
 80061ce:	bf00      	nop
 80061d0:	0800708d 	.word	0x0800708d
 80061d4:	0800710d 	.word	0x0800710d

080061d8 <_Bfree>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	69c6      	ldr	r6, [r0, #28]
 80061dc:	4605      	mov	r5, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	b976      	cbnz	r6, 8006200 <_Bfree+0x28>
 80061e2:	2010      	movs	r0, #16
 80061e4:	f7ff ff02 	bl	8005fec <malloc>
 80061e8:	4602      	mov	r2, r0
 80061ea:	61e8      	str	r0, [r5, #28]
 80061ec:	b920      	cbnz	r0, 80061f8 <_Bfree+0x20>
 80061ee:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <_Bfree+0x3c>)
 80061f0:	4809      	ldr	r0, [pc, #36]	@ (8006218 <_Bfree+0x40>)
 80061f2:	218f      	movs	r1, #143	@ 0x8f
 80061f4:	f000 fdd2 	bl	8006d9c <__assert_func>
 80061f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061fc:	6006      	str	r6, [r0, #0]
 80061fe:	60c6      	str	r6, [r0, #12]
 8006200:	b13c      	cbz	r4, 8006212 <_Bfree+0x3a>
 8006202:	69eb      	ldr	r3, [r5, #28]
 8006204:	6862      	ldr	r2, [r4, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800620c:	6021      	str	r1, [r4, #0]
 800620e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	0800708d 	.word	0x0800708d
 8006218:	0800710d 	.word	0x0800710d

0800621c <__multadd>:
 800621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006220:	690d      	ldr	r5, [r1, #16]
 8006222:	4607      	mov	r7, r0
 8006224:	460c      	mov	r4, r1
 8006226:	461e      	mov	r6, r3
 8006228:	f101 0c14 	add.w	ip, r1, #20
 800622c:	2000      	movs	r0, #0
 800622e:	f8dc 3000 	ldr.w	r3, [ip]
 8006232:	b299      	uxth	r1, r3
 8006234:	fb02 6101 	mla	r1, r2, r1, r6
 8006238:	0c1e      	lsrs	r6, r3, #16
 800623a:	0c0b      	lsrs	r3, r1, #16
 800623c:	fb02 3306 	mla	r3, r2, r6, r3
 8006240:	b289      	uxth	r1, r1
 8006242:	3001      	adds	r0, #1
 8006244:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006248:	4285      	cmp	r5, r0
 800624a:	f84c 1b04 	str.w	r1, [ip], #4
 800624e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006252:	dcec      	bgt.n	800622e <__multadd+0x12>
 8006254:	b30e      	cbz	r6, 800629a <__multadd+0x7e>
 8006256:	68a3      	ldr	r3, [r4, #8]
 8006258:	42ab      	cmp	r3, r5
 800625a:	dc19      	bgt.n	8006290 <__multadd+0x74>
 800625c:	6861      	ldr	r1, [r4, #4]
 800625e:	4638      	mov	r0, r7
 8006260:	3101      	adds	r1, #1
 8006262:	f7ff ff79 	bl	8006158 <_Balloc>
 8006266:	4680      	mov	r8, r0
 8006268:	b928      	cbnz	r0, 8006276 <__multadd+0x5a>
 800626a:	4602      	mov	r2, r0
 800626c:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <__multadd+0x84>)
 800626e:	480d      	ldr	r0, [pc, #52]	@ (80062a4 <__multadd+0x88>)
 8006270:	21ba      	movs	r1, #186	@ 0xba
 8006272:	f000 fd93 	bl	8006d9c <__assert_func>
 8006276:	6922      	ldr	r2, [r4, #16]
 8006278:	3202      	adds	r2, #2
 800627a:	f104 010c 	add.w	r1, r4, #12
 800627e:	0092      	lsls	r2, r2, #2
 8006280:	300c      	adds	r0, #12
 8006282:	f000 fd7d 	bl	8006d80 <memcpy>
 8006286:	4621      	mov	r1, r4
 8006288:	4638      	mov	r0, r7
 800628a:	f7ff ffa5 	bl	80061d8 <_Bfree>
 800628e:	4644      	mov	r4, r8
 8006290:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006294:	3501      	adds	r5, #1
 8006296:	615e      	str	r6, [r3, #20]
 8006298:	6125      	str	r5, [r4, #16]
 800629a:	4620      	mov	r0, r4
 800629c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a0:	080070fc 	.word	0x080070fc
 80062a4:	0800710d 	.word	0x0800710d

080062a8 <__hi0bits>:
 80062a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80062ac:	4603      	mov	r3, r0
 80062ae:	bf36      	itet	cc
 80062b0:	0403      	lslcc	r3, r0, #16
 80062b2:	2000      	movcs	r0, #0
 80062b4:	2010      	movcc	r0, #16
 80062b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062ba:	bf3c      	itt	cc
 80062bc:	021b      	lslcc	r3, r3, #8
 80062be:	3008      	addcc	r0, #8
 80062c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062c4:	bf3c      	itt	cc
 80062c6:	011b      	lslcc	r3, r3, #4
 80062c8:	3004      	addcc	r0, #4
 80062ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ce:	bf3c      	itt	cc
 80062d0:	009b      	lslcc	r3, r3, #2
 80062d2:	3002      	addcc	r0, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	db05      	blt.n	80062e4 <__hi0bits+0x3c>
 80062d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062dc:	f100 0001 	add.w	r0, r0, #1
 80062e0:	bf08      	it	eq
 80062e2:	2020      	moveq	r0, #32
 80062e4:	4770      	bx	lr

080062e6 <__lo0bits>:
 80062e6:	6803      	ldr	r3, [r0, #0]
 80062e8:	4602      	mov	r2, r0
 80062ea:	f013 0007 	ands.w	r0, r3, #7
 80062ee:	d00b      	beq.n	8006308 <__lo0bits+0x22>
 80062f0:	07d9      	lsls	r1, r3, #31
 80062f2:	d421      	bmi.n	8006338 <__lo0bits+0x52>
 80062f4:	0798      	lsls	r0, r3, #30
 80062f6:	bf49      	itett	mi
 80062f8:	085b      	lsrmi	r3, r3, #1
 80062fa:	089b      	lsrpl	r3, r3, #2
 80062fc:	2001      	movmi	r0, #1
 80062fe:	6013      	strmi	r3, [r2, #0]
 8006300:	bf5c      	itt	pl
 8006302:	6013      	strpl	r3, [r2, #0]
 8006304:	2002      	movpl	r0, #2
 8006306:	4770      	bx	lr
 8006308:	b299      	uxth	r1, r3
 800630a:	b909      	cbnz	r1, 8006310 <__lo0bits+0x2a>
 800630c:	0c1b      	lsrs	r3, r3, #16
 800630e:	2010      	movs	r0, #16
 8006310:	b2d9      	uxtb	r1, r3
 8006312:	b909      	cbnz	r1, 8006318 <__lo0bits+0x32>
 8006314:	3008      	adds	r0, #8
 8006316:	0a1b      	lsrs	r3, r3, #8
 8006318:	0719      	lsls	r1, r3, #28
 800631a:	bf04      	itt	eq
 800631c:	091b      	lsreq	r3, r3, #4
 800631e:	3004      	addeq	r0, #4
 8006320:	0799      	lsls	r1, r3, #30
 8006322:	bf04      	itt	eq
 8006324:	089b      	lsreq	r3, r3, #2
 8006326:	3002      	addeq	r0, #2
 8006328:	07d9      	lsls	r1, r3, #31
 800632a:	d403      	bmi.n	8006334 <__lo0bits+0x4e>
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	f100 0001 	add.w	r0, r0, #1
 8006332:	d003      	beq.n	800633c <__lo0bits+0x56>
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	4770      	bx	lr
 8006338:	2000      	movs	r0, #0
 800633a:	4770      	bx	lr
 800633c:	2020      	movs	r0, #32
 800633e:	4770      	bx	lr

08006340 <__i2b>:
 8006340:	b510      	push	{r4, lr}
 8006342:	460c      	mov	r4, r1
 8006344:	2101      	movs	r1, #1
 8006346:	f7ff ff07 	bl	8006158 <_Balloc>
 800634a:	4602      	mov	r2, r0
 800634c:	b928      	cbnz	r0, 800635a <__i2b+0x1a>
 800634e:	4b05      	ldr	r3, [pc, #20]	@ (8006364 <__i2b+0x24>)
 8006350:	4805      	ldr	r0, [pc, #20]	@ (8006368 <__i2b+0x28>)
 8006352:	f240 1145 	movw	r1, #325	@ 0x145
 8006356:	f000 fd21 	bl	8006d9c <__assert_func>
 800635a:	2301      	movs	r3, #1
 800635c:	6144      	str	r4, [r0, #20]
 800635e:	6103      	str	r3, [r0, #16]
 8006360:	bd10      	pop	{r4, pc}
 8006362:	bf00      	nop
 8006364:	080070fc 	.word	0x080070fc
 8006368:	0800710d 	.word	0x0800710d

0800636c <__multiply>:
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006370:	4614      	mov	r4, r2
 8006372:	690a      	ldr	r2, [r1, #16]
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	429a      	cmp	r2, r3
 8006378:	bfa8      	it	ge
 800637a:	4623      	movge	r3, r4
 800637c:	460f      	mov	r7, r1
 800637e:	bfa4      	itt	ge
 8006380:	460c      	movge	r4, r1
 8006382:	461f      	movge	r7, r3
 8006384:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006388:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800638c:	68a3      	ldr	r3, [r4, #8]
 800638e:	6861      	ldr	r1, [r4, #4]
 8006390:	eb0a 0609 	add.w	r6, sl, r9
 8006394:	42b3      	cmp	r3, r6
 8006396:	b085      	sub	sp, #20
 8006398:	bfb8      	it	lt
 800639a:	3101      	addlt	r1, #1
 800639c:	f7ff fedc 	bl	8006158 <_Balloc>
 80063a0:	b930      	cbnz	r0, 80063b0 <__multiply+0x44>
 80063a2:	4602      	mov	r2, r0
 80063a4:	4b44      	ldr	r3, [pc, #272]	@ (80064b8 <__multiply+0x14c>)
 80063a6:	4845      	ldr	r0, [pc, #276]	@ (80064bc <__multiply+0x150>)
 80063a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80063ac:	f000 fcf6 	bl	8006d9c <__assert_func>
 80063b0:	f100 0514 	add.w	r5, r0, #20
 80063b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063b8:	462b      	mov	r3, r5
 80063ba:	2200      	movs	r2, #0
 80063bc:	4543      	cmp	r3, r8
 80063be:	d321      	bcc.n	8006404 <__multiply+0x98>
 80063c0:	f107 0114 	add.w	r1, r7, #20
 80063c4:	f104 0214 	add.w	r2, r4, #20
 80063c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80063cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80063d0:	9302      	str	r3, [sp, #8]
 80063d2:	1b13      	subs	r3, r2, r4
 80063d4:	3b15      	subs	r3, #21
 80063d6:	f023 0303 	bic.w	r3, r3, #3
 80063da:	3304      	adds	r3, #4
 80063dc:	f104 0715 	add.w	r7, r4, #21
 80063e0:	42ba      	cmp	r2, r7
 80063e2:	bf38      	it	cc
 80063e4:	2304      	movcc	r3, #4
 80063e6:	9301      	str	r3, [sp, #4]
 80063e8:	9b02      	ldr	r3, [sp, #8]
 80063ea:	9103      	str	r1, [sp, #12]
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d80c      	bhi.n	800640a <__multiply+0x9e>
 80063f0:	2e00      	cmp	r6, #0
 80063f2:	dd03      	ble.n	80063fc <__multiply+0x90>
 80063f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d05b      	beq.n	80064b4 <__multiply+0x148>
 80063fc:	6106      	str	r6, [r0, #16]
 80063fe:	b005      	add	sp, #20
 8006400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006404:	f843 2b04 	str.w	r2, [r3], #4
 8006408:	e7d8      	b.n	80063bc <__multiply+0x50>
 800640a:	f8b1 a000 	ldrh.w	sl, [r1]
 800640e:	f1ba 0f00 	cmp.w	sl, #0
 8006412:	d024      	beq.n	800645e <__multiply+0xf2>
 8006414:	f104 0e14 	add.w	lr, r4, #20
 8006418:	46a9      	mov	r9, r5
 800641a:	f04f 0c00 	mov.w	ip, #0
 800641e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006422:	f8d9 3000 	ldr.w	r3, [r9]
 8006426:	fa1f fb87 	uxth.w	fp, r7
 800642a:	b29b      	uxth	r3, r3
 800642c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006430:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006434:	f8d9 7000 	ldr.w	r7, [r9]
 8006438:	4463      	add	r3, ip
 800643a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800643e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006442:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006446:	b29b      	uxth	r3, r3
 8006448:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800644c:	4572      	cmp	r2, lr
 800644e:	f849 3b04 	str.w	r3, [r9], #4
 8006452:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006456:	d8e2      	bhi.n	800641e <__multiply+0xb2>
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	f845 c003 	str.w	ip, [r5, r3]
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006464:	3104      	adds	r1, #4
 8006466:	f1b9 0f00 	cmp.w	r9, #0
 800646a:	d021      	beq.n	80064b0 <__multiply+0x144>
 800646c:	682b      	ldr	r3, [r5, #0]
 800646e:	f104 0c14 	add.w	ip, r4, #20
 8006472:	46ae      	mov	lr, r5
 8006474:	f04f 0a00 	mov.w	sl, #0
 8006478:	f8bc b000 	ldrh.w	fp, [ip]
 800647c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006480:	fb09 770b 	mla	r7, r9, fp, r7
 8006484:	4457      	add	r7, sl
 8006486:	b29b      	uxth	r3, r3
 8006488:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800648c:	f84e 3b04 	str.w	r3, [lr], #4
 8006490:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006494:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006498:	f8be 3000 	ldrh.w	r3, [lr]
 800649c:	fb09 330a 	mla	r3, r9, sl, r3
 80064a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80064a4:	4562      	cmp	r2, ip
 80064a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064aa:	d8e5      	bhi.n	8006478 <__multiply+0x10c>
 80064ac:	9f01      	ldr	r7, [sp, #4]
 80064ae:	51eb      	str	r3, [r5, r7]
 80064b0:	3504      	adds	r5, #4
 80064b2:	e799      	b.n	80063e8 <__multiply+0x7c>
 80064b4:	3e01      	subs	r6, #1
 80064b6:	e79b      	b.n	80063f0 <__multiply+0x84>
 80064b8:	080070fc 	.word	0x080070fc
 80064bc:	0800710d 	.word	0x0800710d

080064c0 <__pow5mult>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	4615      	mov	r5, r2
 80064c6:	f012 0203 	ands.w	r2, r2, #3
 80064ca:	4607      	mov	r7, r0
 80064cc:	460e      	mov	r6, r1
 80064ce:	d007      	beq.n	80064e0 <__pow5mult+0x20>
 80064d0:	4c25      	ldr	r4, [pc, #148]	@ (8006568 <__pow5mult+0xa8>)
 80064d2:	3a01      	subs	r2, #1
 80064d4:	2300      	movs	r3, #0
 80064d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064da:	f7ff fe9f 	bl	800621c <__multadd>
 80064de:	4606      	mov	r6, r0
 80064e0:	10ad      	asrs	r5, r5, #2
 80064e2:	d03d      	beq.n	8006560 <__pow5mult+0xa0>
 80064e4:	69fc      	ldr	r4, [r7, #28]
 80064e6:	b97c      	cbnz	r4, 8006508 <__pow5mult+0x48>
 80064e8:	2010      	movs	r0, #16
 80064ea:	f7ff fd7f 	bl	8005fec <malloc>
 80064ee:	4602      	mov	r2, r0
 80064f0:	61f8      	str	r0, [r7, #28]
 80064f2:	b928      	cbnz	r0, 8006500 <__pow5mult+0x40>
 80064f4:	4b1d      	ldr	r3, [pc, #116]	@ (800656c <__pow5mult+0xac>)
 80064f6:	481e      	ldr	r0, [pc, #120]	@ (8006570 <__pow5mult+0xb0>)
 80064f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80064fc:	f000 fc4e 	bl	8006d9c <__assert_func>
 8006500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006504:	6004      	str	r4, [r0, #0]
 8006506:	60c4      	str	r4, [r0, #12]
 8006508:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800650c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006510:	b94c      	cbnz	r4, 8006526 <__pow5mult+0x66>
 8006512:	f240 2171 	movw	r1, #625	@ 0x271
 8006516:	4638      	mov	r0, r7
 8006518:	f7ff ff12 	bl	8006340 <__i2b>
 800651c:	2300      	movs	r3, #0
 800651e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006522:	4604      	mov	r4, r0
 8006524:	6003      	str	r3, [r0, #0]
 8006526:	f04f 0900 	mov.w	r9, #0
 800652a:	07eb      	lsls	r3, r5, #31
 800652c:	d50a      	bpl.n	8006544 <__pow5mult+0x84>
 800652e:	4631      	mov	r1, r6
 8006530:	4622      	mov	r2, r4
 8006532:	4638      	mov	r0, r7
 8006534:	f7ff ff1a 	bl	800636c <__multiply>
 8006538:	4631      	mov	r1, r6
 800653a:	4680      	mov	r8, r0
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff fe4b 	bl	80061d8 <_Bfree>
 8006542:	4646      	mov	r6, r8
 8006544:	106d      	asrs	r5, r5, #1
 8006546:	d00b      	beq.n	8006560 <__pow5mult+0xa0>
 8006548:	6820      	ldr	r0, [r4, #0]
 800654a:	b938      	cbnz	r0, 800655c <__pow5mult+0x9c>
 800654c:	4622      	mov	r2, r4
 800654e:	4621      	mov	r1, r4
 8006550:	4638      	mov	r0, r7
 8006552:	f7ff ff0b 	bl	800636c <__multiply>
 8006556:	6020      	str	r0, [r4, #0]
 8006558:	f8c0 9000 	str.w	r9, [r0]
 800655c:	4604      	mov	r4, r0
 800655e:	e7e4      	b.n	800652a <__pow5mult+0x6a>
 8006560:	4630      	mov	r0, r6
 8006562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006566:	bf00      	nop
 8006568:	08007168 	.word	0x08007168
 800656c:	0800708d 	.word	0x0800708d
 8006570:	0800710d 	.word	0x0800710d

08006574 <__lshift>:
 8006574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006578:	460c      	mov	r4, r1
 800657a:	6849      	ldr	r1, [r1, #4]
 800657c:	6923      	ldr	r3, [r4, #16]
 800657e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	4607      	mov	r7, r0
 8006586:	4691      	mov	r9, r2
 8006588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800658c:	f108 0601 	add.w	r6, r8, #1
 8006590:	42b3      	cmp	r3, r6
 8006592:	db0b      	blt.n	80065ac <__lshift+0x38>
 8006594:	4638      	mov	r0, r7
 8006596:	f7ff fddf 	bl	8006158 <_Balloc>
 800659a:	4605      	mov	r5, r0
 800659c:	b948      	cbnz	r0, 80065b2 <__lshift+0x3e>
 800659e:	4602      	mov	r2, r0
 80065a0:	4b28      	ldr	r3, [pc, #160]	@ (8006644 <__lshift+0xd0>)
 80065a2:	4829      	ldr	r0, [pc, #164]	@ (8006648 <__lshift+0xd4>)
 80065a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80065a8:	f000 fbf8 	bl	8006d9c <__assert_func>
 80065ac:	3101      	adds	r1, #1
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	e7ee      	b.n	8006590 <__lshift+0x1c>
 80065b2:	2300      	movs	r3, #0
 80065b4:	f100 0114 	add.w	r1, r0, #20
 80065b8:	f100 0210 	add.w	r2, r0, #16
 80065bc:	4618      	mov	r0, r3
 80065be:	4553      	cmp	r3, sl
 80065c0:	db33      	blt.n	800662a <__lshift+0xb6>
 80065c2:	6920      	ldr	r0, [r4, #16]
 80065c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065c8:	f104 0314 	add.w	r3, r4, #20
 80065cc:	f019 091f 	ands.w	r9, r9, #31
 80065d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065d8:	d02b      	beq.n	8006632 <__lshift+0xbe>
 80065da:	f1c9 0e20 	rsb	lr, r9, #32
 80065de:	468a      	mov	sl, r1
 80065e0:	2200      	movs	r2, #0
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	fa00 f009 	lsl.w	r0, r0, r9
 80065e8:	4310      	orrs	r0, r2
 80065ea:	f84a 0b04 	str.w	r0, [sl], #4
 80065ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80065f2:	459c      	cmp	ip, r3
 80065f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80065f8:	d8f3      	bhi.n	80065e2 <__lshift+0x6e>
 80065fa:	ebac 0304 	sub.w	r3, ip, r4
 80065fe:	3b15      	subs	r3, #21
 8006600:	f023 0303 	bic.w	r3, r3, #3
 8006604:	3304      	adds	r3, #4
 8006606:	f104 0015 	add.w	r0, r4, #21
 800660a:	4584      	cmp	ip, r0
 800660c:	bf38      	it	cc
 800660e:	2304      	movcc	r3, #4
 8006610:	50ca      	str	r2, [r1, r3]
 8006612:	b10a      	cbz	r2, 8006618 <__lshift+0xa4>
 8006614:	f108 0602 	add.w	r6, r8, #2
 8006618:	3e01      	subs	r6, #1
 800661a:	4638      	mov	r0, r7
 800661c:	612e      	str	r6, [r5, #16]
 800661e:	4621      	mov	r1, r4
 8006620:	f7ff fdda 	bl	80061d8 <_Bfree>
 8006624:	4628      	mov	r0, r5
 8006626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662a:	f842 0f04 	str.w	r0, [r2, #4]!
 800662e:	3301      	adds	r3, #1
 8006630:	e7c5      	b.n	80065be <__lshift+0x4a>
 8006632:	3904      	subs	r1, #4
 8006634:	f853 2b04 	ldr.w	r2, [r3], #4
 8006638:	f841 2f04 	str.w	r2, [r1, #4]!
 800663c:	459c      	cmp	ip, r3
 800663e:	d8f9      	bhi.n	8006634 <__lshift+0xc0>
 8006640:	e7ea      	b.n	8006618 <__lshift+0xa4>
 8006642:	bf00      	nop
 8006644:	080070fc 	.word	0x080070fc
 8006648:	0800710d 	.word	0x0800710d

0800664c <__mcmp>:
 800664c:	690a      	ldr	r2, [r1, #16]
 800664e:	4603      	mov	r3, r0
 8006650:	6900      	ldr	r0, [r0, #16]
 8006652:	1a80      	subs	r0, r0, r2
 8006654:	b530      	push	{r4, r5, lr}
 8006656:	d10e      	bne.n	8006676 <__mcmp+0x2a>
 8006658:	3314      	adds	r3, #20
 800665a:	3114      	adds	r1, #20
 800665c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006660:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006664:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006668:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800666c:	4295      	cmp	r5, r2
 800666e:	d003      	beq.n	8006678 <__mcmp+0x2c>
 8006670:	d205      	bcs.n	800667e <__mcmp+0x32>
 8006672:	f04f 30ff 	mov.w	r0, #4294967295
 8006676:	bd30      	pop	{r4, r5, pc}
 8006678:	42a3      	cmp	r3, r4
 800667a:	d3f3      	bcc.n	8006664 <__mcmp+0x18>
 800667c:	e7fb      	b.n	8006676 <__mcmp+0x2a>
 800667e:	2001      	movs	r0, #1
 8006680:	e7f9      	b.n	8006676 <__mcmp+0x2a>
	...

08006684 <__mdiff>:
 8006684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	4689      	mov	r9, r1
 800668a:	4606      	mov	r6, r0
 800668c:	4611      	mov	r1, r2
 800668e:	4648      	mov	r0, r9
 8006690:	4614      	mov	r4, r2
 8006692:	f7ff ffdb 	bl	800664c <__mcmp>
 8006696:	1e05      	subs	r5, r0, #0
 8006698:	d112      	bne.n	80066c0 <__mdiff+0x3c>
 800669a:	4629      	mov	r1, r5
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff fd5b 	bl	8006158 <_Balloc>
 80066a2:	4602      	mov	r2, r0
 80066a4:	b928      	cbnz	r0, 80066b2 <__mdiff+0x2e>
 80066a6:	4b3f      	ldr	r3, [pc, #252]	@ (80067a4 <__mdiff+0x120>)
 80066a8:	f240 2137 	movw	r1, #567	@ 0x237
 80066ac:	483e      	ldr	r0, [pc, #248]	@ (80067a8 <__mdiff+0x124>)
 80066ae:	f000 fb75 	bl	8006d9c <__assert_func>
 80066b2:	2301      	movs	r3, #1
 80066b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066b8:	4610      	mov	r0, r2
 80066ba:	b003      	add	sp, #12
 80066bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c0:	bfbc      	itt	lt
 80066c2:	464b      	movlt	r3, r9
 80066c4:	46a1      	movlt	r9, r4
 80066c6:	4630      	mov	r0, r6
 80066c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80066cc:	bfba      	itte	lt
 80066ce:	461c      	movlt	r4, r3
 80066d0:	2501      	movlt	r5, #1
 80066d2:	2500      	movge	r5, #0
 80066d4:	f7ff fd40 	bl	8006158 <_Balloc>
 80066d8:	4602      	mov	r2, r0
 80066da:	b918      	cbnz	r0, 80066e4 <__mdiff+0x60>
 80066dc:	4b31      	ldr	r3, [pc, #196]	@ (80067a4 <__mdiff+0x120>)
 80066de:	f240 2145 	movw	r1, #581	@ 0x245
 80066e2:	e7e3      	b.n	80066ac <__mdiff+0x28>
 80066e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80066e8:	6926      	ldr	r6, [r4, #16]
 80066ea:	60c5      	str	r5, [r0, #12]
 80066ec:	f109 0310 	add.w	r3, r9, #16
 80066f0:	f109 0514 	add.w	r5, r9, #20
 80066f4:	f104 0e14 	add.w	lr, r4, #20
 80066f8:	f100 0b14 	add.w	fp, r0, #20
 80066fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006700:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	46d9      	mov	r9, fp
 8006708:	f04f 0c00 	mov.w	ip, #0
 800670c:	9b01      	ldr	r3, [sp, #4]
 800670e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006712:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	fa1f f38a 	uxth.w	r3, sl
 800671c:	4619      	mov	r1, r3
 800671e:	b283      	uxth	r3, r0
 8006720:	1acb      	subs	r3, r1, r3
 8006722:	0c00      	lsrs	r0, r0, #16
 8006724:	4463      	add	r3, ip
 8006726:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800672a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800672e:	b29b      	uxth	r3, r3
 8006730:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006734:	4576      	cmp	r6, lr
 8006736:	f849 3b04 	str.w	r3, [r9], #4
 800673a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800673e:	d8e5      	bhi.n	800670c <__mdiff+0x88>
 8006740:	1b33      	subs	r3, r6, r4
 8006742:	3b15      	subs	r3, #21
 8006744:	f023 0303 	bic.w	r3, r3, #3
 8006748:	3415      	adds	r4, #21
 800674a:	3304      	adds	r3, #4
 800674c:	42a6      	cmp	r6, r4
 800674e:	bf38      	it	cc
 8006750:	2304      	movcc	r3, #4
 8006752:	441d      	add	r5, r3
 8006754:	445b      	add	r3, fp
 8006756:	461e      	mov	r6, r3
 8006758:	462c      	mov	r4, r5
 800675a:	4544      	cmp	r4, r8
 800675c:	d30e      	bcc.n	800677c <__mdiff+0xf8>
 800675e:	f108 0103 	add.w	r1, r8, #3
 8006762:	1b49      	subs	r1, r1, r5
 8006764:	f021 0103 	bic.w	r1, r1, #3
 8006768:	3d03      	subs	r5, #3
 800676a:	45a8      	cmp	r8, r5
 800676c:	bf38      	it	cc
 800676e:	2100      	movcc	r1, #0
 8006770:	440b      	add	r3, r1
 8006772:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006776:	b191      	cbz	r1, 800679e <__mdiff+0x11a>
 8006778:	6117      	str	r7, [r2, #16]
 800677a:	e79d      	b.n	80066b8 <__mdiff+0x34>
 800677c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006780:	46e6      	mov	lr, ip
 8006782:	0c08      	lsrs	r0, r1, #16
 8006784:	fa1c fc81 	uxtah	ip, ip, r1
 8006788:	4471      	add	r1, lr
 800678a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800678e:	b289      	uxth	r1, r1
 8006790:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006794:	f846 1b04 	str.w	r1, [r6], #4
 8006798:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800679c:	e7dd      	b.n	800675a <__mdiff+0xd6>
 800679e:	3f01      	subs	r7, #1
 80067a0:	e7e7      	b.n	8006772 <__mdiff+0xee>
 80067a2:	bf00      	nop
 80067a4:	080070fc 	.word	0x080070fc
 80067a8:	0800710d 	.word	0x0800710d

080067ac <__d2b>:
 80067ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067b0:	460f      	mov	r7, r1
 80067b2:	2101      	movs	r1, #1
 80067b4:	ec59 8b10 	vmov	r8, r9, d0
 80067b8:	4616      	mov	r6, r2
 80067ba:	f7ff fccd 	bl	8006158 <_Balloc>
 80067be:	4604      	mov	r4, r0
 80067c0:	b930      	cbnz	r0, 80067d0 <__d2b+0x24>
 80067c2:	4602      	mov	r2, r0
 80067c4:	4b23      	ldr	r3, [pc, #140]	@ (8006854 <__d2b+0xa8>)
 80067c6:	4824      	ldr	r0, [pc, #144]	@ (8006858 <__d2b+0xac>)
 80067c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80067cc:	f000 fae6 	bl	8006d9c <__assert_func>
 80067d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067d8:	b10d      	cbz	r5, 80067de <__d2b+0x32>
 80067da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	f1b8 0300 	subs.w	r3, r8, #0
 80067e4:	d023      	beq.n	800682e <__d2b+0x82>
 80067e6:	4668      	mov	r0, sp
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	f7ff fd7c 	bl	80062e6 <__lo0bits>
 80067ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80067f2:	b1d0      	cbz	r0, 800682a <__d2b+0x7e>
 80067f4:	f1c0 0320 	rsb	r3, r0, #32
 80067f8:	fa02 f303 	lsl.w	r3, r2, r3
 80067fc:	430b      	orrs	r3, r1
 80067fe:	40c2      	lsrs	r2, r0
 8006800:	6163      	str	r3, [r4, #20]
 8006802:	9201      	str	r2, [sp, #4]
 8006804:	9b01      	ldr	r3, [sp, #4]
 8006806:	61a3      	str	r3, [r4, #24]
 8006808:	2b00      	cmp	r3, #0
 800680a:	bf0c      	ite	eq
 800680c:	2201      	moveq	r2, #1
 800680e:	2202      	movne	r2, #2
 8006810:	6122      	str	r2, [r4, #16]
 8006812:	b1a5      	cbz	r5, 800683e <__d2b+0x92>
 8006814:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006818:	4405      	add	r5, r0
 800681a:	603d      	str	r5, [r7, #0]
 800681c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006820:	6030      	str	r0, [r6, #0]
 8006822:	4620      	mov	r0, r4
 8006824:	b003      	add	sp, #12
 8006826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800682a:	6161      	str	r1, [r4, #20]
 800682c:	e7ea      	b.n	8006804 <__d2b+0x58>
 800682e:	a801      	add	r0, sp, #4
 8006830:	f7ff fd59 	bl	80062e6 <__lo0bits>
 8006834:	9b01      	ldr	r3, [sp, #4]
 8006836:	6163      	str	r3, [r4, #20]
 8006838:	3020      	adds	r0, #32
 800683a:	2201      	movs	r2, #1
 800683c:	e7e8      	b.n	8006810 <__d2b+0x64>
 800683e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006842:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006846:	6038      	str	r0, [r7, #0]
 8006848:	6918      	ldr	r0, [r3, #16]
 800684a:	f7ff fd2d 	bl	80062a8 <__hi0bits>
 800684e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006852:	e7e5      	b.n	8006820 <__d2b+0x74>
 8006854:	080070fc 	.word	0x080070fc
 8006858:	0800710d 	.word	0x0800710d

0800685c <__sfputc_r>:
 800685c:	6893      	ldr	r3, [r2, #8]
 800685e:	3b01      	subs	r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	b410      	push	{r4}
 8006864:	6093      	str	r3, [r2, #8]
 8006866:	da08      	bge.n	800687a <__sfputc_r+0x1e>
 8006868:	6994      	ldr	r4, [r2, #24]
 800686a:	42a3      	cmp	r3, r4
 800686c:	db01      	blt.n	8006872 <__sfputc_r+0x16>
 800686e:	290a      	cmp	r1, #10
 8006870:	d103      	bne.n	800687a <__sfputc_r+0x1e>
 8006872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006876:	f000 b9df 	b.w	8006c38 <__swbuf_r>
 800687a:	6813      	ldr	r3, [r2, #0]
 800687c:	1c58      	adds	r0, r3, #1
 800687e:	6010      	str	r0, [r2, #0]
 8006880:	7019      	strb	r1, [r3, #0]
 8006882:	4608      	mov	r0, r1
 8006884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006888:	4770      	bx	lr

0800688a <__sfputs_r>:
 800688a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688c:	4606      	mov	r6, r0
 800688e:	460f      	mov	r7, r1
 8006890:	4614      	mov	r4, r2
 8006892:	18d5      	adds	r5, r2, r3
 8006894:	42ac      	cmp	r4, r5
 8006896:	d101      	bne.n	800689c <__sfputs_r+0x12>
 8006898:	2000      	movs	r0, #0
 800689a:	e007      	b.n	80068ac <__sfputs_r+0x22>
 800689c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a0:	463a      	mov	r2, r7
 80068a2:	4630      	mov	r0, r6
 80068a4:	f7ff ffda 	bl	800685c <__sfputc_r>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d1f3      	bne.n	8006894 <__sfputs_r+0xa>
 80068ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068b0 <_vfiprintf_r>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	460d      	mov	r5, r1
 80068b6:	b09d      	sub	sp, #116	@ 0x74
 80068b8:	4614      	mov	r4, r2
 80068ba:	4698      	mov	r8, r3
 80068bc:	4606      	mov	r6, r0
 80068be:	b118      	cbz	r0, 80068c8 <_vfiprintf_r+0x18>
 80068c0:	6a03      	ldr	r3, [r0, #32]
 80068c2:	b90b      	cbnz	r3, 80068c8 <_vfiprintf_r+0x18>
 80068c4:	f7fe fbee 	bl	80050a4 <__sinit>
 80068c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068ca:	07d9      	lsls	r1, r3, #31
 80068cc:	d405      	bmi.n	80068da <_vfiprintf_r+0x2a>
 80068ce:	89ab      	ldrh	r3, [r5, #12]
 80068d0:	059a      	lsls	r2, r3, #22
 80068d2:	d402      	bmi.n	80068da <_vfiprintf_r+0x2a>
 80068d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068d6:	f7fe fcee 	bl	80052b6 <__retarget_lock_acquire_recursive>
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	071b      	lsls	r3, r3, #28
 80068de:	d501      	bpl.n	80068e4 <_vfiprintf_r+0x34>
 80068e0:	692b      	ldr	r3, [r5, #16]
 80068e2:	b99b      	cbnz	r3, 800690c <_vfiprintf_r+0x5c>
 80068e4:	4629      	mov	r1, r5
 80068e6:	4630      	mov	r0, r6
 80068e8:	f000 f9e4 	bl	8006cb4 <__swsetup_r>
 80068ec:	b170      	cbz	r0, 800690c <_vfiprintf_r+0x5c>
 80068ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068f0:	07dc      	lsls	r4, r3, #31
 80068f2:	d504      	bpl.n	80068fe <_vfiprintf_r+0x4e>
 80068f4:	f04f 30ff 	mov.w	r0, #4294967295
 80068f8:	b01d      	add	sp, #116	@ 0x74
 80068fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fe:	89ab      	ldrh	r3, [r5, #12]
 8006900:	0598      	lsls	r0, r3, #22
 8006902:	d4f7      	bmi.n	80068f4 <_vfiprintf_r+0x44>
 8006904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006906:	f7fe fcd7 	bl	80052b8 <__retarget_lock_release_recursive>
 800690a:	e7f3      	b.n	80068f4 <_vfiprintf_r+0x44>
 800690c:	2300      	movs	r3, #0
 800690e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006910:	2320      	movs	r3, #32
 8006912:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006916:	f8cd 800c 	str.w	r8, [sp, #12]
 800691a:	2330      	movs	r3, #48	@ 0x30
 800691c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006acc <_vfiprintf_r+0x21c>
 8006920:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006924:	f04f 0901 	mov.w	r9, #1
 8006928:	4623      	mov	r3, r4
 800692a:	469a      	mov	sl, r3
 800692c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006930:	b10a      	cbz	r2, 8006936 <_vfiprintf_r+0x86>
 8006932:	2a25      	cmp	r2, #37	@ 0x25
 8006934:	d1f9      	bne.n	800692a <_vfiprintf_r+0x7a>
 8006936:	ebba 0b04 	subs.w	fp, sl, r4
 800693a:	d00b      	beq.n	8006954 <_vfiprintf_r+0xa4>
 800693c:	465b      	mov	r3, fp
 800693e:	4622      	mov	r2, r4
 8006940:	4629      	mov	r1, r5
 8006942:	4630      	mov	r0, r6
 8006944:	f7ff ffa1 	bl	800688a <__sfputs_r>
 8006948:	3001      	adds	r0, #1
 800694a:	f000 80a7 	beq.w	8006a9c <_vfiprintf_r+0x1ec>
 800694e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006950:	445a      	add	r2, fp
 8006952:	9209      	str	r2, [sp, #36]	@ 0x24
 8006954:	f89a 3000 	ldrb.w	r3, [sl]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 809f 	beq.w	8006a9c <_vfiprintf_r+0x1ec>
 800695e:	2300      	movs	r3, #0
 8006960:	f04f 32ff 	mov.w	r2, #4294967295
 8006964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006968:	f10a 0a01 	add.w	sl, sl, #1
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	9307      	str	r3, [sp, #28]
 8006970:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006974:	931a      	str	r3, [sp, #104]	@ 0x68
 8006976:	4654      	mov	r4, sl
 8006978:	2205      	movs	r2, #5
 800697a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800697e:	4853      	ldr	r0, [pc, #332]	@ (8006acc <_vfiprintf_r+0x21c>)
 8006980:	f7f9 fc36 	bl	80001f0 <memchr>
 8006984:	9a04      	ldr	r2, [sp, #16]
 8006986:	b9d8      	cbnz	r0, 80069c0 <_vfiprintf_r+0x110>
 8006988:	06d1      	lsls	r1, r2, #27
 800698a:	bf44      	itt	mi
 800698c:	2320      	movmi	r3, #32
 800698e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006992:	0713      	lsls	r3, r2, #28
 8006994:	bf44      	itt	mi
 8006996:	232b      	movmi	r3, #43	@ 0x2b
 8006998:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800699c:	f89a 3000 	ldrb.w	r3, [sl]
 80069a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80069a2:	d015      	beq.n	80069d0 <_vfiprintf_r+0x120>
 80069a4:	9a07      	ldr	r2, [sp, #28]
 80069a6:	4654      	mov	r4, sl
 80069a8:	2000      	movs	r0, #0
 80069aa:	f04f 0c0a 	mov.w	ip, #10
 80069ae:	4621      	mov	r1, r4
 80069b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069b4:	3b30      	subs	r3, #48	@ 0x30
 80069b6:	2b09      	cmp	r3, #9
 80069b8:	d94b      	bls.n	8006a52 <_vfiprintf_r+0x1a2>
 80069ba:	b1b0      	cbz	r0, 80069ea <_vfiprintf_r+0x13a>
 80069bc:	9207      	str	r2, [sp, #28]
 80069be:	e014      	b.n	80069ea <_vfiprintf_r+0x13a>
 80069c0:	eba0 0308 	sub.w	r3, r0, r8
 80069c4:	fa09 f303 	lsl.w	r3, r9, r3
 80069c8:	4313      	orrs	r3, r2
 80069ca:	9304      	str	r3, [sp, #16]
 80069cc:	46a2      	mov	sl, r4
 80069ce:	e7d2      	b.n	8006976 <_vfiprintf_r+0xc6>
 80069d0:	9b03      	ldr	r3, [sp, #12]
 80069d2:	1d19      	adds	r1, r3, #4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	9103      	str	r1, [sp, #12]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bfbb      	ittet	lt
 80069dc:	425b      	neglt	r3, r3
 80069de:	f042 0202 	orrlt.w	r2, r2, #2
 80069e2:	9307      	strge	r3, [sp, #28]
 80069e4:	9307      	strlt	r3, [sp, #28]
 80069e6:	bfb8      	it	lt
 80069e8:	9204      	strlt	r2, [sp, #16]
 80069ea:	7823      	ldrb	r3, [r4, #0]
 80069ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80069ee:	d10a      	bne.n	8006a06 <_vfiprintf_r+0x156>
 80069f0:	7863      	ldrb	r3, [r4, #1]
 80069f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80069f4:	d132      	bne.n	8006a5c <_vfiprintf_r+0x1ac>
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	1d1a      	adds	r2, r3, #4
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	9203      	str	r2, [sp, #12]
 80069fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a02:	3402      	adds	r4, #2
 8006a04:	9305      	str	r3, [sp, #20]
 8006a06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006adc <_vfiprintf_r+0x22c>
 8006a0a:	7821      	ldrb	r1, [r4, #0]
 8006a0c:	2203      	movs	r2, #3
 8006a0e:	4650      	mov	r0, sl
 8006a10:	f7f9 fbee 	bl	80001f0 <memchr>
 8006a14:	b138      	cbz	r0, 8006a26 <_vfiprintf_r+0x176>
 8006a16:	9b04      	ldr	r3, [sp, #16]
 8006a18:	eba0 000a 	sub.w	r0, r0, sl
 8006a1c:	2240      	movs	r2, #64	@ 0x40
 8006a1e:	4082      	lsls	r2, r0
 8006a20:	4313      	orrs	r3, r2
 8006a22:	3401      	adds	r4, #1
 8006a24:	9304      	str	r3, [sp, #16]
 8006a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a2a:	4829      	ldr	r0, [pc, #164]	@ (8006ad0 <_vfiprintf_r+0x220>)
 8006a2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a30:	2206      	movs	r2, #6
 8006a32:	f7f9 fbdd 	bl	80001f0 <memchr>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d03f      	beq.n	8006aba <_vfiprintf_r+0x20a>
 8006a3a:	4b26      	ldr	r3, [pc, #152]	@ (8006ad4 <_vfiprintf_r+0x224>)
 8006a3c:	bb1b      	cbnz	r3, 8006a86 <_vfiprintf_r+0x1d6>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	3307      	adds	r3, #7
 8006a42:	f023 0307 	bic.w	r3, r3, #7
 8006a46:	3308      	adds	r3, #8
 8006a48:	9303      	str	r3, [sp, #12]
 8006a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a4c:	443b      	add	r3, r7
 8006a4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a50:	e76a      	b.n	8006928 <_vfiprintf_r+0x78>
 8006a52:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a56:	460c      	mov	r4, r1
 8006a58:	2001      	movs	r0, #1
 8006a5a:	e7a8      	b.n	80069ae <_vfiprintf_r+0xfe>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	3401      	adds	r4, #1
 8006a60:	9305      	str	r3, [sp, #20]
 8006a62:	4619      	mov	r1, r3
 8006a64:	f04f 0c0a 	mov.w	ip, #10
 8006a68:	4620      	mov	r0, r4
 8006a6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a6e:	3a30      	subs	r2, #48	@ 0x30
 8006a70:	2a09      	cmp	r2, #9
 8006a72:	d903      	bls.n	8006a7c <_vfiprintf_r+0x1cc>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0c6      	beq.n	8006a06 <_vfiprintf_r+0x156>
 8006a78:	9105      	str	r1, [sp, #20]
 8006a7a:	e7c4      	b.n	8006a06 <_vfiprintf_r+0x156>
 8006a7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a80:	4604      	mov	r4, r0
 8006a82:	2301      	movs	r3, #1
 8006a84:	e7f0      	b.n	8006a68 <_vfiprintf_r+0x1b8>
 8006a86:	ab03      	add	r3, sp, #12
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	462a      	mov	r2, r5
 8006a8c:	4b12      	ldr	r3, [pc, #72]	@ (8006ad8 <_vfiprintf_r+0x228>)
 8006a8e:	a904      	add	r1, sp, #16
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7fd fec3 	bl	800481c <_printf_float>
 8006a96:	4607      	mov	r7, r0
 8006a98:	1c78      	adds	r0, r7, #1
 8006a9a:	d1d6      	bne.n	8006a4a <_vfiprintf_r+0x19a>
 8006a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a9e:	07d9      	lsls	r1, r3, #31
 8006aa0:	d405      	bmi.n	8006aae <_vfiprintf_r+0x1fe>
 8006aa2:	89ab      	ldrh	r3, [r5, #12]
 8006aa4:	059a      	lsls	r2, r3, #22
 8006aa6:	d402      	bmi.n	8006aae <_vfiprintf_r+0x1fe>
 8006aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006aaa:	f7fe fc05 	bl	80052b8 <__retarget_lock_release_recursive>
 8006aae:	89ab      	ldrh	r3, [r5, #12]
 8006ab0:	065b      	lsls	r3, r3, #25
 8006ab2:	f53f af1f 	bmi.w	80068f4 <_vfiprintf_r+0x44>
 8006ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ab8:	e71e      	b.n	80068f8 <_vfiprintf_r+0x48>
 8006aba:	ab03      	add	r3, sp, #12
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	462a      	mov	r2, r5
 8006ac0:	4b05      	ldr	r3, [pc, #20]	@ (8006ad8 <_vfiprintf_r+0x228>)
 8006ac2:	a904      	add	r1, sp, #16
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f7fe f941 	bl	8004d4c <_printf_i>
 8006aca:	e7e4      	b.n	8006a96 <_vfiprintf_r+0x1e6>
 8006acc:	08007268 	.word	0x08007268
 8006ad0:	08007272 	.word	0x08007272
 8006ad4:	0800481d 	.word	0x0800481d
 8006ad8:	0800688b 	.word	0x0800688b
 8006adc:	0800726e 	.word	0x0800726e

08006ae0 <__sflush_r>:
 8006ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae8:	0716      	lsls	r6, r2, #28
 8006aea:	4605      	mov	r5, r0
 8006aec:	460c      	mov	r4, r1
 8006aee:	d454      	bmi.n	8006b9a <__sflush_r+0xba>
 8006af0:	684b      	ldr	r3, [r1, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dc02      	bgt.n	8006afc <__sflush_r+0x1c>
 8006af6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	dd48      	ble.n	8006b8e <__sflush_r+0xae>
 8006afc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006afe:	2e00      	cmp	r6, #0
 8006b00:	d045      	beq.n	8006b8e <__sflush_r+0xae>
 8006b02:	2300      	movs	r3, #0
 8006b04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b08:	682f      	ldr	r7, [r5, #0]
 8006b0a:	6a21      	ldr	r1, [r4, #32]
 8006b0c:	602b      	str	r3, [r5, #0]
 8006b0e:	d030      	beq.n	8006b72 <__sflush_r+0x92>
 8006b10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	0759      	lsls	r1, r3, #29
 8006b16:	d505      	bpl.n	8006b24 <__sflush_r+0x44>
 8006b18:	6863      	ldr	r3, [r4, #4]
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b1e:	b10b      	cbz	r3, 8006b24 <__sflush_r+0x44>
 8006b20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	2300      	movs	r3, #0
 8006b26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b28:	6a21      	ldr	r1, [r4, #32]
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	47b0      	blx	r6
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	d106      	bne.n	8006b42 <__sflush_r+0x62>
 8006b34:	6829      	ldr	r1, [r5, #0]
 8006b36:	291d      	cmp	r1, #29
 8006b38:	d82b      	bhi.n	8006b92 <__sflush_r+0xb2>
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006be4 <__sflush_r+0x104>)
 8006b3c:	410a      	asrs	r2, r1
 8006b3e:	07d6      	lsls	r6, r2, #31
 8006b40:	d427      	bmi.n	8006b92 <__sflush_r+0xb2>
 8006b42:	2200      	movs	r2, #0
 8006b44:	6062      	str	r2, [r4, #4]
 8006b46:	04d9      	lsls	r1, r3, #19
 8006b48:	6922      	ldr	r2, [r4, #16]
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	d504      	bpl.n	8006b58 <__sflush_r+0x78>
 8006b4e:	1c42      	adds	r2, r0, #1
 8006b50:	d101      	bne.n	8006b56 <__sflush_r+0x76>
 8006b52:	682b      	ldr	r3, [r5, #0]
 8006b54:	b903      	cbnz	r3, 8006b58 <__sflush_r+0x78>
 8006b56:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b5a:	602f      	str	r7, [r5, #0]
 8006b5c:	b1b9      	cbz	r1, 8006b8e <__sflush_r+0xae>
 8006b5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b62:	4299      	cmp	r1, r3
 8006b64:	d002      	beq.n	8006b6c <__sflush_r+0x8c>
 8006b66:	4628      	mov	r0, r5
 8006b68:	f7ff f9f6 	bl	8005f58 <_free_r>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b70:	e00d      	b.n	8006b8e <__sflush_r+0xae>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b0      	blx	r6
 8006b78:	4602      	mov	r2, r0
 8006b7a:	1c50      	adds	r0, r2, #1
 8006b7c:	d1c9      	bne.n	8006b12 <__sflush_r+0x32>
 8006b7e:	682b      	ldr	r3, [r5, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0c6      	beq.n	8006b12 <__sflush_r+0x32>
 8006b84:	2b1d      	cmp	r3, #29
 8006b86:	d001      	beq.n	8006b8c <__sflush_r+0xac>
 8006b88:	2b16      	cmp	r3, #22
 8006b8a:	d11e      	bne.n	8006bca <__sflush_r+0xea>
 8006b8c:	602f      	str	r7, [r5, #0]
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e022      	b.n	8006bd8 <__sflush_r+0xf8>
 8006b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b96:	b21b      	sxth	r3, r3
 8006b98:	e01b      	b.n	8006bd2 <__sflush_r+0xf2>
 8006b9a:	690f      	ldr	r7, [r1, #16]
 8006b9c:	2f00      	cmp	r7, #0
 8006b9e:	d0f6      	beq.n	8006b8e <__sflush_r+0xae>
 8006ba0:	0793      	lsls	r3, r2, #30
 8006ba2:	680e      	ldr	r6, [r1, #0]
 8006ba4:	bf08      	it	eq
 8006ba6:	694b      	ldreq	r3, [r1, #20]
 8006ba8:	600f      	str	r7, [r1, #0]
 8006baa:	bf18      	it	ne
 8006bac:	2300      	movne	r3, #0
 8006bae:	eba6 0807 	sub.w	r8, r6, r7
 8006bb2:	608b      	str	r3, [r1, #8]
 8006bb4:	f1b8 0f00 	cmp.w	r8, #0
 8006bb8:	dde9      	ble.n	8006b8e <__sflush_r+0xae>
 8006bba:	6a21      	ldr	r1, [r4, #32]
 8006bbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006bbe:	4643      	mov	r3, r8
 8006bc0:	463a      	mov	r2, r7
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	47b0      	blx	r6
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	dc08      	bgt.n	8006bdc <__sflush_r+0xfc>
 8006bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bdc:	4407      	add	r7, r0
 8006bde:	eba8 0800 	sub.w	r8, r8, r0
 8006be2:	e7e7      	b.n	8006bb4 <__sflush_r+0xd4>
 8006be4:	dfbffffe 	.word	0xdfbffffe

08006be8 <_fflush_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	690b      	ldr	r3, [r1, #16]
 8006bec:	4605      	mov	r5, r0
 8006bee:	460c      	mov	r4, r1
 8006bf0:	b913      	cbnz	r3, 8006bf8 <_fflush_r+0x10>
 8006bf2:	2500      	movs	r5, #0
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	b118      	cbz	r0, 8006c02 <_fflush_r+0x1a>
 8006bfa:	6a03      	ldr	r3, [r0, #32]
 8006bfc:	b90b      	cbnz	r3, 8006c02 <_fflush_r+0x1a>
 8006bfe:	f7fe fa51 	bl	80050a4 <__sinit>
 8006c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d0f3      	beq.n	8006bf2 <_fflush_r+0xa>
 8006c0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c0c:	07d0      	lsls	r0, r2, #31
 8006c0e:	d404      	bmi.n	8006c1a <_fflush_r+0x32>
 8006c10:	0599      	lsls	r1, r3, #22
 8006c12:	d402      	bmi.n	8006c1a <_fflush_r+0x32>
 8006c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c16:	f7fe fb4e 	bl	80052b6 <__retarget_lock_acquire_recursive>
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	f7ff ff5f 	bl	8006ae0 <__sflush_r>
 8006c22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c24:	07da      	lsls	r2, r3, #31
 8006c26:	4605      	mov	r5, r0
 8006c28:	d4e4      	bmi.n	8006bf4 <_fflush_r+0xc>
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	059b      	lsls	r3, r3, #22
 8006c2e:	d4e1      	bmi.n	8006bf4 <_fflush_r+0xc>
 8006c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c32:	f7fe fb41 	bl	80052b8 <__retarget_lock_release_recursive>
 8006c36:	e7dd      	b.n	8006bf4 <_fflush_r+0xc>

08006c38 <__swbuf_r>:
 8006c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3a:	460e      	mov	r6, r1
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	4605      	mov	r5, r0
 8006c40:	b118      	cbz	r0, 8006c4a <__swbuf_r+0x12>
 8006c42:	6a03      	ldr	r3, [r0, #32]
 8006c44:	b90b      	cbnz	r3, 8006c4a <__swbuf_r+0x12>
 8006c46:	f7fe fa2d 	bl	80050a4 <__sinit>
 8006c4a:	69a3      	ldr	r3, [r4, #24]
 8006c4c:	60a3      	str	r3, [r4, #8]
 8006c4e:	89a3      	ldrh	r3, [r4, #12]
 8006c50:	071a      	lsls	r2, r3, #28
 8006c52:	d501      	bpl.n	8006c58 <__swbuf_r+0x20>
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	b943      	cbnz	r3, 8006c6a <__swbuf_r+0x32>
 8006c58:	4621      	mov	r1, r4
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f000 f82a 	bl	8006cb4 <__swsetup_r>
 8006c60:	b118      	cbz	r0, 8006c6a <__swbuf_r+0x32>
 8006c62:	f04f 37ff 	mov.w	r7, #4294967295
 8006c66:	4638      	mov	r0, r7
 8006c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	6922      	ldr	r2, [r4, #16]
 8006c6e:	1a98      	subs	r0, r3, r2
 8006c70:	6963      	ldr	r3, [r4, #20]
 8006c72:	b2f6      	uxtb	r6, r6
 8006c74:	4283      	cmp	r3, r0
 8006c76:	4637      	mov	r7, r6
 8006c78:	dc05      	bgt.n	8006c86 <__swbuf_r+0x4e>
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	f7ff ffb3 	bl	8006be8 <_fflush_r>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d1ed      	bne.n	8006c62 <__swbuf_r+0x2a>
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	60a3      	str	r3, [r4, #8]
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	6022      	str	r2, [r4, #0]
 8006c92:	701e      	strb	r6, [r3, #0]
 8006c94:	6962      	ldr	r2, [r4, #20]
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d004      	beq.n	8006ca6 <__swbuf_r+0x6e>
 8006c9c:	89a3      	ldrh	r3, [r4, #12]
 8006c9e:	07db      	lsls	r3, r3, #31
 8006ca0:	d5e1      	bpl.n	8006c66 <__swbuf_r+0x2e>
 8006ca2:	2e0a      	cmp	r6, #10
 8006ca4:	d1df      	bne.n	8006c66 <__swbuf_r+0x2e>
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f7ff ff9d 	bl	8006be8 <_fflush_r>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d0d9      	beq.n	8006c66 <__swbuf_r+0x2e>
 8006cb2:	e7d6      	b.n	8006c62 <__swbuf_r+0x2a>

08006cb4 <__swsetup_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4b29      	ldr	r3, [pc, #164]	@ (8006d5c <__swsetup_r+0xa8>)
 8006cb8:	4605      	mov	r5, r0
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	b118      	cbz	r0, 8006cc8 <__swsetup_r+0x14>
 8006cc0:	6a03      	ldr	r3, [r0, #32]
 8006cc2:	b90b      	cbnz	r3, 8006cc8 <__swsetup_r+0x14>
 8006cc4:	f7fe f9ee 	bl	80050a4 <__sinit>
 8006cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ccc:	0719      	lsls	r1, r3, #28
 8006cce:	d422      	bmi.n	8006d16 <__swsetup_r+0x62>
 8006cd0:	06da      	lsls	r2, r3, #27
 8006cd2:	d407      	bmi.n	8006ce4 <__swsetup_r+0x30>
 8006cd4:	2209      	movs	r2, #9
 8006cd6:	602a      	str	r2, [r5, #0]
 8006cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cdc:	81a3      	strh	r3, [r4, #12]
 8006cde:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce2:	e033      	b.n	8006d4c <__swsetup_r+0x98>
 8006ce4:	0758      	lsls	r0, r3, #29
 8006ce6:	d512      	bpl.n	8006d0e <__swsetup_r+0x5a>
 8006ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cea:	b141      	cbz	r1, 8006cfe <__swsetup_r+0x4a>
 8006cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006cf0:	4299      	cmp	r1, r3
 8006cf2:	d002      	beq.n	8006cfa <__swsetup_r+0x46>
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f7ff f92f 	bl	8005f58 <_free_r>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	2300      	movs	r3, #0
 8006d08:	6063      	str	r3, [r4, #4]
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	f043 0308 	orr.w	r3, r3, #8
 8006d14:	81a3      	strh	r3, [r4, #12]
 8006d16:	6923      	ldr	r3, [r4, #16]
 8006d18:	b94b      	cbnz	r3, 8006d2e <__swsetup_r+0x7a>
 8006d1a:	89a3      	ldrh	r3, [r4, #12]
 8006d1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d24:	d003      	beq.n	8006d2e <__swsetup_r+0x7a>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 f8c1 	bl	8006eb0 <__smakebuf_r>
 8006d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d32:	f013 0201 	ands.w	r2, r3, #1
 8006d36:	d00a      	beq.n	8006d4e <__swsetup_r+0x9a>
 8006d38:	2200      	movs	r2, #0
 8006d3a:	60a2      	str	r2, [r4, #8]
 8006d3c:	6962      	ldr	r2, [r4, #20]
 8006d3e:	4252      	negs	r2, r2
 8006d40:	61a2      	str	r2, [r4, #24]
 8006d42:	6922      	ldr	r2, [r4, #16]
 8006d44:	b942      	cbnz	r2, 8006d58 <__swsetup_r+0xa4>
 8006d46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006d4a:	d1c5      	bne.n	8006cd8 <__swsetup_r+0x24>
 8006d4c:	bd38      	pop	{r3, r4, r5, pc}
 8006d4e:	0799      	lsls	r1, r3, #30
 8006d50:	bf58      	it	pl
 8006d52:	6962      	ldrpl	r2, [r4, #20]
 8006d54:	60a2      	str	r2, [r4, #8]
 8006d56:	e7f4      	b.n	8006d42 <__swsetup_r+0x8e>
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e7f7      	b.n	8006d4c <__swsetup_r+0x98>
 8006d5c:	20000018 	.word	0x20000018

08006d60 <_sbrk_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d06      	ldr	r5, [pc, #24]	@ (8006d7c <_sbrk_r+0x1c>)
 8006d64:	2300      	movs	r3, #0
 8006d66:	4604      	mov	r4, r0
 8006d68:	4608      	mov	r0, r1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	f7fa fdc6 	bl	80018fc <_sbrk>
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d102      	bne.n	8006d7a <_sbrk_r+0x1a>
 8006d74:	682b      	ldr	r3, [r5, #0]
 8006d76:	b103      	cbz	r3, 8006d7a <_sbrk_r+0x1a>
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}
 8006d7c:	20000ae8 	.word	0x20000ae8

08006d80 <memcpy>:
 8006d80:	440a      	add	r2, r1
 8006d82:	4291      	cmp	r1, r2
 8006d84:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d88:	d100      	bne.n	8006d8c <memcpy+0xc>
 8006d8a:	4770      	bx	lr
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d96:	4291      	cmp	r1, r2
 8006d98:	d1f9      	bne.n	8006d8e <memcpy+0xe>
 8006d9a:	bd10      	pop	{r4, pc}

08006d9c <__assert_func>:
 8006d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d9e:	4614      	mov	r4, r2
 8006da0:	461a      	mov	r2, r3
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <__assert_func+0x2c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4605      	mov	r5, r0
 8006da8:	68d8      	ldr	r0, [r3, #12]
 8006daa:	b954      	cbnz	r4, 8006dc2 <__assert_func+0x26>
 8006dac:	4b07      	ldr	r3, [pc, #28]	@ (8006dcc <__assert_func+0x30>)
 8006dae:	461c      	mov	r4, r3
 8006db0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006db4:	9100      	str	r1, [sp, #0]
 8006db6:	462b      	mov	r3, r5
 8006db8:	4905      	ldr	r1, [pc, #20]	@ (8006dd0 <__assert_func+0x34>)
 8006dba:	f000 f841 	bl	8006e40 <fiprintf>
 8006dbe:	f000 f8d5 	bl	8006f6c <abort>
 8006dc2:	4b04      	ldr	r3, [pc, #16]	@ (8006dd4 <__assert_func+0x38>)
 8006dc4:	e7f4      	b.n	8006db0 <__assert_func+0x14>
 8006dc6:	bf00      	nop
 8006dc8:	20000018 	.word	0x20000018
 8006dcc:	080072be 	.word	0x080072be
 8006dd0:	08007290 	.word	0x08007290
 8006dd4:	08007283 	.word	0x08007283

08006dd8 <_calloc_r>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	fba1 5402 	umull	r5, r4, r1, r2
 8006dde:	b93c      	cbnz	r4, 8006df0 <_calloc_r+0x18>
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7ff f92d 	bl	8006040 <_malloc_r>
 8006de6:	4606      	mov	r6, r0
 8006de8:	b928      	cbnz	r0, 8006df6 <_calloc_r+0x1e>
 8006dea:	2600      	movs	r6, #0
 8006dec:	4630      	mov	r0, r6
 8006dee:	bd70      	pop	{r4, r5, r6, pc}
 8006df0:	220c      	movs	r2, #12
 8006df2:	6002      	str	r2, [r0, #0]
 8006df4:	e7f9      	b.n	8006dea <_calloc_r+0x12>
 8006df6:	462a      	mov	r2, r5
 8006df8:	4621      	mov	r1, r4
 8006dfa:	f7fe f9de 	bl	80051ba <memset>
 8006dfe:	e7f5      	b.n	8006dec <_calloc_r+0x14>

08006e00 <__ascii_mbtowc>:
 8006e00:	b082      	sub	sp, #8
 8006e02:	b901      	cbnz	r1, 8006e06 <__ascii_mbtowc+0x6>
 8006e04:	a901      	add	r1, sp, #4
 8006e06:	b142      	cbz	r2, 8006e1a <__ascii_mbtowc+0x1a>
 8006e08:	b14b      	cbz	r3, 8006e1e <__ascii_mbtowc+0x1e>
 8006e0a:	7813      	ldrb	r3, [r2, #0]
 8006e0c:	600b      	str	r3, [r1, #0]
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	1e10      	subs	r0, r2, #0
 8006e12:	bf18      	it	ne
 8006e14:	2001      	movne	r0, #1
 8006e16:	b002      	add	sp, #8
 8006e18:	4770      	bx	lr
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	e7fb      	b.n	8006e16 <__ascii_mbtowc+0x16>
 8006e1e:	f06f 0001 	mvn.w	r0, #1
 8006e22:	e7f8      	b.n	8006e16 <__ascii_mbtowc+0x16>

08006e24 <__ascii_wctomb>:
 8006e24:	4603      	mov	r3, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	b141      	cbz	r1, 8006e3c <__ascii_wctomb+0x18>
 8006e2a:	2aff      	cmp	r2, #255	@ 0xff
 8006e2c:	d904      	bls.n	8006e38 <__ascii_wctomb+0x14>
 8006e2e:	228a      	movs	r2, #138	@ 0x8a
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	f04f 30ff 	mov.w	r0, #4294967295
 8006e36:	4770      	bx	lr
 8006e38:	700a      	strb	r2, [r1, #0]
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	4770      	bx	lr
	...

08006e40 <fiprintf>:
 8006e40:	b40e      	push	{r1, r2, r3}
 8006e42:	b503      	push	{r0, r1, lr}
 8006e44:	4601      	mov	r1, r0
 8006e46:	ab03      	add	r3, sp, #12
 8006e48:	4805      	ldr	r0, [pc, #20]	@ (8006e60 <fiprintf+0x20>)
 8006e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e4e:	6800      	ldr	r0, [r0, #0]
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	f7ff fd2d 	bl	80068b0 <_vfiprintf_r>
 8006e56:	b002      	add	sp, #8
 8006e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e5c:	b003      	add	sp, #12
 8006e5e:	4770      	bx	lr
 8006e60:	20000018 	.word	0x20000018

08006e64 <__swhatbuf_r>:
 8006e64:	b570      	push	{r4, r5, r6, lr}
 8006e66:	460c      	mov	r4, r1
 8006e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	b096      	sub	sp, #88	@ 0x58
 8006e70:	4615      	mov	r5, r2
 8006e72:	461e      	mov	r6, r3
 8006e74:	da0d      	bge.n	8006e92 <__swhatbuf_r+0x2e>
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e7c:	f04f 0100 	mov.w	r1, #0
 8006e80:	bf14      	ite	ne
 8006e82:	2340      	movne	r3, #64	@ 0x40
 8006e84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e88:	2000      	movs	r0, #0
 8006e8a:	6031      	str	r1, [r6, #0]
 8006e8c:	602b      	str	r3, [r5, #0]
 8006e8e:	b016      	add	sp, #88	@ 0x58
 8006e90:	bd70      	pop	{r4, r5, r6, pc}
 8006e92:	466a      	mov	r2, sp
 8006e94:	f000 f848 	bl	8006f28 <_fstat_r>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	dbec      	blt.n	8006e76 <__swhatbuf_r+0x12>
 8006e9c:	9901      	ldr	r1, [sp, #4]
 8006e9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ea2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006ea6:	4259      	negs	r1, r3
 8006ea8:	4159      	adcs	r1, r3
 8006eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006eae:	e7eb      	b.n	8006e88 <__swhatbuf_r+0x24>

08006eb0 <__smakebuf_r>:
 8006eb0:	898b      	ldrh	r3, [r1, #12]
 8006eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb4:	079d      	lsls	r5, r3, #30
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	d507      	bpl.n	8006ecc <__smakebuf_r+0x1c>
 8006ebc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	6123      	str	r3, [r4, #16]
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	6163      	str	r3, [r4, #20]
 8006ec8:	b003      	add	sp, #12
 8006eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ecc:	ab01      	add	r3, sp, #4
 8006ece:	466a      	mov	r2, sp
 8006ed0:	f7ff ffc8 	bl	8006e64 <__swhatbuf_r>
 8006ed4:	9f00      	ldr	r7, [sp, #0]
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	4639      	mov	r1, r7
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7ff f8b0 	bl	8006040 <_malloc_r>
 8006ee0:	b948      	cbnz	r0, 8006ef6 <__smakebuf_r+0x46>
 8006ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee6:	059a      	lsls	r2, r3, #22
 8006ee8:	d4ee      	bmi.n	8006ec8 <__smakebuf_r+0x18>
 8006eea:	f023 0303 	bic.w	r3, r3, #3
 8006eee:	f043 0302 	orr.w	r3, r3, #2
 8006ef2:	81a3      	strh	r3, [r4, #12]
 8006ef4:	e7e2      	b.n	8006ebc <__smakebuf_r+0xc>
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	6020      	str	r0, [r4, #0]
 8006efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006efe:	81a3      	strh	r3, [r4, #12]
 8006f00:	9b01      	ldr	r3, [sp, #4]
 8006f02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006f06:	b15b      	cbz	r3, 8006f20 <__smakebuf_r+0x70>
 8006f08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	f000 f81d 	bl	8006f4c <_isatty_r>
 8006f12:	b128      	cbz	r0, 8006f20 <__smakebuf_r+0x70>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	f023 0303 	bic.w	r3, r3, #3
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	81a3      	strh	r3, [r4, #12]
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	431d      	orrs	r5, r3
 8006f24:	81a5      	strh	r5, [r4, #12]
 8006f26:	e7cf      	b.n	8006ec8 <__smakebuf_r+0x18>

08006f28 <_fstat_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	@ (8006f48 <_fstat_r+0x20>)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	4611      	mov	r1, r2
 8006f34:	602b      	str	r3, [r5, #0]
 8006f36:	f7fa fcb9 	bl	80018ac <_fstat>
 8006f3a:	1c43      	adds	r3, r0, #1
 8006f3c:	d102      	bne.n	8006f44 <_fstat_r+0x1c>
 8006f3e:	682b      	ldr	r3, [r5, #0]
 8006f40:	b103      	cbz	r3, 8006f44 <_fstat_r+0x1c>
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
 8006f46:	bf00      	nop
 8006f48:	20000ae8 	.word	0x20000ae8

08006f4c <_isatty_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d06      	ldr	r5, [pc, #24]	@ (8006f68 <_isatty_r+0x1c>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	602b      	str	r3, [r5, #0]
 8006f58:	f7fa fcb8 	bl	80018cc <_isatty>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_isatty_r+0x1a>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_isatty_r+0x1a>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	20000ae8 	.word	0x20000ae8

08006f6c <abort>:
 8006f6c:	b508      	push	{r3, lr}
 8006f6e:	2006      	movs	r0, #6
 8006f70:	f000 f82c 	bl	8006fcc <raise>
 8006f74:	2001      	movs	r0, #1
 8006f76:	f7fa fc49 	bl	800180c <_exit>

08006f7a <_raise_r>:
 8006f7a:	291f      	cmp	r1, #31
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4605      	mov	r5, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	d904      	bls.n	8006f8e <_raise_r+0x14>
 8006f84:	2316      	movs	r3, #22
 8006f86:	6003      	str	r3, [r0, #0]
 8006f88:	f04f 30ff 	mov.w	r0, #4294967295
 8006f8c:	bd38      	pop	{r3, r4, r5, pc}
 8006f8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006f90:	b112      	cbz	r2, 8006f98 <_raise_r+0x1e>
 8006f92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f96:	b94b      	cbnz	r3, 8006fac <_raise_r+0x32>
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f000 f831 	bl	8007000 <_getpid_r>
 8006f9e:	4622      	mov	r2, r4
 8006fa0:	4601      	mov	r1, r0
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fa8:	f000 b818 	b.w	8006fdc <_kill_r>
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d00a      	beq.n	8006fc6 <_raise_r+0x4c>
 8006fb0:	1c59      	adds	r1, r3, #1
 8006fb2:	d103      	bne.n	8006fbc <_raise_r+0x42>
 8006fb4:	2316      	movs	r3, #22
 8006fb6:	6003      	str	r3, [r0, #0]
 8006fb8:	2001      	movs	r0, #1
 8006fba:	e7e7      	b.n	8006f8c <_raise_r+0x12>
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	4798      	blx	r3
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	e7e0      	b.n	8006f8c <_raise_r+0x12>
	...

08006fcc <raise>:
 8006fcc:	4b02      	ldr	r3, [pc, #8]	@ (8006fd8 <raise+0xc>)
 8006fce:	4601      	mov	r1, r0
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	f7ff bfd2 	b.w	8006f7a <_raise_r>
 8006fd6:	bf00      	nop
 8006fd8:	20000018 	.word	0x20000018

08006fdc <_kill_r>:
 8006fdc:	b538      	push	{r3, r4, r5, lr}
 8006fde:	4d07      	ldr	r5, [pc, #28]	@ (8006ffc <_kill_r+0x20>)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	4608      	mov	r0, r1
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	602b      	str	r3, [r5, #0]
 8006fea:	f7fa fbff 	bl	80017ec <_kill>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d102      	bne.n	8006ff8 <_kill_r+0x1c>
 8006ff2:	682b      	ldr	r3, [r5, #0]
 8006ff4:	b103      	cbz	r3, 8006ff8 <_kill_r+0x1c>
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	bd38      	pop	{r3, r4, r5, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20000ae8 	.word	0x20000ae8

08007000 <_getpid_r>:
 8007000:	f7fa bbec 	b.w	80017dc <_getpid>

08007004 <_init>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr

08007010 <_fini>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	bf00      	nop
 8007014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007016:	bc08      	pop	{r3}
 8007018:	469e      	mov	lr, r3
 800701a:	4770      	bx	lr
